// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmlogin.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mmlogin.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace micromsg {
class ECDHKeyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ECDHKey> {
} _ECDHKey_default_instance_;
class NewRegRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NewRegRequest> {
} _NewRegRequest_default_instance_;
class SecAuthRegKeySectDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SecAuthRegKeySect> {
} _SecAuthRegKeySect_default_instance_;
class NewRegResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NewRegResponse> {
} _NewRegResponse_default_instance_;
class GetSuggestAliasRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetSuggestAliasRequest> {
} _GetSuggestAliasRequest_default_instance_;
class GetSuggestAliasResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetSuggestAliasResponse> {
} _GetSuggestAliasResponse_default_instance_;
class BindOpMobileRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BindOpMobileRequest> {
} _BindOpMobileRequest_default_instance_;
class BindOpMobileResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BindOpMobileResponse> {
} _BindOpMobileResponse_default_instance_;
class EmailRegRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EmailRegRequest> {
} _EmailRegRequest_default_instance_;
class EmailRegResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EmailRegResponse> {
} _EmailRegResponse_default_instance_;
class SetEmailPwdRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SetEmailPwdRequest> {
} _SetEmailPwdRequest_default_instance_;
class SetEmailPwdResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SetEmailPwdResponse> {
} _SetEmailPwdResponse_default_instance_;
class UpdateSafeDeviceRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UpdateSafeDeviceRequest> {
} _UpdateSafeDeviceRequest_default_instance_;
class UpdateSafeDeviceResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UpdateSafeDeviceResponse> {
} _UpdateSafeDeviceResponse_default_instance_;
class DelSafeDeviceRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DelSafeDeviceRequest> {
} _DelSafeDeviceRequest_default_instance_;
class DelSafeDeviceResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DelSafeDeviceResponse> {
} _DelSafeDeviceResponse_default_instance_;
class BindSafeMobileRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BindSafeMobileRequest> {
} _BindSafeMobileRequest_default_instance_;
class BindSafeMobileResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BindSafeMobileResponse> {
} _BindSafeMobileResponse_default_instance_;
class BindQQRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BindQQRequest> {
} _BindQQRequest_default_instance_;
class BindQQResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BindQQResponse> {
} _BindQQResponse_default_instance_;
class ResetPwdRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResetPwdRequest> {
} _ResetPwdRequest_default_instance_;
class ResetPwdResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResetPwdResponse> {
} _ResetPwdResponse_default_instance_;
class UnBindQQRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UnBindQQRequest> {
} _UnBindQQRequest_default_instance_;
class UnBindQQResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UnBindQQResponse> {
} _UnBindQQResponse_default_instance_;
class CheckUnBindRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CheckUnBindRequest> {
} _CheckUnBindRequest_default_instance_;
class CheckUnBindResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CheckUnBindResponse> {
} _CheckUnBindResponse_default_instance_;
class FaceBookAuthRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FaceBookAuthRequest> {
} _FaceBookAuthRequest_default_instance_;
class FaceBookAuthResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FaceBookAuthResponse> {
} _FaceBookAuthResponse_default_instance_;
class RegEquipmentRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RegEquipmentRequest> {
} _RegEquipmentRequest_default_instance_;
class RegEquipmentResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RegEquipmentResponse> {
} _RegEquipmentResponse_default_instance_;
class ResetEquipmentRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResetEquipmentRequest> {
} _ResetEquipmentRequest_default_instance_;
class ResetEquipmentResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResetEquipmentResponse> {
} _ResetEquipmentResponse_default_instance_;
class SetPwdRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SetPwdRequest> {
} _SetPwdRequest_default_instance_;
class SetPwdResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SetPwdResponse> {
} _SetPwdResponse_default_instance_;
class QueryHasPswdRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<QueryHasPswdRequest> {
} _QueryHasPswdRequest_default_instance_;
class QueryHasPswdResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<QueryHasPswdResponse> {
} _QueryHasPswdResponse_default_instance_;
class VerifyPswdRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VerifyPswdRequest> {
} _VerifyPswdRequest_default_instance_;
class VerifyPswdResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VerifyPswdResponse> {
} _VerifyPswdResponse_default_instance_;
class ResetPawInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResetPawInfo> {
} _ResetPawInfo_default_instance_;
class ApplyResetPawRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ApplyResetPawRequest> {
} _ApplyResetPawRequest_default_instance_;
class ApplyResetPawResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ApplyResetPawResponse> {
} _ApplyResetPawResponse_default_instance_;
class GetWeiBoURLReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetWeiBoURLReq> {
} _GetWeiBoURLReq_default_instance_;
class GetWeiBoURLRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetWeiBoURLResp> {
} _GetWeiBoURLResp_default_instance_;
class GetUserNameRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetUserNameRequest> {
} _GetUserNameRequest_default_instance_;
class GetUserNameResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetUserNameResponse> {
} _GetUserNameResponse_default_instance_;
class IphoneRegRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IphoneRegRequest> {
} _IphoneRegRequest_default_instance_;
class IphoneRegResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IphoneRegResponse> {
} _IphoneRegResponse_default_instance_;
class IphoneUnRegRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IphoneUnRegRequest> {
} _IphoneUnRegRequest_default_instance_;
class IphoneUnRegResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IphoneUnRegResponse> {
} _IphoneUnRegResponse_default_instance_;
class WinphoneRegRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WinphoneRegRequest> {
} _WinphoneRegRequest_default_instance_;
class WinphoneRegResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WinphoneRegResponse> {
} _WinphoneRegResponse_default_instance_;
class WinphoneUnRegRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WinphoneUnRegRequest> {
} _WinphoneUnRegRequest_default_instance_;
class WinphoneUnRegResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WinphoneUnRegResponse> {
} _WinphoneUnRegResponse_default_instance_;
class AshaRegRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AshaRegRequest> {
} _AshaRegRequest_default_instance_;
class AshaRegResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AshaRegResponse> {
} _AshaRegResponse_default_instance_;
class AshaUnRegRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AshaUnRegRequest> {
} _AshaUnRegRequest_default_instance_;
class AshaUnRegResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AshaUnRegResponse> {
} _AshaUnRegResponse_default_instance_;
class BlackBerryRegRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BlackBerryRegRequest> {
} _BlackBerryRegRequest_default_instance_;
class BlackBerryRegResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BlackBerryRegResponse> {
} _BlackBerryRegResponse_default_instance_;
class BlackBerryUnRegRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BlackBerryUnRegRequest> {
} _BlackBerryUnRegRequest_default_instance_;
class BlackBerryUnRegResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BlackBerryUnRegResponse> {
} _BlackBerryUnRegResponse_default_instance_;
class AndroidGCMRegRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AndroidGCMRegRequest> {
} _AndroidGCMRegRequest_default_instance_;
class AndroidGCMRegResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AndroidGCMRegResponse> {
} _AndroidGCMRegResponse_default_instance_;
class AndroidGCMUnRegRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AndroidGCMUnRegRequest> {
} _AndroidGCMUnRegRequest_default_instance_;
class AndroidGCMUnRegResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AndroidGCMUnRegResponse> {
} _AndroidGCMUnRegResponse_default_instance_;
class RSACertDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RSACert> {
} _RSACert_default_instance_;
class GetCertRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetCertRequest> {
} _GetCertRequest_default_instance_;
class GetCertResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetCertResponse> {
} _GetCertResponse_default_instance_;
class NewAuthRsaReqDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NewAuthRsaReqData> {
} _NewAuthRsaReqData_default_instance_;
class NewAuthRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NewAuthRequest> {
} _NewAuthRequest_default_instance_;
class NewAuthResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NewAuthResponse> {
} _NewAuthResponse_default_instance_;
class BindGoogleContactRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BindGoogleContactRequest> {
} _BindGoogleContactRequest_default_instance_;
class BindGoogleContactResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BindGoogleContactResponse> {
} _BindGoogleContactResponse_default_instance_;
class BindLinkedinContactRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BindLinkedinContactRequest> {
} _BindLinkedinContactRequest_default_instance_;
class BindLinkedinContactResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BindLinkedinContactResponse> {
} _BindLinkedinContactResponse_default_instance_;
class UnBindLinkedinContactRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UnBindLinkedinContactRequest> {
} _UnBindLinkedinContactRequest_default_instance_;
class UnBindLinkedinContactResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UnBindLinkedinContactResponse> {
} _UnBindLinkedinContactResponse_default_instance_;
class LoginQRCodeNotifyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LoginQRCodeNotify> {
} _LoginQRCodeNotify_default_instance_;
class LoginQRCodeNotifyPkgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LoginQRCodeNotifyPkg> {
} _LoginQRCodeNotifyPkg_default_instance_;
class GetLoginQRCodeRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetLoginQRCodeRequest> {
} _GetLoginQRCodeRequest_default_instance_;
class GetLoginQRCodeResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetLoginQRCodeResponse> {
} _GetLoginQRCodeResponse_default_instance_;
class CheckLoginQRCodeRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CheckLoginQRCodeRequest> {
} _CheckLoginQRCodeRequest_default_instance_;
class CheckLoginQRCodeResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CheckLoginQRCodeResponse> {
} _CheckLoginQRCodeResponse_default_instance_;
class GetLoginURLRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetLoginURLRequest> {
} _GetLoginURLRequest_default_instance_;
class GetLoginURLResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetLoginURLResponse> {
} _GetLoginURLResponse_default_instance_;
class PushLoginURLRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PushLoginURLRequest> {
} _PushLoginURLRequest_default_instance_;
class PushLoginURLResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PushLoginURLResponse> {
} _PushLoginURLResponse_default_instance_;
class BlueToothBindLoginRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BlueToothBindLoginRequest> {
} _BlueToothBindLoginRequest_default_instance_;
class BlueToothBindLoginResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BlueToothBindLoginResponse> {
} _BlueToothBindLoginResponse_default_instance_;
class BlueToothAutoLoginRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BlueToothAutoLoginRequest> {
} _BlueToothAutoLoginRequest_default_instance_;
class BlueToothAutoLoginResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BlueToothAutoLoginResponse> {
} _BlueToothAutoLoginResponse_default_instance_;
class BlueToothAutoLoginInfoPkgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BlueToothAutoLoginInfoPkg> {
} _BlueToothAutoLoginInfoPkg_default_instance_;
class BlueToothAutoLoginInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BlueToothAutoLoginInfo> {
} _BlueToothAutoLoginInfo_default_instance_;
class BindBlackberryPPIDRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BindBlackberryPPIDRequest> {
} _BindBlackberryPPIDRequest_default_instance_;
class BindBlackberryPPIDResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BindBlackberryPPIDResponse> {
} _BindBlackberryPPIDResponse_default_instance_;
class LockWebDeviceRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LockWebDeviceRequest> {
} _LockWebDeviceRequest_default_instance_;
class LockWebDeviceResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LockWebDeviceResponse> {
} _LockWebDeviceResponse_default_instance_;
class GetIosExtensionKeyRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetIosExtensionKeyRequest> {
} _GetIosExtensionKeyRequest_default_instance_;
class ExtSessionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ExtSession> {
} _ExtSession_default_instance_;
class GetIosExtensionKeyResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetIosExtensionKeyResponse> {
} _GetIosExtensionKeyResponse_default_instance_;
class PatternLockBufferDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PatternLockBuffer> {
} _PatternLockBuffer_default_instance_;
class RegisterNewPatternLockRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RegisterNewPatternLockRequest> {
} _RegisterNewPatternLockRequest_default_instance_;
class RegisterNewPatternLockResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RegisterNewPatternLockResponse> {
} _RegisterNewPatternLockResponse_default_instance_;
class OpPatternLockRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OpPatternLockRequest> {
} _OpPatternLockRequest_default_instance_;
class OpPatternLockResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OpPatternLockResponse> {
} _OpPatternLockResponse_default_instance_;
class WTLoginImgReqInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WTLoginImgReqInfo> {
} _WTLoginImgReqInfo_default_instance_;
class WTLoginImgRespInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WTLoginImgRespInfo> {
} _WTLoginImgRespInfo_default_instance_;
class WxVerifyCodeReqInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WxVerifyCodeReqInfo> {
} _WxVerifyCodeReqInfo_default_instance_;
class WxVerifyCodeRespInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WxVerifyCodeRespInfo> {
} _WxVerifyCodeRespInfo_default_instance_;
class BaseAuthReqInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BaseAuthReqInfo> {
} _BaseAuthReqInfo_default_instance_;
class ManualAuthRsaReqDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ManualAuthRsaReqData> {
} _ManualAuthRsaReqData_default_instance_;
class ManualAuthAesReqDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ManualAuthAesReqData> {
} _ManualAuthAesReqData_default_instance_;
class ManualAuthRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ManualAuthRequest> {
} _ManualAuthRequest_default_instance_;
class AutoAuthRsaReqDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AutoAuthRsaReqData> {
} _AutoAuthRsaReqData_default_instance_;
class AutoAuthKeyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AutoAuthKey> {
} _AutoAuthKey_default_instance_;
class AutoAuthAesReqDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AutoAuthAesReqData> {
} _AutoAuthAesReqData_default_instance_;
class AutoAuthRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AutoAuthRequest> {
} _AutoAuthRequest_default_instance_;
class NetworkSectRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NetworkSectResp> {
} _NetworkSectResp_default_instance_;
class AuthSectRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthSectResp> {
} _AuthSectResp_default_instance_;
class AcctSectRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AcctSectResp> {
} _AcctSectResp_default_instance_;
class UnifyAuthResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UnifyAuthResponse> {
} _UnifyAuthResponse_default_instance_;

namespace protobuf_mmlogin_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[121];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECDHKey, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECDHKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECDHKey, nid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECDHKey, key_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegRequest, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegRequest, pwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegRequest, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegRequest, binduin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegRequest, bindemail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegRequest, bindmobile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegRequest, ticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegRequest, builtinipseq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegRequest, dlsrc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegRequest, regmode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegRequest, timezone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegRequest, language_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegRequest, forcereg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegRequest, realcountry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegRequest, randomencrykey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegRequest, alias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegRequest, verifysignature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegRequest, verifycontent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegRequest, hasheadimg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegRequest, suggestret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegRequest, clientseqid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegRequest, adsource_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegRequest, androidid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegRequest, macaddr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegRequest, androidinstallref_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegRequest, clientfingerprint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegRequest, clipubecdhkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegRequest, googleaid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegRequest, bundleid_),
  20,
  0,
  1,
  2,
  23,
  3,
  4,
  5,
  24,
  25,
  26,
  6,
  7,
  27,
  8,
  21,
  9,
  10,
  11,
  28,
  29,
  12,
  13,
  14,
  15,
  16,
  17,
  22,
  18,
  19,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecAuthRegKeySect, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecAuthRegKeySect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecAuthRegKeySect, autoauthkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecAuthRegKeySect, svrpubecdhkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecAuthRegKeySect, sessionkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecAuthRegKeySect, authresultflag_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegResponse, uin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegResponse, sessionkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegResponse, officialusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegResponse, officialnickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegResponse, qqmicroblogusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegResponse, bindemail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegResponse, pushmailstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegResponse, sendcardbitflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegResponse, pushmailsettingticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegResponse, builtiniplist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegResponse, fsurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegResponse, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegResponse, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegResponse, networkcontrol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegResponse, returnflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegResponse, regtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegResponse, authkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegResponse, pluginkeylist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegResponse, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegResponse, profileflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegResponse, newhostlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegResponse, autoauthticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegResponse, dnsinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegResponse, stepticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegResponse, verifysignature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegResponse, verifybuff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegResponse, showstyle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegResponse, snsdnsinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegResponse, appdnsinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewRegResponse, secauthregkeysect_),
  13,
  24,
  0,
  1,
  2,
  3,
  4,
  25,
  26,
  5,
  14,
  6,
  7,
  27,
  15,
  28,
  29,
  8,
  16,
  9,
  30,
  17,
  10,
  18,
  11,
  12,
  19,
  20,
  21,
  22,
  23,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSuggestAliasRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSuggestAliasRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSuggestAliasRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSuggestAliasRequest, randomencrykey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSuggestAliasRequest, regbindname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSuggestAliasRequest, regticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSuggestAliasRequest, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSuggestAliasRequest, inputalias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSuggestAliasRequest, verifysignature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSuggestAliasRequest, verifycontent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSuggestAliasRequest, regmode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSuggestAliasRequest, language_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSuggestAliasRequest, clientseqid_),
  8,
  9,
  0,
  1,
  2,
  3,
  4,
  5,
  10,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSuggestAliasResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSuggestAliasResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSuggestAliasResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSuggestAliasResponse, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSuggestAliasResponse, list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSuggestAliasResponse, verifysignature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSuggestAliasResponse, verifybuff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSuggestAliasResponse, usernameret_),
  1,
  3,
  ~0u,
  0,
  2,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindOpMobileRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindOpMobileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindOpMobileRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindOpMobileRequest, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindOpMobileRequest, mobile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindOpMobileRequest, opcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindOpMobileRequest, verifycode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindOpMobileRequest, dialflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindOpMobileRequest, diallang_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindOpMobileRequest, authticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindOpMobileRequest, forcereg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindOpMobileRequest, safedevicename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindOpMobileRequest, safedevicetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindOpMobileRequest, randomencrykey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindOpMobileRequest, language_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindOpMobileRequest, inputmobileretrys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindOpMobileRequest, adjustret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindOpMobileRequest, clientseqid_),
  9,
  0,
  1,
  11,
  2,
  12,
  3,
  4,
  13,
  5,
  6,
  10,
  7,
  14,
  15,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindOpMobileResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindOpMobileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindOpMobileResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindOpMobileResponse, ticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindOpMobileResponse, smsno_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindOpMobileResponse, needsetpwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindOpMobileResponse, pwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindOpMobileResponse, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindOpMobileResponse, newhostlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindOpMobileResponse, builtiniplist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindOpMobileResponse, networkcontrol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindOpMobileResponse, authticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindOpMobileResponse, safedevice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindOpMobileResponse, cc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindOpMobileResponse, obsoleteitem1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindOpMobileResponse, safedevicelist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindOpMobileResponse, puremobile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindOpMobileResponse, formatedmobile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindOpMobileResponse, showstyle_),
  8,
  0,
  1,
  14,
  2,
  3,
  9,
  10,
  11,
  4,
  15,
  5,
  16,
  12,
  6,
  7,
  13,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailRegRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailRegRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailRegRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailRegRequest, randomencrykey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailRegRequest, opcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailRegRequest, email_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailRegRequest, language_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailRegRequest, pwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailRegRequest, verifycode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailRegRequest, clientseqid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailRegRequest, realcountry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailRegRequest, verifyscene_),
  6,
  7,
  8,
  0,
  1,
  2,
  3,
  4,
  5,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailRegResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailRegResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailRegResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailRegResponse, ticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailRegResponse, builtiniplist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailRegResponse, newhostlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailRegResponse, showstyle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailRegResponse, networkcontrol_),
  1,
  0,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetEmailPwdRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetEmailPwdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetEmailPwdRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetEmailPwdRequest, pwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetEmailPwdRequest, ticket_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetEmailPwdResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetEmailPwdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetEmailPwdResponse, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSafeDeviceRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSafeDeviceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSafeDeviceRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSafeDeviceRequest, uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSafeDeviceRequest, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSafeDeviceRequest, devicetype_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSafeDeviceResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSafeDeviceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSafeDeviceResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSafeDeviceResponse, safedevice_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelSafeDeviceRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelSafeDeviceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelSafeDeviceRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelSafeDeviceRequest, uuid_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelSafeDeviceResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelSafeDeviceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelSafeDeviceResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelSafeDeviceResponse, safedevice_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindSafeMobileRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindSafeMobileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindSafeMobileRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindSafeMobileRequest, mobile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindSafeMobileRequest, opcode_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindSafeMobileResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindSafeMobileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindSafeMobileResponse, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindQQRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindQQRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindQQRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindQQRequest, qq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindQQRequest, pwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindQQRequest, pwd2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindQQRequest, imgsid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindQQRequest, imgcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindQQRequest, opcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindQQRequest, imgencryptkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindQQRequest, ksid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindQQRequest, setasmainacct_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindQQRequest, safedevicename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindQQRequest, safedevicetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindQQRequest, wtloginreqbuff_),
  6,
  10,
  0,
  1,
  2,
  3,
  11,
  7,
  8,
  12,
  4,
  5,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindQQResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindQQResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindQQResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindQQResponse, imgsid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindQQResponse, imgbuf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindQQResponse, pushmailstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindQQResponse, privatemsgstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindQQResponse, microblogname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindQQResponse, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindQQResponse, qqmailskey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindQQResponse, imgencryptkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindQQResponse, a2key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindQQResponse, ksid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindQQResponse, safedevicelist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindQQResponse, safedevice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindQQResponse, wtloginrspbuff_),
  3,
  0,
  4,
  10,
  11,
  1,
  12,
  2,
  5,
  6,
  7,
  8,
  13,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetPwdRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetPwdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetPwdRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetPwdRequest, opcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetPwdRequest, pwd_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetPwdResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetPwdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetPwdResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetPwdResponse, url_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnBindQQRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnBindQQRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnBindQQRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnBindQQRequest, ticket_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnBindQQResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnBindQQResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnBindQQResponse, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckUnBindRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckUnBindRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckUnBindRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckUnBindRequest, bindtype_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckUnBindResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckUnBindResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckUnBindResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckUnBindResponse, randompasswd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckUnBindResponse, canunbindnotice_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceBookAuthRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceBookAuthRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceBookAuthRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceBookAuthRequest, optype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceBookAuthRequest, accesstoken_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceBookAuthRequest, randomencrykey_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceBookAuthResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceBookAuthResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceBookAuthResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceBookAuthResponse, fbuserid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceBookAuthResponse, fbusername_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegEquipmentRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegEquipmentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegEquipmentRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegEquipmentRequest, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegEquipmentRequest, serialnumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegEquipmentRequest, imei_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegEquipmentRequest, mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegEquipmentRequest, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegEquipmentRequest, builtinipseq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegEquipmentRequest, dlsrc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegEquipmentRequest, regmode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegEquipmentRequest, timezone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegEquipmentRequest, language_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegEquipmentRequest, forcereg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegEquipmentRequest, realcountry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegEquipmentRequest, randomencrykey_),
  7,
  9,
  0,
  1,
  2,
  3,
  10,
  11,
  12,
  4,
  5,
  13,
  6,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegEquipmentResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegEquipmentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegEquipmentResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegEquipmentResponse, uin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegEquipmentResponse, sessionkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegEquipmentResponse, officialusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegEquipmentResponse, officialnickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegEquipmentResponse, qqmicroblogusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegEquipmentResponse, bindemail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegEquipmentResponse, pushmailstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegEquipmentResponse, sendcardbitflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegEquipmentResponse, pushmailsettingticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegEquipmentResponse, builtiniplist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegEquipmentResponse, fsurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegEquipmentResponse, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegEquipmentResponse, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegEquipmentResponse, networkcontrol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegEquipmentResponse, returnflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegEquipmentResponse, regtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegEquipmentResponse, authkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegEquipmentResponse, pluginkeylist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegEquipmentResponse, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegEquipmentResponse, profileflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegEquipmentResponse, newhostlist_),
  10,
  15,
  0,
  1,
  2,
  3,
  4,
  16,
  17,
  5,
  11,
  6,
  7,
  18,
  12,
  19,
  20,
  8,
  13,
  9,
  21,
  14,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetEquipmentRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetEquipmentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetEquipmentRequest, baserequest_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetEquipmentResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetEquipmentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetEquipmentResponse, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPwdRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPwdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPwdRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPwdRequest, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPwdRequest, ticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPwdRequest, autoauthkey_),
  2,
  0,
  1,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPwdResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPwdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPwdResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPwdResponse, autoauthkey_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryHasPswdRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryHasPswdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryHasPswdRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryHasPswdRequest, scene_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryHasPswdResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryHasPswdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryHasPswdResponse, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPswdRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPswdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPswdRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPswdRequest, opcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPswdRequest, pwd1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPswdRequest, pwd2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPswdRequest, imgsid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPswdRequest, imgcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPswdRequest, imgencryptkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPswdRequest, ksid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPswdRequest, scence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPswdRequest, wtloginreqbuff_),
  2,
  8,
  0,
  1,
  3,
  4,
  5,
  6,
  9,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPswdResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPswdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPswdResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPswdResponse, imgsid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPswdResponse, imgbuf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPswdResponse, ticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPswdResponse, imgencryptkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPswdResponse, a2key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPswdResponse, ksid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPswdResponse, authkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyPswdResponse, wtloginrspbuff_),
  2,
  3,
  4,
  0,
  5,
  6,
  7,
  1,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetPawInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetPawInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetPawInfo, createtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetPawInfo, isreset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetPawInfo, id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyResetPawRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyResetPawRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyResetPawRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyResetPawRequest, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyResetPawRequest, resetinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyResetPawRequest, getmethod_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyResetPawRequest, randomencrykey_),
  1,
  3,
  0,
  4,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyResetPawResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyResetPawResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyResetPawResponse, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWeiBoURLReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWeiBoURLReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWeiBoURLReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWeiBoURLReq, a2key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWeiBoURLReq, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWeiBoURLReq, scene_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWeiBoURLReq, blogusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWeiBoURLReq, a2keynew_),
  2,
  3,
  0,
  5,
  1,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWeiBoURLResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWeiBoURLResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWeiBoURLResp, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWeiBoURLResp, url_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserNameRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserNameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserNameRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserNameRequest, binduin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserNameRequest, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserNameRequest, ticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserNameRequest, pwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserNameRequest, mobile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserNameRequest, opcode_),
  4,
  5,
  0,
  1,
  2,
  3,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserNameResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserNameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserNameResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserNameResponse, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserNameResponse, ticket_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IphoneRegRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IphoneRegRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IphoneRegRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IphoneRegRequest, token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IphoneRegRequest, sound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IphoneRegRequest, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IphoneRegRequest, voipsound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IphoneRegRequest, tokencert_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IphoneRegRequest, tokenenv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IphoneRegRequest, tokenscene_),
  3,
  0,
  1,
  4,
  2,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IphoneRegResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IphoneRegResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IphoneRegResponse, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IphoneUnRegRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IphoneUnRegRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IphoneUnRegRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IphoneUnRegRequest, token_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IphoneUnRegResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IphoneUnRegResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IphoneUnRegResponse, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WinphoneRegRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WinphoneRegRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WinphoneRegRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WinphoneRegRequest, uri_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WinphoneRegResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WinphoneRegResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WinphoneRegResponse, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WinphoneUnRegRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WinphoneUnRegRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WinphoneUnRegRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WinphoneUnRegRequest, uri_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WinphoneUnRegResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WinphoneUnRegResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WinphoneUnRegResponse, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AshaRegRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AshaRegRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AshaRegRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AshaRegRequest, nid_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AshaRegResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AshaRegResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AshaRegResponse, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AshaUnRegRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AshaUnRegRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AshaUnRegRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AshaUnRegRequest, nid_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AshaUnRegResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AshaUnRegResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AshaUnRegResponse, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackBerryRegRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackBerryRegRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackBerryRegRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackBerryRegRequest, pin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackBerryRegRequest, port_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackBerryRegResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackBerryRegResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackBerryRegResponse, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackBerryUnRegRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackBerryUnRegRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackBerryUnRegRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackBerryUnRegRequest, pin_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackBerryUnRegResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackBerryUnRegResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackBerryUnRegResponse, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AndroidGCMRegRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AndroidGCMRegRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AndroidGCMRegRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AndroidGCMRegRequest, token_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AndroidGCMRegResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AndroidGCMRegResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AndroidGCMRegResponse, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AndroidGCMUnRegRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AndroidGCMUnRegRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AndroidGCMUnRegRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AndroidGCMUnRegRequest, token_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AndroidGCMUnRegResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AndroidGCMUnRegResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AndroidGCMUnRegResponse, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSACert, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSACert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSACert, keyn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSACert, keye_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCertRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCertRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCertRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCertRequest, randomencrykey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCertRequest, currentcertversion_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCertResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCertResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCertResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCertResponse, certvalue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCertResponse, certversion_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthRsaReqData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthRsaReqData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthRsaReqData, randomencrykey_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthRequest, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthRequest, pwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthRequest, imgsid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthRequest, imgcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthRequest, pwd2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthRequest, builtinipseq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthRequest, extpwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthRequest, extpwd2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthRequest, timezone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthRequest, language_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthRequest, imei_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthRequest, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthRequest, iphonever_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthRequest, imgencryptkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthRequest, ksid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthRequest, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthRequest, devicebrand_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthRequest, devicemodel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthRequest, ostype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthRequest, devicetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthRequest, softtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthRequest, authticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthRequest, realcountry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthRequest, signature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthRequest, randomencrykey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthRequest, autoauthticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthRequest, devicename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthRequest, wtloginreqbuff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthRequest, inputtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthRequest, clientseqid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthRequest, bundleid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthRequest, adsource_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthRequest, clidbencryptkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthRequest, clidbencryptinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthRequest, verifysignature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthRequest, verifycontent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthRequest, sessionmode_),
  22,
  23,
  24,
  25,
  26,
  0,
  33,
  1,
  2,
  3,
  4,
  5,
  34,
  6,
  27,
  28,
  35,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  29,
  15,
  16,
  30,
  36,
  17,
  18,
  19,
  31,
  32,
  20,
  21,
  37,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, uin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, binduin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, bindemail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, bindmobile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, sessionkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, imgsid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, imgbuf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, officialusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, officialnickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, qqmicroblogusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, qqmicroblogstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, newversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, ticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, pushmailstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, sendcardbitflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, pushmailsettingticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, builtiniplist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, fsurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, networkcontrol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, pluginflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, alias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, regtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, authkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, sid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, pluginkeylist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, imgencryptkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, a2key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, ksid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, profileflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, isautoreg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, kickresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, applybetaurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, deviceinfoxml_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, softconfigxml_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, newhostlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, authticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, safedevice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, obsoleteitem1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, needsetemailpwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, hintmsg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, autoauthticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, dnsinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, nextauthtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, wtloginrspbuff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, showstyle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, clidbencryptkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, clidbencryptinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, snsdnsinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, appdnsinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, verifysignature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewAuthResponse, verifybuff_),
  16,
  41,
  17,
  18,
  42,
  19,
  20,
  43,
  0,
  21,
  22,
  23,
  24,
  25,
  44,
  45,
  1,
  46,
  47,
  2,
  26,
  3,
  27,
  48,
  4,
  49,
  5,
  6,
  28,
  29,
  30,
  31,
  50,
  7,
  51,
  52,
  8,
  9,
  10,
  11,
  32,
  12,
  53,
  54,
  55,
  13,
  14,
  33,
  56,
  34,
  35,
  36,
  37,
  57,
  38,
  39,
  15,
  40,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindGoogleContactRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindGoogleContactRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindGoogleContactRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindGoogleContactRequest, opcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindGoogleContactRequest, googlecontactname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindGoogleContactRequest, force_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindGoogleContactResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindGoogleContactResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindGoogleContactResponse, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindLinkedinContactRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindLinkedinContactRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindLinkedinContactRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindLinkedinContactRequest, opcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindLinkedinContactRequest, visible_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindLinkedinContactRequest, linkedinmemberid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindLinkedinContactRequest, linkedinname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindLinkedinContactRequest, linkedinpublicurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindLinkedinContactRequest, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindLinkedinContactRequest, nounce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindLinkedinContactRequest, linkedinsignature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindLinkedinContactRequest, linkedinreturnsignature_),
  7,
  8,
  9,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindLinkedinContactResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindLinkedinContactResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindLinkedinContactResponse, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnBindLinkedinContactRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnBindLinkedinContactRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnBindLinkedinContactRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnBindLinkedinContactRequest, opcode_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnBindLinkedinContactResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnBindLinkedinContactResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnBindLinkedinContactResponse, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginQRCodeNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginQRCodeNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginQRCodeNotify, uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginQRCodeNotify, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginQRCodeNotify, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginQRCodeNotify, pwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginQRCodeNotify, headimgurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginQRCodeNotify, pushloginurlexpiredtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginQRCodeNotify, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginQRCodeNotify, expiredtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginQRCodeNotify, pairwaittip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginQRCodeNotify, authorclientversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginQRCodeNotify, authordevicetype_),
  0,
  7,
  1,
  2,
  3,
  8,
  4,
  9,
  5,
  10,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginQRCodeNotifyPkg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginQRCodeNotifyPkg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginQRCodeNotifyPkg, notifydata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginQRCodeNotifyPkg, opcode_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginQRCodeRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginQRCodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginQRCodeRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginQRCodeRequest, randomencrykey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginQRCodeRequest, opcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginQRCodeRequest, devicename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginQRCodeRequest, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginQRCodeRequest, extdevlogintype_),
  2,
  3,
  4,
  0,
  1,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginQRCodeResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginQRCodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginQRCodeResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginQRCodeResponse, qrcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginQRCodeResponse, uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginQRCodeResponse, checktime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginQRCodeResponse, notifykey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginQRCodeResponse, expiredtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginQRCodeResponse, bluetoothbroadcastuuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginQRCodeResponse, bluetoothbroadcastcontent_),
  2,
  3,
  0,
  6,
  4,
  7,
  1,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckLoginQRCodeRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckLoginQRCodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckLoginQRCodeRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckLoginQRCodeRequest, randomencrykey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckLoginQRCodeRequest, uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckLoginQRCodeRequest, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckLoginQRCodeRequest, opcode_),
  1,
  2,
  0,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckLoginQRCodeResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckLoginQRCodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckLoginQRCodeResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckLoginQRCodeResponse, notifypkg_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginURLRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginURLRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginURLRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginURLRequest, uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginURLRequest, fromdeviceid_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginURLResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginURLResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginURLResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginURLResponse, url_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushLoginURLRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushLoginURLRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushLoginURLRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushLoginURLRequest, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushLoginURLRequest, autoauthticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushLoginURLRequest, clientid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushLoginURLRequest, randomencrykey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushLoginURLRequest, opcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushLoginURLRequest, devicename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushLoginURLRequest, autoauthkey_),
  4,
  0,
  1,
  2,
  5,
  7,
  3,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushLoginURLResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushLoginURLResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushLoginURLResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushLoginURLResponse, uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushLoginURLResponse, notifykey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushLoginURLResponse, checktime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushLoginURLResponse, expiredtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushLoginURLResponse, bluetoothbroadcastuuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushLoginURLResponse, bluetoothbroadcastcontent_),
  2,
  0,
  3,
  5,
  6,
  1,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueToothBindLoginRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueToothBindLoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueToothBindLoginRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueToothBindLoginRequest, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueToothBindLoginRequest, opcode_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueToothBindLoginResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueToothBindLoginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueToothBindLoginResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueToothBindLoginResponse, devicename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueToothBindLoginResponse, expiredtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueToothBindLoginResponse, uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueToothBindLoginResponse, bluetoothbroadcastuuid_),
  3,
  0,
  4,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueToothAutoLoginRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueToothAutoLoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueToothAutoLoginRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueToothAutoLoginRequest, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueToothAutoLoginRequest, uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueToothAutoLoginRequest, autoauthticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueToothAutoLoginRequest, logininfodata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueToothAutoLoginRequest, randomencrykey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueToothAutoLoginRequest, bluetoothbroadcastuuid_),
  4,
  0,
  1,
  2,
  5,
  6,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueToothAutoLoginResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueToothAutoLoginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueToothAutoLoginResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueToothAutoLoginResponse, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueToothAutoLoginResponse, password_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueToothAutoLoginInfoPkg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueToothAutoLoginInfoPkg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueToothAutoLoginInfoPkg, salt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueToothAutoLoginInfoPkg, data_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueToothAutoLoginInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueToothAutoLoginInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueToothAutoLoginInfo, uin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueToothAutoLoginInfo, devicetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueToothAutoLoginInfo, clientversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueToothAutoLoginInfo, deviceid_),
  2,
  0,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindBlackberryPPIDRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindBlackberryPPIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindBlackberryPPIDRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindBlackberryPPIDRequest, opcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindBlackberryPPIDRequest, bbppid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindBlackberryPPIDRequest, bbpin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindBlackberryPPIDRequest, bbmnickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindBlackberryPPIDRequest, force_),
  3,
  4,
  0,
  1,
  2,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindBlackberryPPIDResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindBlackberryPPIDResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindBlackberryPPIDResponse, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockWebDeviceRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockWebDeviceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockWebDeviceRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockWebDeviceRequest, opcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockWebDeviceRequest, bluetoothbroadcastuuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockWebDeviceRequest, bluetoothbroadcastcontent_),
  1,
  3,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockWebDeviceResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockWebDeviceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockWebDeviceResponse, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIosExtensionKeyRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIosExtensionKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIosExtensionKeyRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIosExtensionKeyRequest, extensionsessiontype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIosExtensionKeyRequest, extensiondeviceid_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtSession, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtSession, sessiontype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtSession, sessionkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtSession, serverid_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIosExtensionKeyResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIosExtensionKeyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIosExtensionKeyResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIosExtensionKeyResponse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIosExtensionKeyResponse, extensionsession_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatternLockBuffer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatternLockBuffer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatternLockBuffer, uin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatternLockBuffer, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatternLockBuffer, svrpatternhash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatternLockBuffer, lockstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatternLockBuffer, sign_),
  2,
  3,
  0,
  4,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterNewPatternLockRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterNewPatternLockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterNewPatternLockRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterNewPatternLockRequest, paytoken_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterNewPatternLockRequest, patternhash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterNewPatternLockRequest, cmd_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterNewPatternLockResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterNewPatternLockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterNewPatternLockResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterNewPatternLockResponse, patternlockbuf_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPatternLockRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPatternLockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPatternLockRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPatternLockRequest, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPatternLockRequest, nowpatternhash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPatternLockRequest, newpatternhash_),
  0,
  3,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPatternLockResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPatternLockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPatternLockResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPatternLockResponse, patternlockbuf_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTLoginImgReqInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTLoginImgReqInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTLoginImgReqInfo, imgsid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTLoginImgReqInfo, imgcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTLoginImgReqInfo, imgencryptkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTLoginImgReqInfo, ksid_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTLoginImgRespInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTLoginImgRespInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTLoginImgRespInfo, imgencryptkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTLoginImgRespInfo, ksid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTLoginImgRespInfo, imgsid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTLoginImgRespInfo, imgbuf_),
  0,
  2,
  1,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WxVerifyCodeReqInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WxVerifyCodeReqInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WxVerifyCodeReqInfo, verifysignature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WxVerifyCodeReqInfo, verifycontent_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WxVerifyCodeRespInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WxVerifyCodeRespInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WxVerifyCodeRespInfo, verifysignature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WxVerifyCodeRespInfo, verifybuff_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAuthReqInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAuthReqInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAuthReqInfo, wtloginreqbuff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAuthReqInfo, wtloginimgreqinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAuthReqInfo, wxverifycodereqinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAuthReqInfo, clidbencryptkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAuthReqInfo, clidbencryptinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAuthReqInfo, authreqflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAuthReqInfo, authticket_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthRsaReqData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthRsaReqData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthRsaReqData, randomencrykey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthRsaReqData, clipubecdhkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthRsaReqData, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthRsaReqData, pwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthRsaReqData, pwd2_),
  3,
  4,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthAesReqData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthAesReqData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthAesReqData, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthAesReqData, basereqinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthAesReqData, imei_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthAesReqData, softtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthAesReqData, builtinipseq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthAesReqData, clientseqid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthAesReqData, signature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthAesReqData, devicename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthAesReqData, devicetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthAesReqData, language_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthAesReqData, timezone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthAesReqData, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthAesReqData, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthAesReqData, devicebrand_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthAesReqData, devicemodel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthAesReqData, ostype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthAesReqData, realcountry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthAesReqData, bundleid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthAesReqData, adsource_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthAesReqData, iphonever_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthAesReqData, inputtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthAesReqData, clientcheckdat_),
  15,
  16,
  0,
  1,
  18,
  2,
  3,
  4,
  5,
  6,
  7,
  19,
  20,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  21,
  17,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthRequest, rsareqdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthRequest, aesreqdata_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAuthRsaReqData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAuthRsaReqData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAuthRsaReqData, aesencryptkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAuthRsaReqData, clipubecdhkey_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAuthKey, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAuthKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAuthKey, encryptkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAuthKey, key_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAuthAesReqData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAuthAesReqData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAuthAesReqData, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAuthAesReqData, basereqinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAuthAesReqData, autoauthkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAuthAesReqData, imei_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAuthAesReqData, softtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAuthAesReqData, builtinipseq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAuthAesReqData, clientseqid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAuthAesReqData, signature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAuthAesReqData, devicename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAuthAesReqData, devicetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAuthAesReqData, language_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAuthAesReqData, timezone_),
  8,
  9,
  10,
  0,
  1,
  11,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAuthRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAuthRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAuthRequest, rsareqdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAuthRequest, aesreqdata_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkSectResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkSectResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkSectResp, newhostlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkSectResp, networkcontrol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkSectResp, builtiniplist_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSectResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSectResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSectResp, uin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSectResp, svrpubecdhkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSectResp, sessionkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSectResp, autoauthkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSectResp, wtloginrspbuffflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSectResp, wtloginrspbuff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSectResp, wtloginimgrespinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSectResp, wxverifycoderespinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSectResp, clidbencryptkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSectResp, clidbencryptinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSectResp, authkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSectResp, a2key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSectResp, applybetaurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSectResp, showstyle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSectResp, authticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSectResp, newversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSectResp, updateflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSectResp, authresultflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthSectResp, fsurl_),
  14,
  4,
  5,
  6,
  15,
  7,
  8,
  9,
  10,
  11,
  0,
  12,
  1,
  13,
  2,
  16,
  17,
  18,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcctSectResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcctSectResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcctSectResp, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcctSectResp, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcctSectResp, binduin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcctSectResp, bindemail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcctSectResp, bindmobile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcctSectResp, alias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcctSectResp, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcctSectResp, pluginflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcctSectResp, regtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcctSectResp, deviceinfoxml_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcctSectResp, safedevice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcctSectResp, officialusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcctSectResp, officialnickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcctSectResp, pushmailstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcctSectResp, fsurl_),
  0,
  1,
  9,
  2,
  3,
  4,
  10,
  11,
  12,
  5,
  13,
  6,
  7,
  14,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnifyAuthResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnifyAuthResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnifyAuthResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnifyAuthResponse, unifyauthsectflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnifyAuthResponse, authsectresp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnifyAuthResponse, acctsectresp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnifyAuthResponse, networksectresp_),
  0,
  4,
  1,
  2,
  3,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(ECDHKey)},
  { 9, 44, sizeof(NewRegRequest)},
  { 74, 83, sizeof(SecAuthRegKeySect)},
  { 87, 123, sizeof(NewRegResponse)},
  { 154, 170, sizeof(GetSuggestAliasRequest)},
  { 181, 192, sizeof(GetSuggestAliasResponse)},
  { 198, 219, sizeof(BindOpMobileRequest)},
  { 235, 257, sizeof(BindOpMobileResponse)},
  { 274, 289, sizeof(EmailRegRequest)},
  { 299, 310, sizeof(EmailRegResponse)},
  { 316, 324, sizeof(SetEmailPwdRequest)},
  { 327, 333, sizeof(SetEmailPwdResponse)},
  { 334, 343, sizeof(UpdateSafeDeviceRequest)},
  { 347, 354, sizeof(UpdateSafeDeviceResponse)},
  { 356, 363, sizeof(DelSafeDeviceRequest)},
  { 365, 372, sizeof(DelSafeDeviceResponse)},
  { 374, 382, sizeof(BindSafeMobileRequest)},
  { 385, 391, sizeof(BindSafeMobileResponse)},
  { 392, 410, sizeof(BindQQRequest)},
  { 423, 442, sizeof(BindQQResponse)},
  { 456, 464, sizeof(ResetPwdRequest)},
  { 467, 474, sizeof(ResetPwdResponse)},
  { 476, 483, sizeof(UnBindQQRequest)},
  { 485, 491, sizeof(UnBindQQResponse)},
  { 492, 499, sizeof(CheckUnBindRequest)},
  { 501, 509, sizeof(CheckUnBindResponse)},
  { 512, 521, sizeof(FaceBookAuthRequest)},
  { 525, 533, sizeof(FaceBookAuthResponse)},
  { 536, 555, sizeof(RegEquipmentRequest)},
  { 569, 596, sizeof(RegEquipmentResponse)},
  { 618, 624, sizeof(ResetEquipmentRequest)},
  { 625, 631, sizeof(ResetEquipmentResponse)},
  { 632, 641, sizeof(SetPwdRequest)},
  { 645, 652, sizeof(SetPwdResponse)},
  { 654, 661, sizeof(QueryHasPswdRequest)},
  { 663, 669, sizeof(QueryHasPswdResponse)},
  { 670, 685, sizeof(VerifyPswdRequest)},
  { 695, 709, sizeof(VerifyPswdResponse)},
  { 718, 726, sizeof(ResetPawInfo)},
  { 729, 739, sizeof(ApplyResetPawRequest)},
  { 744, 750, sizeof(ApplyResetPawResponse)},
  { 751, 762, sizeof(GetWeiBoURLReq)},
  { 768, 775, sizeof(GetWeiBoURLResp)},
  { 777, 789, sizeof(GetUserNameRequest)},
  { 796, 804, sizeof(GetUserNameResponse)},
  { 807, 820, sizeof(IphoneRegRequest)},
  { 828, 834, sizeof(IphoneRegResponse)},
  { 835, 842, sizeof(IphoneUnRegRequest)},
  { 844, 850, sizeof(IphoneUnRegResponse)},
  { 851, 858, sizeof(WinphoneRegRequest)},
  { 860, 866, sizeof(WinphoneRegResponse)},
  { 867, 874, sizeof(WinphoneUnRegRequest)},
  { 876, 882, sizeof(WinphoneUnRegResponse)},
  { 883, 890, sizeof(AshaRegRequest)},
  { 892, 898, sizeof(AshaRegResponse)},
  { 899, 906, sizeof(AshaUnRegRequest)},
  { 908, 914, sizeof(AshaUnRegResponse)},
  { 915, 923, sizeof(BlackBerryRegRequest)},
  { 926, 932, sizeof(BlackBerryRegResponse)},
  { 933, 940, sizeof(BlackBerryUnRegRequest)},
  { 942, 948, sizeof(BlackBerryUnRegResponse)},
  { 949, 956, sizeof(AndroidGCMRegRequest)},
  { 958, 964, sizeof(AndroidGCMRegResponse)},
  { 965, 972, sizeof(AndroidGCMUnRegRequest)},
  { 974, 980, sizeof(AndroidGCMUnRegResponse)},
  { 981, 988, sizeof(RSACert)},
  { 990, 998, sizeof(GetCertRequest)},
  { 1001, 1009, sizeof(GetCertResponse)},
  { 1012, 1018, sizeof(NewAuthRsaReqData)},
  { 1019, 1062, sizeof(NewAuthRequest)},
  { 1100, 1163, sizeof(NewAuthResponse)},
  { 1221, 1230, sizeof(BindGoogleContactRequest)},
  { 1234, 1240, sizeof(BindGoogleContactResponse)},
  { 1241, 1256, sizeof(BindLinkedinContactRequest)},
  { 1266, 1272, sizeof(BindLinkedinContactResponse)},
  { 1273, 1280, sizeof(UnBindLinkedinContactRequest)},
  { 1282, 1288, sizeof(UnBindLinkedinContactResponse)},
  { 1289, 1305, sizeof(LoginQRCodeNotify)},
  { 1316, 1323, sizeof(LoginQRCodeNotifyPkg)},
  { 1325, 1336, sizeof(GetLoginQRCodeRequest)},
  { 1342, 1355, sizeof(GetLoginQRCodeResponse)},
  { 1363, 1373, sizeof(CheckLoginQRCodeRequest)},
  { 1378, 1385, sizeof(CheckLoginQRCodeResponse)},
  { 1387, 1395, sizeof(GetLoginURLRequest)},
  { 1398, 1405, sizeof(GetLoginURLResponse)},
  { 1407, 1420, sizeof(PushLoginURLRequest)},
  { 1428, 1440, sizeof(PushLoginURLResponse)},
  { 1447, 1455, sizeof(BlueToothBindLoginRequest)},
  { 1458, 1468, sizeof(BlueToothBindLoginResponse)},
  { 1473, 1485, sizeof(BlueToothAutoLoginRequest)},
  { 1492, 1500, sizeof(BlueToothAutoLoginResponse)},
  { 1503, 1510, sizeof(BlueToothAutoLoginInfoPkg)},
  { 1512, 1521, sizeof(BlueToothAutoLoginInfo)},
  { 1525, 1536, sizeof(BindBlackberryPPIDRequest)},
  { 1542, 1548, sizeof(BindBlackberryPPIDResponse)},
  { 1549, 1558, sizeof(LockWebDeviceRequest)},
  { 1562, 1568, sizeof(LockWebDeviceResponse)},
  { 1569, 1577, sizeof(GetIosExtensionKeyRequest)},
  { 1580, 1588, sizeof(ExtSession)},
  { 1591, 1599, sizeof(GetIosExtensionKeyResponse)},
  { 1602, 1612, sizeof(PatternLockBuffer)},
  { 1617, 1626, sizeof(RegisterNewPatternLockRequest)},
  { 1630, 1637, sizeof(RegisterNewPatternLockResponse)},
  { 1639, 1648, sizeof(OpPatternLockRequest)},
  { 1652, 1659, sizeof(OpPatternLockResponse)},
  { 1661, 1670, sizeof(WTLoginImgReqInfo)},
  { 1674, 1683, sizeof(WTLoginImgRespInfo)},
  { 1687, 1694, sizeof(WxVerifyCodeReqInfo)},
  { 1696, 1703, sizeof(WxVerifyCodeRespInfo)},
  { 1705, 1717, sizeof(BaseAuthReqInfo)},
  { 1724, 1734, sizeof(ManualAuthRsaReqData)},
  { 1739, 1766, sizeof(ManualAuthAesReqData)},
  { 1788, 1795, sizeof(ManualAuthRequest)},
  { 1797, 1804, sizeof(AutoAuthRsaReqData)},
  { 1806, 1813, sizeof(AutoAuthKey)},
  { 1815, 1832, sizeof(AutoAuthAesReqData)},
  { 1844, 1851, sizeof(AutoAuthRequest)},
  { 1853, 1861, sizeof(NetworkSectResp)},
  { 1864, 1888, sizeof(AuthSectResp)},
  { 1907, 1927, sizeof(AcctSectResp)},
  { 1942, 1952, sizeof(UnifyAuthResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ECDHKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NewRegRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SecAuthRegKeySect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NewRegResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetSuggestAliasRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetSuggestAliasResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BindOpMobileRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BindOpMobileResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EmailRegRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EmailRegResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetEmailPwdRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetEmailPwdResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UpdateSafeDeviceRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UpdateSafeDeviceResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DelSafeDeviceRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DelSafeDeviceResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BindSafeMobileRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BindSafeMobileResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BindQQRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BindQQResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResetPwdRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResetPwdResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UnBindQQRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UnBindQQResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CheckUnBindRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CheckUnBindResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FaceBookAuthRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FaceBookAuthResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RegEquipmentRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RegEquipmentResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResetEquipmentRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResetEquipmentResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetPwdRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetPwdResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QueryHasPswdRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QueryHasPswdResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VerifyPswdRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VerifyPswdResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResetPawInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ApplyResetPawRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ApplyResetPawResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetWeiBoURLReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetWeiBoURLResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetUserNameRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetUserNameResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IphoneRegRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IphoneRegResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IphoneUnRegRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IphoneUnRegResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WinphoneRegRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WinphoneRegResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WinphoneUnRegRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WinphoneUnRegResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AshaRegRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AshaRegResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AshaUnRegRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AshaUnRegResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BlackBerryRegRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BlackBerryRegResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BlackBerryUnRegRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BlackBerryUnRegResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AndroidGCMRegRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AndroidGCMRegResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AndroidGCMUnRegRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AndroidGCMUnRegResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RSACert_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetCertRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetCertResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NewAuthRsaReqData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NewAuthRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NewAuthResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BindGoogleContactRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BindGoogleContactResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BindLinkedinContactRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BindLinkedinContactResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UnBindLinkedinContactRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UnBindLinkedinContactResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LoginQRCodeNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LoginQRCodeNotifyPkg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetLoginQRCodeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetLoginQRCodeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CheckLoginQRCodeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CheckLoginQRCodeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetLoginURLRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetLoginURLResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PushLoginURLRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PushLoginURLResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BlueToothBindLoginRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BlueToothBindLoginResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BlueToothAutoLoginRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BlueToothAutoLoginResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BlueToothAutoLoginInfoPkg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BlueToothAutoLoginInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BindBlackberryPPIDRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BindBlackberryPPIDResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LockWebDeviceRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LockWebDeviceResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetIosExtensionKeyRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExtSession_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetIosExtensionKeyResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PatternLockBuffer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RegisterNewPatternLockRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RegisterNewPatternLockResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OpPatternLockRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OpPatternLockResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WTLoginImgReqInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WTLoginImgRespInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WxVerifyCodeReqInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WxVerifyCodeRespInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BaseAuthReqInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ManualAuthRsaReqData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ManualAuthAesReqData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ManualAuthRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AutoAuthRsaReqData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AutoAuthKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AutoAuthAesReqData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AutoAuthRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NetworkSectResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AuthSectResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AcctSectResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UnifyAuthResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "mmlogin.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 121);
}

}  // namespace

void TableStruct::Shutdown() {
  _ECDHKey_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _NewRegRequest_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _SecAuthRegKeySect_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _NewRegResponse_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _GetSuggestAliasRequest_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _GetSuggestAliasResponse_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _BindOpMobileRequest_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _BindOpMobileResponse_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _EmailRegRequest_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _EmailRegResponse_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _SetEmailPwdRequest_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _SetEmailPwdResponse_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _UpdateSafeDeviceRequest_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _UpdateSafeDeviceResponse_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _DelSafeDeviceRequest_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _DelSafeDeviceResponse_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _BindSafeMobileRequest_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _BindSafeMobileResponse_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _BindQQRequest_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _BindQQResponse_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _ResetPwdRequest_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _ResetPwdResponse_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _UnBindQQRequest_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _UnBindQQResponse_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _CheckUnBindRequest_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _CheckUnBindResponse_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _FaceBookAuthRequest_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _FaceBookAuthResponse_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _RegEquipmentRequest_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _RegEquipmentResponse_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _ResetEquipmentRequest_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _ResetEquipmentResponse_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _SetPwdRequest_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _SetPwdResponse_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _QueryHasPswdRequest_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
  _QueryHasPswdResponse_default_instance_.Shutdown();
  delete file_level_metadata[35].reflection;
  _VerifyPswdRequest_default_instance_.Shutdown();
  delete file_level_metadata[36].reflection;
  _VerifyPswdResponse_default_instance_.Shutdown();
  delete file_level_metadata[37].reflection;
  _ResetPawInfo_default_instance_.Shutdown();
  delete file_level_metadata[38].reflection;
  _ApplyResetPawRequest_default_instance_.Shutdown();
  delete file_level_metadata[39].reflection;
  _ApplyResetPawResponse_default_instance_.Shutdown();
  delete file_level_metadata[40].reflection;
  _GetWeiBoURLReq_default_instance_.Shutdown();
  delete file_level_metadata[41].reflection;
  _GetWeiBoURLResp_default_instance_.Shutdown();
  delete file_level_metadata[42].reflection;
  _GetUserNameRequest_default_instance_.Shutdown();
  delete file_level_metadata[43].reflection;
  _GetUserNameResponse_default_instance_.Shutdown();
  delete file_level_metadata[44].reflection;
  _IphoneRegRequest_default_instance_.Shutdown();
  delete file_level_metadata[45].reflection;
  _IphoneRegResponse_default_instance_.Shutdown();
  delete file_level_metadata[46].reflection;
  _IphoneUnRegRequest_default_instance_.Shutdown();
  delete file_level_metadata[47].reflection;
  _IphoneUnRegResponse_default_instance_.Shutdown();
  delete file_level_metadata[48].reflection;
  _WinphoneRegRequest_default_instance_.Shutdown();
  delete file_level_metadata[49].reflection;
  _WinphoneRegResponse_default_instance_.Shutdown();
  delete file_level_metadata[50].reflection;
  _WinphoneUnRegRequest_default_instance_.Shutdown();
  delete file_level_metadata[51].reflection;
  _WinphoneUnRegResponse_default_instance_.Shutdown();
  delete file_level_metadata[52].reflection;
  _AshaRegRequest_default_instance_.Shutdown();
  delete file_level_metadata[53].reflection;
  _AshaRegResponse_default_instance_.Shutdown();
  delete file_level_metadata[54].reflection;
  _AshaUnRegRequest_default_instance_.Shutdown();
  delete file_level_metadata[55].reflection;
  _AshaUnRegResponse_default_instance_.Shutdown();
  delete file_level_metadata[56].reflection;
  _BlackBerryRegRequest_default_instance_.Shutdown();
  delete file_level_metadata[57].reflection;
  _BlackBerryRegResponse_default_instance_.Shutdown();
  delete file_level_metadata[58].reflection;
  _BlackBerryUnRegRequest_default_instance_.Shutdown();
  delete file_level_metadata[59].reflection;
  _BlackBerryUnRegResponse_default_instance_.Shutdown();
  delete file_level_metadata[60].reflection;
  _AndroidGCMRegRequest_default_instance_.Shutdown();
  delete file_level_metadata[61].reflection;
  _AndroidGCMRegResponse_default_instance_.Shutdown();
  delete file_level_metadata[62].reflection;
  _AndroidGCMUnRegRequest_default_instance_.Shutdown();
  delete file_level_metadata[63].reflection;
  _AndroidGCMUnRegResponse_default_instance_.Shutdown();
  delete file_level_metadata[64].reflection;
  _RSACert_default_instance_.Shutdown();
  delete file_level_metadata[65].reflection;
  _GetCertRequest_default_instance_.Shutdown();
  delete file_level_metadata[66].reflection;
  _GetCertResponse_default_instance_.Shutdown();
  delete file_level_metadata[67].reflection;
  _NewAuthRsaReqData_default_instance_.Shutdown();
  delete file_level_metadata[68].reflection;
  _NewAuthRequest_default_instance_.Shutdown();
  delete file_level_metadata[69].reflection;
  _NewAuthResponse_default_instance_.Shutdown();
  delete file_level_metadata[70].reflection;
  _BindGoogleContactRequest_default_instance_.Shutdown();
  delete file_level_metadata[71].reflection;
  _BindGoogleContactResponse_default_instance_.Shutdown();
  delete file_level_metadata[72].reflection;
  _BindLinkedinContactRequest_default_instance_.Shutdown();
  delete file_level_metadata[73].reflection;
  _BindLinkedinContactResponse_default_instance_.Shutdown();
  delete file_level_metadata[74].reflection;
  _UnBindLinkedinContactRequest_default_instance_.Shutdown();
  delete file_level_metadata[75].reflection;
  _UnBindLinkedinContactResponse_default_instance_.Shutdown();
  delete file_level_metadata[76].reflection;
  _LoginQRCodeNotify_default_instance_.Shutdown();
  delete file_level_metadata[77].reflection;
  _LoginQRCodeNotifyPkg_default_instance_.Shutdown();
  delete file_level_metadata[78].reflection;
  _GetLoginQRCodeRequest_default_instance_.Shutdown();
  delete file_level_metadata[79].reflection;
  _GetLoginQRCodeResponse_default_instance_.Shutdown();
  delete file_level_metadata[80].reflection;
  _CheckLoginQRCodeRequest_default_instance_.Shutdown();
  delete file_level_metadata[81].reflection;
  _CheckLoginQRCodeResponse_default_instance_.Shutdown();
  delete file_level_metadata[82].reflection;
  _GetLoginURLRequest_default_instance_.Shutdown();
  delete file_level_metadata[83].reflection;
  _GetLoginURLResponse_default_instance_.Shutdown();
  delete file_level_metadata[84].reflection;
  _PushLoginURLRequest_default_instance_.Shutdown();
  delete file_level_metadata[85].reflection;
  _PushLoginURLResponse_default_instance_.Shutdown();
  delete file_level_metadata[86].reflection;
  _BlueToothBindLoginRequest_default_instance_.Shutdown();
  delete file_level_metadata[87].reflection;
  _BlueToothBindLoginResponse_default_instance_.Shutdown();
  delete file_level_metadata[88].reflection;
  _BlueToothAutoLoginRequest_default_instance_.Shutdown();
  delete file_level_metadata[89].reflection;
  _BlueToothAutoLoginResponse_default_instance_.Shutdown();
  delete file_level_metadata[90].reflection;
  _BlueToothAutoLoginInfoPkg_default_instance_.Shutdown();
  delete file_level_metadata[91].reflection;
  _BlueToothAutoLoginInfo_default_instance_.Shutdown();
  delete file_level_metadata[92].reflection;
  _BindBlackberryPPIDRequest_default_instance_.Shutdown();
  delete file_level_metadata[93].reflection;
  _BindBlackberryPPIDResponse_default_instance_.Shutdown();
  delete file_level_metadata[94].reflection;
  _LockWebDeviceRequest_default_instance_.Shutdown();
  delete file_level_metadata[95].reflection;
  _LockWebDeviceResponse_default_instance_.Shutdown();
  delete file_level_metadata[96].reflection;
  _GetIosExtensionKeyRequest_default_instance_.Shutdown();
  delete file_level_metadata[97].reflection;
  _ExtSession_default_instance_.Shutdown();
  delete file_level_metadata[98].reflection;
  _GetIosExtensionKeyResponse_default_instance_.Shutdown();
  delete file_level_metadata[99].reflection;
  _PatternLockBuffer_default_instance_.Shutdown();
  delete file_level_metadata[100].reflection;
  _RegisterNewPatternLockRequest_default_instance_.Shutdown();
  delete file_level_metadata[101].reflection;
  _RegisterNewPatternLockResponse_default_instance_.Shutdown();
  delete file_level_metadata[102].reflection;
  _OpPatternLockRequest_default_instance_.Shutdown();
  delete file_level_metadata[103].reflection;
  _OpPatternLockResponse_default_instance_.Shutdown();
  delete file_level_metadata[104].reflection;
  _WTLoginImgReqInfo_default_instance_.Shutdown();
  delete file_level_metadata[105].reflection;
  _WTLoginImgRespInfo_default_instance_.Shutdown();
  delete file_level_metadata[106].reflection;
  _WxVerifyCodeReqInfo_default_instance_.Shutdown();
  delete file_level_metadata[107].reflection;
  _WxVerifyCodeRespInfo_default_instance_.Shutdown();
  delete file_level_metadata[108].reflection;
  _BaseAuthReqInfo_default_instance_.Shutdown();
  delete file_level_metadata[109].reflection;
  _ManualAuthRsaReqData_default_instance_.Shutdown();
  delete file_level_metadata[110].reflection;
  _ManualAuthAesReqData_default_instance_.Shutdown();
  delete file_level_metadata[111].reflection;
  _ManualAuthRequest_default_instance_.Shutdown();
  delete file_level_metadata[112].reflection;
  _AutoAuthRsaReqData_default_instance_.Shutdown();
  delete file_level_metadata[113].reflection;
  _AutoAuthKey_default_instance_.Shutdown();
  delete file_level_metadata[114].reflection;
  _AutoAuthAesReqData_default_instance_.Shutdown();
  delete file_level_metadata[115].reflection;
  _AutoAuthRequest_default_instance_.Shutdown();
  delete file_level_metadata[116].reflection;
  _NetworkSectResp_default_instance_.Shutdown();
  delete file_level_metadata[117].reflection;
  _AuthSectResp_default_instance_.Shutdown();
  delete file_level_metadata[118].reflection;
  _AcctSectResp_default_instance_.Shutdown();
  delete file_level_metadata[119].reflection;
  _UnifyAuthResponse_default_instance_.Shutdown();
  delete file_level_metadata[120].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::micromsg::protobuf_mmbuiltintype_2eproto::InitDefaults();
  ::micromsg::protobuf_mmbase_2eproto::InitDefaults();
  _ECDHKey_default_instance_.DefaultConstruct();
  _NewRegRequest_default_instance_.DefaultConstruct();
  _SecAuthRegKeySect_default_instance_.DefaultConstruct();
  _NewRegResponse_default_instance_.DefaultConstruct();
  _GetSuggestAliasRequest_default_instance_.DefaultConstruct();
  _GetSuggestAliasResponse_default_instance_.DefaultConstruct();
  _BindOpMobileRequest_default_instance_.DefaultConstruct();
  _BindOpMobileResponse_default_instance_.DefaultConstruct();
  _EmailRegRequest_default_instance_.DefaultConstruct();
  _EmailRegResponse_default_instance_.DefaultConstruct();
  _SetEmailPwdRequest_default_instance_.DefaultConstruct();
  _SetEmailPwdResponse_default_instance_.DefaultConstruct();
  _UpdateSafeDeviceRequest_default_instance_.DefaultConstruct();
  _UpdateSafeDeviceResponse_default_instance_.DefaultConstruct();
  _DelSafeDeviceRequest_default_instance_.DefaultConstruct();
  _DelSafeDeviceResponse_default_instance_.DefaultConstruct();
  _BindSafeMobileRequest_default_instance_.DefaultConstruct();
  _BindSafeMobileResponse_default_instance_.DefaultConstruct();
  _BindQQRequest_default_instance_.DefaultConstruct();
  _BindQQResponse_default_instance_.DefaultConstruct();
  _ResetPwdRequest_default_instance_.DefaultConstruct();
  _ResetPwdResponse_default_instance_.DefaultConstruct();
  _UnBindQQRequest_default_instance_.DefaultConstruct();
  _UnBindQQResponse_default_instance_.DefaultConstruct();
  _CheckUnBindRequest_default_instance_.DefaultConstruct();
  _CheckUnBindResponse_default_instance_.DefaultConstruct();
  _FaceBookAuthRequest_default_instance_.DefaultConstruct();
  _FaceBookAuthResponse_default_instance_.DefaultConstruct();
  _RegEquipmentRequest_default_instance_.DefaultConstruct();
  _RegEquipmentResponse_default_instance_.DefaultConstruct();
  _ResetEquipmentRequest_default_instance_.DefaultConstruct();
  _ResetEquipmentResponse_default_instance_.DefaultConstruct();
  _SetPwdRequest_default_instance_.DefaultConstruct();
  _SetPwdResponse_default_instance_.DefaultConstruct();
  _QueryHasPswdRequest_default_instance_.DefaultConstruct();
  _QueryHasPswdResponse_default_instance_.DefaultConstruct();
  _VerifyPswdRequest_default_instance_.DefaultConstruct();
  _VerifyPswdResponse_default_instance_.DefaultConstruct();
  _ResetPawInfo_default_instance_.DefaultConstruct();
  _ApplyResetPawRequest_default_instance_.DefaultConstruct();
  _ApplyResetPawResponse_default_instance_.DefaultConstruct();
  _GetWeiBoURLReq_default_instance_.DefaultConstruct();
  _GetWeiBoURLResp_default_instance_.DefaultConstruct();
  _GetUserNameRequest_default_instance_.DefaultConstruct();
  _GetUserNameResponse_default_instance_.DefaultConstruct();
  _IphoneRegRequest_default_instance_.DefaultConstruct();
  _IphoneRegResponse_default_instance_.DefaultConstruct();
  _IphoneUnRegRequest_default_instance_.DefaultConstruct();
  _IphoneUnRegResponse_default_instance_.DefaultConstruct();
  _WinphoneRegRequest_default_instance_.DefaultConstruct();
  _WinphoneRegResponse_default_instance_.DefaultConstruct();
  _WinphoneUnRegRequest_default_instance_.DefaultConstruct();
  _WinphoneUnRegResponse_default_instance_.DefaultConstruct();
  _AshaRegRequest_default_instance_.DefaultConstruct();
  _AshaRegResponse_default_instance_.DefaultConstruct();
  _AshaUnRegRequest_default_instance_.DefaultConstruct();
  _AshaUnRegResponse_default_instance_.DefaultConstruct();
  _BlackBerryRegRequest_default_instance_.DefaultConstruct();
  _BlackBerryRegResponse_default_instance_.DefaultConstruct();
  _BlackBerryUnRegRequest_default_instance_.DefaultConstruct();
  _BlackBerryUnRegResponse_default_instance_.DefaultConstruct();
  _AndroidGCMRegRequest_default_instance_.DefaultConstruct();
  _AndroidGCMRegResponse_default_instance_.DefaultConstruct();
  _AndroidGCMUnRegRequest_default_instance_.DefaultConstruct();
  _AndroidGCMUnRegResponse_default_instance_.DefaultConstruct();
  _RSACert_default_instance_.DefaultConstruct();
  _GetCertRequest_default_instance_.DefaultConstruct();
  _GetCertResponse_default_instance_.DefaultConstruct();
  _NewAuthRsaReqData_default_instance_.DefaultConstruct();
  _NewAuthRequest_default_instance_.DefaultConstruct();
  _NewAuthResponse_default_instance_.DefaultConstruct();
  _BindGoogleContactRequest_default_instance_.DefaultConstruct();
  _BindGoogleContactResponse_default_instance_.DefaultConstruct();
  _BindLinkedinContactRequest_default_instance_.DefaultConstruct();
  _BindLinkedinContactResponse_default_instance_.DefaultConstruct();
  _UnBindLinkedinContactRequest_default_instance_.DefaultConstruct();
  _UnBindLinkedinContactResponse_default_instance_.DefaultConstruct();
  _LoginQRCodeNotify_default_instance_.DefaultConstruct();
  _LoginQRCodeNotifyPkg_default_instance_.DefaultConstruct();
  _GetLoginQRCodeRequest_default_instance_.DefaultConstruct();
  _GetLoginQRCodeResponse_default_instance_.DefaultConstruct();
  _CheckLoginQRCodeRequest_default_instance_.DefaultConstruct();
  _CheckLoginQRCodeResponse_default_instance_.DefaultConstruct();
  _GetLoginURLRequest_default_instance_.DefaultConstruct();
  _GetLoginURLResponse_default_instance_.DefaultConstruct();
  _PushLoginURLRequest_default_instance_.DefaultConstruct();
  _PushLoginURLResponse_default_instance_.DefaultConstruct();
  _BlueToothBindLoginRequest_default_instance_.DefaultConstruct();
  _BlueToothBindLoginResponse_default_instance_.DefaultConstruct();
  _BlueToothAutoLoginRequest_default_instance_.DefaultConstruct();
  _BlueToothAutoLoginResponse_default_instance_.DefaultConstruct();
  _BlueToothAutoLoginInfoPkg_default_instance_.DefaultConstruct();
  _BlueToothAutoLoginInfo_default_instance_.DefaultConstruct();
  _BindBlackberryPPIDRequest_default_instance_.DefaultConstruct();
  _BindBlackberryPPIDResponse_default_instance_.DefaultConstruct();
  _LockWebDeviceRequest_default_instance_.DefaultConstruct();
  _LockWebDeviceResponse_default_instance_.DefaultConstruct();
  _GetIosExtensionKeyRequest_default_instance_.DefaultConstruct();
  _ExtSession_default_instance_.DefaultConstruct();
  _GetIosExtensionKeyResponse_default_instance_.DefaultConstruct();
  _PatternLockBuffer_default_instance_.DefaultConstruct();
  _RegisterNewPatternLockRequest_default_instance_.DefaultConstruct();
  _RegisterNewPatternLockResponse_default_instance_.DefaultConstruct();
  _OpPatternLockRequest_default_instance_.DefaultConstruct();
  _OpPatternLockResponse_default_instance_.DefaultConstruct();
  _WTLoginImgReqInfo_default_instance_.DefaultConstruct();
  _WTLoginImgRespInfo_default_instance_.DefaultConstruct();
  _WxVerifyCodeReqInfo_default_instance_.DefaultConstruct();
  _WxVerifyCodeRespInfo_default_instance_.DefaultConstruct();
  _BaseAuthReqInfo_default_instance_.DefaultConstruct();
  _ManualAuthRsaReqData_default_instance_.DefaultConstruct();
  _ManualAuthAesReqData_default_instance_.DefaultConstruct();
  _ManualAuthRequest_default_instance_.DefaultConstruct();
  _AutoAuthRsaReqData_default_instance_.DefaultConstruct();
  _AutoAuthKey_default_instance_.DefaultConstruct();
  _AutoAuthAesReqData_default_instance_.DefaultConstruct();
  _AutoAuthRequest_default_instance_.DefaultConstruct();
  _NetworkSectResp_default_instance_.DefaultConstruct();
  _AuthSectResp_default_instance_.DefaultConstruct();
  _AcctSectResp_default_instance_.DefaultConstruct();
  _UnifyAuthResponse_default_instance_.DefaultConstruct();
  _ECDHKey_default_instance_.get_mutable()->key_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _NewRegRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _NewRegRequest_default_instance_.get_mutable()->randomencrykey_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _NewRegRequest_default_instance_.get_mutable()->clipubecdhkey_ = const_cast< ::micromsg::ECDHKey*>(
      ::micromsg::ECDHKey::internal_default_instance());
  _SecAuthRegKeySect_default_instance_.get_mutable()->autoauthkey_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _SecAuthRegKeySect_default_instance_.get_mutable()->svrpubecdhkey_ = const_cast< ::micromsg::ECDHKey*>(
      ::micromsg::ECDHKey::internal_default_instance());
  _SecAuthRegKeySect_default_instance_.get_mutable()->sessionkey_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _NewRegResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _NewRegResponse_default_instance_.get_mutable()->builtiniplist_ = const_cast< ::micromsg::BuiltinIPList*>(
      ::micromsg::BuiltinIPList::internal_default_instance());
  _NewRegResponse_default_instance_.get_mutable()->networkcontrol_ = const_cast< ::micromsg::NetworkControl*>(
      ::micromsg::NetworkControl::internal_default_instance());
  _NewRegResponse_default_instance_.get_mutable()->pluginkeylist_ = const_cast< ::micromsg::PluginKeyList*>(
      ::micromsg::PluginKeyList::internal_default_instance());
  _NewRegResponse_default_instance_.get_mutable()->newhostlist_ = const_cast< ::micromsg::HostList*>(
      ::micromsg::HostList::internal_default_instance());
  _NewRegResponse_default_instance_.get_mutable()->dnsinfo_ = const_cast< ::micromsg::CDNDnsInfo*>(
      ::micromsg::CDNDnsInfo::internal_default_instance());
  _NewRegResponse_default_instance_.get_mutable()->verifybuff_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _NewRegResponse_default_instance_.get_mutable()->showstyle_ = const_cast< ::micromsg::ShowStyleKey*>(
      ::micromsg::ShowStyleKey::internal_default_instance());
  _NewRegResponse_default_instance_.get_mutable()->snsdnsinfo_ = const_cast< ::micromsg::CDNDnsInfo*>(
      ::micromsg::CDNDnsInfo::internal_default_instance());
  _NewRegResponse_default_instance_.get_mutable()->appdnsinfo_ = const_cast< ::micromsg::CDNDnsInfo*>(
      ::micromsg::CDNDnsInfo::internal_default_instance());
  _NewRegResponse_default_instance_.get_mutable()->secauthregkeysect_ = const_cast< ::micromsg::SecAuthRegKeySect*>(
      ::micromsg::SecAuthRegKeySect::internal_default_instance());
  _GetSuggestAliasRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GetSuggestAliasRequest_default_instance_.get_mutable()->randomencrykey_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _GetSuggestAliasResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetSuggestAliasResponse_default_instance_.get_mutable()->verifybuff_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _BindOpMobileRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _BindOpMobileRequest_default_instance_.get_mutable()->randomencrykey_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _BindOpMobileResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _BindOpMobileResponse_default_instance_.get_mutable()->newhostlist_ = const_cast< ::micromsg::HostList*>(
      ::micromsg::HostList::internal_default_instance());
  _BindOpMobileResponse_default_instance_.get_mutable()->builtiniplist_ = const_cast< ::micromsg::BuiltinIPList*>(
      ::micromsg::BuiltinIPList::internal_default_instance());
  _BindOpMobileResponse_default_instance_.get_mutable()->networkcontrol_ = const_cast< ::micromsg::NetworkControl*>(
      ::micromsg::NetworkControl::internal_default_instance());
  _BindOpMobileResponse_default_instance_.get_mutable()->safedevicelist_ = const_cast< ::micromsg::SafeDeviceList*>(
      ::micromsg::SafeDeviceList::internal_default_instance());
  _BindOpMobileResponse_default_instance_.get_mutable()->showstyle_ = const_cast< ::micromsg::ShowStyleKey*>(
      ::micromsg::ShowStyleKey::internal_default_instance());
  _EmailRegRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _EmailRegRequest_default_instance_.get_mutable()->randomencrykey_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _EmailRegResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _EmailRegResponse_default_instance_.get_mutable()->builtiniplist_ = const_cast< ::micromsg::BuiltinIPList*>(
      ::micromsg::BuiltinIPList::internal_default_instance());
  _EmailRegResponse_default_instance_.get_mutable()->newhostlist_ = const_cast< ::micromsg::HostList*>(
      ::micromsg::HostList::internal_default_instance());
  _EmailRegResponse_default_instance_.get_mutable()->showstyle_ = const_cast< ::micromsg::ShowStyleKey*>(
      ::micromsg::ShowStyleKey::internal_default_instance());
  _EmailRegResponse_default_instance_.get_mutable()->networkcontrol_ = const_cast< ::micromsg::NetworkControl*>(
      ::micromsg::NetworkControl::internal_default_instance());
  _SetEmailPwdRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _SetEmailPwdResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _UpdateSafeDeviceRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _UpdateSafeDeviceResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _DelSafeDeviceRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _DelSafeDeviceResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _BindSafeMobileRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _BindSafeMobileResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _BindQQRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _BindQQRequest_default_instance_.get_mutable()->imgencryptkey_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _BindQQRequest_default_instance_.get_mutable()->ksid_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _BindQQRequest_default_instance_.get_mutable()->wtloginreqbuff_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _BindQQResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _BindQQResponse_default_instance_.get_mutable()->imgbuf_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _BindQQResponse_default_instance_.get_mutable()->imgencryptkey_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _BindQQResponse_default_instance_.get_mutable()->a2key_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _BindQQResponse_default_instance_.get_mutable()->ksid_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _BindQQResponse_default_instance_.get_mutable()->safedevicelist_ = const_cast< ::micromsg::SafeDeviceList*>(
      ::micromsg::SafeDeviceList::internal_default_instance());
  _BindQQResponse_default_instance_.get_mutable()->wtloginrspbuff_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _ResetPwdRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _ResetPwdResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _UnBindQQRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _UnBindQQResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _CheckUnBindRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _CheckUnBindResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _FaceBookAuthRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _FaceBookAuthResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _RegEquipmentRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _RegEquipmentRequest_default_instance_.get_mutable()->randomencrykey_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _RegEquipmentResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _RegEquipmentResponse_default_instance_.get_mutable()->builtiniplist_ = const_cast< ::micromsg::BuiltinIPList*>(
      ::micromsg::BuiltinIPList::internal_default_instance());
  _RegEquipmentResponse_default_instance_.get_mutable()->networkcontrol_ = const_cast< ::micromsg::NetworkControl*>(
      ::micromsg::NetworkControl::internal_default_instance());
  _RegEquipmentResponse_default_instance_.get_mutable()->pluginkeylist_ = const_cast< ::micromsg::PluginKeyList*>(
      ::micromsg::PluginKeyList::internal_default_instance());
  _RegEquipmentResponse_default_instance_.get_mutable()->newhostlist_ = const_cast< ::micromsg::HostList*>(
      ::micromsg::HostList::internal_default_instance());
  _ResetEquipmentRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _ResetEquipmentResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _SetPwdRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _SetPwdRequest_default_instance_.get_mutable()->autoauthkey_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _SetPwdResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _SetPwdResponse_default_instance_.get_mutable()->autoauthkey_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _QueryHasPswdRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _QueryHasPswdResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _VerifyPswdRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _VerifyPswdRequest_default_instance_.get_mutable()->imgsid_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _VerifyPswdRequest_default_instance_.get_mutable()->imgcode_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _VerifyPswdRequest_default_instance_.get_mutable()->imgencryptkey_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _VerifyPswdRequest_default_instance_.get_mutable()->ksid_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _VerifyPswdRequest_default_instance_.get_mutable()->wtloginreqbuff_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _VerifyPswdResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _VerifyPswdResponse_default_instance_.get_mutable()->imgsid_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _VerifyPswdResponse_default_instance_.get_mutable()->imgbuf_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _VerifyPswdResponse_default_instance_.get_mutable()->imgencryptkey_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _VerifyPswdResponse_default_instance_.get_mutable()->a2key_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _VerifyPswdResponse_default_instance_.get_mutable()->ksid_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _VerifyPswdResponse_default_instance_.get_mutable()->wtloginrspbuff_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _ApplyResetPawRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _ApplyResetPawRequest_default_instance_.get_mutable()->randomencrykey_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _ApplyResetPawResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetWeiBoURLReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GetWeiBoURLReq_default_instance_.get_mutable()->a2key_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _GetWeiBoURLReq_default_instance_.get_mutable()->a2keynew_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _GetWeiBoURLResp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetUserNameRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GetUserNameResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _IphoneRegRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _IphoneRegResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _IphoneUnRegRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _IphoneUnRegResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _WinphoneRegRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _WinphoneRegResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _WinphoneUnRegRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _WinphoneUnRegResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _AshaRegRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _AshaRegResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _AshaUnRegRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _AshaUnRegResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _BlackBerryRegRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _BlackBerryRegResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _BlackBerryUnRegRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _BlackBerryUnRegResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _AndroidGCMRegRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _AndroidGCMRegResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _AndroidGCMUnRegRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _AndroidGCMUnRegResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetCertRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GetCertRequest_default_instance_.get_mutable()->randomencrykey_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _GetCertResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetCertResponse_default_instance_.get_mutable()->certvalue_ = const_cast< ::micromsg::RSACert*>(
      ::micromsg::RSACert::internal_default_instance());
  _NewAuthRsaReqData_default_instance_.get_mutable()->randomencrykey_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _NewAuthRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _NewAuthRequest_default_instance_.get_mutable()->username_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _NewAuthRequest_default_instance_.get_mutable()->pwd_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _NewAuthRequest_default_instance_.get_mutable()->imgsid_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _NewAuthRequest_default_instance_.get_mutable()->imgcode_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _NewAuthRequest_default_instance_.get_mutable()->imgencryptkey_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _NewAuthRequest_default_instance_.get_mutable()->ksid_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _NewAuthRequest_default_instance_.get_mutable()->randomencrykey_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _NewAuthRequest_default_instance_.get_mutable()->wtloginreqbuff_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _NewAuthRequest_default_instance_.get_mutable()->clidbencryptkey_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _NewAuthRequest_default_instance_.get_mutable()->clidbencryptinfo_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _NewAuthResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _NewAuthResponse_default_instance_.get_mutable()->username_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _NewAuthResponse_default_instance_.get_mutable()->nickname_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _NewAuthResponse_default_instance_.get_mutable()->bindemail_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _NewAuthResponse_default_instance_.get_mutable()->bindmobile_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _NewAuthResponse_default_instance_.get_mutable()->imgsid_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _NewAuthResponse_default_instance_.get_mutable()->imgbuf_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _NewAuthResponse_default_instance_.get_mutable()->officialusername_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _NewAuthResponse_default_instance_.get_mutable()->officialnickname_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _NewAuthResponse_default_instance_.get_mutable()->qqmicroblogusername_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _NewAuthResponse_default_instance_.get_mutable()->builtiniplist_ = const_cast< ::micromsg::BuiltinIPList*>(
      ::micromsg::BuiltinIPList::internal_default_instance());
  _NewAuthResponse_default_instance_.get_mutable()->networkcontrol_ = const_cast< ::micromsg::NetworkControl*>(
      ::micromsg::NetworkControl::internal_default_instance());
  _NewAuthResponse_default_instance_.get_mutable()->pluginkeylist_ = const_cast< ::micromsg::PluginKeyList*>(
      ::micromsg::PluginKeyList::internal_default_instance());
  _NewAuthResponse_default_instance_.get_mutable()->imgencryptkey_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _NewAuthResponse_default_instance_.get_mutable()->a2key_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _NewAuthResponse_default_instance_.get_mutable()->ksid_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _NewAuthResponse_default_instance_.get_mutable()->newhostlist_ = const_cast< ::micromsg::HostList*>(
      ::micromsg::HostList::internal_default_instance());
  _NewAuthResponse_default_instance_.get_mutable()->dnsinfo_ = const_cast< ::micromsg::CDNDnsInfo*>(
      ::micromsg::CDNDnsInfo::internal_default_instance());
  _NewAuthResponse_default_instance_.get_mutable()->wtloginrspbuff_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _NewAuthResponse_default_instance_.get_mutable()->showstyle_ = const_cast< ::micromsg::ShowStyleKey*>(
      ::micromsg::ShowStyleKey::internal_default_instance());
  _NewAuthResponse_default_instance_.get_mutable()->clidbencryptkey_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _NewAuthResponse_default_instance_.get_mutable()->clidbencryptinfo_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _NewAuthResponse_default_instance_.get_mutable()->snsdnsinfo_ = const_cast< ::micromsg::CDNDnsInfo*>(
      ::micromsg::CDNDnsInfo::internal_default_instance());
  _NewAuthResponse_default_instance_.get_mutable()->appdnsinfo_ = const_cast< ::micromsg::CDNDnsInfo*>(
      ::micromsg::CDNDnsInfo::internal_default_instance());
  _NewAuthResponse_default_instance_.get_mutable()->verifybuff_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _BindGoogleContactRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _BindGoogleContactResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _BindLinkedinContactRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _BindLinkedinContactResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _UnBindLinkedinContactRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _UnBindLinkedinContactResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _LoginQRCodeNotifyPkg_default_instance_.get_mutable()->notifydata_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _GetLoginQRCodeRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GetLoginQRCodeRequest_default_instance_.get_mutable()->randomencrykey_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _GetLoginQRCodeResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetLoginQRCodeResponse_default_instance_.get_mutable()->qrcode_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _GetLoginQRCodeResponse_default_instance_.get_mutable()->notifykey_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _GetLoginQRCodeResponse_default_instance_.get_mutable()->bluetoothbroadcastcontent_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _CheckLoginQRCodeRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _CheckLoginQRCodeRequest_default_instance_.get_mutable()->randomencrykey_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _CheckLoginQRCodeResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _CheckLoginQRCodeResponse_default_instance_.get_mutable()->notifypkg_ = const_cast< ::micromsg::LoginQRCodeNotifyPkg*>(
      ::micromsg::LoginQRCodeNotifyPkg::internal_default_instance());
  _GetLoginURLRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GetLoginURLResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _PushLoginURLRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _PushLoginURLRequest_default_instance_.get_mutable()->randomencrykey_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _PushLoginURLRequest_default_instance_.get_mutable()->autoauthkey_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _PushLoginURLResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _PushLoginURLResponse_default_instance_.get_mutable()->notifykey_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _PushLoginURLResponse_default_instance_.get_mutable()->bluetoothbroadcastcontent_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _BlueToothBindLoginRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _BlueToothBindLoginResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _BlueToothAutoLoginRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _BlueToothAutoLoginRequest_default_instance_.get_mutable()->logininfodata_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _BlueToothAutoLoginRequest_default_instance_.get_mutable()->randomencrykey_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _BlueToothAutoLoginResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _BlueToothAutoLoginInfoPkg_default_instance_.get_mutable()->salt_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _BlueToothAutoLoginInfoPkg_default_instance_.get_mutable()->data_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _BindBlackberryPPIDRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _BindBlackberryPPIDResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _LockWebDeviceRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _LockWebDeviceRequest_default_instance_.get_mutable()->bluetoothbroadcastcontent_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _LockWebDeviceResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetIosExtensionKeyRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _ExtSession_default_instance_.get_mutable()->sessionkey_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _ExtSession_default_instance_.get_mutable()->serverid_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _GetIosExtensionKeyResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetIosExtensionKeyResponse_default_instance_.get_mutable()->key_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _GetIosExtensionKeyResponse_default_instance_.get_mutable()->extensionsession_ = const_cast< ::micromsg::ExtSession*>(
      ::micromsg::ExtSession::internal_default_instance());
  _PatternLockBuffer_default_instance_.get_mutable()->svrpatternhash_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _PatternLockBuffer_default_instance_.get_mutable()->sign_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _RegisterNewPatternLockRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _RegisterNewPatternLockRequest_default_instance_.get_mutable()->paytoken_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _RegisterNewPatternLockRequest_default_instance_.get_mutable()->patternhash_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _RegisterNewPatternLockResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _RegisterNewPatternLockResponse_default_instance_.get_mutable()->patternlockbuf_ = const_cast< ::micromsg::PatternLockBuffer*>(
      ::micromsg::PatternLockBuffer::internal_default_instance());
  _OpPatternLockRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _OpPatternLockRequest_default_instance_.get_mutable()->nowpatternhash_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _OpPatternLockRequest_default_instance_.get_mutable()->newpatternhash_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _OpPatternLockResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _OpPatternLockResponse_default_instance_.get_mutable()->patternlockbuf_ = const_cast< ::micromsg::PatternLockBuffer*>(
      ::micromsg::PatternLockBuffer::internal_default_instance());
  _WTLoginImgReqInfo_default_instance_.get_mutable()->ksid_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _WTLoginImgRespInfo_default_instance_.get_mutable()->ksid_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _WTLoginImgRespInfo_default_instance_.get_mutable()->imgbuf_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _WxVerifyCodeRespInfo_default_instance_.get_mutable()->verifybuff_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _BaseAuthReqInfo_default_instance_.get_mutable()->wtloginreqbuff_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _BaseAuthReqInfo_default_instance_.get_mutable()->wtloginimgreqinfo_ = const_cast< ::micromsg::WTLoginImgReqInfo*>(
      ::micromsg::WTLoginImgReqInfo::internal_default_instance());
  _BaseAuthReqInfo_default_instance_.get_mutable()->wxverifycodereqinfo_ = const_cast< ::micromsg::WxVerifyCodeReqInfo*>(
      ::micromsg::WxVerifyCodeReqInfo::internal_default_instance());
  _BaseAuthReqInfo_default_instance_.get_mutable()->clidbencryptkey_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _BaseAuthReqInfo_default_instance_.get_mutable()->clidbencryptinfo_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _ManualAuthRsaReqData_default_instance_.get_mutable()->randomencrykey_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _ManualAuthRsaReqData_default_instance_.get_mutable()->clipubecdhkey_ = const_cast< ::micromsg::ECDHKey*>(
      ::micromsg::ECDHKey::internal_default_instance());
  _ManualAuthAesReqData_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _ManualAuthAesReqData_default_instance_.get_mutable()->basereqinfo_ = const_cast< ::micromsg::BaseAuthReqInfo*>(
      ::micromsg::BaseAuthReqInfo::internal_default_instance());
  _ManualAuthAesReqData_default_instance_.get_mutable()->clientcheckdat_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _ManualAuthRequest_default_instance_.get_mutable()->rsareqdata_ = const_cast< ::micromsg::ManualAuthRsaReqData*>(
      ::micromsg::ManualAuthRsaReqData::internal_default_instance());
  _ManualAuthRequest_default_instance_.get_mutable()->aesreqdata_ = const_cast< ::micromsg::ManualAuthAesReqData*>(
      ::micromsg::ManualAuthAesReqData::internal_default_instance());
  _AutoAuthRsaReqData_default_instance_.get_mutable()->aesencryptkey_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _AutoAuthRsaReqData_default_instance_.get_mutable()->clipubecdhkey_ = const_cast< ::micromsg::ECDHKey*>(
      ::micromsg::ECDHKey::internal_default_instance());
  _AutoAuthKey_default_instance_.get_mutable()->encryptkey_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _AutoAuthKey_default_instance_.get_mutable()->key_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _AutoAuthAesReqData_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _AutoAuthAesReqData_default_instance_.get_mutable()->basereqinfo_ = const_cast< ::micromsg::BaseAuthReqInfo*>(
      ::micromsg::BaseAuthReqInfo::internal_default_instance());
  _AutoAuthAesReqData_default_instance_.get_mutable()->autoauthkey_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _AutoAuthRequest_default_instance_.get_mutable()->rsareqdata_ = const_cast< ::micromsg::AutoAuthRsaReqData*>(
      ::micromsg::AutoAuthRsaReqData::internal_default_instance());
  _AutoAuthRequest_default_instance_.get_mutable()->aesreqdata_ = const_cast< ::micromsg::AutoAuthAesReqData*>(
      ::micromsg::AutoAuthAesReqData::internal_default_instance());
  _NetworkSectResp_default_instance_.get_mutable()->newhostlist_ = const_cast< ::micromsg::HostList*>(
      ::micromsg::HostList::internal_default_instance());
  _NetworkSectResp_default_instance_.get_mutable()->networkcontrol_ = const_cast< ::micromsg::NetworkControl*>(
      ::micromsg::NetworkControl::internal_default_instance());
  _NetworkSectResp_default_instance_.get_mutable()->builtiniplist_ = const_cast< ::micromsg::BuiltinIPList*>(
      ::micromsg::BuiltinIPList::internal_default_instance());
  _AuthSectResp_default_instance_.get_mutable()->svrpubecdhkey_ = const_cast< ::micromsg::ECDHKey*>(
      ::micromsg::ECDHKey::internal_default_instance());
  _AuthSectResp_default_instance_.get_mutable()->sessionkey_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _AuthSectResp_default_instance_.get_mutable()->autoauthkey_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _AuthSectResp_default_instance_.get_mutable()->wtloginrspbuff_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _AuthSectResp_default_instance_.get_mutable()->wtloginimgrespinfo_ = const_cast< ::micromsg::WTLoginImgRespInfo*>(
      ::micromsg::WTLoginImgRespInfo::internal_default_instance());
  _AuthSectResp_default_instance_.get_mutable()->wxverifycoderespinfo_ = const_cast< ::micromsg::WxVerifyCodeRespInfo*>(
      ::micromsg::WxVerifyCodeRespInfo::internal_default_instance());
  _AuthSectResp_default_instance_.get_mutable()->clidbencryptkey_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _AuthSectResp_default_instance_.get_mutable()->clidbencryptinfo_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _AuthSectResp_default_instance_.get_mutable()->a2key_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _AuthSectResp_default_instance_.get_mutable()->showstyle_ = const_cast< ::micromsg::ShowStyleKey*>(
      ::micromsg::ShowStyleKey::internal_default_instance());
  _UnifyAuthResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _UnifyAuthResponse_default_instance_.get_mutable()->authsectresp_ = const_cast< ::micromsg::AuthSectResp*>(
      ::micromsg::AuthSectResp::internal_default_instance());
  _UnifyAuthResponse_default_instance_.get_mutable()->acctsectresp_ = const_cast< ::micromsg::AcctSectResp*>(
      ::micromsg::AcctSectResp::internal_default_instance());
  _UnifyAuthResponse_default_instance_.get_mutable()->networksectresp_ = const_cast< ::micromsg::NetworkSectResp*>(
      ::micromsg::NetworkSectResp::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rmmlogin.proto\022\010micromsg\032\023mmbuiltintype"
      ".proto\032\014mmbase.proto\"@\n\007ECDHKey\022\013\n\003Nid\030\001"
      " \002(\005\022(\n\003Key\030\002 \002(\0132\033.micromsg.SKBuiltinBu"
      "ffer_t\"\241\005\n\rNewRegRequest\022*\n\013BaseRequest\030"
      "\001 \002(\0132\025.micromsg.BaseRequest\022\020\n\010UserName"
      "\030\002 \001(\t\022\013\n\003Pwd\030\003 \001(\t\022\020\n\010NickName\030\004 \001(\t\022\017\n"
      "\007BindUin\030\005 \001(\r\022\021\n\tBindEmail\030\006 \001(\t\022\022\n\nBin"
      "dMobile\030\007 \001(\t\022\016\n\006Ticket\030\010 \001(\t\022\024\n\014Builtin"
      "IPSeq\030\014 \001(\r\022\r\n\005DLSrc\030\r \001(\r\022\017\n\007RegMode\030\016 "
      "\001(\r\022\020\n\010TimeZone\030\017 \001(\t\022\020\n\010Language\030\020 \001(\t\022"
      "\020\n\010ForceReg\030\021 \001(\r\022\023\n\013RealCountry\030\022 \001(\t\0223"
      "\n\016RandomEncryKey\030\023 \001(\0132\033.micromsg.SKBuil"
      "tinBuffer_t\022\r\n\005Alias\030\024 \001(\t\022\027\n\017VerifySign"
      "ature\030\025 \001(\t\022\025\n\rVerifyContent\030\026 \001(\t\022\022\n\nHa"
      "sHeadImg\030\027 \001(\r\022\022\n\nSuggestRet\030\030 \001(\r\022\023\n\013Cl"
      "ientSeqID\030\037 \001(\t\022\020\n\010AdSource\030  \001(\t\022\021\n\tAnd"
      "roidID\030! \001(\t\022\017\n\007MacAddr\030\" \001(\t\022\031\n\021Android"
      "InstallRef\030# \001(\t\022\031\n\021ClientFingerprint\030$ "
      "\001(\t\022(\n\rCliPubECDHKey\030% \001(\0132\021.micromsg.EC"
      "DHKey\022\021\n\tGoogleAid\030& \001(\t\022\020\n\010BundleID\030\' \001"
      "(\t\"\270\001\n\021SecAuthRegKeySect\0220\n\013AutoAuthKey\030"
      "\001 \002(\0132\033.micromsg.SKBuiltinBuffer_t\022(\n\rSv"
      "rPubECDHKey\030\002 \002(\0132\021.micromsg.ECDHKey\022/\n\n"
      "SessionKey\030\003 \002(\0132\033.micromsg.SKBuiltinBuf"
      "fer_t\022\026\n\016AuthResultFlag\030\004 \002(\r\"\260\007\n\016NewReg"
      "Response\022,\n\014BaseResponse\030\001 \002(\0132\026.microms"
      "g.BaseResponse\022\013\n\003Uin\030\002 \002(\r\022\022\n\nSessionKe"
      "y\030\003 \001(\t\022\030\n\020OfficialUserName\030\004 \001(\t\022\030\n\020Off"
      "icialNickName\030\005 \001(\t\022\033\n\023QQMicroBlogUserNa"
      "me\030\006 \001(\t\022\021\n\tBindEmail\030\007 \001(\t\022\026\n\016PushMailS"
      "tatus\030\010 \002(\r\022\027\n\017SendCardBitFlag\030\t \001(\r\022\035\n\025"
      "PushMailSettingTicket\030\n \001(\t\022.\n\rBuiltinIP"
      "List\030\016 \001(\0132\027.micromsg.BuiltinIPList\022\r\n\005F"
      "SURL\030\017 \001(\t\022\020\n\010UserName\030\020 \001(\t\022\016\n\006Status\030\021"
      " \001(\r\0220\n\016NetworkControl\030\022 \001(\0132\030.micromsg."
      "NetworkControl\022\022\n\nReturnFlag\030\023 \001(\r\022\017\n\007Re"
      "gType\030\024 \001(\r\022\017\n\007AuthKey\030\025 \001(\t\022.\n\rPluginKe"
      "yList\030\026 \001(\0132\027.micromsg.PluginKeyList\022\020\n\010"
      "Password\030\027 \001(\t\022\023\n\013ProfileFlag\030\030 \001(\r\022\'\n\013N"
      "ewHostList\030\031 \001(\0132\022.micromsg.HostList\022\026\n\016"
      "AutoAuthTicket\030\032 \001(\t\022%\n\007DnsInfo\030\033 \001(\0132\024."
      "micromsg.CDNDnsInfo\022\022\n\nStepTicket\030\034 \001(\t\022"
      "\027\n\017VerifySignature\030\035 \001(\t\022/\n\nVerifyBuff\030\036"
      " \001(\0132\033.micromsg.SKBuiltinBuffer_t\022)\n\tSho"
      "wStyle\030\037 \001(\0132\026.micromsg.ShowStyleKey\022(\n\n"
      "SnsDnsInfo\030  \001(\0132\024.micromsg.CDNDnsInfo\022("
      "\n\nAppDnsInfo\030! \001(\0132\024.micromsg.CDNDnsInfo"
      "\0226\n\021SecAuthRegKeySect\030\" \001(\0132\033.micromsg.S"
      "ecAuthRegKeySect\"\257\002\n\026GetSuggestAliasRequ"
      "est\022*\n\013BaseRequest\030\001 \002(\0132\025.micromsg.Base"
      "Request\0223\n\016RandomEncryKey\030\002 \002(\0132\033.microm"
      "sg.SKBuiltinBuffer_t\022\023\n\013RegBindName\030\003 \001("
      "\t\022\021\n\tRegTicket\030\004 \001(\t\022\020\n\010NickName\030\005 \001(\t\022\022"
      "\n\nInputAlias\030\006 \001(\t\022\027\n\017VerifySignature\030\007 "
      "\001(\t\022\025\n\rVerifyContent\030\010 \001(\t\022\017\n\007RegMode\030\t "
      "\002(\r\022\020\n\010Language\030\n \001(\t\022\023\n\013ClientSeqID\030\013 \001"
      "(\t\"\340\001\n\027GetSuggestAliasResponse\022,\n\014BaseRe"
      "sponse\030\001 \002(\0132\026.micromsg.BaseResponse\022\r\n\005"
      "Count\030\002 \002(\r\022)\n\004List\030\003 \003(\0132\033.micromsg.SKB"
      "uiltinString_t\022\027\n\017VerifySignature\030\004 \001(\t\022"
      "/\n\nVerifyBuff\030\005 \001(\0132\033.micromsg.SKBuiltin"
      "Buffer_t\022\023\n\013UserNameRet\030\006 \001(\005\"\213\003\n\023BindOp"
      "MobileRequest\022*\n\013BaseRequest\030\001 \002(\0132\025.mic"
      "romsg.BaseRequest\022\020\n\010UserName\030\002 \001(\t\022\016\n\006M"
      "obile\030\003 \001(\t\022\016\n\006Opcode\030\004 \002(\005\022\022\n\nVerifycod"
      "e\030\005 \001(\t\022\020\n\010DialFlag\030\006 \001(\005\022\020\n\010DialLang\030\007 "
      "\001(\t\022\022\n\nAuthTicket\030\010 \001(\t\022\020\n\010ForceReg\030\t \001("
      "\r\022\026\n\016SafeDeviceName\030\n \001(\t\022\026\n\016SafeDeviceT"
      "ype\030\013 \001(\t\0223\n\016RandomEncryKey\030\014 \001(\0132\033.micr"
      "omsg.SKBuiltinBuffer_t\022\020\n\010Language\030\r \001(\t"
      "\022\031\n\021InputMobileRetrys\030\016 \001(\r\022\021\n\tAdjustRet"
      "\030\017 \001(\r\022\023\n\013ClientSeqID\030\020 \001(\t\"\365\003\n\024BindOpMo"
      "bileResponse\022,\n\014BaseResponse\030\001 \002(\0132\026.mic"
      "romsg.BaseResponse\022\016\n\006ticket\030\002 \001(\t\022\r\n\005Sm"
      "sNo\030\003 \001(\t\022\022\n\nNeedSetPwd\030\004 \001(\r\022\013\n\003Pwd\030\005 \001"
      "(\t\022\020\n\010Username\030\006 \001(\t\022\'\n\013NewHostList\030\007 \001("
      "\0132\022.micromsg.HostList\022.\n\rBuiltinIPList\030\010"
      " \001(\0132\027.micromsg.BuiltinIPList\0220\n\016Network"
      "Control\030\t \001(\0132\030.micromsg.NetworkControl\022"
      "\022\n\nAuthTicket\030\n \001(\t\022\022\n\nSafeDevice\030\013 \001(\r\022"
      "\n\n\002CC\030\014 \001(\t\022\025\n\rObsoleteItem1\030\r \001(\r\0220\n\016Sa"
      "feDeviceList\030\016 \001(\0132\030.micromsg.SafeDevice"
      "List\022\022\n\nPureMobile\030\017 \001(\t\022\026\n\016FormatedMobi"
      "le\030\020 \001(\t\022)\n\tShowStyle\030\021 \001(\0132\026.micromsg.S"
      "howStyleKey\"\203\002\n\017EmailRegRequest\022*\n\013BaseR"
      "equest\030\001 \002(\0132\025.micromsg.BaseRequest\0223\n\016R"
      "andomEncryKey\030\002 \002(\0132\033.micromsg.SKBuiltin"
      "Buffer_t\022\016\n\006Opcode\030\003 \002(\r\022\r\n\005Email\030\004 \001(\t\022"
      "\020\n\010Language\030\005 \001(\t\022\013\n\003Pwd\030\006 \001(\t\022\022\n\nVerify"
      "Code\030\007 \001(\t\022\023\n\013ClientSeqID\030\010 \001(\t\022\023\n\013RealC"
      "ountry\030\t \001(\t\022\023\n\013VerifyScene\030\n \001(\r\"\206\002\n\020Em"
      "ailRegResponse\022,\n\014BaseResponse\030\001 \002(\0132\026.m"
      "icromsg.BaseResponse\022\016\n\006Ticket\030\002 \001(\t\022.\n\r"
      "BuiltinIPList\030\003 \001(\0132\027.micromsg.BuiltinIP"
      "List\022\'\n\013NewHostList\030\004 \001(\0132\022.micromsg.Hos"
      "tList\022)\n\tShowStyle\030\005 \001(\0132\026.micromsg.Show"
      "StyleKey\0220\n\016NetworkControl\030\006 \001(\0132\030.micro"
      "msg.NetworkControl\"]\n\022SetEmailPwdRequest"
      "\022*\n\013BaseRequest\030\001 \002(\0132\025.micromsg.BaseReq"
      "uest\022\013\n\003Pwd\030\002 \001(\t\022\016\n\006Ticket\030\003 \001(\t\"C\n\023Set"
      "EmailPwdResponse\022,\n\014BaseResponse\030\001 \002(\0132\026"
      ".micromsg.BaseResponse\"u\n\027UpdateSafeDevi"
      "ceRequest\022*\n\013BaseRequest\030\001 \002(\0132\025.microms"
      "g.BaseRequest\022\014\n\004Uuid\030\002 \001(\t\022\014\n\004Name\030\003 \001("
      "\t\022\022\n\nDeviceType\030\004 \001(\t\"\\\n\030UpdateSafeDevic"
      "eResponse\022,\n\014BaseResponse\030\001 \002(\0132\026.microm"
      "sg.BaseResponse\022\022\n\nSafeDevice\030\002 \001(\r\"P\n\024D"
      "elSafeDeviceRequest\022*\n\013BaseRequest\030\001 \002(\013"
      "2\025.micromsg.BaseRequest\022\014\n\004Uuid\030\002 \001(\t\"Y\n"
      "\025DelSafeDeviceResponse\022,\n\014BaseResponse\030\001"
      " \002(\0132\026.micromsg.BaseResponse\022\022\n\nSafeDevi"
      "ce\030\002 \001(\r\"c\n\025BindSafeMobileRequest\022*\n\013Bas"
      "eRequest\030\001 \002(\0132\025.micromsg.BaseRequest\022\016\n"
      "\006Mobile\030\002 \001(\t\022\016\n\006Opcode\030\003 \002(\005\"F\n\026BindSaf"
      "eMobileResponse\022,\n\014BaseResponse\030\001 \002(\0132\026."
      "micromsg.BaseResponse\"\356\002\n\rBindQQRequest\022"
      "*\n\013BaseRequest\030\001 \002(\0132\025.micromsg.BaseRequ"
      "est\022\n\n\002QQ\030\002 \002(\r\022\013\n\003Pwd\030\003 \001(\t\022\014\n\004Pwd2\030\004 \001"
      "(\t\022\016\n\006ImgSid\030\005 \001(\t\022\017\n\007ImgCode\030\006 \001(\t\022\016\n\006O"
      "PCode\030\007 \002(\r\0222\n\rImgEncryptKey\030\010 \001(\0132\033.mic"
      "romsg.SKBuiltinString_t\022)\n\004KSid\030\t \001(\0132\033."
      "micromsg.SKBuiltinBuffer_t\022\025\n\rSetAsMainA"
      "cct\030\n \001(\r\022\026\n\016SafeDeviceName\030\013 \001(\t\022\026\n\016Saf"
      "eDeviceType\030\014 \001(\t\0223\n\016WTLoginReqBuff\030\r \001("
      "\0132\033.micromsg.SKBuiltinBuffer_t\"\356\003\n\016BindQ"
      "QResponse\022,\n\014BaseResponse\030\001 \002(\0132\026.microm"
      "sg.BaseResponse\022\016\n\006ImgSid\030\002 \001(\t\022+\n\006ImgBu"
      "f\030\003 \002(\0132\033.micromsg.SKBuiltinBuffer_t\022\026\n\016"
      "PushMailStatus\030\004 \001(\r\022\030\n\020PrivateMsgStatus"
      "\030\005 \001(\r\022\025\n\rMicroBlogName\030\006 \001(\t\022\016\n\006Status\030"
      "\007 \001(\r\022\022\n\nQQMailSkey\030\010 \001(\t\0222\n\rImgEncryptK"
      "ey\030\t \001(\0132\033.micromsg.SKBuiltinString_t\022*\n"
      "\005A2Key\030\n \001(\0132\033.micromsg.SKBuiltinBuffer_"
      "t\022)\n\004KSid\030\013 \001(\0132\033.micromsg.SKBuiltinBuff"
      "er_t\0220\n\016SafeDeviceList\030\014 \001(\0132\030.micromsg."
      "SafeDeviceList\022\022\n\nSafeDevice\030\r \001(\r\0223\n\016WT"
      "LoginRspBuff\030\016 \001(\0132\033.micromsg.SKBuiltinB"
      "uffer_t\"Z\n\017ResetPwdRequest\022*\n\013BaseReques"
      "t\030\001 \002(\0132\025.micromsg.BaseRequest\022\016\n\006OpCode"
      "\030\002 \002(\r\022\013\n\003Pwd\030\003 \001(\t\"M\n\020ResetPwdResponse\022"
      ",\n\014BaseResponse\030\001 \002(\0132\026.micromsg.BaseRes"
      "ponse\022\013\n\003Url\030\002 \001(\t\"M\n\017UnBindQQRequest\022*\n"
      "\013BaseRequest\030\001 \002(\0132\025.micromsg.BaseReques"
      "t\022\016\n\006Ticket\030\002 \001(\t\"@\n\020UnBindQQResponse\022,\n"
      "\014BaseResponse\030\001 \002(\0132\026.micromsg.BaseRespo"
      "nse\"R\n\022CheckUnBindRequest\022*\n\013BaseRequest"
      "\030\001 \002(\0132\025.micromsg.BaseRequest\022\020\n\010BindTyp"
      "e\030\002 \002(\005\"r\n\023CheckUnBindResponse\022,\n\014BaseRe"
      "sponse\030\001 \002(\0132\026.micromsg.BaseResponse\022\024\n\014"
      "RandomPasswd\030\002 \001(\t\022\027\n\017CanUnbindNotice\030\003 "
      "\001(\t\"~\n\023FaceBookAuthRequest\022*\n\013BaseReques"
      "t\030\001 \002(\0132\025.micromsg.BaseRequest\022\016\n\006OpType"
      "\030\002 \002(\r\022\023\n\013AccessToken\030\003 \001(\t\022\026\n\016RandomEnc"
      "ryKey\030\004 \001(\t\"j\n\024FaceBookAuthResponse\022,\n\014B"
      "aseResponse\030\001 \002(\0132\026.micromsg.BaseRespons"
      "e\022\020\n\010FBUserID\030\002 \002(\004\022\022\n\nFBUserName\030\003 \001(\t\""
      "\310\002\n\023RegEquipmentRequest\022*\n\013BaseRequest\030\001"
      " \002(\0132\025.micromsg.BaseRequest\022\014\n\004Type\030\002 \002("
      "\r\022\024\n\014SerialNumber\030\003 \001(\t\022\014\n\004IMEI\030\004 \001(\t\022\013\n"
      "\003MAC\030\005 \001(\t\022\020\n\010NickName\030\006 \001(\t\022\024\n\014BuiltinI"
      "PSeq\030\007 \002(\r\022\r\n\005DLSrc\030\010 \002(\r\022\017\n\007RegMode\030\t \002"
      "(\r\022\020\n\010TimeZone\030\n \001(\t\022\020\n\010Language\030\013 \001(\t\022\020"
      "\n\010ForceReg\030\014 \002(\r\022\023\n\013RealCountry\030\r \001(\t\0223\n"
      "\016RandomEncryKey\030\016 \002(\0132\033.micromsg.SKBuilt"
      "inBuffer_t\"\342\004\n\024RegEquipmentResponse\022,\n\014B"
      "aseResponse\030\001 \002(\0132\026.micromsg.BaseRespons"
      "e\022\013\n\003Uin\030\002 \002(\r\022\022\n\nSessionKey\030\003 \001(\t\022\030\n\020Of"
      "ficialUserName\030\004 \001(\t\022\030\n\020OfficialNickName"
      "\030\005 \001(\t\022\033\n\023QQMicroBlogUserName\030\006 \001(\t\022\021\n\tB"
      "indEmail\030\007 \001(\t\022\026\n\016PushMailStatus\030\010 \002(\r\022\027"
      "\n\017SendCardBitFlag\030\t \002(\r\022\035\n\025PushMailSetti"
      "ngTicket\030\n \001(\t\022.\n\rBuiltinIPList\030\016 \002(\0132\027."
      "micromsg.BuiltinIPList\022\r\n\005FSURL\030\017 \001(\t\022\020\n"
      "\010UserName\030\020 \001(\t\022\016\n\006Status\030\021 \002(\r\0220\n\016Netwo"
      "rkControl\030\022 \002(\0132\030.micromsg.NetworkContro"
      "l\022\022\n\nReturnFlag\030\023 \002(\r\022\017\n\007RegType\030\024 \002(\r\022\017"
      "\n\007AuthKey\030\025 \001(\t\022.\n\rPluginKeyList\030\026 \002(\0132\027"
      ".micromsg.PluginKeyList\022\020\n\010Password\030\027 \001("
      "\t\022\023\n\013ProfileFlag\030\030 \002(\r\022\'\n\013NewHostList\030\031 "
      "\002(\0132\022.micromsg.HostList\"C\n\025ResetEquipmen"
      "tRequest\022*\n\013BaseRequest\030\001 \002(\0132\025.micromsg"
      ".BaseRequest\"F\n\026ResetEquipmentResponse\022,"
      "\n\014BaseResponse\030\001 \002(\0132\026.micromsg.BaseResp"
      "onse\"\217\001\n\rSetPwdRequest\022*\n\013BaseRequest\030\001 "
      "\002(\0132\025.micromsg.BaseRequest\022\020\n\010Password\030\002"
      " \001(\t\022\016\n\006Ticket\030\003 \001(\t\0220\n\013AutoAuthKey\030\004 \001("
      "\0132\033.micromsg.SKBuiltinBuffer_t\"p\n\016SetPwd"
      "Response\022,\n\014BaseResponse\030\001 \002(\0132\026.microms"
      "g.BaseResponse\0220\n\013AutoAuthKey\030\002 \001(\0132\033.mi"
      "cromsg.SKBuiltinBuffer_t\"P\n\023QueryHasPswd"
      "Request\022*\n\013BaseRequest\030\001 \002(\0132\025.micromsg."
      "BaseRequest\022\r\n\005Scene\030\002 \002(\005\"D\n\024QueryHasPs"
      "wdResponse\022,\n\014BaseResponse\030\001 \002(\0132\026.micro"
      "msg.BaseResponse\"\352\002\n\021VerifyPswdRequest\022*"
      "\n\013BaseRequest\030\001 \002(\0132\025.micromsg.BaseReque"
      "st\022\016\n\006OpCode\030\002 \002(\r\022\014\n\004Pwd1\030\003 \001(\t\022\014\n\004Pwd2"
      "\030\004 \001(\t\022+\n\006ImgSid\030\005 \001(\0132\033.micromsg.SKBuil"
      "tinString_t\022,\n\007ImgCode\030\006 \001(\0132\033.micromsg."
      "SKBuiltinString_t\0222\n\rImgEncryptKey\030\007 \001(\013"
      "2\033.micromsg.SKBuiltinString_t\022)\n\004KSid\030\010 "
      "\001(\0132\033.micromsg.SKBuiltinBuffer_t\022\016\n\006Scen"
      "ce\030\t \001(\r\0223\n\016WTLoginReqBuff\030\n \001(\0132\033.micro"
      "msg.SKBuiltinBuffer_t\"\375\002\n\022VerifyPswdResp"
      "onse\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg.Ba"
      "seResponse\022+\n\006ImgSid\030\002 \002(\0132\033.micromsg.SK"
      "BuiltinString_t\022+\n\006ImgBuf\030\003 \002(\0132\033.microm"
      "sg.SKBuiltinBuffer_t\022\016\n\006Ticket\030\004 \001(\t\0222\n\r"
      "ImgEncryptKey\030\005 \001(\0132\033.micromsg.SKBuiltin"
      "String_t\022*\n\005A2Key\030\006 \001(\0132\033.micromsg.SKBui"
      "ltinBuffer_t\022)\n\004KSid\030\007 \001(\0132\033.micromsg.SK"
      "BuiltinBuffer_t\022\017\n\007AuthKey\030\010 \001(\t\0223\n\016WTLo"
      "ginRspBuff\030\t \001(\0132\033.micromsg.SKBuiltinBuf"
      "fer_t\"\?\n\014ResetPawInfo\022\022\n\nCreateTime\030\001 \002("
      "\r\022\017\n\007IsReset\030\002 \002(\r\022\n\n\002ID\030\003 \002(\r\"\253\001\n\024Apply"
      "ResetPawRequest\022*\n\013BaseRequest\030\001 \002(\0132\025.m"
      "icromsg.BaseRequest\022\014\n\004Type\030\002 \002(\005\022\021\n\tRes"
      "etInfo\030\003 \001(\t\022\021\n\tGetMethod\030\004 \001(\r\0223\n\016Rando"
      "mEncryKey\030\005 \001(\0132\033.micromsg.SKBuiltinBuff"
      "er_t\"E\n\025ApplyResetPawResponse\022,\n\014BaseRes"
      "ponse\030\001 \002(\0132\026.micromsg.BaseResponse\"\316\001\n\016"
      "GetWeiBoURLReq\022*\n\013BaseRequest\030\001 \002(\0132\025.mi"
      "cromsg.BaseRequest\022*\n\005A2Key\030\002 \002(\0132\033.micr"
      "omsg.SKBuiltinBuffer_t\022\020\n\010UserName\030\003 \001(\t"
      "\022\r\n\005Scene\030\004 \001(\r\022\024\n\014BlogUserName\030\005 \001(\t\022-\n"
      "\010A2KeyNew\030\006 \001(\0132\033.micromsg.SKBuiltinBuff"
      "er_t\"L\n\017GetWeiBoURLResp\022,\n\014BaseResponse\030"
      "\001 \002(\0132\026.micromsg.BaseResponse\022\013\n\003URL\030\002 \001"
      "(\t\"\240\001\n\022GetUserNameRequest\022*\n\013BaseRequest"
      "\030\001 \002(\0132\025.micromsg.BaseRequest\022\017\n\007BindUin"
      "\030\002 \002(\r\022\020\n\010NickName\030\003 \001(\t\022\016\n\006Ticket\030\004 \001(\t"
      "\022\013\n\003Pwd\030\005 \001(\t\022\016\n\006Mobile\030\006 \001(\t\022\016\n\006OpCode\030"
      "\007 \001(\r\"e\n\023GetUserNameResponse\022,\n\014BaseResp"
      "onse\030\001 \002(\0132\026.micromsg.BaseResponse\022\020\n\010Us"
      "erName\030\002 \001(\t\022\016\n\006Ticket\030\003 \001(\t\"\270\001\n\020IphoneR"
      "egRequest\022*\n\013BaseRequest\030\001 \002(\0132\025.microms"
      "g.BaseRequest\022\r\n\005Token\030\002 \001(\t\022\r\n\005Sound\030\003 "
      "\001(\t\022\016\n\006Status\030\004 \001(\r\022\021\n\tVoipSound\030\005 \001(\t\022\021"
      "\n\tTokenCert\030\006 \001(\r\022\020\n\010TokenEnv\030\007 \001(\r\022\022\n\nT"
      "okenScene\030\010 \001(\r\"A\n\021IphoneRegResponse\022,\n\014"
      "BaseResponse\030\001 \002(\0132\026.micromsg.BaseRespon"
      "se\"O\n\022IphoneUnRegRequest\022*\n\013BaseRequest\030"
      "\001 \002(\0132\025.micromsg.BaseRequest\022\r\n\005Token\030\002 "
      "\001(\t\"C\n\023IphoneUnRegResponse\022,\n\014BaseRespon"
      "se\030\001 \002(\0132\026.micromsg.BaseResponse\"M\n\022Winp"
      "honeRegRequest\022*\n\013BaseRequest\030\001 \002(\0132\025.mi"
      "cromsg.BaseRequest\022\013\n\003Uri\030\002 \001(\t\"C\n\023Winph"
      "oneRegResponse\022,\n\014BaseResponse\030\001 \002(\0132\026.m"
      "icromsg.BaseResponse\"O\n\024WinphoneUnRegReq"
      "uest\022*\n\013BaseRequest\030\001 \002(\0132\025.micromsg.Bas"
      "eRequest\022\013\n\003Uri\030\002 \001(\t\"E\n\025WinphoneUnRegRe"
      "sponse\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg."
      "BaseResponse\"I\n\016AshaRegRequest\022*\n\013BaseRe"
      "quest\030\001 \002(\0132\025.micromsg.BaseRequest\022\013\n\003Ni"
      "d\030\002 \001(\t\"\?\n\017AshaRegResponse\022,\n\014BaseRespon"
      "se\030\001 \002(\0132\026.micromsg.BaseResponse\"K\n\020Asha"
      "UnRegRequest\022*\n\013BaseRequest\030\001 \002(\0132\025.micr"
      "omsg.BaseRequest\022\013\n\003Nid\030\002 \001(\t\"A\n\021AshaUnR"
      "egResponse\022,\n\014BaseResponse\030\001 \002(\0132\026.micro"
      "msg.BaseResponse\"]\n\024BlackBerryRegRequest"
      "\022*\n\013BaseRequest\030\001 \002(\0132\025.micromsg.BaseReq"
      "uest\022\013\n\003Pin\030\002 \001(\t\022\014\n\004Port\030\003 \002(\r\"E\n\025Black"
      "BerryRegResponse\022,\n\014BaseResponse\030\001 \002(\0132\026"
      ".micromsg.BaseResponse\"Q\n\026BlackBerryUnRe"
      "gRequest\022*\n\013BaseRequest\030\001 \002(\0132\025.micromsg"
      ".BaseRequest\022\013\n\003Pin\030\002 \001(\t\"G\n\027BlackBerryU"
      "nRegResponse\022,\n\014BaseResponse\030\001 \002(\0132\026.mic"
      "romsg.BaseResponse\"Q\n\024AndroidGCMRegReque"
      "st\022*\n\013BaseRequest\030\001 \002(\0132\025.micromsg.BaseR"
      "equest\022\r\n\005Token\030\002 \001(\t\"E\n\025AndroidGCMRegRe"
      "sponse\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg."
      "BaseResponse\"S\n\026AndroidGCMUnRegRequest\022*"
      "\n\013BaseRequest\030\001 \002(\0132\025.micromsg.BaseReque"
      "st\022\r\n\005Token\030\002 \001(\t\"G\n\027AndroidGCMUnRegResp"
      "onse\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg.Ba"
      "seResponse\"%\n\007RSACert\022\014\n\004KeyN\030\001 \001(\t\022\014\n\004K"
      "eyE\030\002 \001(\t\"\215\001\n\016GetCertRequest\022*\n\013BaseRequ"
      "est\030\001 \002(\0132\025.micromsg.BaseRequest\0223\n\016Rand"
      "omEncryKey\030\002 \002(\0132\033.micromsg.SKBuiltinBuf"
      "fer_t\022\032\n\022CurrentCertVersion\030\003 \002(\r\"z\n\017Get"
      "CertResponse\022,\n\014BaseResponse\030\001 \002(\0132\026.mic"
      "romsg.BaseResponse\022$\n\tCertValue\030\002 \002(\0132\021."
      "micromsg.RSACert\022\023\n\013CertVersion\030\003 \002(\r\"H\n"
      "\021NewAuthRsaReqData\0223\n\016RandomEncryKey\030\001 \002"
      "(\0132\033.micromsg.SKBuiltinBuffer_t\"\255\010\n\016NewA"
      "uthRequest\022*\n\013BaseRequest\030\001 \002(\0132\025.microm"
      "sg.BaseRequest\022-\n\010UserName\030\002 \002(\0132\033.micro"
      "msg.SKBuiltinString_t\022(\n\003Pwd\030\003 \002(\0132\033.mic"
      "romsg.SKBuiltinString_t\022+\n\006ImgSid\030\004 \002(\0132"
      "\033.micromsg.SKBuiltinString_t\022,\n\007ImgCode\030"
      "\005 \002(\0132\033.micromsg.SKBuiltinString_t\022\014\n\004Pw"
      "d2\030\006 \001(\t\022\024\n\014BuiltinIPSeq\030\007 \001(\r\022\016\n\006extPwd"
      "\030\010 \001(\t\022\017\n\007extPwd2\030\t \001(\t\022\020\n\010TimeZone\030\n \001("
      "\t\022\020\n\010Language\030\013 \001(\t\022\014\n\004IMEI\030\014 \001(\t\022\017\n\007Cha"
      "nnel\030\r \001(\005\022\021\n\tIPhoneVer\030\016 \001(\t\0222\n\rImgEncr"
      "yptKey\030\017 \001(\0132\033.micromsg.SKBuiltinString_"
      "t\022)\n\004KSid\030\020 \001(\0132\033.micromsg.SKBuiltinBuff"
      "er_t\022\021\n\tTimeStamp\030\021 \001(\r\022\023\n\013DeviceBrand\030\022"
      " \001(\t\022\023\n\013DeviceModel\030\023 \001(\t\022\016\n\006OSType\030\024 \001("
      "\t\022\022\n\nDeviceType\030\025 \001(\t\022\020\n\010SoftType\030\026 \001(\t\022"
      "\022\n\nAuthTicket\030\027 \001(\t\022\023\n\013RealCountry\030\030 \001(\t"
      "\022\021\n\tSignature\030\031 \001(\t\0223\n\016RandomEncryKey\030\032 "
      "\002(\0132\033.micromsg.SKBuiltinBuffer_t\022\026\n\016Auto"
      "AuthTicket\030\033 \001(\t\022\022\n\nDeviceName\030\034 \001(\t\0223\n\016"
      "WTLoginReqBuff\030\035 \001(\0132\033.micromsg.SKBuilti"
      "nBuffer_t\022\021\n\tInputType\030\036 \001(\r\022\023\n\013ClientSe"
      "qID\030\037 \001(\t\022\020\n\010BundleID\030  \001(\t\022\020\n\010AdSource\030"
      "! \001(\t\0224\n\017CliDBEncryptKey\030\" \001(\0132\033.microms"
      "g.SKBuiltinBuffer_t\0225\n\020CliDBEncryptInfo\030"
      "# \001(\0132\033.micromsg.SKBuiltinBuffer_t\022\027\n\017Ve"
      "rifySignature\030$ \001(\t\022\025\n\rVerifyContent\030% \001"
      "(\t\022\023\n\013SessionMode\030& \001(\r\"\326\016\n\017NewAuthRespo"
      "nse\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg.Bas"
      "eResponse\022\013\n\003Uin\030\002 \002(\r\022-\n\010UserName\030\003 \002(\013"
      "2\033.micromsg.SKBuiltinString_t\022-\n\010NickNam"
      "e\030\004 \002(\0132\033.micromsg.SKBuiltinString_t\022\017\n\007"
      "BindUin\030\005 \002(\r\022.\n\tBindEmail\030\006 \002(\0132\033.micro"
      "msg.SKBuiltinString_t\022/\n\nBindMobile\030\007 \002("
      "\0132\033.micromsg.SKBuiltinString_t\022\016\n\006Status"
      "\030\010 \002(\r\022\022\n\nSessionKey\030\t \001(\014\022+\n\006ImgSid\030\n \002"
      "(\0132\033.micromsg.SKBuiltinString_t\022+\n\006ImgBu"
      "f\030\013 \002(\0132\033.micromsg.SKBuiltinBuffer_t\0225\n\020"
      "OfficialUserName\030\014 \002(\0132\033.micromsg.SKBuil"
      "tinString_t\0225\n\020OfficialNickName\030\r \002(\0132\033."
      "micromsg.SKBuiltinString_t\0228\n\023QQMicroBlo"
      "gUserName\030\016 \001(\0132\033.micromsg.SKBuiltinStri"
      "ng_t\022\031\n\021QQMicroBlogStatus\030\017 \001(\r\022\022\n\nNewVe"
      "rsion\030\020 \001(\r\022\016\n\006Ticket\030\021 \001(\t\022\026\n\016PushMailS"
      "tatus\030\022 \001(\r\022\027\n\017SendCardBitFlag\030\023 \001(\r\022\035\n\025"
      "PushMailSettingTicket\030\024 \001(\t\022.\n\rBuiltinIP"
      "List\030\025 \001(\0132\027.micromsg.BuiltinIPList\022\r\n\005F"
      "SURL\030\026 \001(\t\0220\n\016NetworkControl\030\027 \001(\0132\030.mic"
      "romsg.NetworkControl\022\022\n\nPluginFlag\030\030 \001(\r"
      "\022\r\n\005Alias\030\031 \001(\t\022\017\n\007RegType\030\032 \001(\r\022\017\n\007Auth"
      "Key\030\033 \001(\t\022\013\n\003Sid\030\034 \001(\t\022.\n\rPluginKeyList\030"
      "\035 \001(\0132\027.micromsg.PluginKeyList\0222\n\rImgEnc"
      "ryptKey\030\036 \001(\0132\033.micromsg.SKBuiltinString"
      "_t\022*\n\005A2Key\030\037 \001(\0132\033.micromsg.SKBuiltinBu"
      "ffer_t\022)\n\004KSid\030  \001(\0132\033.micromsg.SKBuilti"
      "nBuffer_t\022\023\n\013ProfileFlag\030! \001(\r\022\020\n\010Passwo"
      "rd\030\" \001(\t\022\021\n\tTimeStamp\030# \001(\r\022\021\n\tIsAutoReg"
      "\030$ \001(\r\022\024\n\014KickResponse\030% \001(\t\022\024\n\014ApplyBet"
      "aUrl\030& \001(\t\022\025\n\rDeviceInfoXml\030\' \001(\t\022\025\n\rSof"
      "tConfigXml\030( \001(\t\022\'\n\013NewHostList\030) \001(\0132\022."
      "micromsg.HostList\022\022\n\nAuthTicket\030* \001(\t\022\022\n"
      "\nSafeDevice\030+ \001(\r\022\025\n\rObsoleteItem1\030, \001(\r"
      "\022\027\n\017NeedSetEmailPwd\030- \001(\r\022\017\n\007HintMsg\030. \001"
      "(\t\022\026\n\016AutoAuthTicket\030/ \001(\t\022%\n\007DnsInfo\0300 "
      "\001(\0132\024.micromsg.CDNDnsInfo\022\024\n\014NextAuthTyp"
      "e\0301 \001(\r\0223\n\016WTLoginRspBuff\0302 \001(\0132\033.microm"
      "sg.SKBuiltinBuffer_t\022)\n\tShowStyle\0303 \001(\0132"
      "\026.micromsg.ShowStyleKey\0224\n\017CliDBEncryptK"
      "ey\0304 \001(\0132\033.micromsg.SKBuiltinBuffer_t\0225\n"
      "\020CliDBEncryptInfo\0305 \001(\0132\033.micromsg.SKBui"
      "ltinBuffer_t\022\014\n\004Flag\0306 \001(\r\022(\n\nSnsDnsInfo"
      "\0307 \001(\0132\024.micromsg.CDNDnsInfo\022(\n\nAppDnsIn"
      "fo\0308 \001(\0132\024.micromsg.CDNDnsInfo\022\027\n\017Verify"
      "Signature\0309 \001(\t\022/\n\nVerifyBuff\030: \001(\0132\033.mi"
      "cromsg.SKBuiltinBuffer_t\"\200\001\n\030BindGoogleC"
      "ontactRequest\022*\n\013BaseRequest\030\001 \002(\0132\025.mic"
      "romsg.BaseRequest\022\016\n\006Opcode\030\002 \002(\r\022\031\n\021Goo"
      "gleContactName\030\003 \001(\t\022\r\n\005Force\030\004 \002(\r\"I\n\031B"
      "indGoogleContactResponse\022,\n\014BaseResponse"
      "\030\001 \002(\0132\026.micromsg.BaseResponse\"\223\002\n\032BindL"
      "inkedinContactRequest\022*\n\013BaseRequest\030\001 \002"
      "(\0132\025.micromsg.BaseRequest\022\016\n\006Opcode\030\002 \002("
      "\r\022\017\n\007Visible\030\003 \002(\r\022\030\n\020LinkedinMemberID\030\004"
      " \001(\t\022\024\n\014LinkedinName\030\005 \001(\t\022\031\n\021LinkedinPu"
      "blicUrl\030\006 \001(\t\022\021\n\tTimestamp\030\007 \001(\t\022\016\n\006Noun"
      "ce\030\010 \001(\t\022\031\n\021LinkedinSignature\030\t \001(\t\022\037\n\027L"
      "inkedinReturnSignature\030\n \001(\t\"K\n\033BindLink"
      "edinContactResponse\022,\n\014BaseResponse\030\001 \002("
      "\0132\026.micromsg.BaseResponse\"Z\n\034UnBindLinke"
      "dinContactRequest\022*\n\013BaseRequest\030\001 \002(\0132\025"
      ".micromsg.BaseRequest\022\016\n\006Opcode\030\002 \002(\r\"M\n"
      "\035UnBindLinkedinContactResponse\022,\n\014BaseRe"
      "sponse\030\001 \002(\0132\026.micromsg.BaseResponse\"\370\001\n"
      "\021LoginQRCodeNotify\022\014\n\004UUID\030\001 \001(\t\022\016\n\006Stat"
      "us\030\002 \002(\r\022\020\n\010UserName\030\003 \001(\t\022\013\n\003Pwd\030\004 \001(\t\022"
      "\022\n\nHeadImgURL\030\005 \001(\t\022\037\n\027PushLoginURLExpir"
      "edTime\030\006 \001(\r\022\020\n\010NickName\030\007 \001(\t\022\023\n\013Expire"
      "dTime\030\010 \001(\r\022\023\n\013PairWaitTip\030\t \001(\t\022\033\n\023Auth"
      "orClientVersion\030\n \001(\r\022\030\n\020AuthorDeviceTyp"
      "e\030\013 \001(\t\"W\n\024LoginQRCodeNotifyPkg\022/\n\nNotif"
      "yData\030\001 \002(\0132\033.micromsg.SKBuiltinBuffer_t"
      "\022\016\n\006OPCode\030\002 \002(\r\"\307\001\n\025GetLoginQRCodeReque"
      "st\022*\n\013BaseRequest\030\001 \002(\0132\025.micromsg.BaseR"
      "equest\0223\n\016RandomEncryKey\030\002 \002(\0132\033.microms"
      "g.SKBuiltinBuffer_t\022\016\n\006OPCode\030\003 \001(\r\022\022\n\nD"
      "eviceName\030\004 \001(\t\022\020\n\010UserName\030\005 \001(\t\022\027\n\017Ext"
      "DevLoginType\030\006 \001(\r\"\271\002\n\026GetLoginQRCodeRes"
      "ponse\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg.B"
      "aseResponse\022+\n\006QRCode\030\002 \002(\0132\033.micromsg.S"
      "KBuiltinBuffer_t\022\014\n\004UUID\030\003 \001(\t\022\021\n\tCheckT"
      "ime\030\004 \002(\r\022.\n\tNotifyKey\030\005 \002(\0132\033.micromsg."
      "SKBuiltinBuffer_t\022\023\n\013ExpiredTime\030\006 \001(\r\022\036"
      "\n\026BlueToothBroadCastUUID\030\007 \001(\t\022>\n\031BlueTo"
      "othBroadCastContent\030\010 \001(\0132\033.micromsg.SKB"
      "uiltinBuffer_t\"\253\001\n\027CheckLoginQRCodeReque"
      "st\022*\n\013BaseRequest\030\001 \002(\0132\025.micromsg.BaseR"
      "equest\0223\n\016RandomEncryKey\030\002 \002(\0132\033.microms"
      "g.SKBuiltinBuffer_t\022\014\n\004UUID\030\003 \001(\t\022\021\n\tTim"
      "eStamp\030\004 \002(\r\022\016\n\006OPCode\030\005 \001(\r\"{\n\030CheckLog"
      "inQRCodeResponse\022,\n\014BaseResponse\030\001 \002(\0132\026"
      ".micromsg.BaseResponse\0221\n\tNotifyPkg\030\003 \001("
      "\0132\036.micromsg.LoginQRCodeNotifyPkg\"d\n\022Get"
      "LoginURLRequest\022*\n\013BaseRequest\030\001 \002(\0132\025.m"
      "icromsg.BaseRequest\022\014\n\004UUID\030\002 \001(\t\022\024\n\014Fro"
      "mDeviceID\030\003 \001(\014\"P\n\023GetLoginURLResponse\022,"
      "\n\014BaseResponse\030\001 \002(\0132\026.micromsg.BaseResp"
      "onse\022\013\n\003URL\030\002 \001(\t\"\210\002\n\023PushLoginURLReques"
      "t\022*\n\013BaseRequest\030\001 \002(\0132\025.micromsg.BaseRe"
      "quest\022\020\n\010UserName\030\002 \001(\t\022\026\n\016AutoAuthTicke"
      "t\030\003 \001(\t\022\020\n\010ClientID\030\004 \001(\t\0223\n\016RandomEncry"
      "Key\030\005 \002(\0132\033.micromsg.SKBuiltinBuffer_t\022\016"
      "\n\006OPCode\030\006 \002(\r\022\022\n\nDeviceName\030\007 \001(\t\0220\n\013Au"
      "toAuthKey\030\010 \001(\0132\033.micromsg.SKBuiltinBuff"
      "er_t\"\212\002\n\024PushLoginURLResponse\022,\n\014BaseRes"
      "ponse\030\001 \002(\0132\026.micromsg.BaseResponse\022\014\n\004U"
      "UID\030\002 \001(\t\022.\n\tNotifyKey\030\003 \002(\0132\033.micromsg."
      "SKBuiltinBuffer_t\022\021\n\tCheckTime\030\004 \002(\r\022\023\n\013"
      "ExpiredTime\030\005 \002(\r\022\036\n\026BlueToothBroadCastU"
      "UID\030\006 \001(\t\022>\n\031BlueToothBroadCastContent\030\007"
      " \001(\0132\033.micromsg.SKBuiltinBuffer_t\"d\n\031Blu"
      "eToothBindLoginRequest\022*\n\013BaseRequest\030\001 "
      "\002(\0132\025.micromsg.BaseRequest\022\013\n\003URL\030\002 \001(\t\022"
      "\016\n\006OPCode\030\003 \002(\r\"\241\001\n\032BlueToothBindLoginRe"
      "sponse\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg."
      "BaseResponse\022\022\n\nDeviceName\030\002 \001(\t\022\023\n\013Expi"
      "redTime\030\003 \002(\r\022\014\n\004UUID\030\004 \001(\t\022\036\n\026BlueTooth"
      "BroadCastUUID\030\005 \001(\t\"\210\002\n\031BlueToothAutoLog"
      "inRequest\022*\n\013BaseRequest\030\001 \002(\0132\025.microms"
      "g.BaseRequest\022\020\n\010UserName\030\002 \001(\t\022\014\n\004UUID\030"
      "\003 \001(\t\022\026\n\016AutoAuthTicket\030\004 \001(\t\0222\n\rLoginIn"
      "foData\030\005 \002(\0132\033.micromsg.SKBuiltinBuffer_"
      "t\0223\n\016RandomEncryKey\030\006 \002(\0132\033.micromsg.SKB"
      "uiltinBuffer_t\022\036\n\026BlueToothBroadCastUUID"
      "\030\007 \001(\t\"n\n\032BlueToothAutoLoginResponse\022,\n\014"
      "BaseResponse\030\001 \002(\0132\026.micromsg.BaseRespon"
      "se\022\020\n\010UserName\030\002 \001(\t\022\020\n\010Password\030\003 \001(\t\"q"
      "\n\031BlueToothAutoLoginInfoPkg\022)\n\004Salt\030\001 \002("
      "\0132\033.micromsg.SKBuiltinBuffer_t\022)\n\004Data\030\002"
      " \002(\0132\033.micromsg.SKBuiltinBuffer_t\"b\n\026Blu"
      "eToothAutoLoginInfo\022\013\n\003Uin\030\001 \002(\r\022\022\n\nDevi"
      "ceType\030\002 \001(\t\022\025\n\rClientVersion\030\003 \002(\r\022\020\n\010D"
      "eviceID\030\004 \001(\014\"\232\001\n\031BindBlackberryPPIDRequ"
      "est\022*\n\013BaseRequest\030\001 \002(\0132\025.micromsg.Base"
      "Request\022\016\n\006Opcode\030\002 \002(\r\022\016\n\006BBPPID\030\003 \001(\t\022"
      "\r\n\005BBPIN\030\004 \001(\t\022\023\n\013BBMNickName\030\005 \001(\t\022\r\n\005F"
      "orce\030\006 \002(\r\"J\n\032BindBlackberryPPIDResponse"
      "\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg.BaseRe"
      "sponse\"\262\001\n\024LockWebDeviceRequest\022*\n\013BaseR"
      "equest\030\001 \002(\0132\025.micromsg.BaseRequest\022\016\n\006O"
      "PCode\030\002 \002(\r\022\036\n\026BlueToothBroadCastUUID\030\003 "
      "\001(\t\022>\n\031BlueToothBroadCastContent\030\004 \002(\0132\033"
      ".micromsg.SKBuiltinBuffer_t\"E\n\025LockWebDe"
      "viceResponse\022,\n\014BaseResponse\030\001 \002(\0132\026.mic"
      "romsg.BaseResponse\"\200\001\n\031GetIosExtensionKe"
      "yRequest\022*\n\013BaseRequest\030\001 \002(\0132\025.micromsg"
      ".BaseRequest\022\034\n\024ExtensionSessionType\030\002 \001"
      "(\r\022\031\n\021ExtensionDeviceId\030\003 \001(\014\"\201\001\n\nExtSes"
      "sion\022\023\n\013SessionType\030\001 \002(\r\022/\n\nSessionKey\030"
      "\002 \002(\0132\033.micromsg.SKBuiltinBuffer_t\022-\n\010Se"
      "rverId\030\003 \002(\0132\033.micromsg.SKBuiltinBuffer_"
      "t\"\244\001\n\032GetIosExtensionKeyResponse\022,\n\014Base"
      "Response\030\001 \002(\0132\026.micromsg.BaseResponse\022("
      "\n\003Key\030\002 \002(\0132\033.micromsg.SKBuiltinBuffer_t"
      "\022.\n\020ExtensionSession\030\003 \001(\0132\024.micromsg.Ex"
      "tSession\"\245\001\n\021PatternLockBuffer\022\013\n\003uin\030\001 "
      "\001(\r\022\017\n\007version\030\002 \001(\r\0223\n\016svrpatternhash\030\003"
      " \001(\0132\033.micromsg.SKBuiltinBuffer_t\022\022\n\nloc"
      "kstatus\030\004 \001(\r\022)\n\004sign\030\005 \001(\0132\033.micromsg.S"
      "KBuiltinBuffer_t\"\271\001\n\035RegisterNewPatternL"
      "ockRequest\022*\n\013BaseRequest\030\001 \002(\0132\025.microm"
      "sg.BaseRequest\022-\n\010paytoken\030\002 \001(\0132\033.micro"
      "msg.SKBuiltinBuffer_t\0220\n\013patternhash\030\003 \001"
      "(\0132\033.micromsg.SKBuiltinBuffer_t\022\013\n\003cmd\030\004"
      " \001(\r\"\203\001\n\036RegisterNewPatternLockResponse\022"
      ",\n\014BaseResponse\030\001 \002(\0132\026.micromsg.BaseRes"
      "ponse\0223\n\016patternlockbuf\030\002 \001(\0132\033.micromsg"
      ".PatternLockBuffer\"\271\001\n\024OpPatternLockRequ"
      "est\022*\n\013BaseRequest\030\001 \002(\0132\025.micromsg.Base"
      "Request\022\013\n\003cmd\030\002 \001(\r\0223\n\016nowpatternhash\030\003"
      " \001(\0132\033.micromsg.SKBuiltinBuffer_t\0223\n\016new"
      "patternhash\030\004 \001(\0132\033.micromsg.SKBuiltinBu"
      "ffer_t\"z\n\025OpPatternLockResponse\022,\n\014BaseR"
      "esponse\030\001 \002(\0132\026.micromsg.BaseResponse\0223\n"
      "\016patternlockbuf\030\002 \001(\0132\033.micromsg.Pattern"
      "LockBuffer\"v\n\021WTLoginImgReqInfo\022\016\n\006ImgSi"
      "d\030\001 \001(\t\022\017\n\007ImgCode\030\002 \001(\t\022\025\n\rImgEncryptKe"
      "y\030\003 \001(\t\022)\n\004KSid\030\004 \002(\0132\033.micromsg.SKBuilt"
      "inBuffer_t\"\223\001\n\022WTLoginImgRespInfo\022\025\n\rImg"
      "EncryptKey\030\001 \001(\t\022)\n\004KSid\030\002 \002(\0132\033.microms"
      "g.SKBuiltinBuffer_t\022\016\n\006ImgSid\030\003 \001(\t\022+\n\006I"
      "mgBuf\030\004 \002(\0132\033.micromsg.SKBuiltinBuffer_t"
      "\"E\n\023WxVerifyCodeReqInfo\022\027\n\017VerifySignatu"
      "re\030\001 \001(\t\022\025\n\rVerifyContent\030\002 \001(\t\"`\n\024WxVer"
      "ifyCodeRespInfo\022\027\n\017VerifySignature\030\001 \001(\t"
      "\022/\n\nVerifyBuff\030\002 \002(\0132\033.micromsg.SKBuilti"
      "nBuffer_t\"\320\002\n\017BaseAuthReqInfo\0223\n\016WTLogin"
      "ReqBuff\030\001 \001(\0132\033.micromsg.SKBuiltinBuffer"
      "_t\0226\n\021WTLoginImgReqInfo\030\002 \001(\0132\033.micromsg"
      ".WTLoginImgReqInfo\022:\n\023WxVerifyCodeReqInf"
      "o\030\003 \001(\0132\035.micromsg.WxVerifyCodeReqInfo\0224"
      "\n\017CliDBEncryptKey\030\004 \001(\0132\033.micromsg.SKBui"
      "ltinBuffer_t\0225\n\020CliDBEncryptInfo\030\005 \001(\0132\033"
      ".micromsg.SKBuiltinBuffer_t\022\023\n\013AuthReqFl"
      "ag\030\006 \001(\r\022\022\n\nAuthTicket\030\007 \001(\t\"\242\001\n\024ManualA"
      "uthRsaReqData\0223\n\016RandomEncryKey\030\001 \002(\0132\033."
      "micromsg.SKBuiltinBuffer_t\022(\n\rCliPubECDH"
      "Key\030\002 \002(\0132\021.micromsg.ECDHKey\022\020\n\010UserName"
      "\030\003 \001(\t\022\013\n\003Pwd\030\004 \001(\t\022\014\n\004Pwd2\030\005 \001(\t\"\216\004\n\024Ma"
      "nualAuthAesReqData\022*\n\013BaseRequest\030\001 \002(\0132"
      "\025.micromsg.BaseRequest\022.\n\013BaseReqInfo\030\002 "
      "\001(\0132\031.micromsg.BaseAuthReqInfo\022\014\n\004IMEI\030\003"
      " \001(\t\022\020\n\010SoftType\030\004 \001(\t\022\024\n\014BuiltinIPSeq\030\005"
      " \002(\r\022\023\n\013ClientSeqID\030\006 \001(\t\022\021\n\tSignature\030\007"
      " \001(\t\022\022\n\nDeviceName\030\010 \001(\t\022\022\n\nDeviceType\030\t"
      " \001(\t\022\020\n\010Language\030\n \001(\t\022\020\n\010TimeZone\030\013 \001(\t"
      "\022\017\n\007Channel\030\r \001(\005\022\021\n\tTimeStamp\030\016 \001(\r\022\023\n\013"
      "DeviceBrand\030\017 \001(\t\022\023\n\013DeviceModel\030\020 \001(\t\022\016"
      "\n\006OSType\030\021 \001(\t\022\023\n\013RealCountry\030\022 \001(\t\022\020\n\010B"
      "undleID\030\023 \001(\t\022\020\n\010AdSource\030\024 \001(\t\022\021\n\tIPhon"
      "eVer\030\025 \001(\t\022\021\n\tInputType\030\026 \002(\r\0223\n\016Clientc"
      "heckdat\030\027 \001(\0132\033.micromsg.SKBuiltinBuffer"
      "_t\"{\n\021ManualAuthRequest\0222\n\nRsaReqData\030\001 "
      "\002(\0132\036.micromsg.ManualAuthRsaReqData\0222\n\nA"
      "esReqData\030\002 \002(\0132\036.micromsg.ManualAuthAes"
      "ReqData\"r\n\022AutoAuthRsaReqData\0222\n\rAesEncr"
      "yptKey\030\002 \002(\0132\033.micromsg.SKBuiltinBuffer_"
      "t\022(\n\rCliPubECDHKey\030\003 \001(\0132\021.micromsg.ECDH"
      "Key\"h\n\013AutoAuthKey\022/\n\nEncryptKey\030\001 \002(\0132\033"
      ".micromsg.SKBuiltinBuffer_t\022(\n\003Key\030\002 \002(\013"
      "2\033.micromsg.SKBuiltinBuffer_t\"\314\002\n\022AutoAu"
      "thAesReqData\022*\n\013BaseRequest\030\001 \002(\0132\025.micr"
      "omsg.BaseRequest\022.\n\013BaseReqInfo\030\002 \001(\0132\031."
      "micromsg.BaseAuthReqInfo\0220\n\013AutoAuthKey\030"
      "\003 \002(\0132\033.micromsg.SKBuiltinBuffer_t\022\014\n\004IM"
      "EI\030\004 \001(\t\022\020\n\010SoftType\030\005 \001(\t\022\024\n\014BuiltinIPS"
      "eq\030\006 \002(\r\022\023\n\013ClientSeqID\030\007 \001(\t\022\021\n\tSignatu"
      "re\030\010 \001(\t\022\022\n\nDeviceName\030\t \001(\t\022\022\n\nDeviceTy"
      "pe\030\n \001(\t\022\020\n\010Language\030\013 \001(\t\022\020\n\010TimeZone\030\014"
      " \001(\t\"u\n\017AutoAuthRequest\0220\n\nRsaReqData\030\001 "
      "\002(\0132\034.micromsg.AutoAuthRsaReqData\0220\n\nAes"
      "ReqData\030\002 \002(\0132\034.micromsg.AutoAuthAesReqD"
      "ata\"\234\001\n\017NetworkSectResp\022\'\n\013NewHostList\030\001"
      " \001(\0132\022.micromsg.HostList\0220\n\016NetworkContr"
      "ol\030\002 \001(\0132\030.micromsg.NetworkControl\022.\n\rBu"
      "iltinIPList\030\003 \001(\0132\027.micromsg.BuiltinIPLi"
      "st\"\277\005\n\014AuthSectResp\022\013\n\003Uin\030\001 \002(\r\022(\n\rSvrP"
      "ubECDHKey\030\002 \002(\0132\021.micromsg.ECDHKey\022/\n\nSe"
      "ssionKey\030\003 \002(\0132\033.micromsg.SKBuiltinBuffe"
      "r_t\0220\n\013AutoAuthKey\030\004 \002(\0132\033.micromsg.SKBu"
      "iltinBuffer_t\022\032\n\022WTLoginRspBuffFlag\030\005 \002("
      "\r\0223\n\016WTLoginRspBuff\030\006 \001(\0132\033.micromsg.SKB"
      "uiltinBuffer_t\0228\n\022WTLoginImgRespInfo\030\007 \001"
      "(\0132\034.micromsg.WTLoginImgRespInfo\022<\n\024WxVe"
      "rifyCodeRespInfo\030\010 \001(\0132\036.micromsg.WxVeri"
      "fyCodeRespInfo\0224\n\017CliDBEncryptKey\030\t \001(\0132"
      "\033.micromsg.SKBuiltinBuffer_t\0225\n\020CliDBEnc"
      "ryptInfo\030\n \001(\0132\033.micromsg.SKBuiltinBuffe"
      "r_t\022\017\n\007AuthKey\030\013 \001(\t\022*\n\005A2Key\030\014 \001(\0132\033.mi"
      "cromsg.SKBuiltinBuffer_t\022\024\n\014ApplyBetaUrl"
      "\030\016 \001(\t\022)\n\tShowStyle\030\017 \001(\0132\026.micromsg.Sho"
      "wStyleKey\022\022\n\nAuthTicket\030\020 \001(\t\022\022\n\nNewVers"
      "ion\030\021 \001(\r\022\022\n\nUpdateFlag\030\022 \001(\r\022\026\n\016AuthRes"
      "ultFlag\030\023 \001(\r\022\r\n\005FSURL\030\024 \001(\t\"\264\002\n\014AcctSec"
      "tResp\022\020\n\010UserName\030\001 \001(\t\022\020\n\010NickName\030\002 \001("
      "\t\022\017\n\007BindUin\030\003 \002(\r\022\021\n\tBindEmail\030\004 \001(\t\022\022\n"
      "\nBindMobile\030\005 \001(\t\022\r\n\005Alias\030\006 \001(\t\022\016\n\006Stat"
      "us\030\010 \002(\r\022\022\n\nPluginFlag\030\t \001(\r\022\017\n\007RegType\030"
      "\n \001(\r\022\025\n\rDeviceInfoXml\030\013 \001(\t\022\022\n\nSafeDevi"
      "ce\030\014 \001(\r\022\030\n\020OfficialUserName\030\r \001(\t\022\030\n\020Of"
      "ficialNickName\030\016 \001(\t\022\026\n\016PushMailStatus\030\017"
      " \001(\r\022\r\n\005FSURL\030\020 \001(\t\"\354\001\n\021UnifyAuthRespons"
      "e\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg.BaseR"
      "esponse\022\031\n\021UnifyAuthSectFlag\030\002 \001(\r\022,\n\014Au"
      "thSectResp\030\003 \001(\0132\026.micromsg.AuthSectResp"
      "\022,\n\014AcctSectResp\030\004 \001(\0132\026.micromsg.AcctSe"
      "ctResp\0222\n\017NetworkSectResp\030\005 \001(\0132\031.microm"
      "sg.NetworkSectResp"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 23178);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mmlogin.proto", &protobuf_RegisterTypes);
  ::micromsg::protobuf_mmbuiltintype_2eproto::AddDescriptors();
  ::micromsg::protobuf_mmbase_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_mmlogin_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ECDHKey::kNidFieldNumber;
const int ECDHKey::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ECDHKey::ECDHKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ECDHKey)
}
ECDHKey::ECDHKey(const ECDHKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_key()) {
    key_ = new ::micromsg::SKBuiltinBuffer_t(*from.key_);
  } else {
    key_ = NULL;
  }
  nid_ = from.nid_;
  // @@protoc_insertion_point(copy_constructor:micromsg.ECDHKey)
}

void ECDHKey::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&key_, 0, reinterpret_cast<char*>(&nid_) -
    reinterpret_cast<char*>(&key_) + sizeof(nid_));
}

ECDHKey::~ECDHKey() {
  // @@protoc_insertion_point(destructor:micromsg.ECDHKey)
  SharedDtor();
}

void ECDHKey::SharedDtor() {
  if (this != internal_default_instance()) {
    delete key_;
  }
}

void ECDHKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ECDHKey::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ECDHKey& ECDHKey::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

ECDHKey* ECDHKey::New(::google::protobuf::Arena* arena) const {
  ECDHKey* n = new ECDHKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ECDHKey::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ECDHKey)
  if (has_key()) {
    GOOGLE_DCHECK(key_ != NULL);
    key_->::micromsg::SKBuiltinBuffer_t::Clear();
  }
  nid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ECDHKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ECDHKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Nid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_nid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t Key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ECDHKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ECDHKey)
  return false;
#undef DO_
}

void ECDHKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ECDHKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Nid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nid(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t Key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->key_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ECDHKey)
}

::google::protobuf::uint8* ECDHKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ECDHKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Nid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nid(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t Key = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->key_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ECDHKey)
  return target;
}

size_t ECDHKey::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.ECDHKey)
  size_t total_size = 0;

  if (has_key()) {
    // required .micromsg.SKBuiltinBuffer_t Key = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  if (has_nid()) {
    // required int32 Nid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nid());
  }

  return total_size;
}
size_t ECDHKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ECDHKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.SKBuiltinBuffer_t Key = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);

    // required int32 Nid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ECDHKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ECDHKey)
  GOOGLE_DCHECK_NE(&from, this);
  const ECDHKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ECDHKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ECDHKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ECDHKey)
    MergeFrom(*source);
  }
}

void ECDHKey::MergeFrom(const ECDHKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ECDHKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_key()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.key());
    }
    if (cached_has_bits & 0x00000002u) {
      nid_ = from.nid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ECDHKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ECDHKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ECDHKey::CopyFrom(const ECDHKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ECDHKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ECDHKey::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_key()) {
    if (!this->key_->IsInitialized()) return false;
  }
  return true;
}

void ECDHKey::Swap(ECDHKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ECDHKey::InternalSwap(ECDHKey* other) {
  std::swap(key_, other->key_);
  std::swap(nid_, other->nid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ECDHKey::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ECDHKey

// required int32 Nid = 1;
bool ECDHKey::has_nid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ECDHKey::set_has_nid() {
  _has_bits_[0] |= 0x00000002u;
}
void ECDHKey::clear_has_nid() {
  _has_bits_[0] &= ~0x00000002u;
}
void ECDHKey::clear_nid() {
  nid_ = 0;
  clear_has_nid();
}
::google::protobuf::int32 ECDHKey::nid() const {
  // @@protoc_insertion_point(field_get:micromsg.ECDHKey.Nid)
  return nid_;
}
void ECDHKey::set_nid(::google::protobuf::int32 value) {
  set_has_nid();
  nid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ECDHKey.Nid)
}

// required .micromsg.SKBuiltinBuffer_t Key = 2;
bool ECDHKey::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ECDHKey::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void ECDHKey::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void ECDHKey::clear_key() {
  if (key_ != NULL) key_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_key();
}
const ::micromsg::SKBuiltinBuffer_t& ECDHKey::key() const {
  // @@protoc_insertion_point(field_get:micromsg.ECDHKey.Key)
  return key_ != NULL ? *key_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* ECDHKey::mutable_key() {
  set_has_key();
  if (key_ == NULL) {
    key_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ECDHKey.Key)
  return key_;
}
::micromsg::SKBuiltinBuffer_t* ECDHKey::release_key() {
  // @@protoc_insertion_point(field_release:micromsg.ECDHKey.Key)
  clear_has_key();
  ::micromsg::SKBuiltinBuffer_t* temp = key_;
  key_ = NULL;
  return temp;
}
void ECDHKey::set_allocated_key(::micromsg::SKBuiltinBuffer_t* key) {
  delete key_;
  key_ = key;
  if (key) {
    set_has_key();
  } else {
    clear_has_key();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ECDHKey.Key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewRegRequest::kBaseRequestFieldNumber;
const int NewRegRequest::kUserNameFieldNumber;
const int NewRegRequest::kPwdFieldNumber;
const int NewRegRequest::kNickNameFieldNumber;
const int NewRegRequest::kBindUinFieldNumber;
const int NewRegRequest::kBindEmailFieldNumber;
const int NewRegRequest::kBindMobileFieldNumber;
const int NewRegRequest::kTicketFieldNumber;
const int NewRegRequest::kBuiltinIPSeqFieldNumber;
const int NewRegRequest::kDLSrcFieldNumber;
const int NewRegRequest::kRegModeFieldNumber;
const int NewRegRequest::kTimeZoneFieldNumber;
const int NewRegRequest::kLanguageFieldNumber;
const int NewRegRequest::kForceRegFieldNumber;
const int NewRegRequest::kRealCountryFieldNumber;
const int NewRegRequest::kRandomEncryKeyFieldNumber;
const int NewRegRequest::kAliasFieldNumber;
const int NewRegRequest::kVerifySignatureFieldNumber;
const int NewRegRequest::kVerifyContentFieldNumber;
const int NewRegRequest::kHasHeadImgFieldNumber;
const int NewRegRequest::kSuggestRetFieldNumber;
const int NewRegRequest::kClientSeqIDFieldNumber;
const int NewRegRequest::kAdSourceFieldNumber;
const int NewRegRequest::kAndroidIDFieldNumber;
const int NewRegRequest::kMacAddrFieldNumber;
const int NewRegRequest::kAndroidInstallRefFieldNumber;
const int NewRegRequest::kClientFingerprintFieldNumber;
const int NewRegRequest::kCliPubECDHKeyFieldNumber;
const int NewRegRequest::kGoogleAidFieldNumber;
const int NewRegRequest::kBundleIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewRegRequest::NewRegRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.NewRegRequest)
}
NewRegRequest::NewRegRequest(const NewRegRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pwd()) {
    pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nickname()) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  bindemail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bindemail()) {
    bindemail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bindemail_);
  }
  bindmobile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bindmobile()) {
    bindmobile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bindmobile_);
  }
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ticket()) {
    ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
  }
  timezone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_timezone()) {
    timezone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timezone_);
  }
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_language()) {
    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  realcountry_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_realcountry()) {
    realcountry_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.realcountry_);
  }
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_alias()) {
    alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
  }
  verifysignature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_verifysignature()) {
    verifysignature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifysignature_);
  }
  verifycontent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_verifycontent()) {
    verifycontent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifycontent_);
  }
  clientseqid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientseqid()) {
    clientseqid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientseqid_);
  }
  adsource_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_adsource()) {
    adsource_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.adsource_);
  }
  androidid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_androidid()) {
    androidid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.androidid_);
  }
  macaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_macaddr()) {
    macaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.macaddr_);
  }
  androidinstallref_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_androidinstallref()) {
    androidinstallref_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.androidinstallref_);
  }
  clientfingerprint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientfingerprint()) {
    clientfingerprint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientfingerprint_);
  }
  googleaid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_googleaid()) {
    googleaid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.googleaid_);
  }
  bundleid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bundleid()) {
    bundleid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bundleid_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_randomencrykey()) {
    randomencrykey_ = new ::micromsg::SKBuiltinBuffer_t(*from.randomencrykey_);
  } else {
    randomencrykey_ = NULL;
  }
  if (from.has_clipubecdhkey()) {
    clipubecdhkey_ = new ::micromsg::ECDHKey(*from.clipubecdhkey_);
  } else {
    clipubecdhkey_ = NULL;
  }
  ::memcpy(&binduin_, &from.binduin_,
    reinterpret_cast<char*>(&suggestret_) -
    reinterpret_cast<char*>(&binduin_) + sizeof(suggestret_));
  // @@protoc_insertion_point(copy_constructor:micromsg.NewRegRequest)
}

void NewRegRequest::SharedCtor() {
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bindemail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bindmobile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  realcountry_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifysignature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifycontent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientseqid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  adsource_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  androidid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  macaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  androidinstallref_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientfingerprint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  googleaid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bundleid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&suggestret_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(suggestret_));
}

NewRegRequest::~NewRegRequest() {
  // @@protoc_insertion_point(destructor:micromsg.NewRegRequest)
  SharedDtor();
}

void NewRegRequest::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bindemail_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bindmobile_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  realcountry_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alias_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifysignature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifycontent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientseqid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  adsource_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  androidid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  macaddr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  androidinstallref_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientfingerprint_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  googleaid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bundleid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete randomencrykey_;
  }
  if (this != internal_default_instance()) {
    delete clipubecdhkey_;
  }
}

void NewRegRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewRegRequest::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NewRegRequest& NewRegRequest::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

NewRegRequest* NewRegRequest::New(::google::protobuf::Arena* arena) const {
  NewRegRequest* n = new NewRegRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NewRegRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.NewRegRequest)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_username()) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
    if (has_pwd()) {
      GOOGLE_DCHECK(!pwd_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pwd_.UnsafeRawStringPointer())->clear();
    }
    if (has_nickname()) {
      GOOGLE_DCHECK(!nickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*nickname_.UnsafeRawStringPointer())->clear();
    }
    if (has_bindemail()) {
      GOOGLE_DCHECK(!bindemail_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bindemail_.UnsafeRawStringPointer())->clear();
    }
    if (has_bindmobile()) {
      GOOGLE_DCHECK(!bindmobile_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bindmobile_.UnsafeRawStringPointer())->clear();
    }
    if (has_ticket()) {
      GOOGLE_DCHECK(!ticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ticket_.UnsafeRawStringPointer())->clear();
    }
    if (has_timezone()) {
      GOOGLE_DCHECK(!timezone_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*timezone_.UnsafeRawStringPointer())->clear();
    }
    if (has_language()) {
      GOOGLE_DCHECK(!language_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*language_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has_realcountry()) {
      GOOGLE_DCHECK(!realcountry_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*realcountry_.UnsafeRawStringPointer())->clear();
    }
    if (has_alias()) {
      GOOGLE_DCHECK(!alias_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*alias_.UnsafeRawStringPointer())->clear();
    }
    if (has_verifysignature()) {
      GOOGLE_DCHECK(!verifysignature_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*verifysignature_.UnsafeRawStringPointer())->clear();
    }
    if (has_verifycontent()) {
      GOOGLE_DCHECK(!verifycontent_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*verifycontent_.UnsafeRawStringPointer())->clear();
    }
    if (has_clientseqid()) {
      GOOGLE_DCHECK(!clientseqid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*clientseqid_.UnsafeRawStringPointer())->clear();
    }
    if (has_adsource()) {
      GOOGLE_DCHECK(!adsource_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*adsource_.UnsafeRawStringPointer())->clear();
    }
    if (has_androidid()) {
      GOOGLE_DCHECK(!androidid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*androidid_.UnsafeRawStringPointer())->clear();
    }
    if (has_macaddr()) {
      GOOGLE_DCHECK(!macaddr_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*macaddr_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[16 / 32] & 8323072u) {
    if (has_androidinstallref()) {
      GOOGLE_DCHECK(!androidinstallref_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*androidinstallref_.UnsafeRawStringPointer())->clear();
    }
    if (has_clientfingerprint()) {
      GOOGLE_DCHECK(!clientfingerprint_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*clientfingerprint_.UnsafeRawStringPointer())->clear();
    }
    if (has_googleaid()) {
      GOOGLE_DCHECK(!googleaid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*googleaid_.UnsafeRawStringPointer())->clear();
    }
    if (has_bundleid()) {
      GOOGLE_DCHECK(!bundleid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bundleid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_randomencrykey()) {
      GOOGLE_DCHECK(randomencrykey_ != NULL);
      randomencrykey_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_clipubecdhkey()) {
      GOOGLE_DCHECK(clipubecdhkey_ != NULL);
      clipubecdhkey_->::micromsg::ECDHKey::Clear();
    }
  }
  binduin_ = 0u;
  if (_has_bits_[24 / 32] & 1056964608u) {
    ::memset(&builtinipseq_, 0, reinterpret_cast<char*>(&suggestret_) -
      reinterpret_cast<char*>(&builtinipseq_) + sizeof(suggestret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NewRegRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.NewRegRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string UserName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewRegRequest.UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Pwd = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pwd().data(), this->pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewRegRequest.Pwd");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string NickName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewRegRequest.NickName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 BindUin = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_binduin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &binduin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string BindEmail = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bindemail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bindemail().data(), this->bindemail().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewRegRequest.BindEmail");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string BindMobile = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bindmobile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bindmobile().data(), this->bindmobile().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewRegRequest.BindMobile");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Ticket = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ticket().data(), this->ticket().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewRegRequest.Ticket");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 BuiltinIPSeq = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_builtinipseq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &builtinipseq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 DLSrc = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_dlsrc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dlsrc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 RegMode = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_regmode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &regmode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string TimeZone = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timezone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->timezone().data(), this->timezone().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewRegRequest.TimeZone");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Language = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewRegRequest.Language");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ForceReg = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_forcereg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forcereg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string RealCountry = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_realcountry()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->realcountry().data(), this->realcountry().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewRegRequest.RealCountry");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t RandomEncryKey = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_randomencrykey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Alias = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alias()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->alias().data(), this->alias().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewRegRequest.Alias");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string VerifySignature = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verifysignature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->verifysignature().data(), this->verifysignature().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewRegRequest.VerifySignature");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string VerifyContent = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verifycontent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->verifycontent().data(), this->verifycontent().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewRegRequest.VerifyContent");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 HasHeadImg = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          set_has_hasheadimg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hasheadimg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 SuggestRet = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          set_has_suggestret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &suggestret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ClientSeqID = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientseqid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientseqid().data(), this->clientseqid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewRegRequest.ClientSeqID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AdSource = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(258u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adsource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->adsource().data(), this->adsource().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewRegRequest.AdSource");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AndroidID = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(266u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_androidid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->androidid().data(), this->androidid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewRegRequest.AndroidID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string MacAddr = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(274u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_macaddr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->macaddr().data(), this->macaddr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewRegRequest.MacAddr");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AndroidInstallRef = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(282u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_androidinstallref()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->androidinstallref().data(), this->androidinstallref().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewRegRequest.AndroidInstallRef");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ClientFingerprint = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(290u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientfingerprint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientfingerprint().data(), this->clientfingerprint().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewRegRequest.ClientFingerprint");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.ECDHKey CliPubECDHKey = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(298u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clipubecdhkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string GoogleAid = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(306u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_googleaid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->googleaid().data(), this->googleaid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewRegRequest.GoogleAid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string BundleID = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(314u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bundleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bundleid().data(), this->bundleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewRegRequest.BundleID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.NewRegRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.NewRegRequest)
  return false;
#undef DO_
}

void NewRegRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.NewRegRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string UserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegRequest.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // optional string Pwd = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegRequest.Pwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pwd(), output);
  }

  // optional string NickName = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegRequest.NickName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->nickname(), output);
  }

  // optional uint32 BindUin = 5;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->binduin(), output);
  }

  // optional string BindEmail = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bindemail().data(), this->bindemail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegRequest.BindEmail");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->bindemail(), output);
  }

  // optional string BindMobile = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bindmobile().data(), this->bindmobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegRequest.BindMobile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->bindmobile(), output);
  }

  // optional string Ticket = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ticket().data(), this->ticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegRequest.Ticket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->ticket(), output);
  }

  // optional uint32 BuiltinIPSeq = 12;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->builtinipseq(), output);
  }

  // optional uint32 DLSrc = 13;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->dlsrc(), output);
  }

  // optional uint32 RegMode = 14;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->regmode(), output);
  }

  // optional string TimeZone = 15;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timezone().data(), this->timezone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegRequest.TimeZone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->timezone(), output);
  }

  // optional string Language = 16;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegRequest.Language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->language(), output);
  }

  // optional uint32 ForceReg = 17;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->forcereg(), output);
  }

  // optional string RealCountry = 18;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->realcountry().data(), this->realcountry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegRequest.RealCountry");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->realcountry(), output);
  }

  // optional .micromsg.SKBuiltinBuffer_t RandomEncryKey = 19;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->randomencrykey_, output);
  }

  // optional string Alias = 20;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegRequest.Alias");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->alias(), output);
  }

  // optional string VerifySignature = 21;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verifysignature().data(), this->verifysignature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegRequest.VerifySignature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->verifysignature(), output);
  }

  // optional string VerifyContent = 22;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verifycontent().data(), this->verifycontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegRequest.VerifyContent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->verifycontent(), output);
  }

  // optional uint32 HasHeadImg = 23;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->hasheadimg(), output);
  }

  // optional uint32 SuggestRet = 24;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->suggestret(), output);
  }

  // optional string ClientSeqID = 31;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientseqid().data(), this->clientseqid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegRequest.ClientSeqID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      31, this->clientseqid(), output);
  }

  // optional string AdSource = 32;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adsource().data(), this->adsource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegRequest.AdSource");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      32, this->adsource(), output);
  }

  // optional string AndroidID = 33;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->androidid().data(), this->androidid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegRequest.AndroidID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      33, this->androidid(), output);
  }

  // optional string MacAddr = 34;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->macaddr().data(), this->macaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegRequest.MacAddr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      34, this->macaddr(), output);
  }

  // optional string AndroidInstallRef = 35;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->androidinstallref().data(), this->androidinstallref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegRequest.AndroidInstallRef");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      35, this->androidinstallref(), output);
  }

  // optional string ClientFingerprint = 36;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientfingerprint().data(), this->clientfingerprint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegRequest.ClientFingerprint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      36, this->clientfingerprint(), output);
  }

  // optional .micromsg.ECDHKey CliPubECDHKey = 37;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, *this->clipubecdhkey_, output);
  }

  // optional string GoogleAid = 38;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->googleaid().data(), this->googleaid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegRequest.GoogleAid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      38, this->googleaid(), output);
  }

  // optional string BundleID = 39;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bundleid().data(), this->bundleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegRequest.BundleID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      39, this->bundleid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.NewRegRequest)
}

::google::protobuf::uint8* NewRegRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.NewRegRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string UserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegRequest.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // optional string Pwd = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegRequest.Pwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pwd(), target);
  }

  // optional string NickName = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegRequest.NickName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nickname(), target);
  }

  // optional uint32 BindUin = 5;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->binduin(), target);
  }

  // optional string BindEmail = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bindemail().data(), this->bindemail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegRequest.BindEmail");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->bindemail(), target);
  }

  // optional string BindMobile = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bindmobile().data(), this->bindmobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegRequest.BindMobile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->bindmobile(), target);
  }

  // optional string Ticket = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ticket().data(), this->ticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegRequest.Ticket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->ticket(), target);
  }

  // optional uint32 BuiltinIPSeq = 12;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->builtinipseq(), target);
  }

  // optional uint32 DLSrc = 13;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->dlsrc(), target);
  }

  // optional uint32 RegMode = 14;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->regmode(), target);
  }

  // optional string TimeZone = 15;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timezone().data(), this->timezone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegRequest.TimeZone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->timezone(), target);
  }

  // optional string Language = 16;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegRequest.Language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->language(), target);
  }

  // optional uint32 ForceReg = 17;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->forcereg(), target);
  }

  // optional string RealCountry = 18;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->realcountry().data(), this->realcountry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegRequest.RealCountry");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->realcountry(), target);
  }

  // optional .micromsg.SKBuiltinBuffer_t RandomEncryKey = 19;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *this->randomencrykey_, deterministic, target);
  }

  // optional string Alias = 20;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegRequest.Alias");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->alias(), target);
  }

  // optional string VerifySignature = 21;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verifysignature().data(), this->verifysignature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegRequest.VerifySignature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->verifysignature(), target);
  }

  // optional string VerifyContent = 22;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verifycontent().data(), this->verifycontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegRequest.VerifyContent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->verifycontent(), target);
  }

  // optional uint32 HasHeadImg = 23;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->hasheadimg(), target);
  }

  // optional uint32 SuggestRet = 24;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->suggestret(), target);
  }

  // optional string ClientSeqID = 31;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientseqid().data(), this->clientseqid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegRequest.ClientSeqID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->clientseqid(), target);
  }

  // optional string AdSource = 32;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adsource().data(), this->adsource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegRequest.AdSource");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->adsource(), target);
  }

  // optional string AndroidID = 33;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->androidid().data(), this->androidid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegRequest.AndroidID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->androidid(), target);
  }

  // optional string MacAddr = 34;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->macaddr().data(), this->macaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegRequest.MacAddr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->macaddr(), target);
  }

  // optional string AndroidInstallRef = 35;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->androidinstallref().data(), this->androidinstallref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegRequest.AndroidInstallRef");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        35, this->androidinstallref(), target);
  }

  // optional string ClientFingerprint = 36;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientfingerprint().data(), this->clientfingerprint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegRequest.ClientFingerprint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        36, this->clientfingerprint(), target);
  }

  // optional .micromsg.ECDHKey CliPubECDHKey = 37;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        37, *this->clipubecdhkey_, deterministic, target);
  }

  // optional string GoogleAid = 38;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->googleaid().data(), this->googleaid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegRequest.GoogleAid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        38, this->googleaid(), target);
  }

  // optional string BundleID = 39;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bundleid().data(), this->bundleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegRequest.BundleID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        39, this->bundleid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.NewRegRequest)
  return target;
}

size_t NewRegRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.NewRegRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string UserName = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string Pwd = 3;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }

    // optional string NickName = 4;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string BindEmail = 6;
    if (has_bindemail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bindemail());
    }

    // optional string BindMobile = 7;
    if (has_bindmobile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bindmobile());
    }

    // optional string Ticket = 8;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ticket());
    }

    // optional string TimeZone = 15;
    if (has_timezone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timezone());
    }

    // optional string Language = 16;
    if (has_language()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional string RealCountry = 18;
    if (has_realcountry()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->realcountry());
    }

    // optional string Alias = 20;
    if (has_alias()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alias());
    }

    // optional string VerifySignature = 21;
    if (has_verifysignature()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verifysignature());
    }

    // optional string VerifyContent = 22;
    if (has_verifycontent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verifycontent());
    }

    // optional string ClientSeqID = 31;
    if (has_clientseqid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientseqid());
    }

    // optional string AdSource = 32;
    if (has_adsource()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->adsource());
    }

    // optional string AndroidID = 33;
    if (has_androidid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->androidid());
    }

    // optional string MacAddr = 34;
    if (has_macaddr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->macaddr());
    }

  }
  if (_has_bits_[16 / 32] & 983040u) {
    // optional string AndroidInstallRef = 35;
    if (has_androidinstallref()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->androidinstallref());
    }

    // optional string ClientFingerprint = 36;
    if (has_clientfingerprint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientfingerprint());
    }

    // optional string GoogleAid = 38;
    if (has_googleaid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->googleaid());
    }

    // optional string BundleID = 39;
    if (has_bundleid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bundleid());
    }

  }
  if (_has_bits_[16 / 32] & 14680064u) {
    // optional .micromsg.SKBuiltinBuffer_t RandomEncryKey = 19;
    if (has_randomencrykey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->randomencrykey_);
    }

    // optional .micromsg.ECDHKey CliPubECDHKey = 37;
    if (has_clipubecdhkey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->clipubecdhkey_);
    }

    // optional uint32 BindUin = 5;
    if (has_binduin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->binduin());
    }

  }
  if (_has_bits_[24 / 32] & 1056964608u) {
    // optional uint32 BuiltinIPSeq = 12;
    if (has_builtinipseq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->builtinipseq());
    }

    // optional uint32 DLSrc = 13;
    if (has_dlsrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dlsrc());
    }

    // optional uint32 RegMode = 14;
    if (has_regmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->regmode());
    }

    // optional uint32 ForceReg = 17;
    if (has_forcereg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->forcereg());
    }

    // optional uint32 HasHeadImg = 23;
    if (has_hasheadimg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hasheadimg());
    }

    // optional uint32 SuggestRet = 24;
    if (has_suggestret()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->suggestret());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewRegRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.NewRegRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NewRegRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NewRegRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.NewRegRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.NewRegRequest)
    MergeFrom(*source);
  }
}

void NewRegRequest::MergeFrom(const NewRegRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.NewRegRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_pwd();
      pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_bindemail();
      bindemail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bindemail_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_bindmobile();
      bindmobile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bindmobile_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_ticket();
      ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_timezone();
      timezone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timezone_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_language();
      language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_realcountry();
      realcountry_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.realcountry_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_alias();
      alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_verifysignature();
      verifysignature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifysignature_);
    }
    if (cached_has_bits & 0x00000800u) {
      set_has_verifycontent();
      verifycontent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifycontent_);
    }
    if (cached_has_bits & 0x00001000u) {
      set_has_clientseqid();
      clientseqid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientseqid_);
    }
    if (cached_has_bits & 0x00002000u) {
      set_has_adsource();
      adsource_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.adsource_);
    }
    if (cached_has_bits & 0x00004000u) {
      set_has_androidid();
      androidid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.androidid_);
    }
    if (cached_has_bits & 0x00008000u) {
      set_has_macaddr();
      macaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.macaddr_);
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      set_has_androidinstallref();
      androidinstallref_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.androidinstallref_);
    }
    if (cached_has_bits & 0x00020000u) {
      set_has_clientfingerprint();
      clientfingerprint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientfingerprint_);
    }
    if (cached_has_bits & 0x00040000u) {
      set_has_googleaid();
      googleaid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.googleaid_);
    }
    if (cached_has_bits & 0x00080000u) {
      set_has_bundleid();
      bundleid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bundleid_);
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_randomencrykey()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.randomencrykey());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_clipubecdhkey()->::micromsg::ECDHKey::MergeFrom(from.clipubecdhkey());
    }
    if (cached_has_bits & 0x00800000u) {
      binduin_ = from.binduin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1056964608u) {
    if (cached_has_bits & 0x01000000u) {
      builtinipseq_ = from.builtinipseq_;
    }
    if (cached_has_bits & 0x02000000u) {
      dlsrc_ = from.dlsrc_;
    }
    if (cached_has_bits & 0x04000000u) {
      regmode_ = from.regmode_;
    }
    if (cached_has_bits & 0x08000000u) {
      forcereg_ = from.forcereg_;
    }
    if (cached_has_bits & 0x10000000u) {
      hasheadimg_ = from.hasheadimg_;
    }
    if (cached_has_bits & 0x20000000u) {
      suggestret_ = from.suggestret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NewRegRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.NewRegRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewRegRequest::CopyFrom(const NewRegRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.NewRegRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewRegRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00100000) != 0x00100000) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_randomencrykey()) {
    if (!this->randomencrykey_->IsInitialized()) return false;
  }
  if (has_clipubecdhkey()) {
    if (!this->clipubecdhkey_->IsInitialized()) return false;
  }
  return true;
}

void NewRegRequest::Swap(NewRegRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewRegRequest::InternalSwap(NewRegRequest* other) {
  username_.Swap(&other->username_);
  pwd_.Swap(&other->pwd_);
  nickname_.Swap(&other->nickname_);
  bindemail_.Swap(&other->bindemail_);
  bindmobile_.Swap(&other->bindmobile_);
  ticket_.Swap(&other->ticket_);
  timezone_.Swap(&other->timezone_);
  language_.Swap(&other->language_);
  realcountry_.Swap(&other->realcountry_);
  alias_.Swap(&other->alias_);
  verifysignature_.Swap(&other->verifysignature_);
  verifycontent_.Swap(&other->verifycontent_);
  clientseqid_.Swap(&other->clientseqid_);
  adsource_.Swap(&other->adsource_);
  androidid_.Swap(&other->androidid_);
  macaddr_.Swap(&other->macaddr_);
  androidinstallref_.Swap(&other->androidinstallref_);
  clientfingerprint_.Swap(&other->clientfingerprint_);
  googleaid_.Swap(&other->googleaid_);
  bundleid_.Swap(&other->bundleid_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(randomencrykey_, other->randomencrykey_);
  std::swap(clipubecdhkey_, other->clipubecdhkey_);
  std::swap(binduin_, other->binduin_);
  std::swap(builtinipseq_, other->builtinipseq_);
  std::swap(dlsrc_, other->dlsrc_);
  std::swap(regmode_, other->regmode_);
  std::swap(forcereg_, other->forcereg_);
  std::swap(hasheadimg_, other->hasheadimg_);
  std::swap(suggestret_, other->suggestret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NewRegRequest::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NewRegRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool NewRegRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void NewRegRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00100000u;
}
void NewRegRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00100000u;
}
void NewRegRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& NewRegRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* NewRegRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewRegRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* NewRegRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.NewRegRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void NewRegRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewRegRequest.BaseRequest)
}

// optional string UserName = 2;
bool NewRegRequest::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NewRegRequest::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void NewRegRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void NewRegRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& NewRegRequest::username() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegRequest.UserName)
  return username_.GetNoArena();
}
void NewRegRequest::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewRegRequest.UserName)
}
#if LANG_CXX11
void NewRegRequest::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewRegRequest.UserName)
}
#endif
void NewRegRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewRegRequest.UserName)
}
void NewRegRequest::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewRegRequest.UserName)
}
::std::string* NewRegRequest::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.NewRegRequest.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewRegRequest::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.NewRegRequest.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewRegRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewRegRequest.UserName)
}

// optional string Pwd = 3;
bool NewRegRequest::has_pwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NewRegRequest::set_has_pwd() {
  _has_bits_[0] |= 0x00000002u;
}
void NewRegRequest::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000002u;
}
void NewRegRequest::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pwd();
}
const ::std::string& NewRegRequest::pwd() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegRequest.Pwd)
  return pwd_.GetNoArena();
}
void NewRegRequest::set_pwd(const ::std::string& value) {
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewRegRequest.Pwd)
}
#if LANG_CXX11
void NewRegRequest::set_pwd(::std::string&& value) {
  set_has_pwd();
  pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewRegRequest.Pwd)
}
#endif
void NewRegRequest::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewRegRequest.Pwd)
}
void NewRegRequest::set_pwd(const char* value, size_t size) {
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewRegRequest.Pwd)
}
::std::string* NewRegRequest::mutable_pwd() {
  set_has_pwd();
  // @@protoc_insertion_point(field_mutable:micromsg.NewRegRequest.Pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewRegRequest::release_pwd() {
  // @@protoc_insertion_point(field_release:micromsg.NewRegRequest.Pwd)
  clear_has_pwd();
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewRegRequest::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    set_has_pwd();
  } else {
    clear_has_pwd();
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewRegRequest.Pwd)
}

// optional string NickName = 4;
bool NewRegRequest::has_nickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NewRegRequest::set_has_nickname() {
  _has_bits_[0] |= 0x00000004u;
}
void NewRegRequest::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000004u;
}
void NewRegRequest::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
const ::std::string& NewRegRequest::nickname() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegRequest.NickName)
  return nickname_.GetNoArena();
}
void NewRegRequest::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewRegRequest.NickName)
}
#if LANG_CXX11
void NewRegRequest::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewRegRequest.NickName)
}
#endif
void NewRegRequest::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewRegRequest.NickName)
}
void NewRegRequest::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewRegRequest.NickName)
}
::std::string* NewRegRequest::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:micromsg.NewRegRequest.NickName)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewRegRequest::release_nickname() {
  // @@protoc_insertion_point(field_release:micromsg.NewRegRequest.NickName)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewRegRequest::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewRegRequest.NickName)
}

// optional uint32 BindUin = 5;
bool NewRegRequest::has_binduin() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void NewRegRequest::set_has_binduin() {
  _has_bits_[0] |= 0x00800000u;
}
void NewRegRequest::clear_has_binduin() {
  _has_bits_[0] &= ~0x00800000u;
}
void NewRegRequest::clear_binduin() {
  binduin_ = 0u;
  clear_has_binduin();
}
::google::protobuf::uint32 NewRegRequest::binduin() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegRequest.BindUin)
  return binduin_;
}
void NewRegRequest::set_binduin(::google::protobuf::uint32 value) {
  set_has_binduin();
  binduin_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewRegRequest.BindUin)
}

// optional string BindEmail = 6;
bool NewRegRequest::has_bindemail() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NewRegRequest::set_has_bindemail() {
  _has_bits_[0] |= 0x00000008u;
}
void NewRegRequest::clear_has_bindemail() {
  _has_bits_[0] &= ~0x00000008u;
}
void NewRegRequest::clear_bindemail() {
  bindemail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bindemail();
}
const ::std::string& NewRegRequest::bindemail() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegRequest.BindEmail)
  return bindemail_.GetNoArena();
}
void NewRegRequest::set_bindemail(const ::std::string& value) {
  set_has_bindemail();
  bindemail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewRegRequest.BindEmail)
}
#if LANG_CXX11
void NewRegRequest::set_bindemail(::std::string&& value) {
  set_has_bindemail();
  bindemail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewRegRequest.BindEmail)
}
#endif
void NewRegRequest::set_bindemail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bindemail();
  bindemail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewRegRequest.BindEmail)
}
void NewRegRequest::set_bindemail(const char* value, size_t size) {
  set_has_bindemail();
  bindemail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewRegRequest.BindEmail)
}
::std::string* NewRegRequest::mutable_bindemail() {
  set_has_bindemail();
  // @@protoc_insertion_point(field_mutable:micromsg.NewRegRequest.BindEmail)
  return bindemail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewRegRequest::release_bindemail() {
  // @@protoc_insertion_point(field_release:micromsg.NewRegRequest.BindEmail)
  clear_has_bindemail();
  return bindemail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewRegRequest::set_allocated_bindemail(::std::string* bindemail) {
  if (bindemail != NULL) {
    set_has_bindemail();
  } else {
    clear_has_bindemail();
  }
  bindemail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bindemail);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewRegRequest.BindEmail)
}

// optional string BindMobile = 7;
bool NewRegRequest::has_bindmobile() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NewRegRequest::set_has_bindmobile() {
  _has_bits_[0] |= 0x00000010u;
}
void NewRegRequest::clear_has_bindmobile() {
  _has_bits_[0] &= ~0x00000010u;
}
void NewRegRequest::clear_bindmobile() {
  bindmobile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bindmobile();
}
const ::std::string& NewRegRequest::bindmobile() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegRequest.BindMobile)
  return bindmobile_.GetNoArena();
}
void NewRegRequest::set_bindmobile(const ::std::string& value) {
  set_has_bindmobile();
  bindmobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewRegRequest.BindMobile)
}
#if LANG_CXX11
void NewRegRequest::set_bindmobile(::std::string&& value) {
  set_has_bindmobile();
  bindmobile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewRegRequest.BindMobile)
}
#endif
void NewRegRequest::set_bindmobile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bindmobile();
  bindmobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewRegRequest.BindMobile)
}
void NewRegRequest::set_bindmobile(const char* value, size_t size) {
  set_has_bindmobile();
  bindmobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewRegRequest.BindMobile)
}
::std::string* NewRegRequest::mutable_bindmobile() {
  set_has_bindmobile();
  // @@protoc_insertion_point(field_mutable:micromsg.NewRegRequest.BindMobile)
  return bindmobile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewRegRequest::release_bindmobile() {
  // @@protoc_insertion_point(field_release:micromsg.NewRegRequest.BindMobile)
  clear_has_bindmobile();
  return bindmobile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewRegRequest::set_allocated_bindmobile(::std::string* bindmobile) {
  if (bindmobile != NULL) {
    set_has_bindmobile();
  } else {
    clear_has_bindmobile();
  }
  bindmobile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bindmobile);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewRegRequest.BindMobile)
}

// optional string Ticket = 8;
bool NewRegRequest::has_ticket() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void NewRegRequest::set_has_ticket() {
  _has_bits_[0] |= 0x00000020u;
}
void NewRegRequest::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000020u;
}
void NewRegRequest::clear_ticket() {
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ticket();
}
const ::std::string& NewRegRequest::ticket() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegRequest.Ticket)
  return ticket_.GetNoArena();
}
void NewRegRequest::set_ticket(const ::std::string& value) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewRegRequest.Ticket)
}
#if LANG_CXX11
void NewRegRequest::set_ticket(::std::string&& value) {
  set_has_ticket();
  ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewRegRequest.Ticket)
}
#endif
void NewRegRequest::set_ticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewRegRequest.Ticket)
}
void NewRegRequest::set_ticket(const char* value, size_t size) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewRegRequest.Ticket)
}
::std::string* NewRegRequest::mutable_ticket() {
  set_has_ticket();
  // @@protoc_insertion_point(field_mutable:micromsg.NewRegRequest.Ticket)
  return ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewRegRequest::release_ticket() {
  // @@protoc_insertion_point(field_release:micromsg.NewRegRequest.Ticket)
  clear_has_ticket();
  return ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewRegRequest::set_allocated_ticket(::std::string* ticket) {
  if (ticket != NULL) {
    set_has_ticket();
  } else {
    clear_has_ticket();
  }
  ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticket);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewRegRequest.Ticket)
}

// optional uint32 BuiltinIPSeq = 12;
bool NewRegRequest::has_builtinipseq() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void NewRegRequest::set_has_builtinipseq() {
  _has_bits_[0] |= 0x01000000u;
}
void NewRegRequest::clear_has_builtinipseq() {
  _has_bits_[0] &= ~0x01000000u;
}
void NewRegRequest::clear_builtinipseq() {
  builtinipseq_ = 0u;
  clear_has_builtinipseq();
}
::google::protobuf::uint32 NewRegRequest::builtinipseq() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegRequest.BuiltinIPSeq)
  return builtinipseq_;
}
void NewRegRequest::set_builtinipseq(::google::protobuf::uint32 value) {
  set_has_builtinipseq();
  builtinipseq_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewRegRequest.BuiltinIPSeq)
}

// optional uint32 DLSrc = 13;
bool NewRegRequest::has_dlsrc() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void NewRegRequest::set_has_dlsrc() {
  _has_bits_[0] |= 0x02000000u;
}
void NewRegRequest::clear_has_dlsrc() {
  _has_bits_[0] &= ~0x02000000u;
}
void NewRegRequest::clear_dlsrc() {
  dlsrc_ = 0u;
  clear_has_dlsrc();
}
::google::protobuf::uint32 NewRegRequest::dlsrc() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegRequest.DLSrc)
  return dlsrc_;
}
void NewRegRequest::set_dlsrc(::google::protobuf::uint32 value) {
  set_has_dlsrc();
  dlsrc_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewRegRequest.DLSrc)
}

// optional uint32 RegMode = 14;
bool NewRegRequest::has_regmode() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void NewRegRequest::set_has_regmode() {
  _has_bits_[0] |= 0x04000000u;
}
void NewRegRequest::clear_has_regmode() {
  _has_bits_[0] &= ~0x04000000u;
}
void NewRegRequest::clear_regmode() {
  regmode_ = 0u;
  clear_has_regmode();
}
::google::protobuf::uint32 NewRegRequest::regmode() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegRequest.RegMode)
  return regmode_;
}
void NewRegRequest::set_regmode(::google::protobuf::uint32 value) {
  set_has_regmode();
  regmode_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewRegRequest.RegMode)
}

// optional string TimeZone = 15;
bool NewRegRequest::has_timezone() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void NewRegRequest::set_has_timezone() {
  _has_bits_[0] |= 0x00000040u;
}
void NewRegRequest::clear_has_timezone() {
  _has_bits_[0] &= ~0x00000040u;
}
void NewRegRequest::clear_timezone() {
  timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timezone();
}
const ::std::string& NewRegRequest::timezone() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegRequest.TimeZone)
  return timezone_.GetNoArena();
}
void NewRegRequest::set_timezone(const ::std::string& value) {
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewRegRequest.TimeZone)
}
#if LANG_CXX11
void NewRegRequest::set_timezone(::std::string&& value) {
  set_has_timezone();
  timezone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewRegRequest.TimeZone)
}
#endif
void NewRegRequest::set_timezone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewRegRequest.TimeZone)
}
void NewRegRequest::set_timezone(const char* value, size_t size) {
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewRegRequest.TimeZone)
}
::std::string* NewRegRequest::mutable_timezone() {
  set_has_timezone();
  // @@protoc_insertion_point(field_mutable:micromsg.NewRegRequest.TimeZone)
  return timezone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewRegRequest::release_timezone() {
  // @@protoc_insertion_point(field_release:micromsg.NewRegRequest.TimeZone)
  clear_has_timezone();
  return timezone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewRegRequest::set_allocated_timezone(::std::string* timezone) {
  if (timezone != NULL) {
    set_has_timezone();
  } else {
    clear_has_timezone();
  }
  timezone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timezone);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewRegRequest.TimeZone)
}

// optional string Language = 16;
bool NewRegRequest::has_language() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void NewRegRequest::set_has_language() {
  _has_bits_[0] |= 0x00000080u;
}
void NewRegRequest::clear_has_language() {
  _has_bits_[0] &= ~0x00000080u;
}
void NewRegRequest::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_language();
}
const ::std::string& NewRegRequest::language() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegRequest.Language)
  return language_.GetNoArena();
}
void NewRegRequest::set_language(const ::std::string& value) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewRegRequest.Language)
}
#if LANG_CXX11
void NewRegRequest::set_language(::std::string&& value) {
  set_has_language();
  language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewRegRequest.Language)
}
#endif
void NewRegRequest::set_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewRegRequest.Language)
}
void NewRegRequest::set_language(const char* value, size_t size) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewRegRequest.Language)
}
::std::string* NewRegRequest::mutable_language() {
  set_has_language();
  // @@protoc_insertion_point(field_mutable:micromsg.NewRegRequest.Language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewRegRequest::release_language() {
  // @@protoc_insertion_point(field_release:micromsg.NewRegRequest.Language)
  clear_has_language();
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewRegRequest::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    set_has_language();
  } else {
    clear_has_language();
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewRegRequest.Language)
}

// optional uint32 ForceReg = 17;
bool NewRegRequest::has_forcereg() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void NewRegRequest::set_has_forcereg() {
  _has_bits_[0] |= 0x08000000u;
}
void NewRegRequest::clear_has_forcereg() {
  _has_bits_[0] &= ~0x08000000u;
}
void NewRegRequest::clear_forcereg() {
  forcereg_ = 0u;
  clear_has_forcereg();
}
::google::protobuf::uint32 NewRegRequest::forcereg() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegRequest.ForceReg)
  return forcereg_;
}
void NewRegRequest::set_forcereg(::google::protobuf::uint32 value) {
  set_has_forcereg();
  forcereg_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewRegRequest.ForceReg)
}

// optional string RealCountry = 18;
bool NewRegRequest::has_realcountry() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void NewRegRequest::set_has_realcountry() {
  _has_bits_[0] |= 0x00000100u;
}
void NewRegRequest::clear_has_realcountry() {
  _has_bits_[0] &= ~0x00000100u;
}
void NewRegRequest::clear_realcountry() {
  realcountry_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_realcountry();
}
const ::std::string& NewRegRequest::realcountry() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegRequest.RealCountry)
  return realcountry_.GetNoArena();
}
void NewRegRequest::set_realcountry(const ::std::string& value) {
  set_has_realcountry();
  realcountry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewRegRequest.RealCountry)
}
#if LANG_CXX11
void NewRegRequest::set_realcountry(::std::string&& value) {
  set_has_realcountry();
  realcountry_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewRegRequest.RealCountry)
}
#endif
void NewRegRequest::set_realcountry(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_realcountry();
  realcountry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewRegRequest.RealCountry)
}
void NewRegRequest::set_realcountry(const char* value, size_t size) {
  set_has_realcountry();
  realcountry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewRegRequest.RealCountry)
}
::std::string* NewRegRequest::mutable_realcountry() {
  set_has_realcountry();
  // @@protoc_insertion_point(field_mutable:micromsg.NewRegRequest.RealCountry)
  return realcountry_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewRegRequest::release_realcountry() {
  // @@protoc_insertion_point(field_release:micromsg.NewRegRequest.RealCountry)
  clear_has_realcountry();
  return realcountry_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewRegRequest::set_allocated_realcountry(::std::string* realcountry) {
  if (realcountry != NULL) {
    set_has_realcountry();
  } else {
    clear_has_realcountry();
  }
  realcountry_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), realcountry);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewRegRequest.RealCountry)
}

// optional .micromsg.SKBuiltinBuffer_t RandomEncryKey = 19;
bool NewRegRequest::has_randomencrykey() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void NewRegRequest::set_has_randomencrykey() {
  _has_bits_[0] |= 0x00200000u;
}
void NewRegRequest::clear_has_randomencrykey() {
  _has_bits_[0] &= ~0x00200000u;
}
void NewRegRequest::clear_randomencrykey() {
  if (randomencrykey_ != NULL) randomencrykey_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_randomencrykey();
}
const ::micromsg::SKBuiltinBuffer_t& NewRegRequest::randomencrykey() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegRequest.RandomEncryKey)
  return randomencrykey_ != NULL ? *randomencrykey_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* NewRegRequest::mutable_randomencrykey() {
  set_has_randomencrykey();
  if (randomencrykey_ == NULL) {
    randomencrykey_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewRegRequest.RandomEncryKey)
  return randomencrykey_;
}
::micromsg::SKBuiltinBuffer_t* NewRegRequest::release_randomencrykey() {
  // @@protoc_insertion_point(field_release:micromsg.NewRegRequest.RandomEncryKey)
  clear_has_randomencrykey();
  ::micromsg::SKBuiltinBuffer_t* temp = randomencrykey_;
  randomencrykey_ = NULL;
  return temp;
}
void NewRegRequest::set_allocated_randomencrykey(::micromsg::SKBuiltinBuffer_t* randomencrykey) {
  delete randomencrykey_;
  randomencrykey_ = randomencrykey;
  if (randomencrykey) {
    set_has_randomencrykey();
  } else {
    clear_has_randomencrykey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewRegRequest.RandomEncryKey)
}

// optional string Alias = 20;
bool NewRegRequest::has_alias() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void NewRegRequest::set_has_alias() {
  _has_bits_[0] |= 0x00000200u;
}
void NewRegRequest::clear_has_alias() {
  _has_bits_[0] &= ~0x00000200u;
}
void NewRegRequest::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_alias();
}
const ::std::string& NewRegRequest::alias() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegRequest.Alias)
  return alias_.GetNoArena();
}
void NewRegRequest::set_alias(const ::std::string& value) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewRegRequest.Alias)
}
#if LANG_CXX11
void NewRegRequest::set_alias(::std::string&& value) {
  set_has_alias();
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewRegRequest.Alias)
}
#endif
void NewRegRequest::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewRegRequest.Alias)
}
void NewRegRequest::set_alias(const char* value, size_t size) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewRegRequest.Alias)
}
::std::string* NewRegRequest::mutable_alias() {
  set_has_alias();
  // @@protoc_insertion_point(field_mutable:micromsg.NewRegRequest.Alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewRegRequest::release_alias() {
  // @@protoc_insertion_point(field_release:micromsg.NewRegRequest.Alias)
  clear_has_alias();
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewRegRequest::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    set_has_alias();
  } else {
    clear_has_alias();
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewRegRequest.Alias)
}

// optional string VerifySignature = 21;
bool NewRegRequest::has_verifysignature() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void NewRegRequest::set_has_verifysignature() {
  _has_bits_[0] |= 0x00000400u;
}
void NewRegRequest::clear_has_verifysignature() {
  _has_bits_[0] &= ~0x00000400u;
}
void NewRegRequest::clear_verifysignature() {
  verifysignature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verifysignature();
}
const ::std::string& NewRegRequest::verifysignature() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegRequest.VerifySignature)
  return verifysignature_.GetNoArena();
}
void NewRegRequest::set_verifysignature(const ::std::string& value) {
  set_has_verifysignature();
  verifysignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewRegRequest.VerifySignature)
}
#if LANG_CXX11
void NewRegRequest::set_verifysignature(::std::string&& value) {
  set_has_verifysignature();
  verifysignature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewRegRequest.VerifySignature)
}
#endif
void NewRegRequest::set_verifysignature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verifysignature();
  verifysignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewRegRequest.VerifySignature)
}
void NewRegRequest::set_verifysignature(const char* value, size_t size) {
  set_has_verifysignature();
  verifysignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewRegRequest.VerifySignature)
}
::std::string* NewRegRequest::mutable_verifysignature() {
  set_has_verifysignature();
  // @@protoc_insertion_point(field_mutable:micromsg.NewRegRequest.VerifySignature)
  return verifysignature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewRegRequest::release_verifysignature() {
  // @@protoc_insertion_point(field_release:micromsg.NewRegRequest.VerifySignature)
  clear_has_verifysignature();
  return verifysignature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewRegRequest::set_allocated_verifysignature(::std::string* verifysignature) {
  if (verifysignature != NULL) {
    set_has_verifysignature();
  } else {
    clear_has_verifysignature();
  }
  verifysignature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifysignature);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewRegRequest.VerifySignature)
}

// optional string VerifyContent = 22;
bool NewRegRequest::has_verifycontent() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void NewRegRequest::set_has_verifycontent() {
  _has_bits_[0] |= 0x00000800u;
}
void NewRegRequest::clear_has_verifycontent() {
  _has_bits_[0] &= ~0x00000800u;
}
void NewRegRequest::clear_verifycontent() {
  verifycontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verifycontent();
}
const ::std::string& NewRegRequest::verifycontent() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegRequest.VerifyContent)
  return verifycontent_.GetNoArena();
}
void NewRegRequest::set_verifycontent(const ::std::string& value) {
  set_has_verifycontent();
  verifycontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewRegRequest.VerifyContent)
}
#if LANG_CXX11
void NewRegRequest::set_verifycontent(::std::string&& value) {
  set_has_verifycontent();
  verifycontent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewRegRequest.VerifyContent)
}
#endif
void NewRegRequest::set_verifycontent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verifycontent();
  verifycontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewRegRequest.VerifyContent)
}
void NewRegRequest::set_verifycontent(const char* value, size_t size) {
  set_has_verifycontent();
  verifycontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewRegRequest.VerifyContent)
}
::std::string* NewRegRequest::mutable_verifycontent() {
  set_has_verifycontent();
  // @@protoc_insertion_point(field_mutable:micromsg.NewRegRequest.VerifyContent)
  return verifycontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewRegRequest::release_verifycontent() {
  // @@protoc_insertion_point(field_release:micromsg.NewRegRequest.VerifyContent)
  clear_has_verifycontent();
  return verifycontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewRegRequest::set_allocated_verifycontent(::std::string* verifycontent) {
  if (verifycontent != NULL) {
    set_has_verifycontent();
  } else {
    clear_has_verifycontent();
  }
  verifycontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifycontent);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewRegRequest.VerifyContent)
}

// optional uint32 HasHeadImg = 23;
bool NewRegRequest::has_hasheadimg() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void NewRegRequest::set_has_hasheadimg() {
  _has_bits_[0] |= 0x10000000u;
}
void NewRegRequest::clear_has_hasheadimg() {
  _has_bits_[0] &= ~0x10000000u;
}
void NewRegRequest::clear_hasheadimg() {
  hasheadimg_ = 0u;
  clear_has_hasheadimg();
}
::google::protobuf::uint32 NewRegRequest::hasheadimg() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegRequest.HasHeadImg)
  return hasheadimg_;
}
void NewRegRequest::set_hasheadimg(::google::protobuf::uint32 value) {
  set_has_hasheadimg();
  hasheadimg_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewRegRequest.HasHeadImg)
}

// optional uint32 SuggestRet = 24;
bool NewRegRequest::has_suggestret() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void NewRegRequest::set_has_suggestret() {
  _has_bits_[0] |= 0x20000000u;
}
void NewRegRequest::clear_has_suggestret() {
  _has_bits_[0] &= ~0x20000000u;
}
void NewRegRequest::clear_suggestret() {
  suggestret_ = 0u;
  clear_has_suggestret();
}
::google::protobuf::uint32 NewRegRequest::suggestret() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegRequest.SuggestRet)
  return suggestret_;
}
void NewRegRequest::set_suggestret(::google::protobuf::uint32 value) {
  set_has_suggestret();
  suggestret_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewRegRequest.SuggestRet)
}

// optional string ClientSeqID = 31;
bool NewRegRequest::has_clientseqid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void NewRegRequest::set_has_clientseqid() {
  _has_bits_[0] |= 0x00001000u;
}
void NewRegRequest::clear_has_clientseqid() {
  _has_bits_[0] &= ~0x00001000u;
}
void NewRegRequest::clear_clientseqid() {
  clientseqid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientseqid();
}
const ::std::string& NewRegRequest::clientseqid() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegRequest.ClientSeqID)
  return clientseqid_.GetNoArena();
}
void NewRegRequest::set_clientseqid(const ::std::string& value) {
  set_has_clientseqid();
  clientseqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewRegRequest.ClientSeqID)
}
#if LANG_CXX11
void NewRegRequest::set_clientseqid(::std::string&& value) {
  set_has_clientseqid();
  clientseqid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewRegRequest.ClientSeqID)
}
#endif
void NewRegRequest::set_clientseqid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientseqid();
  clientseqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewRegRequest.ClientSeqID)
}
void NewRegRequest::set_clientseqid(const char* value, size_t size) {
  set_has_clientseqid();
  clientseqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewRegRequest.ClientSeqID)
}
::std::string* NewRegRequest::mutable_clientseqid() {
  set_has_clientseqid();
  // @@protoc_insertion_point(field_mutable:micromsg.NewRegRequest.ClientSeqID)
  return clientseqid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewRegRequest::release_clientseqid() {
  // @@protoc_insertion_point(field_release:micromsg.NewRegRequest.ClientSeqID)
  clear_has_clientseqid();
  return clientseqid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewRegRequest::set_allocated_clientseqid(::std::string* clientseqid) {
  if (clientseqid != NULL) {
    set_has_clientseqid();
  } else {
    clear_has_clientseqid();
  }
  clientseqid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientseqid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewRegRequest.ClientSeqID)
}

// optional string AdSource = 32;
bool NewRegRequest::has_adsource() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void NewRegRequest::set_has_adsource() {
  _has_bits_[0] |= 0x00002000u;
}
void NewRegRequest::clear_has_adsource() {
  _has_bits_[0] &= ~0x00002000u;
}
void NewRegRequest::clear_adsource() {
  adsource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_adsource();
}
const ::std::string& NewRegRequest::adsource() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegRequest.AdSource)
  return adsource_.GetNoArena();
}
void NewRegRequest::set_adsource(const ::std::string& value) {
  set_has_adsource();
  adsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewRegRequest.AdSource)
}
#if LANG_CXX11
void NewRegRequest::set_adsource(::std::string&& value) {
  set_has_adsource();
  adsource_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewRegRequest.AdSource)
}
#endif
void NewRegRequest::set_adsource(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_adsource();
  adsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewRegRequest.AdSource)
}
void NewRegRequest::set_adsource(const char* value, size_t size) {
  set_has_adsource();
  adsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewRegRequest.AdSource)
}
::std::string* NewRegRequest::mutable_adsource() {
  set_has_adsource();
  // @@protoc_insertion_point(field_mutable:micromsg.NewRegRequest.AdSource)
  return adsource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewRegRequest::release_adsource() {
  // @@protoc_insertion_point(field_release:micromsg.NewRegRequest.AdSource)
  clear_has_adsource();
  return adsource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewRegRequest::set_allocated_adsource(::std::string* adsource) {
  if (adsource != NULL) {
    set_has_adsource();
  } else {
    clear_has_adsource();
  }
  adsource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), adsource);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewRegRequest.AdSource)
}

// optional string AndroidID = 33;
bool NewRegRequest::has_androidid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void NewRegRequest::set_has_androidid() {
  _has_bits_[0] |= 0x00004000u;
}
void NewRegRequest::clear_has_androidid() {
  _has_bits_[0] &= ~0x00004000u;
}
void NewRegRequest::clear_androidid() {
  androidid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_androidid();
}
const ::std::string& NewRegRequest::androidid() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegRequest.AndroidID)
  return androidid_.GetNoArena();
}
void NewRegRequest::set_androidid(const ::std::string& value) {
  set_has_androidid();
  androidid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewRegRequest.AndroidID)
}
#if LANG_CXX11
void NewRegRequest::set_androidid(::std::string&& value) {
  set_has_androidid();
  androidid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewRegRequest.AndroidID)
}
#endif
void NewRegRequest::set_androidid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_androidid();
  androidid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewRegRequest.AndroidID)
}
void NewRegRequest::set_androidid(const char* value, size_t size) {
  set_has_androidid();
  androidid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewRegRequest.AndroidID)
}
::std::string* NewRegRequest::mutable_androidid() {
  set_has_androidid();
  // @@protoc_insertion_point(field_mutable:micromsg.NewRegRequest.AndroidID)
  return androidid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewRegRequest::release_androidid() {
  // @@protoc_insertion_point(field_release:micromsg.NewRegRequest.AndroidID)
  clear_has_androidid();
  return androidid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewRegRequest::set_allocated_androidid(::std::string* androidid) {
  if (androidid != NULL) {
    set_has_androidid();
  } else {
    clear_has_androidid();
  }
  androidid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), androidid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewRegRequest.AndroidID)
}

// optional string MacAddr = 34;
bool NewRegRequest::has_macaddr() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void NewRegRequest::set_has_macaddr() {
  _has_bits_[0] |= 0x00008000u;
}
void NewRegRequest::clear_has_macaddr() {
  _has_bits_[0] &= ~0x00008000u;
}
void NewRegRequest::clear_macaddr() {
  macaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_macaddr();
}
const ::std::string& NewRegRequest::macaddr() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegRequest.MacAddr)
  return macaddr_.GetNoArena();
}
void NewRegRequest::set_macaddr(const ::std::string& value) {
  set_has_macaddr();
  macaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewRegRequest.MacAddr)
}
#if LANG_CXX11
void NewRegRequest::set_macaddr(::std::string&& value) {
  set_has_macaddr();
  macaddr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewRegRequest.MacAddr)
}
#endif
void NewRegRequest::set_macaddr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_macaddr();
  macaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewRegRequest.MacAddr)
}
void NewRegRequest::set_macaddr(const char* value, size_t size) {
  set_has_macaddr();
  macaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewRegRequest.MacAddr)
}
::std::string* NewRegRequest::mutable_macaddr() {
  set_has_macaddr();
  // @@protoc_insertion_point(field_mutable:micromsg.NewRegRequest.MacAddr)
  return macaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewRegRequest::release_macaddr() {
  // @@protoc_insertion_point(field_release:micromsg.NewRegRequest.MacAddr)
  clear_has_macaddr();
  return macaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewRegRequest::set_allocated_macaddr(::std::string* macaddr) {
  if (macaddr != NULL) {
    set_has_macaddr();
  } else {
    clear_has_macaddr();
  }
  macaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), macaddr);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewRegRequest.MacAddr)
}

// optional string AndroidInstallRef = 35;
bool NewRegRequest::has_androidinstallref() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void NewRegRequest::set_has_androidinstallref() {
  _has_bits_[0] |= 0x00010000u;
}
void NewRegRequest::clear_has_androidinstallref() {
  _has_bits_[0] &= ~0x00010000u;
}
void NewRegRequest::clear_androidinstallref() {
  androidinstallref_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_androidinstallref();
}
const ::std::string& NewRegRequest::androidinstallref() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegRequest.AndroidInstallRef)
  return androidinstallref_.GetNoArena();
}
void NewRegRequest::set_androidinstallref(const ::std::string& value) {
  set_has_androidinstallref();
  androidinstallref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewRegRequest.AndroidInstallRef)
}
#if LANG_CXX11
void NewRegRequest::set_androidinstallref(::std::string&& value) {
  set_has_androidinstallref();
  androidinstallref_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewRegRequest.AndroidInstallRef)
}
#endif
void NewRegRequest::set_androidinstallref(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_androidinstallref();
  androidinstallref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewRegRequest.AndroidInstallRef)
}
void NewRegRequest::set_androidinstallref(const char* value, size_t size) {
  set_has_androidinstallref();
  androidinstallref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewRegRequest.AndroidInstallRef)
}
::std::string* NewRegRequest::mutable_androidinstallref() {
  set_has_androidinstallref();
  // @@protoc_insertion_point(field_mutable:micromsg.NewRegRequest.AndroidInstallRef)
  return androidinstallref_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewRegRequest::release_androidinstallref() {
  // @@protoc_insertion_point(field_release:micromsg.NewRegRequest.AndroidInstallRef)
  clear_has_androidinstallref();
  return androidinstallref_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewRegRequest::set_allocated_androidinstallref(::std::string* androidinstallref) {
  if (androidinstallref != NULL) {
    set_has_androidinstallref();
  } else {
    clear_has_androidinstallref();
  }
  androidinstallref_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), androidinstallref);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewRegRequest.AndroidInstallRef)
}

// optional string ClientFingerprint = 36;
bool NewRegRequest::has_clientfingerprint() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void NewRegRequest::set_has_clientfingerprint() {
  _has_bits_[0] |= 0x00020000u;
}
void NewRegRequest::clear_has_clientfingerprint() {
  _has_bits_[0] &= ~0x00020000u;
}
void NewRegRequest::clear_clientfingerprint() {
  clientfingerprint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientfingerprint();
}
const ::std::string& NewRegRequest::clientfingerprint() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegRequest.ClientFingerprint)
  return clientfingerprint_.GetNoArena();
}
void NewRegRequest::set_clientfingerprint(const ::std::string& value) {
  set_has_clientfingerprint();
  clientfingerprint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewRegRequest.ClientFingerprint)
}
#if LANG_CXX11
void NewRegRequest::set_clientfingerprint(::std::string&& value) {
  set_has_clientfingerprint();
  clientfingerprint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewRegRequest.ClientFingerprint)
}
#endif
void NewRegRequest::set_clientfingerprint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientfingerprint();
  clientfingerprint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewRegRequest.ClientFingerprint)
}
void NewRegRequest::set_clientfingerprint(const char* value, size_t size) {
  set_has_clientfingerprint();
  clientfingerprint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewRegRequest.ClientFingerprint)
}
::std::string* NewRegRequest::mutable_clientfingerprint() {
  set_has_clientfingerprint();
  // @@protoc_insertion_point(field_mutable:micromsg.NewRegRequest.ClientFingerprint)
  return clientfingerprint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewRegRequest::release_clientfingerprint() {
  // @@protoc_insertion_point(field_release:micromsg.NewRegRequest.ClientFingerprint)
  clear_has_clientfingerprint();
  return clientfingerprint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewRegRequest::set_allocated_clientfingerprint(::std::string* clientfingerprint) {
  if (clientfingerprint != NULL) {
    set_has_clientfingerprint();
  } else {
    clear_has_clientfingerprint();
  }
  clientfingerprint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientfingerprint);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewRegRequest.ClientFingerprint)
}

// optional .micromsg.ECDHKey CliPubECDHKey = 37;
bool NewRegRequest::has_clipubecdhkey() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void NewRegRequest::set_has_clipubecdhkey() {
  _has_bits_[0] |= 0x00400000u;
}
void NewRegRequest::clear_has_clipubecdhkey() {
  _has_bits_[0] &= ~0x00400000u;
}
void NewRegRequest::clear_clipubecdhkey() {
  if (clipubecdhkey_ != NULL) clipubecdhkey_->::micromsg::ECDHKey::Clear();
  clear_has_clipubecdhkey();
}
const ::micromsg::ECDHKey& NewRegRequest::clipubecdhkey() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegRequest.CliPubECDHKey)
  return clipubecdhkey_ != NULL ? *clipubecdhkey_
                         : *::micromsg::ECDHKey::internal_default_instance();
}
::micromsg::ECDHKey* NewRegRequest::mutable_clipubecdhkey() {
  set_has_clipubecdhkey();
  if (clipubecdhkey_ == NULL) {
    clipubecdhkey_ = new ::micromsg::ECDHKey;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewRegRequest.CliPubECDHKey)
  return clipubecdhkey_;
}
::micromsg::ECDHKey* NewRegRequest::release_clipubecdhkey() {
  // @@protoc_insertion_point(field_release:micromsg.NewRegRequest.CliPubECDHKey)
  clear_has_clipubecdhkey();
  ::micromsg::ECDHKey* temp = clipubecdhkey_;
  clipubecdhkey_ = NULL;
  return temp;
}
void NewRegRequest::set_allocated_clipubecdhkey(::micromsg::ECDHKey* clipubecdhkey) {
  delete clipubecdhkey_;
  clipubecdhkey_ = clipubecdhkey;
  if (clipubecdhkey) {
    set_has_clipubecdhkey();
  } else {
    clear_has_clipubecdhkey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewRegRequest.CliPubECDHKey)
}

// optional string GoogleAid = 38;
bool NewRegRequest::has_googleaid() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void NewRegRequest::set_has_googleaid() {
  _has_bits_[0] |= 0x00040000u;
}
void NewRegRequest::clear_has_googleaid() {
  _has_bits_[0] &= ~0x00040000u;
}
void NewRegRequest::clear_googleaid() {
  googleaid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_googleaid();
}
const ::std::string& NewRegRequest::googleaid() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegRequest.GoogleAid)
  return googleaid_.GetNoArena();
}
void NewRegRequest::set_googleaid(const ::std::string& value) {
  set_has_googleaid();
  googleaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewRegRequest.GoogleAid)
}
#if LANG_CXX11
void NewRegRequest::set_googleaid(::std::string&& value) {
  set_has_googleaid();
  googleaid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewRegRequest.GoogleAid)
}
#endif
void NewRegRequest::set_googleaid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_googleaid();
  googleaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewRegRequest.GoogleAid)
}
void NewRegRequest::set_googleaid(const char* value, size_t size) {
  set_has_googleaid();
  googleaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewRegRequest.GoogleAid)
}
::std::string* NewRegRequest::mutable_googleaid() {
  set_has_googleaid();
  // @@protoc_insertion_point(field_mutable:micromsg.NewRegRequest.GoogleAid)
  return googleaid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewRegRequest::release_googleaid() {
  // @@protoc_insertion_point(field_release:micromsg.NewRegRequest.GoogleAid)
  clear_has_googleaid();
  return googleaid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewRegRequest::set_allocated_googleaid(::std::string* googleaid) {
  if (googleaid != NULL) {
    set_has_googleaid();
  } else {
    clear_has_googleaid();
  }
  googleaid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), googleaid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewRegRequest.GoogleAid)
}

// optional string BundleID = 39;
bool NewRegRequest::has_bundleid() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void NewRegRequest::set_has_bundleid() {
  _has_bits_[0] |= 0x00080000u;
}
void NewRegRequest::clear_has_bundleid() {
  _has_bits_[0] &= ~0x00080000u;
}
void NewRegRequest::clear_bundleid() {
  bundleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bundleid();
}
const ::std::string& NewRegRequest::bundleid() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegRequest.BundleID)
  return bundleid_.GetNoArena();
}
void NewRegRequest::set_bundleid(const ::std::string& value) {
  set_has_bundleid();
  bundleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewRegRequest.BundleID)
}
#if LANG_CXX11
void NewRegRequest::set_bundleid(::std::string&& value) {
  set_has_bundleid();
  bundleid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewRegRequest.BundleID)
}
#endif
void NewRegRequest::set_bundleid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bundleid();
  bundleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewRegRequest.BundleID)
}
void NewRegRequest::set_bundleid(const char* value, size_t size) {
  set_has_bundleid();
  bundleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewRegRequest.BundleID)
}
::std::string* NewRegRequest::mutable_bundleid() {
  set_has_bundleid();
  // @@protoc_insertion_point(field_mutable:micromsg.NewRegRequest.BundleID)
  return bundleid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewRegRequest::release_bundleid() {
  // @@protoc_insertion_point(field_release:micromsg.NewRegRequest.BundleID)
  clear_has_bundleid();
  return bundleid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewRegRequest::set_allocated_bundleid(::std::string* bundleid) {
  if (bundleid != NULL) {
    set_has_bundleid();
  } else {
    clear_has_bundleid();
  }
  bundleid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bundleid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewRegRequest.BundleID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SecAuthRegKeySect::kAutoAuthKeyFieldNumber;
const int SecAuthRegKeySect::kSvrPubECDHKeyFieldNumber;
const int SecAuthRegKeySect::kSessionKeyFieldNumber;
const int SecAuthRegKeySect::kAuthResultFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SecAuthRegKeySect::SecAuthRegKeySect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SecAuthRegKeySect)
}
SecAuthRegKeySect::SecAuthRegKeySect(const SecAuthRegKeySect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_autoauthkey()) {
    autoauthkey_ = new ::micromsg::SKBuiltinBuffer_t(*from.autoauthkey_);
  } else {
    autoauthkey_ = NULL;
  }
  if (from.has_svrpubecdhkey()) {
    svrpubecdhkey_ = new ::micromsg::ECDHKey(*from.svrpubecdhkey_);
  } else {
    svrpubecdhkey_ = NULL;
  }
  if (from.has_sessionkey()) {
    sessionkey_ = new ::micromsg::SKBuiltinBuffer_t(*from.sessionkey_);
  } else {
    sessionkey_ = NULL;
  }
  authresultflag_ = from.authresultflag_;
  // @@protoc_insertion_point(copy_constructor:micromsg.SecAuthRegKeySect)
}

void SecAuthRegKeySect::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&autoauthkey_, 0, reinterpret_cast<char*>(&authresultflag_) -
    reinterpret_cast<char*>(&autoauthkey_) + sizeof(authresultflag_));
}

SecAuthRegKeySect::~SecAuthRegKeySect() {
  // @@protoc_insertion_point(destructor:micromsg.SecAuthRegKeySect)
  SharedDtor();
}

void SecAuthRegKeySect::SharedDtor() {
  if (this != internal_default_instance()) {
    delete autoauthkey_;
  }
  if (this != internal_default_instance()) {
    delete svrpubecdhkey_;
  }
  if (this != internal_default_instance()) {
    delete sessionkey_;
  }
}

void SecAuthRegKeySect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SecAuthRegKeySect::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SecAuthRegKeySect& SecAuthRegKeySect::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

SecAuthRegKeySect* SecAuthRegKeySect::New(::google::protobuf::Arena* arena) const {
  SecAuthRegKeySect* n = new SecAuthRegKeySect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SecAuthRegKeySect::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SecAuthRegKeySect)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_autoauthkey()) {
      GOOGLE_DCHECK(autoauthkey_ != NULL);
      autoauthkey_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_svrpubecdhkey()) {
      GOOGLE_DCHECK(svrpubecdhkey_ != NULL);
      svrpubecdhkey_->::micromsg::ECDHKey::Clear();
    }
    if (has_sessionkey()) {
      GOOGLE_DCHECK(sessionkey_ != NULL);
      sessionkey_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  authresultflag_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SecAuthRegKeySect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SecAuthRegKeySect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.SKBuiltinBuffer_t AutoAuthKey = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_autoauthkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.ECDHKey SvrPubECDHKey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svrpubecdhkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t SessionKey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sessionkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 AuthResultFlag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_authresultflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &authresultflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SecAuthRegKeySect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SecAuthRegKeySect)
  return false;
#undef DO_
}

void SecAuthRegKeySect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SecAuthRegKeySect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinBuffer_t AutoAuthKey = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->autoauthkey_, output);
  }

  // required .micromsg.ECDHKey SvrPubECDHKey = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->svrpubecdhkey_, output);
  }

  // required .micromsg.SKBuiltinBuffer_t SessionKey = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->sessionkey_, output);
  }

  // required uint32 AuthResultFlag = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->authresultflag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SecAuthRegKeySect)
}

::google::protobuf::uint8* SecAuthRegKeySect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SecAuthRegKeySect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinBuffer_t AutoAuthKey = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->autoauthkey_, deterministic, target);
  }

  // required .micromsg.ECDHKey SvrPubECDHKey = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->svrpubecdhkey_, deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t SessionKey = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->sessionkey_, deterministic, target);
  }

  // required uint32 AuthResultFlag = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->authresultflag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SecAuthRegKeySect)
  return target;
}

size_t SecAuthRegKeySect::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SecAuthRegKeySect)
  size_t total_size = 0;

  if (has_autoauthkey()) {
    // required .micromsg.SKBuiltinBuffer_t AutoAuthKey = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->autoauthkey_);
  }

  if (has_svrpubecdhkey()) {
    // required .micromsg.ECDHKey SvrPubECDHKey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->svrpubecdhkey_);
  }

  if (has_sessionkey()) {
    // required .micromsg.SKBuiltinBuffer_t SessionKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sessionkey_);
  }

  if (has_authresultflag()) {
    // required uint32 AuthResultFlag = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->authresultflag());
  }

  return total_size;
}
size_t SecAuthRegKeySect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SecAuthRegKeySect)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .micromsg.SKBuiltinBuffer_t AutoAuthKey = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->autoauthkey_);

    // required .micromsg.ECDHKey SvrPubECDHKey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->svrpubecdhkey_);

    // required .micromsg.SKBuiltinBuffer_t SessionKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sessionkey_);

    // required uint32 AuthResultFlag = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->authresultflag());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SecAuthRegKeySect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SecAuthRegKeySect)
  GOOGLE_DCHECK_NE(&from, this);
  const SecAuthRegKeySect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SecAuthRegKeySect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SecAuthRegKeySect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SecAuthRegKeySect)
    MergeFrom(*source);
  }
}

void SecAuthRegKeySect::MergeFrom(const SecAuthRegKeySect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SecAuthRegKeySect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_autoauthkey()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.autoauthkey());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_svrpubecdhkey()->::micromsg::ECDHKey::MergeFrom(from.svrpubecdhkey());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_sessionkey()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.sessionkey());
    }
    if (cached_has_bits & 0x00000008u) {
      authresultflag_ = from.authresultflag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SecAuthRegKeySect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SecAuthRegKeySect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecAuthRegKeySect::CopyFrom(const SecAuthRegKeySect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SecAuthRegKeySect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecAuthRegKeySect::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_autoauthkey()) {
    if (!this->autoauthkey_->IsInitialized()) return false;
  }
  if (has_svrpubecdhkey()) {
    if (!this->svrpubecdhkey_->IsInitialized()) return false;
  }
  if (has_sessionkey()) {
    if (!this->sessionkey_->IsInitialized()) return false;
  }
  return true;
}

void SecAuthRegKeySect::Swap(SecAuthRegKeySect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SecAuthRegKeySect::InternalSwap(SecAuthRegKeySect* other) {
  std::swap(autoauthkey_, other->autoauthkey_);
  std::swap(svrpubecdhkey_, other->svrpubecdhkey_);
  std::swap(sessionkey_, other->sessionkey_);
  std::swap(authresultflag_, other->authresultflag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SecAuthRegKeySect::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SecAuthRegKeySect

// required .micromsg.SKBuiltinBuffer_t AutoAuthKey = 1;
bool SecAuthRegKeySect::has_autoauthkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SecAuthRegKeySect::set_has_autoauthkey() {
  _has_bits_[0] |= 0x00000001u;
}
void SecAuthRegKeySect::clear_has_autoauthkey() {
  _has_bits_[0] &= ~0x00000001u;
}
void SecAuthRegKeySect::clear_autoauthkey() {
  if (autoauthkey_ != NULL) autoauthkey_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_autoauthkey();
}
const ::micromsg::SKBuiltinBuffer_t& SecAuthRegKeySect::autoauthkey() const {
  // @@protoc_insertion_point(field_get:micromsg.SecAuthRegKeySect.AutoAuthKey)
  return autoauthkey_ != NULL ? *autoauthkey_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* SecAuthRegKeySect::mutable_autoauthkey() {
  set_has_autoauthkey();
  if (autoauthkey_ == NULL) {
    autoauthkey_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SecAuthRegKeySect.AutoAuthKey)
  return autoauthkey_;
}
::micromsg::SKBuiltinBuffer_t* SecAuthRegKeySect::release_autoauthkey() {
  // @@protoc_insertion_point(field_release:micromsg.SecAuthRegKeySect.AutoAuthKey)
  clear_has_autoauthkey();
  ::micromsg::SKBuiltinBuffer_t* temp = autoauthkey_;
  autoauthkey_ = NULL;
  return temp;
}
void SecAuthRegKeySect::set_allocated_autoauthkey(::micromsg::SKBuiltinBuffer_t* autoauthkey) {
  delete autoauthkey_;
  autoauthkey_ = autoauthkey;
  if (autoauthkey) {
    set_has_autoauthkey();
  } else {
    clear_has_autoauthkey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SecAuthRegKeySect.AutoAuthKey)
}

// required .micromsg.ECDHKey SvrPubECDHKey = 2;
bool SecAuthRegKeySect::has_svrpubecdhkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SecAuthRegKeySect::set_has_svrpubecdhkey() {
  _has_bits_[0] |= 0x00000002u;
}
void SecAuthRegKeySect::clear_has_svrpubecdhkey() {
  _has_bits_[0] &= ~0x00000002u;
}
void SecAuthRegKeySect::clear_svrpubecdhkey() {
  if (svrpubecdhkey_ != NULL) svrpubecdhkey_->::micromsg::ECDHKey::Clear();
  clear_has_svrpubecdhkey();
}
const ::micromsg::ECDHKey& SecAuthRegKeySect::svrpubecdhkey() const {
  // @@protoc_insertion_point(field_get:micromsg.SecAuthRegKeySect.SvrPubECDHKey)
  return svrpubecdhkey_ != NULL ? *svrpubecdhkey_
                         : *::micromsg::ECDHKey::internal_default_instance();
}
::micromsg::ECDHKey* SecAuthRegKeySect::mutable_svrpubecdhkey() {
  set_has_svrpubecdhkey();
  if (svrpubecdhkey_ == NULL) {
    svrpubecdhkey_ = new ::micromsg::ECDHKey;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SecAuthRegKeySect.SvrPubECDHKey)
  return svrpubecdhkey_;
}
::micromsg::ECDHKey* SecAuthRegKeySect::release_svrpubecdhkey() {
  // @@protoc_insertion_point(field_release:micromsg.SecAuthRegKeySect.SvrPubECDHKey)
  clear_has_svrpubecdhkey();
  ::micromsg::ECDHKey* temp = svrpubecdhkey_;
  svrpubecdhkey_ = NULL;
  return temp;
}
void SecAuthRegKeySect::set_allocated_svrpubecdhkey(::micromsg::ECDHKey* svrpubecdhkey) {
  delete svrpubecdhkey_;
  svrpubecdhkey_ = svrpubecdhkey;
  if (svrpubecdhkey) {
    set_has_svrpubecdhkey();
  } else {
    clear_has_svrpubecdhkey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SecAuthRegKeySect.SvrPubECDHKey)
}

// required .micromsg.SKBuiltinBuffer_t SessionKey = 3;
bool SecAuthRegKeySect::has_sessionkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SecAuthRegKeySect::set_has_sessionkey() {
  _has_bits_[0] |= 0x00000004u;
}
void SecAuthRegKeySect::clear_has_sessionkey() {
  _has_bits_[0] &= ~0x00000004u;
}
void SecAuthRegKeySect::clear_sessionkey() {
  if (sessionkey_ != NULL) sessionkey_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_sessionkey();
}
const ::micromsg::SKBuiltinBuffer_t& SecAuthRegKeySect::sessionkey() const {
  // @@protoc_insertion_point(field_get:micromsg.SecAuthRegKeySect.SessionKey)
  return sessionkey_ != NULL ? *sessionkey_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* SecAuthRegKeySect::mutable_sessionkey() {
  set_has_sessionkey();
  if (sessionkey_ == NULL) {
    sessionkey_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SecAuthRegKeySect.SessionKey)
  return sessionkey_;
}
::micromsg::SKBuiltinBuffer_t* SecAuthRegKeySect::release_sessionkey() {
  // @@protoc_insertion_point(field_release:micromsg.SecAuthRegKeySect.SessionKey)
  clear_has_sessionkey();
  ::micromsg::SKBuiltinBuffer_t* temp = sessionkey_;
  sessionkey_ = NULL;
  return temp;
}
void SecAuthRegKeySect::set_allocated_sessionkey(::micromsg::SKBuiltinBuffer_t* sessionkey) {
  delete sessionkey_;
  sessionkey_ = sessionkey;
  if (sessionkey) {
    set_has_sessionkey();
  } else {
    clear_has_sessionkey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SecAuthRegKeySect.SessionKey)
}

// required uint32 AuthResultFlag = 4;
bool SecAuthRegKeySect::has_authresultflag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SecAuthRegKeySect::set_has_authresultflag() {
  _has_bits_[0] |= 0x00000008u;
}
void SecAuthRegKeySect::clear_has_authresultflag() {
  _has_bits_[0] &= ~0x00000008u;
}
void SecAuthRegKeySect::clear_authresultflag() {
  authresultflag_ = 0u;
  clear_has_authresultflag();
}
::google::protobuf::uint32 SecAuthRegKeySect::authresultflag() const {
  // @@protoc_insertion_point(field_get:micromsg.SecAuthRegKeySect.AuthResultFlag)
  return authresultflag_;
}
void SecAuthRegKeySect::set_authresultflag(::google::protobuf::uint32 value) {
  set_has_authresultflag();
  authresultflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SecAuthRegKeySect.AuthResultFlag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewRegResponse::kBaseResponseFieldNumber;
const int NewRegResponse::kUinFieldNumber;
const int NewRegResponse::kSessionKeyFieldNumber;
const int NewRegResponse::kOfficialUserNameFieldNumber;
const int NewRegResponse::kOfficialNickNameFieldNumber;
const int NewRegResponse::kQQMicroBlogUserNameFieldNumber;
const int NewRegResponse::kBindEmailFieldNumber;
const int NewRegResponse::kPushMailStatusFieldNumber;
const int NewRegResponse::kSendCardBitFlagFieldNumber;
const int NewRegResponse::kPushMailSettingTicketFieldNumber;
const int NewRegResponse::kBuiltinIPListFieldNumber;
const int NewRegResponse::kFSURLFieldNumber;
const int NewRegResponse::kUserNameFieldNumber;
const int NewRegResponse::kStatusFieldNumber;
const int NewRegResponse::kNetworkControlFieldNumber;
const int NewRegResponse::kReturnFlagFieldNumber;
const int NewRegResponse::kRegTypeFieldNumber;
const int NewRegResponse::kAuthKeyFieldNumber;
const int NewRegResponse::kPluginKeyListFieldNumber;
const int NewRegResponse::kPasswordFieldNumber;
const int NewRegResponse::kProfileFlagFieldNumber;
const int NewRegResponse::kNewHostListFieldNumber;
const int NewRegResponse::kAutoAuthTicketFieldNumber;
const int NewRegResponse::kDnsInfoFieldNumber;
const int NewRegResponse::kStepTicketFieldNumber;
const int NewRegResponse::kVerifySignatureFieldNumber;
const int NewRegResponse::kVerifyBuffFieldNumber;
const int NewRegResponse::kShowStyleFieldNumber;
const int NewRegResponse::kSnsDnsInfoFieldNumber;
const int NewRegResponse::kAppDnsInfoFieldNumber;
const int NewRegResponse::kSecAuthRegKeySectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewRegResponse::NewRegResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.NewRegResponse)
}
NewRegResponse::NewRegResponse(const NewRegResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sessionkey()) {
    sessionkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionkey_);
  }
  officialusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_officialusername()) {
    officialusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.officialusername_);
  }
  officialnickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_officialnickname()) {
    officialnickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.officialnickname_);
  }
  qqmicroblogusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_qqmicroblogusername()) {
    qqmicroblogusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qqmicroblogusername_);
  }
  bindemail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bindemail()) {
    bindemail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bindemail_);
  }
  pushmailsettingticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pushmailsettingticket()) {
    pushmailsettingticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pushmailsettingticket_);
  }
  fsurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fsurl()) {
    fsurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fsurl_);
  }
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  authkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_authkey()) {
    authkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authkey_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  autoauthticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_autoauthticket()) {
    autoauthticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.autoauthticket_);
  }
  stepticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_stepticket()) {
    stepticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stepticket_);
  }
  verifysignature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_verifysignature()) {
    verifysignature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifysignature_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_builtiniplist()) {
    builtiniplist_ = new ::micromsg::BuiltinIPList(*from.builtiniplist_);
  } else {
    builtiniplist_ = NULL;
  }
  if (from.has_networkcontrol()) {
    networkcontrol_ = new ::micromsg::NetworkControl(*from.networkcontrol_);
  } else {
    networkcontrol_ = NULL;
  }
  if (from.has_pluginkeylist()) {
    pluginkeylist_ = new ::micromsg::PluginKeyList(*from.pluginkeylist_);
  } else {
    pluginkeylist_ = NULL;
  }
  if (from.has_newhostlist()) {
    newhostlist_ = new ::micromsg::HostList(*from.newhostlist_);
  } else {
    newhostlist_ = NULL;
  }
  if (from.has_dnsinfo()) {
    dnsinfo_ = new ::micromsg::CDNDnsInfo(*from.dnsinfo_);
  } else {
    dnsinfo_ = NULL;
  }
  if (from.has_verifybuff()) {
    verifybuff_ = new ::micromsg::SKBuiltinBuffer_t(*from.verifybuff_);
  } else {
    verifybuff_ = NULL;
  }
  if (from.has_showstyle()) {
    showstyle_ = new ::micromsg::ShowStyleKey(*from.showstyle_);
  } else {
    showstyle_ = NULL;
  }
  if (from.has_snsdnsinfo()) {
    snsdnsinfo_ = new ::micromsg::CDNDnsInfo(*from.snsdnsinfo_);
  } else {
    snsdnsinfo_ = NULL;
  }
  if (from.has_appdnsinfo()) {
    appdnsinfo_ = new ::micromsg::CDNDnsInfo(*from.appdnsinfo_);
  } else {
    appdnsinfo_ = NULL;
  }
  if (from.has_secauthregkeysect()) {
    secauthregkeysect_ = new ::micromsg::SecAuthRegKeySect(*from.secauthregkeysect_);
  } else {
    secauthregkeysect_ = NULL;
  }
  ::memcpy(&uin_, &from.uin_,
    reinterpret_cast<char*>(&profileflag_) -
    reinterpret_cast<char*>(&uin_) + sizeof(profileflag_));
  // @@protoc_insertion_point(copy_constructor:micromsg.NewRegResponse)
}

void NewRegResponse::SharedCtor() {
  _cached_size_ = 0;
  sessionkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  officialusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  officialnickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qqmicroblogusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bindemail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pushmailsettingticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fsurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  autoauthticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stepticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifysignature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&profileflag_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(profileflag_));
}

NewRegResponse::~NewRegResponse() {
  // @@protoc_insertion_point(destructor:micromsg.NewRegResponse)
  SharedDtor();
}

void NewRegResponse::SharedDtor() {
  sessionkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  officialusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  officialnickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qqmicroblogusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bindemail_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pushmailsettingticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fsurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  autoauthticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stepticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifysignature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete builtiniplist_;
  }
  if (this != internal_default_instance()) {
    delete networkcontrol_;
  }
  if (this != internal_default_instance()) {
    delete pluginkeylist_;
  }
  if (this != internal_default_instance()) {
    delete newhostlist_;
  }
  if (this != internal_default_instance()) {
    delete dnsinfo_;
  }
  if (this != internal_default_instance()) {
    delete verifybuff_;
  }
  if (this != internal_default_instance()) {
    delete showstyle_;
  }
  if (this != internal_default_instance()) {
    delete snsdnsinfo_;
  }
  if (this != internal_default_instance()) {
    delete appdnsinfo_;
  }
  if (this != internal_default_instance()) {
    delete secauthregkeysect_;
  }
}

void NewRegResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewRegResponse::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NewRegResponse& NewRegResponse::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

NewRegResponse* NewRegResponse::New(::google::protobuf::Arena* arena) const {
  NewRegResponse* n = new NewRegResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NewRegResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.NewRegResponse)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_sessionkey()) {
      GOOGLE_DCHECK(!sessionkey_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sessionkey_.UnsafeRawStringPointer())->clear();
    }
    if (has_officialusername()) {
      GOOGLE_DCHECK(!officialusername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*officialusername_.UnsafeRawStringPointer())->clear();
    }
    if (has_officialnickname()) {
      GOOGLE_DCHECK(!officialnickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*officialnickname_.UnsafeRawStringPointer())->clear();
    }
    if (has_qqmicroblogusername()) {
      GOOGLE_DCHECK(!qqmicroblogusername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*qqmicroblogusername_.UnsafeRawStringPointer())->clear();
    }
    if (has_bindemail()) {
      GOOGLE_DCHECK(!bindemail_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bindemail_.UnsafeRawStringPointer())->clear();
    }
    if (has_pushmailsettingticket()) {
      GOOGLE_DCHECK(!pushmailsettingticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pushmailsettingticket_.UnsafeRawStringPointer())->clear();
    }
    if (has_fsurl()) {
      GOOGLE_DCHECK(!fsurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fsurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_username()) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has_authkey()) {
      GOOGLE_DCHECK(!authkey_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*authkey_.UnsafeRawStringPointer())->clear();
    }
    if (has_password()) {
      GOOGLE_DCHECK(!password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*password_.UnsafeRawStringPointer())->clear();
    }
    if (has_autoauthticket()) {
      GOOGLE_DCHECK(!autoauthticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*autoauthticket_.UnsafeRawStringPointer())->clear();
    }
    if (has_stepticket()) {
      GOOGLE_DCHECK(!stepticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*stepticket_.UnsafeRawStringPointer())->clear();
    }
    if (has_verifysignature()) {
      GOOGLE_DCHECK(!verifysignature_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*verifysignature_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_builtiniplist()) {
      GOOGLE_DCHECK(builtiniplist_ != NULL);
      builtiniplist_->::micromsg::BuiltinIPList::Clear();
    }
    if (has_networkcontrol()) {
      GOOGLE_DCHECK(networkcontrol_ != NULL);
      networkcontrol_->::micromsg::NetworkControl::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    if (has_pluginkeylist()) {
      GOOGLE_DCHECK(pluginkeylist_ != NULL);
      pluginkeylist_->::micromsg::PluginKeyList::Clear();
    }
    if (has_newhostlist()) {
      GOOGLE_DCHECK(newhostlist_ != NULL);
      newhostlist_->::micromsg::HostList::Clear();
    }
    if (has_dnsinfo()) {
      GOOGLE_DCHECK(dnsinfo_ != NULL);
      dnsinfo_->::micromsg::CDNDnsInfo::Clear();
    }
    if (has_verifybuff()) {
      GOOGLE_DCHECK(verifybuff_ != NULL);
      verifybuff_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_showstyle()) {
      GOOGLE_DCHECK(showstyle_ != NULL);
      showstyle_->::micromsg::ShowStyleKey::Clear();
    }
    if (has_snsdnsinfo()) {
      GOOGLE_DCHECK(snsdnsinfo_ != NULL);
      snsdnsinfo_->::micromsg::CDNDnsInfo::Clear();
    }
    if (has_appdnsinfo()) {
      GOOGLE_DCHECK(appdnsinfo_ != NULL);
      appdnsinfo_->::micromsg::CDNDnsInfo::Clear();
    }
    if (has_secauthregkeysect()) {
      GOOGLE_DCHECK(secauthregkeysect_ != NULL);
      secauthregkeysect_->::micromsg::SecAuthRegKeySect::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 2130706432u) {
    ::memset(&uin_, 0, reinterpret_cast<char*>(&profileflag_) -
      reinterpret_cast<char*>(&uin_) + sizeof(profileflag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NewRegResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.NewRegResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Uin = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_uin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string SessionKey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionkey().data(), this->sessionkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewRegResponse.SessionKey");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string OfficialUserName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_officialusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->officialusername().data(), this->officialusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewRegResponse.OfficialUserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string OfficialNickName = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_officialnickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->officialnickname().data(), this->officialnickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewRegResponse.OfficialNickName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string QQMicroBlogUserName = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qqmicroblogusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->qqmicroblogusername().data(), this->qqmicroblogusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewRegResponse.QQMicroBlogUserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string BindEmail = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bindemail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bindemail().data(), this->bindemail().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewRegResponse.BindEmail");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 PushMailStatus = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_pushmailstatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pushmailstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 SendCardBitFlag = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_sendcardbitflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sendcardbitflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PushMailSettingTicket = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pushmailsettingticket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pushmailsettingticket().data(), this->pushmailsettingticket().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewRegResponse.PushMailSettingTicket");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.BuiltinIPList BuiltinIPList = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_builtiniplist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FSURL = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fsurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fsurl().data(), this->fsurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewRegResponse.FSURL");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string UserName = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewRegResponse.UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Status = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.NetworkControl NetworkControl = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_networkcontrol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ReturnFlag = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_returnflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &returnflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 RegType = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_regtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &regtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AuthKey = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->authkey().data(), this->authkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewRegResponse.AuthKey");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.PluginKeyList PluginKeyList = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pluginkeylist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Password = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewRegResponse.Password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ProfileFlag = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          set_has_profileflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &profileflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.HostList NewHostList = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newhostlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AutoAuthTicket = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_autoauthticket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->autoauthticket().data(), this->autoauthticket().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewRegResponse.AutoAuthTicket");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.CDNDnsInfo DnsInfo = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dnsinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string StepTicket = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stepticket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stepticket().data(), this->stepticket().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewRegResponse.StepTicket");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string VerifySignature = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verifysignature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->verifysignature().data(), this->verifysignature().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewRegResponse.VerifySignature");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t VerifyBuff = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_verifybuff()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.ShowStyleKey ShowStyle = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_showstyle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.CDNDnsInfo SnsDnsInfo = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(258u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_snsdnsinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.CDNDnsInfo AppDnsInfo = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(266u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_appdnsinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SecAuthRegKeySect SecAuthRegKeySect = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(274u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_secauthregkeysect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.NewRegResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.NewRegResponse)
  return false;
#undef DO_
}

void NewRegResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.NewRegResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 Uin = 2;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uin(), output);
  }

  // optional string SessionKey = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionkey().data(), this->sessionkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegResponse.SessionKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sessionkey(), output);
  }

  // optional string OfficialUserName = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->officialusername().data(), this->officialusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegResponse.OfficialUserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->officialusername(), output);
  }

  // optional string OfficialNickName = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->officialnickname().data(), this->officialnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegResponse.OfficialNickName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->officialnickname(), output);
  }

  // optional string QQMicroBlogUserName = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qqmicroblogusername().data(), this->qqmicroblogusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegResponse.QQMicroBlogUserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->qqmicroblogusername(), output);
  }

  // optional string BindEmail = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bindemail().data(), this->bindemail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegResponse.BindEmail");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->bindemail(), output);
  }

  // required uint32 PushMailStatus = 8;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->pushmailstatus(), output);
  }

  // optional uint32 SendCardBitFlag = 9;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->sendcardbitflag(), output);
  }

  // optional string PushMailSettingTicket = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pushmailsettingticket().data(), this->pushmailsettingticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegResponse.PushMailSettingTicket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->pushmailsettingticket(), output);
  }

  // optional .micromsg.BuiltinIPList BuiltinIPList = 14;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->builtiniplist_, output);
  }

  // optional string FSURL = 15;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fsurl().data(), this->fsurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegResponse.FSURL");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->fsurl(), output);
  }

  // optional string UserName = 16;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegResponse.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->username(), output);
  }

  // optional uint32 Status = 17;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->status(), output);
  }

  // optional .micromsg.NetworkControl NetworkControl = 18;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->networkcontrol_, output);
  }

  // optional uint32 ReturnFlag = 19;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->returnflag(), output);
  }

  // optional uint32 RegType = 20;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->regtype(), output);
  }

  // optional string AuthKey = 21;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authkey().data(), this->authkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegResponse.AuthKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->authkey(), output);
  }

  // optional .micromsg.PluginKeyList PluginKeyList = 22;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->pluginkeylist_, output);
  }

  // optional string Password = 23;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegResponse.Password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->password(), output);
  }

  // optional uint32 ProfileFlag = 24;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->profileflag(), output);
  }

  // optional .micromsg.HostList NewHostList = 25;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, *this->newhostlist_, output);
  }

  // optional string AutoAuthTicket = 26;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->autoauthticket().data(), this->autoauthticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegResponse.AutoAuthTicket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->autoauthticket(), output);
  }

  // optional .micromsg.CDNDnsInfo DnsInfo = 27;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, *this->dnsinfo_, output);
  }

  // optional string StepTicket = 28;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stepticket().data(), this->stepticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegResponse.StepTicket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      28, this->stepticket(), output);
  }

  // optional string VerifySignature = 29;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verifysignature().data(), this->verifysignature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegResponse.VerifySignature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->verifysignature(), output);
  }

  // optional .micromsg.SKBuiltinBuffer_t VerifyBuff = 30;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *this->verifybuff_, output);
  }

  // optional .micromsg.ShowStyleKey ShowStyle = 31;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, *this->showstyle_, output);
  }

  // optional .micromsg.CDNDnsInfo SnsDnsInfo = 32;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, *this->snsdnsinfo_, output);
  }

  // optional .micromsg.CDNDnsInfo AppDnsInfo = 33;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, *this->appdnsinfo_, output);
  }

  // optional .micromsg.SecAuthRegKeySect SecAuthRegKeySect = 34;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, *this->secauthregkeysect_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.NewRegResponse)
}

::google::protobuf::uint8* NewRegResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.NewRegResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 Uin = 2;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uin(), target);
  }

  // optional string SessionKey = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionkey().data(), this->sessionkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegResponse.SessionKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sessionkey(), target);
  }

  // optional string OfficialUserName = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->officialusername().data(), this->officialusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegResponse.OfficialUserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->officialusername(), target);
  }

  // optional string OfficialNickName = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->officialnickname().data(), this->officialnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegResponse.OfficialNickName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->officialnickname(), target);
  }

  // optional string QQMicroBlogUserName = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qqmicroblogusername().data(), this->qqmicroblogusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegResponse.QQMicroBlogUserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->qqmicroblogusername(), target);
  }

  // optional string BindEmail = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bindemail().data(), this->bindemail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegResponse.BindEmail");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->bindemail(), target);
  }

  // required uint32 PushMailStatus = 8;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->pushmailstatus(), target);
  }

  // optional uint32 SendCardBitFlag = 9;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->sendcardbitflag(), target);
  }

  // optional string PushMailSettingTicket = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pushmailsettingticket().data(), this->pushmailsettingticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegResponse.PushMailSettingTicket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->pushmailsettingticket(), target);
  }

  // optional .micromsg.BuiltinIPList BuiltinIPList = 14;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->builtiniplist_, deterministic, target);
  }

  // optional string FSURL = 15;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fsurl().data(), this->fsurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegResponse.FSURL");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->fsurl(), target);
  }

  // optional string UserName = 16;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegResponse.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->username(), target);
  }

  // optional uint32 Status = 17;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->status(), target);
  }

  // optional .micromsg.NetworkControl NetworkControl = 18;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->networkcontrol_, deterministic, target);
  }

  // optional uint32 ReturnFlag = 19;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->returnflag(), target);
  }

  // optional uint32 RegType = 20;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->regtype(), target);
  }

  // optional string AuthKey = 21;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authkey().data(), this->authkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegResponse.AuthKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->authkey(), target);
  }

  // optional .micromsg.PluginKeyList PluginKeyList = 22;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *this->pluginkeylist_, deterministic, target);
  }

  // optional string Password = 23;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegResponse.Password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->password(), target);
  }

  // optional uint32 ProfileFlag = 24;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->profileflag(), target);
  }

  // optional .micromsg.HostList NewHostList = 25;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        25, *this->newhostlist_, deterministic, target);
  }

  // optional string AutoAuthTicket = 26;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->autoauthticket().data(), this->autoauthticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegResponse.AutoAuthTicket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->autoauthticket(), target);
  }

  // optional .micromsg.CDNDnsInfo DnsInfo = 27;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        27, *this->dnsinfo_, deterministic, target);
  }

  // optional string StepTicket = 28;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stepticket().data(), this->stepticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegResponse.StepTicket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->stepticket(), target);
  }

  // optional string VerifySignature = 29;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verifysignature().data(), this->verifysignature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewRegResponse.VerifySignature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->verifysignature(), target);
  }

  // optional .micromsg.SKBuiltinBuffer_t VerifyBuff = 30;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        30, *this->verifybuff_, deterministic, target);
  }

  // optional .micromsg.ShowStyleKey ShowStyle = 31;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        31, *this->showstyle_, deterministic, target);
  }

  // optional .micromsg.CDNDnsInfo SnsDnsInfo = 32;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        32, *this->snsdnsinfo_, deterministic, target);
  }

  // optional .micromsg.CDNDnsInfo AppDnsInfo = 33;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        33, *this->appdnsinfo_, deterministic, target);
  }

  // optional .micromsg.SecAuthRegKeySect SecAuthRegKeySect = 34;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        34, *this->secauthregkeysect_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.NewRegResponse)
  return target;
}

size_t NewRegResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.NewRegResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_uin()) {
    // required uint32 Uin = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uin());
  }

  if (has_pushmailstatus()) {
    // required uint32 PushMailStatus = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pushmailstatus());
  }

  return total_size;
}
size_t NewRegResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.NewRegResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x03002000) ^ 0x03002000) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 Uin = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uin());

    // required uint32 PushMailStatus = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pushmailstatus());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string SessionKey = 3;
    if (has_sessionkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sessionkey());
    }

    // optional string OfficialUserName = 4;
    if (has_officialusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->officialusername());
    }

    // optional string OfficialNickName = 5;
    if (has_officialnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->officialnickname());
    }

    // optional string QQMicroBlogUserName = 6;
    if (has_qqmicroblogusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qqmicroblogusername());
    }

    // optional string BindEmail = 7;
    if (has_bindemail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bindemail());
    }

    // optional string PushMailSettingTicket = 10;
    if (has_pushmailsettingticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pushmailsettingticket());
    }

    // optional string FSURL = 15;
    if (has_fsurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fsurl());
    }

    // optional string UserName = 16;
    if (has_username()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional string AuthKey = 21;
    if (has_authkey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authkey());
    }

    // optional string Password = 23;
    if (has_password()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string AutoAuthTicket = 26;
    if (has_autoauthticket()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->autoauthticket());
    }

    // optional string StepTicket = 28;
    if (has_stepticket()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stepticket());
    }

    // optional string VerifySignature = 29;
    if (has_verifysignature()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verifysignature());
    }

  }
  if (_has_bits_[8 / 32] & 49152u) {
    // optional .micromsg.BuiltinIPList BuiltinIPList = 14;
    if (has_builtiniplist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->builtiniplist_);
    }

    // optional .micromsg.NetworkControl NetworkControl = 18;
    if (has_networkcontrol()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->networkcontrol_);
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional .micromsg.PluginKeyList PluginKeyList = 22;
    if (has_pluginkeylist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pluginkeylist_);
    }

    // optional .micromsg.HostList NewHostList = 25;
    if (has_newhostlist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->newhostlist_);
    }

    // optional .micromsg.CDNDnsInfo DnsInfo = 27;
    if (has_dnsinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dnsinfo_);
    }

    // optional .micromsg.SKBuiltinBuffer_t VerifyBuff = 30;
    if (has_verifybuff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->verifybuff_);
    }

    // optional .micromsg.ShowStyleKey ShowStyle = 31;
    if (has_showstyle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->showstyle_);
    }

    // optional .micromsg.CDNDnsInfo SnsDnsInfo = 32;
    if (has_snsdnsinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->snsdnsinfo_);
    }

    // optional .micromsg.CDNDnsInfo AppDnsInfo = 33;
    if (has_appdnsinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->appdnsinfo_);
    }

    // optional .micromsg.SecAuthRegKeySect SecAuthRegKeySect = 34;
    if (has_secauthregkeysect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->secauthregkeysect_);
    }

  }
  if (_has_bits_[24 / 32] & 2080374784u) {
    // optional uint32 SendCardBitFlag = 9;
    if (has_sendcardbitflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sendcardbitflag());
    }

    // optional uint32 Status = 17;
    if (has_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint32 ReturnFlag = 19;
    if (has_returnflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->returnflag());
    }

    // optional uint32 RegType = 20;
    if (has_regtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->regtype());
    }

    // optional uint32 ProfileFlag = 24;
    if (has_profileflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->profileflag());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewRegResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.NewRegResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NewRegResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NewRegResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.NewRegResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.NewRegResponse)
    MergeFrom(*source);
  }
}

void NewRegResponse::MergeFrom(const NewRegResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.NewRegResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sessionkey();
      sessionkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionkey_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_officialusername();
      officialusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.officialusername_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_officialnickname();
      officialnickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.officialnickname_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_qqmicroblogusername();
      qqmicroblogusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qqmicroblogusername_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_bindemail();
      bindemail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bindemail_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_pushmailsettingticket();
      pushmailsettingticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pushmailsettingticket_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_fsurl();
      fsurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fsurl_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_authkey();
      authkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authkey_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_autoauthticket();
      autoauthticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.autoauthticket_);
    }
    if (cached_has_bits & 0x00000800u) {
      set_has_stepticket();
      stepticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stepticket_);
    }
    if (cached_has_bits & 0x00001000u) {
      set_has_verifysignature();
      verifysignature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifysignature_);
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_builtiniplist()->::micromsg::BuiltinIPList::MergeFrom(from.builtiniplist());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_networkcontrol()->::micromsg::NetworkControl::MergeFrom(from.networkcontrol());
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_pluginkeylist()->::micromsg::PluginKeyList::MergeFrom(from.pluginkeylist());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_newhostlist()->::micromsg::HostList::MergeFrom(from.newhostlist());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_dnsinfo()->::micromsg::CDNDnsInfo::MergeFrom(from.dnsinfo());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_verifybuff()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.verifybuff());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_showstyle()->::micromsg::ShowStyleKey::MergeFrom(from.showstyle());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_snsdnsinfo()->::micromsg::CDNDnsInfo::MergeFrom(from.snsdnsinfo());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_appdnsinfo()->::micromsg::CDNDnsInfo::MergeFrom(from.appdnsinfo());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_secauthregkeysect()->::micromsg::SecAuthRegKeySect::MergeFrom(from.secauthregkeysect());
    }
  }
  if (cached_has_bits & 2130706432u) {
    if (cached_has_bits & 0x01000000u) {
      uin_ = from.uin_;
    }
    if (cached_has_bits & 0x02000000u) {
      pushmailstatus_ = from.pushmailstatus_;
    }
    if (cached_has_bits & 0x04000000u) {
      sendcardbitflag_ = from.sendcardbitflag_;
    }
    if (cached_has_bits & 0x08000000u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x10000000u) {
      returnflag_ = from.returnflag_;
    }
    if (cached_has_bits & 0x20000000u) {
      regtype_ = from.regtype_;
    }
    if (cached_has_bits & 0x40000000u) {
      profileflag_ = from.profileflag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NewRegResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.NewRegResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewRegResponse::CopyFrom(const NewRegResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.NewRegResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewRegResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x03002000) != 0x03002000) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_builtiniplist()) {
    if (!this->builtiniplist_->IsInitialized()) return false;
  }
  if (has_pluginkeylist()) {
    if (!this->pluginkeylist_->IsInitialized()) return false;
  }
  if (has_newhostlist()) {
    if (!this->newhostlist_->IsInitialized()) return false;
  }
  if (has_dnsinfo()) {
    if (!this->dnsinfo_->IsInitialized()) return false;
  }
  if (has_verifybuff()) {
    if (!this->verifybuff_->IsInitialized()) return false;
  }
  if (has_showstyle()) {
    if (!this->showstyle_->IsInitialized()) return false;
  }
  if (has_snsdnsinfo()) {
    if (!this->snsdnsinfo_->IsInitialized()) return false;
  }
  if (has_appdnsinfo()) {
    if (!this->appdnsinfo_->IsInitialized()) return false;
  }
  if (has_secauthregkeysect()) {
    if (!this->secauthregkeysect_->IsInitialized()) return false;
  }
  return true;
}

void NewRegResponse::Swap(NewRegResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewRegResponse::InternalSwap(NewRegResponse* other) {
  sessionkey_.Swap(&other->sessionkey_);
  officialusername_.Swap(&other->officialusername_);
  officialnickname_.Swap(&other->officialnickname_);
  qqmicroblogusername_.Swap(&other->qqmicroblogusername_);
  bindemail_.Swap(&other->bindemail_);
  pushmailsettingticket_.Swap(&other->pushmailsettingticket_);
  fsurl_.Swap(&other->fsurl_);
  username_.Swap(&other->username_);
  authkey_.Swap(&other->authkey_);
  password_.Swap(&other->password_);
  autoauthticket_.Swap(&other->autoauthticket_);
  stepticket_.Swap(&other->stepticket_);
  verifysignature_.Swap(&other->verifysignature_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(builtiniplist_, other->builtiniplist_);
  std::swap(networkcontrol_, other->networkcontrol_);
  std::swap(pluginkeylist_, other->pluginkeylist_);
  std::swap(newhostlist_, other->newhostlist_);
  std::swap(dnsinfo_, other->dnsinfo_);
  std::swap(verifybuff_, other->verifybuff_);
  std::swap(showstyle_, other->showstyle_);
  std::swap(snsdnsinfo_, other->snsdnsinfo_);
  std::swap(appdnsinfo_, other->appdnsinfo_);
  std::swap(secauthregkeysect_, other->secauthregkeysect_);
  std::swap(uin_, other->uin_);
  std::swap(pushmailstatus_, other->pushmailstatus_);
  std::swap(sendcardbitflag_, other->sendcardbitflag_);
  std::swap(status_, other->status_);
  std::swap(returnflag_, other->returnflag_);
  std::swap(regtype_, other->regtype_);
  std::swap(profileflag_, other->profileflag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NewRegResponse::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NewRegResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool NewRegResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void NewRegResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00002000u;
}
void NewRegResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00002000u;
}
void NewRegResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& NewRegResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* NewRegResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewRegResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* NewRegResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.NewRegResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void NewRegResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewRegResponse.BaseResponse)
}

// required uint32 Uin = 2;
bool NewRegResponse::has_uin() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void NewRegResponse::set_has_uin() {
  _has_bits_[0] |= 0x01000000u;
}
void NewRegResponse::clear_has_uin() {
  _has_bits_[0] &= ~0x01000000u;
}
void NewRegResponse::clear_uin() {
  uin_ = 0u;
  clear_has_uin();
}
::google::protobuf::uint32 NewRegResponse::uin() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegResponse.Uin)
  return uin_;
}
void NewRegResponse::set_uin(::google::protobuf::uint32 value) {
  set_has_uin();
  uin_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewRegResponse.Uin)
}

// optional string SessionKey = 3;
bool NewRegResponse::has_sessionkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NewRegResponse::set_has_sessionkey() {
  _has_bits_[0] |= 0x00000001u;
}
void NewRegResponse::clear_has_sessionkey() {
  _has_bits_[0] &= ~0x00000001u;
}
void NewRegResponse::clear_sessionkey() {
  sessionkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionkey();
}
const ::std::string& NewRegResponse::sessionkey() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegResponse.SessionKey)
  return sessionkey_.GetNoArena();
}
void NewRegResponse::set_sessionkey(const ::std::string& value) {
  set_has_sessionkey();
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewRegResponse.SessionKey)
}
#if LANG_CXX11
void NewRegResponse::set_sessionkey(::std::string&& value) {
  set_has_sessionkey();
  sessionkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewRegResponse.SessionKey)
}
#endif
void NewRegResponse::set_sessionkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionkey();
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewRegResponse.SessionKey)
}
void NewRegResponse::set_sessionkey(const char* value, size_t size) {
  set_has_sessionkey();
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewRegResponse.SessionKey)
}
::std::string* NewRegResponse::mutable_sessionkey() {
  set_has_sessionkey();
  // @@protoc_insertion_point(field_mutable:micromsg.NewRegResponse.SessionKey)
  return sessionkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewRegResponse::release_sessionkey() {
  // @@protoc_insertion_point(field_release:micromsg.NewRegResponse.SessionKey)
  clear_has_sessionkey();
  return sessionkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewRegResponse::set_allocated_sessionkey(::std::string* sessionkey) {
  if (sessionkey != NULL) {
    set_has_sessionkey();
  } else {
    clear_has_sessionkey();
  }
  sessionkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionkey);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewRegResponse.SessionKey)
}

// optional string OfficialUserName = 4;
bool NewRegResponse::has_officialusername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NewRegResponse::set_has_officialusername() {
  _has_bits_[0] |= 0x00000002u;
}
void NewRegResponse::clear_has_officialusername() {
  _has_bits_[0] &= ~0x00000002u;
}
void NewRegResponse::clear_officialusername() {
  officialusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_officialusername();
}
const ::std::string& NewRegResponse::officialusername() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegResponse.OfficialUserName)
  return officialusername_.GetNoArena();
}
void NewRegResponse::set_officialusername(const ::std::string& value) {
  set_has_officialusername();
  officialusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewRegResponse.OfficialUserName)
}
#if LANG_CXX11
void NewRegResponse::set_officialusername(::std::string&& value) {
  set_has_officialusername();
  officialusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewRegResponse.OfficialUserName)
}
#endif
void NewRegResponse::set_officialusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_officialusername();
  officialusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewRegResponse.OfficialUserName)
}
void NewRegResponse::set_officialusername(const char* value, size_t size) {
  set_has_officialusername();
  officialusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewRegResponse.OfficialUserName)
}
::std::string* NewRegResponse::mutable_officialusername() {
  set_has_officialusername();
  // @@protoc_insertion_point(field_mutable:micromsg.NewRegResponse.OfficialUserName)
  return officialusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewRegResponse::release_officialusername() {
  // @@protoc_insertion_point(field_release:micromsg.NewRegResponse.OfficialUserName)
  clear_has_officialusername();
  return officialusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewRegResponse::set_allocated_officialusername(::std::string* officialusername) {
  if (officialusername != NULL) {
    set_has_officialusername();
  } else {
    clear_has_officialusername();
  }
  officialusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), officialusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewRegResponse.OfficialUserName)
}

// optional string OfficialNickName = 5;
bool NewRegResponse::has_officialnickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NewRegResponse::set_has_officialnickname() {
  _has_bits_[0] |= 0x00000004u;
}
void NewRegResponse::clear_has_officialnickname() {
  _has_bits_[0] &= ~0x00000004u;
}
void NewRegResponse::clear_officialnickname() {
  officialnickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_officialnickname();
}
const ::std::string& NewRegResponse::officialnickname() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegResponse.OfficialNickName)
  return officialnickname_.GetNoArena();
}
void NewRegResponse::set_officialnickname(const ::std::string& value) {
  set_has_officialnickname();
  officialnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewRegResponse.OfficialNickName)
}
#if LANG_CXX11
void NewRegResponse::set_officialnickname(::std::string&& value) {
  set_has_officialnickname();
  officialnickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewRegResponse.OfficialNickName)
}
#endif
void NewRegResponse::set_officialnickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_officialnickname();
  officialnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewRegResponse.OfficialNickName)
}
void NewRegResponse::set_officialnickname(const char* value, size_t size) {
  set_has_officialnickname();
  officialnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewRegResponse.OfficialNickName)
}
::std::string* NewRegResponse::mutable_officialnickname() {
  set_has_officialnickname();
  // @@protoc_insertion_point(field_mutable:micromsg.NewRegResponse.OfficialNickName)
  return officialnickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewRegResponse::release_officialnickname() {
  // @@protoc_insertion_point(field_release:micromsg.NewRegResponse.OfficialNickName)
  clear_has_officialnickname();
  return officialnickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewRegResponse::set_allocated_officialnickname(::std::string* officialnickname) {
  if (officialnickname != NULL) {
    set_has_officialnickname();
  } else {
    clear_has_officialnickname();
  }
  officialnickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), officialnickname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewRegResponse.OfficialNickName)
}

// optional string QQMicroBlogUserName = 6;
bool NewRegResponse::has_qqmicroblogusername() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NewRegResponse::set_has_qqmicroblogusername() {
  _has_bits_[0] |= 0x00000008u;
}
void NewRegResponse::clear_has_qqmicroblogusername() {
  _has_bits_[0] &= ~0x00000008u;
}
void NewRegResponse::clear_qqmicroblogusername() {
  qqmicroblogusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_qqmicroblogusername();
}
const ::std::string& NewRegResponse::qqmicroblogusername() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegResponse.QQMicroBlogUserName)
  return qqmicroblogusername_.GetNoArena();
}
void NewRegResponse::set_qqmicroblogusername(const ::std::string& value) {
  set_has_qqmicroblogusername();
  qqmicroblogusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewRegResponse.QQMicroBlogUserName)
}
#if LANG_CXX11
void NewRegResponse::set_qqmicroblogusername(::std::string&& value) {
  set_has_qqmicroblogusername();
  qqmicroblogusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewRegResponse.QQMicroBlogUserName)
}
#endif
void NewRegResponse::set_qqmicroblogusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_qqmicroblogusername();
  qqmicroblogusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewRegResponse.QQMicroBlogUserName)
}
void NewRegResponse::set_qqmicroblogusername(const char* value, size_t size) {
  set_has_qqmicroblogusername();
  qqmicroblogusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewRegResponse.QQMicroBlogUserName)
}
::std::string* NewRegResponse::mutable_qqmicroblogusername() {
  set_has_qqmicroblogusername();
  // @@protoc_insertion_point(field_mutable:micromsg.NewRegResponse.QQMicroBlogUserName)
  return qqmicroblogusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewRegResponse::release_qqmicroblogusername() {
  // @@protoc_insertion_point(field_release:micromsg.NewRegResponse.QQMicroBlogUserName)
  clear_has_qqmicroblogusername();
  return qqmicroblogusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewRegResponse::set_allocated_qqmicroblogusername(::std::string* qqmicroblogusername) {
  if (qqmicroblogusername != NULL) {
    set_has_qqmicroblogusername();
  } else {
    clear_has_qqmicroblogusername();
  }
  qqmicroblogusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qqmicroblogusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewRegResponse.QQMicroBlogUserName)
}

// optional string BindEmail = 7;
bool NewRegResponse::has_bindemail() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NewRegResponse::set_has_bindemail() {
  _has_bits_[0] |= 0x00000010u;
}
void NewRegResponse::clear_has_bindemail() {
  _has_bits_[0] &= ~0x00000010u;
}
void NewRegResponse::clear_bindemail() {
  bindemail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bindemail();
}
const ::std::string& NewRegResponse::bindemail() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegResponse.BindEmail)
  return bindemail_.GetNoArena();
}
void NewRegResponse::set_bindemail(const ::std::string& value) {
  set_has_bindemail();
  bindemail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewRegResponse.BindEmail)
}
#if LANG_CXX11
void NewRegResponse::set_bindemail(::std::string&& value) {
  set_has_bindemail();
  bindemail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewRegResponse.BindEmail)
}
#endif
void NewRegResponse::set_bindemail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bindemail();
  bindemail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewRegResponse.BindEmail)
}
void NewRegResponse::set_bindemail(const char* value, size_t size) {
  set_has_bindemail();
  bindemail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewRegResponse.BindEmail)
}
::std::string* NewRegResponse::mutable_bindemail() {
  set_has_bindemail();
  // @@protoc_insertion_point(field_mutable:micromsg.NewRegResponse.BindEmail)
  return bindemail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewRegResponse::release_bindemail() {
  // @@protoc_insertion_point(field_release:micromsg.NewRegResponse.BindEmail)
  clear_has_bindemail();
  return bindemail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewRegResponse::set_allocated_bindemail(::std::string* bindemail) {
  if (bindemail != NULL) {
    set_has_bindemail();
  } else {
    clear_has_bindemail();
  }
  bindemail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bindemail);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewRegResponse.BindEmail)
}

// required uint32 PushMailStatus = 8;
bool NewRegResponse::has_pushmailstatus() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void NewRegResponse::set_has_pushmailstatus() {
  _has_bits_[0] |= 0x02000000u;
}
void NewRegResponse::clear_has_pushmailstatus() {
  _has_bits_[0] &= ~0x02000000u;
}
void NewRegResponse::clear_pushmailstatus() {
  pushmailstatus_ = 0u;
  clear_has_pushmailstatus();
}
::google::protobuf::uint32 NewRegResponse::pushmailstatus() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegResponse.PushMailStatus)
  return pushmailstatus_;
}
void NewRegResponse::set_pushmailstatus(::google::protobuf::uint32 value) {
  set_has_pushmailstatus();
  pushmailstatus_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewRegResponse.PushMailStatus)
}

// optional uint32 SendCardBitFlag = 9;
bool NewRegResponse::has_sendcardbitflag() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void NewRegResponse::set_has_sendcardbitflag() {
  _has_bits_[0] |= 0x04000000u;
}
void NewRegResponse::clear_has_sendcardbitflag() {
  _has_bits_[0] &= ~0x04000000u;
}
void NewRegResponse::clear_sendcardbitflag() {
  sendcardbitflag_ = 0u;
  clear_has_sendcardbitflag();
}
::google::protobuf::uint32 NewRegResponse::sendcardbitflag() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegResponse.SendCardBitFlag)
  return sendcardbitflag_;
}
void NewRegResponse::set_sendcardbitflag(::google::protobuf::uint32 value) {
  set_has_sendcardbitflag();
  sendcardbitflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewRegResponse.SendCardBitFlag)
}

// optional string PushMailSettingTicket = 10;
bool NewRegResponse::has_pushmailsettingticket() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void NewRegResponse::set_has_pushmailsettingticket() {
  _has_bits_[0] |= 0x00000020u;
}
void NewRegResponse::clear_has_pushmailsettingticket() {
  _has_bits_[0] &= ~0x00000020u;
}
void NewRegResponse::clear_pushmailsettingticket() {
  pushmailsettingticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pushmailsettingticket();
}
const ::std::string& NewRegResponse::pushmailsettingticket() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegResponse.PushMailSettingTicket)
  return pushmailsettingticket_.GetNoArena();
}
void NewRegResponse::set_pushmailsettingticket(const ::std::string& value) {
  set_has_pushmailsettingticket();
  pushmailsettingticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewRegResponse.PushMailSettingTicket)
}
#if LANG_CXX11
void NewRegResponse::set_pushmailsettingticket(::std::string&& value) {
  set_has_pushmailsettingticket();
  pushmailsettingticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewRegResponse.PushMailSettingTicket)
}
#endif
void NewRegResponse::set_pushmailsettingticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pushmailsettingticket();
  pushmailsettingticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewRegResponse.PushMailSettingTicket)
}
void NewRegResponse::set_pushmailsettingticket(const char* value, size_t size) {
  set_has_pushmailsettingticket();
  pushmailsettingticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewRegResponse.PushMailSettingTicket)
}
::std::string* NewRegResponse::mutable_pushmailsettingticket() {
  set_has_pushmailsettingticket();
  // @@protoc_insertion_point(field_mutable:micromsg.NewRegResponse.PushMailSettingTicket)
  return pushmailsettingticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewRegResponse::release_pushmailsettingticket() {
  // @@protoc_insertion_point(field_release:micromsg.NewRegResponse.PushMailSettingTicket)
  clear_has_pushmailsettingticket();
  return pushmailsettingticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewRegResponse::set_allocated_pushmailsettingticket(::std::string* pushmailsettingticket) {
  if (pushmailsettingticket != NULL) {
    set_has_pushmailsettingticket();
  } else {
    clear_has_pushmailsettingticket();
  }
  pushmailsettingticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pushmailsettingticket);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewRegResponse.PushMailSettingTicket)
}

// optional .micromsg.BuiltinIPList BuiltinIPList = 14;
bool NewRegResponse::has_builtiniplist() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void NewRegResponse::set_has_builtiniplist() {
  _has_bits_[0] |= 0x00004000u;
}
void NewRegResponse::clear_has_builtiniplist() {
  _has_bits_[0] &= ~0x00004000u;
}
void NewRegResponse::clear_builtiniplist() {
  if (builtiniplist_ != NULL) builtiniplist_->::micromsg::BuiltinIPList::Clear();
  clear_has_builtiniplist();
}
const ::micromsg::BuiltinIPList& NewRegResponse::builtiniplist() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegResponse.BuiltinIPList)
  return builtiniplist_ != NULL ? *builtiniplist_
                         : *::micromsg::BuiltinIPList::internal_default_instance();
}
::micromsg::BuiltinIPList* NewRegResponse::mutable_builtiniplist() {
  set_has_builtiniplist();
  if (builtiniplist_ == NULL) {
    builtiniplist_ = new ::micromsg::BuiltinIPList;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewRegResponse.BuiltinIPList)
  return builtiniplist_;
}
::micromsg::BuiltinIPList* NewRegResponse::release_builtiniplist() {
  // @@protoc_insertion_point(field_release:micromsg.NewRegResponse.BuiltinIPList)
  clear_has_builtiniplist();
  ::micromsg::BuiltinIPList* temp = builtiniplist_;
  builtiniplist_ = NULL;
  return temp;
}
void NewRegResponse::set_allocated_builtiniplist(::micromsg::BuiltinIPList* builtiniplist) {
  delete builtiniplist_;
  builtiniplist_ = builtiniplist;
  if (builtiniplist) {
    set_has_builtiniplist();
  } else {
    clear_has_builtiniplist();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewRegResponse.BuiltinIPList)
}

// optional string FSURL = 15;
bool NewRegResponse::has_fsurl() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void NewRegResponse::set_has_fsurl() {
  _has_bits_[0] |= 0x00000040u;
}
void NewRegResponse::clear_has_fsurl() {
  _has_bits_[0] &= ~0x00000040u;
}
void NewRegResponse::clear_fsurl() {
  fsurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fsurl();
}
const ::std::string& NewRegResponse::fsurl() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegResponse.FSURL)
  return fsurl_.GetNoArena();
}
void NewRegResponse::set_fsurl(const ::std::string& value) {
  set_has_fsurl();
  fsurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewRegResponse.FSURL)
}
#if LANG_CXX11
void NewRegResponse::set_fsurl(::std::string&& value) {
  set_has_fsurl();
  fsurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewRegResponse.FSURL)
}
#endif
void NewRegResponse::set_fsurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fsurl();
  fsurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewRegResponse.FSURL)
}
void NewRegResponse::set_fsurl(const char* value, size_t size) {
  set_has_fsurl();
  fsurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewRegResponse.FSURL)
}
::std::string* NewRegResponse::mutable_fsurl() {
  set_has_fsurl();
  // @@protoc_insertion_point(field_mutable:micromsg.NewRegResponse.FSURL)
  return fsurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewRegResponse::release_fsurl() {
  // @@protoc_insertion_point(field_release:micromsg.NewRegResponse.FSURL)
  clear_has_fsurl();
  return fsurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewRegResponse::set_allocated_fsurl(::std::string* fsurl) {
  if (fsurl != NULL) {
    set_has_fsurl();
  } else {
    clear_has_fsurl();
  }
  fsurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fsurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewRegResponse.FSURL)
}

// optional string UserName = 16;
bool NewRegResponse::has_username() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void NewRegResponse::set_has_username() {
  _has_bits_[0] |= 0x00000080u;
}
void NewRegResponse::clear_has_username() {
  _has_bits_[0] &= ~0x00000080u;
}
void NewRegResponse::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& NewRegResponse::username() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegResponse.UserName)
  return username_.GetNoArena();
}
void NewRegResponse::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewRegResponse.UserName)
}
#if LANG_CXX11
void NewRegResponse::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewRegResponse.UserName)
}
#endif
void NewRegResponse::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewRegResponse.UserName)
}
void NewRegResponse::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewRegResponse.UserName)
}
::std::string* NewRegResponse::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.NewRegResponse.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewRegResponse::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.NewRegResponse.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewRegResponse::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewRegResponse.UserName)
}

// optional uint32 Status = 17;
bool NewRegResponse::has_status() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void NewRegResponse::set_has_status() {
  _has_bits_[0] |= 0x08000000u;
}
void NewRegResponse::clear_has_status() {
  _has_bits_[0] &= ~0x08000000u;
}
void NewRegResponse::clear_status() {
  status_ = 0u;
  clear_has_status();
}
::google::protobuf::uint32 NewRegResponse::status() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegResponse.Status)
  return status_;
}
void NewRegResponse::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewRegResponse.Status)
}

// optional .micromsg.NetworkControl NetworkControl = 18;
bool NewRegResponse::has_networkcontrol() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void NewRegResponse::set_has_networkcontrol() {
  _has_bits_[0] |= 0x00008000u;
}
void NewRegResponse::clear_has_networkcontrol() {
  _has_bits_[0] &= ~0x00008000u;
}
void NewRegResponse::clear_networkcontrol() {
  if (networkcontrol_ != NULL) networkcontrol_->::micromsg::NetworkControl::Clear();
  clear_has_networkcontrol();
}
const ::micromsg::NetworkControl& NewRegResponse::networkcontrol() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegResponse.NetworkControl)
  return networkcontrol_ != NULL ? *networkcontrol_
                         : *::micromsg::NetworkControl::internal_default_instance();
}
::micromsg::NetworkControl* NewRegResponse::mutable_networkcontrol() {
  set_has_networkcontrol();
  if (networkcontrol_ == NULL) {
    networkcontrol_ = new ::micromsg::NetworkControl;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewRegResponse.NetworkControl)
  return networkcontrol_;
}
::micromsg::NetworkControl* NewRegResponse::release_networkcontrol() {
  // @@protoc_insertion_point(field_release:micromsg.NewRegResponse.NetworkControl)
  clear_has_networkcontrol();
  ::micromsg::NetworkControl* temp = networkcontrol_;
  networkcontrol_ = NULL;
  return temp;
}
void NewRegResponse::set_allocated_networkcontrol(::micromsg::NetworkControl* networkcontrol) {
  delete networkcontrol_;
  networkcontrol_ = networkcontrol;
  if (networkcontrol) {
    set_has_networkcontrol();
  } else {
    clear_has_networkcontrol();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewRegResponse.NetworkControl)
}

// optional uint32 ReturnFlag = 19;
bool NewRegResponse::has_returnflag() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void NewRegResponse::set_has_returnflag() {
  _has_bits_[0] |= 0x10000000u;
}
void NewRegResponse::clear_has_returnflag() {
  _has_bits_[0] &= ~0x10000000u;
}
void NewRegResponse::clear_returnflag() {
  returnflag_ = 0u;
  clear_has_returnflag();
}
::google::protobuf::uint32 NewRegResponse::returnflag() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegResponse.ReturnFlag)
  return returnflag_;
}
void NewRegResponse::set_returnflag(::google::protobuf::uint32 value) {
  set_has_returnflag();
  returnflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewRegResponse.ReturnFlag)
}

// optional uint32 RegType = 20;
bool NewRegResponse::has_regtype() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void NewRegResponse::set_has_regtype() {
  _has_bits_[0] |= 0x20000000u;
}
void NewRegResponse::clear_has_regtype() {
  _has_bits_[0] &= ~0x20000000u;
}
void NewRegResponse::clear_regtype() {
  regtype_ = 0u;
  clear_has_regtype();
}
::google::protobuf::uint32 NewRegResponse::regtype() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegResponse.RegType)
  return regtype_;
}
void NewRegResponse::set_regtype(::google::protobuf::uint32 value) {
  set_has_regtype();
  regtype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewRegResponse.RegType)
}

// optional string AuthKey = 21;
bool NewRegResponse::has_authkey() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void NewRegResponse::set_has_authkey() {
  _has_bits_[0] |= 0x00000100u;
}
void NewRegResponse::clear_has_authkey() {
  _has_bits_[0] &= ~0x00000100u;
}
void NewRegResponse::clear_authkey() {
  authkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_authkey();
}
const ::std::string& NewRegResponse::authkey() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegResponse.AuthKey)
  return authkey_.GetNoArena();
}
void NewRegResponse::set_authkey(const ::std::string& value) {
  set_has_authkey();
  authkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewRegResponse.AuthKey)
}
#if LANG_CXX11
void NewRegResponse::set_authkey(::std::string&& value) {
  set_has_authkey();
  authkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewRegResponse.AuthKey)
}
#endif
void NewRegResponse::set_authkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_authkey();
  authkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewRegResponse.AuthKey)
}
void NewRegResponse::set_authkey(const char* value, size_t size) {
  set_has_authkey();
  authkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewRegResponse.AuthKey)
}
::std::string* NewRegResponse::mutable_authkey() {
  set_has_authkey();
  // @@protoc_insertion_point(field_mutable:micromsg.NewRegResponse.AuthKey)
  return authkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewRegResponse::release_authkey() {
  // @@protoc_insertion_point(field_release:micromsg.NewRegResponse.AuthKey)
  clear_has_authkey();
  return authkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewRegResponse::set_allocated_authkey(::std::string* authkey) {
  if (authkey != NULL) {
    set_has_authkey();
  } else {
    clear_has_authkey();
  }
  authkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), authkey);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewRegResponse.AuthKey)
}

// optional .micromsg.PluginKeyList PluginKeyList = 22;
bool NewRegResponse::has_pluginkeylist() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void NewRegResponse::set_has_pluginkeylist() {
  _has_bits_[0] |= 0x00010000u;
}
void NewRegResponse::clear_has_pluginkeylist() {
  _has_bits_[0] &= ~0x00010000u;
}
void NewRegResponse::clear_pluginkeylist() {
  if (pluginkeylist_ != NULL) pluginkeylist_->::micromsg::PluginKeyList::Clear();
  clear_has_pluginkeylist();
}
const ::micromsg::PluginKeyList& NewRegResponse::pluginkeylist() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegResponse.PluginKeyList)
  return pluginkeylist_ != NULL ? *pluginkeylist_
                         : *::micromsg::PluginKeyList::internal_default_instance();
}
::micromsg::PluginKeyList* NewRegResponse::mutable_pluginkeylist() {
  set_has_pluginkeylist();
  if (pluginkeylist_ == NULL) {
    pluginkeylist_ = new ::micromsg::PluginKeyList;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewRegResponse.PluginKeyList)
  return pluginkeylist_;
}
::micromsg::PluginKeyList* NewRegResponse::release_pluginkeylist() {
  // @@protoc_insertion_point(field_release:micromsg.NewRegResponse.PluginKeyList)
  clear_has_pluginkeylist();
  ::micromsg::PluginKeyList* temp = pluginkeylist_;
  pluginkeylist_ = NULL;
  return temp;
}
void NewRegResponse::set_allocated_pluginkeylist(::micromsg::PluginKeyList* pluginkeylist) {
  delete pluginkeylist_;
  pluginkeylist_ = pluginkeylist;
  if (pluginkeylist) {
    set_has_pluginkeylist();
  } else {
    clear_has_pluginkeylist();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewRegResponse.PluginKeyList)
}

// optional string Password = 23;
bool NewRegResponse::has_password() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void NewRegResponse::set_has_password() {
  _has_bits_[0] |= 0x00000200u;
}
void NewRegResponse::clear_has_password() {
  _has_bits_[0] &= ~0x00000200u;
}
void NewRegResponse::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
const ::std::string& NewRegResponse::password() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegResponse.Password)
  return password_.GetNoArena();
}
void NewRegResponse::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewRegResponse.Password)
}
#if LANG_CXX11
void NewRegResponse::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewRegResponse.Password)
}
#endif
void NewRegResponse::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewRegResponse.Password)
}
void NewRegResponse::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewRegResponse.Password)
}
::std::string* NewRegResponse::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:micromsg.NewRegResponse.Password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewRegResponse::release_password() {
  // @@protoc_insertion_point(field_release:micromsg.NewRegResponse.Password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewRegResponse::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewRegResponse.Password)
}

// optional uint32 ProfileFlag = 24;
bool NewRegResponse::has_profileflag() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void NewRegResponse::set_has_profileflag() {
  _has_bits_[0] |= 0x40000000u;
}
void NewRegResponse::clear_has_profileflag() {
  _has_bits_[0] &= ~0x40000000u;
}
void NewRegResponse::clear_profileflag() {
  profileflag_ = 0u;
  clear_has_profileflag();
}
::google::protobuf::uint32 NewRegResponse::profileflag() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegResponse.ProfileFlag)
  return profileflag_;
}
void NewRegResponse::set_profileflag(::google::protobuf::uint32 value) {
  set_has_profileflag();
  profileflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewRegResponse.ProfileFlag)
}

// optional .micromsg.HostList NewHostList = 25;
bool NewRegResponse::has_newhostlist() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void NewRegResponse::set_has_newhostlist() {
  _has_bits_[0] |= 0x00020000u;
}
void NewRegResponse::clear_has_newhostlist() {
  _has_bits_[0] &= ~0x00020000u;
}
void NewRegResponse::clear_newhostlist() {
  if (newhostlist_ != NULL) newhostlist_->::micromsg::HostList::Clear();
  clear_has_newhostlist();
}
const ::micromsg::HostList& NewRegResponse::newhostlist() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegResponse.NewHostList)
  return newhostlist_ != NULL ? *newhostlist_
                         : *::micromsg::HostList::internal_default_instance();
}
::micromsg::HostList* NewRegResponse::mutable_newhostlist() {
  set_has_newhostlist();
  if (newhostlist_ == NULL) {
    newhostlist_ = new ::micromsg::HostList;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewRegResponse.NewHostList)
  return newhostlist_;
}
::micromsg::HostList* NewRegResponse::release_newhostlist() {
  // @@protoc_insertion_point(field_release:micromsg.NewRegResponse.NewHostList)
  clear_has_newhostlist();
  ::micromsg::HostList* temp = newhostlist_;
  newhostlist_ = NULL;
  return temp;
}
void NewRegResponse::set_allocated_newhostlist(::micromsg::HostList* newhostlist) {
  delete newhostlist_;
  newhostlist_ = newhostlist;
  if (newhostlist) {
    set_has_newhostlist();
  } else {
    clear_has_newhostlist();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewRegResponse.NewHostList)
}

// optional string AutoAuthTicket = 26;
bool NewRegResponse::has_autoauthticket() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void NewRegResponse::set_has_autoauthticket() {
  _has_bits_[0] |= 0x00000400u;
}
void NewRegResponse::clear_has_autoauthticket() {
  _has_bits_[0] &= ~0x00000400u;
}
void NewRegResponse::clear_autoauthticket() {
  autoauthticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_autoauthticket();
}
const ::std::string& NewRegResponse::autoauthticket() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegResponse.AutoAuthTicket)
  return autoauthticket_.GetNoArena();
}
void NewRegResponse::set_autoauthticket(const ::std::string& value) {
  set_has_autoauthticket();
  autoauthticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewRegResponse.AutoAuthTicket)
}
#if LANG_CXX11
void NewRegResponse::set_autoauthticket(::std::string&& value) {
  set_has_autoauthticket();
  autoauthticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewRegResponse.AutoAuthTicket)
}
#endif
void NewRegResponse::set_autoauthticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_autoauthticket();
  autoauthticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewRegResponse.AutoAuthTicket)
}
void NewRegResponse::set_autoauthticket(const char* value, size_t size) {
  set_has_autoauthticket();
  autoauthticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewRegResponse.AutoAuthTicket)
}
::std::string* NewRegResponse::mutable_autoauthticket() {
  set_has_autoauthticket();
  // @@protoc_insertion_point(field_mutable:micromsg.NewRegResponse.AutoAuthTicket)
  return autoauthticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewRegResponse::release_autoauthticket() {
  // @@protoc_insertion_point(field_release:micromsg.NewRegResponse.AutoAuthTicket)
  clear_has_autoauthticket();
  return autoauthticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewRegResponse::set_allocated_autoauthticket(::std::string* autoauthticket) {
  if (autoauthticket != NULL) {
    set_has_autoauthticket();
  } else {
    clear_has_autoauthticket();
  }
  autoauthticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), autoauthticket);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewRegResponse.AutoAuthTicket)
}

// optional .micromsg.CDNDnsInfo DnsInfo = 27;
bool NewRegResponse::has_dnsinfo() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void NewRegResponse::set_has_dnsinfo() {
  _has_bits_[0] |= 0x00040000u;
}
void NewRegResponse::clear_has_dnsinfo() {
  _has_bits_[0] &= ~0x00040000u;
}
void NewRegResponse::clear_dnsinfo() {
  if (dnsinfo_ != NULL) dnsinfo_->::micromsg::CDNDnsInfo::Clear();
  clear_has_dnsinfo();
}
const ::micromsg::CDNDnsInfo& NewRegResponse::dnsinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegResponse.DnsInfo)
  return dnsinfo_ != NULL ? *dnsinfo_
                         : *::micromsg::CDNDnsInfo::internal_default_instance();
}
::micromsg::CDNDnsInfo* NewRegResponse::mutable_dnsinfo() {
  set_has_dnsinfo();
  if (dnsinfo_ == NULL) {
    dnsinfo_ = new ::micromsg::CDNDnsInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewRegResponse.DnsInfo)
  return dnsinfo_;
}
::micromsg::CDNDnsInfo* NewRegResponse::release_dnsinfo() {
  // @@protoc_insertion_point(field_release:micromsg.NewRegResponse.DnsInfo)
  clear_has_dnsinfo();
  ::micromsg::CDNDnsInfo* temp = dnsinfo_;
  dnsinfo_ = NULL;
  return temp;
}
void NewRegResponse::set_allocated_dnsinfo(::micromsg::CDNDnsInfo* dnsinfo) {
  delete dnsinfo_;
  dnsinfo_ = dnsinfo;
  if (dnsinfo) {
    set_has_dnsinfo();
  } else {
    clear_has_dnsinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewRegResponse.DnsInfo)
}

// optional string StepTicket = 28;
bool NewRegResponse::has_stepticket() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void NewRegResponse::set_has_stepticket() {
  _has_bits_[0] |= 0x00000800u;
}
void NewRegResponse::clear_has_stepticket() {
  _has_bits_[0] &= ~0x00000800u;
}
void NewRegResponse::clear_stepticket() {
  stepticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stepticket();
}
const ::std::string& NewRegResponse::stepticket() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegResponse.StepTicket)
  return stepticket_.GetNoArena();
}
void NewRegResponse::set_stepticket(const ::std::string& value) {
  set_has_stepticket();
  stepticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewRegResponse.StepTicket)
}
#if LANG_CXX11
void NewRegResponse::set_stepticket(::std::string&& value) {
  set_has_stepticket();
  stepticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewRegResponse.StepTicket)
}
#endif
void NewRegResponse::set_stepticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_stepticket();
  stepticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewRegResponse.StepTicket)
}
void NewRegResponse::set_stepticket(const char* value, size_t size) {
  set_has_stepticket();
  stepticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewRegResponse.StepTicket)
}
::std::string* NewRegResponse::mutable_stepticket() {
  set_has_stepticket();
  // @@protoc_insertion_point(field_mutable:micromsg.NewRegResponse.StepTicket)
  return stepticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewRegResponse::release_stepticket() {
  // @@protoc_insertion_point(field_release:micromsg.NewRegResponse.StepTicket)
  clear_has_stepticket();
  return stepticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewRegResponse::set_allocated_stepticket(::std::string* stepticket) {
  if (stepticket != NULL) {
    set_has_stepticket();
  } else {
    clear_has_stepticket();
  }
  stepticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stepticket);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewRegResponse.StepTicket)
}

// optional string VerifySignature = 29;
bool NewRegResponse::has_verifysignature() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void NewRegResponse::set_has_verifysignature() {
  _has_bits_[0] |= 0x00001000u;
}
void NewRegResponse::clear_has_verifysignature() {
  _has_bits_[0] &= ~0x00001000u;
}
void NewRegResponse::clear_verifysignature() {
  verifysignature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verifysignature();
}
const ::std::string& NewRegResponse::verifysignature() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegResponse.VerifySignature)
  return verifysignature_.GetNoArena();
}
void NewRegResponse::set_verifysignature(const ::std::string& value) {
  set_has_verifysignature();
  verifysignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewRegResponse.VerifySignature)
}
#if LANG_CXX11
void NewRegResponse::set_verifysignature(::std::string&& value) {
  set_has_verifysignature();
  verifysignature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewRegResponse.VerifySignature)
}
#endif
void NewRegResponse::set_verifysignature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verifysignature();
  verifysignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewRegResponse.VerifySignature)
}
void NewRegResponse::set_verifysignature(const char* value, size_t size) {
  set_has_verifysignature();
  verifysignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewRegResponse.VerifySignature)
}
::std::string* NewRegResponse::mutable_verifysignature() {
  set_has_verifysignature();
  // @@protoc_insertion_point(field_mutable:micromsg.NewRegResponse.VerifySignature)
  return verifysignature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewRegResponse::release_verifysignature() {
  // @@protoc_insertion_point(field_release:micromsg.NewRegResponse.VerifySignature)
  clear_has_verifysignature();
  return verifysignature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewRegResponse::set_allocated_verifysignature(::std::string* verifysignature) {
  if (verifysignature != NULL) {
    set_has_verifysignature();
  } else {
    clear_has_verifysignature();
  }
  verifysignature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifysignature);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewRegResponse.VerifySignature)
}

// optional .micromsg.SKBuiltinBuffer_t VerifyBuff = 30;
bool NewRegResponse::has_verifybuff() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void NewRegResponse::set_has_verifybuff() {
  _has_bits_[0] |= 0x00080000u;
}
void NewRegResponse::clear_has_verifybuff() {
  _has_bits_[0] &= ~0x00080000u;
}
void NewRegResponse::clear_verifybuff() {
  if (verifybuff_ != NULL) verifybuff_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_verifybuff();
}
const ::micromsg::SKBuiltinBuffer_t& NewRegResponse::verifybuff() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegResponse.VerifyBuff)
  return verifybuff_ != NULL ? *verifybuff_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* NewRegResponse::mutable_verifybuff() {
  set_has_verifybuff();
  if (verifybuff_ == NULL) {
    verifybuff_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewRegResponse.VerifyBuff)
  return verifybuff_;
}
::micromsg::SKBuiltinBuffer_t* NewRegResponse::release_verifybuff() {
  // @@protoc_insertion_point(field_release:micromsg.NewRegResponse.VerifyBuff)
  clear_has_verifybuff();
  ::micromsg::SKBuiltinBuffer_t* temp = verifybuff_;
  verifybuff_ = NULL;
  return temp;
}
void NewRegResponse::set_allocated_verifybuff(::micromsg::SKBuiltinBuffer_t* verifybuff) {
  delete verifybuff_;
  verifybuff_ = verifybuff;
  if (verifybuff) {
    set_has_verifybuff();
  } else {
    clear_has_verifybuff();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewRegResponse.VerifyBuff)
}

// optional .micromsg.ShowStyleKey ShowStyle = 31;
bool NewRegResponse::has_showstyle() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void NewRegResponse::set_has_showstyle() {
  _has_bits_[0] |= 0x00100000u;
}
void NewRegResponse::clear_has_showstyle() {
  _has_bits_[0] &= ~0x00100000u;
}
void NewRegResponse::clear_showstyle() {
  if (showstyle_ != NULL) showstyle_->::micromsg::ShowStyleKey::Clear();
  clear_has_showstyle();
}
const ::micromsg::ShowStyleKey& NewRegResponse::showstyle() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegResponse.ShowStyle)
  return showstyle_ != NULL ? *showstyle_
                         : *::micromsg::ShowStyleKey::internal_default_instance();
}
::micromsg::ShowStyleKey* NewRegResponse::mutable_showstyle() {
  set_has_showstyle();
  if (showstyle_ == NULL) {
    showstyle_ = new ::micromsg::ShowStyleKey;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewRegResponse.ShowStyle)
  return showstyle_;
}
::micromsg::ShowStyleKey* NewRegResponse::release_showstyle() {
  // @@protoc_insertion_point(field_release:micromsg.NewRegResponse.ShowStyle)
  clear_has_showstyle();
  ::micromsg::ShowStyleKey* temp = showstyle_;
  showstyle_ = NULL;
  return temp;
}
void NewRegResponse::set_allocated_showstyle(::micromsg::ShowStyleKey* showstyle) {
  delete showstyle_;
  showstyle_ = showstyle;
  if (showstyle) {
    set_has_showstyle();
  } else {
    clear_has_showstyle();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewRegResponse.ShowStyle)
}

// optional .micromsg.CDNDnsInfo SnsDnsInfo = 32;
bool NewRegResponse::has_snsdnsinfo() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void NewRegResponse::set_has_snsdnsinfo() {
  _has_bits_[0] |= 0x00200000u;
}
void NewRegResponse::clear_has_snsdnsinfo() {
  _has_bits_[0] &= ~0x00200000u;
}
void NewRegResponse::clear_snsdnsinfo() {
  if (snsdnsinfo_ != NULL) snsdnsinfo_->::micromsg::CDNDnsInfo::Clear();
  clear_has_snsdnsinfo();
}
const ::micromsg::CDNDnsInfo& NewRegResponse::snsdnsinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegResponse.SnsDnsInfo)
  return snsdnsinfo_ != NULL ? *snsdnsinfo_
                         : *::micromsg::CDNDnsInfo::internal_default_instance();
}
::micromsg::CDNDnsInfo* NewRegResponse::mutable_snsdnsinfo() {
  set_has_snsdnsinfo();
  if (snsdnsinfo_ == NULL) {
    snsdnsinfo_ = new ::micromsg::CDNDnsInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewRegResponse.SnsDnsInfo)
  return snsdnsinfo_;
}
::micromsg::CDNDnsInfo* NewRegResponse::release_snsdnsinfo() {
  // @@protoc_insertion_point(field_release:micromsg.NewRegResponse.SnsDnsInfo)
  clear_has_snsdnsinfo();
  ::micromsg::CDNDnsInfo* temp = snsdnsinfo_;
  snsdnsinfo_ = NULL;
  return temp;
}
void NewRegResponse::set_allocated_snsdnsinfo(::micromsg::CDNDnsInfo* snsdnsinfo) {
  delete snsdnsinfo_;
  snsdnsinfo_ = snsdnsinfo;
  if (snsdnsinfo) {
    set_has_snsdnsinfo();
  } else {
    clear_has_snsdnsinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewRegResponse.SnsDnsInfo)
}

// optional .micromsg.CDNDnsInfo AppDnsInfo = 33;
bool NewRegResponse::has_appdnsinfo() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void NewRegResponse::set_has_appdnsinfo() {
  _has_bits_[0] |= 0x00400000u;
}
void NewRegResponse::clear_has_appdnsinfo() {
  _has_bits_[0] &= ~0x00400000u;
}
void NewRegResponse::clear_appdnsinfo() {
  if (appdnsinfo_ != NULL) appdnsinfo_->::micromsg::CDNDnsInfo::Clear();
  clear_has_appdnsinfo();
}
const ::micromsg::CDNDnsInfo& NewRegResponse::appdnsinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegResponse.AppDnsInfo)
  return appdnsinfo_ != NULL ? *appdnsinfo_
                         : *::micromsg::CDNDnsInfo::internal_default_instance();
}
::micromsg::CDNDnsInfo* NewRegResponse::mutable_appdnsinfo() {
  set_has_appdnsinfo();
  if (appdnsinfo_ == NULL) {
    appdnsinfo_ = new ::micromsg::CDNDnsInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewRegResponse.AppDnsInfo)
  return appdnsinfo_;
}
::micromsg::CDNDnsInfo* NewRegResponse::release_appdnsinfo() {
  // @@protoc_insertion_point(field_release:micromsg.NewRegResponse.AppDnsInfo)
  clear_has_appdnsinfo();
  ::micromsg::CDNDnsInfo* temp = appdnsinfo_;
  appdnsinfo_ = NULL;
  return temp;
}
void NewRegResponse::set_allocated_appdnsinfo(::micromsg::CDNDnsInfo* appdnsinfo) {
  delete appdnsinfo_;
  appdnsinfo_ = appdnsinfo;
  if (appdnsinfo) {
    set_has_appdnsinfo();
  } else {
    clear_has_appdnsinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewRegResponse.AppDnsInfo)
}

// optional .micromsg.SecAuthRegKeySect SecAuthRegKeySect = 34;
bool NewRegResponse::has_secauthregkeysect() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void NewRegResponse::set_has_secauthregkeysect() {
  _has_bits_[0] |= 0x00800000u;
}
void NewRegResponse::clear_has_secauthregkeysect() {
  _has_bits_[0] &= ~0x00800000u;
}
void NewRegResponse::clear_secauthregkeysect() {
  if (secauthregkeysect_ != NULL) secauthregkeysect_->::micromsg::SecAuthRegKeySect::Clear();
  clear_has_secauthregkeysect();
}
const ::micromsg::SecAuthRegKeySect& NewRegResponse::secauthregkeysect() const {
  // @@protoc_insertion_point(field_get:micromsg.NewRegResponse.SecAuthRegKeySect)
  return secauthregkeysect_ != NULL ? *secauthregkeysect_
                         : *::micromsg::SecAuthRegKeySect::internal_default_instance();
}
::micromsg::SecAuthRegKeySect* NewRegResponse::mutable_secauthregkeysect() {
  set_has_secauthregkeysect();
  if (secauthregkeysect_ == NULL) {
    secauthregkeysect_ = new ::micromsg::SecAuthRegKeySect;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewRegResponse.SecAuthRegKeySect)
  return secauthregkeysect_;
}
::micromsg::SecAuthRegKeySect* NewRegResponse::release_secauthregkeysect() {
  // @@protoc_insertion_point(field_release:micromsg.NewRegResponse.SecAuthRegKeySect)
  clear_has_secauthregkeysect();
  ::micromsg::SecAuthRegKeySect* temp = secauthregkeysect_;
  secauthregkeysect_ = NULL;
  return temp;
}
void NewRegResponse::set_allocated_secauthregkeysect(::micromsg::SecAuthRegKeySect* secauthregkeysect) {
  delete secauthregkeysect_;
  secauthregkeysect_ = secauthregkeysect;
  if (secauthregkeysect) {
    set_has_secauthregkeysect();
  } else {
    clear_has_secauthregkeysect();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewRegResponse.SecAuthRegKeySect)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetSuggestAliasRequest::kBaseRequestFieldNumber;
const int GetSuggestAliasRequest::kRandomEncryKeyFieldNumber;
const int GetSuggestAliasRequest::kRegBindNameFieldNumber;
const int GetSuggestAliasRequest::kRegTicketFieldNumber;
const int GetSuggestAliasRequest::kNickNameFieldNumber;
const int GetSuggestAliasRequest::kInputAliasFieldNumber;
const int GetSuggestAliasRequest::kVerifySignatureFieldNumber;
const int GetSuggestAliasRequest::kVerifyContentFieldNumber;
const int GetSuggestAliasRequest::kRegModeFieldNumber;
const int GetSuggestAliasRequest::kLanguageFieldNumber;
const int GetSuggestAliasRequest::kClientSeqIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetSuggestAliasRequest::GetSuggestAliasRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetSuggestAliasRequest)
}
GetSuggestAliasRequest::GetSuggestAliasRequest(const GetSuggestAliasRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  regbindname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_regbindname()) {
    regbindname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.regbindname_);
  }
  regticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_regticket()) {
    regticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.regticket_);
  }
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nickname()) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  inputalias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_inputalias()) {
    inputalias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inputalias_);
  }
  verifysignature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_verifysignature()) {
    verifysignature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifysignature_);
  }
  verifycontent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_verifycontent()) {
    verifycontent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifycontent_);
  }
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_language()) {
    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  clientseqid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientseqid()) {
    clientseqid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientseqid_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_randomencrykey()) {
    randomencrykey_ = new ::micromsg::SKBuiltinBuffer_t(*from.randomencrykey_);
  } else {
    randomencrykey_ = NULL;
  }
  regmode_ = from.regmode_;
  // @@protoc_insertion_point(copy_constructor:micromsg.GetSuggestAliasRequest)
}

void GetSuggestAliasRequest::SharedCtor() {
  _cached_size_ = 0;
  regbindname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  regticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inputalias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifysignature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifycontent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientseqid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&regmode_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(regmode_));
}

GetSuggestAliasRequest::~GetSuggestAliasRequest() {
  // @@protoc_insertion_point(destructor:micromsg.GetSuggestAliasRequest)
  SharedDtor();
}

void GetSuggestAliasRequest::SharedDtor() {
  regbindname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  regticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inputalias_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifysignature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifycontent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientseqid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete randomencrykey_;
  }
}

void GetSuggestAliasRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSuggestAliasRequest::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetSuggestAliasRequest& GetSuggestAliasRequest::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetSuggestAliasRequest* GetSuggestAliasRequest::New(::google::protobuf::Arena* arena) const {
  GetSuggestAliasRequest* n = new GetSuggestAliasRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetSuggestAliasRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetSuggestAliasRequest)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_regbindname()) {
      GOOGLE_DCHECK(!regbindname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*regbindname_.UnsafeRawStringPointer())->clear();
    }
    if (has_regticket()) {
      GOOGLE_DCHECK(!regticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*regticket_.UnsafeRawStringPointer())->clear();
    }
    if (has_nickname()) {
      GOOGLE_DCHECK(!nickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*nickname_.UnsafeRawStringPointer())->clear();
    }
    if (has_inputalias()) {
      GOOGLE_DCHECK(!inputalias_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*inputalias_.UnsafeRawStringPointer())->clear();
    }
    if (has_verifysignature()) {
      GOOGLE_DCHECK(!verifysignature_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*verifysignature_.UnsafeRawStringPointer())->clear();
    }
    if (has_verifycontent()) {
      GOOGLE_DCHECK(!verifycontent_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*verifycontent_.UnsafeRawStringPointer())->clear();
    }
    if (has_language()) {
      GOOGLE_DCHECK(!language_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*language_.UnsafeRawStringPointer())->clear();
    }
    if (has_clientseqid()) {
      GOOGLE_DCHECK(!clientseqid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*clientseqid_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[8 / 32] & 768u) {
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_randomencrykey()) {
      GOOGLE_DCHECK(randomencrykey_ != NULL);
      randomencrykey_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  regmode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetSuggestAliasRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetSuggestAliasRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_randomencrykey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string RegBindName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_regbindname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->regbindname().data(), this->regbindname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetSuggestAliasRequest.RegBindName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string RegTicket = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_regticket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->regticket().data(), this->regticket().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetSuggestAliasRequest.RegTicket");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string NickName = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetSuggestAliasRequest.NickName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string InputAlias = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inputalias()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->inputalias().data(), this->inputalias().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetSuggestAliasRequest.InputAlias");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string VerifySignature = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verifysignature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->verifysignature().data(), this->verifysignature().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetSuggestAliasRequest.VerifySignature");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string VerifyContent = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verifycontent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->verifycontent().data(), this->verifycontent().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetSuggestAliasRequest.VerifyContent");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 RegMode = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_regmode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &regmode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Language = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetSuggestAliasRequest.Language");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ClientSeqID = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientseqid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientseqid().data(), this->clientseqid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetSuggestAliasRequest.ClientSeqID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetSuggestAliasRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetSuggestAliasRequest)
  return false;
#undef DO_
}

void GetSuggestAliasRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetSuggestAliasRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 2;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->randomencrykey_, output);
  }

  // optional string RegBindName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regbindname().data(), this->regbindname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetSuggestAliasRequest.RegBindName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->regbindname(), output);
  }

  // optional string RegTicket = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regticket().data(), this->regticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetSuggestAliasRequest.RegTicket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->regticket(), output);
  }

  // optional string NickName = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetSuggestAliasRequest.NickName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->nickname(), output);
  }

  // optional string InputAlias = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inputalias().data(), this->inputalias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetSuggestAliasRequest.InputAlias");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->inputalias(), output);
  }

  // optional string VerifySignature = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verifysignature().data(), this->verifysignature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetSuggestAliasRequest.VerifySignature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->verifysignature(), output);
  }

  // optional string VerifyContent = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verifycontent().data(), this->verifycontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetSuggestAliasRequest.VerifyContent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->verifycontent(), output);
  }

  // required uint32 RegMode = 9;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->regmode(), output);
  }

  // optional string Language = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetSuggestAliasRequest.Language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->language(), output);
  }

  // optional string ClientSeqID = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientseqid().data(), this->clientseqid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetSuggestAliasRequest.ClientSeqID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->clientseqid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetSuggestAliasRequest)
}

::google::protobuf::uint8* GetSuggestAliasRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetSuggestAliasRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 2;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->randomencrykey_, deterministic, target);
  }

  // optional string RegBindName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regbindname().data(), this->regbindname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetSuggestAliasRequest.RegBindName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->regbindname(), target);
  }

  // optional string RegTicket = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regticket().data(), this->regticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetSuggestAliasRequest.RegTicket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->regticket(), target);
  }

  // optional string NickName = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetSuggestAliasRequest.NickName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->nickname(), target);
  }

  // optional string InputAlias = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inputalias().data(), this->inputalias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetSuggestAliasRequest.InputAlias");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->inputalias(), target);
  }

  // optional string VerifySignature = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verifysignature().data(), this->verifysignature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetSuggestAliasRequest.VerifySignature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->verifysignature(), target);
  }

  // optional string VerifyContent = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verifycontent().data(), this->verifycontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetSuggestAliasRequest.VerifyContent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->verifycontent(), target);
  }

  // required uint32 RegMode = 9;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->regmode(), target);
  }

  // optional string Language = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetSuggestAliasRequest.Language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->language(), target);
  }

  // optional string ClientSeqID = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientseqid().data(), this->clientseqid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetSuggestAliasRequest.ClientSeqID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->clientseqid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetSuggestAliasRequest)
  return target;
}

size_t GetSuggestAliasRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetSuggestAliasRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_randomencrykey()) {
    // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->randomencrykey_);
  }

  if (has_regmode()) {
    // required uint32 RegMode = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->regmode());
  }

  return total_size;
}
size_t GetSuggestAliasRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetSuggestAliasRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000700) ^ 0x00000700) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->randomencrykey_);

    // required uint32 RegMode = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->regmode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string RegBindName = 3;
    if (has_regbindname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->regbindname());
    }

    // optional string RegTicket = 4;
    if (has_regticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->regticket());
    }

    // optional string NickName = 5;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string InputAlias = 6;
    if (has_inputalias()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inputalias());
    }

    // optional string VerifySignature = 7;
    if (has_verifysignature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verifysignature());
    }

    // optional string VerifyContent = 8;
    if (has_verifycontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verifycontent());
    }

    // optional string Language = 10;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

    // optional string ClientSeqID = 11;
    if (has_clientseqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientseqid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSuggestAliasRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetSuggestAliasRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSuggestAliasRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetSuggestAliasRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetSuggestAliasRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetSuggestAliasRequest)
    MergeFrom(*source);
  }
}

void GetSuggestAliasRequest::MergeFrom(const GetSuggestAliasRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetSuggestAliasRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_regbindname();
      regbindname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.regbindname_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_regticket();
      regticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.regticket_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_inputalias();
      inputalias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inputalias_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_verifysignature();
      verifysignature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifysignature_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_verifycontent();
      verifycontent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifycontent_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_language();
      language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_clientseqid();
      clientseqid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientseqid_);
    }
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_randomencrykey()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.randomencrykey());
    }
    if (cached_has_bits & 0x00000400u) {
      regmode_ = from.regmode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetSuggestAliasRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetSuggestAliasRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSuggestAliasRequest::CopyFrom(const GetSuggestAliasRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetSuggestAliasRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSuggestAliasRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000700) != 0x00000700) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_randomencrykey()) {
    if (!this->randomencrykey_->IsInitialized()) return false;
  }
  return true;
}

void GetSuggestAliasRequest::Swap(GetSuggestAliasRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetSuggestAliasRequest::InternalSwap(GetSuggestAliasRequest* other) {
  regbindname_.Swap(&other->regbindname_);
  regticket_.Swap(&other->regticket_);
  nickname_.Swap(&other->nickname_);
  inputalias_.Swap(&other->inputalias_);
  verifysignature_.Swap(&other->verifysignature_);
  verifycontent_.Swap(&other->verifycontent_);
  language_.Swap(&other->language_);
  clientseqid_.Swap(&other->clientseqid_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(randomencrykey_, other->randomencrykey_);
  std::swap(regmode_, other->regmode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetSuggestAliasRequest::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetSuggestAliasRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool GetSuggestAliasRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void GetSuggestAliasRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000100u;
}
void GetSuggestAliasRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000100u;
}
void GetSuggestAliasRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GetSuggestAliasRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetSuggestAliasRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GetSuggestAliasRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetSuggestAliasRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GetSuggestAliasRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetSuggestAliasRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GetSuggestAliasRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetSuggestAliasRequest.BaseRequest)
}

// required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 2;
bool GetSuggestAliasRequest::has_randomencrykey() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void GetSuggestAliasRequest::set_has_randomencrykey() {
  _has_bits_[0] |= 0x00000200u;
}
void GetSuggestAliasRequest::clear_has_randomencrykey() {
  _has_bits_[0] &= ~0x00000200u;
}
void GetSuggestAliasRequest::clear_randomencrykey() {
  if (randomencrykey_ != NULL) randomencrykey_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_randomencrykey();
}
const ::micromsg::SKBuiltinBuffer_t& GetSuggestAliasRequest::randomencrykey() const {
  // @@protoc_insertion_point(field_get:micromsg.GetSuggestAliasRequest.RandomEncryKey)
  return randomencrykey_ != NULL ? *randomencrykey_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* GetSuggestAliasRequest::mutable_randomencrykey() {
  set_has_randomencrykey();
  if (randomencrykey_ == NULL) {
    randomencrykey_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetSuggestAliasRequest.RandomEncryKey)
  return randomencrykey_;
}
::micromsg::SKBuiltinBuffer_t* GetSuggestAliasRequest::release_randomencrykey() {
  // @@protoc_insertion_point(field_release:micromsg.GetSuggestAliasRequest.RandomEncryKey)
  clear_has_randomencrykey();
  ::micromsg::SKBuiltinBuffer_t* temp = randomencrykey_;
  randomencrykey_ = NULL;
  return temp;
}
void GetSuggestAliasRequest::set_allocated_randomencrykey(::micromsg::SKBuiltinBuffer_t* randomencrykey) {
  delete randomencrykey_;
  randomencrykey_ = randomencrykey;
  if (randomencrykey) {
    set_has_randomencrykey();
  } else {
    clear_has_randomencrykey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetSuggestAliasRequest.RandomEncryKey)
}

// optional string RegBindName = 3;
bool GetSuggestAliasRequest::has_regbindname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetSuggestAliasRequest::set_has_regbindname() {
  _has_bits_[0] |= 0x00000001u;
}
void GetSuggestAliasRequest::clear_has_regbindname() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetSuggestAliasRequest::clear_regbindname() {
  regbindname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_regbindname();
}
const ::std::string& GetSuggestAliasRequest::regbindname() const {
  // @@protoc_insertion_point(field_get:micromsg.GetSuggestAliasRequest.RegBindName)
  return regbindname_.GetNoArena();
}
void GetSuggestAliasRequest::set_regbindname(const ::std::string& value) {
  set_has_regbindname();
  regbindname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetSuggestAliasRequest.RegBindName)
}
#if LANG_CXX11
void GetSuggestAliasRequest::set_regbindname(::std::string&& value) {
  set_has_regbindname();
  regbindname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetSuggestAliasRequest.RegBindName)
}
#endif
void GetSuggestAliasRequest::set_regbindname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_regbindname();
  regbindname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetSuggestAliasRequest.RegBindName)
}
void GetSuggestAliasRequest::set_regbindname(const char* value, size_t size) {
  set_has_regbindname();
  regbindname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetSuggestAliasRequest.RegBindName)
}
::std::string* GetSuggestAliasRequest::mutable_regbindname() {
  set_has_regbindname();
  // @@protoc_insertion_point(field_mutable:micromsg.GetSuggestAliasRequest.RegBindName)
  return regbindname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetSuggestAliasRequest::release_regbindname() {
  // @@protoc_insertion_point(field_release:micromsg.GetSuggestAliasRequest.RegBindName)
  clear_has_regbindname();
  return regbindname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetSuggestAliasRequest::set_allocated_regbindname(::std::string* regbindname) {
  if (regbindname != NULL) {
    set_has_regbindname();
  } else {
    clear_has_regbindname();
  }
  regbindname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), regbindname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetSuggestAliasRequest.RegBindName)
}

// optional string RegTicket = 4;
bool GetSuggestAliasRequest::has_regticket() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetSuggestAliasRequest::set_has_regticket() {
  _has_bits_[0] |= 0x00000002u;
}
void GetSuggestAliasRequest::clear_has_regticket() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetSuggestAliasRequest::clear_regticket() {
  regticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_regticket();
}
const ::std::string& GetSuggestAliasRequest::regticket() const {
  // @@protoc_insertion_point(field_get:micromsg.GetSuggestAliasRequest.RegTicket)
  return regticket_.GetNoArena();
}
void GetSuggestAliasRequest::set_regticket(const ::std::string& value) {
  set_has_regticket();
  regticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetSuggestAliasRequest.RegTicket)
}
#if LANG_CXX11
void GetSuggestAliasRequest::set_regticket(::std::string&& value) {
  set_has_regticket();
  regticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetSuggestAliasRequest.RegTicket)
}
#endif
void GetSuggestAliasRequest::set_regticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_regticket();
  regticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetSuggestAliasRequest.RegTicket)
}
void GetSuggestAliasRequest::set_regticket(const char* value, size_t size) {
  set_has_regticket();
  regticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetSuggestAliasRequest.RegTicket)
}
::std::string* GetSuggestAliasRequest::mutable_regticket() {
  set_has_regticket();
  // @@protoc_insertion_point(field_mutable:micromsg.GetSuggestAliasRequest.RegTicket)
  return regticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetSuggestAliasRequest::release_regticket() {
  // @@protoc_insertion_point(field_release:micromsg.GetSuggestAliasRequest.RegTicket)
  clear_has_regticket();
  return regticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetSuggestAliasRequest::set_allocated_regticket(::std::string* regticket) {
  if (regticket != NULL) {
    set_has_regticket();
  } else {
    clear_has_regticket();
  }
  regticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), regticket);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetSuggestAliasRequest.RegTicket)
}

// optional string NickName = 5;
bool GetSuggestAliasRequest::has_nickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetSuggestAliasRequest::set_has_nickname() {
  _has_bits_[0] |= 0x00000004u;
}
void GetSuggestAliasRequest::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetSuggestAliasRequest::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
const ::std::string& GetSuggestAliasRequest::nickname() const {
  // @@protoc_insertion_point(field_get:micromsg.GetSuggestAliasRequest.NickName)
  return nickname_.GetNoArena();
}
void GetSuggestAliasRequest::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetSuggestAliasRequest.NickName)
}
#if LANG_CXX11
void GetSuggestAliasRequest::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetSuggestAliasRequest.NickName)
}
#endif
void GetSuggestAliasRequest::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetSuggestAliasRequest.NickName)
}
void GetSuggestAliasRequest::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetSuggestAliasRequest.NickName)
}
::std::string* GetSuggestAliasRequest::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:micromsg.GetSuggestAliasRequest.NickName)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetSuggestAliasRequest::release_nickname() {
  // @@protoc_insertion_point(field_release:micromsg.GetSuggestAliasRequest.NickName)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetSuggestAliasRequest::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetSuggestAliasRequest.NickName)
}

// optional string InputAlias = 6;
bool GetSuggestAliasRequest::has_inputalias() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetSuggestAliasRequest::set_has_inputalias() {
  _has_bits_[0] |= 0x00000008u;
}
void GetSuggestAliasRequest::clear_has_inputalias() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetSuggestAliasRequest::clear_inputalias() {
  inputalias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_inputalias();
}
const ::std::string& GetSuggestAliasRequest::inputalias() const {
  // @@protoc_insertion_point(field_get:micromsg.GetSuggestAliasRequest.InputAlias)
  return inputalias_.GetNoArena();
}
void GetSuggestAliasRequest::set_inputalias(const ::std::string& value) {
  set_has_inputalias();
  inputalias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetSuggestAliasRequest.InputAlias)
}
#if LANG_CXX11
void GetSuggestAliasRequest::set_inputalias(::std::string&& value) {
  set_has_inputalias();
  inputalias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetSuggestAliasRequest.InputAlias)
}
#endif
void GetSuggestAliasRequest::set_inputalias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_inputalias();
  inputalias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetSuggestAliasRequest.InputAlias)
}
void GetSuggestAliasRequest::set_inputalias(const char* value, size_t size) {
  set_has_inputalias();
  inputalias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetSuggestAliasRequest.InputAlias)
}
::std::string* GetSuggestAliasRequest::mutable_inputalias() {
  set_has_inputalias();
  // @@protoc_insertion_point(field_mutable:micromsg.GetSuggestAliasRequest.InputAlias)
  return inputalias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetSuggestAliasRequest::release_inputalias() {
  // @@protoc_insertion_point(field_release:micromsg.GetSuggestAliasRequest.InputAlias)
  clear_has_inputalias();
  return inputalias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetSuggestAliasRequest::set_allocated_inputalias(::std::string* inputalias) {
  if (inputalias != NULL) {
    set_has_inputalias();
  } else {
    clear_has_inputalias();
  }
  inputalias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inputalias);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetSuggestAliasRequest.InputAlias)
}

// optional string VerifySignature = 7;
bool GetSuggestAliasRequest::has_verifysignature() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GetSuggestAliasRequest::set_has_verifysignature() {
  _has_bits_[0] |= 0x00000010u;
}
void GetSuggestAliasRequest::clear_has_verifysignature() {
  _has_bits_[0] &= ~0x00000010u;
}
void GetSuggestAliasRequest::clear_verifysignature() {
  verifysignature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verifysignature();
}
const ::std::string& GetSuggestAliasRequest::verifysignature() const {
  // @@protoc_insertion_point(field_get:micromsg.GetSuggestAliasRequest.VerifySignature)
  return verifysignature_.GetNoArena();
}
void GetSuggestAliasRequest::set_verifysignature(const ::std::string& value) {
  set_has_verifysignature();
  verifysignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetSuggestAliasRequest.VerifySignature)
}
#if LANG_CXX11
void GetSuggestAliasRequest::set_verifysignature(::std::string&& value) {
  set_has_verifysignature();
  verifysignature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetSuggestAliasRequest.VerifySignature)
}
#endif
void GetSuggestAliasRequest::set_verifysignature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verifysignature();
  verifysignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetSuggestAliasRequest.VerifySignature)
}
void GetSuggestAliasRequest::set_verifysignature(const char* value, size_t size) {
  set_has_verifysignature();
  verifysignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetSuggestAliasRequest.VerifySignature)
}
::std::string* GetSuggestAliasRequest::mutable_verifysignature() {
  set_has_verifysignature();
  // @@protoc_insertion_point(field_mutable:micromsg.GetSuggestAliasRequest.VerifySignature)
  return verifysignature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetSuggestAliasRequest::release_verifysignature() {
  // @@protoc_insertion_point(field_release:micromsg.GetSuggestAliasRequest.VerifySignature)
  clear_has_verifysignature();
  return verifysignature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetSuggestAliasRequest::set_allocated_verifysignature(::std::string* verifysignature) {
  if (verifysignature != NULL) {
    set_has_verifysignature();
  } else {
    clear_has_verifysignature();
  }
  verifysignature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifysignature);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetSuggestAliasRequest.VerifySignature)
}

// optional string VerifyContent = 8;
bool GetSuggestAliasRequest::has_verifycontent() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GetSuggestAliasRequest::set_has_verifycontent() {
  _has_bits_[0] |= 0x00000020u;
}
void GetSuggestAliasRequest::clear_has_verifycontent() {
  _has_bits_[0] &= ~0x00000020u;
}
void GetSuggestAliasRequest::clear_verifycontent() {
  verifycontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verifycontent();
}
const ::std::string& GetSuggestAliasRequest::verifycontent() const {
  // @@protoc_insertion_point(field_get:micromsg.GetSuggestAliasRequest.VerifyContent)
  return verifycontent_.GetNoArena();
}
void GetSuggestAliasRequest::set_verifycontent(const ::std::string& value) {
  set_has_verifycontent();
  verifycontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetSuggestAliasRequest.VerifyContent)
}
#if LANG_CXX11
void GetSuggestAliasRequest::set_verifycontent(::std::string&& value) {
  set_has_verifycontent();
  verifycontent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetSuggestAliasRequest.VerifyContent)
}
#endif
void GetSuggestAliasRequest::set_verifycontent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verifycontent();
  verifycontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetSuggestAliasRequest.VerifyContent)
}
void GetSuggestAliasRequest::set_verifycontent(const char* value, size_t size) {
  set_has_verifycontent();
  verifycontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetSuggestAliasRequest.VerifyContent)
}
::std::string* GetSuggestAliasRequest::mutable_verifycontent() {
  set_has_verifycontent();
  // @@protoc_insertion_point(field_mutable:micromsg.GetSuggestAliasRequest.VerifyContent)
  return verifycontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetSuggestAliasRequest::release_verifycontent() {
  // @@protoc_insertion_point(field_release:micromsg.GetSuggestAliasRequest.VerifyContent)
  clear_has_verifycontent();
  return verifycontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetSuggestAliasRequest::set_allocated_verifycontent(::std::string* verifycontent) {
  if (verifycontent != NULL) {
    set_has_verifycontent();
  } else {
    clear_has_verifycontent();
  }
  verifycontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifycontent);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetSuggestAliasRequest.VerifyContent)
}

// required uint32 RegMode = 9;
bool GetSuggestAliasRequest::has_regmode() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void GetSuggestAliasRequest::set_has_regmode() {
  _has_bits_[0] |= 0x00000400u;
}
void GetSuggestAliasRequest::clear_has_regmode() {
  _has_bits_[0] &= ~0x00000400u;
}
void GetSuggestAliasRequest::clear_regmode() {
  regmode_ = 0u;
  clear_has_regmode();
}
::google::protobuf::uint32 GetSuggestAliasRequest::regmode() const {
  // @@protoc_insertion_point(field_get:micromsg.GetSuggestAliasRequest.RegMode)
  return regmode_;
}
void GetSuggestAliasRequest::set_regmode(::google::protobuf::uint32 value) {
  set_has_regmode();
  regmode_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetSuggestAliasRequest.RegMode)
}

// optional string Language = 10;
bool GetSuggestAliasRequest::has_language() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GetSuggestAliasRequest::set_has_language() {
  _has_bits_[0] |= 0x00000040u;
}
void GetSuggestAliasRequest::clear_has_language() {
  _has_bits_[0] &= ~0x00000040u;
}
void GetSuggestAliasRequest::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_language();
}
const ::std::string& GetSuggestAliasRequest::language() const {
  // @@protoc_insertion_point(field_get:micromsg.GetSuggestAliasRequest.Language)
  return language_.GetNoArena();
}
void GetSuggestAliasRequest::set_language(const ::std::string& value) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetSuggestAliasRequest.Language)
}
#if LANG_CXX11
void GetSuggestAliasRequest::set_language(::std::string&& value) {
  set_has_language();
  language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetSuggestAliasRequest.Language)
}
#endif
void GetSuggestAliasRequest::set_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetSuggestAliasRequest.Language)
}
void GetSuggestAliasRequest::set_language(const char* value, size_t size) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetSuggestAliasRequest.Language)
}
::std::string* GetSuggestAliasRequest::mutable_language() {
  set_has_language();
  // @@protoc_insertion_point(field_mutable:micromsg.GetSuggestAliasRequest.Language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetSuggestAliasRequest::release_language() {
  // @@protoc_insertion_point(field_release:micromsg.GetSuggestAliasRequest.Language)
  clear_has_language();
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetSuggestAliasRequest::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    set_has_language();
  } else {
    clear_has_language();
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetSuggestAliasRequest.Language)
}

// optional string ClientSeqID = 11;
bool GetSuggestAliasRequest::has_clientseqid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void GetSuggestAliasRequest::set_has_clientseqid() {
  _has_bits_[0] |= 0x00000080u;
}
void GetSuggestAliasRequest::clear_has_clientseqid() {
  _has_bits_[0] &= ~0x00000080u;
}
void GetSuggestAliasRequest::clear_clientseqid() {
  clientseqid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientseqid();
}
const ::std::string& GetSuggestAliasRequest::clientseqid() const {
  // @@protoc_insertion_point(field_get:micromsg.GetSuggestAliasRequest.ClientSeqID)
  return clientseqid_.GetNoArena();
}
void GetSuggestAliasRequest::set_clientseqid(const ::std::string& value) {
  set_has_clientseqid();
  clientseqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetSuggestAliasRequest.ClientSeqID)
}
#if LANG_CXX11
void GetSuggestAliasRequest::set_clientseqid(::std::string&& value) {
  set_has_clientseqid();
  clientseqid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetSuggestAliasRequest.ClientSeqID)
}
#endif
void GetSuggestAliasRequest::set_clientseqid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientseqid();
  clientseqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetSuggestAliasRequest.ClientSeqID)
}
void GetSuggestAliasRequest::set_clientseqid(const char* value, size_t size) {
  set_has_clientseqid();
  clientseqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetSuggestAliasRequest.ClientSeqID)
}
::std::string* GetSuggestAliasRequest::mutable_clientseqid() {
  set_has_clientseqid();
  // @@protoc_insertion_point(field_mutable:micromsg.GetSuggestAliasRequest.ClientSeqID)
  return clientseqid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetSuggestAliasRequest::release_clientseqid() {
  // @@protoc_insertion_point(field_release:micromsg.GetSuggestAliasRequest.ClientSeqID)
  clear_has_clientseqid();
  return clientseqid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetSuggestAliasRequest::set_allocated_clientseqid(::std::string* clientseqid) {
  if (clientseqid != NULL) {
    set_has_clientseqid();
  } else {
    clear_has_clientseqid();
  }
  clientseqid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientseqid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetSuggestAliasRequest.ClientSeqID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetSuggestAliasResponse::kBaseResponseFieldNumber;
const int GetSuggestAliasResponse::kCountFieldNumber;
const int GetSuggestAliasResponse::kListFieldNumber;
const int GetSuggestAliasResponse::kVerifySignatureFieldNumber;
const int GetSuggestAliasResponse::kVerifyBuffFieldNumber;
const int GetSuggestAliasResponse::kUserNameRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetSuggestAliasResponse::GetSuggestAliasResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetSuggestAliasResponse)
}
GetSuggestAliasResponse::GetSuggestAliasResponse(const GetSuggestAliasResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  verifysignature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_verifysignature()) {
    verifysignature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifysignature_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_verifybuff()) {
    verifybuff_ = new ::micromsg::SKBuiltinBuffer_t(*from.verifybuff_);
  } else {
    verifybuff_ = NULL;
  }
  ::memcpy(&count_, &from.count_,
    reinterpret_cast<char*>(&usernameret_) -
    reinterpret_cast<char*>(&count_) + sizeof(usernameret_));
  // @@protoc_insertion_point(copy_constructor:micromsg.GetSuggestAliasResponse)
}

void GetSuggestAliasResponse::SharedCtor() {
  _cached_size_ = 0;
  verifysignature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&usernameret_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(usernameret_));
}

GetSuggestAliasResponse::~GetSuggestAliasResponse() {
  // @@protoc_insertion_point(destructor:micromsg.GetSuggestAliasResponse)
  SharedDtor();
}

void GetSuggestAliasResponse::SharedDtor() {
  verifysignature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete verifybuff_;
  }
}

void GetSuggestAliasResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSuggestAliasResponse::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetSuggestAliasResponse& GetSuggestAliasResponse::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetSuggestAliasResponse* GetSuggestAliasResponse::New(::google::protobuf::Arena* arena) const {
  GetSuggestAliasResponse* n = new GetSuggestAliasResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetSuggestAliasResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetSuggestAliasResponse)
  list_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_verifysignature()) {
      GOOGLE_DCHECK(!verifysignature_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*verifysignature_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_verifybuff()) {
      GOOGLE_DCHECK(verifybuff_ != NULL);
      verifybuff_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&count_, 0, reinterpret_cast<char*>(&usernameret_) -
      reinterpret_cast<char*>(&count_) + sizeof(usernameret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetSuggestAliasResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetSuggestAliasResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.SKBuiltinString_t List = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string VerifySignature = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verifysignature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->verifysignature().data(), this->verifysignature().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetSuggestAliasResponse.VerifySignature");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t VerifyBuff = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_verifybuff()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 UserNameRet = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_usernameret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usernameret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetSuggestAliasResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetSuggestAliasResponse)
  return false;
#undef DO_
}

void GetSuggestAliasResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetSuggestAliasResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // repeated .micromsg.SKBuiltinString_t List = 3;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list(i), output);
  }

  // optional string VerifySignature = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verifysignature().data(), this->verifysignature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetSuggestAliasResponse.VerifySignature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->verifysignature(), output);
  }

  // optional .micromsg.SKBuiltinBuffer_t VerifyBuff = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->verifybuff_, output);
  }

  // optional int32 UserNameRet = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->usernameret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetSuggestAliasResponse)
}

::google::protobuf::uint8* GetSuggestAliasResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetSuggestAliasResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // repeated .micromsg.SKBuiltinString_t List = 3;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->list(i), deterministic, target);
  }

  // optional string VerifySignature = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verifysignature().data(), this->verifysignature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetSuggestAliasResponse.VerifySignature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->verifysignature(), target);
  }

  // optional .micromsg.SKBuiltinBuffer_t VerifyBuff = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->verifybuff_, deterministic, target);
  }

  // optional int32 UserNameRet = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->usernameret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetSuggestAliasResponse)
  return target;
}

size_t GetSuggestAliasResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetSuggestAliasResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_count()) {
    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  return total_size;
}
size_t GetSuggestAliasResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetSuggestAliasResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000a) ^ 0x0000000a) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.SKBuiltinString_t List = 3;
  {
    unsigned int count = this->list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list(i));
    }
  }

  // optional string VerifySignature = 4;
  if (has_verifysignature()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->verifysignature());
  }

  // optional .micromsg.SKBuiltinBuffer_t VerifyBuff = 5;
  if (has_verifybuff()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->verifybuff_);
  }

  // optional int32 UserNameRet = 6;
  if (has_usernameret()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->usernameret());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSuggestAliasResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetSuggestAliasResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSuggestAliasResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetSuggestAliasResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetSuggestAliasResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetSuggestAliasResponse)
    MergeFrom(*source);
  }
}

void GetSuggestAliasResponse::MergeFrom(const GetSuggestAliasResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetSuggestAliasResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_verifysignature();
      verifysignature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifysignature_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_verifybuff()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.verifybuff());
    }
    if (cached_has_bits & 0x00000008u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000010u) {
      usernameret_ = from.usernameret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetSuggestAliasResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetSuggestAliasResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSuggestAliasResponse::CopyFrom(const GetSuggestAliasResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetSuggestAliasResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSuggestAliasResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000a) != 0x0000000a) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_verifybuff()) {
    if (!this->verifybuff_->IsInitialized()) return false;
  }
  return true;
}

void GetSuggestAliasResponse::Swap(GetSuggestAliasResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetSuggestAliasResponse::InternalSwap(GetSuggestAliasResponse* other) {
  list_.InternalSwap(&other->list_);
  verifysignature_.Swap(&other->verifysignature_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(verifybuff_, other->verifybuff_);
  std::swap(count_, other->count_);
  std::swap(usernameret_, other->usernameret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetSuggestAliasResponse::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetSuggestAliasResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetSuggestAliasResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetSuggestAliasResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
void GetSuggestAliasResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetSuggestAliasResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetSuggestAliasResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetSuggestAliasResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetSuggestAliasResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetSuggestAliasResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetSuggestAliasResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetSuggestAliasResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetSuggestAliasResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetSuggestAliasResponse.BaseResponse)
}

// required uint32 Count = 2;
bool GetSuggestAliasResponse::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetSuggestAliasResponse::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
void GetSuggestAliasResponse::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetSuggestAliasResponse::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 GetSuggestAliasResponse::count() const {
  // @@protoc_insertion_point(field_get:micromsg.GetSuggestAliasResponse.Count)
  return count_;
}
void GetSuggestAliasResponse::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetSuggestAliasResponse.Count)
}

// repeated .micromsg.SKBuiltinString_t List = 3;
int GetSuggestAliasResponse::list_size() const {
  return list_.size();
}
void GetSuggestAliasResponse::clear_list() {
  list_.Clear();
}
const ::micromsg::SKBuiltinString_t& GetSuggestAliasResponse::list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GetSuggestAliasResponse.List)
  return list_.Get(index);
}
::micromsg::SKBuiltinString_t* GetSuggestAliasResponse::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GetSuggestAliasResponse.List)
  return list_.Mutable(index);
}
::micromsg::SKBuiltinString_t* GetSuggestAliasResponse::add_list() {
  // @@protoc_insertion_point(field_add:micromsg.GetSuggestAliasResponse.List)
  return list_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >*
GetSuggestAliasResponse::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GetSuggestAliasResponse.List)
  return &list_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >&
GetSuggestAliasResponse::list() const {
  // @@protoc_insertion_point(field_list:micromsg.GetSuggestAliasResponse.List)
  return list_;
}

// optional string VerifySignature = 4;
bool GetSuggestAliasResponse::has_verifysignature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetSuggestAliasResponse::set_has_verifysignature() {
  _has_bits_[0] |= 0x00000001u;
}
void GetSuggestAliasResponse::clear_has_verifysignature() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetSuggestAliasResponse::clear_verifysignature() {
  verifysignature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verifysignature();
}
const ::std::string& GetSuggestAliasResponse::verifysignature() const {
  // @@protoc_insertion_point(field_get:micromsg.GetSuggestAliasResponse.VerifySignature)
  return verifysignature_.GetNoArena();
}
void GetSuggestAliasResponse::set_verifysignature(const ::std::string& value) {
  set_has_verifysignature();
  verifysignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetSuggestAliasResponse.VerifySignature)
}
#if LANG_CXX11
void GetSuggestAliasResponse::set_verifysignature(::std::string&& value) {
  set_has_verifysignature();
  verifysignature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetSuggestAliasResponse.VerifySignature)
}
#endif
void GetSuggestAliasResponse::set_verifysignature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verifysignature();
  verifysignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetSuggestAliasResponse.VerifySignature)
}
void GetSuggestAliasResponse::set_verifysignature(const char* value, size_t size) {
  set_has_verifysignature();
  verifysignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetSuggestAliasResponse.VerifySignature)
}
::std::string* GetSuggestAliasResponse::mutable_verifysignature() {
  set_has_verifysignature();
  // @@protoc_insertion_point(field_mutable:micromsg.GetSuggestAliasResponse.VerifySignature)
  return verifysignature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetSuggestAliasResponse::release_verifysignature() {
  // @@protoc_insertion_point(field_release:micromsg.GetSuggestAliasResponse.VerifySignature)
  clear_has_verifysignature();
  return verifysignature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetSuggestAliasResponse::set_allocated_verifysignature(::std::string* verifysignature) {
  if (verifysignature != NULL) {
    set_has_verifysignature();
  } else {
    clear_has_verifysignature();
  }
  verifysignature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifysignature);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetSuggestAliasResponse.VerifySignature)
}

// optional .micromsg.SKBuiltinBuffer_t VerifyBuff = 5;
bool GetSuggestAliasResponse::has_verifybuff() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetSuggestAliasResponse::set_has_verifybuff() {
  _has_bits_[0] |= 0x00000004u;
}
void GetSuggestAliasResponse::clear_has_verifybuff() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetSuggestAliasResponse::clear_verifybuff() {
  if (verifybuff_ != NULL) verifybuff_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_verifybuff();
}
const ::micromsg::SKBuiltinBuffer_t& GetSuggestAliasResponse::verifybuff() const {
  // @@protoc_insertion_point(field_get:micromsg.GetSuggestAliasResponse.VerifyBuff)
  return verifybuff_ != NULL ? *verifybuff_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* GetSuggestAliasResponse::mutable_verifybuff() {
  set_has_verifybuff();
  if (verifybuff_ == NULL) {
    verifybuff_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetSuggestAliasResponse.VerifyBuff)
  return verifybuff_;
}
::micromsg::SKBuiltinBuffer_t* GetSuggestAliasResponse::release_verifybuff() {
  // @@protoc_insertion_point(field_release:micromsg.GetSuggestAliasResponse.VerifyBuff)
  clear_has_verifybuff();
  ::micromsg::SKBuiltinBuffer_t* temp = verifybuff_;
  verifybuff_ = NULL;
  return temp;
}
void GetSuggestAliasResponse::set_allocated_verifybuff(::micromsg::SKBuiltinBuffer_t* verifybuff) {
  delete verifybuff_;
  verifybuff_ = verifybuff;
  if (verifybuff) {
    set_has_verifybuff();
  } else {
    clear_has_verifybuff();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetSuggestAliasResponse.VerifyBuff)
}

// optional int32 UserNameRet = 6;
bool GetSuggestAliasResponse::has_usernameret() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GetSuggestAliasResponse::set_has_usernameret() {
  _has_bits_[0] |= 0x00000010u;
}
void GetSuggestAliasResponse::clear_has_usernameret() {
  _has_bits_[0] &= ~0x00000010u;
}
void GetSuggestAliasResponse::clear_usernameret() {
  usernameret_ = 0;
  clear_has_usernameret();
}
::google::protobuf::int32 GetSuggestAliasResponse::usernameret() const {
  // @@protoc_insertion_point(field_get:micromsg.GetSuggestAliasResponse.UserNameRet)
  return usernameret_;
}
void GetSuggestAliasResponse::set_usernameret(::google::protobuf::int32 value) {
  set_has_usernameret();
  usernameret_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetSuggestAliasResponse.UserNameRet)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BindOpMobileRequest::kBaseRequestFieldNumber;
const int BindOpMobileRequest::kUserNameFieldNumber;
const int BindOpMobileRequest::kMobileFieldNumber;
const int BindOpMobileRequest::kOpcodeFieldNumber;
const int BindOpMobileRequest::kVerifycodeFieldNumber;
const int BindOpMobileRequest::kDialFlagFieldNumber;
const int BindOpMobileRequest::kDialLangFieldNumber;
const int BindOpMobileRequest::kAuthTicketFieldNumber;
const int BindOpMobileRequest::kForceRegFieldNumber;
const int BindOpMobileRequest::kSafeDeviceNameFieldNumber;
const int BindOpMobileRequest::kSafeDeviceTypeFieldNumber;
const int BindOpMobileRequest::kRandomEncryKeyFieldNumber;
const int BindOpMobileRequest::kLanguageFieldNumber;
const int BindOpMobileRequest::kInputMobileRetrysFieldNumber;
const int BindOpMobileRequest::kAdjustRetFieldNumber;
const int BindOpMobileRequest::kClientSeqIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BindOpMobileRequest::BindOpMobileRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BindOpMobileRequest)
}
BindOpMobileRequest::BindOpMobileRequest(const BindOpMobileRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  mobile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mobile()) {
    mobile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mobile_);
  }
  verifycode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_verifycode()) {
    verifycode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifycode_);
  }
  diallang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_diallang()) {
    diallang_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.diallang_);
  }
  authticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_authticket()) {
    authticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authticket_);
  }
  safedevicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_safedevicename()) {
    safedevicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.safedevicename_);
  }
  safedevicetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_safedevicetype()) {
    safedevicetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.safedevicetype_);
  }
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_language()) {
    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  clientseqid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientseqid()) {
    clientseqid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientseqid_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_randomencrykey()) {
    randomencrykey_ = new ::micromsg::SKBuiltinBuffer_t(*from.randomencrykey_);
  } else {
    randomencrykey_ = NULL;
  }
  ::memcpy(&opcode_, &from.opcode_,
    reinterpret_cast<char*>(&adjustret_) -
    reinterpret_cast<char*>(&opcode_) + sizeof(adjustret_));
  // @@protoc_insertion_point(copy_constructor:micromsg.BindOpMobileRequest)
}

void BindOpMobileRequest::SharedCtor() {
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifycode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diallang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  safedevicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  safedevicetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientseqid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&adjustret_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(adjustret_));
}

BindOpMobileRequest::~BindOpMobileRequest() {
  // @@protoc_insertion_point(destructor:micromsg.BindOpMobileRequest)
  SharedDtor();
}

void BindOpMobileRequest::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifycode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diallang_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  safedevicename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  safedevicetype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientseqid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete randomencrykey_;
  }
}

void BindOpMobileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BindOpMobileRequest::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BindOpMobileRequest& BindOpMobileRequest::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

BindOpMobileRequest* BindOpMobileRequest::New(::google::protobuf::Arena* arena) const {
  BindOpMobileRequest* n = new BindOpMobileRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BindOpMobileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BindOpMobileRequest)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_username()) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
    if (has_mobile()) {
      GOOGLE_DCHECK(!mobile_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mobile_.UnsafeRawStringPointer())->clear();
    }
    if (has_verifycode()) {
      GOOGLE_DCHECK(!verifycode_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*verifycode_.UnsafeRawStringPointer())->clear();
    }
    if (has_diallang()) {
      GOOGLE_DCHECK(!diallang_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*diallang_.UnsafeRawStringPointer())->clear();
    }
    if (has_authticket()) {
      GOOGLE_DCHECK(!authticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*authticket_.UnsafeRawStringPointer())->clear();
    }
    if (has_safedevicename()) {
      GOOGLE_DCHECK(!safedevicename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*safedevicename_.UnsafeRawStringPointer())->clear();
    }
    if (has_safedevicetype()) {
      GOOGLE_DCHECK(!safedevicetype_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*safedevicetype_.UnsafeRawStringPointer())->clear();
    }
    if (has_language()) {
      GOOGLE_DCHECK(!language_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*language_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[8 / 32] & 1792u) {
    if (has_clientseqid()) {
      GOOGLE_DCHECK(!clientseqid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*clientseqid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_randomencrykey()) {
      GOOGLE_DCHECK(randomencrykey_ != NULL);
      randomencrykey_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 63488u) {
    ::memset(&opcode_, 0, reinterpret_cast<char*>(&adjustret_) -
      reinterpret_cast<char*>(&opcode_) + sizeof(adjustret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BindOpMobileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BindOpMobileRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string UserName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BindOpMobileRequest.UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Mobile = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mobile().data(), this->mobile().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BindOpMobileRequest.Mobile");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Opcode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_opcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Verifycode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verifycode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->verifycode().data(), this->verifycode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BindOpMobileRequest.Verifycode");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 DialFlag = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_dialflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dialflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string DialLang = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_diallang()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->diallang().data(), this->diallang().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BindOpMobileRequest.DialLang");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AuthTicket = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authticket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->authticket().data(), this->authticket().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BindOpMobileRequest.AuthTicket");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ForceReg = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_forcereg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forcereg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string SafeDeviceName = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_safedevicename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->safedevicename().data(), this->safedevicename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BindOpMobileRequest.SafeDeviceName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string SafeDeviceType = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_safedevicetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->safedevicetype().data(), this->safedevicetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BindOpMobileRequest.SafeDeviceType");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t RandomEncryKey = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_randomencrykey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Language = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BindOpMobileRequest.Language");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 InputMobileRetrys = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_inputmobileretrys();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inputmobileretrys_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 AdjustRet = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_adjustret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adjustret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ClientSeqID = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientseqid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientseqid().data(), this->clientseqid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BindOpMobileRequest.ClientSeqID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BindOpMobileRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BindOpMobileRequest)
  return false;
#undef DO_
}

void BindOpMobileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BindOpMobileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string UserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindOpMobileRequest.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // optional string Mobile = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mobile().data(), this->mobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindOpMobileRequest.Mobile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mobile(), output);
  }

  // required int32 Opcode = 4;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->opcode(), output);
  }

  // optional string Verifycode = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verifycode().data(), this->verifycode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindOpMobileRequest.Verifycode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->verifycode(), output);
  }

  // optional int32 DialFlag = 6;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dialflag(), output);
  }

  // optional string DialLang = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->diallang().data(), this->diallang().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindOpMobileRequest.DialLang");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->diallang(), output);
  }

  // optional string AuthTicket = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authticket().data(), this->authticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindOpMobileRequest.AuthTicket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->authticket(), output);
  }

  // optional uint32 ForceReg = 9;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->forcereg(), output);
  }

  // optional string SafeDeviceName = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->safedevicename().data(), this->safedevicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindOpMobileRequest.SafeDeviceName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->safedevicename(), output);
  }

  // optional string SafeDeviceType = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->safedevicetype().data(), this->safedevicetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindOpMobileRequest.SafeDeviceType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->safedevicetype(), output);
  }

  // optional .micromsg.SKBuiltinBuffer_t RandomEncryKey = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->randomencrykey_, output);
  }

  // optional string Language = 13;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindOpMobileRequest.Language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->language(), output);
  }

  // optional uint32 InputMobileRetrys = 14;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->inputmobileretrys(), output);
  }

  // optional uint32 AdjustRet = 15;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->adjustret(), output);
  }

  // optional string ClientSeqID = 16;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientseqid().data(), this->clientseqid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindOpMobileRequest.ClientSeqID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->clientseqid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BindOpMobileRequest)
}

::google::protobuf::uint8* BindOpMobileRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BindOpMobileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string UserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindOpMobileRequest.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // optional string Mobile = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mobile().data(), this->mobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindOpMobileRequest.Mobile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mobile(), target);
  }

  // required int32 Opcode = 4;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->opcode(), target);
  }

  // optional string Verifycode = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verifycode().data(), this->verifycode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindOpMobileRequest.Verifycode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->verifycode(), target);
  }

  // optional int32 DialFlag = 6;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dialflag(), target);
  }

  // optional string DialLang = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->diallang().data(), this->diallang().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindOpMobileRequest.DialLang");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->diallang(), target);
  }

  // optional string AuthTicket = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authticket().data(), this->authticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindOpMobileRequest.AuthTicket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->authticket(), target);
  }

  // optional uint32 ForceReg = 9;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->forcereg(), target);
  }

  // optional string SafeDeviceName = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->safedevicename().data(), this->safedevicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindOpMobileRequest.SafeDeviceName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->safedevicename(), target);
  }

  // optional string SafeDeviceType = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->safedevicetype().data(), this->safedevicetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindOpMobileRequest.SafeDeviceType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->safedevicetype(), target);
  }

  // optional .micromsg.SKBuiltinBuffer_t RandomEncryKey = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->randomencrykey_, deterministic, target);
  }

  // optional string Language = 13;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindOpMobileRequest.Language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->language(), target);
  }

  // optional uint32 InputMobileRetrys = 14;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->inputmobileretrys(), target);
  }

  // optional uint32 AdjustRet = 15;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->adjustret(), target);
  }

  // optional string ClientSeqID = 16;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientseqid().data(), this->clientseqid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindOpMobileRequest.ClientSeqID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->clientseqid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BindOpMobileRequest)
  return target;
}

size_t BindOpMobileRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.BindOpMobileRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_opcode()) {
    // required int32 Opcode = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->opcode());
  }

  return total_size;
}
size_t BindOpMobileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BindOpMobileRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000a00) ^ 0x00000a00) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required int32 Opcode = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->opcode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string UserName = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string Mobile = 3;
    if (has_mobile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobile());
    }

    // optional string Verifycode = 5;
    if (has_verifycode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verifycode());
    }

    // optional string DialLang = 7;
    if (has_diallang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->diallang());
    }

    // optional string AuthTicket = 8;
    if (has_authticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authticket());
    }

    // optional string SafeDeviceName = 10;
    if (has_safedevicename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->safedevicename());
    }

    // optional string SafeDeviceType = 11;
    if (has_safedevicetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->safedevicetype());
    }

    // optional string Language = 13;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

  }
  // optional string ClientSeqID = 16;
  if (has_clientseqid()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientseqid());
  }

  // optional .micromsg.SKBuiltinBuffer_t RandomEncryKey = 12;
  if (has_randomencrykey()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->randomencrykey_);
  }

  if (_has_bits_[8 / 32] & 61440u) {
    // optional int32 DialFlag = 6;
    if (has_dialflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dialflag());
    }

    // optional uint32 ForceReg = 9;
    if (has_forcereg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->forcereg());
    }

    // optional uint32 InputMobileRetrys = 14;
    if (has_inputmobileretrys()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inputmobileretrys());
    }

    // optional uint32 AdjustRet = 15;
    if (has_adjustret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->adjustret());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BindOpMobileRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BindOpMobileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BindOpMobileRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BindOpMobileRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BindOpMobileRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BindOpMobileRequest)
    MergeFrom(*source);
  }
}

void BindOpMobileRequest::MergeFrom(const BindOpMobileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BindOpMobileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_mobile();
      mobile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mobile_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_verifycode();
      verifycode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifycode_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_diallang();
      diallang_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.diallang_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_authticket();
      authticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authticket_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_safedevicename();
      safedevicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.safedevicename_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_safedevicetype();
      safedevicetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.safedevicetype_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_language();
      language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_clientseqid();
      clientseqid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientseqid_);
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_randomencrykey()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.randomencrykey());
    }
    if (cached_has_bits & 0x00000800u) {
      opcode_ = from.opcode_;
    }
    if (cached_has_bits & 0x00001000u) {
      dialflag_ = from.dialflag_;
    }
    if (cached_has_bits & 0x00002000u) {
      forcereg_ = from.forcereg_;
    }
    if (cached_has_bits & 0x00004000u) {
      inputmobileretrys_ = from.inputmobileretrys_;
    }
    if (cached_has_bits & 0x00008000u) {
      adjustret_ = from.adjustret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BindOpMobileRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BindOpMobileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BindOpMobileRequest::CopyFrom(const BindOpMobileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BindOpMobileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BindOpMobileRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000a00) != 0x00000a00) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_randomencrykey()) {
    if (!this->randomencrykey_->IsInitialized()) return false;
  }
  return true;
}

void BindOpMobileRequest::Swap(BindOpMobileRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BindOpMobileRequest::InternalSwap(BindOpMobileRequest* other) {
  username_.Swap(&other->username_);
  mobile_.Swap(&other->mobile_);
  verifycode_.Swap(&other->verifycode_);
  diallang_.Swap(&other->diallang_);
  authticket_.Swap(&other->authticket_);
  safedevicename_.Swap(&other->safedevicename_);
  safedevicetype_.Swap(&other->safedevicetype_);
  language_.Swap(&other->language_);
  clientseqid_.Swap(&other->clientseqid_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(randomencrykey_, other->randomencrykey_);
  std::swap(opcode_, other->opcode_);
  std::swap(dialflag_, other->dialflag_);
  std::swap(forcereg_, other->forcereg_);
  std::swap(inputmobileretrys_, other->inputmobileretrys_);
  std::swap(adjustret_, other->adjustret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BindOpMobileRequest::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BindOpMobileRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool BindOpMobileRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void BindOpMobileRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000200u;
}
void BindOpMobileRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000200u;
}
void BindOpMobileRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& BindOpMobileRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.BindOpMobileRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* BindOpMobileRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BindOpMobileRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* BindOpMobileRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.BindOpMobileRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void BindOpMobileRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindOpMobileRequest.BaseRequest)
}

// optional string UserName = 2;
bool BindOpMobileRequest::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BindOpMobileRequest::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void BindOpMobileRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void BindOpMobileRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& BindOpMobileRequest::username() const {
  // @@protoc_insertion_point(field_get:micromsg.BindOpMobileRequest.UserName)
  return username_.GetNoArena();
}
void BindOpMobileRequest::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BindOpMobileRequest.UserName)
}
#if LANG_CXX11
void BindOpMobileRequest::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BindOpMobileRequest.UserName)
}
#endif
void BindOpMobileRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BindOpMobileRequest.UserName)
}
void BindOpMobileRequest::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BindOpMobileRequest.UserName)
}
::std::string* BindOpMobileRequest::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.BindOpMobileRequest.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BindOpMobileRequest::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.BindOpMobileRequest.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BindOpMobileRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindOpMobileRequest.UserName)
}

// optional string Mobile = 3;
bool BindOpMobileRequest::has_mobile() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BindOpMobileRequest::set_has_mobile() {
  _has_bits_[0] |= 0x00000002u;
}
void BindOpMobileRequest::clear_has_mobile() {
  _has_bits_[0] &= ~0x00000002u;
}
void BindOpMobileRequest::clear_mobile() {
  mobile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mobile();
}
const ::std::string& BindOpMobileRequest::mobile() const {
  // @@protoc_insertion_point(field_get:micromsg.BindOpMobileRequest.Mobile)
  return mobile_.GetNoArena();
}
void BindOpMobileRequest::set_mobile(const ::std::string& value) {
  set_has_mobile();
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BindOpMobileRequest.Mobile)
}
#if LANG_CXX11
void BindOpMobileRequest::set_mobile(::std::string&& value) {
  set_has_mobile();
  mobile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BindOpMobileRequest.Mobile)
}
#endif
void BindOpMobileRequest::set_mobile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mobile();
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BindOpMobileRequest.Mobile)
}
void BindOpMobileRequest::set_mobile(const char* value, size_t size) {
  set_has_mobile();
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BindOpMobileRequest.Mobile)
}
::std::string* BindOpMobileRequest::mutable_mobile() {
  set_has_mobile();
  // @@protoc_insertion_point(field_mutable:micromsg.BindOpMobileRequest.Mobile)
  return mobile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BindOpMobileRequest::release_mobile() {
  // @@protoc_insertion_point(field_release:micromsg.BindOpMobileRequest.Mobile)
  clear_has_mobile();
  return mobile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BindOpMobileRequest::set_allocated_mobile(::std::string* mobile) {
  if (mobile != NULL) {
    set_has_mobile();
  } else {
    clear_has_mobile();
  }
  mobile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mobile);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindOpMobileRequest.Mobile)
}

// required int32 Opcode = 4;
bool BindOpMobileRequest::has_opcode() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void BindOpMobileRequest::set_has_opcode() {
  _has_bits_[0] |= 0x00000800u;
}
void BindOpMobileRequest::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000800u;
}
void BindOpMobileRequest::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
::google::protobuf::int32 BindOpMobileRequest::opcode() const {
  // @@protoc_insertion_point(field_get:micromsg.BindOpMobileRequest.Opcode)
  return opcode_;
}
void BindOpMobileRequest::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BindOpMobileRequest.Opcode)
}

// optional string Verifycode = 5;
bool BindOpMobileRequest::has_verifycode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BindOpMobileRequest::set_has_verifycode() {
  _has_bits_[0] |= 0x00000004u;
}
void BindOpMobileRequest::clear_has_verifycode() {
  _has_bits_[0] &= ~0x00000004u;
}
void BindOpMobileRequest::clear_verifycode() {
  verifycode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verifycode();
}
const ::std::string& BindOpMobileRequest::verifycode() const {
  // @@protoc_insertion_point(field_get:micromsg.BindOpMobileRequest.Verifycode)
  return verifycode_.GetNoArena();
}
void BindOpMobileRequest::set_verifycode(const ::std::string& value) {
  set_has_verifycode();
  verifycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BindOpMobileRequest.Verifycode)
}
#if LANG_CXX11
void BindOpMobileRequest::set_verifycode(::std::string&& value) {
  set_has_verifycode();
  verifycode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BindOpMobileRequest.Verifycode)
}
#endif
void BindOpMobileRequest::set_verifycode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verifycode();
  verifycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BindOpMobileRequest.Verifycode)
}
void BindOpMobileRequest::set_verifycode(const char* value, size_t size) {
  set_has_verifycode();
  verifycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BindOpMobileRequest.Verifycode)
}
::std::string* BindOpMobileRequest::mutable_verifycode() {
  set_has_verifycode();
  // @@protoc_insertion_point(field_mutable:micromsg.BindOpMobileRequest.Verifycode)
  return verifycode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BindOpMobileRequest::release_verifycode() {
  // @@protoc_insertion_point(field_release:micromsg.BindOpMobileRequest.Verifycode)
  clear_has_verifycode();
  return verifycode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BindOpMobileRequest::set_allocated_verifycode(::std::string* verifycode) {
  if (verifycode != NULL) {
    set_has_verifycode();
  } else {
    clear_has_verifycode();
  }
  verifycode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifycode);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindOpMobileRequest.Verifycode)
}

// optional int32 DialFlag = 6;
bool BindOpMobileRequest::has_dialflag() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void BindOpMobileRequest::set_has_dialflag() {
  _has_bits_[0] |= 0x00001000u;
}
void BindOpMobileRequest::clear_has_dialflag() {
  _has_bits_[0] &= ~0x00001000u;
}
void BindOpMobileRequest::clear_dialflag() {
  dialflag_ = 0;
  clear_has_dialflag();
}
::google::protobuf::int32 BindOpMobileRequest::dialflag() const {
  // @@protoc_insertion_point(field_get:micromsg.BindOpMobileRequest.DialFlag)
  return dialflag_;
}
void BindOpMobileRequest::set_dialflag(::google::protobuf::int32 value) {
  set_has_dialflag();
  dialflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BindOpMobileRequest.DialFlag)
}

// optional string DialLang = 7;
bool BindOpMobileRequest::has_diallang() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BindOpMobileRequest::set_has_diallang() {
  _has_bits_[0] |= 0x00000008u;
}
void BindOpMobileRequest::clear_has_diallang() {
  _has_bits_[0] &= ~0x00000008u;
}
void BindOpMobileRequest::clear_diallang() {
  diallang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_diallang();
}
const ::std::string& BindOpMobileRequest::diallang() const {
  // @@protoc_insertion_point(field_get:micromsg.BindOpMobileRequest.DialLang)
  return diallang_.GetNoArena();
}
void BindOpMobileRequest::set_diallang(const ::std::string& value) {
  set_has_diallang();
  diallang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BindOpMobileRequest.DialLang)
}
#if LANG_CXX11
void BindOpMobileRequest::set_diallang(::std::string&& value) {
  set_has_diallang();
  diallang_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BindOpMobileRequest.DialLang)
}
#endif
void BindOpMobileRequest::set_diallang(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_diallang();
  diallang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BindOpMobileRequest.DialLang)
}
void BindOpMobileRequest::set_diallang(const char* value, size_t size) {
  set_has_diallang();
  diallang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BindOpMobileRequest.DialLang)
}
::std::string* BindOpMobileRequest::mutable_diallang() {
  set_has_diallang();
  // @@protoc_insertion_point(field_mutable:micromsg.BindOpMobileRequest.DialLang)
  return diallang_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BindOpMobileRequest::release_diallang() {
  // @@protoc_insertion_point(field_release:micromsg.BindOpMobileRequest.DialLang)
  clear_has_diallang();
  return diallang_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BindOpMobileRequest::set_allocated_diallang(::std::string* diallang) {
  if (diallang != NULL) {
    set_has_diallang();
  } else {
    clear_has_diallang();
  }
  diallang_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), diallang);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindOpMobileRequest.DialLang)
}

// optional string AuthTicket = 8;
bool BindOpMobileRequest::has_authticket() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BindOpMobileRequest::set_has_authticket() {
  _has_bits_[0] |= 0x00000010u;
}
void BindOpMobileRequest::clear_has_authticket() {
  _has_bits_[0] &= ~0x00000010u;
}
void BindOpMobileRequest::clear_authticket() {
  authticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_authticket();
}
const ::std::string& BindOpMobileRequest::authticket() const {
  // @@protoc_insertion_point(field_get:micromsg.BindOpMobileRequest.AuthTicket)
  return authticket_.GetNoArena();
}
void BindOpMobileRequest::set_authticket(const ::std::string& value) {
  set_has_authticket();
  authticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BindOpMobileRequest.AuthTicket)
}
#if LANG_CXX11
void BindOpMobileRequest::set_authticket(::std::string&& value) {
  set_has_authticket();
  authticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BindOpMobileRequest.AuthTicket)
}
#endif
void BindOpMobileRequest::set_authticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_authticket();
  authticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BindOpMobileRequest.AuthTicket)
}
void BindOpMobileRequest::set_authticket(const char* value, size_t size) {
  set_has_authticket();
  authticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BindOpMobileRequest.AuthTicket)
}
::std::string* BindOpMobileRequest::mutable_authticket() {
  set_has_authticket();
  // @@protoc_insertion_point(field_mutable:micromsg.BindOpMobileRequest.AuthTicket)
  return authticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BindOpMobileRequest::release_authticket() {
  // @@protoc_insertion_point(field_release:micromsg.BindOpMobileRequest.AuthTicket)
  clear_has_authticket();
  return authticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BindOpMobileRequest::set_allocated_authticket(::std::string* authticket) {
  if (authticket != NULL) {
    set_has_authticket();
  } else {
    clear_has_authticket();
  }
  authticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), authticket);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindOpMobileRequest.AuthTicket)
}

// optional uint32 ForceReg = 9;
bool BindOpMobileRequest::has_forcereg() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void BindOpMobileRequest::set_has_forcereg() {
  _has_bits_[0] |= 0x00002000u;
}
void BindOpMobileRequest::clear_has_forcereg() {
  _has_bits_[0] &= ~0x00002000u;
}
void BindOpMobileRequest::clear_forcereg() {
  forcereg_ = 0u;
  clear_has_forcereg();
}
::google::protobuf::uint32 BindOpMobileRequest::forcereg() const {
  // @@protoc_insertion_point(field_get:micromsg.BindOpMobileRequest.ForceReg)
  return forcereg_;
}
void BindOpMobileRequest::set_forcereg(::google::protobuf::uint32 value) {
  set_has_forcereg();
  forcereg_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BindOpMobileRequest.ForceReg)
}

// optional string SafeDeviceName = 10;
bool BindOpMobileRequest::has_safedevicename() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BindOpMobileRequest::set_has_safedevicename() {
  _has_bits_[0] |= 0x00000020u;
}
void BindOpMobileRequest::clear_has_safedevicename() {
  _has_bits_[0] &= ~0x00000020u;
}
void BindOpMobileRequest::clear_safedevicename() {
  safedevicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_safedevicename();
}
const ::std::string& BindOpMobileRequest::safedevicename() const {
  // @@protoc_insertion_point(field_get:micromsg.BindOpMobileRequest.SafeDeviceName)
  return safedevicename_.GetNoArena();
}
void BindOpMobileRequest::set_safedevicename(const ::std::string& value) {
  set_has_safedevicename();
  safedevicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BindOpMobileRequest.SafeDeviceName)
}
#if LANG_CXX11
void BindOpMobileRequest::set_safedevicename(::std::string&& value) {
  set_has_safedevicename();
  safedevicename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BindOpMobileRequest.SafeDeviceName)
}
#endif
void BindOpMobileRequest::set_safedevicename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_safedevicename();
  safedevicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BindOpMobileRequest.SafeDeviceName)
}
void BindOpMobileRequest::set_safedevicename(const char* value, size_t size) {
  set_has_safedevicename();
  safedevicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BindOpMobileRequest.SafeDeviceName)
}
::std::string* BindOpMobileRequest::mutable_safedevicename() {
  set_has_safedevicename();
  // @@protoc_insertion_point(field_mutable:micromsg.BindOpMobileRequest.SafeDeviceName)
  return safedevicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BindOpMobileRequest::release_safedevicename() {
  // @@protoc_insertion_point(field_release:micromsg.BindOpMobileRequest.SafeDeviceName)
  clear_has_safedevicename();
  return safedevicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BindOpMobileRequest::set_allocated_safedevicename(::std::string* safedevicename) {
  if (safedevicename != NULL) {
    set_has_safedevicename();
  } else {
    clear_has_safedevicename();
  }
  safedevicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), safedevicename);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindOpMobileRequest.SafeDeviceName)
}

// optional string SafeDeviceType = 11;
bool BindOpMobileRequest::has_safedevicetype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BindOpMobileRequest::set_has_safedevicetype() {
  _has_bits_[0] |= 0x00000040u;
}
void BindOpMobileRequest::clear_has_safedevicetype() {
  _has_bits_[0] &= ~0x00000040u;
}
void BindOpMobileRequest::clear_safedevicetype() {
  safedevicetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_safedevicetype();
}
const ::std::string& BindOpMobileRequest::safedevicetype() const {
  // @@protoc_insertion_point(field_get:micromsg.BindOpMobileRequest.SafeDeviceType)
  return safedevicetype_.GetNoArena();
}
void BindOpMobileRequest::set_safedevicetype(const ::std::string& value) {
  set_has_safedevicetype();
  safedevicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BindOpMobileRequest.SafeDeviceType)
}
#if LANG_CXX11
void BindOpMobileRequest::set_safedevicetype(::std::string&& value) {
  set_has_safedevicetype();
  safedevicetype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BindOpMobileRequest.SafeDeviceType)
}
#endif
void BindOpMobileRequest::set_safedevicetype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_safedevicetype();
  safedevicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BindOpMobileRequest.SafeDeviceType)
}
void BindOpMobileRequest::set_safedevicetype(const char* value, size_t size) {
  set_has_safedevicetype();
  safedevicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BindOpMobileRequest.SafeDeviceType)
}
::std::string* BindOpMobileRequest::mutable_safedevicetype() {
  set_has_safedevicetype();
  // @@protoc_insertion_point(field_mutable:micromsg.BindOpMobileRequest.SafeDeviceType)
  return safedevicetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BindOpMobileRequest::release_safedevicetype() {
  // @@protoc_insertion_point(field_release:micromsg.BindOpMobileRequest.SafeDeviceType)
  clear_has_safedevicetype();
  return safedevicetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BindOpMobileRequest::set_allocated_safedevicetype(::std::string* safedevicetype) {
  if (safedevicetype != NULL) {
    set_has_safedevicetype();
  } else {
    clear_has_safedevicetype();
  }
  safedevicetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), safedevicetype);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindOpMobileRequest.SafeDeviceType)
}

// optional .micromsg.SKBuiltinBuffer_t RandomEncryKey = 12;
bool BindOpMobileRequest::has_randomencrykey() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void BindOpMobileRequest::set_has_randomencrykey() {
  _has_bits_[0] |= 0x00000400u;
}
void BindOpMobileRequest::clear_has_randomencrykey() {
  _has_bits_[0] &= ~0x00000400u;
}
void BindOpMobileRequest::clear_randomencrykey() {
  if (randomencrykey_ != NULL) randomencrykey_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_randomencrykey();
}
const ::micromsg::SKBuiltinBuffer_t& BindOpMobileRequest::randomencrykey() const {
  // @@protoc_insertion_point(field_get:micromsg.BindOpMobileRequest.RandomEncryKey)
  return randomencrykey_ != NULL ? *randomencrykey_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* BindOpMobileRequest::mutable_randomencrykey() {
  set_has_randomencrykey();
  if (randomencrykey_ == NULL) {
    randomencrykey_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BindOpMobileRequest.RandomEncryKey)
  return randomencrykey_;
}
::micromsg::SKBuiltinBuffer_t* BindOpMobileRequest::release_randomencrykey() {
  // @@protoc_insertion_point(field_release:micromsg.BindOpMobileRequest.RandomEncryKey)
  clear_has_randomencrykey();
  ::micromsg::SKBuiltinBuffer_t* temp = randomencrykey_;
  randomencrykey_ = NULL;
  return temp;
}
void BindOpMobileRequest::set_allocated_randomencrykey(::micromsg::SKBuiltinBuffer_t* randomencrykey) {
  delete randomencrykey_;
  randomencrykey_ = randomencrykey;
  if (randomencrykey) {
    set_has_randomencrykey();
  } else {
    clear_has_randomencrykey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindOpMobileRequest.RandomEncryKey)
}

// optional string Language = 13;
bool BindOpMobileRequest::has_language() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BindOpMobileRequest::set_has_language() {
  _has_bits_[0] |= 0x00000080u;
}
void BindOpMobileRequest::clear_has_language() {
  _has_bits_[0] &= ~0x00000080u;
}
void BindOpMobileRequest::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_language();
}
const ::std::string& BindOpMobileRequest::language() const {
  // @@protoc_insertion_point(field_get:micromsg.BindOpMobileRequest.Language)
  return language_.GetNoArena();
}
void BindOpMobileRequest::set_language(const ::std::string& value) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BindOpMobileRequest.Language)
}
#if LANG_CXX11
void BindOpMobileRequest::set_language(::std::string&& value) {
  set_has_language();
  language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BindOpMobileRequest.Language)
}
#endif
void BindOpMobileRequest::set_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BindOpMobileRequest.Language)
}
void BindOpMobileRequest::set_language(const char* value, size_t size) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BindOpMobileRequest.Language)
}
::std::string* BindOpMobileRequest::mutable_language() {
  set_has_language();
  // @@protoc_insertion_point(field_mutable:micromsg.BindOpMobileRequest.Language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BindOpMobileRequest::release_language() {
  // @@protoc_insertion_point(field_release:micromsg.BindOpMobileRequest.Language)
  clear_has_language();
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BindOpMobileRequest::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    set_has_language();
  } else {
    clear_has_language();
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindOpMobileRequest.Language)
}

// optional uint32 InputMobileRetrys = 14;
bool BindOpMobileRequest::has_inputmobileretrys() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void BindOpMobileRequest::set_has_inputmobileretrys() {
  _has_bits_[0] |= 0x00004000u;
}
void BindOpMobileRequest::clear_has_inputmobileretrys() {
  _has_bits_[0] &= ~0x00004000u;
}
void BindOpMobileRequest::clear_inputmobileretrys() {
  inputmobileretrys_ = 0u;
  clear_has_inputmobileretrys();
}
::google::protobuf::uint32 BindOpMobileRequest::inputmobileretrys() const {
  // @@protoc_insertion_point(field_get:micromsg.BindOpMobileRequest.InputMobileRetrys)
  return inputmobileretrys_;
}
void BindOpMobileRequest::set_inputmobileretrys(::google::protobuf::uint32 value) {
  set_has_inputmobileretrys();
  inputmobileretrys_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BindOpMobileRequest.InputMobileRetrys)
}

// optional uint32 AdjustRet = 15;
bool BindOpMobileRequest::has_adjustret() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void BindOpMobileRequest::set_has_adjustret() {
  _has_bits_[0] |= 0x00008000u;
}
void BindOpMobileRequest::clear_has_adjustret() {
  _has_bits_[0] &= ~0x00008000u;
}
void BindOpMobileRequest::clear_adjustret() {
  adjustret_ = 0u;
  clear_has_adjustret();
}
::google::protobuf::uint32 BindOpMobileRequest::adjustret() const {
  // @@protoc_insertion_point(field_get:micromsg.BindOpMobileRequest.AdjustRet)
  return adjustret_;
}
void BindOpMobileRequest::set_adjustret(::google::protobuf::uint32 value) {
  set_has_adjustret();
  adjustret_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BindOpMobileRequest.AdjustRet)
}

// optional string ClientSeqID = 16;
bool BindOpMobileRequest::has_clientseqid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void BindOpMobileRequest::set_has_clientseqid() {
  _has_bits_[0] |= 0x00000100u;
}
void BindOpMobileRequest::clear_has_clientseqid() {
  _has_bits_[0] &= ~0x00000100u;
}
void BindOpMobileRequest::clear_clientseqid() {
  clientseqid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientseqid();
}
const ::std::string& BindOpMobileRequest::clientseqid() const {
  // @@protoc_insertion_point(field_get:micromsg.BindOpMobileRequest.ClientSeqID)
  return clientseqid_.GetNoArena();
}
void BindOpMobileRequest::set_clientseqid(const ::std::string& value) {
  set_has_clientseqid();
  clientseqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BindOpMobileRequest.ClientSeqID)
}
#if LANG_CXX11
void BindOpMobileRequest::set_clientseqid(::std::string&& value) {
  set_has_clientseqid();
  clientseqid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BindOpMobileRequest.ClientSeqID)
}
#endif
void BindOpMobileRequest::set_clientseqid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientseqid();
  clientseqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BindOpMobileRequest.ClientSeqID)
}
void BindOpMobileRequest::set_clientseqid(const char* value, size_t size) {
  set_has_clientseqid();
  clientseqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BindOpMobileRequest.ClientSeqID)
}
::std::string* BindOpMobileRequest::mutable_clientseqid() {
  set_has_clientseqid();
  // @@protoc_insertion_point(field_mutable:micromsg.BindOpMobileRequest.ClientSeqID)
  return clientseqid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BindOpMobileRequest::release_clientseqid() {
  // @@protoc_insertion_point(field_release:micromsg.BindOpMobileRequest.ClientSeqID)
  clear_has_clientseqid();
  return clientseqid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BindOpMobileRequest::set_allocated_clientseqid(::std::string* clientseqid) {
  if (clientseqid != NULL) {
    set_has_clientseqid();
  } else {
    clear_has_clientseqid();
  }
  clientseqid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientseqid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindOpMobileRequest.ClientSeqID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BindOpMobileResponse::kBaseResponseFieldNumber;
const int BindOpMobileResponse::kTicketFieldNumber;
const int BindOpMobileResponse::kSmsNoFieldNumber;
const int BindOpMobileResponse::kNeedSetPwdFieldNumber;
const int BindOpMobileResponse::kPwdFieldNumber;
const int BindOpMobileResponse::kUsernameFieldNumber;
const int BindOpMobileResponse::kNewHostListFieldNumber;
const int BindOpMobileResponse::kBuiltinIPListFieldNumber;
const int BindOpMobileResponse::kNetworkControlFieldNumber;
const int BindOpMobileResponse::kAuthTicketFieldNumber;
const int BindOpMobileResponse::kSafeDeviceFieldNumber;
const int BindOpMobileResponse::kCCFieldNumber;
const int BindOpMobileResponse::kObsoleteItem1FieldNumber;
const int BindOpMobileResponse::kSafeDeviceListFieldNumber;
const int BindOpMobileResponse::kPureMobileFieldNumber;
const int BindOpMobileResponse::kFormatedMobileFieldNumber;
const int BindOpMobileResponse::kShowStyleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BindOpMobileResponse::BindOpMobileResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BindOpMobileResponse)
}
BindOpMobileResponse::BindOpMobileResponse(const BindOpMobileResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ticket()) {
    ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
  }
  smsno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_smsno()) {
    smsno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smsno_);
  }
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pwd()) {
    pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  authticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_authticket()) {
    authticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authticket_);
  }
  cc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cc()) {
    cc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cc_);
  }
  puremobile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_puremobile()) {
    puremobile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.puremobile_);
  }
  formatedmobile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_formatedmobile()) {
    formatedmobile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.formatedmobile_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_newhostlist()) {
    newhostlist_ = new ::micromsg::HostList(*from.newhostlist_);
  } else {
    newhostlist_ = NULL;
  }
  if (from.has_builtiniplist()) {
    builtiniplist_ = new ::micromsg::BuiltinIPList(*from.builtiniplist_);
  } else {
    builtiniplist_ = NULL;
  }
  if (from.has_networkcontrol()) {
    networkcontrol_ = new ::micromsg::NetworkControl(*from.networkcontrol_);
  } else {
    networkcontrol_ = NULL;
  }
  if (from.has_safedevicelist()) {
    safedevicelist_ = new ::micromsg::SafeDeviceList(*from.safedevicelist_);
  } else {
    safedevicelist_ = NULL;
  }
  if (from.has_showstyle()) {
    showstyle_ = new ::micromsg::ShowStyleKey(*from.showstyle_);
  } else {
    showstyle_ = NULL;
  }
  ::memcpy(&needsetpwd_, &from.needsetpwd_,
    reinterpret_cast<char*>(&obsoleteitem1_) -
    reinterpret_cast<char*>(&needsetpwd_) + sizeof(obsoleteitem1_));
  // @@protoc_insertion_point(copy_constructor:micromsg.BindOpMobileResponse)
}

void BindOpMobileResponse::SharedCtor() {
  _cached_size_ = 0;
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  puremobile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  formatedmobile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&obsoleteitem1_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(obsoleteitem1_));
}

BindOpMobileResponse::~BindOpMobileResponse() {
  // @@protoc_insertion_point(destructor:micromsg.BindOpMobileResponse)
  SharedDtor();
}

void BindOpMobileResponse::SharedDtor() {
  ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsno_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  puremobile_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  formatedmobile_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete newhostlist_;
  }
  if (this != internal_default_instance()) {
    delete builtiniplist_;
  }
  if (this != internal_default_instance()) {
    delete networkcontrol_;
  }
  if (this != internal_default_instance()) {
    delete safedevicelist_;
  }
  if (this != internal_default_instance()) {
    delete showstyle_;
  }
}

void BindOpMobileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BindOpMobileResponse::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BindOpMobileResponse& BindOpMobileResponse::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

BindOpMobileResponse* BindOpMobileResponse::New(::google::protobuf::Arena* arena) const {
  BindOpMobileResponse* n = new BindOpMobileResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BindOpMobileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BindOpMobileResponse)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_ticket()) {
      GOOGLE_DCHECK(!ticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ticket_.UnsafeRawStringPointer())->clear();
    }
    if (has_smsno()) {
      GOOGLE_DCHECK(!smsno_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*smsno_.UnsafeRawStringPointer())->clear();
    }
    if (has_pwd()) {
      GOOGLE_DCHECK(!pwd_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pwd_.UnsafeRawStringPointer())->clear();
    }
    if (has_username()) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
    if (has_authticket()) {
      GOOGLE_DCHECK(!authticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*authticket_.UnsafeRawStringPointer())->clear();
    }
    if (has_cc()) {
      GOOGLE_DCHECK(!cc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*cc_.UnsafeRawStringPointer())->clear();
    }
    if (has_puremobile()) {
      GOOGLE_DCHECK(!puremobile_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*puremobile_.UnsafeRawStringPointer())->clear();
    }
    if (has_formatedmobile()) {
      GOOGLE_DCHECK(!formatedmobile_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*formatedmobile_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[8 / 32] & 16128u) {
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_newhostlist()) {
      GOOGLE_DCHECK(newhostlist_ != NULL);
      newhostlist_->::micromsg::HostList::Clear();
    }
    if (has_builtiniplist()) {
      GOOGLE_DCHECK(builtiniplist_ != NULL);
      builtiniplist_->::micromsg::BuiltinIPList::Clear();
    }
    if (has_networkcontrol()) {
      GOOGLE_DCHECK(networkcontrol_ != NULL);
      networkcontrol_->::micromsg::NetworkControl::Clear();
    }
    if (has_safedevicelist()) {
      GOOGLE_DCHECK(safedevicelist_ != NULL);
      safedevicelist_->::micromsg::SafeDeviceList::Clear();
    }
    if (has_showstyle()) {
      GOOGLE_DCHECK(showstyle_ != NULL);
      showstyle_->::micromsg::ShowStyleKey::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 49152u) {
    ::memset(&needsetpwd_, 0, reinterpret_cast<char*>(&safedevice_) -
      reinterpret_cast<char*>(&needsetpwd_) + sizeof(safedevice_));
  }
  obsoleteitem1_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BindOpMobileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BindOpMobileResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ticket = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ticket().data(), this->ticket().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BindOpMobileResponse.ticket");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string SmsNo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smsno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->smsno().data(), this->smsno().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BindOpMobileResponse.SmsNo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 NeedSetPwd = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_needsetpwd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &needsetpwd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Pwd = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pwd().data(), this->pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BindOpMobileResponse.Pwd");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Username = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BindOpMobileResponse.Username");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.HostList NewHostList = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newhostlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.BuiltinIPList BuiltinIPList = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_builtiniplist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.NetworkControl NetworkControl = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_networkcontrol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AuthTicket = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authticket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->authticket().data(), this->authticket().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BindOpMobileResponse.AuthTicket");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 SafeDevice = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_safedevice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &safedevice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string CC = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cc().data(), this->cc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BindOpMobileResponse.CC");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ObsoleteItem1 = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_obsoleteitem1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &obsoleteitem1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SafeDeviceList SafeDeviceList = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_safedevicelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PureMobile = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_puremobile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->puremobile().data(), this->puremobile().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BindOpMobileResponse.PureMobile");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FormatedMobile = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_formatedmobile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->formatedmobile().data(), this->formatedmobile().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BindOpMobileResponse.FormatedMobile");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.ShowStyleKey ShowStyle = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_showstyle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BindOpMobileResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BindOpMobileResponse)
  return false;
#undef DO_
}

void BindOpMobileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BindOpMobileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional string ticket = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ticket().data(), this->ticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindOpMobileResponse.ticket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ticket(), output);
  }

  // optional string SmsNo = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->smsno().data(), this->smsno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindOpMobileResponse.SmsNo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->smsno(), output);
  }

  // optional uint32 NeedSetPwd = 4;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->needsetpwd(), output);
  }

  // optional string Pwd = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindOpMobileResponse.Pwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->pwd(), output);
  }

  // optional string Username = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindOpMobileResponse.Username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->username(), output);
  }

  // optional .micromsg.HostList NewHostList = 7;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->newhostlist_, output);
  }

  // optional .micromsg.BuiltinIPList BuiltinIPList = 8;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->builtiniplist_, output);
  }

  // optional .micromsg.NetworkControl NetworkControl = 9;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->networkcontrol_, output);
  }

  // optional string AuthTicket = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authticket().data(), this->authticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindOpMobileResponse.AuthTicket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->authticket(), output);
  }

  // optional uint32 SafeDevice = 11;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->safedevice(), output);
  }

  // optional string CC = 12;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cc().data(), this->cc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindOpMobileResponse.CC");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->cc(), output);
  }

  // optional uint32 ObsoleteItem1 = 13;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->obsoleteitem1(), output);
  }

  // optional .micromsg.SafeDeviceList SafeDeviceList = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->safedevicelist_, output);
  }

  // optional string PureMobile = 15;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->puremobile().data(), this->puremobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindOpMobileResponse.PureMobile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->puremobile(), output);
  }

  // optional string FormatedMobile = 16;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->formatedmobile().data(), this->formatedmobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindOpMobileResponse.FormatedMobile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->formatedmobile(), output);
  }

  // optional .micromsg.ShowStyleKey ShowStyle = 17;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->showstyle_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BindOpMobileResponse)
}

::google::protobuf::uint8* BindOpMobileResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BindOpMobileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional string ticket = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ticket().data(), this->ticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindOpMobileResponse.ticket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ticket(), target);
  }

  // optional string SmsNo = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->smsno().data(), this->smsno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindOpMobileResponse.SmsNo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->smsno(), target);
  }

  // optional uint32 NeedSetPwd = 4;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->needsetpwd(), target);
  }

  // optional string Pwd = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindOpMobileResponse.Pwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->pwd(), target);
  }

  // optional string Username = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindOpMobileResponse.Username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->username(), target);
  }

  // optional .micromsg.HostList NewHostList = 7;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->newhostlist_, deterministic, target);
  }

  // optional .micromsg.BuiltinIPList BuiltinIPList = 8;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->builtiniplist_, deterministic, target);
  }

  // optional .micromsg.NetworkControl NetworkControl = 9;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->networkcontrol_, deterministic, target);
  }

  // optional string AuthTicket = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authticket().data(), this->authticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindOpMobileResponse.AuthTicket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->authticket(), target);
  }

  // optional uint32 SafeDevice = 11;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->safedevice(), target);
  }

  // optional string CC = 12;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cc().data(), this->cc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindOpMobileResponse.CC");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->cc(), target);
  }

  // optional uint32 ObsoleteItem1 = 13;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->obsoleteitem1(), target);
  }

  // optional .micromsg.SafeDeviceList SafeDeviceList = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->safedevicelist_, deterministic, target);
  }

  // optional string PureMobile = 15;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->puremobile().data(), this->puremobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindOpMobileResponse.PureMobile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->puremobile(), target);
  }

  // optional string FormatedMobile = 16;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->formatedmobile().data(), this->formatedmobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindOpMobileResponse.FormatedMobile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->formatedmobile(), target);
  }

  // optional .micromsg.ShowStyleKey ShowStyle = 17;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->showstyle_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BindOpMobileResponse)
  return target;
}

size_t BindOpMobileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BindOpMobileResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string ticket = 2;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ticket());
    }

    // optional string SmsNo = 3;
    if (has_smsno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->smsno());
    }

    // optional string Pwd = 5;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }

    // optional string Username = 6;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string AuthTicket = 10;
    if (has_authticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authticket());
    }

    // optional string CC = 12;
    if (has_cc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cc());
    }

    // optional string PureMobile = 15;
    if (has_puremobile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->puremobile());
    }

    // optional string FormatedMobile = 16;
    if (has_formatedmobile()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->formatedmobile());
    }

  }
  if (_has_bits_[8 / 32] & 65024u) {
    // optional .micromsg.HostList NewHostList = 7;
    if (has_newhostlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->newhostlist_);
    }

    // optional .micromsg.BuiltinIPList BuiltinIPList = 8;
    if (has_builtiniplist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->builtiniplist_);
    }

    // optional .micromsg.NetworkControl NetworkControl = 9;
    if (has_networkcontrol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->networkcontrol_);
    }

    // optional .micromsg.SafeDeviceList SafeDeviceList = 14;
    if (has_safedevicelist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->safedevicelist_);
    }

    // optional .micromsg.ShowStyleKey ShowStyle = 17;
    if (has_showstyle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->showstyle_);
    }

    // optional uint32 NeedSetPwd = 4;
    if (has_needsetpwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->needsetpwd());
    }

    // optional uint32 SafeDevice = 11;
    if (has_safedevice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->safedevice());
    }

  }
  // optional uint32 ObsoleteItem1 = 13;
  if (has_obsoleteitem1()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->obsoleteitem1());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BindOpMobileResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BindOpMobileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BindOpMobileResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BindOpMobileResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BindOpMobileResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BindOpMobileResponse)
    MergeFrom(*source);
  }
}

void BindOpMobileResponse::MergeFrom(const BindOpMobileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BindOpMobileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ticket();
      ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_smsno();
      smsno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smsno_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_pwd();
      pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_authticket();
      authticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authticket_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_cc();
      cc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cc_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_puremobile();
      puremobile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.puremobile_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_formatedmobile();
      formatedmobile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.formatedmobile_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_newhostlist()->::micromsg::HostList::MergeFrom(from.newhostlist());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_builtiniplist()->::micromsg::BuiltinIPList::MergeFrom(from.builtiniplist());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_networkcontrol()->::micromsg::NetworkControl::MergeFrom(from.networkcontrol());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_safedevicelist()->::micromsg::SafeDeviceList::MergeFrom(from.safedevicelist());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_showstyle()->::micromsg::ShowStyleKey::MergeFrom(from.showstyle());
    }
    if (cached_has_bits & 0x00004000u) {
      needsetpwd_ = from.needsetpwd_;
    }
    if (cached_has_bits & 0x00008000u) {
      safedevice_ = from.safedevice_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_obsoleteitem1(from.obsoleteitem1());
  }
}

void BindOpMobileResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BindOpMobileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BindOpMobileResponse::CopyFrom(const BindOpMobileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BindOpMobileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BindOpMobileResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000100) != 0x00000100) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_newhostlist()) {
    if (!this->newhostlist_->IsInitialized()) return false;
  }
  if (has_builtiniplist()) {
    if (!this->builtiniplist_->IsInitialized()) return false;
  }
  if (has_safedevicelist()) {
    if (!this->safedevicelist_->IsInitialized()) return false;
  }
  if (has_showstyle()) {
    if (!this->showstyle_->IsInitialized()) return false;
  }
  return true;
}

void BindOpMobileResponse::Swap(BindOpMobileResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BindOpMobileResponse::InternalSwap(BindOpMobileResponse* other) {
  ticket_.Swap(&other->ticket_);
  smsno_.Swap(&other->smsno_);
  pwd_.Swap(&other->pwd_);
  username_.Swap(&other->username_);
  authticket_.Swap(&other->authticket_);
  cc_.Swap(&other->cc_);
  puremobile_.Swap(&other->puremobile_);
  formatedmobile_.Swap(&other->formatedmobile_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(newhostlist_, other->newhostlist_);
  std::swap(builtiniplist_, other->builtiniplist_);
  std::swap(networkcontrol_, other->networkcontrol_);
  std::swap(safedevicelist_, other->safedevicelist_);
  std::swap(showstyle_, other->showstyle_);
  std::swap(needsetpwd_, other->needsetpwd_);
  std::swap(safedevice_, other->safedevice_);
  std::swap(obsoleteitem1_, other->obsoleteitem1_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BindOpMobileResponse::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BindOpMobileResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool BindOpMobileResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void BindOpMobileResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000100u;
}
void BindOpMobileResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000100u;
}
void BindOpMobileResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& BindOpMobileResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.BindOpMobileResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* BindOpMobileResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BindOpMobileResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* BindOpMobileResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.BindOpMobileResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void BindOpMobileResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindOpMobileResponse.BaseResponse)
}

// optional string ticket = 2;
bool BindOpMobileResponse::has_ticket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BindOpMobileResponse::set_has_ticket() {
  _has_bits_[0] |= 0x00000001u;
}
void BindOpMobileResponse::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000001u;
}
void BindOpMobileResponse::clear_ticket() {
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ticket();
}
const ::std::string& BindOpMobileResponse::ticket() const {
  // @@protoc_insertion_point(field_get:micromsg.BindOpMobileResponse.ticket)
  return ticket_.GetNoArena();
}
void BindOpMobileResponse::set_ticket(const ::std::string& value) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BindOpMobileResponse.ticket)
}
#if LANG_CXX11
void BindOpMobileResponse::set_ticket(::std::string&& value) {
  set_has_ticket();
  ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BindOpMobileResponse.ticket)
}
#endif
void BindOpMobileResponse::set_ticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BindOpMobileResponse.ticket)
}
void BindOpMobileResponse::set_ticket(const char* value, size_t size) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BindOpMobileResponse.ticket)
}
::std::string* BindOpMobileResponse::mutable_ticket() {
  set_has_ticket();
  // @@protoc_insertion_point(field_mutable:micromsg.BindOpMobileResponse.ticket)
  return ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BindOpMobileResponse::release_ticket() {
  // @@protoc_insertion_point(field_release:micromsg.BindOpMobileResponse.ticket)
  clear_has_ticket();
  return ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BindOpMobileResponse::set_allocated_ticket(::std::string* ticket) {
  if (ticket != NULL) {
    set_has_ticket();
  } else {
    clear_has_ticket();
  }
  ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticket);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindOpMobileResponse.ticket)
}

// optional string SmsNo = 3;
bool BindOpMobileResponse::has_smsno() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BindOpMobileResponse::set_has_smsno() {
  _has_bits_[0] |= 0x00000002u;
}
void BindOpMobileResponse::clear_has_smsno() {
  _has_bits_[0] &= ~0x00000002u;
}
void BindOpMobileResponse::clear_smsno() {
  smsno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_smsno();
}
const ::std::string& BindOpMobileResponse::smsno() const {
  // @@protoc_insertion_point(field_get:micromsg.BindOpMobileResponse.SmsNo)
  return smsno_.GetNoArena();
}
void BindOpMobileResponse::set_smsno(const ::std::string& value) {
  set_has_smsno();
  smsno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BindOpMobileResponse.SmsNo)
}
#if LANG_CXX11
void BindOpMobileResponse::set_smsno(::std::string&& value) {
  set_has_smsno();
  smsno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BindOpMobileResponse.SmsNo)
}
#endif
void BindOpMobileResponse::set_smsno(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_smsno();
  smsno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BindOpMobileResponse.SmsNo)
}
void BindOpMobileResponse::set_smsno(const char* value, size_t size) {
  set_has_smsno();
  smsno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BindOpMobileResponse.SmsNo)
}
::std::string* BindOpMobileResponse::mutable_smsno() {
  set_has_smsno();
  // @@protoc_insertion_point(field_mutable:micromsg.BindOpMobileResponse.SmsNo)
  return smsno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BindOpMobileResponse::release_smsno() {
  // @@protoc_insertion_point(field_release:micromsg.BindOpMobileResponse.SmsNo)
  clear_has_smsno();
  return smsno_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BindOpMobileResponse::set_allocated_smsno(::std::string* smsno) {
  if (smsno != NULL) {
    set_has_smsno();
  } else {
    clear_has_smsno();
  }
  smsno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsno);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindOpMobileResponse.SmsNo)
}

// optional uint32 NeedSetPwd = 4;
bool BindOpMobileResponse::has_needsetpwd() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void BindOpMobileResponse::set_has_needsetpwd() {
  _has_bits_[0] |= 0x00004000u;
}
void BindOpMobileResponse::clear_has_needsetpwd() {
  _has_bits_[0] &= ~0x00004000u;
}
void BindOpMobileResponse::clear_needsetpwd() {
  needsetpwd_ = 0u;
  clear_has_needsetpwd();
}
::google::protobuf::uint32 BindOpMobileResponse::needsetpwd() const {
  // @@protoc_insertion_point(field_get:micromsg.BindOpMobileResponse.NeedSetPwd)
  return needsetpwd_;
}
void BindOpMobileResponse::set_needsetpwd(::google::protobuf::uint32 value) {
  set_has_needsetpwd();
  needsetpwd_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BindOpMobileResponse.NeedSetPwd)
}

// optional string Pwd = 5;
bool BindOpMobileResponse::has_pwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BindOpMobileResponse::set_has_pwd() {
  _has_bits_[0] |= 0x00000004u;
}
void BindOpMobileResponse::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000004u;
}
void BindOpMobileResponse::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pwd();
}
const ::std::string& BindOpMobileResponse::pwd() const {
  // @@protoc_insertion_point(field_get:micromsg.BindOpMobileResponse.Pwd)
  return pwd_.GetNoArena();
}
void BindOpMobileResponse::set_pwd(const ::std::string& value) {
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BindOpMobileResponse.Pwd)
}
#if LANG_CXX11
void BindOpMobileResponse::set_pwd(::std::string&& value) {
  set_has_pwd();
  pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BindOpMobileResponse.Pwd)
}
#endif
void BindOpMobileResponse::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BindOpMobileResponse.Pwd)
}
void BindOpMobileResponse::set_pwd(const char* value, size_t size) {
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BindOpMobileResponse.Pwd)
}
::std::string* BindOpMobileResponse::mutable_pwd() {
  set_has_pwd();
  // @@protoc_insertion_point(field_mutable:micromsg.BindOpMobileResponse.Pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BindOpMobileResponse::release_pwd() {
  // @@protoc_insertion_point(field_release:micromsg.BindOpMobileResponse.Pwd)
  clear_has_pwd();
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BindOpMobileResponse::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    set_has_pwd();
  } else {
    clear_has_pwd();
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindOpMobileResponse.Pwd)
}

// optional string Username = 6;
bool BindOpMobileResponse::has_username() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BindOpMobileResponse::set_has_username() {
  _has_bits_[0] |= 0x00000008u;
}
void BindOpMobileResponse::clear_has_username() {
  _has_bits_[0] &= ~0x00000008u;
}
void BindOpMobileResponse::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& BindOpMobileResponse::username() const {
  // @@protoc_insertion_point(field_get:micromsg.BindOpMobileResponse.Username)
  return username_.GetNoArena();
}
void BindOpMobileResponse::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BindOpMobileResponse.Username)
}
#if LANG_CXX11
void BindOpMobileResponse::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BindOpMobileResponse.Username)
}
#endif
void BindOpMobileResponse::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BindOpMobileResponse.Username)
}
void BindOpMobileResponse::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BindOpMobileResponse.Username)
}
::std::string* BindOpMobileResponse::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.BindOpMobileResponse.Username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BindOpMobileResponse::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.BindOpMobileResponse.Username)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BindOpMobileResponse::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindOpMobileResponse.Username)
}

// optional .micromsg.HostList NewHostList = 7;
bool BindOpMobileResponse::has_newhostlist() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void BindOpMobileResponse::set_has_newhostlist() {
  _has_bits_[0] |= 0x00000200u;
}
void BindOpMobileResponse::clear_has_newhostlist() {
  _has_bits_[0] &= ~0x00000200u;
}
void BindOpMobileResponse::clear_newhostlist() {
  if (newhostlist_ != NULL) newhostlist_->::micromsg::HostList::Clear();
  clear_has_newhostlist();
}
const ::micromsg::HostList& BindOpMobileResponse::newhostlist() const {
  // @@protoc_insertion_point(field_get:micromsg.BindOpMobileResponse.NewHostList)
  return newhostlist_ != NULL ? *newhostlist_
                         : *::micromsg::HostList::internal_default_instance();
}
::micromsg::HostList* BindOpMobileResponse::mutable_newhostlist() {
  set_has_newhostlist();
  if (newhostlist_ == NULL) {
    newhostlist_ = new ::micromsg::HostList;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BindOpMobileResponse.NewHostList)
  return newhostlist_;
}
::micromsg::HostList* BindOpMobileResponse::release_newhostlist() {
  // @@protoc_insertion_point(field_release:micromsg.BindOpMobileResponse.NewHostList)
  clear_has_newhostlist();
  ::micromsg::HostList* temp = newhostlist_;
  newhostlist_ = NULL;
  return temp;
}
void BindOpMobileResponse::set_allocated_newhostlist(::micromsg::HostList* newhostlist) {
  delete newhostlist_;
  newhostlist_ = newhostlist;
  if (newhostlist) {
    set_has_newhostlist();
  } else {
    clear_has_newhostlist();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindOpMobileResponse.NewHostList)
}

// optional .micromsg.BuiltinIPList BuiltinIPList = 8;
bool BindOpMobileResponse::has_builtiniplist() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void BindOpMobileResponse::set_has_builtiniplist() {
  _has_bits_[0] |= 0x00000400u;
}
void BindOpMobileResponse::clear_has_builtiniplist() {
  _has_bits_[0] &= ~0x00000400u;
}
void BindOpMobileResponse::clear_builtiniplist() {
  if (builtiniplist_ != NULL) builtiniplist_->::micromsg::BuiltinIPList::Clear();
  clear_has_builtiniplist();
}
const ::micromsg::BuiltinIPList& BindOpMobileResponse::builtiniplist() const {
  // @@protoc_insertion_point(field_get:micromsg.BindOpMobileResponse.BuiltinIPList)
  return builtiniplist_ != NULL ? *builtiniplist_
                         : *::micromsg::BuiltinIPList::internal_default_instance();
}
::micromsg::BuiltinIPList* BindOpMobileResponse::mutable_builtiniplist() {
  set_has_builtiniplist();
  if (builtiniplist_ == NULL) {
    builtiniplist_ = new ::micromsg::BuiltinIPList;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BindOpMobileResponse.BuiltinIPList)
  return builtiniplist_;
}
::micromsg::BuiltinIPList* BindOpMobileResponse::release_builtiniplist() {
  // @@protoc_insertion_point(field_release:micromsg.BindOpMobileResponse.BuiltinIPList)
  clear_has_builtiniplist();
  ::micromsg::BuiltinIPList* temp = builtiniplist_;
  builtiniplist_ = NULL;
  return temp;
}
void BindOpMobileResponse::set_allocated_builtiniplist(::micromsg::BuiltinIPList* builtiniplist) {
  delete builtiniplist_;
  builtiniplist_ = builtiniplist;
  if (builtiniplist) {
    set_has_builtiniplist();
  } else {
    clear_has_builtiniplist();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindOpMobileResponse.BuiltinIPList)
}

// optional .micromsg.NetworkControl NetworkControl = 9;
bool BindOpMobileResponse::has_networkcontrol() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void BindOpMobileResponse::set_has_networkcontrol() {
  _has_bits_[0] |= 0x00000800u;
}
void BindOpMobileResponse::clear_has_networkcontrol() {
  _has_bits_[0] &= ~0x00000800u;
}
void BindOpMobileResponse::clear_networkcontrol() {
  if (networkcontrol_ != NULL) networkcontrol_->::micromsg::NetworkControl::Clear();
  clear_has_networkcontrol();
}
const ::micromsg::NetworkControl& BindOpMobileResponse::networkcontrol() const {
  // @@protoc_insertion_point(field_get:micromsg.BindOpMobileResponse.NetworkControl)
  return networkcontrol_ != NULL ? *networkcontrol_
                         : *::micromsg::NetworkControl::internal_default_instance();
}
::micromsg::NetworkControl* BindOpMobileResponse::mutable_networkcontrol() {
  set_has_networkcontrol();
  if (networkcontrol_ == NULL) {
    networkcontrol_ = new ::micromsg::NetworkControl;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BindOpMobileResponse.NetworkControl)
  return networkcontrol_;
}
::micromsg::NetworkControl* BindOpMobileResponse::release_networkcontrol() {
  // @@protoc_insertion_point(field_release:micromsg.BindOpMobileResponse.NetworkControl)
  clear_has_networkcontrol();
  ::micromsg::NetworkControl* temp = networkcontrol_;
  networkcontrol_ = NULL;
  return temp;
}
void BindOpMobileResponse::set_allocated_networkcontrol(::micromsg::NetworkControl* networkcontrol) {
  delete networkcontrol_;
  networkcontrol_ = networkcontrol;
  if (networkcontrol) {
    set_has_networkcontrol();
  } else {
    clear_has_networkcontrol();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindOpMobileResponse.NetworkControl)
}

// optional string AuthTicket = 10;
bool BindOpMobileResponse::has_authticket() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BindOpMobileResponse::set_has_authticket() {
  _has_bits_[0] |= 0x00000010u;
}
void BindOpMobileResponse::clear_has_authticket() {
  _has_bits_[0] &= ~0x00000010u;
}
void BindOpMobileResponse::clear_authticket() {
  authticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_authticket();
}
const ::std::string& BindOpMobileResponse::authticket() const {
  // @@protoc_insertion_point(field_get:micromsg.BindOpMobileResponse.AuthTicket)
  return authticket_.GetNoArena();
}
void BindOpMobileResponse::set_authticket(const ::std::string& value) {
  set_has_authticket();
  authticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BindOpMobileResponse.AuthTicket)
}
#if LANG_CXX11
void BindOpMobileResponse::set_authticket(::std::string&& value) {
  set_has_authticket();
  authticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BindOpMobileResponse.AuthTicket)
}
#endif
void BindOpMobileResponse::set_authticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_authticket();
  authticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BindOpMobileResponse.AuthTicket)
}
void BindOpMobileResponse::set_authticket(const char* value, size_t size) {
  set_has_authticket();
  authticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BindOpMobileResponse.AuthTicket)
}
::std::string* BindOpMobileResponse::mutable_authticket() {
  set_has_authticket();
  // @@protoc_insertion_point(field_mutable:micromsg.BindOpMobileResponse.AuthTicket)
  return authticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BindOpMobileResponse::release_authticket() {
  // @@protoc_insertion_point(field_release:micromsg.BindOpMobileResponse.AuthTicket)
  clear_has_authticket();
  return authticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BindOpMobileResponse::set_allocated_authticket(::std::string* authticket) {
  if (authticket != NULL) {
    set_has_authticket();
  } else {
    clear_has_authticket();
  }
  authticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), authticket);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindOpMobileResponse.AuthTicket)
}

// optional uint32 SafeDevice = 11;
bool BindOpMobileResponse::has_safedevice() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void BindOpMobileResponse::set_has_safedevice() {
  _has_bits_[0] |= 0x00008000u;
}
void BindOpMobileResponse::clear_has_safedevice() {
  _has_bits_[0] &= ~0x00008000u;
}
void BindOpMobileResponse::clear_safedevice() {
  safedevice_ = 0u;
  clear_has_safedevice();
}
::google::protobuf::uint32 BindOpMobileResponse::safedevice() const {
  // @@protoc_insertion_point(field_get:micromsg.BindOpMobileResponse.SafeDevice)
  return safedevice_;
}
void BindOpMobileResponse::set_safedevice(::google::protobuf::uint32 value) {
  set_has_safedevice();
  safedevice_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BindOpMobileResponse.SafeDevice)
}

// optional string CC = 12;
bool BindOpMobileResponse::has_cc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BindOpMobileResponse::set_has_cc() {
  _has_bits_[0] |= 0x00000020u;
}
void BindOpMobileResponse::clear_has_cc() {
  _has_bits_[0] &= ~0x00000020u;
}
void BindOpMobileResponse::clear_cc() {
  cc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cc();
}
const ::std::string& BindOpMobileResponse::cc() const {
  // @@protoc_insertion_point(field_get:micromsg.BindOpMobileResponse.CC)
  return cc_.GetNoArena();
}
void BindOpMobileResponse::set_cc(const ::std::string& value) {
  set_has_cc();
  cc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BindOpMobileResponse.CC)
}
#if LANG_CXX11
void BindOpMobileResponse::set_cc(::std::string&& value) {
  set_has_cc();
  cc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BindOpMobileResponse.CC)
}
#endif
void BindOpMobileResponse::set_cc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cc();
  cc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BindOpMobileResponse.CC)
}
void BindOpMobileResponse::set_cc(const char* value, size_t size) {
  set_has_cc();
  cc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BindOpMobileResponse.CC)
}
::std::string* BindOpMobileResponse::mutable_cc() {
  set_has_cc();
  // @@protoc_insertion_point(field_mutable:micromsg.BindOpMobileResponse.CC)
  return cc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BindOpMobileResponse::release_cc() {
  // @@protoc_insertion_point(field_release:micromsg.BindOpMobileResponse.CC)
  clear_has_cc();
  return cc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BindOpMobileResponse::set_allocated_cc(::std::string* cc) {
  if (cc != NULL) {
    set_has_cc();
  } else {
    clear_has_cc();
  }
  cc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cc);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindOpMobileResponse.CC)
}

// optional uint32 ObsoleteItem1 = 13;
bool BindOpMobileResponse::has_obsoleteitem1() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void BindOpMobileResponse::set_has_obsoleteitem1() {
  _has_bits_[0] |= 0x00010000u;
}
void BindOpMobileResponse::clear_has_obsoleteitem1() {
  _has_bits_[0] &= ~0x00010000u;
}
void BindOpMobileResponse::clear_obsoleteitem1() {
  obsoleteitem1_ = 0u;
  clear_has_obsoleteitem1();
}
::google::protobuf::uint32 BindOpMobileResponse::obsoleteitem1() const {
  // @@protoc_insertion_point(field_get:micromsg.BindOpMobileResponse.ObsoleteItem1)
  return obsoleteitem1_;
}
void BindOpMobileResponse::set_obsoleteitem1(::google::protobuf::uint32 value) {
  set_has_obsoleteitem1();
  obsoleteitem1_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BindOpMobileResponse.ObsoleteItem1)
}

// optional .micromsg.SafeDeviceList SafeDeviceList = 14;
bool BindOpMobileResponse::has_safedevicelist() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void BindOpMobileResponse::set_has_safedevicelist() {
  _has_bits_[0] |= 0x00001000u;
}
void BindOpMobileResponse::clear_has_safedevicelist() {
  _has_bits_[0] &= ~0x00001000u;
}
void BindOpMobileResponse::clear_safedevicelist() {
  if (safedevicelist_ != NULL) safedevicelist_->::micromsg::SafeDeviceList::Clear();
  clear_has_safedevicelist();
}
const ::micromsg::SafeDeviceList& BindOpMobileResponse::safedevicelist() const {
  // @@protoc_insertion_point(field_get:micromsg.BindOpMobileResponse.SafeDeviceList)
  return safedevicelist_ != NULL ? *safedevicelist_
                         : *::micromsg::SafeDeviceList::internal_default_instance();
}
::micromsg::SafeDeviceList* BindOpMobileResponse::mutable_safedevicelist() {
  set_has_safedevicelist();
  if (safedevicelist_ == NULL) {
    safedevicelist_ = new ::micromsg::SafeDeviceList;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BindOpMobileResponse.SafeDeviceList)
  return safedevicelist_;
}
::micromsg::SafeDeviceList* BindOpMobileResponse::release_safedevicelist() {
  // @@protoc_insertion_point(field_release:micromsg.BindOpMobileResponse.SafeDeviceList)
  clear_has_safedevicelist();
  ::micromsg::SafeDeviceList* temp = safedevicelist_;
  safedevicelist_ = NULL;
  return temp;
}
void BindOpMobileResponse::set_allocated_safedevicelist(::micromsg::SafeDeviceList* safedevicelist) {
  delete safedevicelist_;
  safedevicelist_ = safedevicelist;
  if (safedevicelist) {
    set_has_safedevicelist();
  } else {
    clear_has_safedevicelist();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindOpMobileResponse.SafeDeviceList)
}

// optional string PureMobile = 15;
bool BindOpMobileResponse::has_puremobile() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BindOpMobileResponse::set_has_puremobile() {
  _has_bits_[0] |= 0x00000040u;
}
void BindOpMobileResponse::clear_has_puremobile() {
  _has_bits_[0] &= ~0x00000040u;
}
void BindOpMobileResponse::clear_puremobile() {
  puremobile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_puremobile();
}
const ::std::string& BindOpMobileResponse::puremobile() const {
  // @@protoc_insertion_point(field_get:micromsg.BindOpMobileResponse.PureMobile)
  return puremobile_.GetNoArena();
}
void BindOpMobileResponse::set_puremobile(const ::std::string& value) {
  set_has_puremobile();
  puremobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BindOpMobileResponse.PureMobile)
}
#if LANG_CXX11
void BindOpMobileResponse::set_puremobile(::std::string&& value) {
  set_has_puremobile();
  puremobile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BindOpMobileResponse.PureMobile)
}
#endif
void BindOpMobileResponse::set_puremobile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_puremobile();
  puremobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BindOpMobileResponse.PureMobile)
}
void BindOpMobileResponse::set_puremobile(const char* value, size_t size) {
  set_has_puremobile();
  puremobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BindOpMobileResponse.PureMobile)
}
::std::string* BindOpMobileResponse::mutable_puremobile() {
  set_has_puremobile();
  // @@protoc_insertion_point(field_mutable:micromsg.BindOpMobileResponse.PureMobile)
  return puremobile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BindOpMobileResponse::release_puremobile() {
  // @@protoc_insertion_point(field_release:micromsg.BindOpMobileResponse.PureMobile)
  clear_has_puremobile();
  return puremobile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BindOpMobileResponse::set_allocated_puremobile(::std::string* puremobile) {
  if (puremobile != NULL) {
    set_has_puremobile();
  } else {
    clear_has_puremobile();
  }
  puremobile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), puremobile);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindOpMobileResponse.PureMobile)
}

// optional string FormatedMobile = 16;
bool BindOpMobileResponse::has_formatedmobile() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BindOpMobileResponse::set_has_formatedmobile() {
  _has_bits_[0] |= 0x00000080u;
}
void BindOpMobileResponse::clear_has_formatedmobile() {
  _has_bits_[0] &= ~0x00000080u;
}
void BindOpMobileResponse::clear_formatedmobile() {
  formatedmobile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_formatedmobile();
}
const ::std::string& BindOpMobileResponse::formatedmobile() const {
  // @@protoc_insertion_point(field_get:micromsg.BindOpMobileResponse.FormatedMobile)
  return formatedmobile_.GetNoArena();
}
void BindOpMobileResponse::set_formatedmobile(const ::std::string& value) {
  set_has_formatedmobile();
  formatedmobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BindOpMobileResponse.FormatedMobile)
}
#if LANG_CXX11
void BindOpMobileResponse::set_formatedmobile(::std::string&& value) {
  set_has_formatedmobile();
  formatedmobile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BindOpMobileResponse.FormatedMobile)
}
#endif
void BindOpMobileResponse::set_formatedmobile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_formatedmobile();
  formatedmobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BindOpMobileResponse.FormatedMobile)
}
void BindOpMobileResponse::set_formatedmobile(const char* value, size_t size) {
  set_has_formatedmobile();
  formatedmobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BindOpMobileResponse.FormatedMobile)
}
::std::string* BindOpMobileResponse::mutable_formatedmobile() {
  set_has_formatedmobile();
  // @@protoc_insertion_point(field_mutable:micromsg.BindOpMobileResponse.FormatedMobile)
  return formatedmobile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BindOpMobileResponse::release_formatedmobile() {
  // @@protoc_insertion_point(field_release:micromsg.BindOpMobileResponse.FormatedMobile)
  clear_has_formatedmobile();
  return formatedmobile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BindOpMobileResponse::set_allocated_formatedmobile(::std::string* formatedmobile) {
  if (formatedmobile != NULL) {
    set_has_formatedmobile();
  } else {
    clear_has_formatedmobile();
  }
  formatedmobile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), formatedmobile);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindOpMobileResponse.FormatedMobile)
}

// optional .micromsg.ShowStyleKey ShowStyle = 17;
bool BindOpMobileResponse::has_showstyle() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void BindOpMobileResponse::set_has_showstyle() {
  _has_bits_[0] |= 0x00002000u;
}
void BindOpMobileResponse::clear_has_showstyle() {
  _has_bits_[0] &= ~0x00002000u;
}
void BindOpMobileResponse::clear_showstyle() {
  if (showstyle_ != NULL) showstyle_->::micromsg::ShowStyleKey::Clear();
  clear_has_showstyle();
}
const ::micromsg::ShowStyleKey& BindOpMobileResponse::showstyle() const {
  // @@protoc_insertion_point(field_get:micromsg.BindOpMobileResponse.ShowStyle)
  return showstyle_ != NULL ? *showstyle_
                         : *::micromsg::ShowStyleKey::internal_default_instance();
}
::micromsg::ShowStyleKey* BindOpMobileResponse::mutable_showstyle() {
  set_has_showstyle();
  if (showstyle_ == NULL) {
    showstyle_ = new ::micromsg::ShowStyleKey;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BindOpMobileResponse.ShowStyle)
  return showstyle_;
}
::micromsg::ShowStyleKey* BindOpMobileResponse::release_showstyle() {
  // @@protoc_insertion_point(field_release:micromsg.BindOpMobileResponse.ShowStyle)
  clear_has_showstyle();
  ::micromsg::ShowStyleKey* temp = showstyle_;
  showstyle_ = NULL;
  return temp;
}
void BindOpMobileResponse::set_allocated_showstyle(::micromsg::ShowStyleKey* showstyle) {
  delete showstyle_;
  showstyle_ = showstyle;
  if (showstyle) {
    set_has_showstyle();
  } else {
    clear_has_showstyle();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindOpMobileResponse.ShowStyle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EmailRegRequest::kBaseRequestFieldNumber;
const int EmailRegRequest::kRandomEncryKeyFieldNumber;
const int EmailRegRequest::kOpcodeFieldNumber;
const int EmailRegRequest::kEmailFieldNumber;
const int EmailRegRequest::kLanguageFieldNumber;
const int EmailRegRequest::kPwdFieldNumber;
const int EmailRegRequest::kVerifyCodeFieldNumber;
const int EmailRegRequest::kClientSeqIDFieldNumber;
const int EmailRegRequest::kRealCountryFieldNumber;
const int EmailRegRequest::kVerifySceneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmailRegRequest::EmailRegRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.EmailRegRequest)
}
EmailRegRequest::EmailRegRequest(const EmailRegRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_email()) {
    email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_language()) {
    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pwd()) {
    pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  verifycode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_verifycode()) {
    verifycode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifycode_);
  }
  clientseqid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientseqid()) {
    clientseqid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientseqid_);
  }
  realcountry_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_realcountry()) {
    realcountry_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.realcountry_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_randomencrykey()) {
    randomencrykey_ = new ::micromsg::SKBuiltinBuffer_t(*from.randomencrykey_);
  } else {
    randomencrykey_ = NULL;
  }
  ::memcpy(&opcode_, &from.opcode_,
    reinterpret_cast<char*>(&verifyscene_) -
    reinterpret_cast<char*>(&opcode_) + sizeof(verifyscene_));
  // @@protoc_insertion_point(copy_constructor:micromsg.EmailRegRequest)
}

void EmailRegRequest::SharedCtor() {
  _cached_size_ = 0;
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifycode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientseqid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  realcountry_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&verifyscene_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(verifyscene_));
}

EmailRegRequest::~EmailRegRequest() {
  // @@protoc_insertion_point(destructor:micromsg.EmailRegRequest)
  SharedDtor();
}

void EmailRegRequest::SharedDtor() {
  email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifycode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientseqid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  realcountry_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete randomencrykey_;
  }
}

void EmailRegRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmailRegRequest::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EmailRegRequest& EmailRegRequest::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

EmailRegRequest* EmailRegRequest::New(::google::protobuf::Arena* arena) const {
  EmailRegRequest* n = new EmailRegRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmailRegRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.EmailRegRequest)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_email()) {
      GOOGLE_DCHECK(!email_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*email_.UnsafeRawStringPointer())->clear();
    }
    if (has_language()) {
      GOOGLE_DCHECK(!language_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*language_.UnsafeRawStringPointer())->clear();
    }
    if (has_pwd()) {
      GOOGLE_DCHECK(!pwd_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pwd_.UnsafeRawStringPointer())->clear();
    }
    if (has_verifycode()) {
      GOOGLE_DCHECK(!verifycode_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*verifycode_.UnsafeRawStringPointer())->clear();
    }
    if (has_clientseqid()) {
      GOOGLE_DCHECK(!clientseqid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*clientseqid_.UnsafeRawStringPointer())->clear();
    }
    if (has_realcountry()) {
      GOOGLE_DCHECK(!realcountry_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*realcountry_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_randomencrykey()) {
      GOOGLE_DCHECK(randomencrykey_ != NULL);
      randomencrykey_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&opcode_, 0, reinterpret_cast<char*>(&verifyscene_) -
      reinterpret_cast<char*>(&opcode_) + sizeof(verifyscene_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EmailRegRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.EmailRegRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_randomencrykey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Opcode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_opcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Email = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmailRegRequest.Email");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Language = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmailRegRequest.Language");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Pwd = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pwd().data(), this->pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmailRegRequest.Pwd");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string VerifyCode = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verifycode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->verifycode().data(), this->verifycode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmailRegRequest.VerifyCode");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ClientSeqID = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientseqid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientseqid().data(), this->clientseqid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmailRegRequest.ClientSeqID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string RealCountry = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_realcountry()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->realcountry().data(), this->realcountry().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmailRegRequest.RealCountry");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 VerifyScene = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_verifyscene();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &verifyscene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.EmailRegRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.EmailRegRequest)
  return false;
#undef DO_
}

void EmailRegRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.EmailRegRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 2;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->randomencrykey_, output);
  }

  // required uint32 Opcode = 3;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->opcode(), output);
  }

  // optional string Email = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmailRegRequest.Email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->email(), output);
  }

  // optional string Language = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmailRegRequest.Language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->language(), output);
  }

  // optional string Pwd = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmailRegRequest.Pwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->pwd(), output);
  }

  // optional string VerifyCode = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verifycode().data(), this->verifycode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmailRegRequest.VerifyCode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->verifycode(), output);
  }

  // optional string ClientSeqID = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientseqid().data(), this->clientseqid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmailRegRequest.ClientSeqID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->clientseqid(), output);
  }

  // optional string RealCountry = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->realcountry().data(), this->realcountry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmailRegRequest.RealCountry");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->realcountry(), output);
  }

  // optional uint32 VerifyScene = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->verifyscene(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.EmailRegRequest)
}

::google::protobuf::uint8* EmailRegRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.EmailRegRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 2;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->randomencrykey_, deterministic, target);
  }

  // required uint32 Opcode = 3;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->opcode(), target);
  }

  // optional string Email = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmailRegRequest.Email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->email(), target);
  }

  // optional string Language = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmailRegRequest.Language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->language(), target);
  }

  // optional string Pwd = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmailRegRequest.Pwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->pwd(), target);
  }

  // optional string VerifyCode = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verifycode().data(), this->verifycode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmailRegRequest.VerifyCode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->verifycode(), target);
  }

  // optional string ClientSeqID = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientseqid().data(), this->clientseqid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmailRegRequest.ClientSeqID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->clientseqid(), target);
  }

  // optional string RealCountry = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->realcountry().data(), this->realcountry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmailRegRequest.RealCountry");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->realcountry(), target);
  }

  // optional uint32 VerifyScene = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->verifyscene(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.EmailRegRequest)
  return target;
}

size_t EmailRegRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.EmailRegRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_randomencrykey()) {
    // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->randomencrykey_);
  }

  if (has_opcode()) {
    // required uint32 Opcode = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());
  }

  return total_size;
}
size_t EmailRegRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.EmailRegRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000001c0) ^ 0x000001c0) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->randomencrykey_);

    // required uint32 Opcode = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string Email = 4;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional string Language = 5;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

    // optional string Pwd = 6;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }

    // optional string VerifyCode = 7;
    if (has_verifycode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verifycode());
    }

    // optional string ClientSeqID = 8;
    if (has_clientseqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientseqid());
    }

    // optional string RealCountry = 9;
    if (has_realcountry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->realcountry());
    }

  }
  // optional uint32 VerifyScene = 10;
  if (has_verifyscene()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->verifyscene());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmailRegRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.EmailRegRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EmailRegRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EmailRegRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.EmailRegRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.EmailRegRequest)
    MergeFrom(*source);
  }
}

void EmailRegRequest::MergeFrom(const EmailRegRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.EmailRegRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_email();
      email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_language();
      language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_pwd();
      pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_verifycode();
      verifycode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifycode_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_clientseqid();
      clientseqid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientseqid_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_realcountry();
      realcountry_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.realcountry_);
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_randomencrykey()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.randomencrykey());
    }
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      opcode_ = from.opcode_;
    }
    if (cached_has_bits & 0x00000200u) {
      verifyscene_ = from.verifyscene_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EmailRegRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.EmailRegRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmailRegRequest::CopyFrom(const EmailRegRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.EmailRegRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmailRegRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001c0) != 0x000001c0) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_randomencrykey()) {
    if (!this->randomencrykey_->IsInitialized()) return false;
  }
  return true;
}

void EmailRegRequest::Swap(EmailRegRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmailRegRequest::InternalSwap(EmailRegRequest* other) {
  email_.Swap(&other->email_);
  language_.Swap(&other->language_);
  pwd_.Swap(&other->pwd_);
  verifycode_.Swap(&other->verifycode_);
  clientseqid_.Swap(&other->clientseqid_);
  realcountry_.Swap(&other->realcountry_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(randomencrykey_, other->randomencrykey_);
  std::swap(opcode_, other->opcode_);
  std::swap(verifyscene_, other->verifyscene_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmailRegRequest::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmailRegRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool EmailRegRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void EmailRegRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000040u;
}
void EmailRegRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000040u;
}
void EmailRegRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& EmailRegRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.EmailRegRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* EmailRegRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.EmailRegRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* EmailRegRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.EmailRegRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void EmailRegRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmailRegRequest.BaseRequest)
}

// required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 2;
bool EmailRegRequest::has_randomencrykey() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void EmailRegRequest::set_has_randomencrykey() {
  _has_bits_[0] |= 0x00000080u;
}
void EmailRegRequest::clear_has_randomencrykey() {
  _has_bits_[0] &= ~0x00000080u;
}
void EmailRegRequest::clear_randomencrykey() {
  if (randomencrykey_ != NULL) randomencrykey_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_randomencrykey();
}
const ::micromsg::SKBuiltinBuffer_t& EmailRegRequest::randomencrykey() const {
  // @@protoc_insertion_point(field_get:micromsg.EmailRegRequest.RandomEncryKey)
  return randomencrykey_ != NULL ? *randomencrykey_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* EmailRegRequest::mutable_randomencrykey() {
  set_has_randomencrykey();
  if (randomencrykey_ == NULL) {
    randomencrykey_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.EmailRegRequest.RandomEncryKey)
  return randomencrykey_;
}
::micromsg::SKBuiltinBuffer_t* EmailRegRequest::release_randomencrykey() {
  // @@protoc_insertion_point(field_release:micromsg.EmailRegRequest.RandomEncryKey)
  clear_has_randomencrykey();
  ::micromsg::SKBuiltinBuffer_t* temp = randomencrykey_;
  randomencrykey_ = NULL;
  return temp;
}
void EmailRegRequest::set_allocated_randomencrykey(::micromsg::SKBuiltinBuffer_t* randomencrykey) {
  delete randomencrykey_;
  randomencrykey_ = randomencrykey;
  if (randomencrykey) {
    set_has_randomencrykey();
  } else {
    clear_has_randomencrykey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmailRegRequest.RandomEncryKey)
}

// required uint32 Opcode = 3;
bool EmailRegRequest::has_opcode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void EmailRegRequest::set_has_opcode() {
  _has_bits_[0] |= 0x00000100u;
}
void EmailRegRequest::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000100u;
}
void EmailRegRequest::clear_opcode() {
  opcode_ = 0u;
  clear_has_opcode();
}
::google::protobuf::uint32 EmailRegRequest::opcode() const {
  // @@protoc_insertion_point(field_get:micromsg.EmailRegRequest.Opcode)
  return opcode_;
}
void EmailRegRequest::set_opcode(::google::protobuf::uint32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmailRegRequest.Opcode)
}

// optional string Email = 4;
bool EmailRegRequest::has_email() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EmailRegRequest::set_has_email() {
  _has_bits_[0] |= 0x00000001u;
}
void EmailRegRequest::clear_has_email() {
  _has_bits_[0] &= ~0x00000001u;
}
void EmailRegRequest::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_email();
}
const ::std::string& EmailRegRequest::email() const {
  // @@protoc_insertion_point(field_get:micromsg.EmailRegRequest.Email)
  return email_.GetNoArena();
}
void EmailRegRequest::set_email(const ::std::string& value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmailRegRequest.Email)
}
#if LANG_CXX11
void EmailRegRequest::set_email(::std::string&& value) {
  set_has_email();
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmailRegRequest.Email)
}
#endif
void EmailRegRequest::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmailRegRequest.Email)
}
void EmailRegRequest::set_email(const char* value, size_t size) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmailRegRequest.Email)
}
::std::string* EmailRegRequest::mutable_email() {
  set_has_email();
  // @@protoc_insertion_point(field_mutable:micromsg.EmailRegRequest.Email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmailRegRequest::release_email() {
  // @@protoc_insertion_point(field_release:micromsg.EmailRegRequest.Email)
  clear_has_email();
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmailRegRequest::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmailRegRequest.Email)
}

// optional string Language = 5;
bool EmailRegRequest::has_language() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EmailRegRequest::set_has_language() {
  _has_bits_[0] |= 0x00000002u;
}
void EmailRegRequest::clear_has_language() {
  _has_bits_[0] &= ~0x00000002u;
}
void EmailRegRequest::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_language();
}
const ::std::string& EmailRegRequest::language() const {
  // @@protoc_insertion_point(field_get:micromsg.EmailRegRequest.Language)
  return language_.GetNoArena();
}
void EmailRegRequest::set_language(const ::std::string& value) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmailRegRequest.Language)
}
#if LANG_CXX11
void EmailRegRequest::set_language(::std::string&& value) {
  set_has_language();
  language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmailRegRequest.Language)
}
#endif
void EmailRegRequest::set_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmailRegRequest.Language)
}
void EmailRegRequest::set_language(const char* value, size_t size) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmailRegRequest.Language)
}
::std::string* EmailRegRequest::mutable_language() {
  set_has_language();
  // @@protoc_insertion_point(field_mutable:micromsg.EmailRegRequest.Language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmailRegRequest::release_language() {
  // @@protoc_insertion_point(field_release:micromsg.EmailRegRequest.Language)
  clear_has_language();
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmailRegRequest::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    set_has_language();
  } else {
    clear_has_language();
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmailRegRequest.Language)
}

// optional string Pwd = 6;
bool EmailRegRequest::has_pwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EmailRegRequest::set_has_pwd() {
  _has_bits_[0] |= 0x00000004u;
}
void EmailRegRequest::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000004u;
}
void EmailRegRequest::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pwd();
}
const ::std::string& EmailRegRequest::pwd() const {
  // @@protoc_insertion_point(field_get:micromsg.EmailRegRequest.Pwd)
  return pwd_.GetNoArena();
}
void EmailRegRequest::set_pwd(const ::std::string& value) {
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmailRegRequest.Pwd)
}
#if LANG_CXX11
void EmailRegRequest::set_pwd(::std::string&& value) {
  set_has_pwd();
  pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmailRegRequest.Pwd)
}
#endif
void EmailRegRequest::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmailRegRequest.Pwd)
}
void EmailRegRequest::set_pwd(const char* value, size_t size) {
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmailRegRequest.Pwd)
}
::std::string* EmailRegRequest::mutable_pwd() {
  set_has_pwd();
  // @@protoc_insertion_point(field_mutable:micromsg.EmailRegRequest.Pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmailRegRequest::release_pwd() {
  // @@protoc_insertion_point(field_release:micromsg.EmailRegRequest.Pwd)
  clear_has_pwd();
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmailRegRequest::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    set_has_pwd();
  } else {
    clear_has_pwd();
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmailRegRequest.Pwd)
}

// optional string VerifyCode = 7;
bool EmailRegRequest::has_verifycode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EmailRegRequest::set_has_verifycode() {
  _has_bits_[0] |= 0x00000008u;
}
void EmailRegRequest::clear_has_verifycode() {
  _has_bits_[0] &= ~0x00000008u;
}
void EmailRegRequest::clear_verifycode() {
  verifycode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verifycode();
}
const ::std::string& EmailRegRequest::verifycode() const {
  // @@protoc_insertion_point(field_get:micromsg.EmailRegRequest.VerifyCode)
  return verifycode_.GetNoArena();
}
void EmailRegRequest::set_verifycode(const ::std::string& value) {
  set_has_verifycode();
  verifycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmailRegRequest.VerifyCode)
}
#if LANG_CXX11
void EmailRegRequest::set_verifycode(::std::string&& value) {
  set_has_verifycode();
  verifycode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmailRegRequest.VerifyCode)
}
#endif
void EmailRegRequest::set_verifycode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verifycode();
  verifycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmailRegRequest.VerifyCode)
}
void EmailRegRequest::set_verifycode(const char* value, size_t size) {
  set_has_verifycode();
  verifycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmailRegRequest.VerifyCode)
}
::std::string* EmailRegRequest::mutable_verifycode() {
  set_has_verifycode();
  // @@protoc_insertion_point(field_mutable:micromsg.EmailRegRequest.VerifyCode)
  return verifycode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmailRegRequest::release_verifycode() {
  // @@protoc_insertion_point(field_release:micromsg.EmailRegRequest.VerifyCode)
  clear_has_verifycode();
  return verifycode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmailRegRequest::set_allocated_verifycode(::std::string* verifycode) {
  if (verifycode != NULL) {
    set_has_verifycode();
  } else {
    clear_has_verifycode();
  }
  verifycode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifycode);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmailRegRequest.VerifyCode)
}

// optional string ClientSeqID = 8;
bool EmailRegRequest::has_clientseqid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void EmailRegRequest::set_has_clientseqid() {
  _has_bits_[0] |= 0x00000010u;
}
void EmailRegRequest::clear_has_clientseqid() {
  _has_bits_[0] &= ~0x00000010u;
}
void EmailRegRequest::clear_clientseqid() {
  clientseqid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientseqid();
}
const ::std::string& EmailRegRequest::clientseqid() const {
  // @@protoc_insertion_point(field_get:micromsg.EmailRegRequest.ClientSeqID)
  return clientseqid_.GetNoArena();
}
void EmailRegRequest::set_clientseqid(const ::std::string& value) {
  set_has_clientseqid();
  clientseqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmailRegRequest.ClientSeqID)
}
#if LANG_CXX11
void EmailRegRequest::set_clientseqid(::std::string&& value) {
  set_has_clientseqid();
  clientseqid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmailRegRequest.ClientSeqID)
}
#endif
void EmailRegRequest::set_clientseqid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientseqid();
  clientseqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmailRegRequest.ClientSeqID)
}
void EmailRegRequest::set_clientseqid(const char* value, size_t size) {
  set_has_clientseqid();
  clientseqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmailRegRequest.ClientSeqID)
}
::std::string* EmailRegRequest::mutable_clientseqid() {
  set_has_clientseqid();
  // @@protoc_insertion_point(field_mutable:micromsg.EmailRegRequest.ClientSeqID)
  return clientseqid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmailRegRequest::release_clientseqid() {
  // @@protoc_insertion_point(field_release:micromsg.EmailRegRequest.ClientSeqID)
  clear_has_clientseqid();
  return clientseqid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmailRegRequest::set_allocated_clientseqid(::std::string* clientseqid) {
  if (clientseqid != NULL) {
    set_has_clientseqid();
  } else {
    clear_has_clientseqid();
  }
  clientseqid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientseqid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmailRegRequest.ClientSeqID)
}

// optional string RealCountry = 9;
bool EmailRegRequest::has_realcountry() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void EmailRegRequest::set_has_realcountry() {
  _has_bits_[0] |= 0x00000020u;
}
void EmailRegRequest::clear_has_realcountry() {
  _has_bits_[0] &= ~0x00000020u;
}
void EmailRegRequest::clear_realcountry() {
  realcountry_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_realcountry();
}
const ::std::string& EmailRegRequest::realcountry() const {
  // @@protoc_insertion_point(field_get:micromsg.EmailRegRequest.RealCountry)
  return realcountry_.GetNoArena();
}
void EmailRegRequest::set_realcountry(const ::std::string& value) {
  set_has_realcountry();
  realcountry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmailRegRequest.RealCountry)
}
#if LANG_CXX11
void EmailRegRequest::set_realcountry(::std::string&& value) {
  set_has_realcountry();
  realcountry_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmailRegRequest.RealCountry)
}
#endif
void EmailRegRequest::set_realcountry(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_realcountry();
  realcountry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmailRegRequest.RealCountry)
}
void EmailRegRequest::set_realcountry(const char* value, size_t size) {
  set_has_realcountry();
  realcountry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmailRegRequest.RealCountry)
}
::std::string* EmailRegRequest::mutable_realcountry() {
  set_has_realcountry();
  // @@protoc_insertion_point(field_mutable:micromsg.EmailRegRequest.RealCountry)
  return realcountry_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmailRegRequest::release_realcountry() {
  // @@protoc_insertion_point(field_release:micromsg.EmailRegRequest.RealCountry)
  clear_has_realcountry();
  return realcountry_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmailRegRequest::set_allocated_realcountry(::std::string* realcountry) {
  if (realcountry != NULL) {
    set_has_realcountry();
  } else {
    clear_has_realcountry();
  }
  realcountry_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), realcountry);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmailRegRequest.RealCountry)
}

// optional uint32 VerifyScene = 10;
bool EmailRegRequest::has_verifyscene() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void EmailRegRequest::set_has_verifyscene() {
  _has_bits_[0] |= 0x00000200u;
}
void EmailRegRequest::clear_has_verifyscene() {
  _has_bits_[0] &= ~0x00000200u;
}
void EmailRegRequest::clear_verifyscene() {
  verifyscene_ = 0u;
  clear_has_verifyscene();
}
::google::protobuf::uint32 EmailRegRequest::verifyscene() const {
  // @@protoc_insertion_point(field_get:micromsg.EmailRegRequest.VerifyScene)
  return verifyscene_;
}
void EmailRegRequest::set_verifyscene(::google::protobuf::uint32 value) {
  set_has_verifyscene();
  verifyscene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EmailRegRequest.VerifyScene)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EmailRegResponse::kBaseResponseFieldNumber;
const int EmailRegResponse::kTicketFieldNumber;
const int EmailRegResponse::kBuiltinIPListFieldNumber;
const int EmailRegResponse::kNewHostListFieldNumber;
const int EmailRegResponse::kShowStyleFieldNumber;
const int EmailRegResponse::kNetworkControlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmailRegResponse::EmailRegResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.EmailRegResponse)
}
EmailRegResponse::EmailRegResponse(const EmailRegResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ticket()) {
    ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_builtiniplist()) {
    builtiniplist_ = new ::micromsg::BuiltinIPList(*from.builtiniplist_);
  } else {
    builtiniplist_ = NULL;
  }
  if (from.has_newhostlist()) {
    newhostlist_ = new ::micromsg::HostList(*from.newhostlist_);
  } else {
    newhostlist_ = NULL;
  }
  if (from.has_showstyle()) {
    showstyle_ = new ::micromsg::ShowStyleKey(*from.showstyle_);
  } else {
    showstyle_ = NULL;
  }
  if (from.has_networkcontrol()) {
    networkcontrol_ = new ::micromsg::NetworkControl(*from.networkcontrol_);
  } else {
    networkcontrol_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.EmailRegResponse)
}

void EmailRegResponse::SharedCtor() {
  _cached_size_ = 0;
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&networkcontrol_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(networkcontrol_));
}

EmailRegResponse::~EmailRegResponse() {
  // @@protoc_insertion_point(destructor:micromsg.EmailRegResponse)
  SharedDtor();
}

void EmailRegResponse::SharedDtor() {
  ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete builtiniplist_;
  }
  if (this != internal_default_instance()) {
    delete newhostlist_;
  }
  if (this != internal_default_instance()) {
    delete showstyle_;
  }
  if (this != internal_default_instance()) {
    delete networkcontrol_;
  }
}

void EmailRegResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmailRegResponse::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EmailRegResponse& EmailRegResponse::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

EmailRegResponse* EmailRegResponse::New(::google::protobuf::Arena* arena) const {
  EmailRegResponse* n = new EmailRegResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmailRegResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.EmailRegResponse)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_ticket()) {
      GOOGLE_DCHECK(!ticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ticket_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_builtiniplist()) {
      GOOGLE_DCHECK(builtiniplist_ != NULL);
      builtiniplist_->::micromsg::BuiltinIPList::Clear();
    }
    if (has_newhostlist()) {
      GOOGLE_DCHECK(newhostlist_ != NULL);
      newhostlist_->::micromsg::HostList::Clear();
    }
    if (has_showstyle()) {
      GOOGLE_DCHECK(showstyle_ != NULL);
      showstyle_->::micromsg::ShowStyleKey::Clear();
    }
    if (has_networkcontrol()) {
      GOOGLE_DCHECK(networkcontrol_ != NULL);
      networkcontrol_->::micromsg::NetworkControl::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EmailRegResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.EmailRegResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Ticket = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ticket().data(), this->ticket().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EmailRegResponse.Ticket");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.BuiltinIPList BuiltinIPList = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_builtiniplist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.HostList NewHostList = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newhostlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.ShowStyleKey ShowStyle = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_showstyle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.NetworkControl NetworkControl = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_networkcontrol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.EmailRegResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.EmailRegResponse)
  return false;
#undef DO_
}

void EmailRegResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.EmailRegResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional string Ticket = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ticket().data(), this->ticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmailRegResponse.Ticket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ticket(), output);
  }

  // optional .micromsg.BuiltinIPList BuiltinIPList = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->builtiniplist_, output);
  }

  // optional .micromsg.HostList NewHostList = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->newhostlist_, output);
  }

  // optional .micromsg.ShowStyleKey ShowStyle = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->showstyle_, output);
  }

  // optional .micromsg.NetworkControl NetworkControl = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->networkcontrol_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.EmailRegResponse)
}

::google::protobuf::uint8* EmailRegResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.EmailRegResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional string Ticket = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ticket().data(), this->ticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EmailRegResponse.Ticket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ticket(), target);
  }

  // optional .micromsg.BuiltinIPList BuiltinIPList = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->builtiniplist_, deterministic, target);
  }

  // optional .micromsg.HostList NewHostList = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->newhostlist_, deterministic, target);
  }

  // optional .micromsg.ShowStyleKey ShowStyle = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->showstyle_, deterministic, target);
  }

  // optional .micromsg.NetworkControl NetworkControl = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->networkcontrol_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.EmailRegResponse)
  return target;
}

size_t EmailRegResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.EmailRegResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  // optional string Ticket = 2;
  if (has_ticket()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ticket());
  }

  if (_has_bits_[0 / 32] & 60u) {
    // optional .micromsg.BuiltinIPList BuiltinIPList = 3;
    if (has_builtiniplist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->builtiniplist_);
    }

    // optional .micromsg.HostList NewHostList = 4;
    if (has_newhostlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->newhostlist_);
    }

    // optional .micromsg.ShowStyleKey ShowStyle = 5;
    if (has_showstyle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->showstyle_);
    }

    // optional .micromsg.NetworkControl NetworkControl = 6;
    if (has_networkcontrol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->networkcontrol_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmailRegResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.EmailRegResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const EmailRegResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EmailRegResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.EmailRegResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.EmailRegResponse)
    MergeFrom(*source);
  }
}

void EmailRegResponse::MergeFrom(const EmailRegResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.EmailRegResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ticket();
      ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_builtiniplist()->::micromsg::BuiltinIPList::MergeFrom(from.builtiniplist());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_newhostlist()->::micromsg::HostList::MergeFrom(from.newhostlist());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_showstyle()->::micromsg::ShowStyleKey::MergeFrom(from.showstyle());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_networkcontrol()->::micromsg::NetworkControl::MergeFrom(from.networkcontrol());
    }
  }
}

void EmailRegResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.EmailRegResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmailRegResponse::CopyFrom(const EmailRegResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.EmailRegResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmailRegResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_builtiniplist()) {
    if (!this->builtiniplist_->IsInitialized()) return false;
  }
  if (has_newhostlist()) {
    if (!this->newhostlist_->IsInitialized()) return false;
  }
  if (has_showstyle()) {
    if (!this->showstyle_->IsInitialized()) return false;
  }
  return true;
}

void EmailRegResponse::Swap(EmailRegResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmailRegResponse::InternalSwap(EmailRegResponse* other) {
  ticket_.Swap(&other->ticket_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(builtiniplist_, other->builtiniplist_);
  std::swap(newhostlist_, other->newhostlist_);
  std::swap(showstyle_, other->showstyle_);
  std::swap(networkcontrol_, other->networkcontrol_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmailRegResponse::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmailRegResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool EmailRegResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EmailRegResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
void EmailRegResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
void EmailRegResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& EmailRegResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.EmailRegResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* EmailRegResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.EmailRegResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* EmailRegResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.EmailRegResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void EmailRegResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmailRegResponse.BaseResponse)
}

// optional string Ticket = 2;
bool EmailRegResponse::has_ticket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EmailRegResponse::set_has_ticket() {
  _has_bits_[0] |= 0x00000001u;
}
void EmailRegResponse::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000001u;
}
void EmailRegResponse::clear_ticket() {
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ticket();
}
const ::std::string& EmailRegResponse::ticket() const {
  // @@protoc_insertion_point(field_get:micromsg.EmailRegResponse.Ticket)
  return ticket_.GetNoArena();
}
void EmailRegResponse::set_ticket(const ::std::string& value) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EmailRegResponse.Ticket)
}
#if LANG_CXX11
void EmailRegResponse::set_ticket(::std::string&& value) {
  set_has_ticket();
  ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EmailRegResponse.Ticket)
}
#endif
void EmailRegResponse::set_ticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EmailRegResponse.Ticket)
}
void EmailRegResponse::set_ticket(const char* value, size_t size) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EmailRegResponse.Ticket)
}
::std::string* EmailRegResponse::mutable_ticket() {
  set_has_ticket();
  // @@protoc_insertion_point(field_mutable:micromsg.EmailRegResponse.Ticket)
  return ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmailRegResponse::release_ticket() {
  // @@protoc_insertion_point(field_release:micromsg.EmailRegResponse.Ticket)
  clear_has_ticket();
  return ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmailRegResponse::set_allocated_ticket(::std::string* ticket) {
  if (ticket != NULL) {
    set_has_ticket();
  } else {
    clear_has_ticket();
  }
  ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticket);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmailRegResponse.Ticket)
}

// optional .micromsg.BuiltinIPList BuiltinIPList = 3;
bool EmailRegResponse::has_builtiniplist() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EmailRegResponse::set_has_builtiniplist() {
  _has_bits_[0] |= 0x00000004u;
}
void EmailRegResponse::clear_has_builtiniplist() {
  _has_bits_[0] &= ~0x00000004u;
}
void EmailRegResponse::clear_builtiniplist() {
  if (builtiniplist_ != NULL) builtiniplist_->::micromsg::BuiltinIPList::Clear();
  clear_has_builtiniplist();
}
const ::micromsg::BuiltinIPList& EmailRegResponse::builtiniplist() const {
  // @@protoc_insertion_point(field_get:micromsg.EmailRegResponse.BuiltinIPList)
  return builtiniplist_ != NULL ? *builtiniplist_
                         : *::micromsg::BuiltinIPList::internal_default_instance();
}
::micromsg::BuiltinIPList* EmailRegResponse::mutable_builtiniplist() {
  set_has_builtiniplist();
  if (builtiniplist_ == NULL) {
    builtiniplist_ = new ::micromsg::BuiltinIPList;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.EmailRegResponse.BuiltinIPList)
  return builtiniplist_;
}
::micromsg::BuiltinIPList* EmailRegResponse::release_builtiniplist() {
  // @@protoc_insertion_point(field_release:micromsg.EmailRegResponse.BuiltinIPList)
  clear_has_builtiniplist();
  ::micromsg::BuiltinIPList* temp = builtiniplist_;
  builtiniplist_ = NULL;
  return temp;
}
void EmailRegResponse::set_allocated_builtiniplist(::micromsg::BuiltinIPList* builtiniplist) {
  delete builtiniplist_;
  builtiniplist_ = builtiniplist;
  if (builtiniplist) {
    set_has_builtiniplist();
  } else {
    clear_has_builtiniplist();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmailRegResponse.BuiltinIPList)
}

// optional .micromsg.HostList NewHostList = 4;
bool EmailRegResponse::has_newhostlist() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EmailRegResponse::set_has_newhostlist() {
  _has_bits_[0] |= 0x00000008u;
}
void EmailRegResponse::clear_has_newhostlist() {
  _has_bits_[0] &= ~0x00000008u;
}
void EmailRegResponse::clear_newhostlist() {
  if (newhostlist_ != NULL) newhostlist_->::micromsg::HostList::Clear();
  clear_has_newhostlist();
}
const ::micromsg::HostList& EmailRegResponse::newhostlist() const {
  // @@protoc_insertion_point(field_get:micromsg.EmailRegResponse.NewHostList)
  return newhostlist_ != NULL ? *newhostlist_
                         : *::micromsg::HostList::internal_default_instance();
}
::micromsg::HostList* EmailRegResponse::mutable_newhostlist() {
  set_has_newhostlist();
  if (newhostlist_ == NULL) {
    newhostlist_ = new ::micromsg::HostList;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.EmailRegResponse.NewHostList)
  return newhostlist_;
}
::micromsg::HostList* EmailRegResponse::release_newhostlist() {
  // @@protoc_insertion_point(field_release:micromsg.EmailRegResponse.NewHostList)
  clear_has_newhostlist();
  ::micromsg::HostList* temp = newhostlist_;
  newhostlist_ = NULL;
  return temp;
}
void EmailRegResponse::set_allocated_newhostlist(::micromsg::HostList* newhostlist) {
  delete newhostlist_;
  newhostlist_ = newhostlist;
  if (newhostlist) {
    set_has_newhostlist();
  } else {
    clear_has_newhostlist();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmailRegResponse.NewHostList)
}

// optional .micromsg.ShowStyleKey ShowStyle = 5;
bool EmailRegResponse::has_showstyle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void EmailRegResponse::set_has_showstyle() {
  _has_bits_[0] |= 0x00000010u;
}
void EmailRegResponse::clear_has_showstyle() {
  _has_bits_[0] &= ~0x00000010u;
}
void EmailRegResponse::clear_showstyle() {
  if (showstyle_ != NULL) showstyle_->::micromsg::ShowStyleKey::Clear();
  clear_has_showstyle();
}
const ::micromsg::ShowStyleKey& EmailRegResponse::showstyle() const {
  // @@protoc_insertion_point(field_get:micromsg.EmailRegResponse.ShowStyle)
  return showstyle_ != NULL ? *showstyle_
                         : *::micromsg::ShowStyleKey::internal_default_instance();
}
::micromsg::ShowStyleKey* EmailRegResponse::mutable_showstyle() {
  set_has_showstyle();
  if (showstyle_ == NULL) {
    showstyle_ = new ::micromsg::ShowStyleKey;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.EmailRegResponse.ShowStyle)
  return showstyle_;
}
::micromsg::ShowStyleKey* EmailRegResponse::release_showstyle() {
  // @@protoc_insertion_point(field_release:micromsg.EmailRegResponse.ShowStyle)
  clear_has_showstyle();
  ::micromsg::ShowStyleKey* temp = showstyle_;
  showstyle_ = NULL;
  return temp;
}
void EmailRegResponse::set_allocated_showstyle(::micromsg::ShowStyleKey* showstyle) {
  delete showstyle_;
  showstyle_ = showstyle;
  if (showstyle) {
    set_has_showstyle();
  } else {
    clear_has_showstyle();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmailRegResponse.ShowStyle)
}

// optional .micromsg.NetworkControl NetworkControl = 6;
bool EmailRegResponse::has_networkcontrol() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void EmailRegResponse::set_has_networkcontrol() {
  _has_bits_[0] |= 0x00000020u;
}
void EmailRegResponse::clear_has_networkcontrol() {
  _has_bits_[0] &= ~0x00000020u;
}
void EmailRegResponse::clear_networkcontrol() {
  if (networkcontrol_ != NULL) networkcontrol_->::micromsg::NetworkControl::Clear();
  clear_has_networkcontrol();
}
const ::micromsg::NetworkControl& EmailRegResponse::networkcontrol() const {
  // @@protoc_insertion_point(field_get:micromsg.EmailRegResponse.NetworkControl)
  return networkcontrol_ != NULL ? *networkcontrol_
                         : *::micromsg::NetworkControl::internal_default_instance();
}
::micromsg::NetworkControl* EmailRegResponse::mutable_networkcontrol() {
  set_has_networkcontrol();
  if (networkcontrol_ == NULL) {
    networkcontrol_ = new ::micromsg::NetworkControl;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.EmailRegResponse.NetworkControl)
  return networkcontrol_;
}
::micromsg::NetworkControl* EmailRegResponse::release_networkcontrol() {
  // @@protoc_insertion_point(field_release:micromsg.EmailRegResponse.NetworkControl)
  clear_has_networkcontrol();
  ::micromsg::NetworkControl* temp = networkcontrol_;
  networkcontrol_ = NULL;
  return temp;
}
void EmailRegResponse::set_allocated_networkcontrol(::micromsg::NetworkControl* networkcontrol) {
  delete networkcontrol_;
  networkcontrol_ = networkcontrol;
  if (networkcontrol) {
    set_has_networkcontrol();
  } else {
    clear_has_networkcontrol();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.EmailRegResponse.NetworkControl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetEmailPwdRequest::kBaseRequestFieldNumber;
const int SetEmailPwdRequest::kPwdFieldNumber;
const int SetEmailPwdRequest::kTicketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetEmailPwdRequest::SetEmailPwdRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SetEmailPwdRequest)
}
SetEmailPwdRequest::SetEmailPwdRequest(const SetEmailPwdRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pwd()) {
    pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ticket()) {
    ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.SetEmailPwdRequest)
}

void SetEmailPwdRequest::SharedCtor() {
  _cached_size_ = 0;
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baserequest_ = NULL;
}

SetEmailPwdRequest::~SetEmailPwdRequest() {
  // @@protoc_insertion_point(destructor:micromsg.SetEmailPwdRequest)
  SharedDtor();
}

void SetEmailPwdRequest::SharedDtor() {
  pwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void SetEmailPwdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetEmailPwdRequest::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetEmailPwdRequest& SetEmailPwdRequest::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetEmailPwdRequest* SetEmailPwdRequest::New(::google::protobuf::Arena* arena) const {
  SetEmailPwdRequest* n = new SetEmailPwdRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetEmailPwdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SetEmailPwdRequest)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_pwd()) {
      GOOGLE_DCHECK(!pwd_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pwd_.UnsafeRawStringPointer())->clear();
    }
    if (has_ticket()) {
      GOOGLE_DCHECK(!ticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ticket_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SetEmailPwdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SetEmailPwdRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Pwd = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pwd().data(), this->pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SetEmailPwdRequest.Pwd");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Ticket = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ticket().data(), this->ticket().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SetEmailPwdRequest.Ticket");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SetEmailPwdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SetEmailPwdRequest)
  return false;
#undef DO_
}

void SetEmailPwdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SetEmailPwdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string Pwd = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SetEmailPwdRequest.Pwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pwd(), output);
  }

  // optional string Ticket = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ticket().data(), this->ticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SetEmailPwdRequest.Ticket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ticket(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SetEmailPwdRequest)
}

::google::protobuf::uint8* SetEmailPwdRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SetEmailPwdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string Pwd = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SetEmailPwdRequest.Pwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pwd(), target);
  }

  // optional string Ticket = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ticket().data(), this->ticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SetEmailPwdRequest.Ticket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ticket(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SetEmailPwdRequest)
  return target;
}

size_t SetEmailPwdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SetEmailPwdRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string Pwd = 2;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }

    // optional string Ticket = 3;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ticket());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetEmailPwdRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SetEmailPwdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetEmailPwdRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetEmailPwdRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SetEmailPwdRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SetEmailPwdRequest)
    MergeFrom(*source);
  }
}

void SetEmailPwdRequest::MergeFrom(const SetEmailPwdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SetEmailPwdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_pwd();
      pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_ticket();
      ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
  }
}

void SetEmailPwdRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SetEmailPwdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetEmailPwdRequest::CopyFrom(const SetEmailPwdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SetEmailPwdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetEmailPwdRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void SetEmailPwdRequest::Swap(SetEmailPwdRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetEmailPwdRequest::InternalSwap(SetEmailPwdRequest* other) {
  pwd_.Swap(&other->pwd_);
  ticket_.Swap(&other->ticket_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetEmailPwdRequest::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetEmailPwdRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool SetEmailPwdRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SetEmailPwdRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
void SetEmailPwdRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
void SetEmailPwdRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& SetEmailPwdRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.SetEmailPwdRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* SetEmailPwdRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SetEmailPwdRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* SetEmailPwdRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.SetEmailPwdRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void SetEmailPwdRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SetEmailPwdRequest.BaseRequest)
}

// optional string Pwd = 2;
bool SetEmailPwdRequest::has_pwd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SetEmailPwdRequest::set_has_pwd() {
  _has_bits_[0] |= 0x00000001u;
}
void SetEmailPwdRequest::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000001u;
}
void SetEmailPwdRequest::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pwd();
}
const ::std::string& SetEmailPwdRequest::pwd() const {
  // @@protoc_insertion_point(field_get:micromsg.SetEmailPwdRequest.Pwd)
  return pwd_.GetNoArena();
}
void SetEmailPwdRequest::set_pwd(const ::std::string& value) {
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SetEmailPwdRequest.Pwd)
}
#if LANG_CXX11
void SetEmailPwdRequest::set_pwd(::std::string&& value) {
  set_has_pwd();
  pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SetEmailPwdRequest.Pwd)
}
#endif
void SetEmailPwdRequest::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SetEmailPwdRequest.Pwd)
}
void SetEmailPwdRequest::set_pwd(const char* value, size_t size) {
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SetEmailPwdRequest.Pwd)
}
::std::string* SetEmailPwdRequest::mutable_pwd() {
  set_has_pwd();
  // @@protoc_insertion_point(field_mutable:micromsg.SetEmailPwdRequest.Pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetEmailPwdRequest::release_pwd() {
  // @@protoc_insertion_point(field_release:micromsg.SetEmailPwdRequest.Pwd)
  clear_has_pwd();
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetEmailPwdRequest::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    set_has_pwd();
  } else {
    clear_has_pwd();
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SetEmailPwdRequest.Pwd)
}

// optional string Ticket = 3;
bool SetEmailPwdRequest::has_ticket() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SetEmailPwdRequest::set_has_ticket() {
  _has_bits_[0] |= 0x00000002u;
}
void SetEmailPwdRequest::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000002u;
}
void SetEmailPwdRequest::clear_ticket() {
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ticket();
}
const ::std::string& SetEmailPwdRequest::ticket() const {
  // @@protoc_insertion_point(field_get:micromsg.SetEmailPwdRequest.Ticket)
  return ticket_.GetNoArena();
}
void SetEmailPwdRequest::set_ticket(const ::std::string& value) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SetEmailPwdRequest.Ticket)
}
#if LANG_CXX11
void SetEmailPwdRequest::set_ticket(::std::string&& value) {
  set_has_ticket();
  ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SetEmailPwdRequest.Ticket)
}
#endif
void SetEmailPwdRequest::set_ticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SetEmailPwdRequest.Ticket)
}
void SetEmailPwdRequest::set_ticket(const char* value, size_t size) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SetEmailPwdRequest.Ticket)
}
::std::string* SetEmailPwdRequest::mutable_ticket() {
  set_has_ticket();
  // @@protoc_insertion_point(field_mutable:micromsg.SetEmailPwdRequest.Ticket)
  return ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetEmailPwdRequest::release_ticket() {
  // @@protoc_insertion_point(field_release:micromsg.SetEmailPwdRequest.Ticket)
  clear_has_ticket();
  return ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetEmailPwdRequest::set_allocated_ticket(::std::string* ticket) {
  if (ticket != NULL) {
    set_has_ticket();
  } else {
    clear_has_ticket();
  }
  ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticket);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SetEmailPwdRequest.Ticket)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetEmailPwdResponse::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetEmailPwdResponse::SetEmailPwdResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SetEmailPwdResponse)
}
SetEmailPwdResponse::SetEmailPwdResponse(const SetEmailPwdResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.SetEmailPwdResponse)
}

void SetEmailPwdResponse::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

SetEmailPwdResponse::~SetEmailPwdResponse() {
  // @@protoc_insertion_point(destructor:micromsg.SetEmailPwdResponse)
  SharedDtor();
}

void SetEmailPwdResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void SetEmailPwdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetEmailPwdResponse::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetEmailPwdResponse& SetEmailPwdResponse::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetEmailPwdResponse* SetEmailPwdResponse::New(::google::protobuf::Arena* arena) const {
  SetEmailPwdResponse* n = new SetEmailPwdResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetEmailPwdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SetEmailPwdResponse)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SetEmailPwdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SetEmailPwdResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SetEmailPwdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SetEmailPwdResponse)
  return false;
#undef DO_
}

void SetEmailPwdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SetEmailPwdResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SetEmailPwdResponse)
}

::google::protobuf::uint8* SetEmailPwdResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SetEmailPwdResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SetEmailPwdResponse)
  return target;
}

size_t SetEmailPwdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SetEmailPwdResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetEmailPwdResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SetEmailPwdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetEmailPwdResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetEmailPwdResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SetEmailPwdResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SetEmailPwdResponse)
    MergeFrom(*source);
  }
}

void SetEmailPwdResponse::MergeFrom(const SetEmailPwdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SetEmailPwdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void SetEmailPwdResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SetEmailPwdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetEmailPwdResponse::CopyFrom(const SetEmailPwdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SetEmailPwdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetEmailPwdResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void SetEmailPwdResponse::Swap(SetEmailPwdResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetEmailPwdResponse::InternalSwap(SetEmailPwdResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetEmailPwdResponse::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetEmailPwdResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool SetEmailPwdResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SetEmailPwdResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void SetEmailPwdResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void SetEmailPwdResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& SetEmailPwdResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.SetEmailPwdResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* SetEmailPwdResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SetEmailPwdResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* SetEmailPwdResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.SetEmailPwdResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void SetEmailPwdResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SetEmailPwdResponse.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateSafeDeviceRequest::kBaseRequestFieldNumber;
const int UpdateSafeDeviceRequest::kUuidFieldNumber;
const int UpdateSafeDeviceRequest::kNameFieldNumber;
const int UpdateSafeDeviceRequest::kDeviceTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateSafeDeviceRequest::UpdateSafeDeviceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.UpdateSafeDeviceRequest)
}
UpdateSafeDeviceRequest::UpdateSafeDeviceRequest(const UpdateSafeDeviceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_uuid()) {
    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  devicetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_devicetype()) {
    devicetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicetype_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.UpdateSafeDeviceRequest)
}

void UpdateSafeDeviceRequest::SharedCtor() {
  _cached_size_ = 0;
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baserequest_ = NULL;
}

UpdateSafeDeviceRequest::~UpdateSafeDeviceRequest() {
  // @@protoc_insertion_point(destructor:micromsg.UpdateSafeDeviceRequest)
  SharedDtor();
}

void UpdateSafeDeviceRequest::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicetype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void UpdateSafeDeviceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateSafeDeviceRequest::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateSafeDeviceRequest& UpdateSafeDeviceRequest::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

UpdateSafeDeviceRequest* UpdateSafeDeviceRequest::New(::google::protobuf::Arena* arena) const {
  UpdateSafeDeviceRequest* n = new UpdateSafeDeviceRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateSafeDeviceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.UpdateSafeDeviceRequest)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_uuid()) {
      GOOGLE_DCHECK(!uuid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*uuid_.UnsafeRawStringPointer())->clear();
    }
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_devicetype()) {
      GOOGLE_DCHECK(!devicetype_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*devicetype_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UpdateSafeDeviceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.UpdateSafeDeviceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Uuid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UpdateSafeDeviceRequest.Uuid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UpdateSafeDeviceRequest.Name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string DeviceType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devicetype().data(), this->devicetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UpdateSafeDeviceRequest.DeviceType");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.UpdateSafeDeviceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.UpdateSafeDeviceRequest)
  return false;
#undef DO_
}

void UpdateSafeDeviceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.UpdateSafeDeviceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string Uuid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UpdateSafeDeviceRequest.Uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uuid(), output);
  }

  // optional string Name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UpdateSafeDeviceRequest.Name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string DeviceType = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicetype().data(), this->devicetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UpdateSafeDeviceRequest.DeviceType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->devicetype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.UpdateSafeDeviceRequest)
}

::google::protobuf::uint8* UpdateSafeDeviceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.UpdateSafeDeviceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string Uuid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UpdateSafeDeviceRequest.Uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uuid(), target);
  }

  // optional string Name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UpdateSafeDeviceRequest.Name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string DeviceType = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicetype().data(), this->devicetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UpdateSafeDeviceRequest.DeviceType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->devicetype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.UpdateSafeDeviceRequest)
  return target;
}

size_t UpdateSafeDeviceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.UpdateSafeDeviceRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string Uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // optional string Name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string DeviceType = 4;
    if (has_devicetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicetype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateSafeDeviceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.UpdateSafeDeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateSafeDeviceRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateSafeDeviceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.UpdateSafeDeviceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.UpdateSafeDeviceRequest)
    MergeFrom(*source);
  }
}

void UpdateSafeDeviceRequest::MergeFrom(const UpdateSafeDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.UpdateSafeDeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_uuid();
      uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_devicetype();
      devicetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicetype_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
  }
}

void UpdateSafeDeviceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.UpdateSafeDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateSafeDeviceRequest::CopyFrom(const UpdateSafeDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.UpdateSafeDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSafeDeviceRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void UpdateSafeDeviceRequest::Swap(UpdateSafeDeviceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateSafeDeviceRequest::InternalSwap(UpdateSafeDeviceRequest* other) {
  uuid_.Swap(&other->uuid_);
  name_.Swap(&other->name_);
  devicetype_.Swap(&other->devicetype_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateSafeDeviceRequest::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateSafeDeviceRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool UpdateSafeDeviceRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UpdateSafeDeviceRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000008u;
}
void UpdateSafeDeviceRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000008u;
}
void UpdateSafeDeviceRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& UpdateSafeDeviceRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.UpdateSafeDeviceRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* UpdateSafeDeviceRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UpdateSafeDeviceRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* UpdateSafeDeviceRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.UpdateSafeDeviceRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void UpdateSafeDeviceRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UpdateSafeDeviceRequest.BaseRequest)
}

// optional string Uuid = 2;
bool UpdateSafeDeviceRequest::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UpdateSafeDeviceRequest::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
void UpdateSafeDeviceRequest::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
void UpdateSafeDeviceRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuid();
}
const ::std::string& UpdateSafeDeviceRequest::uuid() const {
  // @@protoc_insertion_point(field_get:micromsg.UpdateSafeDeviceRequest.Uuid)
  return uuid_.GetNoArena();
}
void UpdateSafeDeviceRequest::set_uuid(const ::std::string& value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UpdateSafeDeviceRequest.Uuid)
}
#if LANG_CXX11
void UpdateSafeDeviceRequest::set_uuid(::std::string&& value) {
  set_has_uuid();
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UpdateSafeDeviceRequest.Uuid)
}
#endif
void UpdateSafeDeviceRequest::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UpdateSafeDeviceRequest.Uuid)
}
void UpdateSafeDeviceRequest::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UpdateSafeDeviceRequest.Uuid)
}
::std::string* UpdateSafeDeviceRequest::mutable_uuid() {
  set_has_uuid();
  // @@protoc_insertion_point(field_mutable:micromsg.UpdateSafeDeviceRequest.Uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateSafeDeviceRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:micromsg.UpdateSafeDeviceRequest.Uuid)
  clear_has_uuid();
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateSafeDeviceRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    set_has_uuid();
  } else {
    clear_has_uuid();
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UpdateSafeDeviceRequest.Uuid)
}

// optional string Name = 3;
bool UpdateSafeDeviceRequest::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UpdateSafeDeviceRequest::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void UpdateSafeDeviceRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void UpdateSafeDeviceRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& UpdateSafeDeviceRequest::name() const {
  // @@protoc_insertion_point(field_get:micromsg.UpdateSafeDeviceRequest.Name)
  return name_.GetNoArena();
}
void UpdateSafeDeviceRequest::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UpdateSafeDeviceRequest.Name)
}
#if LANG_CXX11
void UpdateSafeDeviceRequest::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UpdateSafeDeviceRequest.Name)
}
#endif
void UpdateSafeDeviceRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UpdateSafeDeviceRequest.Name)
}
void UpdateSafeDeviceRequest::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UpdateSafeDeviceRequest.Name)
}
::std::string* UpdateSafeDeviceRequest::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:micromsg.UpdateSafeDeviceRequest.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateSafeDeviceRequest::release_name() {
  // @@protoc_insertion_point(field_release:micromsg.UpdateSafeDeviceRequest.Name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateSafeDeviceRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UpdateSafeDeviceRequest.Name)
}

// optional string DeviceType = 4;
bool UpdateSafeDeviceRequest::has_devicetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UpdateSafeDeviceRequest::set_has_devicetype() {
  _has_bits_[0] |= 0x00000004u;
}
void UpdateSafeDeviceRequest::clear_has_devicetype() {
  _has_bits_[0] &= ~0x00000004u;
}
void UpdateSafeDeviceRequest::clear_devicetype() {
  devicetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_devicetype();
}
const ::std::string& UpdateSafeDeviceRequest::devicetype() const {
  // @@protoc_insertion_point(field_get:micromsg.UpdateSafeDeviceRequest.DeviceType)
  return devicetype_.GetNoArena();
}
void UpdateSafeDeviceRequest::set_devicetype(const ::std::string& value) {
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UpdateSafeDeviceRequest.DeviceType)
}
#if LANG_CXX11
void UpdateSafeDeviceRequest::set_devicetype(::std::string&& value) {
  set_has_devicetype();
  devicetype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UpdateSafeDeviceRequest.DeviceType)
}
#endif
void UpdateSafeDeviceRequest::set_devicetype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UpdateSafeDeviceRequest.DeviceType)
}
void UpdateSafeDeviceRequest::set_devicetype(const char* value, size_t size) {
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UpdateSafeDeviceRequest.DeviceType)
}
::std::string* UpdateSafeDeviceRequest::mutable_devicetype() {
  set_has_devicetype();
  // @@protoc_insertion_point(field_mutable:micromsg.UpdateSafeDeviceRequest.DeviceType)
  return devicetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateSafeDeviceRequest::release_devicetype() {
  // @@protoc_insertion_point(field_release:micromsg.UpdateSafeDeviceRequest.DeviceType)
  clear_has_devicetype();
  return devicetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateSafeDeviceRequest::set_allocated_devicetype(::std::string* devicetype) {
  if (devicetype != NULL) {
    set_has_devicetype();
  } else {
    clear_has_devicetype();
  }
  devicetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicetype);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UpdateSafeDeviceRequest.DeviceType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateSafeDeviceResponse::kBaseResponseFieldNumber;
const int UpdateSafeDeviceResponse::kSafeDeviceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateSafeDeviceResponse::UpdateSafeDeviceResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.UpdateSafeDeviceResponse)
}
UpdateSafeDeviceResponse::UpdateSafeDeviceResponse(const UpdateSafeDeviceResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  safedevice_ = from.safedevice_;
  // @@protoc_insertion_point(copy_constructor:micromsg.UpdateSafeDeviceResponse)
}

void UpdateSafeDeviceResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&safedevice_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(safedevice_));
}

UpdateSafeDeviceResponse::~UpdateSafeDeviceResponse() {
  // @@protoc_insertion_point(destructor:micromsg.UpdateSafeDeviceResponse)
  SharedDtor();
}

void UpdateSafeDeviceResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void UpdateSafeDeviceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateSafeDeviceResponse::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateSafeDeviceResponse& UpdateSafeDeviceResponse::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

UpdateSafeDeviceResponse* UpdateSafeDeviceResponse::New(::google::protobuf::Arena* arena) const {
  UpdateSafeDeviceResponse* n = new UpdateSafeDeviceResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateSafeDeviceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.UpdateSafeDeviceResponse)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  safedevice_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UpdateSafeDeviceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.UpdateSafeDeviceResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 SafeDevice = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_safedevice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &safedevice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.UpdateSafeDeviceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.UpdateSafeDeviceResponse)
  return false;
#undef DO_
}

void UpdateSafeDeviceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.UpdateSafeDeviceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional uint32 SafeDevice = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->safedevice(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.UpdateSafeDeviceResponse)
}

::google::protobuf::uint8* UpdateSafeDeviceResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.UpdateSafeDeviceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional uint32 SafeDevice = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->safedevice(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.UpdateSafeDeviceResponse)
  return target;
}

size_t UpdateSafeDeviceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.UpdateSafeDeviceResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  // optional uint32 SafeDevice = 2;
  if (has_safedevice()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->safedevice());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateSafeDeviceResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.UpdateSafeDeviceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateSafeDeviceResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateSafeDeviceResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.UpdateSafeDeviceResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.UpdateSafeDeviceResponse)
    MergeFrom(*source);
  }
}

void UpdateSafeDeviceResponse::MergeFrom(const UpdateSafeDeviceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.UpdateSafeDeviceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      safedevice_ = from.safedevice_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UpdateSafeDeviceResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.UpdateSafeDeviceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateSafeDeviceResponse::CopyFrom(const UpdateSafeDeviceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.UpdateSafeDeviceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSafeDeviceResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void UpdateSafeDeviceResponse::Swap(UpdateSafeDeviceResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateSafeDeviceResponse::InternalSwap(UpdateSafeDeviceResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(safedevice_, other->safedevice_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateSafeDeviceResponse::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateSafeDeviceResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool UpdateSafeDeviceResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UpdateSafeDeviceResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void UpdateSafeDeviceResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void UpdateSafeDeviceResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& UpdateSafeDeviceResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.UpdateSafeDeviceResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* UpdateSafeDeviceResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UpdateSafeDeviceResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* UpdateSafeDeviceResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.UpdateSafeDeviceResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void UpdateSafeDeviceResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UpdateSafeDeviceResponse.BaseResponse)
}

// optional uint32 SafeDevice = 2;
bool UpdateSafeDeviceResponse::has_safedevice() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UpdateSafeDeviceResponse::set_has_safedevice() {
  _has_bits_[0] |= 0x00000002u;
}
void UpdateSafeDeviceResponse::clear_has_safedevice() {
  _has_bits_[0] &= ~0x00000002u;
}
void UpdateSafeDeviceResponse::clear_safedevice() {
  safedevice_ = 0u;
  clear_has_safedevice();
}
::google::protobuf::uint32 UpdateSafeDeviceResponse::safedevice() const {
  // @@protoc_insertion_point(field_get:micromsg.UpdateSafeDeviceResponse.SafeDevice)
  return safedevice_;
}
void UpdateSafeDeviceResponse::set_safedevice(::google::protobuf::uint32 value) {
  set_has_safedevice();
  safedevice_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UpdateSafeDeviceResponse.SafeDevice)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelSafeDeviceRequest::kBaseRequestFieldNumber;
const int DelSafeDeviceRequest::kUuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelSafeDeviceRequest::DelSafeDeviceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.DelSafeDeviceRequest)
}
DelSafeDeviceRequest::DelSafeDeviceRequest(const DelSafeDeviceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_uuid()) {
    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.DelSafeDeviceRequest)
}

void DelSafeDeviceRequest::SharedCtor() {
  _cached_size_ = 0;
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baserequest_ = NULL;
}

DelSafeDeviceRequest::~DelSafeDeviceRequest() {
  // @@protoc_insertion_point(destructor:micromsg.DelSafeDeviceRequest)
  SharedDtor();
}

void DelSafeDeviceRequest::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void DelSafeDeviceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelSafeDeviceRequest::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DelSafeDeviceRequest& DelSafeDeviceRequest::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

DelSafeDeviceRequest* DelSafeDeviceRequest::New(::google::protobuf::Arena* arena) const {
  DelSafeDeviceRequest* n = new DelSafeDeviceRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DelSafeDeviceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.DelSafeDeviceRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_uuid()) {
      GOOGLE_DCHECK(!uuid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*uuid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DelSafeDeviceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.DelSafeDeviceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Uuid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.DelSafeDeviceRequest.Uuid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.DelSafeDeviceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.DelSafeDeviceRequest)
  return false;
#undef DO_
}

void DelSafeDeviceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.DelSafeDeviceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string Uuid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.DelSafeDeviceRequest.Uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uuid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.DelSafeDeviceRequest)
}

::google::protobuf::uint8* DelSafeDeviceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.DelSafeDeviceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string Uuid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.DelSafeDeviceRequest.Uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uuid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.DelSafeDeviceRequest)
  return target;
}

size_t DelSafeDeviceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.DelSafeDeviceRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  // optional string Uuid = 2;
  if (has_uuid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelSafeDeviceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.DelSafeDeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DelSafeDeviceRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DelSafeDeviceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.DelSafeDeviceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.DelSafeDeviceRequest)
    MergeFrom(*source);
  }
}

void DelSafeDeviceRequest::MergeFrom(const DelSafeDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.DelSafeDeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_uuid();
      uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
  }
}

void DelSafeDeviceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.DelSafeDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelSafeDeviceRequest::CopyFrom(const DelSafeDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.DelSafeDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelSafeDeviceRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void DelSafeDeviceRequest::Swap(DelSafeDeviceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelSafeDeviceRequest::InternalSwap(DelSafeDeviceRequest* other) {
  uuid_.Swap(&other->uuid_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DelSafeDeviceRequest::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DelSafeDeviceRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool DelSafeDeviceRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DelSafeDeviceRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void DelSafeDeviceRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void DelSafeDeviceRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& DelSafeDeviceRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.DelSafeDeviceRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* DelSafeDeviceRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DelSafeDeviceRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* DelSafeDeviceRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.DelSafeDeviceRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void DelSafeDeviceRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DelSafeDeviceRequest.BaseRequest)
}

// optional string Uuid = 2;
bool DelSafeDeviceRequest::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DelSafeDeviceRequest::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
void DelSafeDeviceRequest::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
void DelSafeDeviceRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuid();
}
const ::std::string& DelSafeDeviceRequest::uuid() const {
  // @@protoc_insertion_point(field_get:micromsg.DelSafeDeviceRequest.Uuid)
  return uuid_.GetNoArena();
}
void DelSafeDeviceRequest::set_uuid(const ::std::string& value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.DelSafeDeviceRequest.Uuid)
}
#if LANG_CXX11
void DelSafeDeviceRequest::set_uuid(::std::string&& value) {
  set_has_uuid();
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.DelSafeDeviceRequest.Uuid)
}
#endif
void DelSafeDeviceRequest::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.DelSafeDeviceRequest.Uuid)
}
void DelSafeDeviceRequest::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.DelSafeDeviceRequest.Uuid)
}
::std::string* DelSafeDeviceRequest::mutable_uuid() {
  set_has_uuid();
  // @@protoc_insertion_point(field_mutable:micromsg.DelSafeDeviceRequest.Uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DelSafeDeviceRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:micromsg.DelSafeDeviceRequest.Uuid)
  clear_has_uuid();
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DelSafeDeviceRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    set_has_uuid();
  } else {
    clear_has_uuid();
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.DelSafeDeviceRequest.Uuid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelSafeDeviceResponse::kBaseResponseFieldNumber;
const int DelSafeDeviceResponse::kSafeDeviceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelSafeDeviceResponse::DelSafeDeviceResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.DelSafeDeviceResponse)
}
DelSafeDeviceResponse::DelSafeDeviceResponse(const DelSafeDeviceResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  safedevice_ = from.safedevice_;
  // @@protoc_insertion_point(copy_constructor:micromsg.DelSafeDeviceResponse)
}

void DelSafeDeviceResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&safedevice_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(safedevice_));
}

DelSafeDeviceResponse::~DelSafeDeviceResponse() {
  // @@protoc_insertion_point(destructor:micromsg.DelSafeDeviceResponse)
  SharedDtor();
}

void DelSafeDeviceResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void DelSafeDeviceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelSafeDeviceResponse::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DelSafeDeviceResponse& DelSafeDeviceResponse::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

DelSafeDeviceResponse* DelSafeDeviceResponse::New(::google::protobuf::Arena* arena) const {
  DelSafeDeviceResponse* n = new DelSafeDeviceResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DelSafeDeviceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.DelSafeDeviceResponse)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  safedevice_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DelSafeDeviceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.DelSafeDeviceResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 SafeDevice = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_safedevice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &safedevice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.DelSafeDeviceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.DelSafeDeviceResponse)
  return false;
#undef DO_
}

void DelSafeDeviceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.DelSafeDeviceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional uint32 SafeDevice = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->safedevice(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.DelSafeDeviceResponse)
}

::google::protobuf::uint8* DelSafeDeviceResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.DelSafeDeviceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional uint32 SafeDevice = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->safedevice(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.DelSafeDeviceResponse)
  return target;
}

size_t DelSafeDeviceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.DelSafeDeviceResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  // optional uint32 SafeDevice = 2;
  if (has_safedevice()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->safedevice());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelSafeDeviceResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.DelSafeDeviceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DelSafeDeviceResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DelSafeDeviceResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.DelSafeDeviceResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.DelSafeDeviceResponse)
    MergeFrom(*source);
  }
}

void DelSafeDeviceResponse::MergeFrom(const DelSafeDeviceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.DelSafeDeviceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      safedevice_ = from.safedevice_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DelSafeDeviceResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.DelSafeDeviceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelSafeDeviceResponse::CopyFrom(const DelSafeDeviceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.DelSafeDeviceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelSafeDeviceResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void DelSafeDeviceResponse::Swap(DelSafeDeviceResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelSafeDeviceResponse::InternalSwap(DelSafeDeviceResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(safedevice_, other->safedevice_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DelSafeDeviceResponse::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DelSafeDeviceResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool DelSafeDeviceResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DelSafeDeviceResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void DelSafeDeviceResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void DelSafeDeviceResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& DelSafeDeviceResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.DelSafeDeviceResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* DelSafeDeviceResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DelSafeDeviceResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* DelSafeDeviceResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.DelSafeDeviceResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void DelSafeDeviceResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DelSafeDeviceResponse.BaseResponse)
}

// optional uint32 SafeDevice = 2;
bool DelSafeDeviceResponse::has_safedevice() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DelSafeDeviceResponse::set_has_safedevice() {
  _has_bits_[0] |= 0x00000002u;
}
void DelSafeDeviceResponse::clear_has_safedevice() {
  _has_bits_[0] &= ~0x00000002u;
}
void DelSafeDeviceResponse::clear_safedevice() {
  safedevice_ = 0u;
  clear_has_safedevice();
}
::google::protobuf::uint32 DelSafeDeviceResponse::safedevice() const {
  // @@protoc_insertion_point(field_get:micromsg.DelSafeDeviceResponse.SafeDevice)
  return safedevice_;
}
void DelSafeDeviceResponse::set_safedevice(::google::protobuf::uint32 value) {
  set_has_safedevice();
  safedevice_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DelSafeDeviceResponse.SafeDevice)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BindSafeMobileRequest::kBaseRequestFieldNumber;
const int BindSafeMobileRequest::kMobileFieldNumber;
const int BindSafeMobileRequest::kOpcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BindSafeMobileRequest::BindSafeMobileRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BindSafeMobileRequest)
}
BindSafeMobileRequest::BindSafeMobileRequest(const BindSafeMobileRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mobile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mobile()) {
    mobile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mobile_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  opcode_ = from.opcode_;
  // @@protoc_insertion_point(copy_constructor:micromsg.BindSafeMobileRequest)
}

void BindSafeMobileRequest::SharedCtor() {
  _cached_size_ = 0;
  mobile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&opcode_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(opcode_));
}

BindSafeMobileRequest::~BindSafeMobileRequest() {
  // @@protoc_insertion_point(destructor:micromsg.BindSafeMobileRequest)
  SharedDtor();
}

void BindSafeMobileRequest::SharedDtor() {
  mobile_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void BindSafeMobileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BindSafeMobileRequest::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BindSafeMobileRequest& BindSafeMobileRequest::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

BindSafeMobileRequest* BindSafeMobileRequest::New(::google::protobuf::Arena* arena) const {
  BindSafeMobileRequest* n = new BindSafeMobileRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BindSafeMobileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BindSafeMobileRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_mobile()) {
      GOOGLE_DCHECK(!mobile_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mobile_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  opcode_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BindSafeMobileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BindSafeMobileRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Mobile = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mobile().data(), this->mobile().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BindSafeMobileRequest.Mobile");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Opcode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_opcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BindSafeMobileRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BindSafeMobileRequest)
  return false;
#undef DO_
}

void BindSafeMobileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BindSafeMobileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string Mobile = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mobile().data(), this->mobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindSafeMobileRequest.Mobile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mobile(), output);
  }

  // required int32 Opcode = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->opcode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BindSafeMobileRequest)
}

::google::protobuf::uint8* BindSafeMobileRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BindSafeMobileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string Mobile = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mobile().data(), this->mobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindSafeMobileRequest.Mobile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mobile(), target);
  }

  // required int32 Opcode = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->opcode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BindSafeMobileRequest)
  return target;
}

size_t BindSafeMobileRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.BindSafeMobileRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_opcode()) {
    // required int32 Opcode = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->opcode());
  }

  return total_size;
}
size_t BindSafeMobileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BindSafeMobileRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required int32 Opcode = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->opcode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string Mobile = 2;
  if (has_mobile()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mobile());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BindSafeMobileRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BindSafeMobileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BindSafeMobileRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BindSafeMobileRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BindSafeMobileRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BindSafeMobileRequest)
    MergeFrom(*source);
  }
}

void BindSafeMobileRequest::MergeFrom(const BindSafeMobileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BindSafeMobileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_mobile();
      mobile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mobile_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000004u) {
      opcode_ = from.opcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BindSafeMobileRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BindSafeMobileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BindSafeMobileRequest::CopyFrom(const BindSafeMobileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BindSafeMobileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BindSafeMobileRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void BindSafeMobileRequest::Swap(BindSafeMobileRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BindSafeMobileRequest::InternalSwap(BindSafeMobileRequest* other) {
  mobile_.Swap(&other->mobile_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(opcode_, other->opcode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BindSafeMobileRequest::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BindSafeMobileRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool BindSafeMobileRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BindSafeMobileRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void BindSafeMobileRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void BindSafeMobileRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& BindSafeMobileRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.BindSafeMobileRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* BindSafeMobileRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BindSafeMobileRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* BindSafeMobileRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.BindSafeMobileRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void BindSafeMobileRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindSafeMobileRequest.BaseRequest)
}

// optional string Mobile = 2;
bool BindSafeMobileRequest::has_mobile() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BindSafeMobileRequest::set_has_mobile() {
  _has_bits_[0] |= 0x00000001u;
}
void BindSafeMobileRequest::clear_has_mobile() {
  _has_bits_[0] &= ~0x00000001u;
}
void BindSafeMobileRequest::clear_mobile() {
  mobile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mobile();
}
const ::std::string& BindSafeMobileRequest::mobile() const {
  // @@protoc_insertion_point(field_get:micromsg.BindSafeMobileRequest.Mobile)
  return mobile_.GetNoArena();
}
void BindSafeMobileRequest::set_mobile(const ::std::string& value) {
  set_has_mobile();
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BindSafeMobileRequest.Mobile)
}
#if LANG_CXX11
void BindSafeMobileRequest::set_mobile(::std::string&& value) {
  set_has_mobile();
  mobile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BindSafeMobileRequest.Mobile)
}
#endif
void BindSafeMobileRequest::set_mobile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mobile();
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BindSafeMobileRequest.Mobile)
}
void BindSafeMobileRequest::set_mobile(const char* value, size_t size) {
  set_has_mobile();
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BindSafeMobileRequest.Mobile)
}
::std::string* BindSafeMobileRequest::mutable_mobile() {
  set_has_mobile();
  // @@protoc_insertion_point(field_mutable:micromsg.BindSafeMobileRequest.Mobile)
  return mobile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BindSafeMobileRequest::release_mobile() {
  // @@protoc_insertion_point(field_release:micromsg.BindSafeMobileRequest.Mobile)
  clear_has_mobile();
  return mobile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BindSafeMobileRequest::set_allocated_mobile(::std::string* mobile) {
  if (mobile != NULL) {
    set_has_mobile();
  } else {
    clear_has_mobile();
  }
  mobile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mobile);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindSafeMobileRequest.Mobile)
}

// required int32 Opcode = 3;
bool BindSafeMobileRequest::has_opcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BindSafeMobileRequest::set_has_opcode() {
  _has_bits_[0] |= 0x00000004u;
}
void BindSafeMobileRequest::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000004u;
}
void BindSafeMobileRequest::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
::google::protobuf::int32 BindSafeMobileRequest::opcode() const {
  // @@protoc_insertion_point(field_get:micromsg.BindSafeMobileRequest.Opcode)
  return opcode_;
}
void BindSafeMobileRequest::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BindSafeMobileRequest.Opcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BindSafeMobileResponse::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BindSafeMobileResponse::BindSafeMobileResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BindSafeMobileResponse)
}
BindSafeMobileResponse::BindSafeMobileResponse(const BindSafeMobileResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.BindSafeMobileResponse)
}

void BindSafeMobileResponse::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

BindSafeMobileResponse::~BindSafeMobileResponse() {
  // @@protoc_insertion_point(destructor:micromsg.BindSafeMobileResponse)
  SharedDtor();
}

void BindSafeMobileResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void BindSafeMobileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BindSafeMobileResponse::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BindSafeMobileResponse& BindSafeMobileResponse::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

BindSafeMobileResponse* BindSafeMobileResponse::New(::google::protobuf::Arena* arena) const {
  BindSafeMobileResponse* n = new BindSafeMobileResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BindSafeMobileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BindSafeMobileResponse)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BindSafeMobileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BindSafeMobileResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BindSafeMobileResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BindSafeMobileResponse)
  return false;
#undef DO_
}

void BindSafeMobileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BindSafeMobileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BindSafeMobileResponse)
}

::google::protobuf::uint8* BindSafeMobileResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BindSafeMobileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BindSafeMobileResponse)
  return target;
}

size_t BindSafeMobileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BindSafeMobileResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BindSafeMobileResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BindSafeMobileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BindSafeMobileResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BindSafeMobileResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BindSafeMobileResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BindSafeMobileResponse)
    MergeFrom(*source);
  }
}

void BindSafeMobileResponse::MergeFrom(const BindSafeMobileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BindSafeMobileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void BindSafeMobileResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BindSafeMobileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BindSafeMobileResponse::CopyFrom(const BindSafeMobileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BindSafeMobileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BindSafeMobileResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void BindSafeMobileResponse::Swap(BindSafeMobileResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BindSafeMobileResponse::InternalSwap(BindSafeMobileResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BindSafeMobileResponse::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BindSafeMobileResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool BindSafeMobileResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BindSafeMobileResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void BindSafeMobileResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void BindSafeMobileResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& BindSafeMobileResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.BindSafeMobileResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* BindSafeMobileResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BindSafeMobileResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* BindSafeMobileResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.BindSafeMobileResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void BindSafeMobileResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindSafeMobileResponse.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BindQQRequest::kBaseRequestFieldNumber;
const int BindQQRequest::kQQFieldNumber;
const int BindQQRequest::kPwdFieldNumber;
const int BindQQRequest::kPwd2FieldNumber;
const int BindQQRequest::kImgSidFieldNumber;
const int BindQQRequest::kImgCodeFieldNumber;
const int BindQQRequest::kOPCodeFieldNumber;
const int BindQQRequest::kImgEncryptKeyFieldNumber;
const int BindQQRequest::kKSidFieldNumber;
const int BindQQRequest::kSetAsMainAcctFieldNumber;
const int BindQQRequest::kSafeDeviceNameFieldNumber;
const int BindQQRequest::kSafeDeviceTypeFieldNumber;
const int BindQQRequest::kWTLoginReqBuffFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BindQQRequest::BindQQRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BindQQRequest)
}
BindQQRequest::BindQQRequest(const BindQQRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pwd()) {
    pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  pwd2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pwd2()) {
    pwd2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd2_);
  }
  imgsid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_imgsid()) {
    imgsid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imgsid_);
  }
  imgcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_imgcode()) {
    imgcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imgcode_);
  }
  safedevicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_safedevicename()) {
    safedevicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.safedevicename_);
  }
  safedevicetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_safedevicetype()) {
    safedevicetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.safedevicetype_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_imgencryptkey()) {
    imgencryptkey_ = new ::micromsg::SKBuiltinString_t(*from.imgencryptkey_);
  } else {
    imgencryptkey_ = NULL;
  }
  if (from.has_ksid()) {
    ksid_ = new ::micromsg::SKBuiltinBuffer_t(*from.ksid_);
  } else {
    ksid_ = NULL;
  }
  if (from.has_wtloginreqbuff()) {
    wtloginreqbuff_ = new ::micromsg::SKBuiltinBuffer_t(*from.wtloginreqbuff_);
  } else {
    wtloginreqbuff_ = NULL;
  }
  ::memcpy(&qq_, &from.qq_,
    reinterpret_cast<char*>(&setasmainacct_) -
    reinterpret_cast<char*>(&qq_) + sizeof(setasmainacct_));
  // @@protoc_insertion_point(copy_constructor:micromsg.BindQQRequest)
}

void BindQQRequest::SharedCtor() {
  _cached_size_ = 0;
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imgsid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imgcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  safedevicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  safedevicetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&setasmainacct_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(setasmainacct_));
}

BindQQRequest::~BindQQRequest() {
  // @@protoc_insertion_point(destructor:micromsg.BindQQRequest)
  SharedDtor();
}

void BindQQRequest::SharedDtor() {
  pwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imgsid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imgcode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  safedevicename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  safedevicetype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete imgencryptkey_;
  }
  if (this != internal_default_instance()) {
    delete ksid_;
  }
  if (this != internal_default_instance()) {
    delete wtloginreqbuff_;
  }
}

void BindQQRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BindQQRequest::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BindQQRequest& BindQQRequest::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

BindQQRequest* BindQQRequest::New(::google::protobuf::Arena* arena) const {
  BindQQRequest* n = new BindQQRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BindQQRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BindQQRequest)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_pwd()) {
      GOOGLE_DCHECK(!pwd_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pwd_.UnsafeRawStringPointer())->clear();
    }
    if (has_pwd2()) {
      GOOGLE_DCHECK(!pwd2_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pwd2_.UnsafeRawStringPointer())->clear();
    }
    if (has_imgsid()) {
      GOOGLE_DCHECK(!imgsid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*imgsid_.UnsafeRawStringPointer())->clear();
    }
    if (has_imgcode()) {
      GOOGLE_DCHECK(!imgcode_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*imgcode_.UnsafeRawStringPointer())->clear();
    }
    if (has_safedevicename()) {
      GOOGLE_DCHECK(!safedevicename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*safedevicename_.UnsafeRawStringPointer())->clear();
    }
    if (has_safedevicetype()) {
      GOOGLE_DCHECK(!safedevicetype_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*safedevicetype_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_imgencryptkey()) {
      GOOGLE_DCHECK(imgencryptkey_ != NULL);
      imgencryptkey_->::micromsg::SKBuiltinString_t::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 768u) {
    if (has_ksid()) {
      GOOGLE_DCHECK(ksid_ != NULL);
      ksid_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_wtloginreqbuff()) {
      GOOGLE_DCHECK(wtloginreqbuff_ != NULL);
      wtloginreqbuff_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 7168u) {
    ::memset(&qq_, 0, reinterpret_cast<char*>(&setasmainacct_) -
      reinterpret_cast<char*>(&qq_) + sizeof(setasmainacct_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BindQQRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BindQQRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 QQ = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_qq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Pwd = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pwd().data(), this->pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BindQQRequest.Pwd");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Pwd2 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pwd2().data(), this->pwd2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BindQQRequest.Pwd2");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ImgSid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imgsid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imgsid().data(), this->imgsid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BindQQRequest.ImgSid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ImgCode = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imgcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imgcode().data(), this->imgcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BindQQRequest.ImgCode");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 OPCode = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_opcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinString_t ImgEncryptKey = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imgencryptkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t KSid = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ksid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 SetAsMainAcct = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_setasmainacct();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &setasmainacct_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string SafeDeviceName = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_safedevicename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->safedevicename().data(), this->safedevicename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BindQQRequest.SafeDeviceName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string SafeDeviceType = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_safedevicetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->safedevicetype().data(), this->safedevicetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BindQQRequest.SafeDeviceType");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t WTLoginReqBuff = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wtloginreqbuff()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BindQQRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BindQQRequest)
  return false;
#undef DO_
}

void BindQQRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BindQQRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 QQ = 2;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->qq(), output);
  }

  // optional string Pwd = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindQQRequest.Pwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pwd(), output);
  }

  // optional string Pwd2 = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd2().data(), this->pwd2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindQQRequest.Pwd2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->pwd2(), output);
  }

  // optional string ImgSid = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imgsid().data(), this->imgsid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindQQRequest.ImgSid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->imgsid(), output);
  }

  // optional string ImgCode = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imgcode().data(), this->imgcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindQQRequest.ImgCode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->imgcode(), output);
  }

  // required uint32 OPCode = 7;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->opcode(), output);
  }

  // optional .micromsg.SKBuiltinString_t ImgEncryptKey = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->imgencryptkey_, output);
  }

  // optional .micromsg.SKBuiltinBuffer_t KSid = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->ksid_, output);
  }

  // optional uint32 SetAsMainAcct = 10;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->setasmainacct(), output);
  }

  // optional string SafeDeviceName = 11;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->safedevicename().data(), this->safedevicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindQQRequest.SafeDeviceName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->safedevicename(), output);
  }

  // optional string SafeDeviceType = 12;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->safedevicetype().data(), this->safedevicetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindQQRequest.SafeDeviceType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->safedevicetype(), output);
  }

  // optional .micromsg.SKBuiltinBuffer_t WTLoginReqBuff = 13;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->wtloginreqbuff_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BindQQRequest)
}

::google::protobuf::uint8* BindQQRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BindQQRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 QQ = 2;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->qq(), target);
  }

  // optional string Pwd = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindQQRequest.Pwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pwd(), target);
  }

  // optional string Pwd2 = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd2().data(), this->pwd2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindQQRequest.Pwd2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pwd2(), target);
  }

  // optional string ImgSid = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imgsid().data(), this->imgsid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindQQRequest.ImgSid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->imgsid(), target);
  }

  // optional string ImgCode = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imgcode().data(), this->imgcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindQQRequest.ImgCode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->imgcode(), target);
  }

  // required uint32 OPCode = 7;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->opcode(), target);
  }

  // optional .micromsg.SKBuiltinString_t ImgEncryptKey = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->imgencryptkey_, deterministic, target);
  }

  // optional .micromsg.SKBuiltinBuffer_t KSid = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->ksid_, deterministic, target);
  }

  // optional uint32 SetAsMainAcct = 10;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->setasmainacct(), target);
  }

  // optional string SafeDeviceName = 11;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->safedevicename().data(), this->safedevicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindQQRequest.SafeDeviceName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->safedevicename(), target);
  }

  // optional string SafeDeviceType = 12;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->safedevicetype().data(), this->safedevicetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindQQRequest.SafeDeviceType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->safedevicetype(), target);
  }

  // optional .micromsg.SKBuiltinBuffer_t WTLoginReqBuff = 13;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->wtloginreqbuff_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BindQQRequest)
  return target;
}

size_t BindQQRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.BindQQRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_qq()) {
    // required uint32 QQ = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->qq());
  }

  if (has_opcode()) {
    // required uint32 OPCode = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());
  }

  return total_size;
}
size_t BindQQRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BindQQRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000c40) ^ 0x00000c40) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 QQ = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->qq());

    // required uint32 OPCode = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string Pwd = 3;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }

    // optional string Pwd2 = 4;
    if (has_pwd2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd2());
    }

    // optional string ImgSid = 5;
    if (has_imgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imgsid());
    }

    // optional string ImgCode = 6;
    if (has_imgcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imgcode());
    }

    // optional string SafeDeviceName = 11;
    if (has_safedevicename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->safedevicename());
    }

    // optional string SafeDeviceType = 12;
    if (has_safedevicetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->safedevicetype());
    }

  }
  // optional .micromsg.SKBuiltinString_t ImgEncryptKey = 8;
  if (has_imgencryptkey()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imgencryptkey_);
  }

  if (_has_bits_[8 / 32] & 768u) {
    // optional .micromsg.SKBuiltinBuffer_t KSid = 9;
    if (has_ksid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ksid_);
    }

    // optional .micromsg.SKBuiltinBuffer_t WTLoginReqBuff = 13;
    if (has_wtloginreqbuff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->wtloginreqbuff_);
    }

  }
  // optional uint32 SetAsMainAcct = 10;
  if (has_setasmainacct()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->setasmainacct());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BindQQRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BindQQRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BindQQRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BindQQRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BindQQRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BindQQRequest)
    MergeFrom(*source);
  }
}

void BindQQRequest::MergeFrom(const BindQQRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BindQQRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_pwd();
      pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_pwd2();
      pwd2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd2_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_imgsid();
      imgsid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imgsid_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_imgcode();
      imgcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imgcode_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_safedevicename();
      safedevicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.safedevicename_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_safedevicetype();
      safedevicetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.safedevicetype_);
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_imgencryptkey()->::micromsg::SKBuiltinString_t::MergeFrom(from.imgencryptkey());
    }
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_ksid()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.ksid());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_wtloginreqbuff()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.wtloginreqbuff());
    }
    if (cached_has_bits & 0x00000400u) {
      qq_ = from.qq_;
    }
    if (cached_has_bits & 0x00000800u) {
      opcode_ = from.opcode_;
    }
    if (cached_has_bits & 0x00001000u) {
      setasmainacct_ = from.setasmainacct_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BindQQRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BindQQRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BindQQRequest::CopyFrom(const BindQQRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BindQQRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BindQQRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000c40) != 0x00000c40) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_ksid()) {
    if (!this->ksid_->IsInitialized()) return false;
  }
  if (has_wtloginreqbuff()) {
    if (!this->wtloginreqbuff_->IsInitialized()) return false;
  }
  return true;
}

void BindQQRequest::Swap(BindQQRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BindQQRequest::InternalSwap(BindQQRequest* other) {
  pwd_.Swap(&other->pwd_);
  pwd2_.Swap(&other->pwd2_);
  imgsid_.Swap(&other->imgsid_);
  imgcode_.Swap(&other->imgcode_);
  safedevicename_.Swap(&other->safedevicename_);
  safedevicetype_.Swap(&other->safedevicetype_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(imgencryptkey_, other->imgencryptkey_);
  std::swap(ksid_, other->ksid_);
  std::swap(wtloginreqbuff_, other->wtloginreqbuff_);
  std::swap(qq_, other->qq_);
  std::swap(opcode_, other->opcode_);
  std::swap(setasmainacct_, other->setasmainacct_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BindQQRequest::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BindQQRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool BindQQRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BindQQRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000040u;
}
void BindQQRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000040u;
}
void BindQQRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& BindQQRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.BindQQRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* BindQQRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BindQQRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* BindQQRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.BindQQRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void BindQQRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindQQRequest.BaseRequest)
}

// required uint32 QQ = 2;
bool BindQQRequest::has_qq() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void BindQQRequest::set_has_qq() {
  _has_bits_[0] |= 0x00000400u;
}
void BindQQRequest::clear_has_qq() {
  _has_bits_[0] &= ~0x00000400u;
}
void BindQQRequest::clear_qq() {
  qq_ = 0u;
  clear_has_qq();
}
::google::protobuf::uint32 BindQQRequest::qq() const {
  // @@protoc_insertion_point(field_get:micromsg.BindQQRequest.QQ)
  return qq_;
}
void BindQQRequest::set_qq(::google::protobuf::uint32 value) {
  set_has_qq();
  qq_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BindQQRequest.QQ)
}

// optional string Pwd = 3;
bool BindQQRequest::has_pwd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BindQQRequest::set_has_pwd() {
  _has_bits_[0] |= 0x00000001u;
}
void BindQQRequest::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000001u;
}
void BindQQRequest::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pwd();
}
const ::std::string& BindQQRequest::pwd() const {
  // @@protoc_insertion_point(field_get:micromsg.BindQQRequest.Pwd)
  return pwd_.GetNoArena();
}
void BindQQRequest::set_pwd(const ::std::string& value) {
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BindQQRequest.Pwd)
}
#if LANG_CXX11
void BindQQRequest::set_pwd(::std::string&& value) {
  set_has_pwd();
  pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BindQQRequest.Pwd)
}
#endif
void BindQQRequest::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BindQQRequest.Pwd)
}
void BindQQRequest::set_pwd(const char* value, size_t size) {
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BindQQRequest.Pwd)
}
::std::string* BindQQRequest::mutable_pwd() {
  set_has_pwd();
  // @@protoc_insertion_point(field_mutable:micromsg.BindQQRequest.Pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BindQQRequest::release_pwd() {
  // @@protoc_insertion_point(field_release:micromsg.BindQQRequest.Pwd)
  clear_has_pwd();
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BindQQRequest::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    set_has_pwd();
  } else {
    clear_has_pwd();
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindQQRequest.Pwd)
}

// optional string Pwd2 = 4;
bool BindQQRequest::has_pwd2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BindQQRequest::set_has_pwd2() {
  _has_bits_[0] |= 0x00000002u;
}
void BindQQRequest::clear_has_pwd2() {
  _has_bits_[0] &= ~0x00000002u;
}
void BindQQRequest::clear_pwd2() {
  pwd2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pwd2();
}
const ::std::string& BindQQRequest::pwd2() const {
  // @@protoc_insertion_point(field_get:micromsg.BindQQRequest.Pwd2)
  return pwd2_.GetNoArena();
}
void BindQQRequest::set_pwd2(const ::std::string& value) {
  set_has_pwd2();
  pwd2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BindQQRequest.Pwd2)
}
#if LANG_CXX11
void BindQQRequest::set_pwd2(::std::string&& value) {
  set_has_pwd2();
  pwd2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BindQQRequest.Pwd2)
}
#endif
void BindQQRequest::set_pwd2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pwd2();
  pwd2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BindQQRequest.Pwd2)
}
void BindQQRequest::set_pwd2(const char* value, size_t size) {
  set_has_pwd2();
  pwd2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BindQQRequest.Pwd2)
}
::std::string* BindQQRequest::mutable_pwd2() {
  set_has_pwd2();
  // @@protoc_insertion_point(field_mutable:micromsg.BindQQRequest.Pwd2)
  return pwd2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BindQQRequest::release_pwd2() {
  // @@protoc_insertion_point(field_release:micromsg.BindQQRequest.Pwd2)
  clear_has_pwd2();
  return pwd2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BindQQRequest::set_allocated_pwd2(::std::string* pwd2) {
  if (pwd2 != NULL) {
    set_has_pwd2();
  } else {
    clear_has_pwd2();
  }
  pwd2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd2);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindQQRequest.Pwd2)
}

// optional string ImgSid = 5;
bool BindQQRequest::has_imgsid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BindQQRequest::set_has_imgsid() {
  _has_bits_[0] |= 0x00000004u;
}
void BindQQRequest::clear_has_imgsid() {
  _has_bits_[0] &= ~0x00000004u;
}
void BindQQRequest::clear_imgsid() {
  imgsid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imgsid();
}
const ::std::string& BindQQRequest::imgsid() const {
  // @@protoc_insertion_point(field_get:micromsg.BindQQRequest.ImgSid)
  return imgsid_.GetNoArena();
}
void BindQQRequest::set_imgsid(const ::std::string& value) {
  set_has_imgsid();
  imgsid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BindQQRequest.ImgSid)
}
#if LANG_CXX11
void BindQQRequest::set_imgsid(::std::string&& value) {
  set_has_imgsid();
  imgsid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BindQQRequest.ImgSid)
}
#endif
void BindQQRequest::set_imgsid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imgsid();
  imgsid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BindQQRequest.ImgSid)
}
void BindQQRequest::set_imgsid(const char* value, size_t size) {
  set_has_imgsid();
  imgsid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BindQQRequest.ImgSid)
}
::std::string* BindQQRequest::mutable_imgsid() {
  set_has_imgsid();
  // @@protoc_insertion_point(field_mutable:micromsg.BindQQRequest.ImgSid)
  return imgsid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BindQQRequest::release_imgsid() {
  // @@protoc_insertion_point(field_release:micromsg.BindQQRequest.ImgSid)
  clear_has_imgsid();
  return imgsid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BindQQRequest::set_allocated_imgsid(::std::string* imgsid) {
  if (imgsid != NULL) {
    set_has_imgsid();
  } else {
    clear_has_imgsid();
  }
  imgsid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imgsid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindQQRequest.ImgSid)
}

// optional string ImgCode = 6;
bool BindQQRequest::has_imgcode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BindQQRequest::set_has_imgcode() {
  _has_bits_[0] |= 0x00000008u;
}
void BindQQRequest::clear_has_imgcode() {
  _has_bits_[0] &= ~0x00000008u;
}
void BindQQRequest::clear_imgcode() {
  imgcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imgcode();
}
const ::std::string& BindQQRequest::imgcode() const {
  // @@protoc_insertion_point(field_get:micromsg.BindQQRequest.ImgCode)
  return imgcode_.GetNoArena();
}
void BindQQRequest::set_imgcode(const ::std::string& value) {
  set_has_imgcode();
  imgcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BindQQRequest.ImgCode)
}
#if LANG_CXX11
void BindQQRequest::set_imgcode(::std::string&& value) {
  set_has_imgcode();
  imgcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BindQQRequest.ImgCode)
}
#endif
void BindQQRequest::set_imgcode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imgcode();
  imgcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BindQQRequest.ImgCode)
}
void BindQQRequest::set_imgcode(const char* value, size_t size) {
  set_has_imgcode();
  imgcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BindQQRequest.ImgCode)
}
::std::string* BindQQRequest::mutable_imgcode() {
  set_has_imgcode();
  // @@protoc_insertion_point(field_mutable:micromsg.BindQQRequest.ImgCode)
  return imgcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BindQQRequest::release_imgcode() {
  // @@protoc_insertion_point(field_release:micromsg.BindQQRequest.ImgCode)
  clear_has_imgcode();
  return imgcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BindQQRequest::set_allocated_imgcode(::std::string* imgcode) {
  if (imgcode != NULL) {
    set_has_imgcode();
  } else {
    clear_has_imgcode();
  }
  imgcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imgcode);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindQQRequest.ImgCode)
}

// required uint32 OPCode = 7;
bool BindQQRequest::has_opcode() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void BindQQRequest::set_has_opcode() {
  _has_bits_[0] |= 0x00000800u;
}
void BindQQRequest::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000800u;
}
void BindQQRequest::clear_opcode() {
  opcode_ = 0u;
  clear_has_opcode();
}
::google::protobuf::uint32 BindQQRequest::opcode() const {
  // @@protoc_insertion_point(field_get:micromsg.BindQQRequest.OPCode)
  return opcode_;
}
void BindQQRequest::set_opcode(::google::protobuf::uint32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BindQQRequest.OPCode)
}

// optional .micromsg.SKBuiltinString_t ImgEncryptKey = 8;
bool BindQQRequest::has_imgencryptkey() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BindQQRequest::set_has_imgencryptkey() {
  _has_bits_[0] |= 0x00000080u;
}
void BindQQRequest::clear_has_imgencryptkey() {
  _has_bits_[0] &= ~0x00000080u;
}
void BindQQRequest::clear_imgencryptkey() {
  if (imgencryptkey_ != NULL) imgencryptkey_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_imgencryptkey();
}
const ::micromsg::SKBuiltinString_t& BindQQRequest::imgencryptkey() const {
  // @@protoc_insertion_point(field_get:micromsg.BindQQRequest.ImgEncryptKey)
  return imgencryptkey_ != NULL ? *imgencryptkey_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* BindQQRequest::mutable_imgencryptkey() {
  set_has_imgencryptkey();
  if (imgencryptkey_ == NULL) {
    imgencryptkey_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BindQQRequest.ImgEncryptKey)
  return imgencryptkey_;
}
::micromsg::SKBuiltinString_t* BindQQRequest::release_imgencryptkey() {
  // @@protoc_insertion_point(field_release:micromsg.BindQQRequest.ImgEncryptKey)
  clear_has_imgencryptkey();
  ::micromsg::SKBuiltinString_t* temp = imgencryptkey_;
  imgencryptkey_ = NULL;
  return temp;
}
void BindQQRequest::set_allocated_imgencryptkey(::micromsg::SKBuiltinString_t* imgencryptkey) {
  delete imgencryptkey_;
  imgencryptkey_ = imgencryptkey;
  if (imgencryptkey) {
    set_has_imgencryptkey();
  } else {
    clear_has_imgencryptkey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindQQRequest.ImgEncryptKey)
}

// optional .micromsg.SKBuiltinBuffer_t KSid = 9;
bool BindQQRequest::has_ksid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void BindQQRequest::set_has_ksid() {
  _has_bits_[0] |= 0x00000100u;
}
void BindQQRequest::clear_has_ksid() {
  _has_bits_[0] &= ~0x00000100u;
}
void BindQQRequest::clear_ksid() {
  if (ksid_ != NULL) ksid_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_ksid();
}
const ::micromsg::SKBuiltinBuffer_t& BindQQRequest::ksid() const {
  // @@protoc_insertion_point(field_get:micromsg.BindQQRequest.KSid)
  return ksid_ != NULL ? *ksid_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* BindQQRequest::mutable_ksid() {
  set_has_ksid();
  if (ksid_ == NULL) {
    ksid_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BindQQRequest.KSid)
  return ksid_;
}
::micromsg::SKBuiltinBuffer_t* BindQQRequest::release_ksid() {
  // @@protoc_insertion_point(field_release:micromsg.BindQQRequest.KSid)
  clear_has_ksid();
  ::micromsg::SKBuiltinBuffer_t* temp = ksid_;
  ksid_ = NULL;
  return temp;
}
void BindQQRequest::set_allocated_ksid(::micromsg::SKBuiltinBuffer_t* ksid) {
  delete ksid_;
  ksid_ = ksid;
  if (ksid) {
    set_has_ksid();
  } else {
    clear_has_ksid();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindQQRequest.KSid)
}

// optional uint32 SetAsMainAcct = 10;
bool BindQQRequest::has_setasmainacct() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void BindQQRequest::set_has_setasmainacct() {
  _has_bits_[0] |= 0x00001000u;
}
void BindQQRequest::clear_has_setasmainacct() {
  _has_bits_[0] &= ~0x00001000u;
}
void BindQQRequest::clear_setasmainacct() {
  setasmainacct_ = 0u;
  clear_has_setasmainacct();
}
::google::protobuf::uint32 BindQQRequest::setasmainacct() const {
  // @@protoc_insertion_point(field_get:micromsg.BindQQRequest.SetAsMainAcct)
  return setasmainacct_;
}
void BindQQRequest::set_setasmainacct(::google::protobuf::uint32 value) {
  set_has_setasmainacct();
  setasmainacct_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BindQQRequest.SetAsMainAcct)
}

// optional string SafeDeviceName = 11;
bool BindQQRequest::has_safedevicename() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BindQQRequest::set_has_safedevicename() {
  _has_bits_[0] |= 0x00000010u;
}
void BindQQRequest::clear_has_safedevicename() {
  _has_bits_[0] &= ~0x00000010u;
}
void BindQQRequest::clear_safedevicename() {
  safedevicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_safedevicename();
}
const ::std::string& BindQQRequest::safedevicename() const {
  // @@protoc_insertion_point(field_get:micromsg.BindQQRequest.SafeDeviceName)
  return safedevicename_.GetNoArena();
}
void BindQQRequest::set_safedevicename(const ::std::string& value) {
  set_has_safedevicename();
  safedevicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BindQQRequest.SafeDeviceName)
}
#if LANG_CXX11
void BindQQRequest::set_safedevicename(::std::string&& value) {
  set_has_safedevicename();
  safedevicename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BindQQRequest.SafeDeviceName)
}
#endif
void BindQQRequest::set_safedevicename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_safedevicename();
  safedevicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BindQQRequest.SafeDeviceName)
}
void BindQQRequest::set_safedevicename(const char* value, size_t size) {
  set_has_safedevicename();
  safedevicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BindQQRequest.SafeDeviceName)
}
::std::string* BindQQRequest::mutable_safedevicename() {
  set_has_safedevicename();
  // @@protoc_insertion_point(field_mutable:micromsg.BindQQRequest.SafeDeviceName)
  return safedevicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BindQQRequest::release_safedevicename() {
  // @@protoc_insertion_point(field_release:micromsg.BindQQRequest.SafeDeviceName)
  clear_has_safedevicename();
  return safedevicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BindQQRequest::set_allocated_safedevicename(::std::string* safedevicename) {
  if (safedevicename != NULL) {
    set_has_safedevicename();
  } else {
    clear_has_safedevicename();
  }
  safedevicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), safedevicename);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindQQRequest.SafeDeviceName)
}

// optional string SafeDeviceType = 12;
bool BindQQRequest::has_safedevicetype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BindQQRequest::set_has_safedevicetype() {
  _has_bits_[0] |= 0x00000020u;
}
void BindQQRequest::clear_has_safedevicetype() {
  _has_bits_[0] &= ~0x00000020u;
}
void BindQQRequest::clear_safedevicetype() {
  safedevicetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_safedevicetype();
}
const ::std::string& BindQQRequest::safedevicetype() const {
  // @@protoc_insertion_point(field_get:micromsg.BindQQRequest.SafeDeviceType)
  return safedevicetype_.GetNoArena();
}
void BindQQRequest::set_safedevicetype(const ::std::string& value) {
  set_has_safedevicetype();
  safedevicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BindQQRequest.SafeDeviceType)
}
#if LANG_CXX11
void BindQQRequest::set_safedevicetype(::std::string&& value) {
  set_has_safedevicetype();
  safedevicetype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BindQQRequest.SafeDeviceType)
}
#endif
void BindQQRequest::set_safedevicetype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_safedevicetype();
  safedevicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BindQQRequest.SafeDeviceType)
}
void BindQQRequest::set_safedevicetype(const char* value, size_t size) {
  set_has_safedevicetype();
  safedevicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BindQQRequest.SafeDeviceType)
}
::std::string* BindQQRequest::mutable_safedevicetype() {
  set_has_safedevicetype();
  // @@protoc_insertion_point(field_mutable:micromsg.BindQQRequest.SafeDeviceType)
  return safedevicetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BindQQRequest::release_safedevicetype() {
  // @@protoc_insertion_point(field_release:micromsg.BindQQRequest.SafeDeviceType)
  clear_has_safedevicetype();
  return safedevicetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BindQQRequest::set_allocated_safedevicetype(::std::string* safedevicetype) {
  if (safedevicetype != NULL) {
    set_has_safedevicetype();
  } else {
    clear_has_safedevicetype();
  }
  safedevicetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), safedevicetype);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindQQRequest.SafeDeviceType)
}

// optional .micromsg.SKBuiltinBuffer_t WTLoginReqBuff = 13;
bool BindQQRequest::has_wtloginreqbuff() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void BindQQRequest::set_has_wtloginreqbuff() {
  _has_bits_[0] |= 0x00000200u;
}
void BindQQRequest::clear_has_wtloginreqbuff() {
  _has_bits_[0] &= ~0x00000200u;
}
void BindQQRequest::clear_wtloginreqbuff() {
  if (wtloginreqbuff_ != NULL) wtloginreqbuff_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_wtloginreqbuff();
}
const ::micromsg::SKBuiltinBuffer_t& BindQQRequest::wtloginreqbuff() const {
  // @@protoc_insertion_point(field_get:micromsg.BindQQRequest.WTLoginReqBuff)
  return wtloginreqbuff_ != NULL ? *wtloginreqbuff_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* BindQQRequest::mutable_wtloginreqbuff() {
  set_has_wtloginreqbuff();
  if (wtloginreqbuff_ == NULL) {
    wtloginreqbuff_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BindQQRequest.WTLoginReqBuff)
  return wtloginreqbuff_;
}
::micromsg::SKBuiltinBuffer_t* BindQQRequest::release_wtloginreqbuff() {
  // @@protoc_insertion_point(field_release:micromsg.BindQQRequest.WTLoginReqBuff)
  clear_has_wtloginreqbuff();
  ::micromsg::SKBuiltinBuffer_t* temp = wtloginreqbuff_;
  wtloginreqbuff_ = NULL;
  return temp;
}
void BindQQRequest::set_allocated_wtloginreqbuff(::micromsg::SKBuiltinBuffer_t* wtloginreqbuff) {
  delete wtloginreqbuff_;
  wtloginreqbuff_ = wtloginreqbuff;
  if (wtloginreqbuff) {
    set_has_wtloginreqbuff();
  } else {
    clear_has_wtloginreqbuff();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindQQRequest.WTLoginReqBuff)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BindQQResponse::kBaseResponseFieldNumber;
const int BindQQResponse::kImgSidFieldNumber;
const int BindQQResponse::kImgBufFieldNumber;
const int BindQQResponse::kPushMailStatusFieldNumber;
const int BindQQResponse::kPrivateMsgStatusFieldNumber;
const int BindQQResponse::kMicroBlogNameFieldNumber;
const int BindQQResponse::kStatusFieldNumber;
const int BindQQResponse::kQQMailSkeyFieldNumber;
const int BindQQResponse::kImgEncryptKeyFieldNumber;
const int BindQQResponse::kA2KeyFieldNumber;
const int BindQQResponse::kKSidFieldNumber;
const int BindQQResponse::kSafeDeviceListFieldNumber;
const int BindQQResponse::kSafeDeviceFieldNumber;
const int BindQQResponse::kWTLoginRspBuffFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BindQQResponse::BindQQResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BindQQResponse)
}
BindQQResponse::BindQQResponse(const BindQQResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  imgsid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_imgsid()) {
    imgsid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imgsid_);
  }
  microblogname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_microblogname()) {
    microblogname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.microblogname_);
  }
  qqmailskey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_qqmailskey()) {
    qqmailskey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qqmailskey_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_imgbuf()) {
    imgbuf_ = new ::micromsg::SKBuiltinBuffer_t(*from.imgbuf_);
  } else {
    imgbuf_ = NULL;
  }
  if (from.has_imgencryptkey()) {
    imgencryptkey_ = new ::micromsg::SKBuiltinString_t(*from.imgencryptkey_);
  } else {
    imgencryptkey_ = NULL;
  }
  if (from.has_a2key()) {
    a2key_ = new ::micromsg::SKBuiltinBuffer_t(*from.a2key_);
  } else {
    a2key_ = NULL;
  }
  if (from.has_ksid()) {
    ksid_ = new ::micromsg::SKBuiltinBuffer_t(*from.ksid_);
  } else {
    ksid_ = NULL;
  }
  if (from.has_safedevicelist()) {
    safedevicelist_ = new ::micromsg::SafeDeviceList(*from.safedevicelist_);
  } else {
    safedevicelist_ = NULL;
  }
  if (from.has_wtloginrspbuff()) {
    wtloginrspbuff_ = new ::micromsg::SKBuiltinBuffer_t(*from.wtloginrspbuff_);
  } else {
    wtloginrspbuff_ = NULL;
  }
  ::memcpy(&pushmailstatus_, &from.pushmailstatus_,
    reinterpret_cast<char*>(&safedevice_) -
    reinterpret_cast<char*>(&pushmailstatus_) + sizeof(safedevice_));
  // @@protoc_insertion_point(copy_constructor:micromsg.BindQQResponse)
}

void BindQQResponse::SharedCtor() {
  _cached_size_ = 0;
  imgsid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  microblogname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qqmailskey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&safedevice_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(safedevice_));
}

BindQQResponse::~BindQQResponse() {
  // @@protoc_insertion_point(destructor:micromsg.BindQQResponse)
  SharedDtor();
}

void BindQQResponse::SharedDtor() {
  imgsid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  microblogname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qqmailskey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete imgbuf_;
  }
  if (this != internal_default_instance()) {
    delete imgencryptkey_;
  }
  if (this != internal_default_instance()) {
    delete a2key_;
  }
  if (this != internal_default_instance()) {
    delete ksid_;
  }
  if (this != internal_default_instance()) {
    delete safedevicelist_;
  }
  if (this != internal_default_instance()) {
    delete wtloginrspbuff_;
  }
}

void BindQQResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BindQQResponse::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BindQQResponse& BindQQResponse::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

BindQQResponse* BindQQResponse::New(::google::protobuf::Arena* arena) const {
  BindQQResponse* n = new BindQQResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BindQQResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BindQQResponse)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_imgsid()) {
      GOOGLE_DCHECK(!imgsid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*imgsid_.UnsafeRawStringPointer())->clear();
    }
    if (has_microblogname()) {
      GOOGLE_DCHECK(!microblogname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*microblogname_.UnsafeRawStringPointer())->clear();
    }
    if (has_qqmailskey()) {
      GOOGLE_DCHECK(!qqmailskey_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*qqmailskey_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_imgbuf()) {
      GOOGLE_DCHECK(imgbuf_ != NULL);
      imgbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_imgencryptkey()) {
      GOOGLE_DCHECK(imgencryptkey_ != NULL);
      imgencryptkey_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_a2key()) {
      GOOGLE_DCHECK(a2key_ != NULL);
      a2key_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_ksid()) {
      GOOGLE_DCHECK(ksid_ != NULL);
      ksid_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 768u) {
    if (has_safedevicelist()) {
      GOOGLE_DCHECK(safedevicelist_ != NULL);
      safedevicelist_->::micromsg::SafeDeviceList::Clear();
    }
    if (has_wtloginrspbuff()) {
      GOOGLE_DCHECK(wtloginrspbuff_ != NULL);
      wtloginrspbuff_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 15360u) {
    ::memset(&pushmailstatus_, 0, reinterpret_cast<char*>(&safedevice_) -
      reinterpret_cast<char*>(&pushmailstatus_) + sizeof(safedevice_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BindQQResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BindQQResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ImgSid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imgsid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imgsid().data(), this->imgsid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BindQQResponse.ImgSid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t ImgBuf = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imgbuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 PushMailStatus = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_pushmailstatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pushmailstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 PrivateMsgStatus = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_privatemsgstatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &privatemsgstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string MicroBlogName = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_microblogname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->microblogname().data(), this->microblogname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BindQQResponse.MicroBlogName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Status = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string QQMailSkey = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qqmailskey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->qqmailskey().data(), this->qqmailskey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BindQQResponse.QQMailSkey");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinString_t ImgEncryptKey = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imgencryptkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t A2Key = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_a2key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t KSid = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ksid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SafeDeviceList SafeDeviceList = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_safedevicelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 SafeDevice = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_safedevice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &safedevice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t WTLoginRspBuff = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wtloginrspbuff()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BindQQResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BindQQResponse)
  return false;
#undef DO_
}

void BindQQResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BindQQResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional string ImgSid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imgsid().data(), this->imgsid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindQQResponse.ImgSid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->imgsid(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t ImgBuf = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->imgbuf_, output);
  }

  // optional uint32 PushMailStatus = 4;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pushmailstatus(), output);
  }

  // optional uint32 PrivateMsgStatus = 5;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->privatemsgstatus(), output);
  }

  // optional string MicroBlogName = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->microblogname().data(), this->microblogname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindQQResponse.MicroBlogName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->microblogname(), output);
  }

  // optional uint32 Status = 7;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->status(), output);
  }

  // optional string QQMailSkey = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qqmailskey().data(), this->qqmailskey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindQQResponse.QQMailSkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->qqmailskey(), output);
  }

  // optional .micromsg.SKBuiltinString_t ImgEncryptKey = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->imgencryptkey_, output);
  }

  // optional .micromsg.SKBuiltinBuffer_t A2Key = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->a2key_, output);
  }

  // optional .micromsg.SKBuiltinBuffer_t KSid = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->ksid_, output);
  }

  // optional .micromsg.SafeDeviceList SafeDeviceList = 12;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->safedevicelist_, output);
  }

  // optional uint32 SafeDevice = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->safedevice(), output);
  }

  // optional .micromsg.SKBuiltinBuffer_t WTLoginRspBuff = 14;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->wtloginrspbuff_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BindQQResponse)
}

::google::protobuf::uint8* BindQQResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BindQQResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional string ImgSid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imgsid().data(), this->imgsid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindQQResponse.ImgSid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->imgsid(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t ImgBuf = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->imgbuf_, deterministic, target);
  }

  // optional uint32 PushMailStatus = 4;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pushmailstatus(), target);
  }

  // optional uint32 PrivateMsgStatus = 5;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->privatemsgstatus(), target);
  }

  // optional string MicroBlogName = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->microblogname().data(), this->microblogname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindQQResponse.MicroBlogName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->microblogname(), target);
  }

  // optional uint32 Status = 7;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->status(), target);
  }

  // optional string QQMailSkey = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qqmailskey().data(), this->qqmailskey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindQQResponse.QQMailSkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->qqmailskey(), target);
  }

  // optional .micromsg.SKBuiltinString_t ImgEncryptKey = 9;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->imgencryptkey_, deterministic, target);
  }

  // optional .micromsg.SKBuiltinBuffer_t A2Key = 10;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->a2key_, deterministic, target);
  }

  // optional .micromsg.SKBuiltinBuffer_t KSid = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->ksid_, deterministic, target);
  }

  // optional .micromsg.SafeDeviceList SafeDeviceList = 12;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->safedevicelist_, deterministic, target);
  }

  // optional uint32 SafeDevice = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->safedevice(), target);
  }

  // optional .micromsg.SKBuiltinBuffer_t WTLoginRspBuff = 14;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->wtloginrspbuff_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BindQQResponse)
  return target;
}

size_t BindQQResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.BindQQResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_imgbuf()) {
    // required .micromsg.SKBuiltinBuffer_t ImgBuf = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imgbuf_);
  }

  return total_size;
}
size_t BindQQResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BindQQResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000018) ^ 0x00000018) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required .micromsg.SKBuiltinBuffer_t ImgBuf = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imgbuf_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string ImgSid = 2;
    if (has_imgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imgsid());
    }

    // optional string MicroBlogName = 6;
    if (has_microblogname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->microblogname());
    }

    // optional string QQMailSkey = 8;
    if (has_qqmailskey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qqmailskey());
    }

  }
  if (_has_bits_[0 / 32] & 224u) {
    // optional .micromsg.SKBuiltinString_t ImgEncryptKey = 9;
    if (has_imgencryptkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->imgencryptkey_);
    }

    // optional .micromsg.SKBuiltinBuffer_t A2Key = 10;
    if (has_a2key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->a2key_);
    }

    // optional .micromsg.SKBuiltinBuffer_t KSid = 11;
    if (has_ksid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ksid_);
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional .micromsg.SafeDeviceList SafeDeviceList = 12;
    if (has_safedevicelist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->safedevicelist_);
    }

    // optional .micromsg.SKBuiltinBuffer_t WTLoginRspBuff = 14;
    if (has_wtloginrspbuff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->wtloginrspbuff_);
    }

    // optional uint32 PushMailStatus = 4;
    if (has_pushmailstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pushmailstatus());
    }

    // optional uint32 PrivateMsgStatus = 5;
    if (has_privatemsgstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->privatemsgstatus());
    }

    // optional uint32 Status = 7;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint32 SafeDevice = 13;
    if (has_safedevice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->safedevice());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BindQQResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BindQQResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BindQQResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BindQQResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BindQQResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BindQQResponse)
    MergeFrom(*source);
  }
}

void BindQQResponse::MergeFrom(const BindQQResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BindQQResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_imgsid();
      imgsid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imgsid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_microblogname();
      microblogname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.microblogname_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_qqmailskey();
      qqmailskey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qqmailskey_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_imgbuf()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.imgbuf());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_imgencryptkey()->::micromsg::SKBuiltinString_t::MergeFrom(from.imgencryptkey());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_a2key()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.a2key());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_ksid()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.ksid());
    }
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_safedevicelist()->::micromsg::SafeDeviceList::MergeFrom(from.safedevicelist());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_wtloginrspbuff()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.wtloginrspbuff());
    }
    if (cached_has_bits & 0x00000400u) {
      pushmailstatus_ = from.pushmailstatus_;
    }
    if (cached_has_bits & 0x00000800u) {
      privatemsgstatus_ = from.privatemsgstatus_;
    }
    if (cached_has_bits & 0x00001000u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00002000u) {
      safedevice_ = from.safedevice_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BindQQResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BindQQResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BindQQResponse::CopyFrom(const BindQQResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BindQQResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BindQQResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000018) != 0x00000018) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_imgbuf()) {
    if (!this->imgbuf_->IsInitialized()) return false;
  }
  if (has_a2key()) {
    if (!this->a2key_->IsInitialized()) return false;
  }
  if (has_ksid()) {
    if (!this->ksid_->IsInitialized()) return false;
  }
  if (has_safedevicelist()) {
    if (!this->safedevicelist_->IsInitialized()) return false;
  }
  if (has_wtloginrspbuff()) {
    if (!this->wtloginrspbuff_->IsInitialized()) return false;
  }
  return true;
}

void BindQQResponse::Swap(BindQQResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BindQQResponse::InternalSwap(BindQQResponse* other) {
  imgsid_.Swap(&other->imgsid_);
  microblogname_.Swap(&other->microblogname_);
  qqmailskey_.Swap(&other->qqmailskey_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(imgbuf_, other->imgbuf_);
  std::swap(imgencryptkey_, other->imgencryptkey_);
  std::swap(a2key_, other->a2key_);
  std::swap(ksid_, other->ksid_);
  std::swap(safedevicelist_, other->safedevicelist_);
  std::swap(wtloginrspbuff_, other->wtloginrspbuff_);
  std::swap(pushmailstatus_, other->pushmailstatus_);
  std::swap(privatemsgstatus_, other->privatemsgstatus_);
  std::swap(status_, other->status_);
  std::swap(safedevice_, other->safedevice_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BindQQResponse::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BindQQResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool BindQQResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BindQQResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000008u;
}
void BindQQResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000008u;
}
void BindQQResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& BindQQResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.BindQQResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* BindQQResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BindQQResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* BindQQResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.BindQQResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void BindQQResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindQQResponse.BaseResponse)
}

// optional string ImgSid = 2;
bool BindQQResponse::has_imgsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BindQQResponse::set_has_imgsid() {
  _has_bits_[0] |= 0x00000001u;
}
void BindQQResponse::clear_has_imgsid() {
  _has_bits_[0] &= ~0x00000001u;
}
void BindQQResponse::clear_imgsid() {
  imgsid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imgsid();
}
const ::std::string& BindQQResponse::imgsid() const {
  // @@protoc_insertion_point(field_get:micromsg.BindQQResponse.ImgSid)
  return imgsid_.GetNoArena();
}
void BindQQResponse::set_imgsid(const ::std::string& value) {
  set_has_imgsid();
  imgsid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BindQQResponse.ImgSid)
}
#if LANG_CXX11
void BindQQResponse::set_imgsid(::std::string&& value) {
  set_has_imgsid();
  imgsid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BindQQResponse.ImgSid)
}
#endif
void BindQQResponse::set_imgsid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imgsid();
  imgsid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BindQQResponse.ImgSid)
}
void BindQQResponse::set_imgsid(const char* value, size_t size) {
  set_has_imgsid();
  imgsid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BindQQResponse.ImgSid)
}
::std::string* BindQQResponse::mutable_imgsid() {
  set_has_imgsid();
  // @@protoc_insertion_point(field_mutable:micromsg.BindQQResponse.ImgSid)
  return imgsid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BindQQResponse::release_imgsid() {
  // @@protoc_insertion_point(field_release:micromsg.BindQQResponse.ImgSid)
  clear_has_imgsid();
  return imgsid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BindQQResponse::set_allocated_imgsid(::std::string* imgsid) {
  if (imgsid != NULL) {
    set_has_imgsid();
  } else {
    clear_has_imgsid();
  }
  imgsid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imgsid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindQQResponse.ImgSid)
}

// required .micromsg.SKBuiltinBuffer_t ImgBuf = 3;
bool BindQQResponse::has_imgbuf() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BindQQResponse::set_has_imgbuf() {
  _has_bits_[0] |= 0x00000010u;
}
void BindQQResponse::clear_has_imgbuf() {
  _has_bits_[0] &= ~0x00000010u;
}
void BindQQResponse::clear_imgbuf() {
  if (imgbuf_ != NULL) imgbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_imgbuf();
}
const ::micromsg::SKBuiltinBuffer_t& BindQQResponse::imgbuf() const {
  // @@protoc_insertion_point(field_get:micromsg.BindQQResponse.ImgBuf)
  return imgbuf_ != NULL ? *imgbuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* BindQQResponse::mutable_imgbuf() {
  set_has_imgbuf();
  if (imgbuf_ == NULL) {
    imgbuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BindQQResponse.ImgBuf)
  return imgbuf_;
}
::micromsg::SKBuiltinBuffer_t* BindQQResponse::release_imgbuf() {
  // @@protoc_insertion_point(field_release:micromsg.BindQQResponse.ImgBuf)
  clear_has_imgbuf();
  ::micromsg::SKBuiltinBuffer_t* temp = imgbuf_;
  imgbuf_ = NULL;
  return temp;
}
void BindQQResponse::set_allocated_imgbuf(::micromsg::SKBuiltinBuffer_t* imgbuf) {
  delete imgbuf_;
  imgbuf_ = imgbuf;
  if (imgbuf) {
    set_has_imgbuf();
  } else {
    clear_has_imgbuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindQQResponse.ImgBuf)
}

// optional uint32 PushMailStatus = 4;
bool BindQQResponse::has_pushmailstatus() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void BindQQResponse::set_has_pushmailstatus() {
  _has_bits_[0] |= 0x00000400u;
}
void BindQQResponse::clear_has_pushmailstatus() {
  _has_bits_[0] &= ~0x00000400u;
}
void BindQQResponse::clear_pushmailstatus() {
  pushmailstatus_ = 0u;
  clear_has_pushmailstatus();
}
::google::protobuf::uint32 BindQQResponse::pushmailstatus() const {
  // @@protoc_insertion_point(field_get:micromsg.BindQQResponse.PushMailStatus)
  return pushmailstatus_;
}
void BindQQResponse::set_pushmailstatus(::google::protobuf::uint32 value) {
  set_has_pushmailstatus();
  pushmailstatus_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BindQQResponse.PushMailStatus)
}

// optional uint32 PrivateMsgStatus = 5;
bool BindQQResponse::has_privatemsgstatus() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void BindQQResponse::set_has_privatemsgstatus() {
  _has_bits_[0] |= 0x00000800u;
}
void BindQQResponse::clear_has_privatemsgstatus() {
  _has_bits_[0] &= ~0x00000800u;
}
void BindQQResponse::clear_privatemsgstatus() {
  privatemsgstatus_ = 0u;
  clear_has_privatemsgstatus();
}
::google::protobuf::uint32 BindQQResponse::privatemsgstatus() const {
  // @@protoc_insertion_point(field_get:micromsg.BindQQResponse.PrivateMsgStatus)
  return privatemsgstatus_;
}
void BindQQResponse::set_privatemsgstatus(::google::protobuf::uint32 value) {
  set_has_privatemsgstatus();
  privatemsgstatus_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BindQQResponse.PrivateMsgStatus)
}

// optional string MicroBlogName = 6;
bool BindQQResponse::has_microblogname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BindQQResponse::set_has_microblogname() {
  _has_bits_[0] |= 0x00000002u;
}
void BindQQResponse::clear_has_microblogname() {
  _has_bits_[0] &= ~0x00000002u;
}
void BindQQResponse::clear_microblogname() {
  microblogname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_microblogname();
}
const ::std::string& BindQQResponse::microblogname() const {
  // @@protoc_insertion_point(field_get:micromsg.BindQQResponse.MicroBlogName)
  return microblogname_.GetNoArena();
}
void BindQQResponse::set_microblogname(const ::std::string& value) {
  set_has_microblogname();
  microblogname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BindQQResponse.MicroBlogName)
}
#if LANG_CXX11
void BindQQResponse::set_microblogname(::std::string&& value) {
  set_has_microblogname();
  microblogname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BindQQResponse.MicroBlogName)
}
#endif
void BindQQResponse::set_microblogname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_microblogname();
  microblogname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BindQQResponse.MicroBlogName)
}
void BindQQResponse::set_microblogname(const char* value, size_t size) {
  set_has_microblogname();
  microblogname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BindQQResponse.MicroBlogName)
}
::std::string* BindQQResponse::mutable_microblogname() {
  set_has_microblogname();
  // @@protoc_insertion_point(field_mutable:micromsg.BindQQResponse.MicroBlogName)
  return microblogname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BindQQResponse::release_microblogname() {
  // @@protoc_insertion_point(field_release:micromsg.BindQQResponse.MicroBlogName)
  clear_has_microblogname();
  return microblogname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BindQQResponse::set_allocated_microblogname(::std::string* microblogname) {
  if (microblogname != NULL) {
    set_has_microblogname();
  } else {
    clear_has_microblogname();
  }
  microblogname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), microblogname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindQQResponse.MicroBlogName)
}

// optional uint32 Status = 7;
bool BindQQResponse::has_status() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void BindQQResponse::set_has_status() {
  _has_bits_[0] |= 0x00001000u;
}
void BindQQResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00001000u;
}
void BindQQResponse::clear_status() {
  status_ = 0u;
  clear_has_status();
}
::google::protobuf::uint32 BindQQResponse::status() const {
  // @@protoc_insertion_point(field_get:micromsg.BindQQResponse.Status)
  return status_;
}
void BindQQResponse::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BindQQResponse.Status)
}

// optional string QQMailSkey = 8;
bool BindQQResponse::has_qqmailskey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BindQQResponse::set_has_qqmailskey() {
  _has_bits_[0] |= 0x00000004u;
}
void BindQQResponse::clear_has_qqmailskey() {
  _has_bits_[0] &= ~0x00000004u;
}
void BindQQResponse::clear_qqmailskey() {
  qqmailskey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_qqmailskey();
}
const ::std::string& BindQQResponse::qqmailskey() const {
  // @@protoc_insertion_point(field_get:micromsg.BindQQResponse.QQMailSkey)
  return qqmailskey_.GetNoArena();
}
void BindQQResponse::set_qqmailskey(const ::std::string& value) {
  set_has_qqmailskey();
  qqmailskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BindQQResponse.QQMailSkey)
}
#if LANG_CXX11
void BindQQResponse::set_qqmailskey(::std::string&& value) {
  set_has_qqmailskey();
  qqmailskey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BindQQResponse.QQMailSkey)
}
#endif
void BindQQResponse::set_qqmailskey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_qqmailskey();
  qqmailskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BindQQResponse.QQMailSkey)
}
void BindQQResponse::set_qqmailskey(const char* value, size_t size) {
  set_has_qqmailskey();
  qqmailskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BindQQResponse.QQMailSkey)
}
::std::string* BindQQResponse::mutable_qqmailskey() {
  set_has_qqmailskey();
  // @@protoc_insertion_point(field_mutable:micromsg.BindQQResponse.QQMailSkey)
  return qqmailskey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BindQQResponse::release_qqmailskey() {
  // @@protoc_insertion_point(field_release:micromsg.BindQQResponse.QQMailSkey)
  clear_has_qqmailskey();
  return qqmailskey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BindQQResponse::set_allocated_qqmailskey(::std::string* qqmailskey) {
  if (qqmailskey != NULL) {
    set_has_qqmailskey();
  } else {
    clear_has_qqmailskey();
  }
  qqmailskey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qqmailskey);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindQQResponse.QQMailSkey)
}

// optional .micromsg.SKBuiltinString_t ImgEncryptKey = 9;
bool BindQQResponse::has_imgencryptkey() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BindQQResponse::set_has_imgencryptkey() {
  _has_bits_[0] |= 0x00000020u;
}
void BindQQResponse::clear_has_imgencryptkey() {
  _has_bits_[0] &= ~0x00000020u;
}
void BindQQResponse::clear_imgencryptkey() {
  if (imgencryptkey_ != NULL) imgencryptkey_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_imgencryptkey();
}
const ::micromsg::SKBuiltinString_t& BindQQResponse::imgencryptkey() const {
  // @@protoc_insertion_point(field_get:micromsg.BindQQResponse.ImgEncryptKey)
  return imgencryptkey_ != NULL ? *imgencryptkey_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* BindQQResponse::mutable_imgencryptkey() {
  set_has_imgencryptkey();
  if (imgencryptkey_ == NULL) {
    imgencryptkey_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BindQQResponse.ImgEncryptKey)
  return imgencryptkey_;
}
::micromsg::SKBuiltinString_t* BindQQResponse::release_imgencryptkey() {
  // @@protoc_insertion_point(field_release:micromsg.BindQQResponse.ImgEncryptKey)
  clear_has_imgencryptkey();
  ::micromsg::SKBuiltinString_t* temp = imgencryptkey_;
  imgencryptkey_ = NULL;
  return temp;
}
void BindQQResponse::set_allocated_imgencryptkey(::micromsg::SKBuiltinString_t* imgencryptkey) {
  delete imgencryptkey_;
  imgencryptkey_ = imgencryptkey;
  if (imgencryptkey) {
    set_has_imgencryptkey();
  } else {
    clear_has_imgencryptkey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindQQResponse.ImgEncryptKey)
}

// optional .micromsg.SKBuiltinBuffer_t A2Key = 10;
bool BindQQResponse::has_a2key() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BindQQResponse::set_has_a2key() {
  _has_bits_[0] |= 0x00000040u;
}
void BindQQResponse::clear_has_a2key() {
  _has_bits_[0] &= ~0x00000040u;
}
void BindQQResponse::clear_a2key() {
  if (a2key_ != NULL) a2key_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_a2key();
}
const ::micromsg::SKBuiltinBuffer_t& BindQQResponse::a2key() const {
  // @@protoc_insertion_point(field_get:micromsg.BindQQResponse.A2Key)
  return a2key_ != NULL ? *a2key_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* BindQQResponse::mutable_a2key() {
  set_has_a2key();
  if (a2key_ == NULL) {
    a2key_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BindQQResponse.A2Key)
  return a2key_;
}
::micromsg::SKBuiltinBuffer_t* BindQQResponse::release_a2key() {
  // @@protoc_insertion_point(field_release:micromsg.BindQQResponse.A2Key)
  clear_has_a2key();
  ::micromsg::SKBuiltinBuffer_t* temp = a2key_;
  a2key_ = NULL;
  return temp;
}
void BindQQResponse::set_allocated_a2key(::micromsg::SKBuiltinBuffer_t* a2key) {
  delete a2key_;
  a2key_ = a2key;
  if (a2key) {
    set_has_a2key();
  } else {
    clear_has_a2key();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindQQResponse.A2Key)
}

// optional .micromsg.SKBuiltinBuffer_t KSid = 11;
bool BindQQResponse::has_ksid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BindQQResponse::set_has_ksid() {
  _has_bits_[0] |= 0x00000080u;
}
void BindQQResponse::clear_has_ksid() {
  _has_bits_[0] &= ~0x00000080u;
}
void BindQQResponse::clear_ksid() {
  if (ksid_ != NULL) ksid_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_ksid();
}
const ::micromsg::SKBuiltinBuffer_t& BindQQResponse::ksid() const {
  // @@protoc_insertion_point(field_get:micromsg.BindQQResponse.KSid)
  return ksid_ != NULL ? *ksid_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* BindQQResponse::mutable_ksid() {
  set_has_ksid();
  if (ksid_ == NULL) {
    ksid_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BindQQResponse.KSid)
  return ksid_;
}
::micromsg::SKBuiltinBuffer_t* BindQQResponse::release_ksid() {
  // @@protoc_insertion_point(field_release:micromsg.BindQQResponse.KSid)
  clear_has_ksid();
  ::micromsg::SKBuiltinBuffer_t* temp = ksid_;
  ksid_ = NULL;
  return temp;
}
void BindQQResponse::set_allocated_ksid(::micromsg::SKBuiltinBuffer_t* ksid) {
  delete ksid_;
  ksid_ = ksid;
  if (ksid) {
    set_has_ksid();
  } else {
    clear_has_ksid();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindQQResponse.KSid)
}

// optional .micromsg.SafeDeviceList SafeDeviceList = 12;
bool BindQQResponse::has_safedevicelist() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void BindQQResponse::set_has_safedevicelist() {
  _has_bits_[0] |= 0x00000100u;
}
void BindQQResponse::clear_has_safedevicelist() {
  _has_bits_[0] &= ~0x00000100u;
}
void BindQQResponse::clear_safedevicelist() {
  if (safedevicelist_ != NULL) safedevicelist_->::micromsg::SafeDeviceList::Clear();
  clear_has_safedevicelist();
}
const ::micromsg::SafeDeviceList& BindQQResponse::safedevicelist() const {
  // @@protoc_insertion_point(field_get:micromsg.BindQQResponse.SafeDeviceList)
  return safedevicelist_ != NULL ? *safedevicelist_
                         : *::micromsg::SafeDeviceList::internal_default_instance();
}
::micromsg::SafeDeviceList* BindQQResponse::mutable_safedevicelist() {
  set_has_safedevicelist();
  if (safedevicelist_ == NULL) {
    safedevicelist_ = new ::micromsg::SafeDeviceList;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BindQQResponse.SafeDeviceList)
  return safedevicelist_;
}
::micromsg::SafeDeviceList* BindQQResponse::release_safedevicelist() {
  // @@protoc_insertion_point(field_release:micromsg.BindQQResponse.SafeDeviceList)
  clear_has_safedevicelist();
  ::micromsg::SafeDeviceList* temp = safedevicelist_;
  safedevicelist_ = NULL;
  return temp;
}
void BindQQResponse::set_allocated_safedevicelist(::micromsg::SafeDeviceList* safedevicelist) {
  delete safedevicelist_;
  safedevicelist_ = safedevicelist;
  if (safedevicelist) {
    set_has_safedevicelist();
  } else {
    clear_has_safedevicelist();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindQQResponse.SafeDeviceList)
}

// optional uint32 SafeDevice = 13;
bool BindQQResponse::has_safedevice() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void BindQQResponse::set_has_safedevice() {
  _has_bits_[0] |= 0x00002000u;
}
void BindQQResponse::clear_has_safedevice() {
  _has_bits_[0] &= ~0x00002000u;
}
void BindQQResponse::clear_safedevice() {
  safedevice_ = 0u;
  clear_has_safedevice();
}
::google::protobuf::uint32 BindQQResponse::safedevice() const {
  // @@protoc_insertion_point(field_get:micromsg.BindQQResponse.SafeDevice)
  return safedevice_;
}
void BindQQResponse::set_safedevice(::google::protobuf::uint32 value) {
  set_has_safedevice();
  safedevice_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BindQQResponse.SafeDevice)
}

// optional .micromsg.SKBuiltinBuffer_t WTLoginRspBuff = 14;
bool BindQQResponse::has_wtloginrspbuff() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void BindQQResponse::set_has_wtloginrspbuff() {
  _has_bits_[0] |= 0x00000200u;
}
void BindQQResponse::clear_has_wtloginrspbuff() {
  _has_bits_[0] &= ~0x00000200u;
}
void BindQQResponse::clear_wtloginrspbuff() {
  if (wtloginrspbuff_ != NULL) wtloginrspbuff_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_wtloginrspbuff();
}
const ::micromsg::SKBuiltinBuffer_t& BindQQResponse::wtloginrspbuff() const {
  // @@protoc_insertion_point(field_get:micromsg.BindQQResponse.WTLoginRspBuff)
  return wtloginrspbuff_ != NULL ? *wtloginrspbuff_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* BindQQResponse::mutable_wtloginrspbuff() {
  set_has_wtloginrspbuff();
  if (wtloginrspbuff_ == NULL) {
    wtloginrspbuff_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BindQQResponse.WTLoginRspBuff)
  return wtloginrspbuff_;
}
::micromsg::SKBuiltinBuffer_t* BindQQResponse::release_wtloginrspbuff() {
  // @@protoc_insertion_point(field_release:micromsg.BindQQResponse.WTLoginRspBuff)
  clear_has_wtloginrspbuff();
  ::micromsg::SKBuiltinBuffer_t* temp = wtloginrspbuff_;
  wtloginrspbuff_ = NULL;
  return temp;
}
void BindQQResponse::set_allocated_wtloginrspbuff(::micromsg::SKBuiltinBuffer_t* wtloginrspbuff) {
  delete wtloginrspbuff_;
  wtloginrspbuff_ = wtloginrspbuff;
  if (wtloginrspbuff) {
    set_has_wtloginrspbuff();
  } else {
    clear_has_wtloginrspbuff();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindQQResponse.WTLoginRspBuff)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResetPwdRequest::kBaseRequestFieldNumber;
const int ResetPwdRequest::kOpCodeFieldNumber;
const int ResetPwdRequest::kPwdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResetPwdRequest::ResetPwdRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ResetPwdRequest)
}
ResetPwdRequest::ResetPwdRequest(const ResetPwdRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pwd()) {
    pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  opcode_ = from.opcode_;
  // @@protoc_insertion_point(copy_constructor:micromsg.ResetPwdRequest)
}

void ResetPwdRequest::SharedCtor() {
  _cached_size_ = 0;
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&opcode_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(opcode_));
}

ResetPwdRequest::~ResetPwdRequest() {
  // @@protoc_insertion_point(destructor:micromsg.ResetPwdRequest)
  SharedDtor();
}

void ResetPwdRequest::SharedDtor() {
  pwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void ResetPwdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetPwdRequest::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResetPwdRequest& ResetPwdRequest::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResetPwdRequest* ResetPwdRequest::New(::google::protobuf::Arena* arena) const {
  ResetPwdRequest* n = new ResetPwdRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResetPwdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ResetPwdRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_pwd()) {
      GOOGLE_DCHECK(!pwd_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pwd_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  opcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResetPwdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ResetPwdRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 OpCode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_opcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Pwd = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pwd().data(), this->pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ResetPwdRequest.Pwd");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ResetPwdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ResetPwdRequest)
  return false;
#undef DO_
}

void ResetPwdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ResetPwdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 OpCode = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->opcode(), output);
  }

  // optional string Pwd = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ResetPwdRequest.Pwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pwd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ResetPwdRequest)
}

::google::protobuf::uint8* ResetPwdRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ResetPwdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 OpCode = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->opcode(), target);
  }

  // optional string Pwd = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ResetPwdRequest.Pwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pwd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ResetPwdRequest)
  return target;
}

size_t ResetPwdRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.ResetPwdRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_opcode()) {
    // required uint32 OpCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());
  }

  return total_size;
}
size_t ResetPwdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ResetPwdRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 OpCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string Pwd = 3;
  if (has_pwd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pwd());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetPwdRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ResetPwdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ResetPwdRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResetPwdRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ResetPwdRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ResetPwdRequest)
    MergeFrom(*source);
  }
}

void ResetPwdRequest::MergeFrom(const ResetPwdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ResetPwdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_pwd();
      pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000004u) {
      opcode_ = from.opcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResetPwdRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ResetPwdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetPwdRequest::CopyFrom(const ResetPwdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ResetPwdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetPwdRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void ResetPwdRequest::Swap(ResetPwdRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResetPwdRequest::InternalSwap(ResetPwdRequest* other) {
  pwd_.Swap(&other->pwd_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(opcode_, other->opcode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResetPwdRequest::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResetPwdRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool ResetPwdRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ResetPwdRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void ResetPwdRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void ResetPwdRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& ResetPwdRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.ResetPwdRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* ResetPwdRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ResetPwdRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* ResetPwdRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.ResetPwdRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void ResetPwdRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ResetPwdRequest.BaseRequest)
}

// required uint32 OpCode = 2;
bool ResetPwdRequest::has_opcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ResetPwdRequest::set_has_opcode() {
  _has_bits_[0] |= 0x00000004u;
}
void ResetPwdRequest::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000004u;
}
void ResetPwdRequest::clear_opcode() {
  opcode_ = 0u;
  clear_has_opcode();
}
::google::protobuf::uint32 ResetPwdRequest::opcode() const {
  // @@protoc_insertion_point(field_get:micromsg.ResetPwdRequest.OpCode)
  return opcode_;
}
void ResetPwdRequest::set_opcode(::google::protobuf::uint32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ResetPwdRequest.OpCode)
}

// optional string Pwd = 3;
bool ResetPwdRequest::has_pwd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResetPwdRequest::set_has_pwd() {
  _has_bits_[0] |= 0x00000001u;
}
void ResetPwdRequest::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResetPwdRequest::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pwd();
}
const ::std::string& ResetPwdRequest::pwd() const {
  // @@protoc_insertion_point(field_get:micromsg.ResetPwdRequest.Pwd)
  return pwd_.GetNoArena();
}
void ResetPwdRequest::set_pwd(const ::std::string& value) {
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ResetPwdRequest.Pwd)
}
#if LANG_CXX11
void ResetPwdRequest::set_pwd(::std::string&& value) {
  set_has_pwd();
  pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ResetPwdRequest.Pwd)
}
#endif
void ResetPwdRequest::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ResetPwdRequest.Pwd)
}
void ResetPwdRequest::set_pwd(const char* value, size_t size) {
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ResetPwdRequest.Pwd)
}
::std::string* ResetPwdRequest::mutable_pwd() {
  set_has_pwd();
  // @@protoc_insertion_point(field_mutable:micromsg.ResetPwdRequest.Pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResetPwdRequest::release_pwd() {
  // @@protoc_insertion_point(field_release:micromsg.ResetPwdRequest.Pwd)
  clear_has_pwd();
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResetPwdRequest::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    set_has_pwd();
  } else {
    clear_has_pwd();
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ResetPwdRequest.Pwd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResetPwdResponse::kBaseResponseFieldNumber;
const int ResetPwdResponse::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResetPwdResponse::ResetPwdResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ResetPwdResponse)
}
ResetPwdResponse::ResetPwdResponse(const ResetPwdResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.ResetPwdResponse)
}

void ResetPwdResponse::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baseresponse_ = NULL;
}

ResetPwdResponse::~ResetPwdResponse() {
  // @@protoc_insertion_point(destructor:micromsg.ResetPwdResponse)
  SharedDtor();
}

void ResetPwdResponse::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void ResetPwdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetPwdResponse::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResetPwdResponse& ResetPwdResponse::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResetPwdResponse* ResetPwdResponse::New(::google::protobuf::Arena* arena) const {
  ResetPwdResponse* n = new ResetPwdResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResetPwdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ResetPwdResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResetPwdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ResetPwdResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ResetPwdResponse.Url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ResetPwdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ResetPwdResponse)
  return false;
#undef DO_
}

void ResetPwdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ResetPwdResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional string Url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ResetPwdResponse.Url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ResetPwdResponse)
}

::google::protobuf::uint8* ResetPwdResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ResetPwdResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional string Url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ResetPwdResponse.Url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ResetPwdResponse)
  return target;
}

size_t ResetPwdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ResetPwdResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  // optional string Url = 2;
  if (has_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetPwdResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ResetPwdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ResetPwdResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResetPwdResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ResetPwdResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ResetPwdResponse)
    MergeFrom(*source);
  }
}

void ResetPwdResponse::MergeFrom(const ResetPwdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ResetPwdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
  }
}

void ResetPwdResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ResetPwdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetPwdResponse::CopyFrom(const ResetPwdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ResetPwdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetPwdResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void ResetPwdResponse::Swap(ResetPwdResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResetPwdResponse::InternalSwap(ResetPwdResponse* other) {
  url_.Swap(&other->url_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResetPwdResponse::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResetPwdResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool ResetPwdResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ResetPwdResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
void ResetPwdResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
void ResetPwdResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& ResetPwdResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.ResetPwdResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* ResetPwdResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ResetPwdResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* ResetPwdResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.ResetPwdResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void ResetPwdResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ResetPwdResponse.BaseResponse)
}

// optional string Url = 2;
bool ResetPwdResponse::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResetPwdResponse::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void ResetPwdResponse::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResetPwdResponse::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& ResetPwdResponse::url() const {
  // @@protoc_insertion_point(field_get:micromsg.ResetPwdResponse.Url)
  return url_.GetNoArena();
}
void ResetPwdResponse::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ResetPwdResponse.Url)
}
#if LANG_CXX11
void ResetPwdResponse::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ResetPwdResponse.Url)
}
#endif
void ResetPwdResponse::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ResetPwdResponse.Url)
}
void ResetPwdResponse::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ResetPwdResponse.Url)
}
::std::string* ResetPwdResponse::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:micromsg.ResetPwdResponse.Url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResetPwdResponse::release_url() {
  // @@protoc_insertion_point(field_release:micromsg.ResetPwdResponse.Url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResetPwdResponse::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ResetPwdResponse.Url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnBindQQRequest::kBaseRequestFieldNumber;
const int UnBindQQRequest::kTicketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnBindQQRequest::UnBindQQRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.UnBindQQRequest)
}
UnBindQQRequest::UnBindQQRequest(const UnBindQQRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ticket()) {
    ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.UnBindQQRequest)
}

void UnBindQQRequest::SharedCtor() {
  _cached_size_ = 0;
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baserequest_ = NULL;
}

UnBindQQRequest::~UnBindQQRequest() {
  // @@protoc_insertion_point(destructor:micromsg.UnBindQQRequest)
  SharedDtor();
}

void UnBindQQRequest::SharedDtor() {
  ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void UnBindQQRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnBindQQRequest::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UnBindQQRequest& UnBindQQRequest::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

UnBindQQRequest* UnBindQQRequest::New(::google::protobuf::Arena* arena) const {
  UnBindQQRequest* n = new UnBindQQRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnBindQQRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.UnBindQQRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_ticket()) {
      GOOGLE_DCHECK(!ticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ticket_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UnBindQQRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.UnBindQQRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Ticket = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ticket().data(), this->ticket().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UnBindQQRequest.Ticket");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.UnBindQQRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.UnBindQQRequest)
  return false;
#undef DO_
}

void UnBindQQRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.UnBindQQRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string Ticket = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ticket().data(), this->ticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UnBindQQRequest.Ticket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ticket(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.UnBindQQRequest)
}

::google::protobuf::uint8* UnBindQQRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.UnBindQQRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string Ticket = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ticket().data(), this->ticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UnBindQQRequest.Ticket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ticket(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.UnBindQQRequest)
  return target;
}

size_t UnBindQQRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.UnBindQQRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  // optional string Ticket = 2;
  if (has_ticket()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ticket());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnBindQQRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.UnBindQQRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UnBindQQRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnBindQQRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.UnBindQQRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.UnBindQQRequest)
    MergeFrom(*source);
  }
}

void UnBindQQRequest::MergeFrom(const UnBindQQRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.UnBindQQRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ticket();
      ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
  }
}

void UnBindQQRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.UnBindQQRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnBindQQRequest::CopyFrom(const UnBindQQRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.UnBindQQRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnBindQQRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void UnBindQQRequest::Swap(UnBindQQRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnBindQQRequest::InternalSwap(UnBindQQRequest* other) {
  ticket_.Swap(&other->ticket_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnBindQQRequest::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnBindQQRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool UnBindQQRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UnBindQQRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void UnBindQQRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void UnBindQQRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& UnBindQQRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.UnBindQQRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* UnBindQQRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UnBindQQRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* UnBindQQRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.UnBindQQRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void UnBindQQRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UnBindQQRequest.BaseRequest)
}

// optional string Ticket = 2;
bool UnBindQQRequest::has_ticket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UnBindQQRequest::set_has_ticket() {
  _has_bits_[0] |= 0x00000001u;
}
void UnBindQQRequest::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000001u;
}
void UnBindQQRequest::clear_ticket() {
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ticket();
}
const ::std::string& UnBindQQRequest::ticket() const {
  // @@protoc_insertion_point(field_get:micromsg.UnBindQQRequest.Ticket)
  return ticket_.GetNoArena();
}
void UnBindQQRequest::set_ticket(const ::std::string& value) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UnBindQQRequest.Ticket)
}
#if LANG_CXX11
void UnBindQQRequest::set_ticket(::std::string&& value) {
  set_has_ticket();
  ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UnBindQQRequest.Ticket)
}
#endif
void UnBindQQRequest::set_ticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UnBindQQRequest.Ticket)
}
void UnBindQQRequest::set_ticket(const char* value, size_t size) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UnBindQQRequest.Ticket)
}
::std::string* UnBindQQRequest::mutable_ticket() {
  set_has_ticket();
  // @@protoc_insertion_point(field_mutable:micromsg.UnBindQQRequest.Ticket)
  return ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UnBindQQRequest::release_ticket() {
  // @@protoc_insertion_point(field_release:micromsg.UnBindQQRequest.Ticket)
  clear_has_ticket();
  return ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UnBindQQRequest::set_allocated_ticket(::std::string* ticket) {
  if (ticket != NULL) {
    set_has_ticket();
  } else {
    clear_has_ticket();
  }
  ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticket);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UnBindQQRequest.Ticket)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnBindQQResponse::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnBindQQResponse::UnBindQQResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.UnBindQQResponse)
}
UnBindQQResponse::UnBindQQResponse(const UnBindQQResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.UnBindQQResponse)
}

void UnBindQQResponse::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

UnBindQQResponse::~UnBindQQResponse() {
  // @@protoc_insertion_point(destructor:micromsg.UnBindQQResponse)
  SharedDtor();
}

void UnBindQQResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void UnBindQQResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnBindQQResponse::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UnBindQQResponse& UnBindQQResponse::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

UnBindQQResponse* UnBindQQResponse::New(::google::protobuf::Arena* arena) const {
  UnBindQQResponse* n = new UnBindQQResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnBindQQResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.UnBindQQResponse)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UnBindQQResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.UnBindQQResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.UnBindQQResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.UnBindQQResponse)
  return false;
#undef DO_
}

void UnBindQQResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.UnBindQQResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.UnBindQQResponse)
}

::google::protobuf::uint8* UnBindQQResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.UnBindQQResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.UnBindQQResponse)
  return target;
}

size_t UnBindQQResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.UnBindQQResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnBindQQResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.UnBindQQResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UnBindQQResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnBindQQResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.UnBindQQResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.UnBindQQResponse)
    MergeFrom(*source);
  }
}

void UnBindQQResponse::MergeFrom(const UnBindQQResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.UnBindQQResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void UnBindQQResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.UnBindQQResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnBindQQResponse::CopyFrom(const UnBindQQResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.UnBindQQResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnBindQQResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void UnBindQQResponse::Swap(UnBindQQResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnBindQQResponse::InternalSwap(UnBindQQResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnBindQQResponse::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnBindQQResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool UnBindQQResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UnBindQQResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void UnBindQQResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void UnBindQQResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& UnBindQQResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.UnBindQQResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* UnBindQQResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UnBindQQResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* UnBindQQResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.UnBindQQResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void UnBindQQResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UnBindQQResponse.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckUnBindRequest::kBaseRequestFieldNumber;
const int CheckUnBindRequest::kBindTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckUnBindRequest::CheckUnBindRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.CheckUnBindRequest)
}
CheckUnBindRequest::CheckUnBindRequest(const CheckUnBindRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  bindtype_ = from.bindtype_;
  // @@protoc_insertion_point(copy_constructor:micromsg.CheckUnBindRequest)
}

void CheckUnBindRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&bindtype_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(bindtype_));
}

CheckUnBindRequest::~CheckUnBindRequest() {
  // @@protoc_insertion_point(destructor:micromsg.CheckUnBindRequest)
  SharedDtor();
}

void CheckUnBindRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void CheckUnBindRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckUnBindRequest::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CheckUnBindRequest& CheckUnBindRequest::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

CheckUnBindRequest* CheckUnBindRequest::New(::google::protobuf::Arena* arena) const {
  CheckUnBindRequest* n = new CheckUnBindRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckUnBindRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.CheckUnBindRequest)
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  bindtype_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CheckUnBindRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.CheckUnBindRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 BindType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_bindtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bindtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.CheckUnBindRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.CheckUnBindRequest)
  return false;
#undef DO_
}

void CheckUnBindRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.CheckUnBindRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required int32 BindType = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bindtype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.CheckUnBindRequest)
}

::google::protobuf::uint8* CheckUnBindRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.CheckUnBindRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required int32 BindType = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bindtype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.CheckUnBindRequest)
  return target;
}

size_t CheckUnBindRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.CheckUnBindRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_bindtype()) {
    // required int32 BindType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bindtype());
  }

  return total_size;
}
size_t CheckUnBindRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.CheckUnBindRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required int32 BindType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bindtype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckUnBindRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.CheckUnBindRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckUnBindRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckUnBindRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.CheckUnBindRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.CheckUnBindRequest)
    MergeFrom(*source);
  }
}

void CheckUnBindRequest::MergeFrom(const CheckUnBindRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.CheckUnBindRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      bindtype_ = from.bindtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CheckUnBindRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.CheckUnBindRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckUnBindRequest::CopyFrom(const CheckUnBindRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.CheckUnBindRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckUnBindRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void CheckUnBindRequest::Swap(CheckUnBindRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckUnBindRequest::InternalSwap(CheckUnBindRequest* other) {
  std::swap(baserequest_, other->baserequest_);
  std::swap(bindtype_, other->bindtype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckUnBindRequest::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckUnBindRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool CheckUnBindRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CheckUnBindRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void CheckUnBindRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void CheckUnBindRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& CheckUnBindRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckUnBindRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* CheckUnBindRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CheckUnBindRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* CheckUnBindRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.CheckUnBindRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void CheckUnBindRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckUnBindRequest.BaseRequest)
}

// required int32 BindType = 2;
bool CheckUnBindRequest::has_bindtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CheckUnBindRequest::set_has_bindtype() {
  _has_bits_[0] |= 0x00000002u;
}
void CheckUnBindRequest::clear_has_bindtype() {
  _has_bits_[0] &= ~0x00000002u;
}
void CheckUnBindRequest::clear_bindtype() {
  bindtype_ = 0;
  clear_has_bindtype();
}
::google::protobuf::int32 CheckUnBindRequest::bindtype() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckUnBindRequest.BindType)
  return bindtype_;
}
void CheckUnBindRequest::set_bindtype(::google::protobuf::int32 value) {
  set_has_bindtype();
  bindtype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CheckUnBindRequest.BindType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckUnBindResponse::kBaseResponseFieldNumber;
const int CheckUnBindResponse::kRandomPasswdFieldNumber;
const int CheckUnBindResponse::kCanUnbindNoticeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckUnBindResponse::CheckUnBindResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.CheckUnBindResponse)
}
CheckUnBindResponse::CheckUnBindResponse(const CheckUnBindResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  randompasswd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_randompasswd()) {
    randompasswd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.randompasswd_);
  }
  canunbindnotice_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_canunbindnotice()) {
    canunbindnotice_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.canunbindnotice_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.CheckUnBindResponse)
}

void CheckUnBindResponse::SharedCtor() {
  _cached_size_ = 0;
  randompasswd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  canunbindnotice_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baseresponse_ = NULL;
}

CheckUnBindResponse::~CheckUnBindResponse() {
  // @@protoc_insertion_point(destructor:micromsg.CheckUnBindResponse)
  SharedDtor();
}

void CheckUnBindResponse::SharedDtor() {
  randompasswd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  canunbindnotice_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void CheckUnBindResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckUnBindResponse::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CheckUnBindResponse& CheckUnBindResponse::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

CheckUnBindResponse* CheckUnBindResponse::New(::google::protobuf::Arena* arena) const {
  CheckUnBindResponse* n = new CheckUnBindResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckUnBindResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.CheckUnBindResponse)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_randompasswd()) {
      GOOGLE_DCHECK(!randompasswd_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*randompasswd_.UnsafeRawStringPointer())->clear();
    }
    if (has_canunbindnotice()) {
      GOOGLE_DCHECK(!canunbindnotice_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*canunbindnotice_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CheckUnBindResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.CheckUnBindResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string RandomPasswd = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_randompasswd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->randompasswd().data(), this->randompasswd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CheckUnBindResponse.RandomPasswd");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string CanUnbindNotice = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_canunbindnotice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->canunbindnotice().data(), this->canunbindnotice().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CheckUnBindResponse.CanUnbindNotice");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.CheckUnBindResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.CheckUnBindResponse)
  return false;
#undef DO_
}

void CheckUnBindResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.CheckUnBindResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional string RandomPasswd = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->randompasswd().data(), this->randompasswd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckUnBindResponse.RandomPasswd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->randompasswd(), output);
  }

  // optional string CanUnbindNotice = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->canunbindnotice().data(), this->canunbindnotice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckUnBindResponse.CanUnbindNotice");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->canunbindnotice(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.CheckUnBindResponse)
}

::google::protobuf::uint8* CheckUnBindResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.CheckUnBindResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional string RandomPasswd = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->randompasswd().data(), this->randompasswd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckUnBindResponse.RandomPasswd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->randompasswd(), target);
  }

  // optional string CanUnbindNotice = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->canunbindnotice().data(), this->canunbindnotice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckUnBindResponse.CanUnbindNotice");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->canunbindnotice(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.CheckUnBindResponse)
  return target;
}

size_t CheckUnBindResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.CheckUnBindResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string RandomPasswd = 2;
    if (has_randompasswd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->randompasswd());
    }

    // optional string CanUnbindNotice = 3;
    if (has_canunbindnotice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->canunbindnotice());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckUnBindResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.CheckUnBindResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckUnBindResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckUnBindResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.CheckUnBindResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.CheckUnBindResponse)
    MergeFrom(*source);
  }
}

void CheckUnBindResponse::MergeFrom(const CheckUnBindResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.CheckUnBindResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_randompasswd();
      randompasswd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.randompasswd_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_canunbindnotice();
      canunbindnotice_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.canunbindnotice_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
  }
}

void CheckUnBindResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.CheckUnBindResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckUnBindResponse::CopyFrom(const CheckUnBindResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.CheckUnBindResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckUnBindResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void CheckUnBindResponse::Swap(CheckUnBindResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckUnBindResponse::InternalSwap(CheckUnBindResponse* other) {
  randompasswd_.Swap(&other->randompasswd_);
  canunbindnotice_.Swap(&other->canunbindnotice_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckUnBindResponse::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckUnBindResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool CheckUnBindResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CheckUnBindResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000004u;
}
void CheckUnBindResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000004u;
}
void CheckUnBindResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& CheckUnBindResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckUnBindResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* CheckUnBindResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CheckUnBindResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* CheckUnBindResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.CheckUnBindResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void CheckUnBindResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckUnBindResponse.BaseResponse)
}

// optional string RandomPasswd = 2;
bool CheckUnBindResponse::has_randompasswd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CheckUnBindResponse::set_has_randompasswd() {
  _has_bits_[0] |= 0x00000001u;
}
void CheckUnBindResponse::clear_has_randompasswd() {
  _has_bits_[0] &= ~0x00000001u;
}
void CheckUnBindResponse::clear_randompasswd() {
  randompasswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_randompasswd();
}
const ::std::string& CheckUnBindResponse::randompasswd() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckUnBindResponse.RandomPasswd)
  return randompasswd_.GetNoArena();
}
void CheckUnBindResponse::set_randompasswd(const ::std::string& value) {
  set_has_randompasswd();
  randompasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CheckUnBindResponse.RandomPasswd)
}
#if LANG_CXX11
void CheckUnBindResponse::set_randompasswd(::std::string&& value) {
  set_has_randompasswd();
  randompasswd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CheckUnBindResponse.RandomPasswd)
}
#endif
void CheckUnBindResponse::set_randompasswd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_randompasswd();
  randompasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CheckUnBindResponse.RandomPasswd)
}
void CheckUnBindResponse::set_randompasswd(const char* value, size_t size) {
  set_has_randompasswd();
  randompasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CheckUnBindResponse.RandomPasswd)
}
::std::string* CheckUnBindResponse::mutable_randompasswd() {
  set_has_randompasswd();
  // @@protoc_insertion_point(field_mutable:micromsg.CheckUnBindResponse.RandomPasswd)
  return randompasswd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckUnBindResponse::release_randompasswd() {
  // @@protoc_insertion_point(field_release:micromsg.CheckUnBindResponse.RandomPasswd)
  clear_has_randompasswd();
  return randompasswd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckUnBindResponse::set_allocated_randompasswd(::std::string* randompasswd) {
  if (randompasswd != NULL) {
    set_has_randompasswd();
  } else {
    clear_has_randompasswd();
  }
  randompasswd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), randompasswd);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckUnBindResponse.RandomPasswd)
}

// optional string CanUnbindNotice = 3;
bool CheckUnBindResponse::has_canunbindnotice() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CheckUnBindResponse::set_has_canunbindnotice() {
  _has_bits_[0] |= 0x00000002u;
}
void CheckUnBindResponse::clear_has_canunbindnotice() {
  _has_bits_[0] &= ~0x00000002u;
}
void CheckUnBindResponse::clear_canunbindnotice() {
  canunbindnotice_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_canunbindnotice();
}
const ::std::string& CheckUnBindResponse::canunbindnotice() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckUnBindResponse.CanUnbindNotice)
  return canunbindnotice_.GetNoArena();
}
void CheckUnBindResponse::set_canunbindnotice(const ::std::string& value) {
  set_has_canunbindnotice();
  canunbindnotice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CheckUnBindResponse.CanUnbindNotice)
}
#if LANG_CXX11
void CheckUnBindResponse::set_canunbindnotice(::std::string&& value) {
  set_has_canunbindnotice();
  canunbindnotice_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CheckUnBindResponse.CanUnbindNotice)
}
#endif
void CheckUnBindResponse::set_canunbindnotice(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_canunbindnotice();
  canunbindnotice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CheckUnBindResponse.CanUnbindNotice)
}
void CheckUnBindResponse::set_canunbindnotice(const char* value, size_t size) {
  set_has_canunbindnotice();
  canunbindnotice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CheckUnBindResponse.CanUnbindNotice)
}
::std::string* CheckUnBindResponse::mutable_canunbindnotice() {
  set_has_canunbindnotice();
  // @@protoc_insertion_point(field_mutable:micromsg.CheckUnBindResponse.CanUnbindNotice)
  return canunbindnotice_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckUnBindResponse::release_canunbindnotice() {
  // @@protoc_insertion_point(field_release:micromsg.CheckUnBindResponse.CanUnbindNotice)
  clear_has_canunbindnotice();
  return canunbindnotice_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckUnBindResponse::set_allocated_canunbindnotice(::std::string* canunbindnotice) {
  if (canunbindnotice != NULL) {
    set_has_canunbindnotice();
  } else {
    clear_has_canunbindnotice();
  }
  canunbindnotice_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), canunbindnotice);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckUnBindResponse.CanUnbindNotice)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaceBookAuthRequest::kBaseRequestFieldNumber;
const int FaceBookAuthRequest::kOpTypeFieldNumber;
const int FaceBookAuthRequest::kAccessTokenFieldNumber;
const int FaceBookAuthRequest::kRandomEncryKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaceBookAuthRequest::FaceBookAuthRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.FaceBookAuthRequest)
}
FaceBookAuthRequest::FaceBookAuthRequest(const FaceBookAuthRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  accesstoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_accesstoken()) {
    accesstoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.accesstoken_);
  }
  randomencrykey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_randomencrykey()) {
    randomencrykey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.randomencrykey_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  optype_ = from.optype_;
  // @@protoc_insertion_point(copy_constructor:micromsg.FaceBookAuthRequest)
}

void FaceBookAuthRequest::SharedCtor() {
  _cached_size_ = 0;
  accesstoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  randomencrykey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&optype_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(optype_));
}

FaceBookAuthRequest::~FaceBookAuthRequest() {
  // @@protoc_insertion_point(destructor:micromsg.FaceBookAuthRequest)
  SharedDtor();
}

void FaceBookAuthRequest::SharedDtor() {
  accesstoken_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  randomencrykey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void FaceBookAuthRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FaceBookAuthRequest::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FaceBookAuthRequest& FaceBookAuthRequest::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

FaceBookAuthRequest* FaceBookAuthRequest::New(::google::protobuf::Arena* arena) const {
  FaceBookAuthRequest* n = new FaceBookAuthRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FaceBookAuthRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.FaceBookAuthRequest)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_accesstoken()) {
      GOOGLE_DCHECK(!accesstoken_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*accesstoken_.UnsafeRawStringPointer())->clear();
    }
    if (has_randomencrykey()) {
      GOOGLE_DCHECK(!randomencrykey_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*randomencrykey_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  optype_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FaceBookAuthRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.FaceBookAuthRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 OpType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_optype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &optype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AccessToken = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accesstoken()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->accesstoken().data(), this->accesstoken().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.FaceBookAuthRequest.AccessToken");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string RandomEncryKey = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_randomencrykey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->randomencrykey().data(), this->randomencrykey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.FaceBookAuthRequest.RandomEncryKey");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.FaceBookAuthRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.FaceBookAuthRequest)
  return false;
#undef DO_
}

void FaceBookAuthRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.FaceBookAuthRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 OpType = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->optype(), output);
  }

  // optional string AccessToken = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accesstoken().data(), this->accesstoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.FaceBookAuthRequest.AccessToken");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->accesstoken(), output);
  }

  // optional string RandomEncryKey = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->randomencrykey().data(), this->randomencrykey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.FaceBookAuthRequest.RandomEncryKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->randomencrykey(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.FaceBookAuthRequest)
}

::google::protobuf::uint8* FaceBookAuthRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.FaceBookAuthRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 OpType = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->optype(), target);
  }

  // optional string AccessToken = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accesstoken().data(), this->accesstoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.FaceBookAuthRequest.AccessToken");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->accesstoken(), target);
  }

  // optional string RandomEncryKey = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->randomencrykey().data(), this->randomencrykey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.FaceBookAuthRequest.RandomEncryKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->randomencrykey(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.FaceBookAuthRequest)
  return target;
}

size_t FaceBookAuthRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.FaceBookAuthRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_optype()) {
    // required uint32 OpType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->optype());
  }

  return total_size;
}
size_t FaceBookAuthRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.FaceBookAuthRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 OpType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->optype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string AccessToken = 3;
    if (has_accesstoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accesstoken());
    }

    // optional string RandomEncryKey = 4;
    if (has_randomencrykey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->randomencrykey());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaceBookAuthRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.FaceBookAuthRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FaceBookAuthRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FaceBookAuthRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.FaceBookAuthRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.FaceBookAuthRequest)
    MergeFrom(*source);
  }
}

void FaceBookAuthRequest::MergeFrom(const FaceBookAuthRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.FaceBookAuthRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_accesstoken();
      accesstoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.accesstoken_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_randomencrykey();
      randomencrykey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.randomencrykey_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000008u) {
      optype_ = from.optype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FaceBookAuthRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.FaceBookAuthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceBookAuthRequest::CopyFrom(const FaceBookAuthRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.FaceBookAuthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceBookAuthRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void FaceBookAuthRequest::Swap(FaceBookAuthRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaceBookAuthRequest::InternalSwap(FaceBookAuthRequest* other) {
  accesstoken_.Swap(&other->accesstoken_);
  randomencrykey_.Swap(&other->randomencrykey_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(optype_, other->optype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FaceBookAuthRequest::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FaceBookAuthRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool FaceBookAuthRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FaceBookAuthRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
void FaceBookAuthRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
void FaceBookAuthRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& FaceBookAuthRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.FaceBookAuthRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* FaceBookAuthRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.FaceBookAuthRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* FaceBookAuthRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.FaceBookAuthRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void FaceBookAuthRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.FaceBookAuthRequest.BaseRequest)
}

// required uint32 OpType = 2;
bool FaceBookAuthRequest::has_optype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FaceBookAuthRequest::set_has_optype() {
  _has_bits_[0] |= 0x00000008u;
}
void FaceBookAuthRequest::clear_has_optype() {
  _has_bits_[0] &= ~0x00000008u;
}
void FaceBookAuthRequest::clear_optype() {
  optype_ = 0u;
  clear_has_optype();
}
::google::protobuf::uint32 FaceBookAuthRequest::optype() const {
  // @@protoc_insertion_point(field_get:micromsg.FaceBookAuthRequest.OpType)
  return optype_;
}
void FaceBookAuthRequest::set_optype(::google::protobuf::uint32 value) {
  set_has_optype();
  optype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.FaceBookAuthRequest.OpType)
}

// optional string AccessToken = 3;
bool FaceBookAuthRequest::has_accesstoken() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FaceBookAuthRequest::set_has_accesstoken() {
  _has_bits_[0] |= 0x00000001u;
}
void FaceBookAuthRequest::clear_has_accesstoken() {
  _has_bits_[0] &= ~0x00000001u;
}
void FaceBookAuthRequest::clear_accesstoken() {
  accesstoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_accesstoken();
}
const ::std::string& FaceBookAuthRequest::accesstoken() const {
  // @@protoc_insertion_point(field_get:micromsg.FaceBookAuthRequest.AccessToken)
  return accesstoken_.GetNoArena();
}
void FaceBookAuthRequest::set_accesstoken(const ::std::string& value) {
  set_has_accesstoken();
  accesstoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.FaceBookAuthRequest.AccessToken)
}
#if LANG_CXX11
void FaceBookAuthRequest::set_accesstoken(::std::string&& value) {
  set_has_accesstoken();
  accesstoken_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.FaceBookAuthRequest.AccessToken)
}
#endif
void FaceBookAuthRequest::set_accesstoken(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_accesstoken();
  accesstoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.FaceBookAuthRequest.AccessToken)
}
void FaceBookAuthRequest::set_accesstoken(const char* value, size_t size) {
  set_has_accesstoken();
  accesstoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.FaceBookAuthRequest.AccessToken)
}
::std::string* FaceBookAuthRequest::mutable_accesstoken() {
  set_has_accesstoken();
  // @@protoc_insertion_point(field_mutable:micromsg.FaceBookAuthRequest.AccessToken)
  return accesstoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FaceBookAuthRequest::release_accesstoken() {
  // @@protoc_insertion_point(field_release:micromsg.FaceBookAuthRequest.AccessToken)
  clear_has_accesstoken();
  return accesstoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FaceBookAuthRequest::set_allocated_accesstoken(::std::string* accesstoken) {
  if (accesstoken != NULL) {
    set_has_accesstoken();
  } else {
    clear_has_accesstoken();
  }
  accesstoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accesstoken);
  // @@protoc_insertion_point(field_set_allocated:micromsg.FaceBookAuthRequest.AccessToken)
}

// optional string RandomEncryKey = 4;
bool FaceBookAuthRequest::has_randomencrykey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FaceBookAuthRequest::set_has_randomencrykey() {
  _has_bits_[0] |= 0x00000002u;
}
void FaceBookAuthRequest::clear_has_randomencrykey() {
  _has_bits_[0] &= ~0x00000002u;
}
void FaceBookAuthRequest::clear_randomencrykey() {
  randomencrykey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_randomencrykey();
}
const ::std::string& FaceBookAuthRequest::randomencrykey() const {
  // @@protoc_insertion_point(field_get:micromsg.FaceBookAuthRequest.RandomEncryKey)
  return randomencrykey_.GetNoArena();
}
void FaceBookAuthRequest::set_randomencrykey(const ::std::string& value) {
  set_has_randomencrykey();
  randomencrykey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.FaceBookAuthRequest.RandomEncryKey)
}
#if LANG_CXX11
void FaceBookAuthRequest::set_randomencrykey(::std::string&& value) {
  set_has_randomencrykey();
  randomencrykey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.FaceBookAuthRequest.RandomEncryKey)
}
#endif
void FaceBookAuthRequest::set_randomencrykey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_randomencrykey();
  randomencrykey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.FaceBookAuthRequest.RandomEncryKey)
}
void FaceBookAuthRequest::set_randomencrykey(const char* value, size_t size) {
  set_has_randomencrykey();
  randomencrykey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.FaceBookAuthRequest.RandomEncryKey)
}
::std::string* FaceBookAuthRequest::mutable_randomencrykey() {
  set_has_randomencrykey();
  // @@protoc_insertion_point(field_mutable:micromsg.FaceBookAuthRequest.RandomEncryKey)
  return randomencrykey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FaceBookAuthRequest::release_randomencrykey() {
  // @@protoc_insertion_point(field_release:micromsg.FaceBookAuthRequest.RandomEncryKey)
  clear_has_randomencrykey();
  return randomencrykey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FaceBookAuthRequest::set_allocated_randomencrykey(::std::string* randomencrykey) {
  if (randomencrykey != NULL) {
    set_has_randomencrykey();
  } else {
    clear_has_randomencrykey();
  }
  randomencrykey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), randomencrykey);
  // @@protoc_insertion_point(field_set_allocated:micromsg.FaceBookAuthRequest.RandomEncryKey)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaceBookAuthResponse::kBaseResponseFieldNumber;
const int FaceBookAuthResponse::kFBUserIDFieldNumber;
const int FaceBookAuthResponse::kFBUserNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaceBookAuthResponse::FaceBookAuthResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.FaceBookAuthResponse)
}
FaceBookAuthResponse::FaceBookAuthResponse(const FaceBookAuthResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fbusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fbusername()) {
    fbusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fbusername_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  fbuserid_ = from.fbuserid_;
  // @@protoc_insertion_point(copy_constructor:micromsg.FaceBookAuthResponse)
}

void FaceBookAuthResponse::SharedCtor() {
  _cached_size_ = 0;
  fbusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&fbuserid_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(fbuserid_));
}

FaceBookAuthResponse::~FaceBookAuthResponse() {
  // @@protoc_insertion_point(destructor:micromsg.FaceBookAuthResponse)
  SharedDtor();
}

void FaceBookAuthResponse::SharedDtor() {
  fbusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void FaceBookAuthResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FaceBookAuthResponse::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FaceBookAuthResponse& FaceBookAuthResponse::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

FaceBookAuthResponse* FaceBookAuthResponse::New(::google::protobuf::Arena* arena) const {
  FaceBookAuthResponse* n = new FaceBookAuthResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FaceBookAuthResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.FaceBookAuthResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_fbusername()) {
      GOOGLE_DCHECK(!fbusername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fbusername_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  fbuserid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FaceBookAuthResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.FaceBookAuthResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 FBUserID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_fbuserid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fbuserid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FBUserName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fbusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fbusername().data(), this->fbusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.FaceBookAuthResponse.FBUserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.FaceBookAuthResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.FaceBookAuthResponse)
  return false;
#undef DO_
}

void FaceBookAuthResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.FaceBookAuthResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint64 FBUserID = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->fbuserid(), output);
  }

  // optional string FBUserName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fbusername().data(), this->fbusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.FaceBookAuthResponse.FBUserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->fbusername(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.FaceBookAuthResponse)
}

::google::protobuf::uint8* FaceBookAuthResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.FaceBookAuthResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint64 FBUserID = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->fbuserid(), target);
  }

  // optional string FBUserName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fbusername().data(), this->fbusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.FaceBookAuthResponse.FBUserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fbusername(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.FaceBookAuthResponse)
  return target;
}

size_t FaceBookAuthResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.FaceBookAuthResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_fbuserid()) {
    // required uint64 FBUserID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->fbuserid());
  }

  return total_size;
}
size_t FaceBookAuthResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.FaceBookAuthResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint64 FBUserID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->fbuserid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string FBUserName = 3;
  if (has_fbusername()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fbusername());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaceBookAuthResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.FaceBookAuthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FaceBookAuthResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FaceBookAuthResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.FaceBookAuthResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.FaceBookAuthResponse)
    MergeFrom(*source);
  }
}

void FaceBookAuthResponse::MergeFrom(const FaceBookAuthResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.FaceBookAuthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_fbusername();
      fbusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fbusername_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000004u) {
      fbuserid_ = from.fbuserid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FaceBookAuthResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.FaceBookAuthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceBookAuthResponse::CopyFrom(const FaceBookAuthResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.FaceBookAuthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceBookAuthResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void FaceBookAuthResponse::Swap(FaceBookAuthResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaceBookAuthResponse::InternalSwap(FaceBookAuthResponse* other) {
  fbusername_.Swap(&other->fbusername_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(fbuserid_, other->fbuserid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FaceBookAuthResponse::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FaceBookAuthResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool FaceBookAuthResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FaceBookAuthResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
void FaceBookAuthResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
void FaceBookAuthResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& FaceBookAuthResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.FaceBookAuthResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* FaceBookAuthResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.FaceBookAuthResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* FaceBookAuthResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.FaceBookAuthResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void FaceBookAuthResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.FaceBookAuthResponse.BaseResponse)
}

// required uint64 FBUserID = 2;
bool FaceBookAuthResponse::has_fbuserid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FaceBookAuthResponse::set_has_fbuserid() {
  _has_bits_[0] |= 0x00000004u;
}
void FaceBookAuthResponse::clear_has_fbuserid() {
  _has_bits_[0] &= ~0x00000004u;
}
void FaceBookAuthResponse::clear_fbuserid() {
  fbuserid_ = GOOGLE_ULONGLONG(0);
  clear_has_fbuserid();
}
::google::protobuf::uint64 FaceBookAuthResponse::fbuserid() const {
  // @@protoc_insertion_point(field_get:micromsg.FaceBookAuthResponse.FBUserID)
  return fbuserid_;
}
void FaceBookAuthResponse::set_fbuserid(::google::protobuf::uint64 value) {
  set_has_fbuserid();
  fbuserid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.FaceBookAuthResponse.FBUserID)
}

// optional string FBUserName = 3;
bool FaceBookAuthResponse::has_fbusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FaceBookAuthResponse::set_has_fbusername() {
  _has_bits_[0] |= 0x00000001u;
}
void FaceBookAuthResponse::clear_has_fbusername() {
  _has_bits_[0] &= ~0x00000001u;
}
void FaceBookAuthResponse::clear_fbusername() {
  fbusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fbusername();
}
const ::std::string& FaceBookAuthResponse::fbusername() const {
  // @@protoc_insertion_point(field_get:micromsg.FaceBookAuthResponse.FBUserName)
  return fbusername_.GetNoArena();
}
void FaceBookAuthResponse::set_fbusername(const ::std::string& value) {
  set_has_fbusername();
  fbusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.FaceBookAuthResponse.FBUserName)
}
#if LANG_CXX11
void FaceBookAuthResponse::set_fbusername(::std::string&& value) {
  set_has_fbusername();
  fbusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.FaceBookAuthResponse.FBUserName)
}
#endif
void FaceBookAuthResponse::set_fbusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fbusername();
  fbusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.FaceBookAuthResponse.FBUserName)
}
void FaceBookAuthResponse::set_fbusername(const char* value, size_t size) {
  set_has_fbusername();
  fbusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.FaceBookAuthResponse.FBUserName)
}
::std::string* FaceBookAuthResponse::mutable_fbusername() {
  set_has_fbusername();
  // @@protoc_insertion_point(field_mutable:micromsg.FaceBookAuthResponse.FBUserName)
  return fbusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FaceBookAuthResponse::release_fbusername() {
  // @@protoc_insertion_point(field_release:micromsg.FaceBookAuthResponse.FBUserName)
  clear_has_fbusername();
  return fbusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FaceBookAuthResponse::set_allocated_fbusername(::std::string* fbusername) {
  if (fbusername != NULL) {
    set_has_fbusername();
  } else {
    clear_has_fbusername();
  }
  fbusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fbusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.FaceBookAuthResponse.FBUserName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegEquipmentRequest::kBaseRequestFieldNumber;
const int RegEquipmentRequest::kTypeFieldNumber;
const int RegEquipmentRequest::kSerialNumberFieldNumber;
const int RegEquipmentRequest::kIMEIFieldNumber;
const int RegEquipmentRequest::kMACFieldNumber;
const int RegEquipmentRequest::kNickNameFieldNumber;
const int RegEquipmentRequest::kBuiltinIPSeqFieldNumber;
const int RegEquipmentRequest::kDLSrcFieldNumber;
const int RegEquipmentRequest::kRegModeFieldNumber;
const int RegEquipmentRequest::kTimeZoneFieldNumber;
const int RegEquipmentRequest::kLanguageFieldNumber;
const int RegEquipmentRequest::kForceRegFieldNumber;
const int RegEquipmentRequest::kRealCountryFieldNumber;
const int RegEquipmentRequest::kRandomEncryKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegEquipmentRequest::RegEquipmentRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.RegEquipmentRequest)
}
RegEquipmentRequest::RegEquipmentRequest(const RegEquipmentRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serialnumber_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serialnumber()) {
    serialnumber_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serialnumber_);
  }
  imei_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_imei()) {
    imei_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imei_);
  }
  mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mac()) {
    mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_);
  }
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nickname()) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  timezone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_timezone()) {
    timezone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timezone_);
  }
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_language()) {
    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  realcountry_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_realcountry()) {
    realcountry_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.realcountry_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_randomencrykey()) {
    randomencrykey_ = new ::micromsg::SKBuiltinBuffer_t(*from.randomencrykey_);
  } else {
    randomencrykey_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&forcereg_) -
    reinterpret_cast<char*>(&type_) + sizeof(forcereg_));
  // @@protoc_insertion_point(copy_constructor:micromsg.RegEquipmentRequest)
}

void RegEquipmentRequest::SharedCtor() {
  _cached_size_ = 0;
  serialnumber_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imei_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  realcountry_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&forcereg_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(forcereg_));
}

RegEquipmentRequest::~RegEquipmentRequest() {
  // @@protoc_insertion_point(destructor:micromsg.RegEquipmentRequest)
  SharedDtor();
}

void RegEquipmentRequest::SharedDtor() {
  serialnumber_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imei_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  realcountry_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete randomencrykey_;
  }
}

void RegEquipmentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegEquipmentRequest::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegEquipmentRequest& RegEquipmentRequest::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

RegEquipmentRequest* RegEquipmentRequest::New(::google::protobuf::Arena* arena) const {
  RegEquipmentRequest* n = new RegEquipmentRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegEquipmentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.RegEquipmentRequest)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_serialnumber()) {
      GOOGLE_DCHECK(!serialnumber_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*serialnumber_.UnsafeRawStringPointer())->clear();
    }
    if (has_imei()) {
      GOOGLE_DCHECK(!imei_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*imei_.UnsafeRawStringPointer())->clear();
    }
    if (has_mac()) {
      GOOGLE_DCHECK(!mac_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mac_.UnsafeRawStringPointer())->clear();
    }
    if (has_nickname()) {
      GOOGLE_DCHECK(!nickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*nickname_.UnsafeRawStringPointer())->clear();
    }
    if (has_timezone()) {
      GOOGLE_DCHECK(!timezone_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*timezone_.UnsafeRawStringPointer())->clear();
    }
    if (has_language()) {
      GOOGLE_DCHECK(!language_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*language_.UnsafeRawStringPointer())->clear();
    }
    if (has_realcountry()) {
      GOOGLE_DCHECK(!realcountry_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*realcountry_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  if (has_randomencrykey()) {
    GOOGLE_DCHECK(randomencrykey_ != NULL);
    randomencrykey_->::micromsg::SKBuiltinBuffer_t::Clear();
  }
  if (_has_bits_[8 / 32] & 15872u) {
    ::memset(&type_, 0, reinterpret_cast<char*>(&forcereg_) -
      reinterpret_cast<char*>(&type_) + sizeof(forcereg_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RegEquipmentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.RegEquipmentRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string SerialNumber = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serialnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serialnumber().data(), this->serialnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.RegEquipmentRequest.SerialNumber");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string IMEI = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imei()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imei().data(), this->imei().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.RegEquipmentRequest.IMEI");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string MAC = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mac().data(), this->mac().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.RegEquipmentRequest.MAC");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string NickName = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.RegEquipmentRequest.NickName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 BuiltinIPSeq = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_builtinipseq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &builtinipseq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 DLSrc = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_dlsrc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dlsrc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 RegMode = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_regmode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &regmode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string TimeZone = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timezone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->timezone().data(), this->timezone().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.RegEquipmentRequest.TimeZone");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Language = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.RegEquipmentRequest.Language");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ForceReg = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_forcereg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forcereg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string RealCountry = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_realcountry()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->realcountry().data(), this->realcountry().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.RegEquipmentRequest.RealCountry");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_randomencrykey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.RegEquipmentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.RegEquipmentRequest)
  return false;
#undef DO_
}

void RegEquipmentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.RegEquipmentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 Type = 2;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional string SerialNumber = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serialnumber().data(), this->serialnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RegEquipmentRequest.SerialNumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->serialnumber(), output);
  }

  // optional string IMEI = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RegEquipmentRequest.IMEI");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->imei(), output);
  }

  // optional string MAC = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RegEquipmentRequest.MAC");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->mac(), output);
  }

  // optional string NickName = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RegEquipmentRequest.NickName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->nickname(), output);
  }

  // required uint32 BuiltinIPSeq = 7;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->builtinipseq(), output);
  }

  // required uint32 DLSrc = 8;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->dlsrc(), output);
  }

  // required uint32 RegMode = 9;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->regmode(), output);
  }

  // optional string TimeZone = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timezone().data(), this->timezone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RegEquipmentRequest.TimeZone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->timezone(), output);
  }

  // optional string Language = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RegEquipmentRequest.Language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->language(), output);
  }

  // required uint32 ForceReg = 12;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->forcereg(), output);
  }

  // optional string RealCountry = 13;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->realcountry().data(), this->realcountry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RegEquipmentRequest.RealCountry");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->realcountry(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 14;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->randomencrykey_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.RegEquipmentRequest)
}

::google::protobuf::uint8* RegEquipmentRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.RegEquipmentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 Type = 2;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional string SerialNumber = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serialnumber().data(), this->serialnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RegEquipmentRequest.SerialNumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->serialnumber(), target);
  }

  // optional string IMEI = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RegEquipmentRequest.IMEI");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->imei(), target);
  }

  // optional string MAC = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RegEquipmentRequest.MAC");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->mac(), target);
  }

  // optional string NickName = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RegEquipmentRequest.NickName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->nickname(), target);
  }

  // required uint32 BuiltinIPSeq = 7;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->builtinipseq(), target);
  }

  // required uint32 DLSrc = 8;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->dlsrc(), target);
  }

  // required uint32 RegMode = 9;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->regmode(), target);
  }

  // optional string TimeZone = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timezone().data(), this->timezone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RegEquipmentRequest.TimeZone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->timezone(), target);
  }

  // optional string Language = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RegEquipmentRequest.Language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->language(), target);
  }

  // required uint32 ForceReg = 12;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->forcereg(), target);
  }

  // optional string RealCountry = 13;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->realcountry().data(), this->realcountry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RegEquipmentRequest.RealCountry");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->realcountry(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 14;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->randomencrykey_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.RegEquipmentRequest)
  return target;
}

size_t RegEquipmentRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.RegEquipmentRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_randomencrykey()) {
    // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->randomencrykey_);
  }

  if (has_type()) {
    // required uint32 Type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_builtinipseq()) {
    // required uint32 BuiltinIPSeq = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->builtinipseq());
  }

  if (has_dlsrc()) {
    // required uint32 DLSrc = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dlsrc());
  }

  if (has_regmode()) {
    // required uint32 RegMode = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->regmode());
  }

  if (has_forcereg()) {
    // required uint32 ForceReg = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->forcereg());
  }

  return total_size;
}
size_t RegEquipmentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.RegEquipmentRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00003f80) ^ 0x00003f80) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->randomencrykey_);

    // required uint32 Type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required uint32 BuiltinIPSeq = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->builtinipseq());

    // required uint32 DLSrc = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dlsrc());

    // required uint32 RegMode = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->regmode());

    // required uint32 ForceReg = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->forcereg());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string SerialNumber = 3;
    if (has_serialnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serialnumber());
    }

    // optional string IMEI = 4;
    if (has_imei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imei());
    }

    // optional string MAC = 5;
    if (has_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mac());
    }

    // optional string NickName = 6;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string TimeZone = 10;
    if (has_timezone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timezone());
    }

    // optional string Language = 11;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

    // optional string RealCountry = 13;
    if (has_realcountry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->realcountry());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegEquipmentRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.RegEquipmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RegEquipmentRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegEquipmentRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.RegEquipmentRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.RegEquipmentRequest)
    MergeFrom(*source);
  }
}

void RegEquipmentRequest::MergeFrom(const RegEquipmentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.RegEquipmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_serialnumber();
      serialnumber_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serialnumber_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_imei();
      imei_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imei_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_mac();
      mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_timezone();
      timezone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timezone_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_language();
      language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_realcountry();
      realcountry_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.realcountry_);
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_randomencrykey()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.randomencrykey());
    }
    if (cached_has_bits & 0x00000200u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000400u) {
      builtinipseq_ = from.builtinipseq_;
    }
    if (cached_has_bits & 0x00000800u) {
      dlsrc_ = from.dlsrc_;
    }
    if (cached_has_bits & 0x00001000u) {
      regmode_ = from.regmode_;
    }
    if (cached_has_bits & 0x00002000u) {
      forcereg_ = from.forcereg_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RegEquipmentRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.RegEquipmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegEquipmentRequest::CopyFrom(const RegEquipmentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.RegEquipmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegEquipmentRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003f80) != 0x00003f80) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_randomencrykey()) {
    if (!this->randomencrykey_->IsInitialized()) return false;
  }
  return true;
}

void RegEquipmentRequest::Swap(RegEquipmentRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegEquipmentRequest::InternalSwap(RegEquipmentRequest* other) {
  serialnumber_.Swap(&other->serialnumber_);
  imei_.Swap(&other->imei_);
  mac_.Swap(&other->mac_);
  nickname_.Swap(&other->nickname_);
  timezone_.Swap(&other->timezone_);
  language_.Swap(&other->language_);
  realcountry_.Swap(&other->realcountry_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(randomencrykey_, other->randomencrykey_);
  std::swap(type_, other->type_);
  std::swap(builtinipseq_, other->builtinipseq_);
  std::swap(dlsrc_, other->dlsrc_);
  std::swap(regmode_, other->regmode_);
  std::swap(forcereg_, other->forcereg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegEquipmentRequest::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegEquipmentRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool RegEquipmentRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void RegEquipmentRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000080u;
}
void RegEquipmentRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000080u;
}
void RegEquipmentRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& RegEquipmentRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.RegEquipmentRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* RegEquipmentRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.RegEquipmentRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* RegEquipmentRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.RegEquipmentRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void RegEquipmentRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.RegEquipmentRequest.BaseRequest)
}

// required uint32 Type = 2;
bool RegEquipmentRequest::has_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void RegEquipmentRequest::set_has_type() {
  _has_bits_[0] |= 0x00000200u;
}
void RegEquipmentRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000200u;
}
void RegEquipmentRequest::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 RegEquipmentRequest::type() const {
  // @@protoc_insertion_point(field_get:micromsg.RegEquipmentRequest.Type)
  return type_;
}
void RegEquipmentRequest::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.RegEquipmentRequest.Type)
}

// optional string SerialNumber = 3;
bool RegEquipmentRequest::has_serialnumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RegEquipmentRequest::set_has_serialnumber() {
  _has_bits_[0] |= 0x00000001u;
}
void RegEquipmentRequest::clear_has_serialnumber() {
  _has_bits_[0] &= ~0x00000001u;
}
void RegEquipmentRequest::clear_serialnumber() {
  serialnumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serialnumber();
}
const ::std::string& RegEquipmentRequest::serialnumber() const {
  // @@protoc_insertion_point(field_get:micromsg.RegEquipmentRequest.SerialNumber)
  return serialnumber_.GetNoArena();
}
void RegEquipmentRequest::set_serialnumber(const ::std::string& value) {
  set_has_serialnumber();
  serialnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.RegEquipmentRequest.SerialNumber)
}
#if LANG_CXX11
void RegEquipmentRequest::set_serialnumber(::std::string&& value) {
  set_has_serialnumber();
  serialnumber_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.RegEquipmentRequest.SerialNumber)
}
#endif
void RegEquipmentRequest::set_serialnumber(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serialnumber();
  serialnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.RegEquipmentRequest.SerialNumber)
}
void RegEquipmentRequest::set_serialnumber(const char* value, size_t size) {
  set_has_serialnumber();
  serialnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.RegEquipmentRequest.SerialNumber)
}
::std::string* RegEquipmentRequest::mutable_serialnumber() {
  set_has_serialnumber();
  // @@protoc_insertion_point(field_mutable:micromsg.RegEquipmentRequest.SerialNumber)
  return serialnumber_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegEquipmentRequest::release_serialnumber() {
  // @@protoc_insertion_point(field_release:micromsg.RegEquipmentRequest.SerialNumber)
  clear_has_serialnumber();
  return serialnumber_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegEquipmentRequest::set_allocated_serialnumber(::std::string* serialnumber) {
  if (serialnumber != NULL) {
    set_has_serialnumber();
  } else {
    clear_has_serialnumber();
  }
  serialnumber_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serialnumber);
  // @@protoc_insertion_point(field_set_allocated:micromsg.RegEquipmentRequest.SerialNumber)
}

// optional string IMEI = 4;
bool RegEquipmentRequest::has_imei() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RegEquipmentRequest::set_has_imei() {
  _has_bits_[0] |= 0x00000002u;
}
void RegEquipmentRequest::clear_has_imei() {
  _has_bits_[0] &= ~0x00000002u;
}
void RegEquipmentRequest::clear_imei() {
  imei_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imei();
}
const ::std::string& RegEquipmentRequest::imei() const {
  // @@protoc_insertion_point(field_get:micromsg.RegEquipmentRequest.IMEI)
  return imei_.GetNoArena();
}
void RegEquipmentRequest::set_imei(const ::std::string& value) {
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.RegEquipmentRequest.IMEI)
}
#if LANG_CXX11
void RegEquipmentRequest::set_imei(::std::string&& value) {
  set_has_imei();
  imei_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.RegEquipmentRequest.IMEI)
}
#endif
void RegEquipmentRequest::set_imei(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.RegEquipmentRequest.IMEI)
}
void RegEquipmentRequest::set_imei(const char* value, size_t size) {
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.RegEquipmentRequest.IMEI)
}
::std::string* RegEquipmentRequest::mutable_imei() {
  set_has_imei();
  // @@protoc_insertion_point(field_mutable:micromsg.RegEquipmentRequest.IMEI)
  return imei_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegEquipmentRequest::release_imei() {
  // @@protoc_insertion_point(field_release:micromsg.RegEquipmentRequest.IMEI)
  clear_has_imei();
  return imei_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegEquipmentRequest::set_allocated_imei(::std::string* imei) {
  if (imei != NULL) {
    set_has_imei();
  } else {
    clear_has_imei();
  }
  imei_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imei);
  // @@protoc_insertion_point(field_set_allocated:micromsg.RegEquipmentRequest.IMEI)
}

// optional string MAC = 5;
bool RegEquipmentRequest::has_mac() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RegEquipmentRequest::set_has_mac() {
  _has_bits_[0] |= 0x00000004u;
}
void RegEquipmentRequest::clear_has_mac() {
  _has_bits_[0] &= ~0x00000004u;
}
void RegEquipmentRequest::clear_mac() {
  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mac();
}
const ::std::string& RegEquipmentRequest::mac() const {
  // @@protoc_insertion_point(field_get:micromsg.RegEquipmentRequest.MAC)
  return mac_.GetNoArena();
}
void RegEquipmentRequest::set_mac(const ::std::string& value) {
  set_has_mac();
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.RegEquipmentRequest.MAC)
}
#if LANG_CXX11
void RegEquipmentRequest::set_mac(::std::string&& value) {
  set_has_mac();
  mac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.RegEquipmentRequest.MAC)
}
#endif
void RegEquipmentRequest::set_mac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mac();
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.RegEquipmentRequest.MAC)
}
void RegEquipmentRequest::set_mac(const char* value, size_t size) {
  set_has_mac();
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.RegEquipmentRequest.MAC)
}
::std::string* RegEquipmentRequest::mutable_mac() {
  set_has_mac();
  // @@protoc_insertion_point(field_mutable:micromsg.RegEquipmentRequest.MAC)
  return mac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegEquipmentRequest::release_mac() {
  // @@protoc_insertion_point(field_release:micromsg.RegEquipmentRequest.MAC)
  clear_has_mac();
  return mac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegEquipmentRequest::set_allocated_mac(::std::string* mac) {
  if (mac != NULL) {
    set_has_mac();
  } else {
    clear_has_mac();
  }
  mac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac);
  // @@protoc_insertion_point(field_set_allocated:micromsg.RegEquipmentRequest.MAC)
}

// optional string NickName = 6;
bool RegEquipmentRequest::has_nickname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RegEquipmentRequest::set_has_nickname() {
  _has_bits_[0] |= 0x00000008u;
}
void RegEquipmentRequest::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000008u;
}
void RegEquipmentRequest::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
const ::std::string& RegEquipmentRequest::nickname() const {
  // @@protoc_insertion_point(field_get:micromsg.RegEquipmentRequest.NickName)
  return nickname_.GetNoArena();
}
void RegEquipmentRequest::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.RegEquipmentRequest.NickName)
}
#if LANG_CXX11
void RegEquipmentRequest::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.RegEquipmentRequest.NickName)
}
#endif
void RegEquipmentRequest::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.RegEquipmentRequest.NickName)
}
void RegEquipmentRequest::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.RegEquipmentRequest.NickName)
}
::std::string* RegEquipmentRequest::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:micromsg.RegEquipmentRequest.NickName)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegEquipmentRequest::release_nickname() {
  // @@protoc_insertion_point(field_release:micromsg.RegEquipmentRequest.NickName)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegEquipmentRequest::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.RegEquipmentRequest.NickName)
}

// required uint32 BuiltinIPSeq = 7;
bool RegEquipmentRequest::has_builtinipseq() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void RegEquipmentRequest::set_has_builtinipseq() {
  _has_bits_[0] |= 0x00000400u;
}
void RegEquipmentRequest::clear_has_builtinipseq() {
  _has_bits_[0] &= ~0x00000400u;
}
void RegEquipmentRequest::clear_builtinipseq() {
  builtinipseq_ = 0u;
  clear_has_builtinipseq();
}
::google::protobuf::uint32 RegEquipmentRequest::builtinipseq() const {
  // @@protoc_insertion_point(field_get:micromsg.RegEquipmentRequest.BuiltinIPSeq)
  return builtinipseq_;
}
void RegEquipmentRequest::set_builtinipseq(::google::protobuf::uint32 value) {
  set_has_builtinipseq();
  builtinipseq_ = value;
  // @@protoc_insertion_point(field_set:micromsg.RegEquipmentRequest.BuiltinIPSeq)
}

// required uint32 DLSrc = 8;
bool RegEquipmentRequest::has_dlsrc() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void RegEquipmentRequest::set_has_dlsrc() {
  _has_bits_[0] |= 0x00000800u;
}
void RegEquipmentRequest::clear_has_dlsrc() {
  _has_bits_[0] &= ~0x00000800u;
}
void RegEquipmentRequest::clear_dlsrc() {
  dlsrc_ = 0u;
  clear_has_dlsrc();
}
::google::protobuf::uint32 RegEquipmentRequest::dlsrc() const {
  // @@protoc_insertion_point(field_get:micromsg.RegEquipmentRequest.DLSrc)
  return dlsrc_;
}
void RegEquipmentRequest::set_dlsrc(::google::protobuf::uint32 value) {
  set_has_dlsrc();
  dlsrc_ = value;
  // @@protoc_insertion_point(field_set:micromsg.RegEquipmentRequest.DLSrc)
}

// required uint32 RegMode = 9;
bool RegEquipmentRequest::has_regmode() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void RegEquipmentRequest::set_has_regmode() {
  _has_bits_[0] |= 0x00001000u;
}
void RegEquipmentRequest::clear_has_regmode() {
  _has_bits_[0] &= ~0x00001000u;
}
void RegEquipmentRequest::clear_regmode() {
  regmode_ = 0u;
  clear_has_regmode();
}
::google::protobuf::uint32 RegEquipmentRequest::regmode() const {
  // @@protoc_insertion_point(field_get:micromsg.RegEquipmentRequest.RegMode)
  return regmode_;
}
void RegEquipmentRequest::set_regmode(::google::protobuf::uint32 value) {
  set_has_regmode();
  regmode_ = value;
  // @@protoc_insertion_point(field_set:micromsg.RegEquipmentRequest.RegMode)
}

// optional string TimeZone = 10;
bool RegEquipmentRequest::has_timezone() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RegEquipmentRequest::set_has_timezone() {
  _has_bits_[0] |= 0x00000010u;
}
void RegEquipmentRequest::clear_has_timezone() {
  _has_bits_[0] &= ~0x00000010u;
}
void RegEquipmentRequest::clear_timezone() {
  timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timezone();
}
const ::std::string& RegEquipmentRequest::timezone() const {
  // @@protoc_insertion_point(field_get:micromsg.RegEquipmentRequest.TimeZone)
  return timezone_.GetNoArena();
}
void RegEquipmentRequest::set_timezone(const ::std::string& value) {
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.RegEquipmentRequest.TimeZone)
}
#if LANG_CXX11
void RegEquipmentRequest::set_timezone(::std::string&& value) {
  set_has_timezone();
  timezone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.RegEquipmentRequest.TimeZone)
}
#endif
void RegEquipmentRequest::set_timezone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.RegEquipmentRequest.TimeZone)
}
void RegEquipmentRequest::set_timezone(const char* value, size_t size) {
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.RegEquipmentRequest.TimeZone)
}
::std::string* RegEquipmentRequest::mutable_timezone() {
  set_has_timezone();
  // @@protoc_insertion_point(field_mutable:micromsg.RegEquipmentRequest.TimeZone)
  return timezone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegEquipmentRequest::release_timezone() {
  // @@protoc_insertion_point(field_release:micromsg.RegEquipmentRequest.TimeZone)
  clear_has_timezone();
  return timezone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegEquipmentRequest::set_allocated_timezone(::std::string* timezone) {
  if (timezone != NULL) {
    set_has_timezone();
  } else {
    clear_has_timezone();
  }
  timezone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timezone);
  // @@protoc_insertion_point(field_set_allocated:micromsg.RegEquipmentRequest.TimeZone)
}

// optional string Language = 11;
bool RegEquipmentRequest::has_language() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RegEquipmentRequest::set_has_language() {
  _has_bits_[0] |= 0x00000020u;
}
void RegEquipmentRequest::clear_has_language() {
  _has_bits_[0] &= ~0x00000020u;
}
void RegEquipmentRequest::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_language();
}
const ::std::string& RegEquipmentRequest::language() const {
  // @@protoc_insertion_point(field_get:micromsg.RegEquipmentRequest.Language)
  return language_.GetNoArena();
}
void RegEquipmentRequest::set_language(const ::std::string& value) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.RegEquipmentRequest.Language)
}
#if LANG_CXX11
void RegEquipmentRequest::set_language(::std::string&& value) {
  set_has_language();
  language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.RegEquipmentRequest.Language)
}
#endif
void RegEquipmentRequest::set_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.RegEquipmentRequest.Language)
}
void RegEquipmentRequest::set_language(const char* value, size_t size) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.RegEquipmentRequest.Language)
}
::std::string* RegEquipmentRequest::mutable_language() {
  set_has_language();
  // @@protoc_insertion_point(field_mutable:micromsg.RegEquipmentRequest.Language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegEquipmentRequest::release_language() {
  // @@protoc_insertion_point(field_release:micromsg.RegEquipmentRequest.Language)
  clear_has_language();
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegEquipmentRequest::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    set_has_language();
  } else {
    clear_has_language();
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:micromsg.RegEquipmentRequest.Language)
}

// required uint32 ForceReg = 12;
bool RegEquipmentRequest::has_forcereg() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void RegEquipmentRequest::set_has_forcereg() {
  _has_bits_[0] |= 0x00002000u;
}
void RegEquipmentRequest::clear_has_forcereg() {
  _has_bits_[0] &= ~0x00002000u;
}
void RegEquipmentRequest::clear_forcereg() {
  forcereg_ = 0u;
  clear_has_forcereg();
}
::google::protobuf::uint32 RegEquipmentRequest::forcereg() const {
  // @@protoc_insertion_point(field_get:micromsg.RegEquipmentRequest.ForceReg)
  return forcereg_;
}
void RegEquipmentRequest::set_forcereg(::google::protobuf::uint32 value) {
  set_has_forcereg();
  forcereg_ = value;
  // @@protoc_insertion_point(field_set:micromsg.RegEquipmentRequest.ForceReg)
}

// optional string RealCountry = 13;
bool RegEquipmentRequest::has_realcountry() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RegEquipmentRequest::set_has_realcountry() {
  _has_bits_[0] |= 0x00000040u;
}
void RegEquipmentRequest::clear_has_realcountry() {
  _has_bits_[0] &= ~0x00000040u;
}
void RegEquipmentRequest::clear_realcountry() {
  realcountry_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_realcountry();
}
const ::std::string& RegEquipmentRequest::realcountry() const {
  // @@protoc_insertion_point(field_get:micromsg.RegEquipmentRequest.RealCountry)
  return realcountry_.GetNoArena();
}
void RegEquipmentRequest::set_realcountry(const ::std::string& value) {
  set_has_realcountry();
  realcountry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.RegEquipmentRequest.RealCountry)
}
#if LANG_CXX11
void RegEquipmentRequest::set_realcountry(::std::string&& value) {
  set_has_realcountry();
  realcountry_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.RegEquipmentRequest.RealCountry)
}
#endif
void RegEquipmentRequest::set_realcountry(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_realcountry();
  realcountry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.RegEquipmentRequest.RealCountry)
}
void RegEquipmentRequest::set_realcountry(const char* value, size_t size) {
  set_has_realcountry();
  realcountry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.RegEquipmentRequest.RealCountry)
}
::std::string* RegEquipmentRequest::mutable_realcountry() {
  set_has_realcountry();
  // @@protoc_insertion_point(field_mutable:micromsg.RegEquipmentRequest.RealCountry)
  return realcountry_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegEquipmentRequest::release_realcountry() {
  // @@protoc_insertion_point(field_release:micromsg.RegEquipmentRequest.RealCountry)
  clear_has_realcountry();
  return realcountry_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegEquipmentRequest::set_allocated_realcountry(::std::string* realcountry) {
  if (realcountry != NULL) {
    set_has_realcountry();
  } else {
    clear_has_realcountry();
  }
  realcountry_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), realcountry);
  // @@protoc_insertion_point(field_set_allocated:micromsg.RegEquipmentRequest.RealCountry)
}

// required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 14;
bool RegEquipmentRequest::has_randomencrykey() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void RegEquipmentRequest::set_has_randomencrykey() {
  _has_bits_[0] |= 0x00000100u;
}
void RegEquipmentRequest::clear_has_randomencrykey() {
  _has_bits_[0] &= ~0x00000100u;
}
void RegEquipmentRequest::clear_randomencrykey() {
  if (randomencrykey_ != NULL) randomencrykey_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_randomencrykey();
}
const ::micromsg::SKBuiltinBuffer_t& RegEquipmentRequest::randomencrykey() const {
  // @@protoc_insertion_point(field_get:micromsg.RegEquipmentRequest.RandomEncryKey)
  return randomencrykey_ != NULL ? *randomencrykey_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* RegEquipmentRequest::mutable_randomencrykey() {
  set_has_randomencrykey();
  if (randomencrykey_ == NULL) {
    randomencrykey_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.RegEquipmentRequest.RandomEncryKey)
  return randomencrykey_;
}
::micromsg::SKBuiltinBuffer_t* RegEquipmentRequest::release_randomencrykey() {
  // @@protoc_insertion_point(field_release:micromsg.RegEquipmentRequest.RandomEncryKey)
  clear_has_randomencrykey();
  ::micromsg::SKBuiltinBuffer_t* temp = randomencrykey_;
  randomencrykey_ = NULL;
  return temp;
}
void RegEquipmentRequest::set_allocated_randomencrykey(::micromsg::SKBuiltinBuffer_t* randomencrykey) {
  delete randomencrykey_;
  randomencrykey_ = randomencrykey;
  if (randomencrykey) {
    set_has_randomencrykey();
  } else {
    clear_has_randomencrykey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.RegEquipmentRequest.RandomEncryKey)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegEquipmentResponse::kBaseResponseFieldNumber;
const int RegEquipmentResponse::kUinFieldNumber;
const int RegEquipmentResponse::kSessionKeyFieldNumber;
const int RegEquipmentResponse::kOfficialUserNameFieldNumber;
const int RegEquipmentResponse::kOfficialNickNameFieldNumber;
const int RegEquipmentResponse::kQQMicroBlogUserNameFieldNumber;
const int RegEquipmentResponse::kBindEmailFieldNumber;
const int RegEquipmentResponse::kPushMailStatusFieldNumber;
const int RegEquipmentResponse::kSendCardBitFlagFieldNumber;
const int RegEquipmentResponse::kPushMailSettingTicketFieldNumber;
const int RegEquipmentResponse::kBuiltinIPListFieldNumber;
const int RegEquipmentResponse::kFSURLFieldNumber;
const int RegEquipmentResponse::kUserNameFieldNumber;
const int RegEquipmentResponse::kStatusFieldNumber;
const int RegEquipmentResponse::kNetworkControlFieldNumber;
const int RegEquipmentResponse::kReturnFlagFieldNumber;
const int RegEquipmentResponse::kRegTypeFieldNumber;
const int RegEquipmentResponse::kAuthKeyFieldNumber;
const int RegEquipmentResponse::kPluginKeyListFieldNumber;
const int RegEquipmentResponse::kPasswordFieldNumber;
const int RegEquipmentResponse::kProfileFlagFieldNumber;
const int RegEquipmentResponse::kNewHostListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegEquipmentResponse::RegEquipmentResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.RegEquipmentResponse)
}
RegEquipmentResponse::RegEquipmentResponse(const RegEquipmentResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sessionkey()) {
    sessionkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionkey_);
  }
  officialusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_officialusername()) {
    officialusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.officialusername_);
  }
  officialnickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_officialnickname()) {
    officialnickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.officialnickname_);
  }
  qqmicroblogusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_qqmicroblogusername()) {
    qqmicroblogusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qqmicroblogusername_);
  }
  bindemail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bindemail()) {
    bindemail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bindemail_);
  }
  pushmailsettingticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pushmailsettingticket()) {
    pushmailsettingticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pushmailsettingticket_);
  }
  fsurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fsurl()) {
    fsurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fsurl_);
  }
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  authkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_authkey()) {
    authkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authkey_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_builtiniplist()) {
    builtiniplist_ = new ::micromsg::BuiltinIPList(*from.builtiniplist_);
  } else {
    builtiniplist_ = NULL;
  }
  if (from.has_networkcontrol()) {
    networkcontrol_ = new ::micromsg::NetworkControl(*from.networkcontrol_);
  } else {
    networkcontrol_ = NULL;
  }
  if (from.has_pluginkeylist()) {
    pluginkeylist_ = new ::micromsg::PluginKeyList(*from.pluginkeylist_);
  } else {
    pluginkeylist_ = NULL;
  }
  if (from.has_newhostlist()) {
    newhostlist_ = new ::micromsg::HostList(*from.newhostlist_);
  } else {
    newhostlist_ = NULL;
  }
  ::memcpy(&uin_, &from.uin_,
    reinterpret_cast<char*>(&profileflag_) -
    reinterpret_cast<char*>(&uin_) + sizeof(profileflag_));
  // @@protoc_insertion_point(copy_constructor:micromsg.RegEquipmentResponse)
}

void RegEquipmentResponse::SharedCtor() {
  _cached_size_ = 0;
  sessionkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  officialusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  officialnickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qqmicroblogusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bindemail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pushmailsettingticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fsurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&profileflag_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(profileflag_));
}

RegEquipmentResponse::~RegEquipmentResponse() {
  // @@protoc_insertion_point(destructor:micromsg.RegEquipmentResponse)
  SharedDtor();
}

void RegEquipmentResponse::SharedDtor() {
  sessionkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  officialusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  officialnickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qqmicroblogusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bindemail_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pushmailsettingticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fsurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete builtiniplist_;
  }
  if (this != internal_default_instance()) {
    delete networkcontrol_;
  }
  if (this != internal_default_instance()) {
    delete pluginkeylist_;
  }
  if (this != internal_default_instance()) {
    delete newhostlist_;
  }
}

void RegEquipmentResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegEquipmentResponse::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegEquipmentResponse& RegEquipmentResponse::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

RegEquipmentResponse* RegEquipmentResponse::New(::google::protobuf::Arena* arena) const {
  RegEquipmentResponse* n = new RegEquipmentResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegEquipmentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.RegEquipmentResponse)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_sessionkey()) {
      GOOGLE_DCHECK(!sessionkey_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sessionkey_.UnsafeRawStringPointer())->clear();
    }
    if (has_officialusername()) {
      GOOGLE_DCHECK(!officialusername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*officialusername_.UnsafeRawStringPointer())->clear();
    }
    if (has_officialnickname()) {
      GOOGLE_DCHECK(!officialnickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*officialnickname_.UnsafeRawStringPointer())->clear();
    }
    if (has_qqmicroblogusername()) {
      GOOGLE_DCHECK(!qqmicroblogusername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*qqmicroblogusername_.UnsafeRawStringPointer())->clear();
    }
    if (has_bindemail()) {
      GOOGLE_DCHECK(!bindemail_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bindemail_.UnsafeRawStringPointer())->clear();
    }
    if (has_pushmailsettingticket()) {
      GOOGLE_DCHECK(!pushmailsettingticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pushmailsettingticket_.UnsafeRawStringPointer())->clear();
    }
    if (has_fsurl()) {
      GOOGLE_DCHECK(!fsurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fsurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_username()) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[8 / 32] & 32512u) {
    if (has_authkey()) {
      GOOGLE_DCHECK(!authkey_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*authkey_.UnsafeRawStringPointer())->clear();
    }
    if (has_password()) {
      GOOGLE_DCHECK(!password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*password_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_builtiniplist()) {
      GOOGLE_DCHECK(builtiniplist_ != NULL);
      builtiniplist_->::micromsg::BuiltinIPList::Clear();
    }
    if (has_networkcontrol()) {
      GOOGLE_DCHECK(networkcontrol_ != NULL);
      networkcontrol_->::micromsg::NetworkControl::Clear();
    }
    if (has_pluginkeylist()) {
      GOOGLE_DCHECK(pluginkeylist_ != NULL);
      pluginkeylist_->::micromsg::PluginKeyList::Clear();
    }
    if (has_newhostlist()) {
      GOOGLE_DCHECK(newhostlist_ != NULL);
      newhostlist_->::micromsg::HostList::Clear();
    }
  }
  uin_ = 0u;
  if (_has_bits_[16 / 32] & 4128768u) {
    ::memset(&pushmailstatus_, 0, reinterpret_cast<char*>(&profileflag_) -
      reinterpret_cast<char*>(&pushmailstatus_) + sizeof(profileflag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RegEquipmentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.RegEquipmentResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Uin = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_uin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string SessionKey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionkey().data(), this->sessionkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.RegEquipmentResponse.SessionKey");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string OfficialUserName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_officialusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->officialusername().data(), this->officialusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.RegEquipmentResponse.OfficialUserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string OfficialNickName = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_officialnickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->officialnickname().data(), this->officialnickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.RegEquipmentResponse.OfficialNickName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string QQMicroBlogUserName = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qqmicroblogusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->qqmicroblogusername().data(), this->qqmicroblogusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.RegEquipmentResponse.QQMicroBlogUserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string BindEmail = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bindemail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bindemail().data(), this->bindemail().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.RegEquipmentResponse.BindEmail");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 PushMailStatus = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_pushmailstatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pushmailstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 SendCardBitFlag = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_sendcardbitflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sendcardbitflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PushMailSettingTicket = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pushmailsettingticket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pushmailsettingticket().data(), this->pushmailsettingticket().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.RegEquipmentResponse.PushMailSettingTicket");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.BuiltinIPList BuiltinIPList = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_builtiniplist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FSURL = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fsurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fsurl().data(), this->fsurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.RegEquipmentResponse.FSURL");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string UserName = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.RegEquipmentResponse.UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Status = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.NetworkControl NetworkControl = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_networkcontrol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ReturnFlag = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_returnflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &returnflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 RegType = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_regtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &regtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AuthKey = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->authkey().data(), this->authkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.RegEquipmentResponse.AuthKey");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.PluginKeyList PluginKeyList = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pluginkeylist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Password = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.RegEquipmentResponse.Password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ProfileFlag = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          set_has_profileflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &profileflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.HostList NewHostList = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newhostlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.RegEquipmentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.RegEquipmentResponse)
  return false;
#undef DO_
}

void RegEquipmentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.RegEquipmentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 Uin = 2;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uin(), output);
  }

  // optional string SessionKey = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionkey().data(), this->sessionkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RegEquipmentResponse.SessionKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sessionkey(), output);
  }

  // optional string OfficialUserName = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->officialusername().data(), this->officialusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RegEquipmentResponse.OfficialUserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->officialusername(), output);
  }

  // optional string OfficialNickName = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->officialnickname().data(), this->officialnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RegEquipmentResponse.OfficialNickName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->officialnickname(), output);
  }

  // optional string QQMicroBlogUserName = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qqmicroblogusername().data(), this->qqmicroblogusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RegEquipmentResponse.QQMicroBlogUserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->qqmicroblogusername(), output);
  }

  // optional string BindEmail = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bindemail().data(), this->bindemail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RegEquipmentResponse.BindEmail");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->bindemail(), output);
  }

  // required uint32 PushMailStatus = 8;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->pushmailstatus(), output);
  }

  // required uint32 SendCardBitFlag = 9;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->sendcardbitflag(), output);
  }

  // optional string PushMailSettingTicket = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pushmailsettingticket().data(), this->pushmailsettingticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RegEquipmentResponse.PushMailSettingTicket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->pushmailsettingticket(), output);
  }

  // required .micromsg.BuiltinIPList BuiltinIPList = 14;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->builtiniplist_, output);
  }

  // optional string FSURL = 15;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fsurl().data(), this->fsurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RegEquipmentResponse.FSURL");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->fsurl(), output);
  }

  // optional string UserName = 16;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RegEquipmentResponse.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->username(), output);
  }

  // required uint32 Status = 17;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->status(), output);
  }

  // required .micromsg.NetworkControl NetworkControl = 18;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->networkcontrol_, output);
  }

  // required uint32 ReturnFlag = 19;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->returnflag(), output);
  }

  // required uint32 RegType = 20;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->regtype(), output);
  }

  // optional string AuthKey = 21;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authkey().data(), this->authkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RegEquipmentResponse.AuthKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->authkey(), output);
  }

  // required .micromsg.PluginKeyList PluginKeyList = 22;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->pluginkeylist_, output);
  }

  // optional string Password = 23;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RegEquipmentResponse.Password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->password(), output);
  }

  // required uint32 ProfileFlag = 24;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->profileflag(), output);
  }

  // required .micromsg.HostList NewHostList = 25;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, *this->newhostlist_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.RegEquipmentResponse)
}

::google::protobuf::uint8* RegEquipmentResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.RegEquipmentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 Uin = 2;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uin(), target);
  }

  // optional string SessionKey = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionkey().data(), this->sessionkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RegEquipmentResponse.SessionKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sessionkey(), target);
  }

  // optional string OfficialUserName = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->officialusername().data(), this->officialusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RegEquipmentResponse.OfficialUserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->officialusername(), target);
  }

  // optional string OfficialNickName = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->officialnickname().data(), this->officialnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RegEquipmentResponse.OfficialNickName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->officialnickname(), target);
  }

  // optional string QQMicroBlogUserName = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qqmicroblogusername().data(), this->qqmicroblogusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RegEquipmentResponse.QQMicroBlogUserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->qqmicroblogusername(), target);
  }

  // optional string BindEmail = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bindemail().data(), this->bindemail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RegEquipmentResponse.BindEmail");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->bindemail(), target);
  }

  // required uint32 PushMailStatus = 8;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->pushmailstatus(), target);
  }

  // required uint32 SendCardBitFlag = 9;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->sendcardbitflag(), target);
  }

  // optional string PushMailSettingTicket = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pushmailsettingticket().data(), this->pushmailsettingticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RegEquipmentResponse.PushMailSettingTicket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->pushmailsettingticket(), target);
  }

  // required .micromsg.BuiltinIPList BuiltinIPList = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->builtiniplist_, deterministic, target);
  }

  // optional string FSURL = 15;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fsurl().data(), this->fsurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RegEquipmentResponse.FSURL");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->fsurl(), target);
  }

  // optional string UserName = 16;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RegEquipmentResponse.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->username(), target);
  }

  // required uint32 Status = 17;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->status(), target);
  }

  // required .micromsg.NetworkControl NetworkControl = 18;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->networkcontrol_, deterministic, target);
  }

  // required uint32 ReturnFlag = 19;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->returnflag(), target);
  }

  // required uint32 RegType = 20;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->regtype(), target);
  }

  // optional string AuthKey = 21;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authkey().data(), this->authkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RegEquipmentResponse.AuthKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->authkey(), target);
  }

  // required .micromsg.PluginKeyList PluginKeyList = 22;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *this->pluginkeylist_, deterministic, target);
  }

  // optional string Password = 23;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RegEquipmentResponse.Password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->password(), target);
  }

  // required uint32 ProfileFlag = 24;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->profileflag(), target);
  }

  // required .micromsg.HostList NewHostList = 25;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        25, *this->newhostlist_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.RegEquipmentResponse)
  return target;
}

size_t RegEquipmentResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.RegEquipmentResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_builtiniplist()) {
    // required .micromsg.BuiltinIPList BuiltinIPList = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->builtiniplist_);
  }

  if (has_networkcontrol()) {
    // required .micromsg.NetworkControl NetworkControl = 18;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->networkcontrol_);
  }

  if (has_pluginkeylist()) {
    // required .micromsg.PluginKeyList PluginKeyList = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pluginkeylist_);
  }

  if (has_newhostlist()) {
    // required .micromsg.HostList NewHostList = 25;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->newhostlist_);
  }

  if (has_uin()) {
    // required uint32 Uin = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uin());
  }

  if (has_pushmailstatus()) {
    // required uint32 PushMailStatus = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pushmailstatus());
  }

  if (has_sendcardbitflag()) {
    // required uint32 SendCardBitFlag = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sendcardbitflag());
  }

  if (has_status()) {
    // required uint32 Status = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  if (has_returnflag()) {
    // required uint32 ReturnFlag = 19;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->returnflag());
  }

  if (has_regtype()) {
    // required uint32 RegType = 20;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->regtype());
  }

  if (has_profileflag()) {
    // required uint32 ProfileFlag = 24;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->profileflag());
  }

  return total_size;
}
size_t RegEquipmentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.RegEquipmentResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x003ffc00) ^ 0x003ffc00) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required .micromsg.BuiltinIPList BuiltinIPList = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->builtiniplist_);

    // required .micromsg.NetworkControl NetworkControl = 18;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->networkcontrol_);

    // required .micromsg.PluginKeyList PluginKeyList = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pluginkeylist_);

    // required .micromsg.HostList NewHostList = 25;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->newhostlist_);

    // required uint32 Uin = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uin());

    // required uint32 PushMailStatus = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pushmailstatus());

    // required uint32 SendCardBitFlag = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sendcardbitflag());

    // required uint32 Status = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());

    // required uint32 ReturnFlag = 19;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->returnflag());

    // required uint32 RegType = 20;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->regtype());

    // required uint32 ProfileFlag = 24;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->profileflag());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string SessionKey = 3;
    if (has_sessionkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sessionkey());
    }

    // optional string OfficialUserName = 4;
    if (has_officialusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->officialusername());
    }

    // optional string OfficialNickName = 5;
    if (has_officialnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->officialnickname());
    }

    // optional string QQMicroBlogUserName = 6;
    if (has_qqmicroblogusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qqmicroblogusername());
    }

    // optional string BindEmail = 7;
    if (has_bindemail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bindemail());
    }

    // optional string PushMailSettingTicket = 10;
    if (has_pushmailsettingticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pushmailsettingticket());
    }

    // optional string FSURL = 15;
    if (has_fsurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fsurl());
    }

    // optional string UserName = 16;
    if (has_username()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional string AuthKey = 21;
    if (has_authkey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authkey());
    }

    // optional string Password = 23;
    if (has_password()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegEquipmentResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.RegEquipmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RegEquipmentResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegEquipmentResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.RegEquipmentResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.RegEquipmentResponse)
    MergeFrom(*source);
  }
}

void RegEquipmentResponse::MergeFrom(const RegEquipmentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.RegEquipmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sessionkey();
      sessionkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionkey_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_officialusername();
      officialusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.officialusername_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_officialnickname();
      officialnickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.officialnickname_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_qqmicroblogusername();
      qqmicroblogusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qqmicroblogusername_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_bindemail();
      bindemail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bindemail_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_pushmailsettingticket();
      pushmailsettingticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pushmailsettingticket_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_fsurl();
      fsurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fsurl_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_authkey();
      authkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authkey_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_builtiniplist()->::micromsg::BuiltinIPList::MergeFrom(from.builtiniplist());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_networkcontrol()->::micromsg::NetworkControl::MergeFrom(from.networkcontrol());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_pluginkeylist()->::micromsg::PluginKeyList::MergeFrom(from.pluginkeylist());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_newhostlist()->::micromsg::HostList::MergeFrom(from.newhostlist());
    }
    if (cached_has_bits & 0x00008000u) {
      uin_ = from.uin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4128768u) {
    if (cached_has_bits & 0x00010000u) {
      pushmailstatus_ = from.pushmailstatus_;
    }
    if (cached_has_bits & 0x00020000u) {
      sendcardbitflag_ = from.sendcardbitflag_;
    }
    if (cached_has_bits & 0x00040000u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00080000u) {
      returnflag_ = from.returnflag_;
    }
    if (cached_has_bits & 0x00100000u) {
      regtype_ = from.regtype_;
    }
    if (cached_has_bits & 0x00200000u) {
      profileflag_ = from.profileflag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RegEquipmentResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.RegEquipmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegEquipmentResponse::CopyFrom(const RegEquipmentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.RegEquipmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegEquipmentResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x003ffc00) != 0x003ffc00) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_builtiniplist()) {
    if (!this->builtiniplist_->IsInitialized()) return false;
  }
  if (has_pluginkeylist()) {
    if (!this->pluginkeylist_->IsInitialized()) return false;
  }
  if (has_newhostlist()) {
    if (!this->newhostlist_->IsInitialized()) return false;
  }
  return true;
}

void RegEquipmentResponse::Swap(RegEquipmentResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegEquipmentResponse::InternalSwap(RegEquipmentResponse* other) {
  sessionkey_.Swap(&other->sessionkey_);
  officialusername_.Swap(&other->officialusername_);
  officialnickname_.Swap(&other->officialnickname_);
  qqmicroblogusername_.Swap(&other->qqmicroblogusername_);
  bindemail_.Swap(&other->bindemail_);
  pushmailsettingticket_.Swap(&other->pushmailsettingticket_);
  fsurl_.Swap(&other->fsurl_);
  username_.Swap(&other->username_);
  authkey_.Swap(&other->authkey_);
  password_.Swap(&other->password_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(builtiniplist_, other->builtiniplist_);
  std::swap(networkcontrol_, other->networkcontrol_);
  std::swap(pluginkeylist_, other->pluginkeylist_);
  std::swap(newhostlist_, other->newhostlist_);
  std::swap(uin_, other->uin_);
  std::swap(pushmailstatus_, other->pushmailstatus_);
  std::swap(sendcardbitflag_, other->sendcardbitflag_);
  std::swap(status_, other->status_);
  std::swap(returnflag_, other->returnflag_);
  std::swap(regtype_, other->regtype_);
  std::swap(profileflag_, other->profileflag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegEquipmentResponse::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegEquipmentResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool RegEquipmentResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void RegEquipmentResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000400u;
}
void RegEquipmentResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000400u;
}
void RegEquipmentResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& RegEquipmentResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.RegEquipmentResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* RegEquipmentResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.RegEquipmentResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* RegEquipmentResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.RegEquipmentResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void RegEquipmentResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.RegEquipmentResponse.BaseResponse)
}

// required uint32 Uin = 2;
bool RegEquipmentResponse::has_uin() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void RegEquipmentResponse::set_has_uin() {
  _has_bits_[0] |= 0x00008000u;
}
void RegEquipmentResponse::clear_has_uin() {
  _has_bits_[0] &= ~0x00008000u;
}
void RegEquipmentResponse::clear_uin() {
  uin_ = 0u;
  clear_has_uin();
}
::google::protobuf::uint32 RegEquipmentResponse::uin() const {
  // @@protoc_insertion_point(field_get:micromsg.RegEquipmentResponse.Uin)
  return uin_;
}
void RegEquipmentResponse::set_uin(::google::protobuf::uint32 value) {
  set_has_uin();
  uin_ = value;
  // @@protoc_insertion_point(field_set:micromsg.RegEquipmentResponse.Uin)
}

// optional string SessionKey = 3;
bool RegEquipmentResponse::has_sessionkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RegEquipmentResponse::set_has_sessionkey() {
  _has_bits_[0] |= 0x00000001u;
}
void RegEquipmentResponse::clear_has_sessionkey() {
  _has_bits_[0] &= ~0x00000001u;
}
void RegEquipmentResponse::clear_sessionkey() {
  sessionkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionkey();
}
const ::std::string& RegEquipmentResponse::sessionkey() const {
  // @@protoc_insertion_point(field_get:micromsg.RegEquipmentResponse.SessionKey)
  return sessionkey_.GetNoArena();
}
void RegEquipmentResponse::set_sessionkey(const ::std::string& value) {
  set_has_sessionkey();
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.RegEquipmentResponse.SessionKey)
}
#if LANG_CXX11
void RegEquipmentResponse::set_sessionkey(::std::string&& value) {
  set_has_sessionkey();
  sessionkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.RegEquipmentResponse.SessionKey)
}
#endif
void RegEquipmentResponse::set_sessionkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionkey();
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.RegEquipmentResponse.SessionKey)
}
void RegEquipmentResponse::set_sessionkey(const char* value, size_t size) {
  set_has_sessionkey();
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.RegEquipmentResponse.SessionKey)
}
::std::string* RegEquipmentResponse::mutable_sessionkey() {
  set_has_sessionkey();
  // @@protoc_insertion_point(field_mutable:micromsg.RegEquipmentResponse.SessionKey)
  return sessionkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegEquipmentResponse::release_sessionkey() {
  // @@protoc_insertion_point(field_release:micromsg.RegEquipmentResponse.SessionKey)
  clear_has_sessionkey();
  return sessionkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegEquipmentResponse::set_allocated_sessionkey(::std::string* sessionkey) {
  if (sessionkey != NULL) {
    set_has_sessionkey();
  } else {
    clear_has_sessionkey();
  }
  sessionkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionkey);
  // @@protoc_insertion_point(field_set_allocated:micromsg.RegEquipmentResponse.SessionKey)
}

// optional string OfficialUserName = 4;
bool RegEquipmentResponse::has_officialusername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RegEquipmentResponse::set_has_officialusername() {
  _has_bits_[0] |= 0x00000002u;
}
void RegEquipmentResponse::clear_has_officialusername() {
  _has_bits_[0] &= ~0x00000002u;
}
void RegEquipmentResponse::clear_officialusername() {
  officialusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_officialusername();
}
const ::std::string& RegEquipmentResponse::officialusername() const {
  // @@protoc_insertion_point(field_get:micromsg.RegEquipmentResponse.OfficialUserName)
  return officialusername_.GetNoArena();
}
void RegEquipmentResponse::set_officialusername(const ::std::string& value) {
  set_has_officialusername();
  officialusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.RegEquipmentResponse.OfficialUserName)
}
#if LANG_CXX11
void RegEquipmentResponse::set_officialusername(::std::string&& value) {
  set_has_officialusername();
  officialusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.RegEquipmentResponse.OfficialUserName)
}
#endif
void RegEquipmentResponse::set_officialusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_officialusername();
  officialusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.RegEquipmentResponse.OfficialUserName)
}
void RegEquipmentResponse::set_officialusername(const char* value, size_t size) {
  set_has_officialusername();
  officialusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.RegEquipmentResponse.OfficialUserName)
}
::std::string* RegEquipmentResponse::mutable_officialusername() {
  set_has_officialusername();
  // @@protoc_insertion_point(field_mutable:micromsg.RegEquipmentResponse.OfficialUserName)
  return officialusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegEquipmentResponse::release_officialusername() {
  // @@protoc_insertion_point(field_release:micromsg.RegEquipmentResponse.OfficialUserName)
  clear_has_officialusername();
  return officialusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegEquipmentResponse::set_allocated_officialusername(::std::string* officialusername) {
  if (officialusername != NULL) {
    set_has_officialusername();
  } else {
    clear_has_officialusername();
  }
  officialusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), officialusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.RegEquipmentResponse.OfficialUserName)
}

// optional string OfficialNickName = 5;
bool RegEquipmentResponse::has_officialnickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RegEquipmentResponse::set_has_officialnickname() {
  _has_bits_[0] |= 0x00000004u;
}
void RegEquipmentResponse::clear_has_officialnickname() {
  _has_bits_[0] &= ~0x00000004u;
}
void RegEquipmentResponse::clear_officialnickname() {
  officialnickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_officialnickname();
}
const ::std::string& RegEquipmentResponse::officialnickname() const {
  // @@protoc_insertion_point(field_get:micromsg.RegEquipmentResponse.OfficialNickName)
  return officialnickname_.GetNoArena();
}
void RegEquipmentResponse::set_officialnickname(const ::std::string& value) {
  set_has_officialnickname();
  officialnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.RegEquipmentResponse.OfficialNickName)
}
#if LANG_CXX11
void RegEquipmentResponse::set_officialnickname(::std::string&& value) {
  set_has_officialnickname();
  officialnickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.RegEquipmentResponse.OfficialNickName)
}
#endif
void RegEquipmentResponse::set_officialnickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_officialnickname();
  officialnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.RegEquipmentResponse.OfficialNickName)
}
void RegEquipmentResponse::set_officialnickname(const char* value, size_t size) {
  set_has_officialnickname();
  officialnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.RegEquipmentResponse.OfficialNickName)
}
::std::string* RegEquipmentResponse::mutable_officialnickname() {
  set_has_officialnickname();
  // @@protoc_insertion_point(field_mutable:micromsg.RegEquipmentResponse.OfficialNickName)
  return officialnickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegEquipmentResponse::release_officialnickname() {
  // @@protoc_insertion_point(field_release:micromsg.RegEquipmentResponse.OfficialNickName)
  clear_has_officialnickname();
  return officialnickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegEquipmentResponse::set_allocated_officialnickname(::std::string* officialnickname) {
  if (officialnickname != NULL) {
    set_has_officialnickname();
  } else {
    clear_has_officialnickname();
  }
  officialnickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), officialnickname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.RegEquipmentResponse.OfficialNickName)
}

// optional string QQMicroBlogUserName = 6;
bool RegEquipmentResponse::has_qqmicroblogusername() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RegEquipmentResponse::set_has_qqmicroblogusername() {
  _has_bits_[0] |= 0x00000008u;
}
void RegEquipmentResponse::clear_has_qqmicroblogusername() {
  _has_bits_[0] &= ~0x00000008u;
}
void RegEquipmentResponse::clear_qqmicroblogusername() {
  qqmicroblogusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_qqmicroblogusername();
}
const ::std::string& RegEquipmentResponse::qqmicroblogusername() const {
  // @@protoc_insertion_point(field_get:micromsg.RegEquipmentResponse.QQMicroBlogUserName)
  return qqmicroblogusername_.GetNoArena();
}
void RegEquipmentResponse::set_qqmicroblogusername(const ::std::string& value) {
  set_has_qqmicroblogusername();
  qqmicroblogusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.RegEquipmentResponse.QQMicroBlogUserName)
}
#if LANG_CXX11
void RegEquipmentResponse::set_qqmicroblogusername(::std::string&& value) {
  set_has_qqmicroblogusername();
  qqmicroblogusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.RegEquipmentResponse.QQMicroBlogUserName)
}
#endif
void RegEquipmentResponse::set_qqmicroblogusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_qqmicroblogusername();
  qqmicroblogusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.RegEquipmentResponse.QQMicroBlogUserName)
}
void RegEquipmentResponse::set_qqmicroblogusername(const char* value, size_t size) {
  set_has_qqmicroblogusername();
  qqmicroblogusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.RegEquipmentResponse.QQMicroBlogUserName)
}
::std::string* RegEquipmentResponse::mutable_qqmicroblogusername() {
  set_has_qqmicroblogusername();
  // @@protoc_insertion_point(field_mutable:micromsg.RegEquipmentResponse.QQMicroBlogUserName)
  return qqmicroblogusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegEquipmentResponse::release_qqmicroblogusername() {
  // @@protoc_insertion_point(field_release:micromsg.RegEquipmentResponse.QQMicroBlogUserName)
  clear_has_qqmicroblogusername();
  return qqmicroblogusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegEquipmentResponse::set_allocated_qqmicroblogusername(::std::string* qqmicroblogusername) {
  if (qqmicroblogusername != NULL) {
    set_has_qqmicroblogusername();
  } else {
    clear_has_qqmicroblogusername();
  }
  qqmicroblogusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qqmicroblogusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.RegEquipmentResponse.QQMicroBlogUserName)
}

// optional string BindEmail = 7;
bool RegEquipmentResponse::has_bindemail() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RegEquipmentResponse::set_has_bindemail() {
  _has_bits_[0] |= 0x00000010u;
}
void RegEquipmentResponse::clear_has_bindemail() {
  _has_bits_[0] &= ~0x00000010u;
}
void RegEquipmentResponse::clear_bindemail() {
  bindemail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bindemail();
}
const ::std::string& RegEquipmentResponse::bindemail() const {
  // @@protoc_insertion_point(field_get:micromsg.RegEquipmentResponse.BindEmail)
  return bindemail_.GetNoArena();
}
void RegEquipmentResponse::set_bindemail(const ::std::string& value) {
  set_has_bindemail();
  bindemail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.RegEquipmentResponse.BindEmail)
}
#if LANG_CXX11
void RegEquipmentResponse::set_bindemail(::std::string&& value) {
  set_has_bindemail();
  bindemail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.RegEquipmentResponse.BindEmail)
}
#endif
void RegEquipmentResponse::set_bindemail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bindemail();
  bindemail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.RegEquipmentResponse.BindEmail)
}
void RegEquipmentResponse::set_bindemail(const char* value, size_t size) {
  set_has_bindemail();
  bindemail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.RegEquipmentResponse.BindEmail)
}
::std::string* RegEquipmentResponse::mutable_bindemail() {
  set_has_bindemail();
  // @@protoc_insertion_point(field_mutable:micromsg.RegEquipmentResponse.BindEmail)
  return bindemail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegEquipmentResponse::release_bindemail() {
  // @@protoc_insertion_point(field_release:micromsg.RegEquipmentResponse.BindEmail)
  clear_has_bindemail();
  return bindemail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegEquipmentResponse::set_allocated_bindemail(::std::string* bindemail) {
  if (bindemail != NULL) {
    set_has_bindemail();
  } else {
    clear_has_bindemail();
  }
  bindemail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bindemail);
  // @@protoc_insertion_point(field_set_allocated:micromsg.RegEquipmentResponse.BindEmail)
}

// required uint32 PushMailStatus = 8;
bool RegEquipmentResponse::has_pushmailstatus() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void RegEquipmentResponse::set_has_pushmailstatus() {
  _has_bits_[0] |= 0x00010000u;
}
void RegEquipmentResponse::clear_has_pushmailstatus() {
  _has_bits_[0] &= ~0x00010000u;
}
void RegEquipmentResponse::clear_pushmailstatus() {
  pushmailstatus_ = 0u;
  clear_has_pushmailstatus();
}
::google::protobuf::uint32 RegEquipmentResponse::pushmailstatus() const {
  // @@protoc_insertion_point(field_get:micromsg.RegEquipmentResponse.PushMailStatus)
  return pushmailstatus_;
}
void RegEquipmentResponse::set_pushmailstatus(::google::protobuf::uint32 value) {
  set_has_pushmailstatus();
  pushmailstatus_ = value;
  // @@protoc_insertion_point(field_set:micromsg.RegEquipmentResponse.PushMailStatus)
}

// required uint32 SendCardBitFlag = 9;
bool RegEquipmentResponse::has_sendcardbitflag() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void RegEquipmentResponse::set_has_sendcardbitflag() {
  _has_bits_[0] |= 0x00020000u;
}
void RegEquipmentResponse::clear_has_sendcardbitflag() {
  _has_bits_[0] &= ~0x00020000u;
}
void RegEquipmentResponse::clear_sendcardbitflag() {
  sendcardbitflag_ = 0u;
  clear_has_sendcardbitflag();
}
::google::protobuf::uint32 RegEquipmentResponse::sendcardbitflag() const {
  // @@protoc_insertion_point(field_get:micromsg.RegEquipmentResponse.SendCardBitFlag)
  return sendcardbitflag_;
}
void RegEquipmentResponse::set_sendcardbitflag(::google::protobuf::uint32 value) {
  set_has_sendcardbitflag();
  sendcardbitflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.RegEquipmentResponse.SendCardBitFlag)
}

// optional string PushMailSettingTicket = 10;
bool RegEquipmentResponse::has_pushmailsettingticket() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RegEquipmentResponse::set_has_pushmailsettingticket() {
  _has_bits_[0] |= 0x00000020u;
}
void RegEquipmentResponse::clear_has_pushmailsettingticket() {
  _has_bits_[0] &= ~0x00000020u;
}
void RegEquipmentResponse::clear_pushmailsettingticket() {
  pushmailsettingticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pushmailsettingticket();
}
const ::std::string& RegEquipmentResponse::pushmailsettingticket() const {
  // @@protoc_insertion_point(field_get:micromsg.RegEquipmentResponse.PushMailSettingTicket)
  return pushmailsettingticket_.GetNoArena();
}
void RegEquipmentResponse::set_pushmailsettingticket(const ::std::string& value) {
  set_has_pushmailsettingticket();
  pushmailsettingticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.RegEquipmentResponse.PushMailSettingTicket)
}
#if LANG_CXX11
void RegEquipmentResponse::set_pushmailsettingticket(::std::string&& value) {
  set_has_pushmailsettingticket();
  pushmailsettingticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.RegEquipmentResponse.PushMailSettingTicket)
}
#endif
void RegEquipmentResponse::set_pushmailsettingticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pushmailsettingticket();
  pushmailsettingticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.RegEquipmentResponse.PushMailSettingTicket)
}
void RegEquipmentResponse::set_pushmailsettingticket(const char* value, size_t size) {
  set_has_pushmailsettingticket();
  pushmailsettingticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.RegEquipmentResponse.PushMailSettingTicket)
}
::std::string* RegEquipmentResponse::mutable_pushmailsettingticket() {
  set_has_pushmailsettingticket();
  // @@protoc_insertion_point(field_mutable:micromsg.RegEquipmentResponse.PushMailSettingTicket)
  return pushmailsettingticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegEquipmentResponse::release_pushmailsettingticket() {
  // @@protoc_insertion_point(field_release:micromsg.RegEquipmentResponse.PushMailSettingTicket)
  clear_has_pushmailsettingticket();
  return pushmailsettingticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegEquipmentResponse::set_allocated_pushmailsettingticket(::std::string* pushmailsettingticket) {
  if (pushmailsettingticket != NULL) {
    set_has_pushmailsettingticket();
  } else {
    clear_has_pushmailsettingticket();
  }
  pushmailsettingticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pushmailsettingticket);
  // @@protoc_insertion_point(field_set_allocated:micromsg.RegEquipmentResponse.PushMailSettingTicket)
}

// required .micromsg.BuiltinIPList BuiltinIPList = 14;
bool RegEquipmentResponse::has_builtiniplist() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void RegEquipmentResponse::set_has_builtiniplist() {
  _has_bits_[0] |= 0x00000800u;
}
void RegEquipmentResponse::clear_has_builtiniplist() {
  _has_bits_[0] &= ~0x00000800u;
}
void RegEquipmentResponse::clear_builtiniplist() {
  if (builtiniplist_ != NULL) builtiniplist_->::micromsg::BuiltinIPList::Clear();
  clear_has_builtiniplist();
}
const ::micromsg::BuiltinIPList& RegEquipmentResponse::builtiniplist() const {
  // @@protoc_insertion_point(field_get:micromsg.RegEquipmentResponse.BuiltinIPList)
  return builtiniplist_ != NULL ? *builtiniplist_
                         : *::micromsg::BuiltinIPList::internal_default_instance();
}
::micromsg::BuiltinIPList* RegEquipmentResponse::mutable_builtiniplist() {
  set_has_builtiniplist();
  if (builtiniplist_ == NULL) {
    builtiniplist_ = new ::micromsg::BuiltinIPList;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.RegEquipmentResponse.BuiltinIPList)
  return builtiniplist_;
}
::micromsg::BuiltinIPList* RegEquipmentResponse::release_builtiniplist() {
  // @@protoc_insertion_point(field_release:micromsg.RegEquipmentResponse.BuiltinIPList)
  clear_has_builtiniplist();
  ::micromsg::BuiltinIPList* temp = builtiniplist_;
  builtiniplist_ = NULL;
  return temp;
}
void RegEquipmentResponse::set_allocated_builtiniplist(::micromsg::BuiltinIPList* builtiniplist) {
  delete builtiniplist_;
  builtiniplist_ = builtiniplist;
  if (builtiniplist) {
    set_has_builtiniplist();
  } else {
    clear_has_builtiniplist();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.RegEquipmentResponse.BuiltinIPList)
}

// optional string FSURL = 15;
bool RegEquipmentResponse::has_fsurl() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RegEquipmentResponse::set_has_fsurl() {
  _has_bits_[0] |= 0x00000040u;
}
void RegEquipmentResponse::clear_has_fsurl() {
  _has_bits_[0] &= ~0x00000040u;
}
void RegEquipmentResponse::clear_fsurl() {
  fsurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fsurl();
}
const ::std::string& RegEquipmentResponse::fsurl() const {
  // @@protoc_insertion_point(field_get:micromsg.RegEquipmentResponse.FSURL)
  return fsurl_.GetNoArena();
}
void RegEquipmentResponse::set_fsurl(const ::std::string& value) {
  set_has_fsurl();
  fsurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.RegEquipmentResponse.FSURL)
}
#if LANG_CXX11
void RegEquipmentResponse::set_fsurl(::std::string&& value) {
  set_has_fsurl();
  fsurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.RegEquipmentResponse.FSURL)
}
#endif
void RegEquipmentResponse::set_fsurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fsurl();
  fsurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.RegEquipmentResponse.FSURL)
}
void RegEquipmentResponse::set_fsurl(const char* value, size_t size) {
  set_has_fsurl();
  fsurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.RegEquipmentResponse.FSURL)
}
::std::string* RegEquipmentResponse::mutable_fsurl() {
  set_has_fsurl();
  // @@protoc_insertion_point(field_mutable:micromsg.RegEquipmentResponse.FSURL)
  return fsurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegEquipmentResponse::release_fsurl() {
  // @@protoc_insertion_point(field_release:micromsg.RegEquipmentResponse.FSURL)
  clear_has_fsurl();
  return fsurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegEquipmentResponse::set_allocated_fsurl(::std::string* fsurl) {
  if (fsurl != NULL) {
    set_has_fsurl();
  } else {
    clear_has_fsurl();
  }
  fsurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fsurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.RegEquipmentResponse.FSURL)
}

// optional string UserName = 16;
bool RegEquipmentResponse::has_username() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void RegEquipmentResponse::set_has_username() {
  _has_bits_[0] |= 0x00000080u;
}
void RegEquipmentResponse::clear_has_username() {
  _has_bits_[0] &= ~0x00000080u;
}
void RegEquipmentResponse::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& RegEquipmentResponse::username() const {
  // @@protoc_insertion_point(field_get:micromsg.RegEquipmentResponse.UserName)
  return username_.GetNoArena();
}
void RegEquipmentResponse::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.RegEquipmentResponse.UserName)
}
#if LANG_CXX11
void RegEquipmentResponse::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.RegEquipmentResponse.UserName)
}
#endif
void RegEquipmentResponse::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.RegEquipmentResponse.UserName)
}
void RegEquipmentResponse::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.RegEquipmentResponse.UserName)
}
::std::string* RegEquipmentResponse::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.RegEquipmentResponse.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegEquipmentResponse::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.RegEquipmentResponse.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegEquipmentResponse::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.RegEquipmentResponse.UserName)
}

// required uint32 Status = 17;
bool RegEquipmentResponse::has_status() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void RegEquipmentResponse::set_has_status() {
  _has_bits_[0] |= 0x00040000u;
}
void RegEquipmentResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00040000u;
}
void RegEquipmentResponse::clear_status() {
  status_ = 0u;
  clear_has_status();
}
::google::protobuf::uint32 RegEquipmentResponse::status() const {
  // @@protoc_insertion_point(field_get:micromsg.RegEquipmentResponse.Status)
  return status_;
}
void RegEquipmentResponse::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:micromsg.RegEquipmentResponse.Status)
}

// required .micromsg.NetworkControl NetworkControl = 18;
bool RegEquipmentResponse::has_networkcontrol() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void RegEquipmentResponse::set_has_networkcontrol() {
  _has_bits_[0] |= 0x00001000u;
}
void RegEquipmentResponse::clear_has_networkcontrol() {
  _has_bits_[0] &= ~0x00001000u;
}
void RegEquipmentResponse::clear_networkcontrol() {
  if (networkcontrol_ != NULL) networkcontrol_->::micromsg::NetworkControl::Clear();
  clear_has_networkcontrol();
}
const ::micromsg::NetworkControl& RegEquipmentResponse::networkcontrol() const {
  // @@protoc_insertion_point(field_get:micromsg.RegEquipmentResponse.NetworkControl)
  return networkcontrol_ != NULL ? *networkcontrol_
                         : *::micromsg::NetworkControl::internal_default_instance();
}
::micromsg::NetworkControl* RegEquipmentResponse::mutable_networkcontrol() {
  set_has_networkcontrol();
  if (networkcontrol_ == NULL) {
    networkcontrol_ = new ::micromsg::NetworkControl;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.RegEquipmentResponse.NetworkControl)
  return networkcontrol_;
}
::micromsg::NetworkControl* RegEquipmentResponse::release_networkcontrol() {
  // @@protoc_insertion_point(field_release:micromsg.RegEquipmentResponse.NetworkControl)
  clear_has_networkcontrol();
  ::micromsg::NetworkControl* temp = networkcontrol_;
  networkcontrol_ = NULL;
  return temp;
}
void RegEquipmentResponse::set_allocated_networkcontrol(::micromsg::NetworkControl* networkcontrol) {
  delete networkcontrol_;
  networkcontrol_ = networkcontrol;
  if (networkcontrol) {
    set_has_networkcontrol();
  } else {
    clear_has_networkcontrol();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.RegEquipmentResponse.NetworkControl)
}

// required uint32 ReturnFlag = 19;
bool RegEquipmentResponse::has_returnflag() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void RegEquipmentResponse::set_has_returnflag() {
  _has_bits_[0] |= 0x00080000u;
}
void RegEquipmentResponse::clear_has_returnflag() {
  _has_bits_[0] &= ~0x00080000u;
}
void RegEquipmentResponse::clear_returnflag() {
  returnflag_ = 0u;
  clear_has_returnflag();
}
::google::protobuf::uint32 RegEquipmentResponse::returnflag() const {
  // @@protoc_insertion_point(field_get:micromsg.RegEquipmentResponse.ReturnFlag)
  return returnflag_;
}
void RegEquipmentResponse::set_returnflag(::google::protobuf::uint32 value) {
  set_has_returnflag();
  returnflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.RegEquipmentResponse.ReturnFlag)
}

// required uint32 RegType = 20;
bool RegEquipmentResponse::has_regtype() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void RegEquipmentResponse::set_has_regtype() {
  _has_bits_[0] |= 0x00100000u;
}
void RegEquipmentResponse::clear_has_regtype() {
  _has_bits_[0] &= ~0x00100000u;
}
void RegEquipmentResponse::clear_regtype() {
  regtype_ = 0u;
  clear_has_regtype();
}
::google::protobuf::uint32 RegEquipmentResponse::regtype() const {
  // @@protoc_insertion_point(field_get:micromsg.RegEquipmentResponse.RegType)
  return regtype_;
}
void RegEquipmentResponse::set_regtype(::google::protobuf::uint32 value) {
  set_has_regtype();
  regtype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.RegEquipmentResponse.RegType)
}

// optional string AuthKey = 21;
bool RegEquipmentResponse::has_authkey() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void RegEquipmentResponse::set_has_authkey() {
  _has_bits_[0] |= 0x00000100u;
}
void RegEquipmentResponse::clear_has_authkey() {
  _has_bits_[0] &= ~0x00000100u;
}
void RegEquipmentResponse::clear_authkey() {
  authkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_authkey();
}
const ::std::string& RegEquipmentResponse::authkey() const {
  // @@protoc_insertion_point(field_get:micromsg.RegEquipmentResponse.AuthKey)
  return authkey_.GetNoArena();
}
void RegEquipmentResponse::set_authkey(const ::std::string& value) {
  set_has_authkey();
  authkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.RegEquipmentResponse.AuthKey)
}
#if LANG_CXX11
void RegEquipmentResponse::set_authkey(::std::string&& value) {
  set_has_authkey();
  authkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.RegEquipmentResponse.AuthKey)
}
#endif
void RegEquipmentResponse::set_authkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_authkey();
  authkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.RegEquipmentResponse.AuthKey)
}
void RegEquipmentResponse::set_authkey(const char* value, size_t size) {
  set_has_authkey();
  authkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.RegEquipmentResponse.AuthKey)
}
::std::string* RegEquipmentResponse::mutable_authkey() {
  set_has_authkey();
  // @@protoc_insertion_point(field_mutable:micromsg.RegEquipmentResponse.AuthKey)
  return authkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegEquipmentResponse::release_authkey() {
  // @@protoc_insertion_point(field_release:micromsg.RegEquipmentResponse.AuthKey)
  clear_has_authkey();
  return authkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegEquipmentResponse::set_allocated_authkey(::std::string* authkey) {
  if (authkey != NULL) {
    set_has_authkey();
  } else {
    clear_has_authkey();
  }
  authkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), authkey);
  // @@protoc_insertion_point(field_set_allocated:micromsg.RegEquipmentResponse.AuthKey)
}

// required .micromsg.PluginKeyList PluginKeyList = 22;
bool RegEquipmentResponse::has_pluginkeylist() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void RegEquipmentResponse::set_has_pluginkeylist() {
  _has_bits_[0] |= 0x00002000u;
}
void RegEquipmentResponse::clear_has_pluginkeylist() {
  _has_bits_[0] &= ~0x00002000u;
}
void RegEquipmentResponse::clear_pluginkeylist() {
  if (pluginkeylist_ != NULL) pluginkeylist_->::micromsg::PluginKeyList::Clear();
  clear_has_pluginkeylist();
}
const ::micromsg::PluginKeyList& RegEquipmentResponse::pluginkeylist() const {
  // @@protoc_insertion_point(field_get:micromsg.RegEquipmentResponse.PluginKeyList)
  return pluginkeylist_ != NULL ? *pluginkeylist_
                         : *::micromsg::PluginKeyList::internal_default_instance();
}
::micromsg::PluginKeyList* RegEquipmentResponse::mutable_pluginkeylist() {
  set_has_pluginkeylist();
  if (pluginkeylist_ == NULL) {
    pluginkeylist_ = new ::micromsg::PluginKeyList;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.RegEquipmentResponse.PluginKeyList)
  return pluginkeylist_;
}
::micromsg::PluginKeyList* RegEquipmentResponse::release_pluginkeylist() {
  // @@protoc_insertion_point(field_release:micromsg.RegEquipmentResponse.PluginKeyList)
  clear_has_pluginkeylist();
  ::micromsg::PluginKeyList* temp = pluginkeylist_;
  pluginkeylist_ = NULL;
  return temp;
}
void RegEquipmentResponse::set_allocated_pluginkeylist(::micromsg::PluginKeyList* pluginkeylist) {
  delete pluginkeylist_;
  pluginkeylist_ = pluginkeylist;
  if (pluginkeylist) {
    set_has_pluginkeylist();
  } else {
    clear_has_pluginkeylist();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.RegEquipmentResponse.PluginKeyList)
}

// optional string Password = 23;
bool RegEquipmentResponse::has_password() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void RegEquipmentResponse::set_has_password() {
  _has_bits_[0] |= 0x00000200u;
}
void RegEquipmentResponse::clear_has_password() {
  _has_bits_[0] &= ~0x00000200u;
}
void RegEquipmentResponse::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
const ::std::string& RegEquipmentResponse::password() const {
  // @@protoc_insertion_point(field_get:micromsg.RegEquipmentResponse.Password)
  return password_.GetNoArena();
}
void RegEquipmentResponse::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.RegEquipmentResponse.Password)
}
#if LANG_CXX11
void RegEquipmentResponse::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.RegEquipmentResponse.Password)
}
#endif
void RegEquipmentResponse::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.RegEquipmentResponse.Password)
}
void RegEquipmentResponse::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.RegEquipmentResponse.Password)
}
::std::string* RegEquipmentResponse::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:micromsg.RegEquipmentResponse.Password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegEquipmentResponse::release_password() {
  // @@protoc_insertion_point(field_release:micromsg.RegEquipmentResponse.Password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegEquipmentResponse::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:micromsg.RegEquipmentResponse.Password)
}

// required uint32 ProfileFlag = 24;
bool RegEquipmentResponse::has_profileflag() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void RegEquipmentResponse::set_has_profileflag() {
  _has_bits_[0] |= 0x00200000u;
}
void RegEquipmentResponse::clear_has_profileflag() {
  _has_bits_[0] &= ~0x00200000u;
}
void RegEquipmentResponse::clear_profileflag() {
  profileflag_ = 0u;
  clear_has_profileflag();
}
::google::protobuf::uint32 RegEquipmentResponse::profileflag() const {
  // @@protoc_insertion_point(field_get:micromsg.RegEquipmentResponse.ProfileFlag)
  return profileflag_;
}
void RegEquipmentResponse::set_profileflag(::google::protobuf::uint32 value) {
  set_has_profileflag();
  profileflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.RegEquipmentResponse.ProfileFlag)
}

// required .micromsg.HostList NewHostList = 25;
bool RegEquipmentResponse::has_newhostlist() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void RegEquipmentResponse::set_has_newhostlist() {
  _has_bits_[0] |= 0x00004000u;
}
void RegEquipmentResponse::clear_has_newhostlist() {
  _has_bits_[0] &= ~0x00004000u;
}
void RegEquipmentResponse::clear_newhostlist() {
  if (newhostlist_ != NULL) newhostlist_->::micromsg::HostList::Clear();
  clear_has_newhostlist();
}
const ::micromsg::HostList& RegEquipmentResponse::newhostlist() const {
  // @@protoc_insertion_point(field_get:micromsg.RegEquipmentResponse.NewHostList)
  return newhostlist_ != NULL ? *newhostlist_
                         : *::micromsg::HostList::internal_default_instance();
}
::micromsg::HostList* RegEquipmentResponse::mutable_newhostlist() {
  set_has_newhostlist();
  if (newhostlist_ == NULL) {
    newhostlist_ = new ::micromsg::HostList;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.RegEquipmentResponse.NewHostList)
  return newhostlist_;
}
::micromsg::HostList* RegEquipmentResponse::release_newhostlist() {
  // @@protoc_insertion_point(field_release:micromsg.RegEquipmentResponse.NewHostList)
  clear_has_newhostlist();
  ::micromsg::HostList* temp = newhostlist_;
  newhostlist_ = NULL;
  return temp;
}
void RegEquipmentResponse::set_allocated_newhostlist(::micromsg::HostList* newhostlist) {
  delete newhostlist_;
  newhostlist_ = newhostlist;
  if (newhostlist) {
    set_has_newhostlist();
  } else {
    clear_has_newhostlist();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.RegEquipmentResponse.NewHostList)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResetEquipmentRequest::kBaseRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResetEquipmentRequest::ResetEquipmentRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ResetEquipmentRequest)
}
ResetEquipmentRequest::ResetEquipmentRequest(const ResetEquipmentRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.ResetEquipmentRequest)
}

void ResetEquipmentRequest::SharedCtor() {
  _cached_size_ = 0;
  baserequest_ = NULL;
}

ResetEquipmentRequest::~ResetEquipmentRequest() {
  // @@protoc_insertion_point(destructor:micromsg.ResetEquipmentRequest)
  SharedDtor();
}

void ResetEquipmentRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void ResetEquipmentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetEquipmentRequest::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResetEquipmentRequest& ResetEquipmentRequest::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResetEquipmentRequest* ResetEquipmentRequest::New(::google::protobuf::Arena* arena) const {
  ResetEquipmentRequest* n = new ResetEquipmentRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResetEquipmentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ResetEquipmentRequest)
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResetEquipmentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ResetEquipmentRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ResetEquipmentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ResetEquipmentRequest)
  return false;
#undef DO_
}

void ResetEquipmentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ResetEquipmentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ResetEquipmentRequest)
}

::google::protobuf::uint8* ResetEquipmentRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ResetEquipmentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ResetEquipmentRequest)
  return target;
}

size_t ResetEquipmentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ResetEquipmentRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetEquipmentRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ResetEquipmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ResetEquipmentRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResetEquipmentRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ResetEquipmentRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ResetEquipmentRequest)
    MergeFrom(*source);
  }
}

void ResetEquipmentRequest::MergeFrom(const ResetEquipmentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ResetEquipmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baserequest()) {
    mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
  }
}

void ResetEquipmentRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ResetEquipmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetEquipmentRequest::CopyFrom(const ResetEquipmentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ResetEquipmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetEquipmentRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void ResetEquipmentRequest::Swap(ResetEquipmentRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResetEquipmentRequest::InternalSwap(ResetEquipmentRequest* other) {
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResetEquipmentRequest::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResetEquipmentRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool ResetEquipmentRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResetEquipmentRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void ResetEquipmentRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResetEquipmentRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& ResetEquipmentRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.ResetEquipmentRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* ResetEquipmentRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ResetEquipmentRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* ResetEquipmentRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.ResetEquipmentRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void ResetEquipmentRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ResetEquipmentRequest.BaseRequest)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResetEquipmentResponse::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResetEquipmentResponse::ResetEquipmentResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ResetEquipmentResponse)
}
ResetEquipmentResponse::ResetEquipmentResponse(const ResetEquipmentResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.ResetEquipmentResponse)
}

void ResetEquipmentResponse::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

ResetEquipmentResponse::~ResetEquipmentResponse() {
  // @@protoc_insertion_point(destructor:micromsg.ResetEquipmentResponse)
  SharedDtor();
}

void ResetEquipmentResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void ResetEquipmentResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetEquipmentResponse::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResetEquipmentResponse& ResetEquipmentResponse::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResetEquipmentResponse* ResetEquipmentResponse::New(::google::protobuf::Arena* arena) const {
  ResetEquipmentResponse* n = new ResetEquipmentResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResetEquipmentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ResetEquipmentResponse)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResetEquipmentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ResetEquipmentResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ResetEquipmentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ResetEquipmentResponse)
  return false;
#undef DO_
}

void ResetEquipmentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ResetEquipmentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ResetEquipmentResponse)
}

::google::protobuf::uint8* ResetEquipmentResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ResetEquipmentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ResetEquipmentResponse)
  return target;
}

size_t ResetEquipmentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ResetEquipmentResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetEquipmentResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ResetEquipmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ResetEquipmentResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResetEquipmentResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ResetEquipmentResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ResetEquipmentResponse)
    MergeFrom(*source);
  }
}

void ResetEquipmentResponse::MergeFrom(const ResetEquipmentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ResetEquipmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void ResetEquipmentResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ResetEquipmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetEquipmentResponse::CopyFrom(const ResetEquipmentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ResetEquipmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetEquipmentResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void ResetEquipmentResponse::Swap(ResetEquipmentResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResetEquipmentResponse::InternalSwap(ResetEquipmentResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResetEquipmentResponse::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResetEquipmentResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool ResetEquipmentResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResetEquipmentResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void ResetEquipmentResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResetEquipmentResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& ResetEquipmentResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.ResetEquipmentResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* ResetEquipmentResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ResetEquipmentResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* ResetEquipmentResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.ResetEquipmentResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void ResetEquipmentResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ResetEquipmentResponse.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetPwdRequest::kBaseRequestFieldNumber;
const int SetPwdRequest::kPasswordFieldNumber;
const int SetPwdRequest::kTicketFieldNumber;
const int SetPwdRequest::kAutoAuthKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetPwdRequest::SetPwdRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SetPwdRequest)
}
SetPwdRequest::SetPwdRequest(const SetPwdRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ticket()) {
    ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_autoauthkey()) {
    autoauthkey_ = new ::micromsg::SKBuiltinBuffer_t(*from.autoauthkey_);
  } else {
    autoauthkey_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.SetPwdRequest)
}

void SetPwdRequest::SharedCtor() {
  _cached_size_ = 0;
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&autoauthkey_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(autoauthkey_));
}

SetPwdRequest::~SetPwdRequest() {
  // @@protoc_insertion_point(destructor:micromsg.SetPwdRequest)
  SharedDtor();
}

void SetPwdRequest::SharedDtor() {
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete autoauthkey_;
  }
}

void SetPwdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetPwdRequest::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetPwdRequest& SetPwdRequest::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetPwdRequest* SetPwdRequest::New(::google::protobuf::Arena* arena) const {
  SetPwdRequest* n = new SetPwdRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetPwdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SetPwdRequest)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_password()) {
      GOOGLE_DCHECK(!password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*password_.UnsafeRawStringPointer())->clear();
    }
    if (has_ticket()) {
      GOOGLE_DCHECK(!ticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ticket_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_autoauthkey()) {
      GOOGLE_DCHECK(autoauthkey_ != NULL);
      autoauthkey_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SetPwdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SetPwdRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Password = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SetPwdRequest.Password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Ticket = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ticket().data(), this->ticket().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SetPwdRequest.Ticket");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t AutoAuthKey = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_autoauthkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SetPwdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SetPwdRequest)
  return false;
#undef DO_
}

void SetPwdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SetPwdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string Password = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SetPwdRequest.Password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // optional string Ticket = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ticket().data(), this->ticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SetPwdRequest.Ticket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ticket(), output);
  }

  // optional .micromsg.SKBuiltinBuffer_t AutoAuthKey = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->autoauthkey_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SetPwdRequest)
}

::google::protobuf::uint8* SetPwdRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SetPwdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string Password = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SetPwdRequest.Password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // optional string Ticket = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ticket().data(), this->ticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SetPwdRequest.Ticket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ticket(), target);
  }

  // optional .micromsg.SKBuiltinBuffer_t AutoAuthKey = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->autoauthkey_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SetPwdRequest)
  return target;
}

size_t SetPwdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SetPwdRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string Password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string Ticket = 3;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ticket());
    }

  }
  // optional .micromsg.SKBuiltinBuffer_t AutoAuthKey = 4;
  if (has_autoauthkey()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->autoauthkey_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetPwdRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SetPwdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPwdRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetPwdRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SetPwdRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SetPwdRequest)
    MergeFrom(*source);
  }
}

void SetPwdRequest::MergeFrom(const SetPwdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SetPwdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_ticket();
      ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_autoauthkey()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.autoauthkey());
    }
  }
}

void SetPwdRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SetPwdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPwdRequest::CopyFrom(const SetPwdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SetPwdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPwdRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_autoauthkey()) {
    if (!this->autoauthkey_->IsInitialized()) return false;
  }
  return true;
}

void SetPwdRequest::Swap(SetPwdRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetPwdRequest::InternalSwap(SetPwdRequest* other) {
  password_.Swap(&other->password_);
  ticket_.Swap(&other->ticket_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(autoauthkey_, other->autoauthkey_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetPwdRequest::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetPwdRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool SetPwdRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SetPwdRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
void SetPwdRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
void SetPwdRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& SetPwdRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.SetPwdRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* SetPwdRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SetPwdRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* SetPwdRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.SetPwdRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void SetPwdRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SetPwdRequest.BaseRequest)
}

// optional string Password = 2;
bool SetPwdRequest::has_password() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SetPwdRequest::set_has_password() {
  _has_bits_[0] |= 0x00000001u;
}
void SetPwdRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000001u;
}
void SetPwdRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
const ::std::string& SetPwdRequest::password() const {
  // @@protoc_insertion_point(field_get:micromsg.SetPwdRequest.Password)
  return password_.GetNoArena();
}
void SetPwdRequest::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SetPwdRequest.Password)
}
#if LANG_CXX11
void SetPwdRequest::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SetPwdRequest.Password)
}
#endif
void SetPwdRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SetPwdRequest.Password)
}
void SetPwdRequest::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SetPwdRequest.Password)
}
::std::string* SetPwdRequest::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:micromsg.SetPwdRequest.Password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetPwdRequest::release_password() {
  // @@protoc_insertion_point(field_release:micromsg.SetPwdRequest.Password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetPwdRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SetPwdRequest.Password)
}

// optional string Ticket = 3;
bool SetPwdRequest::has_ticket() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SetPwdRequest::set_has_ticket() {
  _has_bits_[0] |= 0x00000002u;
}
void SetPwdRequest::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000002u;
}
void SetPwdRequest::clear_ticket() {
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ticket();
}
const ::std::string& SetPwdRequest::ticket() const {
  // @@protoc_insertion_point(field_get:micromsg.SetPwdRequest.Ticket)
  return ticket_.GetNoArena();
}
void SetPwdRequest::set_ticket(const ::std::string& value) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SetPwdRequest.Ticket)
}
#if LANG_CXX11
void SetPwdRequest::set_ticket(::std::string&& value) {
  set_has_ticket();
  ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SetPwdRequest.Ticket)
}
#endif
void SetPwdRequest::set_ticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SetPwdRequest.Ticket)
}
void SetPwdRequest::set_ticket(const char* value, size_t size) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SetPwdRequest.Ticket)
}
::std::string* SetPwdRequest::mutable_ticket() {
  set_has_ticket();
  // @@protoc_insertion_point(field_mutable:micromsg.SetPwdRequest.Ticket)
  return ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetPwdRequest::release_ticket() {
  // @@protoc_insertion_point(field_release:micromsg.SetPwdRequest.Ticket)
  clear_has_ticket();
  return ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetPwdRequest::set_allocated_ticket(::std::string* ticket) {
  if (ticket != NULL) {
    set_has_ticket();
  } else {
    clear_has_ticket();
  }
  ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticket);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SetPwdRequest.Ticket)
}

// optional .micromsg.SKBuiltinBuffer_t AutoAuthKey = 4;
bool SetPwdRequest::has_autoauthkey() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SetPwdRequest::set_has_autoauthkey() {
  _has_bits_[0] |= 0x00000008u;
}
void SetPwdRequest::clear_has_autoauthkey() {
  _has_bits_[0] &= ~0x00000008u;
}
void SetPwdRequest::clear_autoauthkey() {
  if (autoauthkey_ != NULL) autoauthkey_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_autoauthkey();
}
const ::micromsg::SKBuiltinBuffer_t& SetPwdRequest::autoauthkey() const {
  // @@protoc_insertion_point(field_get:micromsg.SetPwdRequest.AutoAuthKey)
  return autoauthkey_ != NULL ? *autoauthkey_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* SetPwdRequest::mutable_autoauthkey() {
  set_has_autoauthkey();
  if (autoauthkey_ == NULL) {
    autoauthkey_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SetPwdRequest.AutoAuthKey)
  return autoauthkey_;
}
::micromsg::SKBuiltinBuffer_t* SetPwdRequest::release_autoauthkey() {
  // @@protoc_insertion_point(field_release:micromsg.SetPwdRequest.AutoAuthKey)
  clear_has_autoauthkey();
  ::micromsg::SKBuiltinBuffer_t* temp = autoauthkey_;
  autoauthkey_ = NULL;
  return temp;
}
void SetPwdRequest::set_allocated_autoauthkey(::micromsg::SKBuiltinBuffer_t* autoauthkey) {
  delete autoauthkey_;
  autoauthkey_ = autoauthkey;
  if (autoauthkey) {
    set_has_autoauthkey();
  } else {
    clear_has_autoauthkey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SetPwdRequest.AutoAuthKey)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetPwdResponse::kBaseResponseFieldNumber;
const int SetPwdResponse::kAutoAuthKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetPwdResponse::SetPwdResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SetPwdResponse)
}
SetPwdResponse::SetPwdResponse(const SetPwdResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_autoauthkey()) {
    autoauthkey_ = new ::micromsg::SKBuiltinBuffer_t(*from.autoauthkey_);
  } else {
    autoauthkey_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.SetPwdResponse)
}

void SetPwdResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&autoauthkey_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(autoauthkey_));
}

SetPwdResponse::~SetPwdResponse() {
  // @@protoc_insertion_point(destructor:micromsg.SetPwdResponse)
  SharedDtor();
}

void SetPwdResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete autoauthkey_;
  }
}

void SetPwdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetPwdResponse::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetPwdResponse& SetPwdResponse::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetPwdResponse* SetPwdResponse::New(::google::protobuf::Arena* arena) const {
  SetPwdResponse* n = new SetPwdResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetPwdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SetPwdResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_autoauthkey()) {
      GOOGLE_DCHECK(autoauthkey_ != NULL);
      autoauthkey_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SetPwdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SetPwdResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t AutoAuthKey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_autoauthkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SetPwdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SetPwdResponse)
  return false;
#undef DO_
}

void SetPwdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SetPwdResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional .micromsg.SKBuiltinBuffer_t AutoAuthKey = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->autoauthkey_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SetPwdResponse)
}

::google::protobuf::uint8* SetPwdResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SetPwdResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional .micromsg.SKBuiltinBuffer_t AutoAuthKey = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->autoauthkey_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SetPwdResponse)
  return target;
}

size_t SetPwdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SetPwdResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  // optional .micromsg.SKBuiltinBuffer_t AutoAuthKey = 2;
  if (has_autoauthkey()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->autoauthkey_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetPwdResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SetPwdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPwdResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetPwdResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SetPwdResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SetPwdResponse)
    MergeFrom(*source);
  }
}

void SetPwdResponse::MergeFrom(const SetPwdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SetPwdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_autoauthkey()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.autoauthkey());
    }
  }
}

void SetPwdResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SetPwdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPwdResponse::CopyFrom(const SetPwdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SetPwdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPwdResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_autoauthkey()) {
    if (!this->autoauthkey_->IsInitialized()) return false;
  }
  return true;
}

void SetPwdResponse::Swap(SetPwdResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetPwdResponse::InternalSwap(SetPwdResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(autoauthkey_, other->autoauthkey_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetPwdResponse::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetPwdResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool SetPwdResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SetPwdResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void SetPwdResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void SetPwdResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& SetPwdResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.SetPwdResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* SetPwdResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SetPwdResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* SetPwdResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.SetPwdResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void SetPwdResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SetPwdResponse.BaseResponse)
}

// optional .micromsg.SKBuiltinBuffer_t AutoAuthKey = 2;
bool SetPwdResponse::has_autoauthkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SetPwdResponse::set_has_autoauthkey() {
  _has_bits_[0] |= 0x00000002u;
}
void SetPwdResponse::clear_has_autoauthkey() {
  _has_bits_[0] &= ~0x00000002u;
}
void SetPwdResponse::clear_autoauthkey() {
  if (autoauthkey_ != NULL) autoauthkey_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_autoauthkey();
}
const ::micromsg::SKBuiltinBuffer_t& SetPwdResponse::autoauthkey() const {
  // @@protoc_insertion_point(field_get:micromsg.SetPwdResponse.AutoAuthKey)
  return autoauthkey_ != NULL ? *autoauthkey_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* SetPwdResponse::mutable_autoauthkey() {
  set_has_autoauthkey();
  if (autoauthkey_ == NULL) {
    autoauthkey_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SetPwdResponse.AutoAuthKey)
  return autoauthkey_;
}
::micromsg::SKBuiltinBuffer_t* SetPwdResponse::release_autoauthkey() {
  // @@protoc_insertion_point(field_release:micromsg.SetPwdResponse.AutoAuthKey)
  clear_has_autoauthkey();
  ::micromsg::SKBuiltinBuffer_t* temp = autoauthkey_;
  autoauthkey_ = NULL;
  return temp;
}
void SetPwdResponse::set_allocated_autoauthkey(::micromsg::SKBuiltinBuffer_t* autoauthkey) {
  delete autoauthkey_;
  autoauthkey_ = autoauthkey;
  if (autoauthkey) {
    set_has_autoauthkey();
  } else {
    clear_has_autoauthkey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SetPwdResponse.AutoAuthKey)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryHasPswdRequest::kBaseRequestFieldNumber;
const int QueryHasPswdRequest::kSceneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryHasPswdRequest::QueryHasPswdRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.QueryHasPswdRequest)
}
QueryHasPswdRequest::QueryHasPswdRequest(const QueryHasPswdRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  scene_ = from.scene_;
  // @@protoc_insertion_point(copy_constructor:micromsg.QueryHasPswdRequest)
}

void QueryHasPswdRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&scene_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(scene_));
}

QueryHasPswdRequest::~QueryHasPswdRequest() {
  // @@protoc_insertion_point(destructor:micromsg.QueryHasPswdRequest)
  SharedDtor();
}

void QueryHasPswdRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void QueryHasPswdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryHasPswdRequest::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryHasPswdRequest& QueryHasPswdRequest::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

QueryHasPswdRequest* QueryHasPswdRequest::New(::google::protobuf::Arena* arena) const {
  QueryHasPswdRequest* n = new QueryHasPswdRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryHasPswdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.QueryHasPswdRequest)
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  scene_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QueryHasPswdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.QueryHasPswdRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Scene = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_scene();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.QueryHasPswdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.QueryHasPswdRequest)
  return false;
#undef DO_
}

void QueryHasPswdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.QueryHasPswdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required int32 Scene = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->scene(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.QueryHasPswdRequest)
}

::google::protobuf::uint8* QueryHasPswdRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.QueryHasPswdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required int32 Scene = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->scene(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.QueryHasPswdRequest)
  return target;
}

size_t QueryHasPswdRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.QueryHasPswdRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_scene()) {
    // required int32 Scene = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->scene());
  }

  return total_size;
}
size_t QueryHasPswdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.QueryHasPswdRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required int32 Scene = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->scene());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryHasPswdRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.QueryHasPswdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryHasPswdRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryHasPswdRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.QueryHasPswdRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.QueryHasPswdRequest)
    MergeFrom(*source);
  }
}

void QueryHasPswdRequest::MergeFrom(const QueryHasPswdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.QueryHasPswdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      scene_ = from.scene_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QueryHasPswdRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.QueryHasPswdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryHasPswdRequest::CopyFrom(const QueryHasPswdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.QueryHasPswdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryHasPswdRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void QueryHasPswdRequest::Swap(QueryHasPswdRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryHasPswdRequest::InternalSwap(QueryHasPswdRequest* other) {
  std::swap(baserequest_, other->baserequest_);
  std::swap(scene_, other->scene_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryHasPswdRequest::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryHasPswdRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool QueryHasPswdRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QueryHasPswdRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void QueryHasPswdRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void QueryHasPswdRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& QueryHasPswdRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.QueryHasPswdRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* QueryHasPswdRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.QueryHasPswdRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* QueryHasPswdRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.QueryHasPswdRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void QueryHasPswdRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.QueryHasPswdRequest.BaseRequest)
}

// required int32 Scene = 2;
bool QueryHasPswdRequest::has_scene() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QueryHasPswdRequest::set_has_scene() {
  _has_bits_[0] |= 0x00000002u;
}
void QueryHasPswdRequest::clear_has_scene() {
  _has_bits_[0] &= ~0x00000002u;
}
void QueryHasPswdRequest::clear_scene() {
  scene_ = 0;
  clear_has_scene();
}
::google::protobuf::int32 QueryHasPswdRequest::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.QueryHasPswdRequest.Scene)
  return scene_;
}
void QueryHasPswdRequest::set_scene(::google::protobuf::int32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.QueryHasPswdRequest.Scene)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryHasPswdResponse::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryHasPswdResponse::QueryHasPswdResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.QueryHasPswdResponse)
}
QueryHasPswdResponse::QueryHasPswdResponse(const QueryHasPswdResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.QueryHasPswdResponse)
}

void QueryHasPswdResponse::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

QueryHasPswdResponse::~QueryHasPswdResponse() {
  // @@protoc_insertion_point(destructor:micromsg.QueryHasPswdResponse)
  SharedDtor();
}

void QueryHasPswdResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void QueryHasPswdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryHasPswdResponse::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryHasPswdResponse& QueryHasPswdResponse::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

QueryHasPswdResponse* QueryHasPswdResponse::New(::google::protobuf::Arena* arena) const {
  QueryHasPswdResponse* n = new QueryHasPswdResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryHasPswdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.QueryHasPswdResponse)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QueryHasPswdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.QueryHasPswdResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.QueryHasPswdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.QueryHasPswdResponse)
  return false;
#undef DO_
}

void QueryHasPswdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.QueryHasPswdResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.QueryHasPswdResponse)
}

::google::protobuf::uint8* QueryHasPswdResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.QueryHasPswdResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.QueryHasPswdResponse)
  return target;
}

size_t QueryHasPswdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.QueryHasPswdResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryHasPswdResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.QueryHasPswdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryHasPswdResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryHasPswdResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.QueryHasPswdResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.QueryHasPswdResponse)
    MergeFrom(*source);
  }
}

void QueryHasPswdResponse::MergeFrom(const QueryHasPswdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.QueryHasPswdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void QueryHasPswdResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.QueryHasPswdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryHasPswdResponse::CopyFrom(const QueryHasPswdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.QueryHasPswdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryHasPswdResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void QueryHasPswdResponse::Swap(QueryHasPswdResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryHasPswdResponse::InternalSwap(QueryHasPswdResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryHasPswdResponse::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryHasPswdResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool QueryHasPswdResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QueryHasPswdResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void QueryHasPswdResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void QueryHasPswdResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& QueryHasPswdResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.QueryHasPswdResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* QueryHasPswdResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.QueryHasPswdResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* QueryHasPswdResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.QueryHasPswdResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void QueryHasPswdResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.QueryHasPswdResponse.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VerifyPswdRequest::kBaseRequestFieldNumber;
const int VerifyPswdRequest::kOpCodeFieldNumber;
const int VerifyPswdRequest::kPwd1FieldNumber;
const int VerifyPswdRequest::kPwd2FieldNumber;
const int VerifyPswdRequest::kImgSidFieldNumber;
const int VerifyPswdRequest::kImgCodeFieldNumber;
const int VerifyPswdRequest::kImgEncryptKeyFieldNumber;
const int VerifyPswdRequest::kKSidFieldNumber;
const int VerifyPswdRequest::kScenceFieldNumber;
const int VerifyPswdRequest::kWTLoginReqBuffFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VerifyPswdRequest::VerifyPswdRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VerifyPswdRequest)
}
VerifyPswdRequest::VerifyPswdRequest(const VerifyPswdRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pwd1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pwd1()) {
    pwd1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd1_);
  }
  pwd2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pwd2()) {
    pwd2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd2_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_imgsid()) {
    imgsid_ = new ::micromsg::SKBuiltinString_t(*from.imgsid_);
  } else {
    imgsid_ = NULL;
  }
  if (from.has_imgcode()) {
    imgcode_ = new ::micromsg::SKBuiltinString_t(*from.imgcode_);
  } else {
    imgcode_ = NULL;
  }
  if (from.has_imgencryptkey()) {
    imgencryptkey_ = new ::micromsg::SKBuiltinString_t(*from.imgencryptkey_);
  } else {
    imgencryptkey_ = NULL;
  }
  if (from.has_ksid()) {
    ksid_ = new ::micromsg::SKBuiltinBuffer_t(*from.ksid_);
  } else {
    ksid_ = NULL;
  }
  if (from.has_wtloginreqbuff()) {
    wtloginreqbuff_ = new ::micromsg::SKBuiltinBuffer_t(*from.wtloginreqbuff_);
  } else {
    wtloginreqbuff_ = NULL;
  }
  ::memcpy(&opcode_, &from.opcode_,
    reinterpret_cast<char*>(&scence_) -
    reinterpret_cast<char*>(&opcode_) + sizeof(scence_));
  // @@protoc_insertion_point(copy_constructor:micromsg.VerifyPswdRequest)
}

void VerifyPswdRequest::SharedCtor() {
  _cached_size_ = 0;
  pwd1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&scence_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(scence_));
}

VerifyPswdRequest::~VerifyPswdRequest() {
  // @@protoc_insertion_point(destructor:micromsg.VerifyPswdRequest)
  SharedDtor();
}

void VerifyPswdRequest::SharedDtor() {
  pwd1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete imgsid_;
  }
  if (this != internal_default_instance()) {
    delete imgcode_;
  }
  if (this != internal_default_instance()) {
    delete imgencryptkey_;
  }
  if (this != internal_default_instance()) {
    delete ksid_;
  }
  if (this != internal_default_instance()) {
    delete wtloginreqbuff_;
  }
}

void VerifyPswdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VerifyPswdRequest::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VerifyPswdRequest& VerifyPswdRequest::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

VerifyPswdRequest* VerifyPswdRequest::New(::google::protobuf::Arena* arena) const {
  VerifyPswdRequest* n = new VerifyPswdRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VerifyPswdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VerifyPswdRequest)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_pwd1()) {
      GOOGLE_DCHECK(!pwd1_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pwd1_.UnsafeRawStringPointer())->clear();
    }
    if (has_pwd2()) {
      GOOGLE_DCHECK(!pwd2_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pwd2_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_imgsid()) {
      GOOGLE_DCHECK(imgsid_ != NULL);
      imgsid_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_imgcode()) {
      GOOGLE_DCHECK(imgcode_ != NULL);
      imgcode_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_imgencryptkey()) {
      GOOGLE_DCHECK(imgencryptkey_ != NULL);
      imgencryptkey_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_ksid()) {
      GOOGLE_DCHECK(ksid_ != NULL);
      ksid_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_wtloginreqbuff()) {
      GOOGLE_DCHECK(wtloginreqbuff_ != NULL);
      wtloginreqbuff_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&opcode_, 0, reinterpret_cast<char*>(&scence_) -
      reinterpret_cast<char*>(&opcode_) + sizeof(scence_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VerifyPswdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VerifyPswdRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 OpCode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_opcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Pwd1 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pwd1().data(), this->pwd1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.VerifyPswdRequest.Pwd1");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Pwd2 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pwd2().data(), this->pwd2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.VerifyPswdRequest.Pwd2");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinString_t ImgSid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imgsid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinString_t ImgCode = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imgcode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinString_t ImgEncryptKey = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imgencryptkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t KSid = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ksid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Scence = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_scence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t WTLoginReqBuff = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wtloginreqbuff()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VerifyPswdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VerifyPswdRequest)
  return false;
#undef DO_
}

void VerifyPswdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VerifyPswdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 OpCode = 2;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->opcode(), output);
  }

  // optional string Pwd1 = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd1().data(), this->pwd1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VerifyPswdRequest.Pwd1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pwd1(), output);
  }

  // optional string Pwd2 = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd2().data(), this->pwd2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VerifyPswdRequest.Pwd2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->pwd2(), output);
  }

  // optional .micromsg.SKBuiltinString_t ImgSid = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->imgsid_, output);
  }

  // optional .micromsg.SKBuiltinString_t ImgCode = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->imgcode_, output);
  }

  // optional .micromsg.SKBuiltinString_t ImgEncryptKey = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->imgencryptkey_, output);
  }

  // optional .micromsg.SKBuiltinBuffer_t KSid = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->ksid_, output);
  }

  // optional uint32 Scence = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->scence(), output);
  }

  // optional .micromsg.SKBuiltinBuffer_t WTLoginReqBuff = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->wtloginreqbuff_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VerifyPswdRequest)
}

::google::protobuf::uint8* VerifyPswdRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VerifyPswdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 OpCode = 2;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->opcode(), target);
  }

  // optional string Pwd1 = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd1().data(), this->pwd1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VerifyPswdRequest.Pwd1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pwd1(), target);
  }

  // optional string Pwd2 = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd2().data(), this->pwd2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VerifyPswdRequest.Pwd2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pwd2(), target);
  }

  // optional .micromsg.SKBuiltinString_t ImgSid = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->imgsid_, deterministic, target);
  }

  // optional .micromsg.SKBuiltinString_t ImgCode = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->imgcode_, deterministic, target);
  }

  // optional .micromsg.SKBuiltinString_t ImgEncryptKey = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->imgencryptkey_, deterministic, target);
  }

  // optional .micromsg.SKBuiltinBuffer_t KSid = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->ksid_, deterministic, target);
  }

  // optional uint32 Scence = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->scence(), target);
  }

  // optional .micromsg.SKBuiltinBuffer_t WTLoginReqBuff = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->wtloginreqbuff_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VerifyPswdRequest)
  return target;
}

size_t VerifyPswdRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.VerifyPswdRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_opcode()) {
    // required uint32 OpCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());
  }

  return total_size;
}
size_t VerifyPswdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VerifyPswdRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000104) ^ 0x00000104) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 OpCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string Pwd1 = 3;
    if (has_pwd1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd1());
    }

    // optional string Pwd2 = 4;
    if (has_pwd2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd2());
    }

  }
  if (_has_bits_[0 / 32] & 248u) {
    // optional .micromsg.SKBuiltinString_t ImgSid = 5;
    if (has_imgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->imgsid_);
    }

    // optional .micromsg.SKBuiltinString_t ImgCode = 6;
    if (has_imgcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->imgcode_);
    }

    // optional .micromsg.SKBuiltinString_t ImgEncryptKey = 7;
    if (has_imgencryptkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->imgencryptkey_);
    }

    // optional .micromsg.SKBuiltinBuffer_t KSid = 8;
    if (has_ksid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ksid_);
    }

    // optional .micromsg.SKBuiltinBuffer_t WTLoginReqBuff = 10;
    if (has_wtloginreqbuff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->wtloginreqbuff_);
    }

  }
  // optional uint32 Scence = 9;
  if (has_scence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scence());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerifyPswdRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VerifyPswdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const VerifyPswdRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VerifyPswdRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VerifyPswdRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VerifyPswdRequest)
    MergeFrom(*source);
  }
}

void VerifyPswdRequest::MergeFrom(const VerifyPswdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VerifyPswdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_pwd1();
      pwd1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd1_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_pwd2();
      pwd2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd2_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_imgsid()->::micromsg::SKBuiltinString_t::MergeFrom(from.imgsid());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_imgcode()->::micromsg::SKBuiltinString_t::MergeFrom(from.imgcode());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_imgencryptkey()->::micromsg::SKBuiltinString_t::MergeFrom(from.imgencryptkey());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_ksid()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.ksid());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_wtloginreqbuff()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.wtloginreqbuff());
    }
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      opcode_ = from.opcode_;
    }
    if (cached_has_bits & 0x00000200u) {
      scence_ = from.scence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VerifyPswdRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VerifyPswdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyPswdRequest::CopyFrom(const VerifyPswdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VerifyPswdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyPswdRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000104) != 0x00000104) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_ksid()) {
    if (!this->ksid_->IsInitialized()) return false;
  }
  if (has_wtloginreqbuff()) {
    if (!this->wtloginreqbuff_->IsInitialized()) return false;
  }
  return true;
}

void VerifyPswdRequest::Swap(VerifyPswdRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VerifyPswdRequest::InternalSwap(VerifyPswdRequest* other) {
  pwd1_.Swap(&other->pwd1_);
  pwd2_.Swap(&other->pwd2_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(imgsid_, other->imgsid_);
  std::swap(imgcode_, other->imgcode_);
  std::swap(imgencryptkey_, other->imgencryptkey_);
  std::swap(ksid_, other->ksid_);
  std::swap(wtloginreqbuff_, other->wtloginreqbuff_);
  std::swap(opcode_, other->opcode_);
  std::swap(scence_, other->scence_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VerifyPswdRequest::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VerifyPswdRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool VerifyPswdRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VerifyPswdRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
void VerifyPswdRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
void VerifyPswdRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& VerifyPswdRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPswdRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* VerifyPswdRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyPswdRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* VerifyPswdRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyPswdRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void VerifyPswdRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyPswdRequest.BaseRequest)
}

// required uint32 OpCode = 2;
bool VerifyPswdRequest::has_opcode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void VerifyPswdRequest::set_has_opcode() {
  _has_bits_[0] |= 0x00000100u;
}
void VerifyPswdRequest::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000100u;
}
void VerifyPswdRequest::clear_opcode() {
  opcode_ = 0u;
  clear_has_opcode();
}
::google::protobuf::uint32 VerifyPswdRequest::opcode() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPswdRequest.OpCode)
  return opcode_;
}
void VerifyPswdRequest::set_opcode(::google::protobuf::uint32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VerifyPswdRequest.OpCode)
}

// optional string Pwd1 = 3;
bool VerifyPswdRequest::has_pwd1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VerifyPswdRequest::set_has_pwd1() {
  _has_bits_[0] |= 0x00000001u;
}
void VerifyPswdRequest::clear_has_pwd1() {
  _has_bits_[0] &= ~0x00000001u;
}
void VerifyPswdRequest::clear_pwd1() {
  pwd1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pwd1();
}
const ::std::string& VerifyPswdRequest::pwd1() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPswdRequest.Pwd1)
  return pwd1_.GetNoArena();
}
void VerifyPswdRequest::set_pwd1(const ::std::string& value) {
  set_has_pwd1();
  pwd1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VerifyPswdRequest.Pwd1)
}
#if LANG_CXX11
void VerifyPswdRequest::set_pwd1(::std::string&& value) {
  set_has_pwd1();
  pwd1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VerifyPswdRequest.Pwd1)
}
#endif
void VerifyPswdRequest::set_pwd1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pwd1();
  pwd1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VerifyPswdRequest.Pwd1)
}
void VerifyPswdRequest::set_pwd1(const char* value, size_t size) {
  set_has_pwd1();
  pwd1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VerifyPswdRequest.Pwd1)
}
::std::string* VerifyPswdRequest::mutable_pwd1() {
  set_has_pwd1();
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyPswdRequest.Pwd1)
  return pwd1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VerifyPswdRequest::release_pwd1() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyPswdRequest.Pwd1)
  clear_has_pwd1();
  return pwd1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VerifyPswdRequest::set_allocated_pwd1(::std::string* pwd1) {
  if (pwd1 != NULL) {
    set_has_pwd1();
  } else {
    clear_has_pwd1();
  }
  pwd1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd1);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyPswdRequest.Pwd1)
}

// optional string Pwd2 = 4;
bool VerifyPswdRequest::has_pwd2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VerifyPswdRequest::set_has_pwd2() {
  _has_bits_[0] |= 0x00000002u;
}
void VerifyPswdRequest::clear_has_pwd2() {
  _has_bits_[0] &= ~0x00000002u;
}
void VerifyPswdRequest::clear_pwd2() {
  pwd2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pwd2();
}
const ::std::string& VerifyPswdRequest::pwd2() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPswdRequest.Pwd2)
  return pwd2_.GetNoArena();
}
void VerifyPswdRequest::set_pwd2(const ::std::string& value) {
  set_has_pwd2();
  pwd2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VerifyPswdRequest.Pwd2)
}
#if LANG_CXX11
void VerifyPswdRequest::set_pwd2(::std::string&& value) {
  set_has_pwd2();
  pwd2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VerifyPswdRequest.Pwd2)
}
#endif
void VerifyPswdRequest::set_pwd2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pwd2();
  pwd2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VerifyPswdRequest.Pwd2)
}
void VerifyPswdRequest::set_pwd2(const char* value, size_t size) {
  set_has_pwd2();
  pwd2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VerifyPswdRequest.Pwd2)
}
::std::string* VerifyPswdRequest::mutable_pwd2() {
  set_has_pwd2();
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyPswdRequest.Pwd2)
  return pwd2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VerifyPswdRequest::release_pwd2() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyPswdRequest.Pwd2)
  clear_has_pwd2();
  return pwd2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VerifyPswdRequest::set_allocated_pwd2(::std::string* pwd2) {
  if (pwd2 != NULL) {
    set_has_pwd2();
  } else {
    clear_has_pwd2();
  }
  pwd2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd2);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyPswdRequest.Pwd2)
}

// optional .micromsg.SKBuiltinString_t ImgSid = 5;
bool VerifyPswdRequest::has_imgsid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VerifyPswdRequest::set_has_imgsid() {
  _has_bits_[0] |= 0x00000008u;
}
void VerifyPswdRequest::clear_has_imgsid() {
  _has_bits_[0] &= ~0x00000008u;
}
void VerifyPswdRequest::clear_imgsid() {
  if (imgsid_ != NULL) imgsid_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_imgsid();
}
const ::micromsg::SKBuiltinString_t& VerifyPswdRequest::imgsid() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPswdRequest.ImgSid)
  return imgsid_ != NULL ? *imgsid_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* VerifyPswdRequest::mutable_imgsid() {
  set_has_imgsid();
  if (imgsid_ == NULL) {
    imgsid_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyPswdRequest.ImgSid)
  return imgsid_;
}
::micromsg::SKBuiltinString_t* VerifyPswdRequest::release_imgsid() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyPswdRequest.ImgSid)
  clear_has_imgsid();
  ::micromsg::SKBuiltinString_t* temp = imgsid_;
  imgsid_ = NULL;
  return temp;
}
void VerifyPswdRequest::set_allocated_imgsid(::micromsg::SKBuiltinString_t* imgsid) {
  delete imgsid_;
  imgsid_ = imgsid;
  if (imgsid) {
    set_has_imgsid();
  } else {
    clear_has_imgsid();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyPswdRequest.ImgSid)
}

// optional .micromsg.SKBuiltinString_t ImgCode = 6;
bool VerifyPswdRequest::has_imgcode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VerifyPswdRequest::set_has_imgcode() {
  _has_bits_[0] |= 0x00000010u;
}
void VerifyPswdRequest::clear_has_imgcode() {
  _has_bits_[0] &= ~0x00000010u;
}
void VerifyPswdRequest::clear_imgcode() {
  if (imgcode_ != NULL) imgcode_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_imgcode();
}
const ::micromsg::SKBuiltinString_t& VerifyPswdRequest::imgcode() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPswdRequest.ImgCode)
  return imgcode_ != NULL ? *imgcode_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* VerifyPswdRequest::mutable_imgcode() {
  set_has_imgcode();
  if (imgcode_ == NULL) {
    imgcode_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyPswdRequest.ImgCode)
  return imgcode_;
}
::micromsg::SKBuiltinString_t* VerifyPswdRequest::release_imgcode() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyPswdRequest.ImgCode)
  clear_has_imgcode();
  ::micromsg::SKBuiltinString_t* temp = imgcode_;
  imgcode_ = NULL;
  return temp;
}
void VerifyPswdRequest::set_allocated_imgcode(::micromsg::SKBuiltinString_t* imgcode) {
  delete imgcode_;
  imgcode_ = imgcode;
  if (imgcode) {
    set_has_imgcode();
  } else {
    clear_has_imgcode();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyPswdRequest.ImgCode)
}

// optional .micromsg.SKBuiltinString_t ImgEncryptKey = 7;
bool VerifyPswdRequest::has_imgencryptkey() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VerifyPswdRequest::set_has_imgencryptkey() {
  _has_bits_[0] |= 0x00000020u;
}
void VerifyPswdRequest::clear_has_imgencryptkey() {
  _has_bits_[0] &= ~0x00000020u;
}
void VerifyPswdRequest::clear_imgencryptkey() {
  if (imgencryptkey_ != NULL) imgencryptkey_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_imgencryptkey();
}
const ::micromsg::SKBuiltinString_t& VerifyPswdRequest::imgencryptkey() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPswdRequest.ImgEncryptKey)
  return imgencryptkey_ != NULL ? *imgencryptkey_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* VerifyPswdRequest::mutable_imgencryptkey() {
  set_has_imgencryptkey();
  if (imgencryptkey_ == NULL) {
    imgencryptkey_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyPswdRequest.ImgEncryptKey)
  return imgencryptkey_;
}
::micromsg::SKBuiltinString_t* VerifyPswdRequest::release_imgencryptkey() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyPswdRequest.ImgEncryptKey)
  clear_has_imgencryptkey();
  ::micromsg::SKBuiltinString_t* temp = imgencryptkey_;
  imgencryptkey_ = NULL;
  return temp;
}
void VerifyPswdRequest::set_allocated_imgencryptkey(::micromsg::SKBuiltinString_t* imgencryptkey) {
  delete imgencryptkey_;
  imgencryptkey_ = imgencryptkey;
  if (imgencryptkey) {
    set_has_imgencryptkey();
  } else {
    clear_has_imgencryptkey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyPswdRequest.ImgEncryptKey)
}

// optional .micromsg.SKBuiltinBuffer_t KSid = 8;
bool VerifyPswdRequest::has_ksid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VerifyPswdRequest::set_has_ksid() {
  _has_bits_[0] |= 0x00000040u;
}
void VerifyPswdRequest::clear_has_ksid() {
  _has_bits_[0] &= ~0x00000040u;
}
void VerifyPswdRequest::clear_ksid() {
  if (ksid_ != NULL) ksid_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_ksid();
}
const ::micromsg::SKBuiltinBuffer_t& VerifyPswdRequest::ksid() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPswdRequest.KSid)
  return ksid_ != NULL ? *ksid_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* VerifyPswdRequest::mutable_ksid() {
  set_has_ksid();
  if (ksid_ == NULL) {
    ksid_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyPswdRequest.KSid)
  return ksid_;
}
::micromsg::SKBuiltinBuffer_t* VerifyPswdRequest::release_ksid() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyPswdRequest.KSid)
  clear_has_ksid();
  ::micromsg::SKBuiltinBuffer_t* temp = ksid_;
  ksid_ = NULL;
  return temp;
}
void VerifyPswdRequest::set_allocated_ksid(::micromsg::SKBuiltinBuffer_t* ksid) {
  delete ksid_;
  ksid_ = ksid;
  if (ksid) {
    set_has_ksid();
  } else {
    clear_has_ksid();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyPswdRequest.KSid)
}

// optional uint32 Scence = 9;
bool VerifyPswdRequest::has_scence() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void VerifyPswdRequest::set_has_scence() {
  _has_bits_[0] |= 0x00000200u;
}
void VerifyPswdRequest::clear_has_scence() {
  _has_bits_[0] &= ~0x00000200u;
}
void VerifyPswdRequest::clear_scence() {
  scence_ = 0u;
  clear_has_scence();
}
::google::protobuf::uint32 VerifyPswdRequest::scence() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPswdRequest.Scence)
  return scence_;
}
void VerifyPswdRequest::set_scence(::google::protobuf::uint32 value) {
  set_has_scence();
  scence_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VerifyPswdRequest.Scence)
}

// optional .micromsg.SKBuiltinBuffer_t WTLoginReqBuff = 10;
bool VerifyPswdRequest::has_wtloginreqbuff() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VerifyPswdRequest::set_has_wtloginreqbuff() {
  _has_bits_[0] |= 0x00000080u;
}
void VerifyPswdRequest::clear_has_wtloginreqbuff() {
  _has_bits_[0] &= ~0x00000080u;
}
void VerifyPswdRequest::clear_wtloginreqbuff() {
  if (wtloginreqbuff_ != NULL) wtloginreqbuff_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_wtloginreqbuff();
}
const ::micromsg::SKBuiltinBuffer_t& VerifyPswdRequest::wtloginreqbuff() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPswdRequest.WTLoginReqBuff)
  return wtloginreqbuff_ != NULL ? *wtloginreqbuff_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* VerifyPswdRequest::mutable_wtloginreqbuff() {
  set_has_wtloginreqbuff();
  if (wtloginreqbuff_ == NULL) {
    wtloginreqbuff_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyPswdRequest.WTLoginReqBuff)
  return wtloginreqbuff_;
}
::micromsg::SKBuiltinBuffer_t* VerifyPswdRequest::release_wtloginreqbuff() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyPswdRequest.WTLoginReqBuff)
  clear_has_wtloginreqbuff();
  ::micromsg::SKBuiltinBuffer_t* temp = wtloginreqbuff_;
  wtloginreqbuff_ = NULL;
  return temp;
}
void VerifyPswdRequest::set_allocated_wtloginreqbuff(::micromsg::SKBuiltinBuffer_t* wtloginreqbuff) {
  delete wtloginreqbuff_;
  wtloginreqbuff_ = wtloginreqbuff;
  if (wtloginreqbuff) {
    set_has_wtloginreqbuff();
  } else {
    clear_has_wtloginreqbuff();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyPswdRequest.WTLoginReqBuff)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VerifyPswdResponse::kBaseResponseFieldNumber;
const int VerifyPswdResponse::kImgSidFieldNumber;
const int VerifyPswdResponse::kImgBufFieldNumber;
const int VerifyPswdResponse::kTicketFieldNumber;
const int VerifyPswdResponse::kImgEncryptKeyFieldNumber;
const int VerifyPswdResponse::kA2KeyFieldNumber;
const int VerifyPswdResponse::kKSidFieldNumber;
const int VerifyPswdResponse::kAuthKeyFieldNumber;
const int VerifyPswdResponse::kWTLoginRspBuffFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VerifyPswdResponse::VerifyPswdResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VerifyPswdResponse)
}
VerifyPswdResponse::VerifyPswdResponse(const VerifyPswdResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ticket()) {
    ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
  }
  authkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_authkey()) {
    authkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authkey_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_imgsid()) {
    imgsid_ = new ::micromsg::SKBuiltinString_t(*from.imgsid_);
  } else {
    imgsid_ = NULL;
  }
  if (from.has_imgbuf()) {
    imgbuf_ = new ::micromsg::SKBuiltinBuffer_t(*from.imgbuf_);
  } else {
    imgbuf_ = NULL;
  }
  if (from.has_imgencryptkey()) {
    imgencryptkey_ = new ::micromsg::SKBuiltinString_t(*from.imgencryptkey_);
  } else {
    imgencryptkey_ = NULL;
  }
  if (from.has_a2key()) {
    a2key_ = new ::micromsg::SKBuiltinBuffer_t(*from.a2key_);
  } else {
    a2key_ = NULL;
  }
  if (from.has_ksid()) {
    ksid_ = new ::micromsg::SKBuiltinBuffer_t(*from.ksid_);
  } else {
    ksid_ = NULL;
  }
  if (from.has_wtloginrspbuff()) {
    wtloginrspbuff_ = new ::micromsg::SKBuiltinBuffer_t(*from.wtloginrspbuff_);
  } else {
    wtloginrspbuff_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.VerifyPswdResponse)
}

void VerifyPswdResponse::SharedCtor() {
  _cached_size_ = 0;
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&wtloginrspbuff_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(wtloginrspbuff_));
}

VerifyPswdResponse::~VerifyPswdResponse() {
  // @@protoc_insertion_point(destructor:micromsg.VerifyPswdResponse)
  SharedDtor();
}

void VerifyPswdResponse::SharedDtor() {
  ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete imgsid_;
  }
  if (this != internal_default_instance()) {
    delete imgbuf_;
  }
  if (this != internal_default_instance()) {
    delete imgencryptkey_;
  }
  if (this != internal_default_instance()) {
    delete a2key_;
  }
  if (this != internal_default_instance()) {
    delete ksid_;
  }
  if (this != internal_default_instance()) {
    delete wtloginrspbuff_;
  }
}

void VerifyPswdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VerifyPswdResponse::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VerifyPswdResponse& VerifyPswdResponse::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

VerifyPswdResponse* VerifyPswdResponse::New(::google::protobuf::Arena* arena) const {
  VerifyPswdResponse* n = new VerifyPswdResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VerifyPswdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VerifyPswdResponse)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_ticket()) {
      GOOGLE_DCHECK(!ticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ticket_.UnsafeRawStringPointer())->clear();
    }
    if (has_authkey()) {
      GOOGLE_DCHECK(!authkey_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*authkey_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_imgsid()) {
      GOOGLE_DCHECK(imgsid_ != NULL);
      imgsid_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_imgbuf()) {
      GOOGLE_DCHECK(imgbuf_ != NULL);
      imgbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_imgencryptkey()) {
      GOOGLE_DCHECK(imgencryptkey_ != NULL);
      imgencryptkey_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_a2key()) {
      GOOGLE_DCHECK(a2key_ != NULL);
      a2key_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_ksid()) {
      GOOGLE_DCHECK(ksid_ != NULL);
      ksid_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (has_wtloginrspbuff()) {
    GOOGLE_DCHECK(wtloginrspbuff_ != NULL);
    wtloginrspbuff_->::micromsg::SKBuiltinBuffer_t::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VerifyPswdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VerifyPswdResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t ImgSid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imgsid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t ImgBuf = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imgbuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Ticket = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ticket().data(), this->ticket().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.VerifyPswdResponse.Ticket");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinString_t ImgEncryptKey = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imgencryptkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t A2Key = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_a2key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t KSid = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ksid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AuthKey = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->authkey().data(), this->authkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.VerifyPswdResponse.AuthKey");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t WTLoginRspBuff = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wtloginrspbuff()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VerifyPswdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VerifyPswdResponse)
  return false;
#undef DO_
}

void VerifyPswdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VerifyPswdResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required .micromsg.SKBuiltinString_t ImgSid = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->imgsid_, output);
  }

  // required .micromsg.SKBuiltinBuffer_t ImgBuf = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->imgbuf_, output);
  }

  // optional string Ticket = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ticket().data(), this->ticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VerifyPswdResponse.Ticket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ticket(), output);
  }

  // optional .micromsg.SKBuiltinString_t ImgEncryptKey = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->imgencryptkey_, output);
  }

  // optional .micromsg.SKBuiltinBuffer_t A2Key = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->a2key_, output);
  }

  // optional .micromsg.SKBuiltinBuffer_t KSid = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->ksid_, output);
  }

  // optional string AuthKey = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authkey().data(), this->authkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VerifyPswdResponse.AuthKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->authkey(), output);
  }

  // optional .micromsg.SKBuiltinBuffer_t WTLoginRspBuff = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->wtloginrspbuff_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VerifyPswdResponse)
}

::google::protobuf::uint8* VerifyPswdResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VerifyPswdResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t ImgSid = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->imgsid_, deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t ImgBuf = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->imgbuf_, deterministic, target);
  }

  // optional string Ticket = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ticket().data(), this->ticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VerifyPswdResponse.Ticket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ticket(), target);
  }

  // optional .micromsg.SKBuiltinString_t ImgEncryptKey = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->imgencryptkey_, deterministic, target);
  }

  // optional .micromsg.SKBuiltinBuffer_t A2Key = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->a2key_, deterministic, target);
  }

  // optional .micromsg.SKBuiltinBuffer_t KSid = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->ksid_, deterministic, target);
  }

  // optional string AuthKey = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authkey().data(), this->authkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VerifyPswdResponse.AuthKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->authkey(), target);
  }

  // optional .micromsg.SKBuiltinBuffer_t WTLoginRspBuff = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->wtloginrspbuff_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VerifyPswdResponse)
  return target;
}

size_t VerifyPswdResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.VerifyPswdResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_imgsid()) {
    // required .micromsg.SKBuiltinString_t ImgSid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imgsid_);
  }

  if (has_imgbuf()) {
    // required .micromsg.SKBuiltinBuffer_t ImgBuf = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imgbuf_);
  }

  return total_size;
}
size_t VerifyPswdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VerifyPswdResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001c) ^ 0x0000001c) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required .micromsg.SKBuiltinString_t ImgSid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imgsid_);

    // required .micromsg.SKBuiltinBuffer_t ImgBuf = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imgbuf_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string Ticket = 4;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ticket());
    }

    // optional string AuthKey = 8;
    if (has_authkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authkey());
    }

  }
  if (_has_bits_[0 / 32] & 224u) {
    // optional .micromsg.SKBuiltinString_t ImgEncryptKey = 5;
    if (has_imgencryptkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->imgencryptkey_);
    }

    // optional .micromsg.SKBuiltinBuffer_t A2Key = 6;
    if (has_a2key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->a2key_);
    }

    // optional .micromsg.SKBuiltinBuffer_t KSid = 7;
    if (has_ksid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ksid_);
    }

  }
  // optional .micromsg.SKBuiltinBuffer_t WTLoginRspBuff = 9;
  if (has_wtloginrspbuff()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->wtloginrspbuff_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerifyPswdResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VerifyPswdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const VerifyPswdResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VerifyPswdResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VerifyPswdResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VerifyPswdResponse)
    MergeFrom(*source);
  }
}

void VerifyPswdResponse::MergeFrom(const VerifyPswdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VerifyPswdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ticket();
      ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_authkey();
      authkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authkey_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_imgsid()->::micromsg::SKBuiltinString_t::MergeFrom(from.imgsid());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_imgbuf()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.imgbuf());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_imgencryptkey()->::micromsg::SKBuiltinString_t::MergeFrom(from.imgencryptkey());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_a2key()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.a2key());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_ksid()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.ksid());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    mutable_wtloginrspbuff()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.wtloginrspbuff());
  }
}

void VerifyPswdResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VerifyPswdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyPswdResponse::CopyFrom(const VerifyPswdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VerifyPswdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyPswdResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001c) != 0x0000001c) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_imgbuf()) {
    if (!this->imgbuf_->IsInitialized()) return false;
  }
  if (has_a2key()) {
    if (!this->a2key_->IsInitialized()) return false;
  }
  if (has_ksid()) {
    if (!this->ksid_->IsInitialized()) return false;
  }
  if (has_wtloginrspbuff()) {
    if (!this->wtloginrspbuff_->IsInitialized()) return false;
  }
  return true;
}

void VerifyPswdResponse::Swap(VerifyPswdResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VerifyPswdResponse::InternalSwap(VerifyPswdResponse* other) {
  ticket_.Swap(&other->ticket_);
  authkey_.Swap(&other->authkey_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(imgsid_, other->imgsid_);
  std::swap(imgbuf_, other->imgbuf_);
  std::swap(imgencryptkey_, other->imgencryptkey_);
  std::swap(a2key_, other->a2key_);
  std::swap(ksid_, other->ksid_);
  std::swap(wtloginrspbuff_, other->wtloginrspbuff_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VerifyPswdResponse::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VerifyPswdResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool VerifyPswdResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VerifyPswdResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000004u;
}
void VerifyPswdResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000004u;
}
void VerifyPswdResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& VerifyPswdResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPswdResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* VerifyPswdResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyPswdResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* VerifyPswdResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyPswdResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void VerifyPswdResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyPswdResponse.BaseResponse)
}

// required .micromsg.SKBuiltinString_t ImgSid = 2;
bool VerifyPswdResponse::has_imgsid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VerifyPswdResponse::set_has_imgsid() {
  _has_bits_[0] |= 0x00000008u;
}
void VerifyPswdResponse::clear_has_imgsid() {
  _has_bits_[0] &= ~0x00000008u;
}
void VerifyPswdResponse::clear_imgsid() {
  if (imgsid_ != NULL) imgsid_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_imgsid();
}
const ::micromsg::SKBuiltinString_t& VerifyPswdResponse::imgsid() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPswdResponse.ImgSid)
  return imgsid_ != NULL ? *imgsid_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* VerifyPswdResponse::mutable_imgsid() {
  set_has_imgsid();
  if (imgsid_ == NULL) {
    imgsid_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyPswdResponse.ImgSid)
  return imgsid_;
}
::micromsg::SKBuiltinString_t* VerifyPswdResponse::release_imgsid() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyPswdResponse.ImgSid)
  clear_has_imgsid();
  ::micromsg::SKBuiltinString_t* temp = imgsid_;
  imgsid_ = NULL;
  return temp;
}
void VerifyPswdResponse::set_allocated_imgsid(::micromsg::SKBuiltinString_t* imgsid) {
  delete imgsid_;
  imgsid_ = imgsid;
  if (imgsid) {
    set_has_imgsid();
  } else {
    clear_has_imgsid();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyPswdResponse.ImgSid)
}

// required .micromsg.SKBuiltinBuffer_t ImgBuf = 3;
bool VerifyPswdResponse::has_imgbuf() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VerifyPswdResponse::set_has_imgbuf() {
  _has_bits_[0] |= 0x00000010u;
}
void VerifyPswdResponse::clear_has_imgbuf() {
  _has_bits_[0] &= ~0x00000010u;
}
void VerifyPswdResponse::clear_imgbuf() {
  if (imgbuf_ != NULL) imgbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_imgbuf();
}
const ::micromsg::SKBuiltinBuffer_t& VerifyPswdResponse::imgbuf() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPswdResponse.ImgBuf)
  return imgbuf_ != NULL ? *imgbuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* VerifyPswdResponse::mutable_imgbuf() {
  set_has_imgbuf();
  if (imgbuf_ == NULL) {
    imgbuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyPswdResponse.ImgBuf)
  return imgbuf_;
}
::micromsg::SKBuiltinBuffer_t* VerifyPswdResponse::release_imgbuf() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyPswdResponse.ImgBuf)
  clear_has_imgbuf();
  ::micromsg::SKBuiltinBuffer_t* temp = imgbuf_;
  imgbuf_ = NULL;
  return temp;
}
void VerifyPswdResponse::set_allocated_imgbuf(::micromsg::SKBuiltinBuffer_t* imgbuf) {
  delete imgbuf_;
  imgbuf_ = imgbuf;
  if (imgbuf) {
    set_has_imgbuf();
  } else {
    clear_has_imgbuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyPswdResponse.ImgBuf)
}

// optional string Ticket = 4;
bool VerifyPswdResponse::has_ticket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VerifyPswdResponse::set_has_ticket() {
  _has_bits_[0] |= 0x00000001u;
}
void VerifyPswdResponse::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000001u;
}
void VerifyPswdResponse::clear_ticket() {
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ticket();
}
const ::std::string& VerifyPswdResponse::ticket() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPswdResponse.Ticket)
  return ticket_.GetNoArena();
}
void VerifyPswdResponse::set_ticket(const ::std::string& value) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VerifyPswdResponse.Ticket)
}
#if LANG_CXX11
void VerifyPswdResponse::set_ticket(::std::string&& value) {
  set_has_ticket();
  ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VerifyPswdResponse.Ticket)
}
#endif
void VerifyPswdResponse::set_ticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VerifyPswdResponse.Ticket)
}
void VerifyPswdResponse::set_ticket(const char* value, size_t size) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VerifyPswdResponse.Ticket)
}
::std::string* VerifyPswdResponse::mutable_ticket() {
  set_has_ticket();
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyPswdResponse.Ticket)
  return ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VerifyPswdResponse::release_ticket() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyPswdResponse.Ticket)
  clear_has_ticket();
  return ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VerifyPswdResponse::set_allocated_ticket(::std::string* ticket) {
  if (ticket != NULL) {
    set_has_ticket();
  } else {
    clear_has_ticket();
  }
  ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticket);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyPswdResponse.Ticket)
}

// optional .micromsg.SKBuiltinString_t ImgEncryptKey = 5;
bool VerifyPswdResponse::has_imgencryptkey() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VerifyPswdResponse::set_has_imgencryptkey() {
  _has_bits_[0] |= 0x00000020u;
}
void VerifyPswdResponse::clear_has_imgencryptkey() {
  _has_bits_[0] &= ~0x00000020u;
}
void VerifyPswdResponse::clear_imgencryptkey() {
  if (imgencryptkey_ != NULL) imgencryptkey_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_imgencryptkey();
}
const ::micromsg::SKBuiltinString_t& VerifyPswdResponse::imgencryptkey() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPswdResponse.ImgEncryptKey)
  return imgencryptkey_ != NULL ? *imgencryptkey_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* VerifyPswdResponse::mutable_imgencryptkey() {
  set_has_imgencryptkey();
  if (imgencryptkey_ == NULL) {
    imgencryptkey_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyPswdResponse.ImgEncryptKey)
  return imgencryptkey_;
}
::micromsg::SKBuiltinString_t* VerifyPswdResponse::release_imgencryptkey() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyPswdResponse.ImgEncryptKey)
  clear_has_imgencryptkey();
  ::micromsg::SKBuiltinString_t* temp = imgencryptkey_;
  imgencryptkey_ = NULL;
  return temp;
}
void VerifyPswdResponse::set_allocated_imgencryptkey(::micromsg::SKBuiltinString_t* imgencryptkey) {
  delete imgencryptkey_;
  imgencryptkey_ = imgencryptkey;
  if (imgencryptkey) {
    set_has_imgencryptkey();
  } else {
    clear_has_imgencryptkey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyPswdResponse.ImgEncryptKey)
}

// optional .micromsg.SKBuiltinBuffer_t A2Key = 6;
bool VerifyPswdResponse::has_a2key() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VerifyPswdResponse::set_has_a2key() {
  _has_bits_[0] |= 0x00000040u;
}
void VerifyPswdResponse::clear_has_a2key() {
  _has_bits_[0] &= ~0x00000040u;
}
void VerifyPswdResponse::clear_a2key() {
  if (a2key_ != NULL) a2key_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_a2key();
}
const ::micromsg::SKBuiltinBuffer_t& VerifyPswdResponse::a2key() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPswdResponse.A2Key)
  return a2key_ != NULL ? *a2key_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* VerifyPswdResponse::mutable_a2key() {
  set_has_a2key();
  if (a2key_ == NULL) {
    a2key_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyPswdResponse.A2Key)
  return a2key_;
}
::micromsg::SKBuiltinBuffer_t* VerifyPswdResponse::release_a2key() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyPswdResponse.A2Key)
  clear_has_a2key();
  ::micromsg::SKBuiltinBuffer_t* temp = a2key_;
  a2key_ = NULL;
  return temp;
}
void VerifyPswdResponse::set_allocated_a2key(::micromsg::SKBuiltinBuffer_t* a2key) {
  delete a2key_;
  a2key_ = a2key;
  if (a2key) {
    set_has_a2key();
  } else {
    clear_has_a2key();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyPswdResponse.A2Key)
}

// optional .micromsg.SKBuiltinBuffer_t KSid = 7;
bool VerifyPswdResponse::has_ksid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VerifyPswdResponse::set_has_ksid() {
  _has_bits_[0] |= 0x00000080u;
}
void VerifyPswdResponse::clear_has_ksid() {
  _has_bits_[0] &= ~0x00000080u;
}
void VerifyPswdResponse::clear_ksid() {
  if (ksid_ != NULL) ksid_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_ksid();
}
const ::micromsg::SKBuiltinBuffer_t& VerifyPswdResponse::ksid() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPswdResponse.KSid)
  return ksid_ != NULL ? *ksid_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* VerifyPswdResponse::mutable_ksid() {
  set_has_ksid();
  if (ksid_ == NULL) {
    ksid_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyPswdResponse.KSid)
  return ksid_;
}
::micromsg::SKBuiltinBuffer_t* VerifyPswdResponse::release_ksid() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyPswdResponse.KSid)
  clear_has_ksid();
  ::micromsg::SKBuiltinBuffer_t* temp = ksid_;
  ksid_ = NULL;
  return temp;
}
void VerifyPswdResponse::set_allocated_ksid(::micromsg::SKBuiltinBuffer_t* ksid) {
  delete ksid_;
  ksid_ = ksid;
  if (ksid) {
    set_has_ksid();
  } else {
    clear_has_ksid();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyPswdResponse.KSid)
}

// optional string AuthKey = 8;
bool VerifyPswdResponse::has_authkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VerifyPswdResponse::set_has_authkey() {
  _has_bits_[0] |= 0x00000002u;
}
void VerifyPswdResponse::clear_has_authkey() {
  _has_bits_[0] &= ~0x00000002u;
}
void VerifyPswdResponse::clear_authkey() {
  authkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_authkey();
}
const ::std::string& VerifyPswdResponse::authkey() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPswdResponse.AuthKey)
  return authkey_.GetNoArena();
}
void VerifyPswdResponse::set_authkey(const ::std::string& value) {
  set_has_authkey();
  authkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VerifyPswdResponse.AuthKey)
}
#if LANG_CXX11
void VerifyPswdResponse::set_authkey(::std::string&& value) {
  set_has_authkey();
  authkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VerifyPswdResponse.AuthKey)
}
#endif
void VerifyPswdResponse::set_authkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_authkey();
  authkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VerifyPswdResponse.AuthKey)
}
void VerifyPswdResponse::set_authkey(const char* value, size_t size) {
  set_has_authkey();
  authkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VerifyPswdResponse.AuthKey)
}
::std::string* VerifyPswdResponse::mutable_authkey() {
  set_has_authkey();
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyPswdResponse.AuthKey)
  return authkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VerifyPswdResponse::release_authkey() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyPswdResponse.AuthKey)
  clear_has_authkey();
  return authkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VerifyPswdResponse::set_allocated_authkey(::std::string* authkey) {
  if (authkey != NULL) {
    set_has_authkey();
  } else {
    clear_has_authkey();
  }
  authkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), authkey);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyPswdResponse.AuthKey)
}

// optional .micromsg.SKBuiltinBuffer_t WTLoginRspBuff = 9;
bool VerifyPswdResponse::has_wtloginrspbuff() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void VerifyPswdResponse::set_has_wtloginrspbuff() {
  _has_bits_[0] |= 0x00000100u;
}
void VerifyPswdResponse::clear_has_wtloginrspbuff() {
  _has_bits_[0] &= ~0x00000100u;
}
void VerifyPswdResponse::clear_wtloginrspbuff() {
  if (wtloginrspbuff_ != NULL) wtloginrspbuff_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_wtloginrspbuff();
}
const ::micromsg::SKBuiltinBuffer_t& VerifyPswdResponse::wtloginrspbuff() const {
  // @@protoc_insertion_point(field_get:micromsg.VerifyPswdResponse.WTLoginRspBuff)
  return wtloginrspbuff_ != NULL ? *wtloginrspbuff_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* VerifyPswdResponse::mutable_wtloginrspbuff() {
  set_has_wtloginrspbuff();
  if (wtloginrspbuff_ == NULL) {
    wtloginrspbuff_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VerifyPswdResponse.WTLoginRspBuff)
  return wtloginrspbuff_;
}
::micromsg::SKBuiltinBuffer_t* VerifyPswdResponse::release_wtloginrspbuff() {
  // @@protoc_insertion_point(field_release:micromsg.VerifyPswdResponse.WTLoginRspBuff)
  clear_has_wtloginrspbuff();
  ::micromsg::SKBuiltinBuffer_t* temp = wtloginrspbuff_;
  wtloginrspbuff_ = NULL;
  return temp;
}
void VerifyPswdResponse::set_allocated_wtloginrspbuff(::micromsg::SKBuiltinBuffer_t* wtloginrspbuff) {
  delete wtloginrspbuff_;
  wtloginrspbuff_ = wtloginrspbuff;
  if (wtloginrspbuff) {
    set_has_wtloginrspbuff();
  } else {
    clear_has_wtloginrspbuff();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VerifyPswdResponse.WTLoginRspBuff)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResetPawInfo::kCreateTimeFieldNumber;
const int ResetPawInfo::kIsResetFieldNumber;
const int ResetPawInfo::kIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResetPawInfo::ResetPawInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ResetPawInfo)
}
ResetPawInfo::ResetPawInfo(const ResetPawInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&createtime_, &from.createtime_,
    reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&createtime_) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:micromsg.ResetPawInfo)
}

void ResetPawInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&createtime_, 0, reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&createtime_) + sizeof(id_));
}

ResetPawInfo::~ResetPawInfo() {
  // @@protoc_insertion_point(destructor:micromsg.ResetPawInfo)
  SharedDtor();
}

void ResetPawInfo::SharedDtor() {
}

void ResetPawInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetPawInfo::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResetPawInfo& ResetPawInfo::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResetPawInfo* ResetPawInfo::New(::google::protobuf::Arena* arena) const {
  ResetPawInfo* n = new ResetPawInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResetPawInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ResetPawInfo)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&createtime_, 0, reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&createtime_) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResetPawInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ResetPawInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 CreateTime = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_createtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 IsReset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_isreset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isreset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ResetPawInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ResetPawInfo)
  return false;
#undef DO_
}

void ResetPawInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ResetPawInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 CreateTime = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->createtime(), output);
  }

  // required uint32 IsReset = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->isreset(), output);
  }

  // required uint32 ID = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ResetPawInfo)
}

::google::protobuf::uint8* ResetPawInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ResetPawInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 CreateTime = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->createtime(), target);
  }

  // required uint32 IsReset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->isreset(), target);
  }

  // required uint32 ID = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ResetPawInfo)
  return target;
}

size_t ResetPawInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.ResetPawInfo)
  size_t total_size = 0;

  if (has_createtime()) {
    // required uint32 CreateTime = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->createtime());
  }

  if (has_isreset()) {
    // required uint32 IsReset = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->isreset());
  }

  if (has_id()) {
    // required uint32 ID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  return total_size;
}
size_t ResetPawInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ResetPawInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 CreateTime = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->createtime());

    // required uint32 IsReset = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->isreset());

    // required uint32 ID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetPawInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ResetPawInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ResetPawInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResetPawInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ResetPawInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ResetPawInfo)
    MergeFrom(*source);
  }
}

void ResetPawInfo::MergeFrom(const ResetPawInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ResetPawInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      createtime_ = from.createtime_;
    }
    if (cached_has_bits & 0x00000002u) {
      isreset_ = from.isreset_;
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResetPawInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ResetPawInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetPawInfo::CopyFrom(const ResetPawInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ResetPawInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetPawInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void ResetPawInfo::Swap(ResetPawInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResetPawInfo::InternalSwap(ResetPawInfo* other) {
  std::swap(createtime_, other->createtime_);
  std::swap(isreset_, other->isreset_);
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResetPawInfo::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResetPawInfo

// required uint32 CreateTime = 1;
bool ResetPawInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResetPawInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000001u;
}
void ResetPawInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResetPawInfo::clear_createtime() {
  createtime_ = 0u;
  clear_has_createtime();
}
::google::protobuf::uint32 ResetPawInfo::createtime() const {
  // @@protoc_insertion_point(field_get:micromsg.ResetPawInfo.CreateTime)
  return createtime_;
}
void ResetPawInfo::set_createtime(::google::protobuf::uint32 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ResetPawInfo.CreateTime)
}

// required uint32 IsReset = 2;
bool ResetPawInfo::has_isreset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ResetPawInfo::set_has_isreset() {
  _has_bits_[0] |= 0x00000002u;
}
void ResetPawInfo::clear_has_isreset() {
  _has_bits_[0] &= ~0x00000002u;
}
void ResetPawInfo::clear_isreset() {
  isreset_ = 0u;
  clear_has_isreset();
}
::google::protobuf::uint32 ResetPawInfo::isreset() const {
  // @@protoc_insertion_point(field_get:micromsg.ResetPawInfo.IsReset)
  return isreset_;
}
void ResetPawInfo::set_isreset(::google::protobuf::uint32 value) {
  set_has_isreset();
  isreset_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ResetPawInfo.IsReset)
}

// required uint32 ID = 3;
bool ResetPawInfo::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ResetPawInfo::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
void ResetPawInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void ResetPawInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 ResetPawInfo::id() const {
  // @@protoc_insertion_point(field_get:micromsg.ResetPawInfo.ID)
  return id_;
}
void ResetPawInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ResetPawInfo.ID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ApplyResetPawRequest::kBaseRequestFieldNumber;
const int ApplyResetPawRequest::kTypeFieldNumber;
const int ApplyResetPawRequest::kResetInfoFieldNumber;
const int ApplyResetPawRequest::kGetMethodFieldNumber;
const int ApplyResetPawRequest::kRandomEncryKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyResetPawRequest::ApplyResetPawRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ApplyResetPawRequest)
}
ApplyResetPawRequest::ApplyResetPawRequest(const ApplyResetPawRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  resetinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_resetinfo()) {
    resetinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resetinfo_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_randomencrykey()) {
    randomencrykey_ = new ::micromsg::SKBuiltinBuffer_t(*from.randomencrykey_);
  } else {
    randomencrykey_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&getmethod_) -
    reinterpret_cast<char*>(&type_) + sizeof(getmethod_));
  // @@protoc_insertion_point(copy_constructor:micromsg.ApplyResetPawRequest)
}

void ApplyResetPawRequest::SharedCtor() {
  _cached_size_ = 0;
  resetinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&getmethod_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(getmethod_));
}

ApplyResetPawRequest::~ApplyResetPawRequest() {
  // @@protoc_insertion_point(destructor:micromsg.ApplyResetPawRequest)
  SharedDtor();
}

void ApplyResetPawRequest::SharedDtor() {
  resetinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete randomencrykey_;
  }
}

void ApplyResetPawRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyResetPawRequest::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ApplyResetPawRequest& ApplyResetPawRequest::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

ApplyResetPawRequest* ApplyResetPawRequest::New(::google::protobuf::Arena* arena) const {
  ApplyResetPawRequest* n = new ApplyResetPawRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ApplyResetPawRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ApplyResetPawRequest)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_resetinfo()) {
      GOOGLE_DCHECK(!resetinfo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*resetinfo_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_randomencrykey()) {
      GOOGLE_DCHECK(randomencrykey_ != NULL);
      randomencrykey_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&type_, 0, reinterpret_cast<char*>(&getmethod_) -
      reinterpret_cast<char*>(&type_) + sizeof(getmethod_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ApplyResetPawRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ApplyResetPawRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ResetInfo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resetinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->resetinfo().data(), this->resetinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ApplyResetPawRequest.ResetInfo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 GetMethod = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_getmethod();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &getmethod_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t RandomEncryKey = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_randomencrykey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ApplyResetPawRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ApplyResetPawRequest)
  return false;
#undef DO_
}

void ApplyResetPawRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ApplyResetPawRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required int32 Type = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional string ResetInfo = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resetinfo().data(), this->resetinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ApplyResetPawRequest.ResetInfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->resetinfo(), output);
  }

  // optional uint32 GetMethod = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->getmethod(), output);
  }

  // optional .micromsg.SKBuiltinBuffer_t RandomEncryKey = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->randomencrykey_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ApplyResetPawRequest)
}

::google::protobuf::uint8* ApplyResetPawRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ApplyResetPawRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required int32 Type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional string ResetInfo = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resetinfo().data(), this->resetinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ApplyResetPawRequest.ResetInfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->resetinfo(), target);
  }

  // optional uint32 GetMethod = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->getmethod(), target);
  }

  // optional .micromsg.SKBuiltinBuffer_t RandomEncryKey = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->randomencrykey_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ApplyResetPawRequest)
  return target;
}

size_t ApplyResetPawRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.ApplyResetPawRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_type()) {
    // required int32 Type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  return total_size;
}
size_t ApplyResetPawRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ApplyResetPawRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000a) ^ 0x0000000a) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required int32 Type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string ResetInfo = 3;
  if (has_resetinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->resetinfo());
  }

  // optional .micromsg.SKBuiltinBuffer_t RandomEncryKey = 5;
  if (has_randomencrykey()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->randomencrykey_);
  }

  // optional uint32 GetMethod = 4;
  if (has_getmethod()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->getmethod());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyResetPawRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ApplyResetPawRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyResetPawRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ApplyResetPawRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ApplyResetPawRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ApplyResetPawRequest)
    MergeFrom(*source);
  }
}

void ApplyResetPawRequest::MergeFrom(const ApplyResetPawRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ApplyResetPawRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_resetinfo();
      resetinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resetinfo_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_randomencrykey()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.randomencrykey());
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      getmethod_ = from.getmethod_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ApplyResetPawRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ApplyResetPawRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyResetPawRequest::CopyFrom(const ApplyResetPawRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ApplyResetPawRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyResetPawRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000a) != 0x0000000a) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_randomencrykey()) {
    if (!this->randomencrykey_->IsInitialized()) return false;
  }
  return true;
}

void ApplyResetPawRequest::Swap(ApplyResetPawRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyResetPawRequest::InternalSwap(ApplyResetPawRequest* other) {
  resetinfo_.Swap(&other->resetinfo_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(randomencrykey_, other->randomencrykey_);
  std::swap(type_, other->type_);
  std::swap(getmethod_, other->getmethod_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ApplyResetPawRequest::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ApplyResetPawRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool ApplyResetPawRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ApplyResetPawRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void ApplyResetPawRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void ApplyResetPawRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& ApplyResetPawRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.ApplyResetPawRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* ApplyResetPawRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ApplyResetPawRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* ApplyResetPawRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.ApplyResetPawRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void ApplyResetPawRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ApplyResetPawRequest.BaseRequest)
}

// required int32 Type = 2;
bool ApplyResetPawRequest::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ApplyResetPawRequest::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void ApplyResetPawRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void ApplyResetPawRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 ApplyResetPawRequest::type() const {
  // @@protoc_insertion_point(field_get:micromsg.ApplyResetPawRequest.Type)
  return type_;
}
void ApplyResetPawRequest::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ApplyResetPawRequest.Type)
}

// optional string ResetInfo = 3;
bool ApplyResetPawRequest::has_resetinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ApplyResetPawRequest::set_has_resetinfo() {
  _has_bits_[0] |= 0x00000001u;
}
void ApplyResetPawRequest::clear_has_resetinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
void ApplyResetPawRequest::clear_resetinfo() {
  resetinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_resetinfo();
}
const ::std::string& ApplyResetPawRequest::resetinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.ApplyResetPawRequest.ResetInfo)
  return resetinfo_.GetNoArena();
}
void ApplyResetPawRequest::set_resetinfo(const ::std::string& value) {
  set_has_resetinfo();
  resetinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ApplyResetPawRequest.ResetInfo)
}
#if LANG_CXX11
void ApplyResetPawRequest::set_resetinfo(::std::string&& value) {
  set_has_resetinfo();
  resetinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ApplyResetPawRequest.ResetInfo)
}
#endif
void ApplyResetPawRequest::set_resetinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_resetinfo();
  resetinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ApplyResetPawRequest.ResetInfo)
}
void ApplyResetPawRequest::set_resetinfo(const char* value, size_t size) {
  set_has_resetinfo();
  resetinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ApplyResetPawRequest.ResetInfo)
}
::std::string* ApplyResetPawRequest::mutable_resetinfo() {
  set_has_resetinfo();
  // @@protoc_insertion_point(field_mutable:micromsg.ApplyResetPawRequest.ResetInfo)
  return resetinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ApplyResetPawRequest::release_resetinfo() {
  // @@protoc_insertion_point(field_release:micromsg.ApplyResetPawRequest.ResetInfo)
  clear_has_resetinfo();
  return resetinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ApplyResetPawRequest::set_allocated_resetinfo(::std::string* resetinfo) {
  if (resetinfo != NULL) {
    set_has_resetinfo();
  } else {
    clear_has_resetinfo();
  }
  resetinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resetinfo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ApplyResetPawRequest.ResetInfo)
}

// optional uint32 GetMethod = 4;
bool ApplyResetPawRequest::has_getmethod() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ApplyResetPawRequest::set_has_getmethod() {
  _has_bits_[0] |= 0x00000010u;
}
void ApplyResetPawRequest::clear_has_getmethod() {
  _has_bits_[0] &= ~0x00000010u;
}
void ApplyResetPawRequest::clear_getmethod() {
  getmethod_ = 0u;
  clear_has_getmethod();
}
::google::protobuf::uint32 ApplyResetPawRequest::getmethod() const {
  // @@protoc_insertion_point(field_get:micromsg.ApplyResetPawRequest.GetMethod)
  return getmethod_;
}
void ApplyResetPawRequest::set_getmethod(::google::protobuf::uint32 value) {
  set_has_getmethod();
  getmethod_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ApplyResetPawRequest.GetMethod)
}

// optional .micromsg.SKBuiltinBuffer_t RandomEncryKey = 5;
bool ApplyResetPawRequest::has_randomencrykey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ApplyResetPawRequest::set_has_randomencrykey() {
  _has_bits_[0] |= 0x00000004u;
}
void ApplyResetPawRequest::clear_has_randomencrykey() {
  _has_bits_[0] &= ~0x00000004u;
}
void ApplyResetPawRequest::clear_randomencrykey() {
  if (randomencrykey_ != NULL) randomencrykey_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_randomencrykey();
}
const ::micromsg::SKBuiltinBuffer_t& ApplyResetPawRequest::randomencrykey() const {
  // @@protoc_insertion_point(field_get:micromsg.ApplyResetPawRequest.RandomEncryKey)
  return randomencrykey_ != NULL ? *randomencrykey_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* ApplyResetPawRequest::mutable_randomencrykey() {
  set_has_randomencrykey();
  if (randomencrykey_ == NULL) {
    randomencrykey_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ApplyResetPawRequest.RandomEncryKey)
  return randomencrykey_;
}
::micromsg::SKBuiltinBuffer_t* ApplyResetPawRequest::release_randomencrykey() {
  // @@protoc_insertion_point(field_release:micromsg.ApplyResetPawRequest.RandomEncryKey)
  clear_has_randomencrykey();
  ::micromsg::SKBuiltinBuffer_t* temp = randomencrykey_;
  randomencrykey_ = NULL;
  return temp;
}
void ApplyResetPawRequest::set_allocated_randomencrykey(::micromsg::SKBuiltinBuffer_t* randomencrykey) {
  delete randomencrykey_;
  randomencrykey_ = randomencrykey;
  if (randomencrykey) {
    set_has_randomencrykey();
  } else {
    clear_has_randomencrykey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ApplyResetPawRequest.RandomEncryKey)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ApplyResetPawResponse::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyResetPawResponse::ApplyResetPawResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ApplyResetPawResponse)
}
ApplyResetPawResponse::ApplyResetPawResponse(const ApplyResetPawResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.ApplyResetPawResponse)
}

void ApplyResetPawResponse::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

ApplyResetPawResponse::~ApplyResetPawResponse() {
  // @@protoc_insertion_point(destructor:micromsg.ApplyResetPawResponse)
  SharedDtor();
}

void ApplyResetPawResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void ApplyResetPawResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyResetPawResponse::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ApplyResetPawResponse& ApplyResetPawResponse::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

ApplyResetPawResponse* ApplyResetPawResponse::New(::google::protobuf::Arena* arena) const {
  ApplyResetPawResponse* n = new ApplyResetPawResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ApplyResetPawResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ApplyResetPawResponse)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ApplyResetPawResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ApplyResetPawResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ApplyResetPawResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ApplyResetPawResponse)
  return false;
#undef DO_
}

void ApplyResetPawResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ApplyResetPawResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ApplyResetPawResponse)
}

::google::protobuf::uint8* ApplyResetPawResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ApplyResetPawResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ApplyResetPawResponse)
  return target;
}

size_t ApplyResetPawResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ApplyResetPawResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyResetPawResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ApplyResetPawResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyResetPawResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ApplyResetPawResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ApplyResetPawResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ApplyResetPawResponse)
    MergeFrom(*source);
  }
}

void ApplyResetPawResponse::MergeFrom(const ApplyResetPawResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ApplyResetPawResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void ApplyResetPawResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ApplyResetPawResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyResetPawResponse::CopyFrom(const ApplyResetPawResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ApplyResetPawResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyResetPawResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void ApplyResetPawResponse::Swap(ApplyResetPawResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyResetPawResponse::InternalSwap(ApplyResetPawResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ApplyResetPawResponse::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ApplyResetPawResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool ApplyResetPawResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ApplyResetPawResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void ApplyResetPawResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void ApplyResetPawResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& ApplyResetPawResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.ApplyResetPawResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* ApplyResetPawResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ApplyResetPawResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* ApplyResetPawResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.ApplyResetPawResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void ApplyResetPawResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ApplyResetPawResponse.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetWeiBoURLReq::kBaseRequestFieldNumber;
const int GetWeiBoURLReq::kA2KeyFieldNumber;
const int GetWeiBoURLReq::kUserNameFieldNumber;
const int GetWeiBoURLReq::kSceneFieldNumber;
const int GetWeiBoURLReq::kBlogUserNameFieldNumber;
const int GetWeiBoURLReq::kA2KeyNewFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetWeiBoURLReq::GetWeiBoURLReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetWeiBoURLReq)
}
GetWeiBoURLReq::GetWeiBoURLReq(const GetWeiBoURLReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  blogusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_blogusername()) {
    blogusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blogusername_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_a2key()) {
    a2key_ = new ::micromsg::SKBuiltinBuffer_t(*from.a2key_);
  } else {
    a2key_ = NULL;
  }
  if (from.has_a2keynew()) {
    a2keynew_ = new ::micromsg::SKBuiltinBuffer_t(*from.a2keynew_);
  } else {
    a2keynew_ = NULL;
  }
  scene_ = from.scene_;
  // @@protoc_insertion_point(copy_constructor:micromsg.GetWeiBoURLReq)
}

void GetWeiBoURLReq::SharedCtor() {
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blogusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&scene_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(scene_));
}

GetWeiBoURLReq::~GetWeiBoURLReq() {
  // @@protoc_insertion_point(destructor:micromsg.GetWeiBoURLReq)
  SharedDtor();
}

void GetWeiBoURLReq::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blogusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete a2key_;
  }
  if (this != internal_default_instance()) {
    delete a2keynew_;
  }
}

void GetWeiBoURLReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetWeiBoURLReq::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetWeiBoURLReq& GetWeiBoURLReq::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetWeiBoURLReq* GetWeiBoURLReq::New(::google::protobuf::Arena* arena) const {
  GetWeiBoURLReq* n = new GetWeiBoURLReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetWeiBoURLReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetWeiBoURLReq)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_username()) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
    if (has_blogusername()) {
      GOOGLE_DCHECK(!blogusername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*blogusername_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_a2key()) {
      GOOGLE_DCHECK(a2key_ != NULL);
      a2key_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_a2keynew()) {
      GOOGLE_DCHECK(a2keynew_ != NULL);
      a2keynew_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  scene_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetWeiBoURLReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetWeiBoURLReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t A2Key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_a2key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string UserName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetWeiBoURLReq.UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Scene = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_scene();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string BlogUserName = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_blogusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->blogusername().data(), this->blogusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetWeiBoURLReq.BlogUserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t A2KeyNew = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_a2keynew()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetWeiBoURLReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetWeiBoURLReq)
  return false;
#undef DO_
}

void GetWeiBoURLReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetWeiBoURLReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required .micromsg.SKBuiltinBuffer_t A2Key = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->a2key_, output);
  }

  // optional string UserName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetWeiBoURLReq.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->username(), output);
  }

  // optional uint32 Scene = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->scene(), output);
  }

  // optional string BlogUserName = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blogusername().data(), this->blogusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetWeiBoURLReq.BlogUserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->blogusername(), output);
  }

  // optional .micromsg.SKBuiltinBuffer_t A2KeyNew = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->a2keynew_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetWeiBoURLReq)
}

::google::protobuf::uint8* GetWeiBoURLReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetWeiBoURLReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t A2Key = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->a2key_, deterministic, target);
  }

  // optional string UserName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetWeiBoURLReq.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }

  // optional uint32 Scene = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->scene(), target);
  }

  // optional string BlogUserName = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blogusername().data(), this->blogusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetWeiBoURLReq.BlogUserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->blogusername(), target);
  }

  // optional .micromsg.SKBuiltinBuffer_t A2KeyNew = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->a2keynew_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetWeiBoURLReq)
  return target;
}

size_t GetWeiBoURLReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetWeiBoURLReq)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_a2key()) {
    // required .micromsg.SKBuiltinBuffer_t A2Key = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->a2key_);
  }

  return total_size;
}
size_t GetWeiBoURLReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetWeiBoURLReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.SKBuiltinBuffer_t A2Key = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->a2key_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string UserName = 3;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string BlogUserName = 5;
    if (has_blogusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->blogusername());
    }

  }
  if (_has_bits_[0 / 32] & 48u) {
    // optional .micromsg.SKBuiltinBuffer_t A2KeyNew = 6;
    if (has_a2keynew()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->a2keynew_);
    }

    // optional uint32 Scene = 4;
    if (has_scene()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetWeiBoURLReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetWeiBoURLReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetWeiBoURLReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetWeiBoURLReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetWeiBoURLReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetWeiBoURLReq)
    MergeFrom(*source);
  }
}

void GetWeiBoURLReq::MergeFrom(const GetWeiBoURLReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetWeiBoURLReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_blogusername();
      blogusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blogusername_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_a2key()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.a2key());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_a2keynew()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.a2keynew());
    }
    if (cached_has_bits & 0x00000020u) {
      scene_ = from.scene_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetWeiBoURLReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetWeiBoURLReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetWeiBoURLReq::CopyFrom(const GetWeiBoURLReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetWeiBoURLReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWeiBoURLReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_a2key()) {
    if (!this->a2key_->IsInitialized()) return false;
  }
  if (has_a2keynew()) {
    if (!this->a2keynew_->IsInitialized()) return false;
  }
  return true;
}

void GetWeiBoURLReq::Swap(GetWeiBoURLReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetWeiBoURLReq::InternalSwap(GetWeiBoURLReq* other) {
  username_.Swap(&other->username_);
  blogusername_.Swap(&other->blogusername_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(a2key_, other->a2key_);
  std::swap(a2keynew_, other->a2keynew_);
  std::swap(scene_, other->scene_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetWeiBoURLReq::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetWeiBoURLReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool GetWeiBoURLReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetWeiBoURLReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
void GetWeiBoURLReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetWeiBoURLReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GetWeiBoURLReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetWeiBoURLReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GetWeiBoURLReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetWeiBoURLReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GetWeiBoURLReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetWeiBoURLReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GetWeiBoURLReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetWeiBoURLReq.BaseRequest)
}

// required .micromsg.SKBuiltinBuffer_t A2Key = 2;
bool GetWeiBoURLReq::has_a2key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetWeiBoURLReq::set_has_a2key() {
  _has_bits_[0] |= 0x00000008u;
}
void GetWeiBoURLReq::clear_has_a2key() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetWeiBoURLReq::clear_a2key() {
  if (a2key_ != NULL) a2key_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_a2key();
}
const ::micromsg::SKBuiltinBuffer_t& GetWeiBoURLReq::a2key() const {
  // @@protoc_insertion_point(field_get:micromsg.GetWeiBoURLReq.A2Key)
  return a2key_ != NULL ? *a2key_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* GetWeiBoURLReq::mutable_a2key() {
  set_has_a2key();
  if (a2key_ == NULL) {
    a2key_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetWeiBoURLReq.A2Key)
  return a2key_;
}
::micromsg::SKBuiltinBuffer_t* GetWeiBoURLReq::release_a2key() {
  // @@protoc_insertion_point(field_release:micromsg.GetWeiBoURLReq.A2Key)
  clear_has_a2key();
  ::micromsg::SKBuiltinBuffer_t* temp = a2key_;
  a2key_ = NULL;
  return temp;
}
void GetWeiBoURLReq::set_allocated_a2key(::micromsg::SKBuiltinBuffer_t* a2key) {
  delete a2key_;
  a2key_ = a2key;
  if (a2key) {
    set_has_a2key();
  } else {
    clear_has_a2key();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetWeiBoURLReq.A2Key)
}

// optional string UserName = 3;
bool GetWeiBoURLReq::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetWeiBoURLReq::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void GetWeiBoURLReq::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetWeiBoURLReq::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& GetWeiBoURLReq::username() const {
  // @@protoc_insertion_point(field_get:micromsg.GetWeiBoURLReq.UserName)
  return username_.GetNoArena();
}
void GetWeiBoURLReq::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetWeiBoURLReq.UserName)
}
#if LANG_CXX11
void GetWeiBoURLReq::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetWeiBoURLReq.UserName)
}
#endif
void GetWeiBoURLReq::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetWeiBoURLReq.UserName)
}
void GetWeiBoURLReq::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetWeiBoURLReq.UserName)
}
::std::string* GetWeiBoURLReq::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.GetWeiBoURLReq.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetWeiBoURLReq::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.GetWeiBoURLReq.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetWeiBoURLReq::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetWeiBoURLReq.UserName)
}

// optional uint32 Scene = 4;
bool GetWeiBoURLReq::has_scene() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GetWeiBoURLReq::set_has_scene() {
  _has_bits_[0] |= 0x00000020u;
}
void GetWeiBoURLReq::clear_has_scene() {
  _has_bits_[0] &= ~0x00000020u;
}
void GetWeiBoURLReq::clear_scene() {
  scene_ = 0u;
  clear_has_scene();
}
::google::protobuf::uint32 GetWeiBoURLReq::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.GetWeiBoURLReq.Scene)
  return scene_;
}
void GetWeiBoURLReq::set_scene(::google::protobuf::uint32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetWeiBoURLReq.Scene)
}

// optional string BlogUserName = 5;
bool GetWeiBoURLReq::has_blogusername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetWeiBoURLReq::set_has_blogusername() {
  _has_bits_[0] |= 0x00000002u;
}
void GetWeiBoURLReq::clear_has_blogusername() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetWeiBoURLReq::clear_blogusername() {
  blogusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_blogusername();
}
const ::std::string& GetWeiBoURLReq::blogusername() const {
  // @@protoc_insertion_point(field_get:micromsg.GetWeiBoURLReq.BlogUserName)
  return blogusername_.GetNoArena();
}
void GetWeiBoURLReq::set_blogusername(const ::std::string& value) {
  set_has_blogusername();
  blogusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetWeiBoURLReq.BlogUserName)
}
#if LANG_CXX11
void GetWeiBoURLReq::set_blogusername(::std::string&& value) {
  set_has_blogusername();
  blogusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetWeiBoURLReq.BlogUserName)
}
#endif
void GetWeiBoURLReq::set_blogusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_blogusername();
  blogusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetWeiBoURLReq.BlogUserName)
}
void GetWeiBoURLReq::set_blogusername(const char* value, size_t size) {
  set_has_blogusername();
  blogusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetWeiBoURLReq.BlogUserName)
}
::std::string* GetWeiBoURLReq::mutable_blogusername() {
  set_has_blogusername();
  // @@protoc_insertion_point(field_mutable:micromsg.GetWeiBoURLReq.BlogUserName)
  return blogusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetWeiBoURLReq::release_blogusername() {
  // @@protoc_insertion_point(field_release:micromsg.GetWeiBoURLReq.BlogUserName)
  clear_has_blogusername();
  return blogusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetWeiBoURLReq::set_allocated_blogusername(::std::string* blogusername) {
  if (blogusername != NULL) {
    set_has_blogusername();
  } else {
    clear_has_blogusername();
  }
  blogusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), blogusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetWeiBoURLReq.BlogUserName)
}

// optional .micromsg.SKBuiltinBuffer_t A2KeyNew = 6;
bool GetWeiBoURLReq::has_a2keynew() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GetWeiBoURLReq::set_has_a2keynew() {
  _has_bits_[0] |= 0x00000010u;
}
void GetWeiBoURLReq::clear_has_a2keynew() {
  _has_bits_[0] &= ~0x00000010u;
}
void GetWeiBoURLReq::clear_a2keynew() {
  if (a2keynew_ != NULL) a2keynew_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_a2keynew();
}
const ::micromsg::SKBuiltinBuffer_t& GetWeiBoURLReq::a2keynew() const {
  // @@protoc_insertion_point(field_get:micromsg.GetWeiBoURLReq.A2KeyNew)
  return a2keynew_ != NULL ? *a2keynew_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* GetWeiBoURLReq::mutable_a2keynew() {
  set_has_a2keynew();
  if (a2keynew_ == NULL) {
    a2keynew_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetWeiBoURLReq.A2KeyNew)
  return a2keynew_;
}
::micromsg::SKBuiltinBuffer_t* GetWeiBoURLReq::release_a2keynew() {
  // @@protoc_insertion_point(field_release:micromsg.GetWeiBoURLReq.A2KeyNew)
  clear_has_a2keynew();
  ::micromsg::SKBuiltinBuffer_t* temp = a2keynew_;
  a2keynew_ = NULL;
  return temp;
}
void GetWeiBoURLReq::set_allocated_a2keynew(::micromsg::SKBuiltinBuffer_t* a2keynew) {
  delete a2keynew_;
  a2keynew_ = a2keynew;
  if (a2keynew) {
    set_has_a2keynew();
  } else {
    clear_has_a2keynew();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetWeiBoURLReq.A2KeyNew)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetWeiBoURLResp::kBaseResponseFieldNumber;
const int GetWeiBoURLResp::kURLFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetWeiBoURLResp::GetWeiBoURLResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetWeiBoURLResp)
}
GetWeiBoURLResp::GetWeiBoURLResp(const GetWeiBoURLResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GetWeiBoURLResp)
}

void GetWeiBoURLResp::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baseresponse_ = NULL;
}

GetWeiBoURLResp::~GetWeiBoURLResp() {
  // @@protoc_insertion_point(destructor:micromsg.GetWeiBoURLResp)
  SharedDtor();
}

void GetWeiBoURLResp::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void GetWeiBoURLResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetWeiBoURLResp::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetWeiBoURLResp& GetWeiBoURLResp::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetWeiBoURLResp* GetWeiBoURLResp::New(::google::protobuf::Arena* arena) const {
  GetWeiBoURLResp* n = new GetWeiBoURLResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetWeiBoURLResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetWeiBoURLResp)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetWeiBoURLResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetWeiBoURLResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string URL = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetWeiBoURLResp.URL");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetWeiBoURLResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetWeiBoURLResp)
  return false;
#undef DO_
}

void GetWeiBoURLResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetWeiBoURLResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional string URL = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetWeiBoURLResp.URL");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetWeiBoURLResp)
}

::google::protobuf::uint8* GetWeiBoURLResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetWeiBoURLResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional string URL = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetWeiBoURLResp.URL");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetWeiBoURLResp)
  return target;
}

size_t GetWeiBoURLResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetWeiBoURLResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  // optional string URL = 2;
  if (has_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetWeiBoURLResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetWeiBoURLResp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetWeiBoURLResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetWeiBoURLResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetWeiBoURLResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetWeiBoURLResp)
    MergeFrom(*source);
  }
}

void GetWeiBoURLResp::MergeFrom(const GetWeiBoURLResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetWeiBoURLResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
  }
}

void GetWeiBoURLResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetWeiBoURLResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetWeiBoURLResp::CopyFrom(const GetWeiBoURLResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetWeiBoURLResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWeiBoURLResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void GetWeiBoURLResp::Swap(GetWeiBoURLResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetWeiBoURLResp::InternalSwap(GetWeiBoURLResp* other) {
  url_.Swap(&other->url_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetWeiBoURLResp::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetWeiBoURLResp

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetWeiBoURLResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetWeiBoURLResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
void GetWeiBoURLResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetWeiBoURLResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetWeiBoURLResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetWeiBoURLResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetWeiBoURLResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetWeiBoURLResp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetWeiBoURLResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetWeiBoURLResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetWeiBoURLResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetWeiBoURLResp.BaseResponse)
}

// optional string URL = 2;
bool GetWeiBoURLResp::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetWeiBoURLResp::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void GetWeiBoURLResp::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetWeiBoURLResp::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& GetWeiBoURLResp::url() const {
  // @@protoc_insertion_point(field_get:micromsg.GetWeiBoURLResp.URL)
  return url_.GetNoArena();
}
void GetWeiBoURLResp::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetWeiBoURLResp.URL)
}
#if LANG_CXX11
void GetWeiBoURLResp::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetWeiBoURLResp.URL)
}
#endif
void GetWeiBoURLResp::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetWeiBoURLResp.URL)
}
void GetWeiBoURLResp::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetWeiBoURLResp.URL)
}
::std::string* GetWeiBoURLResp::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:micromsg.GetWeiBoURLResp.URL)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetWeiBoURLResp::release_url() {
  // @@protoc_insertion_point(field_release:micromsg.GetWeiBoURLResp.URL)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetWeiBoURLResp::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetWeiBoURLResp.URL)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetUserNameRequest::kBaseRequestFieldNumber;
const int GetUserNameRequest::kBindUinFieldNumber;
const int GetUserNameRequest::kNickNameFieldNumber;
const int GetUserNameRequest::kTicketFieldNumber;
const int GetUserNameRequest::kPwdFieldNumber;
const int GetUserNameRequest::kMobileFieldNumber;
const int GetUserNameRequest::kOpCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetUserNameRequest::GetUserNameRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetUserNameRequest)
}
GetUserNameRequest::GetUserNameRequest(const GetUserNameRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nickname()) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ticket()) {
    ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
  }
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pwd()) {
    pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  mobile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mobile()) {
    mobile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mobile_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&binduin_, &from.binduin_,
    reinterpret_cast<char*>(&opcode_) -
    reinterpret_cast<char*>(&binduin_) + sizeof(opcode_));
  // @@protoc_insertion_point(copy_constructor:micromsg.GetUserNameRequest)
}

void GetUserNameRequest::SharedCtor() {
  _cached_size_ = 0;
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&opcode_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(opcode_));
}

GetUserNameRequest::~GetUserNameRequest() {
  // @@protoc_insertion_point(destructor:micromsg.GetUserNameRequest)
  SharedDtor();
}

void GetUserNameRequest::SharedDtor() {
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GetUserNameRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUserNameRequest::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetUserNameRequest& GetUserNameRequest::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetUserNameRequest* GetUserNameRequest::New(::google::protobuf::Arena* arena) const {
  GetUserNameRequest* n = new GetUserNameRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetUserNameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetUserNameRequest)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_nickname()) {
      GOOGLE_DCHECK(!nickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*nickname_.UnsafeRawStringPointer())->clear();
    }
    if (has_ticket()) {
      GOOGLE_DCHECK(!ticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ticket_.UnsafeRawStringPointer())->clear();
    }
    if (has_pwd()) {
      GOOGLE_DCHECK(!pwd_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pwd_.UnsafeRawStringPointer())->clear();
    }
    if (has_mobile()) {
      GOOGLE_DCHECK(!mobile_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mobile_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 96u) {
    ::memset(&binduin_, 0, reinterpret_cast<char*>(&opcode_) -
      reinterpret_cast<char*>(&binduin_) + sizeof(opcode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetUserNameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetUserNameRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 BindUin = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_binduin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &binduin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string NickName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetUserNameRequest.NickName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Ticket = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ticket().data(), this->ticket().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetUserNameRequest.Ticket");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Pwd = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pwd().data(), this->pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetUserNameRequest.Pwd");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Mobile = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mobile().data(), this->mobile().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetUserNameRequest.Mobile");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 OpCode = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_opcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetUserNameRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetUserNameRequest)
  return false;
#undef DO_
}

void GetUserNameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetUserNameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 BindUin = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->binduin(), output);
  }

  // optional string NickName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetUserNameRequest.NickName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nickname(), output);
  }

  // optional string Ticket = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ticket().data(), this->ticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetUserNameRequest.Ticket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ticket(), output);
  }

  // optional string Pwd = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetUserNameRequest.Pwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->pwd(), output);
  }

  // optional string Mobile = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mobile().data(), this->mobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetUserNameRequest.Mobile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->mobile(), output);
  }

  // optional uint32 OpCode = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->opcode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetUserNameRequest)
}

::google::protobuf::uint8* GetUserNameRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetUserNameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 BindUin = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->binduin(), target);
  }

  // optional string NickName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetUserNameRequest.NickName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  // optional string Ticket = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ticket().data(), this->ticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetUserNameRequest.Ticket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ticket(), target);
  }

  // optional string Pwd = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetUserNameRequest.Pwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->pwd(), target);
  }

  // optional string Mobile = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mobile().data(), this->mobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetUserNameRequest.Mobile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->mobile(), target);
  }

  // optional uint32 OpCode = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->opcode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetUserNameRequest)
  return target;
}

size_t GetUserNameRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetUserNameRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_binduin()) {
    // required uint32 BindUin = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->binduin());
  }

  return total_size;
}
size_t GetUserNameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetUserNameRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000030) ^ 0x00000030) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 BindUin = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->binduin());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string NickName = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string Ticket = 4;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ticket());
    }

    // optional string Pwd = 5;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }

    // optional string Mobile = 6;
    if (has_mobile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobile());
    }

  }
  // optional uint32 OpCode = 7;
  if (has_opcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserNameRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetUserNameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetUserNameRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetUserNameRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetUserNameRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetUserNameRequest)
    MergeFrom(*source);
  }
}

void GetUserNameRequest::MergeFrom(const GetUserNameRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetUserNameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_ticket();
      ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_pwd();
      pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_mobile();
      mobile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mobile_);
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000020u) {
      binduin_ = from.binduin_;
    }
    if (cached_has_bits & 0x00000040u) {
      opcode_ = from.opcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetUserNameRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetUserNameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserNameRequest::CopyFrom(const GetUserNameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetUserNameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserNameRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000030) != 0x00000030) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GetUserNameRequest::Swap(GetUserNameRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetUserNameRequest::InternalSwap(GetUserNameRequest* other) {
  nickname_.Swap(&other->nickname_);
  ticket_.Swap(&other->ticket_);
  pwd_.Swap(&other->pwd_);
  mobile_.Swap(&other->mobile_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(binduin_, other->binduin_);
  std::swap(opcode_, other->opcode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetUserNameRequest::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetUserNameRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool GetUserNameRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GetUserNameRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000010u;
}
void GetUserNameRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000010u;
}
void GetUserNameRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GetUserNameRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetUserNameRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GetUserNameRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetUserNameRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GetUserNameRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetUserNameRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GetUserNameRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetUserNameRequest.BaseRequest)
}

// required uint32 BindUin = 2;
bool GetUserNameRequest::has_binduin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GetUserNameRequest::set_has_binduin() {
  _has_bits_[0] |= 0x00000020u;
}
void GetUserNameRequest::clear_has_binduin() {
  _has_bits_[0] &= ~0x00000020u;
}
void GetUserNameRequest::clear_binduin() {
  binduin_ = 0u;
  clear_has_binduin();
}
::google::protobuf::uint32 GetUserNameRequest::binduin() const {
  // @@protoc_insertion_point(field_get:micromsg.GetUserNameRequest.BindUin)
  return binduin_;
}
void GetUserNameRequest::set_binduin(::google::protobuf::uint32 value) {
  set_has_binduin();
  binduin_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetUserNameRequest.BindUin)
}

// optional string NickName = 3;
bool GetUserNameRequest::has_nickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetUserNameRequest::set_has_nickname() {
  _has_bits_[0] |= 0x00000001u;
}
void GetUserNameRequest::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetUserNameRequest::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
const ::std::string& GetUserNameRequest::nickname() const {
  // @@protoc_insertion_point(field_get:micromsg.GetUserNameRequest.NickName)
  return nickname_.GetNoArena();
}
void GetUserNameRequest::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetUserNameRequest.NickName)
}
#if LANG_CXX11
void GetUserNameRequest::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetUserNameRequest.NickName)
}
#endif
void GetUserNameRequest::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetUserNameRequest.NickName)
}
void GetUserNameRequest::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetUserNameRequest.NickName)
}
::std::string* GetUserNameRequest::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:micromsg.GetUserNameRequest.NickName)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetUserNameRequest::release_nickname() {
  // @@protoc_insertion_point(field_release:micromsg.GetUserNameRequest.NickName)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetUserNameRequest::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetUserNameRequest.NickName)
}

// optional string Ticket = 4;
bool GetUserNameRequest::has_ticket() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetUserNameRequest::set_has_ticket() {
  _has_bits_[0] |= 0x00000002u;
}
void GetUserNameRequest::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetUserNameRequest::clear_ticket() {
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ticket();
}
const ::std::string& GetUserNameRequest::ticket() const {
  // @@protoc_insertion_point(field_get:micromsg.GetUserNameRequest.Ticket)
  return ticket_.GetNoArena();
}
void GetUserNameRequest::set_ticket(const ::std::string& value) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetUserNameRequest.Ticket)
}
#if LANG_CXX11
void GetUserNameRequest::set_ticket(::std::string&& value) {
  set_has_ticket();
  ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetUserNameRequest.Ticket)
}
#endif
void GetUserNameRequest::set_ticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetUserNameRequest.Ticket)
}
void GetUserNameRequest::set_ticket(const char* value, size_t size) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetUserNameRequest.Ticket)
}
::std::string* GetUserNameRequest::mutable_ticket() {
  set_has_ticket();
  // @@protoc_insertion_point(field_mutable:micromsg.GetUserNameRequest.Ticket)
  return ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetUserNameRequest::release_ticket() {
  // @@protoc_insertion_point(field_release:micromsg.GetUserNameRequest.Ticket)
  clear_has_ticket();
  return ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetUserNameRequest::set_allocated_ticket(::std::string* ticket) {
  if (ticket != NULL) {
    set_has_ticket();
  } else {
    clear_has_ticket();
  }
  ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticket);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetUserNameRequest.Ticket)
}

// optional string Pwd = 5;
bool GetUserNameRequest::has_pwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetUserNameRequest::set_has_pwd() {
  _has_bits_[0] |= 0x00000004u;
}
void GetUserNameRequest::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetUserNameRequest::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pwd();
}
const ::std::string& GetUserNameRequest::pwd() const {
  // @@protoc_insertion_point(field_get:micromsg.GetUserNameRequest.Pwd)
  return pwd_.GetNoArena();
}
void GetUserNameRequest::set_pwd(const ::std::string& value) {
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetUserNameRequest.Pwd)
}
#if LANG_CXX11
void GetUserNameRequest::set_pwd(::std::string&& value) {
  set_has_pwd();
  pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetUserNameRequest.Pwd)
}
#endif
void GetUserNameRequest::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetUserNameRequest.Pwd)
}
void GetUserNameRequest::set_pwd(const char* value, size_t size) {
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetUserNameRequest.Pwd)
}
::std::string* GetUserNameRequest::mutable_pwd() {
  set_has_pwd();
  // @@protoc_insertion_point(field_mutable:micromsg.GetUserNameRequest.Pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetUserNameRequest::release_pwd() {
  // @@protoc_insertion_point(field_release:micromsg.GetUserNameRequest.Pwd)
  clear_has_pwd();
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetUserNameRequest::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    set_has_pwd();
  } else {
    clear_has_pwd();
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetUserNameRequest.Pwd)
}

// optional string Mobile = 6;
bool GetUserNameRequest::has_mobile() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetUserNameRequest::set_has_mobile() {
  _has_bits_[0] |= 0x00000008u;
}
void GetUserNameRequest::clear_has_mobile() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetUserNameRequest::clear_mobile() {
  mobile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mobile();
}
const ::std::string& GetUserNameRequest::mobile() const {
  // @@protoc_insertion_point(field_get:micromsg.GetUserNameRequest.Mobile)
  return mobile_.GetNoArena();
}
void GetUserNameRequest::set_mobile(const ::std::string& value) {
  set_has_mobile();
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetUserNameRequest.Mobile)
}
#if LANG_CXX11
void GetUserNameRequest::set_mobile(::std::string&& value) {
  set_has_mobile();
  mobile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetUserNameRequest.Mobile)
}
#endif
void GetUserNameRequest::set_mobile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mobile();
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetUserNameRequest.Mobile)
}
void GetUserNameRequest::set_mobile(const char* value, size_t size) {
  set_has_mobile();
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetUserNameRequest.Mobile)
}
::std::string* GetUserNameRequest::mutable_mobile() {
  set_has_mobile();
  // @@protoc_insertion_point(field_mutable:micromsg.GetUserNameRequest.Mobile)
  return mobile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetUserNameRequest::release_mobile() {
  // @@protoc_insertion_point(field_release:micromsg.GetUserNameRequest.Mobile)
  clear_has_mobile();
  return mobile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetUserNameRequest::set_allocated_mobile(::std::string* mobile) {
  if (mobile != NULL) {
    set_has_mobile();
  } else {
    clear_has_mobile();
  }
  mobile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mobile);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetUserNameRequest.Mobile)
}

// optional uint32 OpCode = 7;
bool GetUserNameRequest::has_opcode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GetUserNameRequest::set_has_opcode() {
  _has_bits_[0] |= 0x00000040u;
}
void GetUserNameRequest::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000040u;
}
void GetUserNameRequest::clear_opcode() {
  opcode_ = 0u;
  clear_has_opcode();
}
::google::protobuf::uint32 GetUserNameRequest::opcode() const {
  // @@protoc_insertion_point(field_get:micromsg.GetUserNameRequest.OpCode)
  return opcode_;
}
void GetUserNameRequest::set_opcode(::google::protobuf::uint32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetUserNameRequest.OpCode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetUserNameResponse::kBaseResponseFieldNumber;
const int GetUserNameResponse::kUserNameFieldNumber;
const int GetUserNameResponse::kTicketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetUserNameResponse::GetUserNameResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetUserNameResponse)
}
GetUserNameResponse::GetUserNameResponse(const GetUserNameResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ticket()) {
    ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GetUserNameResponse)
}

void GetUserNameResponse::SharedCtor() {
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baseresponse_ = NULL;
}

GetUserNameResponse::~GetUserNameResponse() {
  // @@protoc_insertion_point(destructor:micromsg.GetUserNameResponse)
  SharedDtor();
}

void GetUserNameResponse::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void GetUserNameResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUserNameResponse::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetUserNameResponse& GetUserNameResponse::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetUserNameResponse* GetUserNameResponse::New(::google::protobuf::Arena* arena) const {
  GetUserNameResponse* n = new GetUserNameResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetUserNameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetUserNameResponse)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_username()) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
    if (has_ticket()) {
      GOOGLE_DCHECK(!ticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ticket_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetUserNameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetUserNameResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string UserName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetUserNameResponse.UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Ticket = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ticket().data(), this->ticket().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetUserNameResponse.Ticket");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetUserNameResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetUserNameResponse)
  return false;
#undef DO_
}

void GetUserNameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetUserNameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional string UserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetUserNameResponse.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // optional string Ticket = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ticket().data(), this->ticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetUserNameResponse.Ticket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ticket(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetUserNameResponse)
}

::google::protobuf::uint8* GetUserNameResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetUserNameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional string UserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetUserNameResponse.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // optional string Ticket = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ticket().data(), this->ticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetUserNameResponse.Ticket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ticket(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetUserNameResponse)
  return target;
}

size_t GetUserNameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetUserNameResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string UserName = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string Ticket = 3;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ticket());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserNameResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetUserNameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetUserNameResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetUserNameResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetUserNameResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetUserNameResponse)
    MergeFrom(*source);
  }
}

void GetUserNameResponse::MergeFrom(const GetUserNameResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetUserNameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_ticket();
      ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
  }
}

void GetUserNameResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetUserNameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserNameResponse::CopyFrom(const GetUserNameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetUserNameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserNameResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void GetUserNameResponse::Swap(GetUserNameResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetUserNameResponse::InternalSwap(GetUserNameResponse* other) {
  username_.Swap(&other->username_);
  ticket_.Swap(&other->ticket_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetUserNameResponse::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetUserNameResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetUserNameResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetUserNameResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000004u;
}
void GetUserNameResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetUserNameResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetUserNameResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetUserNameResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetUserNameResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetUserNameResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetUserNameResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetUserNameResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetUserNameResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetUserNameResponse.BaseResponse)
}

// optional string UserName = 2;
bool GetUserNameResponse::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetUserNameResponse::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void GetUserNameResponse::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetUserNameResponse::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& GetUserNameResponse::username() const {
  // @@protoc_insertion_point(field_get:micromsg.GetUserNameResponse.UserName)
  return username_.GetNoArena();
}
void GetUserNameResponse::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetUserNameResponse.UserName)
}
#if LANG_CXX11
void GetUserNameResponse::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetUserNameResponse.UserName)
}
#endif
void GetUserNameResponse::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetUserNameResponse.UserName)
}
void GetUserNameResponse::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetUserNameResponse.UserName)
}
::std::string* GetUserNameResponse::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.GetUserNameResponse.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetUserNameResponse::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.GetUserNameResponse.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetUserNameResponse::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetUserNameResponse.UserName)
}

// optional string Ticket = 3;
bool GetUserNameResponse::has_ticket() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetUserNameResponse::set_has_ticket() {
  _has_bits_[0] |= 0x00000002u;
}
void GetUserNameResponse::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetUserNameResponse::clear_ticket() {
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ticket();
}
const ::std::string& GetUserNameResponse::ticket() const {
  // @@protoc_insertion_point(field_get:micromsg.GetUserNameResponse.Ticket)
  return ticket_.GetNoArena();
}
void GetUserNameResponse::set_ticket(const ::std::string& value) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetUserNameResponse.Ticket)
}
#if LANG_CXX11
void GetUserNameResponse::set_ticket(::std::string&& value) {
  set_has_ticket();
  ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetUserNameResponse.Ticket)
}
#endif
void GetUserNameResponse::set_ticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetUserNameResponse.Ticket)
}
void GetUserNameResponse::set_ticket(const char* value, size_t size) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetUserNameResponse.Ticket)
}
::std::string* GetUserNameResponse::mutable_ticket() {
  set_has_ticket();
  // @@protoc_insertion_point(field_mutable:micromsg.GetUserNameResponse.Ticket)
  return ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetUserNameResponse::release_ticket() {
  // @@protoc_insertion_point(field_release:micromsg.GetUserNameResponse.Ticket)
  clear_has_ticket();
  return ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetUserNameResponse::set_allocated_ticket(::std::string* ticket) {
  if (ticket != NULL) {
    set_has_ticket();
  } else {
    clear_has_ticket();
  }
  ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticket);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetUserNameResponse.Ticket)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IphoneRegRequest::kBaseRequestFieldNumber;
const int IphoneRegRequest::kTokenFieldNumber;
const int IphoneRegRequest::kSoundFieldNumber;
const int IphoneRegRequest::kStatusFieldNumber;
const int IphoneRegRequest::kVoipSoundFieldNumber;
const int IphoneRegRequest::kTokenCertFieldNumber;
const int IphoneRegRequest::kTokenEnvFieldNumber;
const int IphoneRegRequest::kTokenSceneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IphoneRegRequest::IphoneRegRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.IphoneRegRequest)
}
IphoneRegRequest::IphoneRegRequest(const IphoneRegRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_token()) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  sound_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sound()) {
    sound_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sound_);
  }
  voipsound_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_voipsound()) {
    voipsound_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.voipsound_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&status_, &from.status_,
    reinterpret_cast<char*>(&tokenscene_) -
    reinterpret_cast<char*>(&status_) + sizeof(tokenscene_));
  // @@protoc_insertion_point(copy_constructor:micromsg.IphoneRegRequest)
}

void IphoneRegRequest::SharedCtor() {
  _cached_size_ = 0;
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sound_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  voipsound_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&tokenscene_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(tokenscene_));
}

IphoneRegRequest::~IphoneRegRequest() {
  // @@protoc_insertion_point(destructor:micromsg.IphoneRegRequest)
  SharedDtor();
}

void IphoneRegRequest::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sound_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  voipsound_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void IphoneRegRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IphoneRegRequest::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IphoneRegRequest& IphoneRegRequest::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

IphoneRegRequest* IphoneRegRequest::New(::google::protobuf::Arena* arena) const {
  IphoneRegRequest* n = new IphoneRegRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IphoneRegRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.IphoneRegRequest)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_token()) {
      GOOGLE_DCHECK(!token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*token_.UnsafeRawStringPointer())->clear();
    }
    if (has_sound()) {
      GOOGLE_DCHECK(!sound_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sound_.UnsafeRawStringPointer())->clear();
    }
    if (has_voipsound()) {
      GOOGLE_DCHECK(!voipsound_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*voipsound_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&status_, 0, reinterpret_cast<char*>(&tokenscene_) -
      reinterpret_cast<char*>(&status_) + sizeof(tokenscene_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IphoneRegRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.IphoneRegRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.IphoneRegRequest.Token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Sound = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sound()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sound().data(), this->sound().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.IphoneRegRequest.Sound");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string VoipSound = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_voipsound()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->voipsound().data(), this->voipsound().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.IphoneRegRequest.VoipSound");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 TokenCert = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_tokencert();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tokencert_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 TokenEnv = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_tokenenv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tokenenv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 TokenScene = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_tokenscene();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tokenscene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.IphoneRegRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.IphoneRegRequest)
  return false;
#undef DO_
}

void IphoneRegRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.IphoneRegRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string Token = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.IphoneRegRequest.Token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // optional string Sound = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sound().data(), this->sound().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.IphoneRegRequest.Sound");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sound(), output);
  }

  // optional uint32 Status = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->status(), output);
  }

  // optional string VoipSound = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->voipsound().data(), this->voipsound().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.IphoneRegRequest.VoipSound");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->voipsound(), output);
  }

  // optional uint32 TokenCert = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->tokencert(), output);
  }

  // optional uint32 TokenEnv = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->tokenenv(), output);
  }

  // optional uint32 TokenScene = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->tokenscene(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.IphoneRegRequest)
}

::google::protobuf::uint8* IphoneRegRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.IphoneRegRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string Token = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.IphoneRegRequest.Token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // optional string Sound = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sound().data(), this->sound().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.IphoneRegRequest.Sound");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sound(), target);
  }

  // optional uint32 Status = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->status(), target);
  }

  // optional string VoipSound = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->voipsound().data(), this->voipsound().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.IphoneRegRequest.VoipSound");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->voipsound(), target);
  }

  // optional uint32 TokenCert = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->tokencert(), target);
  }

  // optional uint32 TokenEnv = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->tokenenv(), target);
  }

  // optional uint32 TokenScene = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->tokenscene(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.IphoneRegRequest)
  return target;
}

size_t IphoneRegRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.IphoneRegRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string Token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional string Sound = 3;
    if (has_sound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sound());
    }

    // optional string VoipSound = 5;
    if (has_voipsound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->voipsound());
    }

  }
  if (_has_bits_[0 / 32] & 240u) {
    // optional uint32 Status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint32 TokenCert = 6;
    if (has_tokencert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tokencert());
    }

    // optional uint32 TokenEnv = 7;
    if (has_tokenenv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tokenenv());
    }

    // optional uint32 TokenScene = 8;
    if (has_tokenscene()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tokenscene());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IphoneRegRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.IphoneRegRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const IphoneRegRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IphoneRegRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.IphoneRegRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.IphoneRegRequest)
    MergeFrom(*source);
  }
}

void IphoneRegRequest::MergeFrom(const IphoneRegRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.IphoneRegRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_sound();
      sound_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sound_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_voipsound();
      voipsound_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.voipsound_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000010u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000020u) {
      tokencert_ = from.tokencert_;
    }
    if (cached_has_bits & 0x00000040u) {
      tokenenv_ = from.tokenenv_;
    }
    if (cached_has_bits & 0x00000080u) {
      tokenscene_ = from.tokenscene_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IphoneRegRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.IphoneRegRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IphoneRegRequest::CopyFrom(const IphoneRegRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.IphoneRegRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IphoneRegRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void IphoneRegRequest::Swap(IphoneRegRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IphoneRegRequest::InternalSwap(IphoneRegRequest* other) {
  token_.Swap(&other->token_);
  sound_.Swap(&other->sound_);
  voipsound_.Swap(&other->voipsound_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(status_, other->status_);
  std::swap(tokencert_, other->tokencert_);
  std::swap(tokenenv_, other->tokenenv_);
  std::swap(tokenscene_, other->tokenscene_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IphoneRegRequest::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IphoneRegRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool IphoneRegRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void IphoneRegRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000008u;
}
void IphoneRegRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000008u;
}
void IphoneRegRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& IphoneRegRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.IphoneRegRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* IphoneRegRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.IphoneRegRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* IphoneRegRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.IphoneRegRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void IphoneRegRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.IphoneRegRequest.BaseRequest)
}

// optional string Token = 2;
bool IphoneRegRequest::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IphoneRegRequest::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
void IphoneRegRequest::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void IphoneRegRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
const ::std::string& IphoneRegRequest::token() const {
  // @@protoc_insertion_point(field_get:micromsg.IphoneRegRequest.Token)
  return token_.GetNoArena();
}
void IphoneRegRequest::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.IphoneRegRequest.Token)
}
#if LANG_CXX11
void IphoneRegRequest::set_token(::std::string&& value) {
  set_has_token();
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.IphoneRegRequest.Token)
}
#endif
void IphoneRegRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.IphoneRegRequest.Token)
}
void IphoneRegRequest::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.IphoneRegRequest.Token)
}
::std::string* IphoneRegRequest::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:micromsg.IphoneRegRequest.Token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IphoneRegRequest::release_token() {
  // @@protoc_insertion_point(field_release:micromsg.IphoneRegRequest.Token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IphoneRegRequest::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:micromsg.IphoneRegRequest.Token)
}

// optional string Sound = 3;
bool IphoneRegRequest::has_sound() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IphoneRegRequest::set_has_sound() {
  _has_bits_[0] |= 0x00000002u;
}
void IphoneRegRequest::clear_has_sound() {
  _has_bits_[0] &= ~0x00000002u;
}
void IphoneRegRequest::clear_sound() {
  sound_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sound();
}
const ::std::string& IphoneRegRequest::sound() const {
  // @@protoc_insertion_point(field_get:micromsg.IphoneRegRequest.Sound)
  return sound_.GetNoArena();
}
void IphoneRegRequest::set_sound(const ::std::string& value) {
  set_has_sound();
  sound_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.IphoneRegRequest.Sound)
}
#if LANG_CXX11
void IphoneRegRequest::set_sound(::std::string&& value) {
  set_has_sound();
  sound_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.IphoneRegRequest.Sound)
}
#endif
void IphoneRegRequest::set_sound(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sound();
  sound_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.IphoneRegRequest.Sound)
}
void IphoneRegRequest::set_sound(const char* value, size_t size) {
  set_has_sound();
  sound_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.IphoneRegRequest.Sound)
}
::std::string* IphoneRegRequest::mutable_sound() {
  set_has_sound();
  // @@protoc_insertion_point(field_mutable:micromsg.IphoneRegRequest.Sound)
  return sound_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IphoneRegRequest::release_sound() {
  // @@protoc_insertion_point(field_release:micromsg.IphoneRegRequest.Sound)
  clear_has_sound();
  return sound_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IphoneRegRequest::set_allocated_sound(::std::string* sound) {
  if (sound != NULL) {
    set_has_sound();
  } else {
    clear_has_sound();
  }
  sound_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sound);
  // @@protoc_insertion_point(field_set_allocated:micromsg.IphoneRegRequest.Sound)
}

// optional uint32 Status = 4;
bool IphoneRegRequest::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void IphoneRegRequest::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
void IphoneRegRequest::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
void IphoneRegRequest::clear_status() {
  status_ = 0u;
  clear_has_status();
}
::google::protobuf::uint32 IphoneRegRequest::status() const {
  // @@protoc_insertion_point(field_get:micromsg.IphoneRegRequest.Status)
  return status_;
}
void IphoneRegRequest::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:micromsg.IphoneRegRequest.Status)
}

// optional string VoipSound = 5;
bool IphoneRegRequest::has_voipsound() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IphoneRegRequest::set_has_voipsound() {
  _has_bits_[0] |= 0x00000004u;
}
void IphoneRegRequest::clear_has_voipsound() {
  _has_bits_[0] &= ~0x00000004u;
}
void IphoneRegRequest::clear_voipsound() {
  voipsound_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_voipsound();
}
const ::std::string& IphoneRegRequest::voipsound() const {
  // @@protoc_insertion_point(field_get:micromsg.IphoneRegRequest.VoipSound)
  return voipsound_.GetNoArena();
}
void IphoneRegRequest::set_voipsound(const ::std::string& value) {
  set_has_voipsound();
  voipsound_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.IphoneRegRequest.VoipSound)
}
#if LANG_CXX11
void IphoneRegRequest::set_voipsound(::std::string&& value) {
  set_has_voipsound();
  voipsound_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.IphoneRegRequest.VoipSound)
}
#endif
void IphoneRegRequest::set_voipsound(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_voipsound();
  voipsound_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.IphoneRegRequest.VoipSound)
}
void IphoneRegRequest::set_voipsound(const char* value, size_t size) {
  set_has_voipsound();
  voipsound_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.IphoneRegRequest.VoipSound)
}
::std::string* IphoneRegRequest::mutable_voipsound() {
  set_has_voipsound();
  // @@protoc_insertion_point(field_mutable:micromsg.IphoneRegRequest.VoipSound)
  return voipsound_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IphoneRegRequest::release_voipsound() {
  // @@protoc_insertion_point(field_release:micromsg.IphoneRegRequest.VoipSound)
  clear_has_voipsound();
  return voipsound_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IphoneRegRequest::set_allocated_voipsound(::std::string* voipsound) {
  if (voipsound != NULL) {
    set_has_voipsound();
  } else {
    clear_has_voipsound();
  }
  voipsound_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), voipsound);
  // @@protoc_insertion_point(field_set_allocated:micromsg.IphoneRegRequest.VoipSound)
}

// optional uint32 TokenCert = 6;
bool IphoneRegRequest::has_tokencert() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void IphoneRegRequest::set_has_tokencert() {
  _has_bits_[0] |= 0x00000020u;
}
void IphoneRegRequest::clear_has_tokencert() {
  _has_bits_[0] &= ~0x00000020u;
}
void IphoneRegRequest::clear_tokencert() {
  tokencert_ = 0u;
  clear_has_tokencert();
}
::google::protobuf::uint32 IphoneRegRequest::tokencert() const {
  // @@protoc_insertion_point(field_get:micromsg.IphoneRegRequest.TokenCert)
  return tokencert_;
}
void IphoneRegRequest::set_tokencert(::google::protobuf::uint32 value) {
  set_has_tokencert();
  tokencert_ = value;
  // @@protoc_insertion_point(field_set:micromsg.IphoneRegRequest.TokenCert)
}

// optional uint32 TokenEnv = 7;
bool IphoneRegRequest::has_tokenenv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void IphoneRegRequest::set_has_tokenenv() {
  _has_bits_[0] |= 0x00000040u;
}
void IphoneRegRequest::clear_has_tokenenv() {
  _has_bits_[0] &= ~0x00000040u;
}
void IphoneRegRequest::clear_tokenenv() {
  tokenenv_ = 0u;
  clear_has_tokenenv();
}
::google::protobuf::uint32 IphoneRegRequest::tokenenv() const {
  // @@protoc_insertion_point(field_get:micromsg.IphoneRegRequest.TokenEnv)
  return tokenenv_;
}
void IphoneRegRequest::set_tokenenv(::google::protobuf::uint32 value) {
  set_has_tokenenv();
  tokenenv_ = value;
  // @@protoc_insertion_point(field_set:micromsg.IphoneRegRequest.TokenEnv)
}

// optional uint32 TokenScene = 8;
bool IphoneRegRequest::has_tokenscene() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void IphoneRegRequest::set_has_tokenscene() {
  _has_bits_[0] |= 0x00000080u;
}
void IphoneRegRequest::clear_has_tokenscene() {
  _has_bits_[0] &= ~0x00000080u;
}
void IphoneRegRequest::clear_tokenscene() {
  tokenscene_ = 0u;
  clear_has_tokenscene();
}
::google::protobuf::uint32 IphoneRegRequest::tokenscene() const {
  // @@protoc_insertion_point(field_get:micromsg.IphoneRegRequest.TokenScene)
  return tokenscene_;
}
void IphoneRegRequest::set_tokenscene(::google::protobuf::uint32 value) {
  set_has_tokenscene();
  tokenscene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.IphoneRegRequest.TokenScene)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IphoneRegResponse::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IphoneRegResponse::IphoneRegResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.IphoneRegResponse)
}
IphoneRegResponse::IphoneRegResponse(const IphoneRegResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.IphoneRegResponse)
}

void IphoneRegResponse::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

IphoneRegResponse::~IphoneRegResponse() {
  // @@protoc_insertion_point(destructor:micromsg.IphoneRegResponse)
  SharedDtor();
}

void IphoneRegResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void IphoneRegResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IphoneRegResponse::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IphoneRegResponse& IphoneRegResponse::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

IphoneRegResponse* IphoneRegResponse::New(::google::protobuf::Arena* arena) const {
  IphoneRegResponse* n = new IphoneRegResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IphoneRegResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.IphoneRegResponse)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IphoneRegResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.IphoneRegResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.IphoneRegResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.IphoneRegResponse)
  return false;
#undef DO_
}

void IphoneRegResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.IphoneRegResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.IphoneRegResponse)
}

::google::protobuf::uint8* IphoneRegResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.IphoneRegResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.IphoneRegResponse)
  return target;
}

size_t IphoneRegResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.IphoneRegResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IphoneRegResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.IphoneRegResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const IphoneRegResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IphoneRegResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.IphoneRegResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.IphoneRegResponse)
    MergeFrom(*source);
  }
}

void IphoneRegResponse::MergeFrom(const IphoneRegResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.IphoneRegResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void IphoneRegResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.IphoneRegResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IphoneRegResponse::CopyFrom(const IphoneRegResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.IphoneRegResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IphoneRegResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void IphoneRegResponse::Swap(IphoneRegResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IphoneRegResponse::InternalSwap(IphoneRegResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IphoneRegResponse::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IphoneRegResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool IphoneRegResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IphoneRegResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void IphoneRegResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void IphoneRegResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& IphoneRegResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.IphoneRegResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* IphoneRegResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.IphoneRegResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* IphoneRegResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.IphoneRegResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void IphoneRegResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.IphoneRegResponse.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IphoneUnRegRequest::kBaseRequestFieldNumber;
const int IphoneUnRegRequest::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IphoneUnRegRequest::IphoneUnRegRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.IphoneUnRegRequest)
}
IphoneUnRegRequest::IphoneUnRegRequest(const IphoneUnRegRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_token()) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.IphoneUnRegRequest)
}

void IphoneUnRegRequest::SharedCtor() {
  _cached_size_ = 0;
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baserequest_ = NULL;
}

IphoneUnRegRequest::~IphoneUnRegRequest() {
  // @@protoc_insertion_point(destructor:micromsg.IphoneUnRegRequest)
  SharedDtor();
}

void IphoneUnRegRequest::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void IphoneUnRegRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IphoneUnRegRequest::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IphoneUnRegRequest& IphoneUnRegRequest::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

IphoneUnRegRequest* IphoneUnRegRequest::New(::google::protobuf::Arena* arena) const {
  IphoneUnRegRequest* n = new IphoneUnRegRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IphoneUnRegRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.IphoneUnRegRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_token()) {
      GOOGLE_DCHECK(!token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*token_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IphoneUnRegRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.IphoneUnRegRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.IphoneUnRegRequest.Token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.IphoneUnRegRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.IphoneUnRegRequest)
  return false;
#undef DO_
}

void IphoneUnRegRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.IphoneUnRegRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string Token = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.IphoneUnRegRequest.Token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.IphoneUnRegRequest)
}

::google::protobuf::uint8* IphoneUnRegRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.IphoneUnRegRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string Token = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.IphoneUnRegRequest.Token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.IphoneUnRegRequest)
  return target;
}

size_t IphoneUnRegRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.IphoneUnRegRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  // optional string Token = 2;
  if (has_token()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IphoneUnRegRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.IphoneUnRegRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const IphoneUnRegRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IphoneUnRegRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.IphoneUnRegRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.IphoneUnRegRequest)
    MergeFrom(*source);
  }
}

void IphoneUnRegRequest::MergeFrom(const IphoneUnRegRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.IphoneUnRegRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
  }
}

void IphoneUnRegRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.IphoneUnRegRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IphoneUnRegRequest::CopyFrom(const IphoneUnRegRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.IphoneUnRegRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IphoneUnRegRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void IphoneUnRegRequest::Swap(IphoneUnRegRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IphoneUnRegRequest::InternalSwap(IphoneUnRegRequest* other) {
  token_.Swap(&other->token_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IphoneUnRegRequest::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IphoneUnRegRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool IphoneUnRegRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IphoneUnRegRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void IphoneUnRegRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void IphoneUnRegRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& IphoneUnRegRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.IphoneUnRegRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* IphoneUnRegRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.IphoneUnRegRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* IphoneUnRegRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.IphoneUnRegRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void IphoneUnRegRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.IphoneUnRegRequest.BaseRequest)
}

// optional string Token = 2;
bool IphoneUnRegRequest::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IphoneUnRegRequest::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
void IphoneUnRegRequest::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void IphoneUnRegRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
const ::std::string& IphoneUnRegRequest::token() const {
  // @@protoc_insertion_point(field_get:micromsg.IphoneUnRegRequest.Token)
  return token_.GetNoArena();
}
void IphoneUnRegRequest::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.IphoneUnRegRequest.Token)
}
#if LANG_CXX11
void IphoneUnRegRequest::set_token(::std::string&& value) {
  set_has_token();
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.IphoneUnRegRequest.Token)
}
#endif
void IphoneUnRegRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.IphoneUnRegRequest.Token)
}
void IphoneUnRegRequest::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.IphoneUnRegRequest.Token)
}
::std::string* IphoneUnRegRequest::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:micromsg.IphoneUnRegRequest.Token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IphoneUnRegRequest::release_token() {
  // @@protoc_insertion_point(field_release:micromsg.IphoneUnRegRequest.Token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IphoneUnRegRequest::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:micromsg.IphoneUnRegRequest.Token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IphoneUnRegResponse::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IphoneUnRegResponse::IphoneUnRegResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.IphoneUnRegResponse)
}
IphoneUnRegResponse::IphoneUnRegResponse(const IphoneUnRegResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.IphoneUnRegResponse)
}

void IphoneUnRegResponse::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

IphoneUnRegResponse::~IphoneUnRegResponse() {
  // @@protoc_insertion_point(destructor:micromsg.IphoneUnRegResponse)
  SharedDtor();
}

void IphoneUnRegResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void IphoneUnRegResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IphoneUnRegResponse::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IphoneUnRegResponse& IphoneUnRegResponse::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

IphoneUnRegResponse* IphoneUnRegResponse::New(::google::protobuf::Arena* arena) const {
  IphoneUnRegResponse* n = new IphoneUnRegResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IphoneUnRegResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.IphoneUnRegResponse)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IphoneUnRegResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.IphoneUnRegResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.IphoneUnRegResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.IphoneUnRegResponse)
  return false;
#undef DO_
}

void IphoneUnRegResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.IphoneUnRegResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.IphoneUnRegResponse)
}

::google::protobuf::uint8* IphoneUnRegResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.IphoneUnRegResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.IphoneUnRegResponse)
  return target;
}

size_t IphoneUnRegResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.IphoneUnRegResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IphoneUnRegResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.IphoneUnRegResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const IphoneUnRegResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IphoneUnRegResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.IphoneUnRegResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.IphoneUnRegResponse)
    MergeFrom(*source);
  }
}

void IphoneUnRegResponse::MergeFrom(const IphoneUnRegResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.IphoneUnRegResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void IphoneUnRegResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.IphoneUnRegResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IphoneUnRegResponse::CopyFrom(const IphoneUnRegResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.IphoneUnRegResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IphoneUnRegResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void IphoneUnRegResponse::Swap(IphoneUnRegResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IphoneUnRegResponse::InternalSwap(IphoneUnRegResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IphoneUnRegResponse::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IphoneUnRegResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool IphoneUnRegResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IphoneUnRegResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void IphoneUnRegResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void IphoneUnRegResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& IphoneUnRegResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.IphoneUnRegResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* IphoneUnRegResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.IphoneUnRegResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* IphoneUnRegResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.IphoneUnRegResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void IphoneUnRegResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.IphoneUnRegResponse.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WinphoneRegRequest::kBaseRequestFieldNumber;
const int WinphoneRegRequest::kUriFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WinphoneRegRequest::WinphoneRegRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.WinphoneRegRequest)
}
WinphoneRegRequest::WinphoneRegRequest(const WinphoneRegRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_uri()) {
    uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.WinphoneRegRequest)
}

void WinphoneRegRequest::SharedCtor() {
  _cached_size_ = 0;
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baserequest_ = NULL;
}

WinphoneRegRequest::~WinphoneRegRequest() {
  // @@protoc_insertion_point(destructor:micromsg.WinphoneRegRequest)
  SharedDtor();
}

void WinphoneRegRequest::SharedDtor() {
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void WinphoneRegRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WinphoneRegRequest::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WinphoneRegRequest& WinphoneRegRequest::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

WinphoneRegRequest* WinphoneRegRequest::New(::google::protobuf::Arena* arena) const {
  WinphoneRegRequest* n = new WinphoneRegRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WinphoneRegRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.WinphoneRegRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_uri()) {
      GOOGLE_DCHECK(!uri_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*uri_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WinphoneRegRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.WinphoneRegRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Uri = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.WinphoneRegRequest.Uri");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.WinphoneRegRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.WinphoneRegRequest)
  return false;
#undef DO_
}

void WinphoneRegRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.WinphoneRegRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string Uri = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.WinphoneRegRequest.Uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uri(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.WinphoneRegRequest)
}

::google::protobuf::uint8* WinphoneRegRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.WinphoneRegRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string Uri = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.WinphoneRegRequest.Uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uri(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.WinphoneRegRequest)
  return target;
}

size_t WinphoneRegRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.WinphoneRegRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  // optional string Uri = 2;
  if (has_uri()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uri());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WinphoneRegRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.WinphoneRegRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WinphoneRegRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WinphoneRegRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.WinphoneRegRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.WinphoneRegRequest)
    MergeFrom(*source);
  }
}

void WinphoneRegRequest::MergeFrom(const WinphoneRegRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.WinphoneRegRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_uri();
      uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
  }
}

void WinphoneRegRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.WinphoneRegRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WinphoneRegRequest::CopyFrom(const WinphoneRegRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.WinphoneRegRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WinphoneRegRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void WinphoneRegRequest::Swap(WinphoneRegRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WinphoneRegRequest::InternalSwap(WinphoneRegRequest* other) {
  uri_.Swap(&other->uri_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WinphoneRegRequest::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WinphoneRegRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool WinphoneRegRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WinphoneRegRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void WinphoneRegRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void WinphoneRegRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& WinphoneRegRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.WinphoneRegRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* WinphoneRegRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.WinphoneRegRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* WinphoneRegRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.WinphoneRegRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void WinphoneRegRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.WinphoneRegRequest.BaseRequest)
}

// optional string Uri = 2;
bool WinphoneRegRequest::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WinphoneRegRequest::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
void WinphoneRegRequest::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
void WinphoneRegRequest::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
const ::std::string& WinphoneRegRequest::uri() const {
  // @@protoc_insertion_point(field_get:micromsg.WinphoneRegRequest.Uri)
  return uri_.GetNoArena();
}
void WinphoneRegRequest::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.WinphoneRegRequest.Uri)
}
#if LANG_CXX11
void WinphoneRegRequest::set_uri(::std::string&& value) {
  set_has_uri();
  uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.WinphoneRegRequest.Uri)
}
#endif
void WinphoneRegRequest::set_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.WinphoneRegRequest.Uri)
}
void WinphoneRegRequest::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.WinphoneRegRequest.Uri)
}
::std::string* WinphoneRegRequest::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:micromsg.WinphoneRegRequest.Uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WinphoneRegRequest::release_uri() {
  // @@protoc_insertion_point(field_release:micromsg.WinphoneRegRequest.Uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WinphoneRegRequest::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:micromsg.WinphoneRegRequest.Uri)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WinphoneRegResponse::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WinphoneRegResponse::WinphoneRegResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.WinphoneRegResponse)
}
WinphoneRegResponse::WinphoneRegResponse(const WinphoneRegResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.WinphoneRegResponse)
}

void WinphoneRegResponse::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

WinphoneRegResponse::~WinphoneRegResponse() {
  // @@protoc_insertion_point(destructor:micromsg.WinphoneRegResponse)
  SharedDtor();
}

void WinphoneRegResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void WinphoneRegResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WinphoneRegResponse::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WinphoneRegResponse& WinphoneRegResponse::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

WinphoneRegResponse* WinphoneRegResponse::New(::google::protobuf::Arena* arena) const {
  WinphoneRegResponse* n = new WinphoneRegResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WinphoneRegResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.WinphoneRegResponse)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WinphoneRegResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.WinphoneRegResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.WinphoneRegResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.WinphoneRegResponse)
  return false;
#undef DO_
}

void WinphoneRegResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.WinphoneRegResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.WinphoneRegResponse)
}

::google::protobuf::uint8* WinphoneRegResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.WinphoneRegResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.WinphoneRegResponse)
  return target;
}

size_t WinphoneRegResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.WinphoneRegResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WinphoneRegResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.WinphoneRegResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const WinphoneRegResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WinphoneRegResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.WinphoneRegResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.WinphoneRegResponse)
    MergeFrom(*source);
  }
}

void WinphoneRegResponse::MergeFrom(const WinphoneRegResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.WinphoneRegResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void WinphoneRegResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.WinphoneRegResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WinphoneRegResponse::CopyFrom(const WinphoneRegResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.WinphoneRegResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WinphoneRegResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void WinphoneRegResponse::Swap(WinphoneRegResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WinphoneRegResponse::InternalSwap(WinphoneRegResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WinphoneRegResponse::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WinphoneRegResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool WinphoneRegResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WinphoneRegResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void WinphoneRegResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void WinphoneRegResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& WinphoneRegResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.WinphoneRegResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* WinphoneRegResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.WinphoneRegResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* WinphoneRegResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.WinphoneRegResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void WinphoneRegResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.WinphoneRegResponse.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WinphoneUnRegRequest::kBaseRequestFieldNumber;
const int WinphoneUnRegRequest::kUriFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WinphoneUnRegRequest::WinphoneUnRegRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.WinphoneUnRegRequest)
}
WinphoneUnRegRequest::WinphoneUnRegRequest(const WinphoneUnRegRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_uri()) {
    uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.WinphoneUnRegRequest)
}

void WinphoneUnRegRequest::SharedCtor() {
  _cached_size_ = 0;
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baserequest_ = NULL;
}

WinphoneUnRegRequest::~WinphoneUnRegRequest() {
  // @@protoc_insertion_point(destructor:micromsg.WinphoneUnRegRequest)
  SharedDtor();
}

void WinphoneUnRegRequest::SharedDtor() {
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void WinphoneUnRegRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WinphoneUnRegRequest::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WinphoneUnRegRequest& WinphoneUnRegRequest::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

WinphoneUnRegRequest* WinphoneUnRegRequest::New(::google::protobuf::Arena* arena) const {
  WinphoneUnRegRequest* n = new WinphoneUnRegRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WinphoneUnRegRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.WinphoneUnRegRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_uri()) {
      GOOGLE_DCHECK(!uri_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*uri_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WinphoneUnRegRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.WinphoneUnRegRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Uri = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.WinphoneUnRegRequest.Uri");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.WinphoneUnRegRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.WinphoneUnRegRequest)
  return false;
#undef DO_
}

void WinphoneUnRegRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.WinphoneUnRegRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string Uri = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.WinphoneUnRegRequest.Uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uri(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.WinphoneUnRegRequest)
}

::google::protobuf::uint8* WinphoneUnRegRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.WinphoneUnRegRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string Uri = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.WinphoneUnRegRequest.Uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uri(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.WinphoneUnRegRequest)
  return target;
}

size_t WinphoneUnRegRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.WinphoneUnRegRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  // optional string Uri = 2;
  if (has_uri()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uri());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WinphoneUnRegRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.WinphoneUnRegRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WinphoneUnRegRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WinphoneUnRegRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.WinphoneUnRegRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.WinphoneUnRegRequest)
    MergeFrom(*source);
  }
}

void WinphoneUnRegRequest::MergeFrom(const WinphoneUnRegRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.WinphoneUnRegRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_uri();
      uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
  }
}

void WinphoneUnRegRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.WinphoneUnRegRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WinphoneUnRegRequest::CopyFrom(const WinphoneUnRegRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.WinphoneUnRegRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WinphoneUnRegRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void WinphoneUnRegRequest::Swap(WinphoneUnRegRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WinphoneUnRegRequest::InternalSwap(WinphoneUnRegRequest* other) {
  uri_.Swap(&other->uri_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WinphoneUnRegRequest::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WinphoneUnRegRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool WinphoneUnRegRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WinphoneUnRegRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void WinphoneUnRegRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void WinphoneUnRegRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& WinphoneUnRegRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.WinphoneUnRegRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* WinphoneUnRegRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.WinphoneUnRegRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* WinphoneUnRegRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.WinphoneUnRegRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void WinphoneUnRegRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.WinphoneUnRegRequest.BaseRequest)
}

// optional string Uri = 2;
bool WinphoneUnRegRequest::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WinphoneUnRegRequest::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
void WinphoneUnRegRequest::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
void WinphoneUnRegRequest::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
const ::std::string& WinphoneUnRegRequest::uri() const {
  // @@protoc_insertion_point(field_get:micromsg.WinphoneUnRegRequest.Uri)
  return uri_.GetNoArena();
}
void WinphoneUnRegRequest::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.WinphoneUnRegRequest.Uri)
}
#if LANG_CXX11
void WinphoneUnRegRequest::set_uri(::std::string&& value) {
  set_has_uri();
  uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.WinphoneUnRegRequest.Uri)
}
#endif
void WinphoneUnRegRequest::set_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.WinphoneUnRegRequest.Uri)
}
void WinphoneUnRegRequest::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.WinphoneUnRegRequest.Uri)
}
::std::string* WinphoneUnRegRequest::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:micromsg.WinphoneUnRegRequest.Uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WinphoneUnRegRequest::release_uri() {
  // @@protoc_insertion_point(field_release:micromsg.WinphoneUnRegRequest.Uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WinphoneUnRegRequest::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:micromsg.WinphoneUnRegRequest.Uri)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WinphoneUnRegResponse::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WinphoneUnRegResponse::WinphoneUnRegResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.WinphoneUnRegResponse)
}
WinphoneUnRegResponse::WinphoneUnRegResponse(const WinphoneUnRegResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.WinphoneUnRegResponse)
}

void WinphoneUnRegResponse::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

WinphoneUnRegResponse::~WinphoneUnRegResponse() {
  // @@protoc_insertion_point(destructor:micromsg.WinphoneUnRegResponse)
  SharedDtor();
}

void WinphoneUnRegResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void WinphoneUnRegResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WinphoneUnRegResponse::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WinphoneUnRegResponse& WinphoneUnRegResponse::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

WinphoneUnRegResponse* WinphoneUnRegResponse::New(::google::protobuf::Arena* arena) const {
  WinphoneUnRegResponse* n = new WinphoneUnRegResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WinphoneUnRegResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.WinphoneUnRegResponse)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WinphoneUnRegResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.WinphoneUnRegResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.WinphoneUnRegResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.WinphoneUnRegResponse)
  return false;
#undef DO_
}

void WinphoneUnRegResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.WinphoneUnRegResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.WinphoneUnRegResponse)
}

::google::protobuf::uint8* WinphoneUnRegResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.WinphoneUnRegResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.WinphoneUnRegResponse)
  return target;
}

size_t WinphoneUnRegResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.WinphoneUnRegResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WinphoneUnRegResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.WinphoneUnRegResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const WinphoneUnRegResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WinphoneUnRegResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.WinphoneUnRegResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.WinphoneUnRegResponse)
    MergeFrom(*source);
  }
}

void WinphoneUnRegResponse::MergeFrom(const WinphoneUnRegResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.WinphoneUnRegResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void WinphoneUnRegResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.WinphoneUnRegResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WinphoneUnRegResponse::CopyFrom(const WinphoneUnRegResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.WinphoneUnRegResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WinphoneUnRegResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void WinphoneUnRegResponse::Swap(WinphoneUnRegResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WinphoneUnRegResponse::InternalSwap(WinphoneUnRegResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WinphoneUnRegResponse::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WinphoneUnRegResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool WinphoneUnRegResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WinphoneUnRegResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void WinphoneUnRegResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void WinphoneUnRegResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& WinphoneUnRegResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.WinphoneUnRegResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* WinphoneUnRegResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.WinphoneUnRegResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* WinphoneUnRegResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.WinphoneUnRegResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void WinphoneUnRegResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.WinphoneUnRegResponse.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AshaRegRequest::kBaseRequestFieldNumber;
const int AshaRegRequest::kNidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AshaRegRequest::AshaRegRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.AshaRegRequest)
}
AshaRegRequest::AshaRegRequest(const AshaRegRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nid()) {
    nid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nid_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.AshaRegRequest)
}

void AshaRegRequest::SharedCtor() {
  _cached_size_ = 0;
  nid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baserequest_ = NULL;
}

AshaRegRequest::~AshaRegRequest() {
  // @@protoc_insertion_point(destructor:micromsg.AshaRegRequest)
  SharedDtor();
}

void AshaRegRequest::SharedDtor() {
  nid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void AshaRegRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AshaRegRequest::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AshaRegRequest& AshaRegRequest::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

AshaRegRequest* AshaRegRequest::New(::google::protobuf::Arena* arena) const {
  AshaRegRequest* n = new AshaRegRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AshaRegRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.AshaRegRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_nid()) {
      GOOGLE_DCHECK(!nid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*nid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AshaRegRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.AshaRegRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Nid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nid().data(), this->nid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.AshaRegRequest.Nid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.AshaRegRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.AshaRegRequest)
  return false;
#undef DO_
}

void AshaRegRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.AshaRegRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string Nid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nid().data(), this->nid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AshaRegRequest.Nid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.AshaRegRequest)
}

::google::protobuf::uint8* AshaRegRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.AshaRegRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string Nid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nid().data(), this->nid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AshaRegRequest.Nid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.AshaRegRequest)
  return target;
}

size_t AshaRegRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.AshaRegRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  // optional string Nid = 2;
  if (has_nid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AshaRegRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.AshaRegRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AshaRegRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AshaRegRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.AshaRegRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.AshaRegRequest)
    MergeFrom(*source);
  }
}

void AshaRegRequest::MergeFrom(const AshaRegRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.AshaRegRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_nid();
      nid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
  }
}

void AshaRegRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.AshaRegRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AshaRegRequest::CopyFrom(const AshaRegRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.AshaRegRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AshaRegRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void AshaRegRequest::Swap(AshaRegRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AshaRegRequest::InternalSwap(AshaRegRequest* other) {
  nid_.Swap(&other->nid_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AshaRegRequest::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AshaRegRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool AshaRegRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AshaRegRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void AshaRegRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void AshaRegRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& AshaRegRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.AshaRegRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* AshaRegRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AshaRegRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* AshaRegRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.AshaRegRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void AshaRegRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AshaRegRequest.BaseRequest)
}

// optional string Nid = 2;
bool AshaRegRequest::has_nid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AshaRegRequest::set_has_nid() {
  _has_bits_[0] |= 0x00000001u;
}
void AshaRegRequest::clear_has_nid() {
  _has_bits_[0] &= ~0x00000001u;
}
void AshaRegRequest::clear_nid() {
  nid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nid();
}
const ::std::string& AshaRegRequest::nid() const {
  // @@protoc_insertion_point(field_get:micromsg.AshaRegRequest.Nid)
  return nid_.GetNoArena();
}
void AshaRegRequest::set_nid(const ::std::string& value) {
  set_has_nid();
  nid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AshaRegRequest.Nid)
}
#if LANG_CXX11
void AshaRegRequest::set_nid(::std::string&& value) {
  set_has_nid();
  nid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AshaRegRequest.Nid)
}
#endif
void AshaRegRequest::set_nid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nid();
  nid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AshaRegRequest.Nid)
}
void AshaRegRequest::set_nid(const char* value, size_t size) {
  set_has_nid();
  nid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AshaRegRequest.Nid)
}
::std::string* AshaRegRequest::mutable_nid() {
  set_has_nid();
  // @@protoc_insertion_point(field_mutable:micromsg.AshaRegRequest.Nid)
  return nid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AshaRegRequest::release_nid() {
  // @@protoc_insertion_point(field_release:micromsg.AshaRegRequest.Nid)
  clear_has_nid();
  return nid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AshaRegRequest::set_allocated_nid(::std::string* nid) {
  if (nid != NULL) {
    set_has_nid();
  } else {
    clear_has_nid();
  }
  nid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AshaRegRequest.Nid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AshaRegResponse::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AshaRegResponse::AshaRegResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.AshaRegResponse)
}
AshaRegResponse::AshaRegResponse(const AshaRegResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.AshaRegResponse)
}

void AshaRegResponse::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

AshaRegResponse::~AshaRegResponse() {
  // @@protoc_insertion_point(destructor:micromsg.AshaRegResponse)
  SharedDtor();
}

void AshaRegResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void AshaRegResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AshaRegResponse::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AshaRegResponse& AshaRegResponse::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

AshaRegResponse* AshaRegResponse::New(::google::protobuf::Arena* arena) const {
  AshaRegResponse* n = new AshaRegResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AshaRegResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.AshaRegResponse)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AshaRegResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.AshaRegResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.AshaRegResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.AshaRegResponse)
  return false;
#undef DO_
}

void AshaRegResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.AshaRegResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.AshaRegResponse)
}

::google::protobuf::uint8* AshaRegResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.AshaRegResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.AshaRegResponse)
  return target;
}

size_t AshaRegResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.AshaRegResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AshaRegResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.AshaRegResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AshaRegResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AshaRegResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.AshaRegResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.AshaRegResponse)
    MergeFrom(*source);
  }
}

void AshaRegResponse::MergeFrom(const AshaRegResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.AshaRegResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void AshaRegResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.AshaRegResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AshaRegResponse::CopyFrom(const AshaRegResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.AshaRegResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AshaRegResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void AshaRegResponse::Swap(AshaRegResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AshaRegResponse::InternalSwap(AshaRegResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AshaRegResponse::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AshaRegResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool AshaRegResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AshaRegResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void AshaRegResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void AshaRegResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& AshaRegResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.AshaRegResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* AshaRegResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AshaRegResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* AshaRegResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.AshaRegResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void AshaRegResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AshaRegResponse.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AshaUnRegRequest::kBaseRequestFieldNumber;
const int AshaUnRegRequest::kNidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AshaUnRegRequest::AshaUnRegRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.AshaUnRegRequest)
}
AshaUnRegRequest::AshaUnRegRequest(const AshaUnRegRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nid()) {
    nid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nid_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.AshaUnRegRequest)
}

void AshaUnRegRequest::SharedCtor() {
  _cached_size_ = 0;
  nid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baserequest_ = NULL;
}

AshaUnRegRequest::~AshaUnRegRequest() {
  // @@protoc_insertion_point(destructor:micromsg.AshaUnRegRequest)
  SharedDtor();
}

void AshaUnRegRequest::SharedDtor() {
  nid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void AshaUnRegRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AshaUnRegRequest::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AshaUnRegRequest& AshaUnRegRequest::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

AshaUnRegRequest* AshaUnRegRequest::New(::google::protobuf::Arena* arena) const {
  AshaUnRegRequest* n = new AshaUnRegRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AshaUnRegRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.AshaUnRegRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_nid()) {
      GOOGLE_DCHECK(!nid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*nid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AshaUnRegRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.AshaUnRegRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Nid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nid().data(), this->nid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.AshaUnRegRequest.Nid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.AshaUnRegRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.AshaUnRegRequest)
  return false;
#undef DO_
}

void AshaUnRegRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.AshaUnRegRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string Nid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nid().data(), this->nid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AshaUnRegRequest.Nid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.AshaUnRegRequest)
}

::google::protobuf::uint8* AshaUnRegRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.AshaUnRegRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string Nid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nid().data(), this->nid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AshaUnRegRequest.Nid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.AshaUnRegRequest)
  return target;
}

size_t AshaUnRegRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.AshaUnRegRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  // optional string Nid = 2;
  if (has_nid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AshaUnRegRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.AshaUnRegRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AshaUnRegRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AshaUnRegRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.AshaUnRegRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.AshaUnRegRequest)
    MergeFrom(*source);
  }
}

void AshaUnRegRequest::MergeFrom(const AshaUnRegRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.AshaUnRegRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_nid();
      nid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
  }
}

void AshaUnRegRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.AshaUnRegRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AshaUnRegRequest::CopyFrom(const AshaUnRegRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.AshaUnRegRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AshaUnRegRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void AshaUnRegRequest::Swap(AshaUnRegRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AshaUnRegRequest::InternalSwap(AshaUnRegRequest* other) {
  nid_.Swap(&other->nid_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AshaUnRegRequest::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AshaUnRegRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool AshaUnRegRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AshaUnRegRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void AshaUnRegRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void AshaUnRegRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& AshaUnRegRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.AshaUnRegRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* AshaUnRegRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AshaUnRegRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* AshaUnRegRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.AshaUnRegRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void AshaUnRegRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AshaUnRegRequest.BaseRequest)
}

// optional string Nid = 2;
bool AshaUnRegRequest::has_nid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AshaUnRegRequest::set_has_nid() {
  _has_bits_[0] |= 0x00000001u;
}
void AshaUnRegRequest::clear_has_nid() {
  _has_bits_[0] &= ~0x00000001u;
}
void AshaUnRegRequest::clear_nid() {
  nid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nid();
}
const ::std::string& AshaUnRegRequest::nid() const {
  // @@protoc_insertion_point(field_get:micromsg.AshaUnRegRequest.Nid)
  return nid_.GetNoArena();
}
void AshaUnRegRequest::set_nid(const ::std::string& value) {
  set_has_nid();
  nid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AshaUnRegRequest.Nid)
}
#if LANG_CXX11
void AshaUnRegRequest::set_nid(::std::string&& value) {
  set_has_nid();
  nid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AshaUnRegRequest.Nid)
}
#endif
void AshaUnRegRequest::set_nid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nid();
  nid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AshaUnRegRequest.Nid)
}
void AshaUnRegRequest::set_nid(const char* value, size_t size) {
  set_has_nid();
  nid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AshaUnRegRequest.Nid)
}
::std::string* AshaUnRegRequest::mutable_nid() {
  set_has_nid();
  // @@protoc_insertion_point(field_mutable:micromsg.AshaUnRegRequest.Nid)
  return nid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AshaUnRegRequest::release_nid() {
  // @@protoc_insertion_point(field_release:micromsg.AshaUnRegRequest.Nid)
  clear_has_nid();
  return nid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AshaUnRegRequest::set_allocated_nid(::std::string* nid) {
  if (nid != NULL) {
    set_has_nid();
  } else {
    clear_has_nid();
  }
  nid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AshaUnRegRequest.Nid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AshaUnRegResponse::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AshaUnRegResponse::AshaUnRegResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.AshaUnRegResponse)
}
AshaUnRegResponse::AshaUnRegResponse(const AshaUnRegResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.AshaUnRegResponse)
}

void AshaUnRegResponse::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

AshaUnRegResponse::~AshaUnRegResponse() {
  // @@protoc_insertion_point(destructor:micromsg.AshaUnRegResponse)
  SharedDtor();
}

void AshaUnRegResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void AshaUnRegResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AshaUnRegResponse::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AshaUnRegResponse& AshaUnRegResponse::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

AshaUnRegResponse* AshaUnRegResponse::New(::google::protobuf::Arena* arena) const {
  AshaUnRegResponse* n = new AshaUnRegResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AshaUnRegResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.AshaUnRegResponse)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AshaUnRegResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.AshaUnRegResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.AshaUnRegResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.AshaUnRegResponse)
  return false;
#undef DO_
}

void AshaUnRegResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.AshaUnRegResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.AshaUnRegResponse)
}

::google::protobuf::uint8* AshaUnRegResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.AshaUnRegResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.AshaUnRegResponse)
  return target;
}

size_t AshaUnRegResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.AshaUnRegResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AshaUnRegResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.AshaUnRegResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AshaUnRegResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AshaUnRegResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.AshaUnRegResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.AshaUnRegResponse)
    MergeFrom(*source);
  }
}

void AshaUnRegResponse::MergeFrom(const AshaUnRegResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.AshaUnRegResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void AshaUnRegResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.AshaUnRegResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AshaUnRegResponse::CopyFrom(const AshaUnRegResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.AshaUnRegResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AshaUnRegResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void AshaUnRegResponse::Swap(AshaUnRegResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AshaUnRegResponse::InternalSwap(AshaUnRegResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AshaUnRegResponse::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AshaUnRegResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool AshaUnRegResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AshaUnRegResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void AshaUnRegResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void AshaUnRegResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& AshaUnRegResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.AshaUnRegResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* AshaUnRegResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AshaUnRegResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* AshaUnRegResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.AshaUnRegResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void AshaUnRegResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AshaUnRegResponse.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlackBerryRegRequest::kBaseRequestFieldNumber;
const int BlackBerryRegRequest::kPinFieldNumber;
const int BlackBerryRegRequest::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlackBerryRegRequest::BlackBerryRegRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BlackBerryRegRequest)
}
BlackBerryRegRequest::BlackBerryRegRequest(const BlackBerryRegRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pin()) {
    pin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pin_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:micromsg.BlackBerryRegRequest)
}

void BlackBerryRegRequest::SharedCtor() {
  _cached_size_ = 0;
  pin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(port_));
}

BlackBerryRegRequest::~BlackBerryRegRequest() {
  // @@protoc_insertion_point(destructor:micromsg.BlackBerryRegRequest)
  SharedDtor();
}

void BlackBerryRegRequest::SharedDtor() {
  pin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void BlackBerryRegRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlackBerryRegRequest::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BlackBerryRegRequest& BlackBerryRegRequest::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

BlackBerryRegRequest* BlackBerryRegRequest::New(::google::protobuf::Arena* arena) const {
  BlackBerryRegRequest* n = new BlackBerryRegRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlackBerryRegRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BlackBerryRegRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_pin()) {
      GOOGLE_DCHECK(!pin_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pin_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  port_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BlackBerryRegRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BlackBerryRegRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Pin = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pin().data(), this->pin().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BlackBerryRegRequest.Pin");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BlackBerryRegRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BlackBerryRegRequest)
  return false;
#undef DO_
}

void BlackBerryRegRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BlackBerryRegRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string Pin = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BlackBerryRegRequest.Pin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pin(), output);
  }

  // required uint32 Port = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BlackBerryRegRequest)
}

::google::protobuf::uint8* BlackBerryRegRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BlackBerryRegRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string Pin = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BlackBerryRegRequest.Pin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pin(), target);
  }

  // required uint32 Port = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BlackBerryRegRequest)
  return target;
}

size_t BlackBerryRegRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.BlackBerryRegRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_port()) {
    // required uint32 Port = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  return total_size;
}
size_t BlackBerryRegRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BlackBerryRegRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 Port = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string Pin = 2;
  if (has_pin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pin());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlackBerryRegRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BlackBerryRegRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BlackBerryRegRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlackBerryRegRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BlackBerryRegRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BlackBerryRegRequest)
    MergeFrom(*source);
  }
}

void BlackBerryRegRequest::MergeFrom(const BlackBerryRegRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BlackBerryRegRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_pin();
      pin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pin_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000004u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BlackBerryRegRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BlackBerryRegRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlackBerryRegRequest::CopyFrom(const BlackBerryRegRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BlackBerryRegRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlackBerryRegRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void BlackBerryRegRequest::Swap(BlackBerryRegRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlackBerryRegRequest::InternalSwap(BlackBerryRegRequest* other) {
  pin_.Swap(&other->pin_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(port_, other->port_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlackBerryRegRequest::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlackBerryRegRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool BlackBerryRegRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BlackBerryRegRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void BlackBerryRegRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void BlackBerryRegRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& BlackBerryRegRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.BlackBerryRegRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* BlackBerryRegRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BlackBerryRegRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* BlackBerryRegRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.BlackBerryRegRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void BlackBerryRegRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BlackBerryRegRequest.BaseRequest)
}

// optional string Pin = 2;
bool BlackBerryRegRequest::has_pin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BlackBerryRegRequest::set_has_pin() {
  _has_bits_[0] |= 0x00000001u;
}
void BlackBerryRegRequest::clear_has_pin() {
  _has_bits_[0] &= ~0x00000001u;
}
void BlackBerryRegRequest::clear_pin() {
  pin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pin();
}
const ::std::string& BlackBerryRegRequest::pin() const {
  // @@protoc_insertion_point(field_get:micromsg.BlackBerryRegRequest.Pin)
  return pin_.GetNoArena();
}
void BlackBerryRegRequest::set_pin(const ::std::string& value) {
  set_has_pin();
  pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BlackBerryRegRequest.Pin)
}
#if LANG_CXX11
void BlackBerryRegRequest::set_pin(::std::string&& value) {
  set_has_pin();
  pin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BlackBerryRegRequest.Pin)
}
#endif
void BlackBerryRegRequest::set_pin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pin();
  pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BlackBerryRegRequest.Pin)
}
void BlackBerryRegRequest::set_pin(const char* value, size_t size) {
  set_has_pin();
  pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BlackBerryRegRequest.Pin)
}
::std::string* BlackBerryRegRequest::mutable_pin() {
  set_has_pin();
  // @@protoc_insertion_point(field_mutable:micromsg.BlackBerryRegRequest.Pin)
  return pin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BlackBerryRegRequest::release_pin() {
  // @@protoc_insertion_point(field_release:micromsg.BlackBerryRegRequest.Pin)
  clear_has_pin();
  return pin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BlackBerryRegRequest::set_allocated_pin(::std::string* pin) {
  if (pin != NULL) {
    set_has_pin();
  } else {
    clear_has_pin();
  }
  pin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pin);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BlackBerryRegRequest.Pin)
}

// required uint32 Port = 3;
bool BlackBerryRegRequest::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BlackBerryRegRequest::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
void BlackBerryRegRequest::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
void BlackBerryRegRequest::clear_port() {
  port_ = 0u;
  clear_has_port();
}
::google::protobuf::uint32 BlackBerryRegRequest::port() const {
  // @@protoc_insertion_point(field_get:micromsg.BlackBerryRegRequest.Port)
  return port_;
}
void BlackBerryRegRequest::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BlackBerryRegRequest.Port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlackBerryRegResponse::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlackBerryRegResponse::BlackBerryRegResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BlackBerryRegResponse)
}
BlackBerryRegResponse::BlackBerryRegResponse(const BlackBerryRegResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.BlackBerryRegResponse)
}

void BlackBerryRegResponse::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

BlackBerryRegResponse::~BlackBerryRegResponse() {
  // @@protoc_insertion_point(destructor:micromsg.BlackBerryRegResponse)
  SharedDtor();
}

void BlackBerryRegResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void BlackBerryRegResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlackBerryRegResponse::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BlackBerryRegResponse& BlackBerryRegResponse::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

BlackBerryRegResponse* BlackBerryRegResponse::New(::google::protobuf::Arena* arena) const {
  BlackBerryRegResponse* n = new BlackBerryRegResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlackBerryRegResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BlackBerryRegResponse)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BlackBerryRegResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BlackBerryRegResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BlackBerryRegResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BlackBerryRegResponse)
  return false;
#undef DO_
}

void BlackBerryRegResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BlackBerryRegResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BlackBerryRegResponse)
}

::google::protobuf::uint8* BlackBerryRegResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BlackBerryRegResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BlackBerryRegResponse)
  return target;
}

size_t BlackBerryRegResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BlackBerryRegResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlackBerryRegResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BlackBerryRegResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BlackBerryRegResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlackBerryRegResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BlackBerryRegResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BlackBerryRegResponse)
    MergeFrom(*source);
  }
}

void BlackBerryRegResponse::MergeFrom(const BlackBerryRegResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BlackBerryRegResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void BlackBerryRegResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BlackBerryRegResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlackBerryRegResponse::CopyFrom(const BlackBerryRegResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BlackBerryRegResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlackBerryRegResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void BlackBerryRegResponse::Swap(BlackBerryRegResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlackBerryRegResponse::InternalSwap(BlackBerryRegResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlackBerryRegResponse::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlackBerryRegResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool BlackBerryRegResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BlackBerryRegResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void BlackBerryRegResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void BlackBerryRegResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& BlackBerryRegResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.BlackBerryRegResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* BlackBerryRegResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BlackBerryRegResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* BlackBerryRegResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.BlackBerryRegResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void BlackBerryRegResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BlackBerryRegResponse.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlackBerryUnRegRequest::kBaseRequestFieldNumber;
const int BlackBerryUnRegRequest::kPinFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlackBerryUnRegRequest::BlackBerryUnRegRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BlackBerryUnRegRequest)
}
BlackBerryUnRegRequest::BlackBerryUnRegRequest(const BlackBerryUnRegRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pin()) {
    pin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pin_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.BlackBerryUnRegRequest)
}

void BlackBerryUnRegRequest::SharedCtor() {
  _cached_size_ = 0;
  pin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baserequest_ = NULL;
}

BlackBerryUnRegRequest::~BlackBerryUnRegRequest() {
  // @@protoc_insertion_point(destructor:micromsg.BlackBerryUnRegRequest)
  SharedDtor();
}

void BlackBerryUnRegRequest::SharedDtor() {
  pin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void BlackBerryUnRegRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlackBerryUnRegRequest::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BlackBerryUnRegRequest& BlackBerryUnRegRequest::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

BlackBerryUnRegRequest* BlackBerryUnRegRequest::New(::google::protobuf::Arena* arena) const {
  BlackBerryUnRegRequest* n = new BlackBerryUnRegRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlackBerryUnRegRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BlackBerryUnRegRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_pin()) {
      GOOGLE_DCHECK(!pin_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pin_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BlackBerryUnRegRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BlackBerryUnRegRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Pin = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pin().data(), this->pin().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BlackBerryUnRegRequest.Pin");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BlackBerryUnRegRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BlackBerryUnRegRequest)
  return false;
#undef DO_
}

void BlackBerryUnRegRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BlackBerryUnRegRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string Pin = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BlackBerryUnRegRequest.Pin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pin(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BlackBerryUnRegRequest)
}

::google::protobuf::uint8* BlackBerryUnRegRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BlackBerryUnRegRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string Pin = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BlackBerryUnRegRequest.Pin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pin(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BlackBerryUnRegRequest)
  return target;
}

size_t BlackBerryUnRegRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BlackBerryUnRegRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  // optional string Pin = 2;
  if (has_pin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pin());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlackBerryUnRegRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BlackBerryUnRegRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BlackBerryUnRegRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlackBerryUnRegRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BlackBerryUnRegRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BlackBerryUnRegRequest)
    MergeFrom(*source);
  }
}

void BlackBerryUnRegRequest::MergeFrom(const BlackBerryUnRegRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BlackBerryUnRegRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_pin();
      pin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pin_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
  }
}

void BlackBerryUnRegRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BlackBerryUnRegRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlackBerryUnRegRequest::CopyFrom(const BlackBerryUnRegRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BlackBerryUnRegRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlackBerryUnRegRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void BlackBerryUnRegRequest::Swap(BlackBerryUnRegRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlackBerryUnRegRequest::InternalSwap(BlackBerryUnRegRequest* other) {
  pin_.Swap(&other->pin_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlackBerryUnRegRequest::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlackBerryUnRegRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool BlackBerryUnRegRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BlackBerryUnRegRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void BlackBerryUnRegRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void BlackBerryUnRegRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& BlackBerryUnRegRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.BlackBerryUnRegRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* BlackBerryUnRegRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BlackBerryUnRegRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* BlackBerryUnRegRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.BlackBerryUnRegRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void BlackBerryUnRegRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BlackBerryUnRegRequest.BaseRequest)
}

// optional string Pin = 2;
bool BlackBerryUnRegRequest::has_pin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BlackBerryUnRegRequest::set_has_pin() {
  _has_bits_[0] |= 0x00000001u;
}
void BlackBerryUnRegRequest::clear_has_pin() {
  _has_bits_[0] &= ~0x00000001u;
}
void BlackBerryUnRegRequest::clear_pin() {
  pin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pin();
}
const ::std::string& BlackBerryUnRegRequest::pin() const {
  // @@protoc_insertion_point(field_get:micromsg.BlackBerryUnRegRequest.Pin)
  return pin_.GetNoArena();
}
void BlackBerryUnRegRequest::set_pin(const ::std::string& value) {
  set_has_pin();
  pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BlackBerryUnRegRequest.Pin)
}
#if LANG_CXX11
void BlackBerryUnRegRequest::set_pin(::std::string&& value) {
  set_has_pin();
  pin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BlackBerryUnRegRequest.Pin)
}
#endif
void BlackBerryUnRegRequest::set_pin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pin();
  pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BlackBerryUnRegRequest.Pin)
}
void BlackBerryUnRegRequest::set_pin(const char* value, size_t size) {
  set_has_pin();
  pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BlackBerryUnRegRequest.Pin)
}
::std::string* BlackBerryUnRegRequest::mutable_pin() {
  set_has_pin();
  // @@protoc_insertion_point(field_mutable:micromsg.BlackBerryUnRegRequest.Pin)
  return pin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BlackBerryUnRegRequest::release_pin() {
  // @@protoc_insertion_point(field_release:micromsg.BlackBerryUnRegRequest.Pin)
  clear_has_pin();
  return pin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BlackBerryUnRegRequest::set_allocated_pin(::std::string* pin) {
  if (pin != NULL) {
    set_has_pin();
  } else {
    clear_has_pin();
  }
  pin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pin);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BlackBerryUnRegRequest.Pin)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlackBerryUnRegResponse::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlackBerryUnRegResponse::BlackBerryUnRegResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BlackBerryUnRegResponse)
}
BlackBerryUnRegResponse::BlackBerryUnRegResponse(const BlackBerryUnRegResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.BlackBerryUnRegResponse)
}

void BlackBerryUnRegResponse::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

BlackBerryUnRegResponse::~BlackBerryUnRegResponse() {
  // @@protoc_insertion_point(destructor:micromsg.BlackBerryUnRegResponse)
  SharedDtor();
}

void BlackBerryUnRegResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void BlackBerryUnRegResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlackBerryUnRegResponse::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BlackBerryUnRegResponse& BlackBerryUnRegResponse::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

BlackBerryUnRegResponse* BlackBerryUnRegResponse::New(::google::protobuf::Arena* arena) const {
  BlackBerryUnRegResponse* n = new BlackBerryUnRegResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlackBerryUnRegResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BlackBerryUnRegResponse)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BlackBerryUnRegResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BlackBerryUnRegResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BlackBerryUnRegResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BlackBerryUnRegResponse)
  return false;
#undef DO_
}

void BlackBerryUnRegResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BlackBerryUnRegResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BlackBerryUnRegResponse)
}

::google::protobuf::uint8* BlackBerryUnRegResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BlackBerryUnRegResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BlackBerryUnRegResponse)
  return target;
}

size_t BlackBerryUnRegResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BlackBerryUnRegResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlackBerryUnRegResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BlackBerryUnRegResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BlackBerryUnRegResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlackBerryUnRegResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BlackBerryUnRegResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BlackBerryUnRegResponse)
    MergeFrom(*source);
  }
}

void BlackBerryUnRegResponse::MergeFrom(const BlackBerryUnRegResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BlackBerryUnRegResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void BlackBerryUnRegResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BlackBerryUnRegResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlackBerryUnRegResponse::CopyFrom(const BlackBerryUnRegResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BlackBerryUnRegResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlackBerryUnRegResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void BlackBerryUnRegResponse::Swap(BlackBerryUnRegResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlackBerryUnRegResponse::InternalSwap(BlackBerryUnRegResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlackBerryUnRegResponse::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlackBerryUnRegResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool BlackBerryUnRegResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BlackBerryUnRegResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void BlackBerryUnRegResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void BlackBerryUnRegResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& BlackBerryUnRegResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.BlackBerryUnRegResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* BlackBerryUnRegResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BlackBerryUnRegResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* BlackBerryUnRegResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.BlackBerryUnRegResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void BlackBerryUnRegResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BlackBerryUnRegResponse.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AndroidGCMRegRequest::kBaseRequestFieldNumber;
const int AndroidGCMRegRequest::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AndroidGCMRegRequest::AndroidGCMRegRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.AndroidGCMRegRequest)
}
AndroidGCMRegRequest::AndroidGCMRegRequest(const AndroidGCMRegRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_token()) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.AndroidGCMRegRequest)
}

void AndroidGCMRegRequest::SharedCtor() {
  _cached_size_ = 0;
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baserequest_ = NULL;
}

AndroidGCMRegRequest::~AndroidGCMRegRequest() {
  // @@protoc_insertion_point(destructor:micromsg.AndroidGCMRegRequest)
  SharedDtor();
}

void AndroidGCMRegRequest::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void AndroidGCMRegRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AndroidGCMRegRequest::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AndroidGCMRegRequest& AndroidGCMRegRequest::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

AndroidGCMRegRequest* AndroidGCMRegRequest::New(::google::protobuf::Arena* arena) const {
  AndroidGCMRegRequest* n = new AndroidGCMRegRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AndroidGCMRegRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.AndroidGCMRegRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_token()) {
      GOOGLE_DCHECK(!token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*token_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AndroidGCMRegRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.AndroidGCMRegRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.AndroidGCMRegRequest.Token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.AndroidGCMRegRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.AndroidGCMRegRequest)
  return false;
#undef DO_
}

void AndroidGCMRegRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.AndroidGCMRegRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string Token = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AndroidGCMRegRequest.Token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.AndroidGCMRegRequest)
}

::google::protobuf::uint8* AndroidGCMRegRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.AndroidGCMRegRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string Token = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AndroidGCMRegRequest.Token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.AndroidGCMRegRequest)
  return target;
}

size_t AndroidGCMRegRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.AndroidGCMRegRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  // optional string Token = 2;
  if (has_token()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AndroidGCMRegRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.AndroidGCMRegRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AndroidGCMRegRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AndroidGCMRegRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.AndroidGCMRegRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.AndroidGCMRegRequest)
    MergeFrom(*source);
  }
}

void AndroidGCMRegRequest::MergeFrom(const AndroidGCMRegRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.AndroidGCMRegRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
  }
}

void AndroidGCMRegRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.AndroidGCMRegRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AndroidGCMRegRequest::CopyFrom(const AndroidGCMRegRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.AndroidGCMRegRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndroidGCMRegRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void AndroidGCMRegRequest::Swap(AndroidGCMRegRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AndroidGCMRegRequest::InternalSwap(AndroidGCMRegRequest* other) {
  token_.Swap(&other->token_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AndroidGCMRegRequest::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AndroidGCMRegRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool AndroidGCMRegRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AndroidGCMRegRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void AndroidGCMRegRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void AndroidGCMRegRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& AndroidGCMRegRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.AndroidGCMRegRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* AndroidGCMRegRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AndroidGCMRegRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* AndroidGCMRegRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.AndroidGCMRegRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void AndroidGCMRegRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AndroidGCMRegRequest.BaseRequest)
}

// optional string Token = 2;
bool AndroidGCMRegRequest::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AndroidGCMRegRequest::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
void AndroidGCMRegRequest::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void AndroidGCMRegRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
const ::std::string& AndroidGCMRegRequest::token() const {
  // @@protoc_insertion_point(field_get:micromsg.AndroidGCMRegRequest.Token)
  return token_.GetNoArena();
}
void AndroidGCMRegRequest::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AndroidGCMRegRequest.Token)
}
#if LANG_CXX11
void AndroidGCMRegRequest::set_token(::std::string&& value) {
  set_has_token();
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AndroidGCMRegRequest.Token)
}
#endif
void AndroidGCMRegRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AndroidGCMRegRequest.Token)
}
void AndroidGCMRegRequest::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AndroidGCMRegRequest.Token)
}
::std::string* AndroidGCMRegRequest::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:micromsg.AndroidGCMRegRequest.Token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AndroidGCMRegRequest::release_token() {
  // @@protoc_insertion_point(field_release:micromsg.AndroidGCMRegRequest.Token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AndroidGCMRegRequest::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AndroidGCMRegRequest.Token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AndroidGCMRegResponse::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AndroidGCMRegResponse::AndroidGCMRegResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.AndroidGCMRegResponse)
}
AndroidGCMRegResponse::AndroidGCMRegResponse(const AndroidGCMRegResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.AndroidGCMRegResponse)
}

void AndroidGCMRegResponse::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

AndroidGCMRegResponse::~AndroidGCMRegResponse() {
  // @@protoc_insertion_point(destructor:micromsg.AndroidGCMRegResponse)
  SharedDtor();
}

void AndroidGCMRegResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void AndroidGCMRegResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AndroidGCMRegResponse::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AndroidGCMRegResponse& AndroidGCMRegResponse::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

AndroidGCMRegResponse* AndroidGCMRegResponse::New(::google::protobuf::Arena* arena) const {
  AndroidGCMRegResponse* n = new AndroidGCMRegResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AndroidGCMRegResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.AndroidGCMRegResponse)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AndroidGCMRegResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.AndroidGCMRegResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.AndroidGCMRegResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.AndroidGCMRegResponse)
  return false;
#undef DO_
}

void AndroidGCMRegResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.AndroidGCMRegResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.AndroidGCMRegResponse)
}

::google::protobuf::uint8* AndroidGCMRegResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.AndroidGCMRegResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.AndroidGCMRegResponse)
  return target;
}

size_t AndroidGCMRegResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.AndroidGCMRegResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AndroidGCMRegResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.AndroidGCMRegResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AndroidGCMRegResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AndroidGCMRegResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.AndroidGCMRegResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.AndroidGCMRegResponse)
    MergeFrom(*source);
  }
}

void AndroidGCMRegResponse::MergeFrom(const AndroidGCMRegResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.AndroidGCMRegResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void AndroidGCMRegResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.AndroidGCMRegResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AndroidGCMRegResponse::CopyFrom(const AndroidGCMRegResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.AndroidGCMRegResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndroidGCMRegResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void AndroidGCMRegResponse::Swap(AndroidGCMRegResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AndroidGCMRegResponse::InternalSwap(AndroidGCMRegResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AndroidGCMRegResponse::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AndroidGCMRegResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool AndroidGCMRegResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AndroidGCMRegResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void AndroidGCMRegResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void AndroidGCMRegResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& AndroidGCMRegResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.AndroidGCMRegResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* AndroidGCMRegResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AndroidGCMRegResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* AndroidGCMRegResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.AndroidGCMRegResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void AndroidGCMRegResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AndroidGCMRegResponse.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AndroidGCMUnRegRequest::kBaseRequestFieldNumber;
const int AndroidGCMUnRegRequest::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AndroidGCMUnRegRequest::AndroidGCMUnRegRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.AndroidGCMUnRegRequest)
}
AndroidGCMUnRegRequest::AndroidGCMUnRegRequest(const AndroidGCMUnRegRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_token()) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.AndroidGCMUnRegRequest)
}

void AndroidGCMUnRegRequest::SharedCtor() {
  _cached_size_ = 0;
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baserequest_ = NULL;
}

AndroidGCMUnRegRequest::~AndroidGCMUnRegRequest() {
  // @@protoc_insertion_point(destructor:micromsg.AndroidGCMUnRegRequest)
  SharedDtor();
}

void AndroidGCMUnRegRequest::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void AndroidGCMUnRegRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AndroidGCMUnRegRequest::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AndroidGCMUnRegRequest& AndroidGCMUnRegRequest::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

AndroidGCMUnRegRequest* AndroidGCMUnRegRequest::New(::google::protobuf::Arena* arena) const {
  AndroidGCMUnRegRequest* n = new AndroidGCMUnRegRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AndroidGCMUnRegRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.AndroidGCMUnRegRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_token()) {
      GOOGLE_DCHECK(!token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*token_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AndroidGCMUnRegRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.AndroidGCMUnRegRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.AndroidGCMUnRegRequest.Token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.AndroidGCMUnRegRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.AndroidGCMUnRegRequest)
  return false;
#undef DO_
}

void AndroidGCMUnRegRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.AndroidGCMUnRegRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string Token = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AndroidGCMUnRegRequest.Token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.AndroidGCMUnRegRequest)
}

::google::protobuf::uint8* AndroidGCMUnRegRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.AndroidGCMUnRegRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string Token = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AndroidGCMUnRegRequest.Token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.AndroidGCMUnRegRequest)
  return target;
}

size_t AndroidGCMUnRegRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.AndroidGCMUnRegRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  // optional string Token = 2;
  if (has_token()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AndroidGCMUnRegRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.AndroidGCMUnRegRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AndroidGCMUnRegRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AndroidGCMUnRegRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.AndroidGCMUnRegRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.AndroidGCMUnRegRequest)
    MergeFrom(*source);
  }
}

void AndroidGCMUnRegRequest::MergeFrom(const AndroidGCMUnRegRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.AndroidGCMUnRegRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
  }
}

void AndroidGCMUnRegRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.AndroidGCMUnRegRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AndroidGCMUnRegRequest::CopyFrom(const AndroidGCMUnRegRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.AndroidGCMUnRegRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndroidGCMUnRegRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void AndroidGCMUnRegRequest::Swap(AndroidGCMUnRegRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AndroidGCMUnRegRequest::InternalSwap(AndroidGCMUnRegRequest* other) {
  token_.Swap(&other->token_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AndroidGCMUnRegRequest::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AndroidGCMUnRegRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool AndroidGCMUnRegRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AndroidGCMUnRegRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void AndroidGCMUnRegRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void AndroidGCMUnRegRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& AndroidGCMUnRegRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.AndroidGCMUnRegRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* AndroidGCMUnRegRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AndroidGCMUnRegRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* AndroidGCMUnRegRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.AndroidGCMUnRegRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void AndroidGCMUnRegRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AndroidGCMUnRegRequest.BaseRequest)
}

// optional string Token = 2;
bool AndroidGCMUnRegRequest::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AndroidGCMUnRegRequest::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
void AndroidGCMUnRegRequest::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void AndroidGCMUnRegRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
const ::std::string& AndroidGCMUnRegRequest::token() const {
  // @@protoc_insertion_point(field_get:micromsg.AndroidGCMUnRegRequest.Token)
  return token_.GetNoArena();
}
void AndroidGCMUnRegRequest::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AndroidGCMUnRegRequest.Token)
}
#if LANG_CXX11
void AndroidGCMUnRegRequest::set_token(::std::string&& value) {
  set_has_token();
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AndroidGCMUnRegRequest.Token)
}
#endif
void AndroidGCMUnRegRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AndroidGCMUnRegRequest.Token)
}
void AndroidGCMUnRegRequest::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AndroidGCMUnRegRequest.Token)
}
::std::string* AndroidGCMUnRegRequest::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:micromsg.AndroidGCMUnRegRequest.Token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AndroidGCMUnRegRequest::release_token() {
  // @@protoc_insertion_point(field_release:micromsg.AndroidGCMUnRegRequest.Token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AndroidGCMUnRegRequest::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AndroidGCMUnRegRequest.Token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AndroidGCMUnRegResponse::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AndroidGCMUnRegResponse::AndroidGCMUnRegResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.AndroidGCMUnRegResponse)
}
AndroidGCMUnRegResponse::AndroidGCMUnRegResponse(const AndroidGCMUnRegResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.AndroidGCMUnRegResponse)
}

void AndroidGCMUnRegResponse::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

AndroidGCMUnRegResponse::~AndroidGCMUnRegResponse() {
  // @@protoc_insertion_point(destructor:micromsg.AndroidGCMUnRegResponse)
  SharedDtor();
}

void AndroidGCMUnRegResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void AndroidGCMUnRegResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AndroidGCMUnRegResponse::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AndroidGCMUnRegResponse& AndroidGCMUnRegResponse::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

AndroidGCMUnRegResponse* AndroidGCMUnRegResponse::New(::google::protobuf::Arena* arena) const {
  AndroidGCMUnRegResponse* n = new AndroidGCMUnRegResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AndroidGCMUnRegResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.AndroidGCMUnRegResponse)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AndroidGCMUnRegResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.AndroidGCMUnRegResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.AndroidGCMUnRegResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.AndroidGCMUnRegResponse)
  return false;
#undef DO_
}

void AndroidGCMUnRegResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.AndroidGCMUnRegResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.AndroidGCMUnRegResponse)
}

::google::protobuf::uint8* AndroidGCMUnRegResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.AndroidGCMUnRegResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.AndroidGCMUnRegResponse)
  return target;
}

size_t AndroidGCMUnRegResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.AndroidGCMUnRegResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AndroidGCMUnRegResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.AndroidGCMUnRegResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AndroidGCMUnRegResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AndroidGCMUnRegResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.AndroidGCMUnRegResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.AndroidGCMUnRegResponse)
    MergeFrom(*source);
  }
}

void AndroidGCMUnRegResponse::MergeFrom(const AndroidGCMUnRegResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.AndroidGCMUnRegResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void AndroidGCMUnRegResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.AndroidGCMUnRegResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AndroidGCMUnRegResponse::CopyFrom(const AndroidGCMUnRegResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.AndroidGCMUnRegResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndroidGCMUnRegResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void AndroidGCMUnRegResponse::Swap(AndroidGCMUnRegResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AndroidGCMUnRegResponse::InternalSwap(AndroidGCMUnRegResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AndroidGCMUnRegResponse::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AndroidGCMUnRegResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool AndroidGCMUnRegResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AndroidGCMUnRegResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void AndroidGCMUnRegResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void AndroidGCMUnRegResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& AndroidGCMUnRegResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.AndroidGCMUnRegResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* AndroidGCMUnRegResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AndroidGCMUnRegResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* AndroidGCMUnRegResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.AndroidGCMUnRegResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void AndroidGCMUnRegResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AndroidGCMUnRegResponse.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RSACert::kKeyNFieldNumber;
const int RSACert::kKeyEFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RSACert::RSACert()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.RSACert)
}
RSACert::RSACert(const RSACert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  keyn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_keyn()) {
    keyn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keyn_);
  }
  keye_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_keye()) {
    keye_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keye_);
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.RSACert)
}

void RSACert::SharedCtor() {
  _cached_size_ = 0;
  keyn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  keye_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RSACert::~RSACert() {
  // @@protoc_insertion_point(destructor:micromsg.RSACert)
  SharedDtor();
}

void RSACert::SharedDtor() {
  keyn_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  keye_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RSACert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RSACert::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RSACert& RSACert::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

RSACert* RSACert::New(::google::protobuf::Arena* arena) const {
  RSACert* n = new RSACert;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RSACert::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.RSACert)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_keyn()) {
      GOOGLE_DCHECK(!keyn_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*keyn_.UnsafeRawStringPointer())->clear();
    }
    if (has_keye()) {
      GOOGLE_DCHECK(!keye_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*keye_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RSACert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.RSACert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string KeyN = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keyn()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keyn().data(), this->keyn().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.RSACert.KeyN");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string KeyE = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keye()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keye().data(), this->keye().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.RSACert.KeyE");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.RSACert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.RSACert)
  return false;
#undef DO_
}

void RSACert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.RSACert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string KeyN = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keyn().data(), this->keyn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RSACert.KeyN");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->keyn(), output);
  }

  // optional string KeyE = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keye().data(), this->keye().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RSACert.KeyE");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->keye(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.RSACert)
}

::google::protobuf::uint8* RSACert::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.RSACert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string KeyN = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keyn().data(), this->keyn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RSACert.KeyN");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->keyn(), target);
  }

  // optional string KeyE = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keye().data(), this->keye().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RSACert.KeyE");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->keye(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.RSACert)
  return target;
}

size_t RSACert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.RSACert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string KeyN = 1;
    if (has_keyn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keyn());
    }

    // optional string KeyE = 2;
    if (has_keye()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keye());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RSACert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.RSACert)
  GOOGLE_DCHECK_NE(&from, this);
  const RSACert* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RSACert>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.RSACert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.RSACert)
    MergeFrom(*source);
  }
}

void RSACert::MergeFrom(const RSACert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.RSACert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_keyn();
      keyn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keyn_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_keye();
      keye_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keye_);
    }
  }
}

void RSACert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.RSACert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RSACert::CopyFrom(const RSACert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.RSACert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RSACert::IsInitialized() const {
  return true;
}

void RSACert::Swap(RSACert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RSACert::InternalSwap(RSACert* other) {
  keyn_.Swap(&other->keyn_);
  keye_.Swap(&other->keye_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RSACert::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RSACert

// optional string KeyN = 1;
bool RSACert::has_keyn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RSACert::set_has_keyn() {
  _has_bits_[0] |= 0x00000001u;
}
void RSACert::clear_has_keyn() {
  _has_bits_[0] &= ~0x00000001u;
}
void RSACert::clear_keyn() {
  keyn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_keyn();
}
const ::std::string& RSACert::keyn() const {
  // @@protoc_insertion_point(field_get:micromsg.RSACert.KeyN)
  return keyn_.GetNoArena();
}
void RSACert::set_keyn(const ::std::string& value) {
  set_has_keyn();
  keyn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.RSACert.KeyN)
}
#if LANG_CXX11
void RSACert::set_keyn(::std::string&& value) {
  set_has_keyn();
  keyn_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.RSACert.KeyN)
}
#endif
void RSACert::set_keyn(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_keyn();
  keyn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.RSACert.KeyN)
}
void RSACert::set_keyn(const char* value, size_t size) {
  set_has_keyn();
  keyn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.RSACert.KeyN)
}
::std::string* RSACert::mutable_keyn() {
  set_has_keyn();
  // @@protoc_insertion_point(field_mutable:micromsg.RSACert.KeyN)
  return keyn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RSACert::release_keyn() {
  // @@protoc_insertion_point(field_release:micromsg.RSACert.KeyN)
  clear_has_keyn();
  return keyn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RSACert::set_allocated_keyn(::std::string* keyn) {
  if (keyn != NULL) {
    set_has_keyn();
  } else {
    clear_has_keyn();
  }
  keyn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), keyn);
  // @@protoc_insertion_point(field_set_allocated:micromsg.RSACert.KeyN)
}

// optional string KeyE = 2;
bool RSACert::has_keye() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RSACert::set_has_keye() {
  _has_bits_[0] |= 0x00000002u;
}
void RSACert::clear_has_keye() {
  _has_bits_[0] &= ~0x00000002u;
}
void RSACert::clear_keye() {
  keye_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_keye();
}
const ::std::string& RSACert::keye() const {
  // @@protoc_insertion_point(field_get:micromsg.RSACert.KeyE)
  return keye_.GetNoArena();
}
void RSACert::set_keye(const ::std::string& value) {
  set_has_keye();
  keye_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.RSACert.KeyE)
}
#if LANG_CXX11
void RSACert::set_keye(::std::string&& value) {
  set_has_keye();
  keye_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.RSACert.KeyE)
}
#endif
void RSACert::set_keye(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_keye();
  keye_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.RSACert.KeyE)
}
void RSACert::set_keye(const char* value, size_t size) {
  set_has_keye();
  keye_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.RSACert.KeyE)
}
::std::string* RSACert::mutable_keye() {
  set_has_keye();
  // @@protoc_insertion_point(field_mutable:micromsg.RSACert.KeyE)
  return keye_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RSACert::release_keye() {
  // @@protoc_insertion_point(field_release:micromsg.RSACert.KeyE)
  clear_has_keye();
  return keye_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RSACert::set_allocated_keye(::std::string* keye) {
  if (keye != NULL) {
    set_has_keye();
  } else {
    clear_has_keye();
  }
  keye_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), keye);
  // @@protoc_insertion_point(field_set_allocated:micromsg.RSACert.KeyE)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetCertRequest::kBaseRequestFieldNumber;
const int GetCertRequest::kRandomEncryKeyFieldNumber;
const int GetCertRequest::kCurrentCertVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetCertRequest::GetCertRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetCertRequest)
}
GetCertRequest::GetCertRequest(const GetCertRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_randomencrykey()) {
    randomencrykey_ = new ::micromsg::SKBuiltinBuffer_t(*from.randomencrykey_);
  } else {
    randomencrykey_ = NULL;
  }
  currentcertversion_ = from.currentcertversion_;
  // @@protoc_insertion_point(copy_constructor:micromsg.GetCertRequest)
}

void GetCertRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&currentcertversion_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(currentcertversion_));
}

GetCertRequest::~GetCertRequest() {
  // @@protoc_insertion_point(destructor:micromsg.GetCertRequest)
  SharedDtor();
}

void GetCertRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete randomencrykey_;
  }
}

void GetCertRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCertRequest::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetCertRequest& GetCertRequest::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetCertRequest* GetCertRequest::New(::google::protobuf::Arena* arena) const {
  GetCertRequest* n = new GetCertRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetCertRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetCertRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_randomencrykey()) {
      GOOGLE_DCHECK(randomencrykey_ != NULL);
      randomencrykey_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  currentcertversion_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetCertRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetCertRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_randomencrykey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 CurrentCertVersion = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_currentcertversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currentcertversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetCertRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetCertRequest)
  return false;
#undef DO_
}

void GetCertRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetCertRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->randomencrykey_, output);
  }

  // required uint32 CurrentCertVersion = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->currentcertversion(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetCertRequest)
}

::google::protobuf::uint8* GetCertRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetCertRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->randomencrykey_, deterministic, target);
  }

  // required uint32 CurrentCertVersion = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->currentcertversion(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetCertRequest)
  return target;
}

size_t GetCertRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetCertRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_randomencrykey()) {
    // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->randomencrykey_);
  }

  if (has_currentcertversion()) {
    // required uint32 CurrentCertVersion = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->currentcertversion());
  }

  return total_size;
}
size_t GetCertRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetCertRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->randomencrykey_);

    // required uint32 CurrentCertVersion = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->currentcertversion());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCertRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetCertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCertRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetCertRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetCertRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetCertRequest)
    MergeFrom(*source);
  }
}

void GetCertRequest::MergeFrom(const GetCertRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetCertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_randomencrykey()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.randomencrykey());
    }
    if (cached_has_bits & 0x00000004u) {
      currentcertversion_ = from.currentcertversion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetCertRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetCertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCertRequest::CopyFrom(const GetCertRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetCertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCertRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_randomencrykey()) {
    if (!this->randomencrykey_->IsInitialized()) return false;
  }
  return true;
}

void GetCertRequest::Swap(GetCertRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetCertRequest::InternalSwap(GetCertRequest* other) {
  std::swap(baserequest_, other->baserequest_);
  std::swap(randomencrykey_, other->randomencrykey_);
  std::swap(currentcertversion_, other->currentcertversion_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetCertRequest::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetCertRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool GetCertRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetCertRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void GetCertRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetCertRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GetCertRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCertRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GetCertRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetCertRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GetCertRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetCertRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GetCertRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCertRequest.BaseRequest)
}

// required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 2;
bool GetCertRequest::has_randomencrykey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetCertRequest::set_has_randomencrykey() {
  _has_bits_[0] |= 0x00000002u;
}
void GetCertRequest::clear_has_randomencrykey() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetCertRequest::clear_randomencrykey() {
  if (randomencrykey_ != NULL) randomencrykey_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_randomencrykey();
}
const ::micromsg::SKBuiltinBuffer_t& GetCertRequest::randomencrykey() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCertRequest.RandomEncryKey)
  return randomencrykey_ != NULL ? *randomencrykey_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* GetCertRequest::mutable_randomencrykey() {
  set_has_randomencrykey();
  if (randomencrykey_ == NULL) {
    randomencrykey_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetCertRequest.RandomEncryKey)
  return randomencrykey_;
}
::micromsg::SKBuiltinBuffer_t* GetCertRequest::release_randomencrykey() {
  // @@protoc_insertion_point(field_release:micromsg.GetCertRequest.RandomEncryKey)
  clear_has_randomencrykey();
  ::micromsg::SKBuiltinBuffer_t* temp = randomencrykey_;
  randomencrykey_ = NULL;
  return temp;
}
void GetCertRequest::set_allocated_randomencrykey(::micromsg::SKBuiltinBuffer_t* randomencrykey) {
  delete randomencrykey_;
  randomencrykey_ = randomencrykey;
  if (randomencrykey) {
    set_has_randomencrykey();
  } else {
    clear_has_randomencrykey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCertRequest.RandomEncryKey)
}

// required uint32 CurrentCertVersion = 3;
bool GetCertRequest::has_currentcertversion() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetCertRequest::set_has_currentcertversion() {
  _has_bits_[0] |= 0x00000004u;
}
void GetCertRequest::clear_has_currentcertversion() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetCertRequest::clear_currentcertversion() {
  currentcertversion_ = 0u;
  clear_has_currentcertversion();
}
::google::protobuf::uint32 GetCertRequest::currentcertversion() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCertRequest.CurrentCertVersion)
  return currentcertversion_;
}
void GetCertRequest::set_currentcertversion(::google::protobuf::uint32 value) {
  set_has_currentcertversion();
  currentcertversion_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetCertRequest.CurrentCertVersion)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetCertResponse::kBaseResponseFieldNumber;
const int GetCertResponse::kCertValueFieldNumber;
const int GetCertResponse::kCertVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetCertResponse::GetCertResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetCertResponse)
}
GetCertResponse::GetCertResponse(const GetCertResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_certvalue()) {
    certvalue_ = new ::micromsg::RSACert(*from.certvalue_);
  } else {
    certvalue_ = NULL;
  }
  certversion_ = from.certversion_;
  // @@protoc_insertion_point(copy_constructor:micromsg.GetCertResponse)
}

void GetCertResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&certversion_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(certversion_));
}

GetCertResponse::~GetCertResponse() {
  // @@protoc_insertion_point(destructor:micromsg.GetCertResponse)
  SharedDtor();
}

void GetCertResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete certvalue_;
  }
}

void GetCertResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCertResponse::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetCertResponse& GetCertResponse::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetCertResponse* GetCertResponse::New(::google::protobuf::Arena* arena) const {
  GetCertResponse* n = new GetCertResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetCertResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetCertResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_certvalue()) {
      GOOGLE_DCHECK(certvalue_ != NULL);
      certvalue_->::micromsg::RSACert::Clear();
    }
  }
  certversion_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetCertResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetCertResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.RSACert CertValue = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_certvalue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 CertVersion = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_certversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &certversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetCertResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetCertResponse)
  return false;
#undef DO_
}

void GetCertResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetCertResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required .micromsg.RSACert CertValue = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->certvalue_, output);
  }

  // required uint32 CertVersion = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->certversion(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetCertResponse)
}

::google::protobuf::uint8* GetCertResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetCertResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required .micromsg.RSACert CertValue = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->certvalue_, deterministic, target);
  }

  // required uint32 CertVersion = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->certversion(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetCertResponse)
  return target;
}

size_t GetCertResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetCertResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_certvalue()) {
    // required .micromsg.RSACert CertValue = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->certvalue_);
  }

  if (has_certversion()) {
    // required uint32 CertVersion = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->certversion());
  }

  return total_size;
}
size_t GetCertResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetCertResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required .micromsg.RSACert CertValue = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->certvalue_);

    // required uint32 CertVersion = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->certversion());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCertResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetCertResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCertResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetCertResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetCertResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetCertResponse)
    MergeFrom(*source);
  }
}

void GetCertResponse::MergeFrom(const GetCertResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetCertResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_certvalue()->::micromsg::RSACert::MergeFrom(from.certvalue());
    }
    if (cached_has_bits & 0x00000004u) {
      certversion_ = from.certversion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetCertResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetCertResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCertResponse::CopyFrom(const GetCertResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetCertResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCertResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void GetCertResponse::Swap(GetCertResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetCertResponse::InternalSwap(GetCertResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(certvalue_, other->certvalue_);
  std::swap(certversion_, other->certversion_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetCertResponse::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetCertResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetCertResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetCertResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void GetCertResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetCertResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetCertResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCertResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetCertResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetCertResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetCertResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetCertResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetCertResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCertResponse.BaseResponse)
}

// required .micromsg.RSACert CertValue = 2;
bool GetCertResponse::has_certvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetCertResponse::set_has_certvalue() {
  _has_bits_[0] |= 0x00000002u;
}
void GetCertResponse::clear_has_certvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetCertResponse::clear_certvalue() {
  if (certvalue_ != NULL) certvalue_->::micromsg::RSACert::Clear();
  clear_has_certvalue();
}
const ::micromsg::RSACert& GetCertResponse::certvalue() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCertResponse.CertValue)
  return certvalue_ != NULL ? *certvalue_
                         : *::micromsg::RSACert::internal_default_instance();
}
::micromsg::RSACert* GetCertResponse::mutable_certvalue() {
  set_has_certvalue();
  if (certvalue_ == NULL) {
    certvalue_ = new ::micromsg::RSACert;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetCertResponse.CertValue)
  return certvalue_;
}
::micromsg::RSACert* GetCertResponse::release_certvalue() {
  // @@protoc_insertion_point(field_release:micromsg.GetCertResponse.CertValue)
  clear_has_certvalue();
  ::micromsg::RSACert* temp = certvalue_;
  certvalue_ = NULL;
  return temp;
}
void GetCertResponse::set_allocated_certvalue(::micromsg::RSACert* certvalue) {
  delete certvalue_;
  certvalue_ = certvalue;
  if (certvalue) {
    set_has_certvalue();
  } else {
    clear_has_certvalue();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCertResponse.CertValue)
}

// required uint32 CertVersion = 3;
bool GetCertResponse::has_certversion() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetCertResponse::set_has_certversion() {
  _has_bits_[0] |= 0x00000004u;
}
void GetCertResponse::clear_has_certversion() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetCertResponse::clear_certversion() {
  certversion_ = 0u;
  clear_has_certversion();
}
::google::protobuf::uint32 GetCertResponse::certversion() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCertResponse.CertVersion)
  return certversion_;
}
void GetCertResponse::set_certversion(::google::protobuf::uint32 value) {
  set_has_certversion();
  certversion_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetCertResponse.CertVersion)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewAuthRsaReqData::kRandomEncryKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewAuthRsaReqData::NewAuthRsaReqData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.NewAuthRsaReqData)
}
NewAuthRsaReqData::NewAuthRsaReqData(const NewAuthRsaReqData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_randomencrykey()) {
    randomencrykey_ = new ::micromsg::SKBuiltinBuffer_t(*from.randomencrykey_);
  } else {
    randomencrykey_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.NewAuthRsaReqData)
}

void NewAuthRsaReqData::SharedCtor() {
  _cached_size_ = 0;
  randomencrykey_ = NULL;
}

NewAuthRsaReqData::~NewAuthRsaReqData() {
  // @@protoc_insertion_point(destructor:micromsg.NewAuthRsaReqData)
  SharedDtor();
}

void NewAuthRsaReqData::SharedDtor() {
  if (this != internal_default_instance()) {
    delete randomencrykey_;
  }
}

void NewAuthRsaReqData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewAuthRsaReqData::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NewAuthRsaReqData& NewAuthRsaReqData::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

NewAuthRsaReqData* NewAuthRsaReqData::New(::google::protobuf::Arena* arena) const {
  NewAuthRsaReqData* n = new NewAuthRsaReqData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NewAuthRsaReqData::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.NewAuthRsaReqData)
  if (has_randomencrykey()) {
    GOOGLE_DCHECK(randomencrykey_ != NULL);
    randomencrykey_->::micromsg::SKBuiltinBuffer_t::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NewAuthRsaReqData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.NewAuthRsaReqData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_randomencrykey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.NewAuthRsaReqData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.NewAuthRsaReqData)
  return false;
#undef DO_
}

void NewAuthRsaReqData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.NewAuthRsaReqData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->randomencrykey_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.NewAuthRsaReqData)
}

::google::protobuf::uint8* NewAuthRsaReqData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.NewAuthRsaReqData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->randomencrykey_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.NewAuthRsaReqData)
  return target;
}

size_t NewAuthRsaReqData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.NewAuthRsaReqData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 1;
  if (has_randomencrykey()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->randomencrykey_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewAuthRsaReqData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.NewAuthRsaReqData)
  GOOGLE_DCHECK_NE(&from, this);
  const NewAuthRsaReqData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NewAuthRsaReqData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.NewAuthRsaReqData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.NewAuthRsaReqData)
    MergeFrom(*source);
  }
}

void NewAuthRsaReqData::MergeFrom(const NewAuthRsaReqData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.NewAuthRsaReqData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_randomencrykey()) {
    mutable_randomencrykey()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.randomencrykey());
  }
}

void NewAuthRsaReqData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.NewAuthRsaReqData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewAuthRsaReqData::CopyFrom(const NewAuthRsaReqData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.NewAuthRsaReqData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewAuthRsaReqData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_randomencrykey()) {
    if (!this->randomencrykey_->IsInitialized()) return false;
  }
  return true;
}

void NewAuthRsaReqData::Swap(NewAuthRsaReqData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewAuthRsaReqData::InternalSwap(NewAuthRsaReqData* other) {
  std::swap(randomencrykey_, other->randomencrykey_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NewAuthRsaReqData::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NewAuthRsaReqData

// required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 1;
bool NewAuthRsaReqData::has_randomencrykey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NewAuthRsaReqData::set_has_randomencrykey() {
  _has_bits_[0] |= 0x00000001u;
}
void NewAuthRsaReqData::clear_has_randomencrykey() {
  _has_bits_[0] &= ~0x00000001u;
}
void NewAuthRsaReqData::clear_randomencrykey() {
  if (randomencrykey_ != NULL) randomencrykey_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_randomencrykey();
}
const ::micromsg::SKBuiltinBuffer_t& NewAuthRsaReqData::randomencrykey() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthRsaReqData.RandomEncryKey)
  return randomencrykey_ != NULL ? *randomencrykey_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* NewAuthRsaReqData::mutable_randomencrykey() {
  set_has_randomencrykey();
  if (randomencrykey_ == NULL) {
    randomencrykey_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthRsaReqData.RandomEncryKey)
  return randomencrykey_;
}
::micromsg::SKBuiltinBuffer_t* NewAuthRsaReqData::release_randomencrykey() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthRsaReqData.RandomEncryKey)
  clear_has_randomencrykey();
  ::micromsg::SKBuiltinBuffer_t* temp = randomencrykey_;
  randomencrykey_ = NULL;
  return temp;
}
void NewAuthRsaReqData::set_allocated_randomencrykey(::micromsg::SKBuiltinBuffer_t* randomencrykey) {
  delete randomencrykey_;
  randomencrykey_ = randomencrykey;
  if (randomencrykey) {
    set_has_randomencrykey();
  } else {
    clear_has_randomencrykey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthRsaReqData.RandomEncryKey)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewAuthRequest::kBaseRequestFieldNumber;
const int NewAuthRequest::kUserNameFieldNumber;
const int NewAuthRequest::kPwdFieldNumber;
const int NewAuthRequest::kImgSidFieldNumber;
const int NewAuthRequest::kImgCodeFieldNumber;
const int NewAuthRequest::kPwd2FieldNumber;
const int NewAuthRequest::kBuiltinIPSeqFieldNumber;
const int NewAuthRequest::kExtPwdFieldNumber;
const int NewAuthRequest::kExtPwd2FieldNumber;
const int NewAuthRequest::kTimeZoneFieldNumber;
const int NewAuthRequest::kLanguageFieldNumber;
const int NewAuthRequest::kIMEIFieldNumber;
const int NewAuthRequest::kChannelFieldNumber;
const int NewAuthRequest::kIPhoneVerFieldNumber;
const int NewAuthRequest::kImgEncryptKeyFieldNumber;
const int NewAuthRequest::kKSidFieldNumber;
const int NewAuthRequest::kTimeStampFieldNumber;
const int NewAuthRequest::kDeviceBrandFieldNumber;
const int NewAuthRequest::kDeviceModelFieldNumber;
const int NewAuthRequest::kOSTypeFieldNumber;
const int NewAuthRequest::kDeviceTypeFieldNumber;
const int NewAuthRequest::kSoftTypeFieldNumber;
const int NewAuthRequest::kAuthTicketFieldNumber;
const int NewAuthRequest::kRealCountryFieldNumber;
const int NewAuthRequest::kSignatureFieldNumber;
const int NewAuthRequest::kRandomEncryKeyFieldNumber;
const int NewAuthRequest::kAutoAuthTicketFieldNumber;
const int NewAuthRequest::kDeviceNameFieldNumber;
const int NewAuthRequest::kWTLoginReqBuffFieldNumber;
const int NewAuthRequest::kInputTypeFieldNumber;
const int NewAuthRequest::kClientSeqIDFieldNumber;
const int NewAuthRequest::kBundleIDFieldNumber;
const int NewAuthRequest::kAdSourceFieldNumber;
const int NewAuthRequest::kCliDBEncryptKeyFieldNumber;
const int NewAuthRequest::kCliDBEncryptInfoFieldNumber;
const int NewAuthRequest::kVerifySignatureFieldNumber;
const int NewAuthRequest::kVerifyContentFieldNumber;
const int NewAuthRequest::kSessionModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewAuthRequest::NewAuthRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.NewAuthRequest)
}
NewAuthRequest::NewAuthRequest(const NewAuthRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pwd2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pwd2()) {
    pwd2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd2_);
  }
  extpwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_extpwd()) {
    extpwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extpwd_);
  }
  extpwd2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_extpwd2()) {
    extpwd2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extpwd2_);
  }
  timezone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_timezone()) {
    timezone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timezone_);
  }
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_language()) {
    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  imei_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_imei()) {
    imei_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imei_);
  }
  iphonever_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_iphonever()) {
    iphonever_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iphonever_);
  }
  devicebrand_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_devicebrand()) {
    devicebrand_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicebrand_);
  }
  devicemodel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_devicemodel()) {
    devicemodel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicemodel_);
  }
  ostype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ostype()) {
    ostype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ostype_);
  }
  devicetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_devicetype()) {
    devicetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicetype_);
  }
  softtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_softtype()) {
    softtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.softtype_);
  }
  authticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_authticket()) {
    authticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authticket_);
  }
  realcountry_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_realcountry()) {
    realcountry_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.realcountry_);
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  autoauthticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_autoauthticket()) {
    autoauthticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.autoauthticket_);
  }
  devicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_devicename()) {
    devicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicename_);
  }
  clientseqid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientseqid()) {
    clientseqid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientseqid_);
  }
  bundleid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bundleid()) {
    bundleid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bundleid_);
  }
  adsource_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_adsource()) {
    adsource_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.adsource_);
  }
  verifysignature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_verifysignature()) {
    verifysignature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifysignature_);
  }
  verifycontent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_verifycontent()) {
    verifycontent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifycontent_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_username()) {
    username_ = new ::micromsg::SKBuiltinString_t(*from.username_);
  } else {
    username_ = NULL;
  }
  if (from.has_pwd()) {
    pwd_ = new ::micromsg::SKBuiltinString_t(*from.pwd_);
  } else {
    pwd_ = NULL;
  }
  if (from.has_imgsid()) {
    imgsid_ = new ::micromsg::SKBuiltinString_t(*from.imgsid_);
  } else {
    imgsid_ = NULL;
  }
  if (from.has_imgcode()) {
    imgcode_ = new ::micromsg::SKBuiltinString_t(*from.imgcode_);
  } else {
    imgcode_ = NULL;
  }
  if (from.has_imgencryptkey()) {
    imgencryptkey_ = new ::micromsg::SKBuiltinString_t(*from.imgencryptkey_);
  } else {
    imgencryptkey_ = NULL;
  }
  if (from.has_ksid()) {
    ksid_ = new ::micromsg::SKBuiltinBuffer_t(*from.ksid_);
  } else {
    ksid_ = NULL;
  }
  if (from.has_randomencrykey()) {
    randomencrykey_ = new ::micromsg::SKBuiltinBuffer_t(*from.randomencrykey_);
  } else {
    randomencrykey_ = NULL;
  }
  if (from.has_wtloginreqbuff()) {
    wtloginreqbuff_ = new ::micromsg::SKBuiltinBuffer_t(*from.wtloginreqbuff_);
  } else {
    wtloginreqbuff_ = NULL;
  }
  if (from.has_clidbencryptkey()) {
    clidbencryptkey_ = new ::micromsg::SKBuiltinBuffer_t(*from.clidbencryptkey_);
  } else {
    clidbencryptkey_ = NULL;
  }
  if (from.has_clidbencryptinfo()) {
    clidbencryptinfo_ = new ::micromsg::SKBuiltinBuffer_t(*from.clidbencryptinfo_);
  } else {
    clidbencryptinfo_ = NULL;
  }
  ::memcpy(&builtinipseq_, &from.builtinipseq_,
    reinterpret_cast<char*>(&sessionmode_) -
    reinterpret_cast<char*>(&builtinipseq_) + sizeof(sessionmode_));
  // @@protoc_insertion_point(copy_constructor:micromsg.NewAuthRequest)
}

void NewAuthRequest::SharedCtor() {
  pwd2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extpwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extpwd2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imei_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iphonever_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicebrand_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicemodel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ostype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  softtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  realcountry_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  autoauthticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientseqid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bundleid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  adsource_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifysignature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifycontent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&sessionmode_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(sessionmode_));
  _cached_size_ = 0;
}

NewAuthRequest::~NewAuthRequest() {
  // @@protoc_insertion_point(destructor:micromsg.NewAuthRequest)
  SharedDtor();
}

void NewAuthRequest::SharedDtor() {
  pwd2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extpwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extpwd2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imei_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iphonever_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicebrand_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicemodel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ostype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicetype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  softtype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  realcountry_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  autoauthticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientseqid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bundleid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  adsource_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifysignature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifycontent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete username_;
  }
  if (this != internal_default_instance()) {
    delete pwd_;
  }
  if (this != internal_default_instance()) {
    delete imgsid_;
  }
  if (this != internal_default_instance()) {
    delete imgcode_;
  }
  if (this != internal_default_instance()) {
    delete imgencryptkey_;
  }
  if (this != internal_default_instance()) {
    delete ksid_;
  }
  if (this != internal_default_instance()) {
    delete randomencrykey_;
  }
  if (this != internal_default_instance()) {
    delete wtloginreqbuff_;
  }
  if (this != internal_default_instance()) {
    delete clidbencryptkey_;
  }
  if (this != internal_default_instance()) {
    delete clidbencryptinfo_;
  }
}

void NewAuthRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewAuthRequest::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NewAuthRequest& NewAuthRequest::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

NewAuthRequest* NewAuthRequest::New(::google::protobuf::Arena* arena) const {
  NewAuthRequest* n = new NewAuthRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NewAuthRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.NewAuthRequest)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_pwd2()) {
      GOOGLE_DCHECK(!pwd2_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pwd2_.UnsafeRawStringPointer())->clear();
    }
    if (has_extpwd()) {
      GOOGLE_DCHECK(!extpwd_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*extpwd_.UnsafeRawStringPointer())->clear();
    }
    if (has_extpwd2()) {
      GOOGLE_DCHECK(!extpwd2_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*extpwd2_.UnsafeRawStringPointer())->clear();
    }
    if (has_timezone()) {
      GOOGLE_DCHECK(!timezone_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*timezone_.UnsafeRawStringPointer())->clear();
    }
    if (has_language()) {
      GOOGLE_DCHECK(!language_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*language_.UnsafeRawStringPointer())->clear();
    }
    if (has_imei()) {
      GOOGLE_DCHECK(!imei_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*imei_.UnsafeRawStringPointer())->clear();
    }
    if (has_iphonever()) {
      GOOGLE_DCHECK(!iphonever_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*iphonever_.UnsafeRawStringPointer())->clear();
    }
    if (has_devicebrand()) {
      GOOGLE_DCHECK(!devicebrand_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*devicebrand_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has_devicemodel()) {
      GOOGLE_DCHECK(!devicemodel_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*devicemodel_.UnsafeRawStringPointer())->clear();
    }
    if (has_ostype()) {
      GOOGLE_DCHECK(!ostype_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ostype_.UnsafeRawStringPointer())->clear();
    }
    if (has_devicetype()) {
      GOOGLE_DCHECK(!devicetype_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*devicetype_.UnsafeRawStringPointer())->clear();
    }
    if (has_softtype()) {
      GOOGLE_DCHECK(!softtype_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*softtype_.UnsafeRawStringPointer())->clear();
    }
    if (has_authticket()) {
      GOOGLE_DCHECK(!authticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*authticket_.UnsafeRawStringPointer())->clear();
    }
    if (has_realcountry()) {
      GOOGLE_DCHECK(!realcountry_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*realcountry_.UnsafeRawStringPointer())->clear();
    }
    if (has_signature()) {
      GOOGLE_DCHECK(!signature_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*signature_.UnsafeRawStringPointer())->clear();
    }
    if (has_autoauthticket()) {
      GOOGLE_DCHECK(!autoauthticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*autoauthticket_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    if (has_devicename()) {
      GOOGLE_DCHECK(!devicename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*devicename_.UnsafeRawStringPointer())->clear();
    }
    if (has_clientseqid()) {
      GOOGLE_DCHECK(!clientseqid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*clientseqid_.UnsafeRawStringPointer())->clear();
    }
    if (has_bundleid()) {
      GOOGLE_DCHECK(!bundleid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bundleid_.UnsafeRawStringPointer())->clear();
    }
    if (has_adsource()) {
      GOOGLE_DCHECK(!adsource_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*adsource_.UnsafeRawStringPointer())->clear();
    }
    if (has_verifysignature()) {
      GOOGLE_DCHECK(!verifysignature_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*verifysignature_.UnsafeRawStringPointer())->clear();
    }
    if (has_verifycontent()) {
      GOOGLE_DCHECK(!verifycontent_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*verifycontent_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_username()) {
      GOOGLE_DCHECK(username_ != NULL);
      username_->::micromsg::SKBuiltinString_t::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    if (has_pwd()) {
      GOOGLE_DCHECK(pwd_ != NULL);
      pwd_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_imgsid()) {
      GOOGLE_DCHECK(imgsid_ != NULL);
      imgsid_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_imgcode()) {
      GOOGLE_DCHECK(imgcode_ != NULL);
      imgcode_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_imgencryptkey()) {
      GOOGLE_DCHECK(imgencryptkey_ != NULL);
      imgencryptkey_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_ksid()) {
      GOOGLE_DCHECK(ksid_ != NULL);
      ksid_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_randomencrykey()) {
      GOOGLE_DCHECK(randomencrykey_ != NULL);
      randomencrykey_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_wtloginreqbuff()) {
      GOOGLE_DCHECK(wtloginreqbuff_ != NULL);
      wtloginreqbuff_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_clidbencryptkey()) {
      GOOGLE_DCHECK(clidbencryptkey_ != NULL);
      clidbencryptkey_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (has_clidbencryptinfo()) {
    GOOGLE_DCHECK(clidbencryptinfo_ != NULL);
    clidbencryptinfo_->::micromsg::SKBuiltinBuffer_t::Clear();
  }
  if (_has_bits_[32 / 32] & 62u) {
    ::memset(&builtinipseq_, 0, reinterpret_cast<char*>(&sessionmode_) -
      reinterpret_cast<char*>(&builtinipseq_) + sizeof(sessionmode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NewAuthRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.NewAuthRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t UserName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_username()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t Pwd = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pwd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t ImgSid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imgsid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t ImgCode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imgcode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Pwd2 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pwd2().data(), this->pwd2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewAuthRequest.Pwd2");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 BuiltinIPSeq = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_builtinipseq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &builtinipseq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string extPwd = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extpwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extpwd().data(), this->extpwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewAuthRequest.extPwd");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string extPwd2 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extpwd2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extpwd2().data(), this->extpwd2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewAuthRequest.extPwd2");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string TimeZone = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timezone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->timezone().data(), this->timezone().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewAuthRequest.TimeZone");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Language = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewAuthRequest.Language");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string IMEI = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imei()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imei().data(), this->imei().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewAuthRequest.IMEI");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Channel = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_channel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string IPhoneVer = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iphonever()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->iphonever().data(), this->iphonever().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewAuthRequest.IPhoneVer");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinString_t ImgEncryptKey = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imgencryptkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t KSid = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ksid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 TimeStamp = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string DeviceBrand = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicebrand()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devicebrand().data(), this->devicebrand().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewAuthRequest.DeviceBrand");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string DeviceModel = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicemodel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devicemodel().data(), this->devicemodel().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewAuthRequest.DeviceModel");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string OSType = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ostype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ostype().data(), this->ostype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewAuthRequest.OSType");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string DeviceType = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devicetype().data(), this->devicetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewAuthRequest.DeviceType");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string SoftType = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_softtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->softtype().data(), this->softtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewAuthRequest.SoftType");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AuthTicket = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authticket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->authticket().data(), this->authticket().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewAuthRequest.AuthTicket");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string RealCountry = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_realcountry()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->realcountry().data(), this->realcountry().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewAuthRequest.RealCountry");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Signature = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewAuthRequest.Signature");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_randomencrykey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AutoAuthTicket = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_autoauthticket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->autoauthticket().data(), this->autoauthticket().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewAuthRequest.AutoAuthTicket");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string DeviceName = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devicename().data(), this->devicename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewAuthRequest.DeviceName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t WTLoginReqBuff = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wtloginreqbuff()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 InputType = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u)) {
          set_has_inputtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inputtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ClientSeqID = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientseqid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientseqid().data(), this->clientseqid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewAuthRequest.ClientSeqID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string BundleID = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(258u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bundleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bundleid().data(), this->bundleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewAuthRequest.BundleID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AdSource = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(266u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adsource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->adsource().data(), this->adsource().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewAuthRequest.AdSource");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t CliDBEncryptKey = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(274u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clidbencryptkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t CliDBEncryptInfo = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(282u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clidbencryptinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string VerifySignature = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(290u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verifysignature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->verifysignature().data(), this->verifysignature().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewAuthRequest.VerifySignature");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string VerifyContent = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(298u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verifycontent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->verifycontent().data(), this->verifycontent().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewAuthRequest.VerifyContent");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 SessionMode = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(304u)) {
          set_has_sessionmode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessionmode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.NewAuthRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.NewAuthRequest)
  return false;
#undef DO_
}

void NewAuthRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.NewAuthRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required .micromsg.SKBuiltinString_t UserName = 2;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->username_, output);
  }

  // required .micromsg.SKBuiltinString_t Pwd = 3;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->pwd_, output);
  }

  // required .micromsg.SKBuiltinString_t ImgSid = 4;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->imgsid_, output);
  }

  // required .micromsg.SKBuiltinString_t ImgCode = 5;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->imgcode_, output);
  }

  // optional string Pwd2 = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd2().data(), this->pwd2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthRequest.Pwd2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->pwd2(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 BuiltinIPSeq = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->builtinipseq(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string extPwd = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extpwd().data(), this->extpwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthRequest.extPwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->extpwd(), output);
  }

  // optional string extPwd2 = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extpwd2().data(), this->extpwd2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthRequest.extPwd2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->extpwd2(), output);
  }

  // optional string TimeZone = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timezone().data(), this->timezone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthRequest.TimeZone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->timezone(), output);
  }

  // optional string Language = 11;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthRequest.Language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->language(), output);
  }

  // optional string IMEI = 12;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthRequest.IMEI");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->imei(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 Channel = 13;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->channel(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string IPhoneVer = 14;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iphonever().data(), this->iphonever().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthRequest.IPhoneVer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->iphonever(), output);
  }

  // optional .micromsg.SKBuiltinString_t ImgEncryptKey = 15;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->imgencryptkey_, output);
  }

  // optional .micromsg.SKBuiltinBuffer_t KSid = 16;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->ksid_, output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 TimeStamp = 17;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->timestamp(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string DeviceBrand = 18;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicebrand().data(), this->devicebrand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthRequest.DeviceBrand");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->devicebrand(), output);
  }

  // optional string DeviceModel = 19;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicemodel().data(), this->devicemodel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthRequest.DeviceModel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->devicemodel(), output);
  }

  // optional string OSType = 20;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ostype().data(), this->ostype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthRequest.OSType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->ostype(), output);
  }

  // optional string DeviceType = 21;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicetype().data(), this->devicetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthRequest.DeviceType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->devicetype(), output);
  }

  // optional string SoftType = 22;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->softtype().data(), this->softtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthRequest.SoftType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->softtype(), output);
  }

  // optional string AuthTicket = 23;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authticket().data(), this->authticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthRequest.AuthTicket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->authticket(), output);
  }

  // optional string RealCountry = 24;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->realcountry().data(), this->realcountry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthRequest.RealCountry");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->realcountry(), output);
  }

  // optional string Signature = 25;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthRequest.Signature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->signature(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 26;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, *this->randomencrykey_, output);
  }

  // optional string AutoAuthTicket = 27;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->autoauthticket().data(), this->autoauthticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthRequest.AutoAuthTicket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->autoauthticket(), output);
  }

  // optional string DeviceName = 28;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthRequest.DeviceName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      28, this->devicename(), output);
  }

  // optional .micromsg.SKBuiltinBuffer_t WTLoginReqBuff = 29;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, *this->wtloginreqbuff_, output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 InputType = 30;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->inputtype(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string ClientSeqID = 31;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientseqid().data(), this->clientseqid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthRequest.ClientSeqID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      31, this->clientseqid(), output);
  }

  // optional string BundleID = 32;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bundleid().data(), this->bundleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthRequest.BundleID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      32, this->bundleid(), output);
  }

  // optional string AdSource = 33;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adsource().data(), this->adsource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthRequest.AdSource");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      33, this->adsource(), output);
  }

  // optional .micromsg.SKBuiltinBuffer_t CliDBEncryptKey = 34;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, *this->clidbencryptkey_, output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .micromsg.SKBuiltinBuffer_t CliDBEncryptInfo = 35;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, *this->clidbencryptinfo_, output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string VerifySignature = 36;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verifysignature().data(), this->verifysignature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthRequest.VerifySignature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      36, this->verifysignature(), output);
  }

  // optional string VerifyContent = 37;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verifycontent().data(), this->verifycontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthRequest.VerifyContent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      37, this->verifycontent(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 SessionMode = 38;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->sessionmode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.NewAuthRequest)
}

::google::protobuf::uint8* NewAuthRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.NewAuthRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t UserName = 2;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->username_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t Pwd = 3;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->pwd_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t ImgSid = 4;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->imgsid_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t ImgCode = 5;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->imgcode_, deterministic, target);
  }

  // optional string Pwd2 = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd2().data(), this->pwd2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthRequest.Pwd2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->pwd2(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 BuiltinIPSeq = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->builtinipseq(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string extPwd = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extpwd().data(), this->extpwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthRequest.extPwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->extpwd(), target);
  }

  // optional string extPwd2 = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extpwd2().data(), this->extpwd2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthRequest.extPwd2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->extpwd2(), target);
  }

  // optional string TimeZone = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timezone().data(), this->timezone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthRequest.TimeZone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->timezone(), target);
  }

  // optional string Language = 11;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthRequest.Language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->language(), target);
  }

  // optional string IMEI = 12;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthRequest.IMEI");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->imei(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 Channel = 13;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->channel(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string IPhoneVer = 14;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iphonever().data(), this->iphonever().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthRequest.IPhoneVer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->iphonever(), target);
  }

  // optional .micromsg.SKBuiltinString_t ImgEncryptKey = 15;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->imgencryptkey_, deterministic, target);
  }

  // optional .micromsg.SKBuiltinBuffer_t KSid = 16;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->ksid_, deterministic, target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 TimeStamp = 17;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->timestamp(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string DeviceBrand = 18;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicebrand().data(), this->devicebrand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthRequest.DeviceBrand");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->devicebrand(), target);
  }

  // optional string DeviceModel = 19;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicemodel().data(), this->devicemodel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthRequest.DeviceModel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->devicemodel(), target);
  }

  // optional string OSType = 20;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ostype().data(), this->ostype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthRequest.OSType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->ostype(), target);
  }

  // optional string DeviceType = 21;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicetype().data(), this->devicetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthRequest.DeviceType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->devicetype(), target);
  }

  // optional string SoftType = 22;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->softtype().data(), this->softtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthRequest.SoftType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->softtype(), target);
  }

  // optional string AuthTicket = 23;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authticket().data(), this->authticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthRequest.AuthTicket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->authticket(), target);
  }

  // optional string RealCountry = 24;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->realcountry().data(), this->realcountry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthRequest.RealCountry");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->realcountry(), target);
  }

  // optional string Signature = 25;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthRequest.Signature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->signature(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 26;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        26, *this->randomencrykey_, deterministic, target);
  }

  // optional string AutoAuthTicket = 27;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->autoauthticket().data(), this->autoauthticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthRequest.AutoAuthTicket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->autoauthticket(), target);
  }

  // optional string DeviceName = 28;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthRequest.DeviceName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->devicename(), target);
  }

  // optional .micromsg.SKBuiltinBuffer_t WTLoginReqBuff = 29;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        29, *this->wtloginreqbuff_, deterministic, target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 InputType = 30;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->inputtype(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string ClientSeqID = 31;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientseqid().data(), this->clientseqid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthRequest.ClientSeqID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->clientseqid(), target);
  }

  // optional string BundleID = 32;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bundleid().data(), this->bundleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthRequest.BundleID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->bundleid(), target);
  }

  // optional string AdSource = 33;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adsource().data(), this->adsource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthRequest.AdSource");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->adsource(), target);
  }

  // optional .micromsg.SKBuiltinBuffer_t CliDBEncryptKey = 34;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        34, *this->clidbencryptkey_, deterministic, target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .micromsg.SKBuiltinBuffer_t CliDBEncryptInfo = 35;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        35, *this->clidbencryptinfo_, deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string VerifySignature = 36;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verifysignature().data(), this->verifysignature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthRequest.VerifySignature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        36, this->verifysignature(), target);
  }

  // optional string VerifyContent = 37;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verifycontent().data(), this->verifycontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthRequest.VerifyContent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        37, this->verifycontent(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 SessionMode = 38;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->sessionmode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.NewAuthRequest)
  return target;
}

size_t NewAuthRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.NewAuthRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_username()) {
    // required .micromsg.SKBuiltinString_t UserName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->username_);
  }

  if (has_pwd()) {
    // required .micromsg.SKBuiltinString_t Pwd = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pwd_);
  }

  if (has_imgsid()) {
    // required .micromsg.SKBuiltinString_t ImgSid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imgsid_);
  }

  if (has_imgcode()) {
    // required .micromsg.SKBuiltinString_t ImgCode = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imgcode_);
  }

  if (has_randomencrykey()) {
    // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 26;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->randomencrykey_);
  }

  return total_size;
}
size_t NewAuthRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.NewAuthRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x27c00000) ^ 0x27c00000) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.SKBuiltinString_t UserName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->username_);

    // required .micromsg.SKBuiltinString_t Pwd = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pwd_);

    // required .micromsg.SKBuiltinString_t ImgSid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imgsid_);

    // required .micromsg.SKBuiltinString_t ImgCode = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imgcode_);

    // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 26;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->randomencrykey_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string Pwd2 = 6;
    if (has_pwd2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd2());
    }

    // optional string extPwd = 8;
    if (has_extpwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extpwd());
    }

    // optional string extPwd2 = 9;
    if (has_extpwd2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extpwd2());
    }

    // optional string TimeZone = 10;
    if (has_timezone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timezone());
    }

    // optional string Language = 11;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

    // optional string IMEI = 12;
    if (has_imei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imei());
    }

    // optional string IPhoneVer = 14;
    if (has_iphonever()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->iphonever());
    }

    // optional string DeviceBrand = 18;
    if (has_devicebrand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicebrand());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional string DeviceModel = 19;
    if (has_devicemodel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicemodel());
    }

    // optional string OSType = 20;
    if (has_ostype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ostype());
    }

    // optional string DeviceType = 21;
    if (has_devicetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicetype());
    }

    // optional string SoftType = 22;
    if (has_softtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->softtype());
    }

    // optional string AuthTicket = 23;
    if (has_authticket()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authticket());
    }

    // optional string RealCountry = 24;
    if (has_realcountry()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->realcountry());
    }

    // optional string Signature = 25;
    if (has_signature()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }

    // optional string AutoAuthTicket = 27;
    if (has_autoauthticket()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->autoauthticket());
    }

  }
  if (_has_bits_[16 / 32] & 4128768u) {
    // optional string DeviceName = 28;
    if (has_devicename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicename());
    }

    // optional string ClientSeqID = 31;
    if (has_clientseqid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientseqid());
    }

    // optional string BundleID = 32;
    if (has_bundleid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bundleid());
    }

    // optional string AdSource = 33;
    if (has_adsource()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->adsource());
    }

    // optional string VerifySignature = 36;
    if (has_verifysignature()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verifysignature());
    }

    // optional string VerifyContent = 37;
    if (has_verifycontent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verifycontent());
    }

  }
  if (_has_bits_[24 / 32] & 402653184u) {
    // optional .micromsg.SKBuiltinString_t ImgEncryptKey = 15;
    if (has_imgencryptkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->imgencryptkey_);
    }

    // optional .micromsg.SKBuiltinBuffer_t KSid = 16;
    if (has_ksid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ksid_);
    }

  }
  if (_has_bits_[24 / 32] & 3221225472u) {
    // optional .micromsg.SKBuiltinBuffer_t WTLoginReqBuff = 29;
    if (has_wtloginreqbuff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->wtloginreqbuff_);
    }

    // optional .micromsg.SKBuiltinBuffer_t CliDBEncryptKey = 34;
    if (has_clidbencryptkey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->clidbencryptkey_);
    }

  }
  if (_has_bits_[32 / 32] & 63u) {
    // optional .micromsg.SKBuiltinBuffer_t CliDBEncryptInfo = 35;
    if (has_clidbencryptinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->clidbencryptinfo_);
    }

    // optional uint32 BuiltinIPSeq = 7;
    if (has_builtinipseq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->builtinipseq());
    }

    // optional int32 Channel = 13;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional uint32 TimeStamp = 17;
    if (has_timestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional uint32 InputType = 30;
    if (has_inputtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inputtype());
    }

    // optional uint32 SessionMode = 38;
    if (has_sessionmode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sessionmode());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewAuthRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.NewAuthRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NewAuthRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NewAuthRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.NewAuthRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.NewAuthRequest)
    MergeFrom(*source);
  }
}

void NewAuthRequest::MergeFrom(const NewAuthRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.NewAuthRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_pwd2();
      pwd2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd2_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_extpwd();
      extpwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extpwd_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_extpwd2();
      extpwd2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extpwd2_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_timezone();
      timezone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timezone_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_language();
      language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_imei();
      imei_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imei_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_iphonever();
      iphonever_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iphonever_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_devicebrand();
      devicebrand_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicebrand_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_devicemodel();
      devicemodel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicemodel_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_ostype();
      ostype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ostype_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_devicetype();
      devicetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicetype_);
    }
    if (cached_has_bits & 0x00000800u) {
      set_has_softtype();
      softtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.softtype_);
    }
    if (cached_has_bits & 0x00001000u) {
      set_has_authticket();
      authticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authticket_);
    }
    if (cached_has_bits & 0x00002000u) {
      set_has_realcountry();
      realcountry_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.realcountry_);
    }
    if (cached_has_bits & 0x00004000u) {
      set_has_signature();
      signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
    if (cached_has_bits & 0x00008000u) {
      set_has_autoauthticket();
      autoauthticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.autoauthticket_);
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      set_has_devicename();
      devicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicename_);
    }
    if (cached_has_bits & 0x00020000u) {
      set_has_clientseqid();
      clientseqid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientseqid_);
    }
    if (cached_has_bits & 0x00040000u) {
      set_has_bundleid();
      bundleid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bundleid_);
    }
    if (cached_has_bits & 0x00080000u) {
      set_has_adsource();
      adsource_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.adsource_);
    }
    if (cached_has_bits & 0x00100000u) {
      set_has_verifysignature();
      verifysignature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifysignature_);
    }
    if (cached_has_bits & 0x00200000u) {
      set_has_verifycontent();
      verifycontent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifycontent_);
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_username()->::micromsg::SKBuiltinString_t::MergeFrom(from.username());
    }
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_pwd()->::micromsg::SKBuiltinString_t::MergeFrom(from.pwd());
    }
    if (cached_has_bits & 0x02000000u) {
      mutable_imgsid()->::micromsg::SKBuiltinString_t::MergeFrom(from.imgsid());
    }
    if (cached_has_bits & 0x04000000u) {
      mutable_imgcode()->::micromsg::SKBuiltinString_t::MergeFrom(from.imgcode());
    }
    if (cached_has_bits & 0x08000000u) {
      mutable_imgencryptkey()->::micromsg::SKBuiltinString_t::MergeFrom(from.imgencryptkey());
    }
    if (cached_has_bits & 0x10000000u) {
      mutable_ksid()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.ksid());
    }
    if (cached_has_bits & 0x20000000u) {
      mutable_randomencrykey()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.randomencrykey());
    }
    if (cached_has_bits & 0x40000000u) {
      mutable_wtloginreqbuff()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.wtloginreqbuff());
    }
    if (cached_has_bits & 0x80000000u) {
      mutable_clidbencryptkey()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.clidbencryptkey());
    }
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_clidbencryptinfo()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.clidbencryptinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      builtinipseq_ = from.builtinipseq_;
    }
    if (cached_has_bits & 0x00000004u) {
      channel_ = from.channel_;
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      inputtype_ = from.inputtype_;
    }
    if (cached_has_bits & 0x00000020u) {
      sessionmode_ = from.sessionmode_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void NewAuthRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.NewAuthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewAuthRequest::CopyFrom(const NewAuthRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.NewAuthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewAuthRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x27c00000) != 0x27c00000) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_ksid()) {
    if (!this->ksid_->IsInitialized()) return false;
  }
  if (has_randomencrykey()) {
    if (!this->randomencrykey_->IsInitialized()) return false;
  }
  if (has_wtloginreqbuff()) {
    if (!this->wtloginreqbuff_->IsInitialized()) return false;
  }
  if (has_clidbencryptkey()) {
    if (!this->clidbencryptkey_->IsInitialized()) return false;
  }
  if (has_clidbencryptinfo()) {
    if (!this->clidbencryptinfo_->IsInitialized()) return false;
  }
  return true;
}

void NewAuthRequest::Swap(NewAuthRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewAuthRequest::InternalSwap(NewAuthRequest* other) {
  pwd2_.Swap(&other->pwd2_);
  extpwd_.Swap(&other->extpwd_);
  extpwd2_.Swap(&other->extpwd2_);
  timezone_.Swap(&other->timezone_);
  language_.Swap(&other->language_);
  imei_.Swap(&other->imei_);
  iphonever_.Swap(&other->iphonever_);
  devicebrand_.Swap(&other->devicebrand_);
  devicemodel_.Swap(&other->devicemodel_);
  ostype_.Swap(&other->ostype_);
  devicetype_.Swap(&other->devicetype_);
  softtype_.Swap(&other->softtype_);
  authticket_.Swap(&other->authticket_);
  realcountry_.Swap(&other->realcountry_);
  signature_.Swap(&other->signature_);
  autoauthticket_.Swap(&other->autoauthticket_);
  devicename_.Swap(&other->devicename_);
  clientseqid_.Swap(&other->clientseqid_);
  bundleid_.Swap(&other->bundleid_);
  adsource_.Swap(&other->adsource_);
  verifysignature_.Swap(&other->verifysignature_);
  verifycontent_.Swap(&other->verifycontent_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(username_, other->username_);
  std::swap(pwd_, other->pwd_);
  std::swap(imgsid_, other->imgsid_);
  std::swap(imgcode_, other->imgcode_);
  std::swap(imgencryptkey_, other->imgencryptkey_);
  std::swap(ksid_, other->ksid_);
  std::swap(randomencrykey_, other->randomencrykey_);
  std::swap(wtloginreqbuff_, other->wtloginreqbuff_);
  std::swap(clidbencryptkey_, other->clidbencryptkey_);
  std::swap(clidbencryptinfo_, other->clidbencryptinfo_);
  std::swap(builtinipseq_, other->builtinipseq_);
  std::swap(channel_, other->channel_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(inputtype_, other->inputtype_);
  std::swap(sessionmode_, other->sessionmode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NewAuthRequest::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NewAuthRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool NewAuthRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void NewAuthRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00400000u;
}
void NewAuthRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00400000u;
}
void NewAuthRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& NewAuthRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* NewAuthRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* NewAuthRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void NewAuthRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthRequest.BaseRequest)
}

// required .micromsg.SKBuiltinString_t UserName = 2;
bool NewAuthRequest::has_username() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void NewAuthRequest::set_has_username() {
  _has_bits_[0] |= 0x00800000u;
}
void NewAuthRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00800000u;
}
void NewAuthRequest::clear_username() {
  if (username_ != NULL) username_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_username();
}
const ::micromsg::SKBuiltinString_t& NewAuthRequest::username() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthRequest.UserName)
  return username_ != NULL ? *username_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* NewAuthRequest::mutable_username() {
  set_has_username();
  if (username_ == NULL) {
    username_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthRequest.UserName)
  return username_;
}
::micromsg::SKBuiltinString_t* NewAuthRequest::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthRequest.UserName)
  clear_has_username();
  ::micromsg::SKBuiltinString_t* temp = username_;
  username_ = NULL;
  return temp;
}
void NewAuthRequest::set_allocated_username(::micromsg::SKBuiltinString_t* username) {
  delete username_;
  username_ = username;
  if (username) {
    set_has_username();
  } else {
    clear_has_username();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthRequest.UserName)
}

// required .micromsg.SKBuiltinString_t Pwd = 3;
bool NewAuthRequest::has_pwd() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void NewAuthRequest::set_has_pwd() {
  _has_bits_[0] |= 0x01000000u;
}
void NewAuthRequest::clear_has_pwd() {
  _has_bits_[0] &= ~0x01000000u;
}
void NewAuthRequest::clear_pwd() {
  if (pwd_ != NULL) pwd_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_pwd();
}
const ::micromsg::SKBuiltinString_t& NewAuthRequest::pwd() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthRequest.Pwd)
  return pwd_ != NULL ? *pwd_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* NewAuthRequest::mutable_pwd() {
  set_has_pwd();
  if (pwd_ == NULL) {
    pwd_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthRequest.Pwd)
  return pwd_;
}
::micromsg::SKBuiltinString_t* NewAuthRequest::release_pwd() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthRequest.Pwd)
  clear_has_pwd();
  ::micromsg::SKBuiltinString_t* temp = pwd_;
  pwd_ = NULL;
  return temp;
}
void NewAuthRequest::set_allocated_pwd(::micromsg::SKBuiltinString_t* pwd) {
  delete pwd_;
  pwd_ = pwd;
  if (pwd) {
    set_has_pwd();
  } else {
    clear_has_pwd();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthRequest.Pwd)
}

// required .micromsg.SKBuiltinString_t ImgSid = 4;
bool NewAuthRequest::has_imgsid() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void NewAuthRequest::set_has_imgsid() {
  _has_bits_[0] |= 0x02000000u;
}
void NewAuthRequest::clear_has_imgsid() {
  _has_bits_[0] &= ~0x02000000u;
}
void NewAuthRequest::clear_imgsid() {
  if (imgsid_ != NULL) imgsid_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_imgsid();
}
const ::micromsg::SKBuiltinString_t& NewAuthRequest::imgsid() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthRequest.ImgSid)
  return imgsid_ != NULL ? *imgsid_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* NewAuthRequest::mutable_imgsid() {
  set_has_imgsid();
  if (imgsid_ == NULL) {
    imgsid_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthRequest.ImgSid)
  return imgsid_;
}
::micromsg::SKBuiltinString_t* NewAuthRequest::release_imgsid() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthRequest.ImgSid)
  clear_has_imgsid();
  ::micromsg::SKBuiltinString_t* temp = imgsid_;
  imgsid_ = NULL;
  return temp;
}
void NewAuthRequest::set_allocated_imgsid(::micromsg::SKBuiltinString_t* imgsid) {
  delete imgsid_;
  imgsid_ = imgsid;
  if (imgsid) {
    set_has_imgsid();
  } else {
    clear_has_imgsid();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthRequest.ImgSid)
}

// required .micromsg.SKBuiltinString_t ImgCode = 5;
bool NewAuthRequest::has_imgcode() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void NewAuthRequest::set_has_imgcode() {
  _has_bits_[0] |= 0x04000000u;
}
void NewAuthRequest::clear_has_imgcode() {
  _has_bits_[0] &= ~0x04000000u;
}
void NewAuthRequest::clear_imgcode() {
  if (imgcode_ != NULL) imgcode_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_imgcode();
}
const ::micromsg::SKBuiltinString_t& NewAuthRequest::imgcode() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthRequest.ImgCode)
  return imgcode_ != NULL ? *imgcode_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* NewAuthRequest::mutable_imgcode() {
  set_has_imgcode();
  if (imgcode_ == NULL) {
    imgcode_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthRequest.ImgCode)
  return imgcode_;
}
::micromsg::SKBuiltinString_t* NewAuthRequest::release_imgcode() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthRequest.ImgCode)
  clear_has_imgcode();
  ::micromsg::SKBuiltinString_t* temp = imgcode_;
  imgcode_ = NULL;
  return temp;
}
void NewAuthRequest::set_allocated_imgcode(::micromsg::SKBuiltinString_t* imgcode) {
  delete imgcode_;
  imgcode_ = imgcode;
  if (imgcode) {
    set_has_imgcode();
  } else {
    clear_has_imgcode();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthRequest.ImgCode)
}

// optional string Pwd2 = 6;
bool NewAuthRequest::has_pwd2() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NewAuthRequest::set_has_pwd2() {
  _has_bits_[0] |= 0x00000001u;
}
void NewAuthRequest::clear_has_pwd2() {
  _has_bits_[0] &= ~0x00000001u;
}
void NewAuthRequest::clear_pwd2() {
  pwd2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pwd2();
}
const ::std::string& NewAuthRequest::pwd2() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthRequest.Pwd2)
  return pwd2_.GetNoArena();
}
void NewAuthRequest::set_pwd2(const ::std::string& value) {
  set_has_pwd2();
  pwd2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewAuthRequest.Pwd2)
}
#if LANG_CXX11
void NewAuthRequest::set_pwd2(::std::string&& value) {
  set_has_pwd2();
  pwd2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewAuthRequest.Pwd2)
}
#endif
void NewAuthRequest::set_pwd2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pwd2();
  pwd2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewAuthRequest.Pwd2)
}
void NewAuthRequest::set_pwd2(const char* value, size_t size) {
  set_has_pwd2();
  pwd2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewAuthRequest.Pwd2)
}
::std::string* NewAuthRequest::mutable_pwd2() {
  set_has_pwd2();
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthRequest.Pwd2)
  return pwd2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewAuthRequest::release_pwd2() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthRequest.Pwd2)
  clear_has_pwd2();
  return pwd2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewAuthRequest::set_allocated_pwd2(::std::string* pwd2) {
  if (pwd2 != NULL) {
    set_has_pwd2();
  } else {
    clear_has_pwd2();
  }
  pwd2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd2);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthRequest.Pwd2)
}

// optional uint32 BuiltinIPSeq = 7;
bool NewAuthRequest::has_builtinipseq() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void NewAuthRequest::set_has_builtinipseq() {
  _has_bits_[1] |= 0x00000002u;
}
void NewAuthRequest::clear_has_builtinipseq() {
  _has_bits_[1] &= ~0x00000002u;
}
void NewAuthRequest::clear_builtinipseq() {
  builtinipseq_ = 0u;
  clear_has_builtinipseq();
}
::google::protobuf::uint32 NewAuthRequest::builtinipseq() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthRequest.BuiltinIPSeq)
  return builtinipseq_;
}
void NewAuthRequest::set_builtinipseq(::google::protobuf::uint32 value) {
  set_has_builtinipseq();
  builtinipseq_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewAuthRequest.BuiltinIPSeq)
}

// optional string extPwd = 8;
bool NewAuthRequest::has_extpwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NewAuthRequest::set_has_extpwd() {
  _has_bits_[0] |= 0x00000002u;
}
void NewAuthRequest::clear_has_extpwd() {
  _has_bits_[0] &= ~0x00000002u;
}
void NewAuthRequest::clear_extpwd() {
  extpwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extpwd();
}
const ::std::string& NewAuthRequest::extpwd() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthRequest.extPwd)
  return extpwd_.GetNoArena();
}
void NewAuthRequest::set_extpwd(const ::std::string& value) {
  set_has_extpwd();
  extpwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewAuthRequest.extPwd)
}
#if LANG_CXX11
void NewAuthRequest::set_extpwd(::std::string&& value) {
  set_has_extpwd();
  extpwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewAuthRequest.extPwd)
}
#endif
void NewAuthRequest::set_extpwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_extpwd();
  extpwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewAuthRequest.extPwd)
}
void NewAuthRequest::set_extpwd(const char* value, size_t size) {
  set_has_extpwd();
  extpwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewAuthRequest.extPwd)
}
::std::string* NewAuthRequest::mutable_extpwd() {
  set_has_extpwd();
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthRequest.extPwd)
  return extpwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewAuthRequest::release_extpwd() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthRequest.extPwd)
  clear_has_extpwd();
  return extpwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewAuthRequest::set_allocated_extpwd(::std::string* extpwd) {
  if (extpwd != NULL) {
    set_has_extpwd();
  } else {
    clear_has_extpwd();
  }
  extpwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extpwd);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthRequest.extPwd)
}

// optional string extPwd2 = 9;
bool NewAuthRequest::has_extpwd2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NewAuthRequest::set_has_extpwd2() {
  _has_bits_[0] |= 0x00000004u;
}
void NewAuthRequest::clear_has_extpwd2() {
  _has_bits_[0] &= ~0x00000004u;
}
void NewAuthRequest::clear_extpwd2() {
  extpwd2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extpwd2();
}
const ::std::string& NewAuthRequest::extpwd2() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthRequest.extPwd2)
  return extpwd2_.GetNoArena();
}
void NewAuthRequest::set_extpwd2(const ::std::string& value) {
  set_has_extpwd2();
  extpwd2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewAuthRequest.extPwd2)
}
#if LANG_CXX11
void NewAuthRequest::set_extpwd2(::std::string&& value) {
  set_has_extpwd2();
  extpwd2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewAuthRequest.extPwd2)
}
#endif
void NewAuthRequest::set_extpwd2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_extpwd2();
  extpwd2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewAuthRequest.extPwd2)
}
void NewAuthRequest::set_extpwd2(const char* value, size_t size) {
  set_has_extpwd2();
  extpwd2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewAuthRequest.extPwd2)
}
::std::string* NewAuthRequest::mutable_extpwd2() {
  set_has_extpwd2();
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthRequest.extPwd2)
  return extpwd2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewAuthRequest::release_extpwd2() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthRequest.extPwd2)
  clear_has_extpwd2();
  return extpwd2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewAuthRequest::set_allocated_extpwd2(::std::string* extpwd2) {
  if (extpwd2 != NULL) {
    set_has_extpwd2();
  } else {
    clear_has_extpwd2();
  }
  extpwd2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extpwd2);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthRequest.extPwd2)
}

// optional string TimeZone = 10;
bool NewAuthRequest::has_timezone() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NewAuthRequest::set_has_timezone() {
  _has_bits_[0] |= 0x00000008u;
}
void NewAuthRequest::clear_has_timezone() {
  _has_bits_[0] &= ~0x00000008u;
}
void NewAuthRequest::clear_timezone() {
  timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timezone();
}
const ::std::string& NewAuthRequest::timezone() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthRequest.TimeZone)
  return timezone_.GetNoArena();
}
void NewAuthRequest::set_timezone(const ::std::string& value) {
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewAuthRequest.TimeZone)
}
#if LANG_CXX11
void NewAuthRequest::set_timezone(::std::string&& value) {
  set_has_timezone();
  timezone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewAuthRequest.TimeZone)
}
#endif
void NewAuthRequest::set_timezone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewAuthRequest.TimeZone)
}
void NewAuthRequest::set_timezone(const char* value, size_t size) {
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewAuthRequest.TimeZone)
}
::std::string* NewAuthRequest::mutable_timezone() {
  set_has_timezone();
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthRequest.TimeZone)
  return timezone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewAuthRequest::release_timezone() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthRequest.TimeZone)
  clear_has_timezone();
  return timezone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewAuthRequest::set_allocated_timezone(::std::string* timezone) {
  if (timezone != NULL) {
    set_has_timezone();
  } else {
    clear_has_timezone();
  }
  timezone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timezone);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthRequest.TimeZone)
}

// optional string Language = 11;
bool NewAuthRequest::has_language() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NewAuthRequest::set_has_language() {
  _has_bits_[0] |= 0x00000010u;
}
void NewAuthRequest::clear_has_language() {
  _has_bits_[0] &= ~0x00000010u;
}
void NewAuthRequest::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_language();
}
const ::std::string& NewAuthRequest::language() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthRequest.Language)
  return language_.GetNoArena();
}
void NewAuthRequest::set_language(const ::std::string& value) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewAuthRequest.Language)
}
#if LANG_CXX11
void NewAuthRequest::set_language(::std::string&& value) {
  set_has_language();
  language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewAuthRequest.Language)
}
#endif
void NewAuthRequest::set_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewAuthRequest.Language)
}
void NewAuthRequest::set_language(const char* value, size_t size) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewAuthRequest.Language)
}
::std::string* NewAuthRequest::mutable_language() {
  set_has_language();
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthRequest.Language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewAuthRequest::release_language() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthRequest.Language)
  clear_has_language();
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewAuthRequest::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    set_has_language();
  } else {
    clear_has_language();
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthRequest.Language)
}

// optional string IMEI = 12;
bool NewAuthRequest::has_imei() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void NewAuthRequest::set_has_imei() {
  _has_bits_[0] |= 0x00000020u;
}
void NewAuthRequest::clear_has_imei() {
  _has_bits_[0] &= ~0x00000020u;
}
void NewAuthRequest::clear_imei() {
  imei_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imei();
}
const ::std::string& NewAuthRequest::imei() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthRequest.IMEI)
  return imei_.GetNoArena();
}
void NewAuthRequest::set_imei(const ::std::string& value) {
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewAuthRequest.IMEI)
}
#if LANG_CXX11
void NewAuthRequest::set_imei(::std::string&& value) {
  set_has_imei();
  imei_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewAuthRequest.IMEI)
}
#endif
void NewAuthRequest::set_imei(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewAuthRequest.IMEI)
}
void NewAuthRequest::set_imei(const char* value, size_t size) {
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewAuthRequest.IMEI)
}
::std::string* NewAuthRequest::mutable_imei() {
  set_has_imei();
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthRequest.IMEI)
  return imei_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewAuthRequest::release_imei() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthRequest.IMEI)
  clear_has_imei();
  return imei_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewAuthRequest::set_allocated_imei(::std::string* imei) {
  if (imei != NULL) {
    set_has_imei();
  } else {
    clear_has_imei();
  }
  imei_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imei);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthRequest.IMEI)
}

// optional int32 Channel = 13;
bool NewAuthRequest::has_channel() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void NewAuthRequest::set_has_channel() {
  _has_bits_[1] |= 0x00000004u;
}
void NewAuthRequest::clear_has_channel() {
  _has_bits_[1] &= ~0x00000004u;
}
void NewAuthRequest::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
::google::protobuf::int32 NewAuthRequest::channel() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthRequest.Channel)
  return channel_;
}
void NewAuthRequest::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewAuthRequest.Channel)
}

// optional string IPhoneVer = 14;
bool NewAuthRequest::has_iphonever() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void NewAuthRequest::set_has_iphonever() {
  _has_bits_[0] |= 0x00000040u;
}
void NewAuthRequest::clear_has_iphonever() {
  _has_bits_[0] &= ~0x00000040u;
}
void NewAuthRequest::clear_iphonever() {
  iphonever_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_iphonever();
}
const ::std::string& NewAuthRequest::iphonever() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthRequest.IPhoneVer)
  return iphonever_.GetNoArena();
}
void NewAuthRequest::set_iphonever(const ::std::string& value) {
  set_has_iphonever();
  iphonever_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewAuthRequest.IPhoneVer)
}
#if LANG_CXX11
void NewAuthRequest::set_iphonever(::std::string&& value) {
  set_has_iphonever();
  iphonever_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewAuthRequest.IPhoneVer)
}
#endif
void NewAuthRequest::set_iphonever(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_iphonever();
  iphonever_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewAuthRequest.IPhoneVer)
}
void NewAuthRequest::set_iphonever(const char* value, size_t size) {
  set_has_iphonever();
  iphonever_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewAuthRequest.IPhoneVer)
}
::std::string* NewAuthRequest::mutable_iphonever() {
  set_has_iphonever();
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthRequest.IPhoneVer)
  return iphonever_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewAuthRequest::release_iphonever() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthRequest.IPhoneVer)
  clear_has_iphonever();
  return iphonever_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewAuthRequest::set_allocated_iphonever(::std::string* iphonever) {
  if (iphonever != NULL) {
    set_has_iphonever();
  } else {
    clear_has_iphonever();
  }
  iphonever_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iphonever);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthRequest.IPhoneVer)
}

// optional .micromsg.SKBuiltinString_t ImgEncryptKey = 15;
bool NewAuthRequest::has_imgencryptkey() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void NewAuthRequest::set_has_imgencryptkey() {
  _has_bits_[0] |= 0x08000000u;
}
void NewAuthRequest::clear_has_imgencryptkey() {
  _has_bits_[0] &= ~0x08000000u;
}
void NewAuthRequest::clear_imgencryptkey() {
  if (imgencryptkey_ != NULL) imgencryptkey_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_imgencryptkey();
}
const ::micromsg::SKBuiltinString_t& NewAuthRequest::imgencryptkey() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthRequest.ImgEncryptKey)
  return imgencryptkey_ != NULL ? *imgencryptkey_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* NewAuthRequest::mutable_imgencryptkey() {
  set_has_imgencryptkey();
  if (imgencryptkey_ == NULL) {
    imgencryptkey_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthRequest.ImgEncryptKey)
  return imgencryptkey_;
}
::micromsg::SKBuiltinString_t* NewAuthRequest::release_imgencryptkey() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthRequest.ImgEncryptKey)
  clear_has_imgencryptkey();
  ::micromsg::SKBuiltinString_t* temp = imgencryptkey_;
  imgencryptkey_ = NULL;
  return temp;
}
void NewAuthRequest::set_allocated_imgencryptkey(::micromsg::SKBuiltinString_t* imgencryptkey) {
  delete imgencryptkey_;
  imgencryptkey_ = imgencryptkey;
  if (imgencryptkey) {
    set_has_imgencryptkey();
  } else {
    clear_has_imgencryptkey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthRequest.ImgEncryptKey)
}

// optional .micromsg.SKBuiltinBuffer_t KSid = 16;
bool NewAuthRequest::has_ksid() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void NewAuthRequest::set_has_ksid() {
  _has_bits_[0] |= 0x10000000u;
}
void NewAuthRequest::clear_has_ksid() {
  _has_bits_[0] &= ~0x10000000u;
}
void NewAuthRequest::clear_ksid() {
  if (ksid_ != NULL) ksid_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_ksid();
}
const ::micromsg::SKBuiltinBuffer_t& NewAuthRequest::ksid() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthRequest.KSid)
  return ksid_ != NULL ? *ksid_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* NewAuthRequest::mutable_ksid() {
  set_has_ksid();
  if (ksid_ == NULL) {
    ksid_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthRequest.KSid)
  return ksid_;
}
::micromsg::SKBuiltinBuffer_t* NewAuthRequest::release_ksid() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthRequest.KSid)
  clear_has_ksid();
  ::micromsg::SKBuiltinBuffer_t* temp = ksid_;
  ksid_ = NULL;
  return temp;
}
void NewAuthRequest::set_allocated_ksid(::micromsg::SKBuiltinBuffer_t* ksid) {
  delete ksid_;
  ksid_ = ksid;
  if (ksid) {
    set_has_ksid();
  } else {
    clear_has_ksid();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthRequest.KSid)
}

// optional uint32 TimeStamp = 17;
bool NewAuthRequest::has_timestamp() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void NewAuthRequest::set_has_timestamp() {
  _has_bits_[1] |= 0x00000008u;
}
void NewAuthRequest::clear_has_timestamp() {
  _has_bits_[1] &= ~0x00000008u;
}
void NewAuthRequest::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
::google::protobuf::uint32 NewAuthRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthRequest.TimeStamp)
  return timestamp_;
}
void NewAuthRequest::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewAuthRequest.TimeStamp)
}

// optional string DeviceBrand = 18;
bool NewAuthRequest::has_devicebrand() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void NewAuthRequest::set_has_devicebrand() {
  _has_bits_[0] |= 0x00000080u;
}
void NewAuthRequest::clear_has_devicebrand() {
  _has_bits_[0] &= ~0x00000080u;
}
void NewAuthRequest::clear_devicebrand() {
  devicebrand_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_devicebrand();
}
const ::std::string& NewAuthRequest::devicebrand() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthRequest.DeviceBrand)
  return devicebrand_.GetNoArena();
}
void NewAuthRequest::set_devicebrand(const ::std::string& value) {
  set_has_devicebrand();
  devicebrand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewAuthRequest.DeviceBrand)
}
#if LANG_CXX11
void NewAuthRequest::set_devicebrand(::std::string&& value) {
  set_has_devicebrand();
  devicebrand_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewAuthRequest.DeviceBrand)
}
#endif
void NewAuthRequest::set_devicebrand(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_devicebrand();
  devicebrand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewAuthRequest.DeviceBrand)
}
void NewAuthRequest::set_devicebrand(const char* value, size_t size) {
  set_has_devicebrand();
  devicebrand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewAuthRequest.DeviceBrand)
}
::std::string* NewAuthRequest::mutable_devicebrand() {
  set_has_devicebrand();
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthRequest.DeviceBrand)
  return devicebrand_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewAuthRequest::release_devicebrand() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthRequest.DeviceBrand)
  clear_has_devicebrand();
  return devicebrand_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewAuthRequest::set_allocated_devicebrand(::std::string* devicebrand) {
  if (devicebrand != NULL) {
    set_has_devicebrand();
  } else {
    clear_has_devicebrand();
  }
  devicebrand_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicebrand);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthRequest.DeviceBrand)
}

// optional string DeviceModel = 19;
bool NewAuthRequest::has_devicemodel() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void NewAuthRequest::set_has_devicemodel() {
  _has_bits_[0] |= 0x00000100u;
}
void NewAuthRequest::clear_has_devicemodel() {
  _has_bits_[0] &= ~0x00000100u;
}
void NewAuthRequest::clear_devicemodel() {
  devicemodel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_devicemodel();
}
const ::std::string& NewAuthRequest::devicemodel() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthRequest.DeviceModel)
  return devicemodel_.GetNoArena();
}
void NewAuthRequest::set_devicemodel(const ::std::string& value) {
  set_has_devicemodel();
  devicemodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewAuthRequest.DeviceModel)
}
#if LANG_CXX11
void NewAuthRequest::set_devicemodel(::std::string&& value) {
  set_has_devicemodel();
  devicemodel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewAuthRequest.DeviceModel)
}
#endif
void NewAuthRequest::set_devicemodel(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_devicemodel();
  devicemodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewAuthRequest.DeviceModel)
}
void NewAuthRequest::set_devicemodel(const char* value, size_t size) {
  set_has_devicemodel();
  devicemodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewAuthRequest.DeviceModel)
}
::std::string* NewAuthRequest::mutable_devicemodel() {
  set_has_devicemodel();
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthRequest.DeviceModel)
  return devicemodel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewAuthRequest::release_devicemodel() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthRequest.DeviceModel)
  clear_has_devicemodel();
  return devicemodel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewAuthRequest::set_allocated_devicemodel(::std::string* devicemodel) {
  if (devicemodel != NULL) {
    set_has_devicemodel();
  } else {
    clear_has_devicemodel();
  }
  devicemodel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicemodel);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthRequest.DeviceModel)
}

// optional string OSType = 20;
bool NewAuthRequest::has_ostype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void NewAuthRequest::set_has_ostype() {
  _has_bits_[0] |= 0x00000200u;
}
void NewAuthRequest::clear_has_ostype() {
  _has_bits_[0] &= ~0x00000200u;
}
void NewAuthRequest::clear_ostype() {
  ostype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ostype();
}
const ::std::string& NewAuthRequest::ostype() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthRequest.OSType)
  return ostype_.GetNoArena();
}
void NewAuthRequest::set_ostype(const ::std::string& value) {
  set_has_ostype();
  ostype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewAuthRequest.OSType)
}
#if LANG_CXX11
void NewAuthRequest::set_ostype(::std::string&& value) {
  set_has_ostype();
  ostype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewAuthRequest.OSType)
}
#endif
void NewAuthRequest::set_ostype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ostype();
  ostype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewAuthRequest.OSType)
}
void NewAuthRequest::set_ostype(const char* value, size_t size) {
  set_has_ostype();
  ostype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewAuthRequest.OSType)
}
::std::string* NewAuthRequest::mutable_ostype() {
  set_has_ostype();
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthRequest.OSType)
  return ostype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewAuthRequest::release_ostype() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthRequest.OSType)
  clear_has_ostype();
  return ostype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewAuthRequest::set_allocated_ostype(::std::string* ostype) {
  if (ostype != NULL) {
    set_has_ostype();
  } else {
    clear_has_ostype();
  }
  ostype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ostype);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthRequest.OSType)
}

// optional string DeviceType = 21;
bool NewAuthRequest::has_devicetype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void NewAuthRequest::set_has_devicetype() {
  _has_bits_[0] |= 0x00000400u;
}
void NewAuthRequest::clear_has_devicetype() {
  _has_bits_[0] &= ~0x00000400u;
}
void NewAuthRequest::clear_devicetype() {
  devicetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_devicetype();
}
const ::std::string& NewAuthRequest::devicetype() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthRequest.DeviceType)
  return devicetype_.GetNoArena();
}
void NewAuthRequest::set_devicetype(const ::std::string& value) {
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewAuthRequest.DeviceType)
}
#if LANG_CXX11
void NewAuthRequest::set_devicetype(::std::string&& value) {
  set_has_devicetype();
  devicetype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewAuthRequest.DeviceType)
}
#endif
void NewAuthRequest::set_devicetype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewAuthRequest.DeviceType)
}
void NewAuthRequest::set_devicetype(const char* value, size_t size) {
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewAuthRequest.DeviceType)
}
::std::string* NewAuthRequest::mutable_devicetype() {
  set_has_devicetype();
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthRequest.DeviceType)
  return devicetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewAuthRequest::release_devicetype() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthRequest.DeviceType)
  clear_has_devicetype();
  return devicetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewAuthRequest::set_allocated_devicetype(::std::string* devicetype) {
  if (devicetype != NULL) {
    set_has_devicetype();
  } else {
    clear_has_devicetype();
  }
  devicetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicetype);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthRequest.DeviceType)
}

// optional string SoftType = 22;
bool NewAuthRequest::has_softtype() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void NewAuthRequest::set_has_softtype() {
  _has_bits_[0] |= 0x00000800u;
}
void NewAuthRequest::clear_has_softtype() {
  _has_bits_[0] &= ~0x00000800u;
}
void NewAuthRequest::clear_softtype() {
  softtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_softtype();
}
const ::std::string& NewAuthRequest::softtype() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthRequest.SoftType)
  return softtype_.GetNoArena();
}
void NewAuthRequest::set_softtype(const ::std::string& value) {
  set_has_softtype();
  softtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewAuthRequest.SoftType)
}
#if LANG_CXX11
void NewAuthRequest::set_softtype(::std::string&& value) {
  set_has_softtype();
  softtype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewAuthRequest.SoftType)
}
#endif
void NewAuthRequest::set_softtype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_softtype();
  softtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewAuthRequest.SoftType)
}
void NewAuthRequest::set_softtype(const char* value, size_t size) {
  set_has_softtype();
  softtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewAuthRequest.SoftType)
}
::std::string* NewAuthRequest::mutable_softtype() {
  set_has_softtype();
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthRequest.SoftType)
  return softtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewAuthRequest::release_softtype() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthRequest.SoftType)
  clear_has_softtype();
  return softtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewAuthRequest::set_allocated_softtype(::std::string* softtype) {
  if (softtype != NULL) {
    set_has_softtype();
  } else {
    clear_has_softtype();
  }
  softtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), softtype);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthRequest.SoftType)
}

// optional string AuthTicket = 23;
bool NewAuthRequest::has_authticket() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void NewAuthRequest::set_has_authticket() {
  _has_bits_[0] |= 0x00001000u;
}
void NewAuthRequest::clear_has_authticket() {
  _has_bits_[0] &= ~0x00001000u;
}
void NewAuthRequest::clear_authticket() {
  authticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_authticket();
}
const ::std::string& NewAuthRequest::authticket() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthRequest.AuthTicket)
  return authticket_.GetNoArena();
}
void NewAuthRequest::set_authticket(const ::std::string& value) {
  set_has_authticket();
  authticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewAuthRequest.AuthTicket)
}
#if LANG_CXX11
void NewAuthRequest::set_authticket(::std::string&& value) {
  set_has_authticket();
  authticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewAuthRequest.AuthTicket)
}
#endif
void NewAuthRequest::set_authticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_authticket();
  authticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewAuthRequest.AuthTicket)
}
void NewAuthRequest::set_authticket(const char* value, size_t size) {
  set_has_authticket();
  authticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewAuthRequest.AuthTicket)
}
::std::string* NewAuthRequest::mutable_authticket() {
  set_has_authticket();
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthRequest.AuthTicket)
  return authticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewAuthRequest::release_authticket() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthRequest.AuthTicket)
  clear_has_authticket();
  return authticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewAuthRequest::set_allocated_authticket(::std::string* authticket) {
  if (authticket != NULL) {
    set_has_authticket();
  } else {
    clear_has_authticket();
  }
  authticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), authticket);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthRequest.AuthTicket)
}

// optional string RealCountry = 24;
bool NewAuthRequest::has_realcountry() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void NewAuthRequest::set_has_realcountry() {
  _has_bits_[0] |= 0x00002000u;
}
void NewAuthRequest::clear_has_realcountry() {
  _has_bits_[0] &= ~0x00002000u;
}
void NewAuthRequest::clear_realcountry() {
  realcountry_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_realcountry();
}
const ::std::string& NewAuthRequest::realcountry() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthRequest.RealCountry)
  return realcountry_.GetNoArena();
}
void NewAuthRequest::set_realcountry(const ::std::string& value) {
  set_has_realcountry();
  realcountry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewAuthRequest.RealCountry)
}
#if LANG_CXX11
void NewAuthRequest::set_realcountry(::std::string&& value) {
  set_has_realcountry();
  realcountry_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewAuthRequest.RealCountry)
}
#endif
void NewAuthRequest::set_realcountry(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_realcountry();
  realcountry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewAuthRequest.RealCountry)
}
void NewAuthRequest::set_realcountry(const char* value, size_t size) {
  set_has_realcountry();
  realcountry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewAuthRequest.RealCountry)
}
::std::string* NewAuthRequest::mutable_realcountry() {
  set_has_realcountry();
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthRequest.RealCountry)
  return realcountry_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewAuthRequest::release_realcountry() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthRequest.RealCountry)
  clear_has_realcountry();
  return realcountry_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewAuthRequest::set_allocated_realcountry(::std::string* realcountry) {
  if (realcountry != NULL) {
    set_has_realcountry();
  } else {
    clear_has_realcountry();
  }
  realcountry_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), realcountry);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthRequest.RealCountry)
}

// optional string Signature = 25;
bool NewAuthRequest::has_signature() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void NewAuthRequest::set_has_signature() {
  _has_bits_[0] |= 0x00004000u;
}
void NewAuthRequest::clear_has_signature() {
  _has_bits_[0] &= ~0x00004000u;
}
void NewAuthRequest::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signature();
}
const ::std::string& NewAuthRequest::signature() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthRequest.Signature)
  return signature_.GetNoArena();
}
void NewAuthRequest::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewAuthRequest.Signature)
}
#if LANG_CXX11
void NewAuthRequest::set_signature(::std::string&& value) {
  set_has_signature();
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewAuthRequest.Signature)
}
#endif
void NewAuthRequest::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewAuthRequest.Signature)
}
void NewAuthRequest::set_signature(const char* value, size_t size) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewAuthRequest.Signature)
}
::std::string* NewAuthRequest::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthRequest.Signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewAuthRequest::release_signature() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthRequest.Signature)
  clear_has_signature();
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewAuthRequest::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthRequest.Signature)
}

// required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 26;
bool NewAuthRequest::has_randomencrykey() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void NewAuthRequest::set_has_randomencrykey() {
  _has_bits_[0] |= 0x20000000u;
}
void NewAuthRequest::clear_has_randomencrykey() {
  _has_bits_[0] &= ~0x20000000u;
}
void NewAuthRequest::clear_randomencrykey() {
  if (randomencrykey_ != NULL) randomencrykey_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_randomencrykey();
}
const ::micromsg::SKBuiltinBuffer_t& NewAuthRequest::randomencrykey() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthRequest.RandomEncryKey)
  return randomencrykey_ != NULL ? *randomencrykey_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* NewAuthRequest::mutable_randomencrykey() {
  set_has_randomencrykey();
  if (randomencrykey_ == NULL) {
    randomencrykey_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthRequest.RandomEncryKey)
  return randomencrykey_;
}
::micromsg::SKBuiltinBuffer_t* NewAuthRequest::release_randomencrykey() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthRequest.RandomEncryKey)
  clear_has_randomencrykey();
  ::micromsg::SKBuiltinBuffer_t* temp = randomencrykey_;
  randomencrykey_ = NULL;
  return temp;
}
void NewAuthRequest::set_allocated_randomencrykey(::micromsg::SKBuiltinBuffer_t* randomencrykey) {
  delete randomencrykey_;
  randomencrykey_ = randomencrykey;
  if (randomencrykey) {
    set_has_randomencrykey();
  } else {
    clear_has_randomencrykey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthRequest.RandomEncryKey)
}

// optional string AutoAuthTicket = 27;
bool NewAuthRequest::has_autoauthticket() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void NewAuthRequest::set_has_autoauthticket() {
  _has_bits_[0] |= 0x00008000u;
}
void NewAuthRequest::clear_has_autoauthticket() {
  _has_bits_[0] &= ~0x00008000u;
}
void NewAuthRequest::clear_autoauthticket() {
  autoauthticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_autoauthticket();
}
const ::std::string& NewAuthRequest::autoauthticket() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthRequest.AutoAuthTicket)
  return autoauthticket_.GetNoArena();
}
void NewAuthRequest::set_autoauthticket(const ::std::string& value) {
  set_has_autoauthticket();
  autoauthticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewAuthRequest.AutoAuthTicket)
}
#if LANG_CXX11
void NewAuthRequest::set_autoauthticket(::std::string&& value) {
  set_has_autoauthticket();
  autoauthticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewAuthRequest.AutoAuthTicket)
}
#endif
void NewAuthRequest::set_autoauthticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_autoauthticket();
  autoauthticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewAuthRequest.AutoAuthTicket)
}
void NewAuthRequest::set_autoauthticket(const char* value, size_t size) {
  set_has_autoauthticket();
  autoauthticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewAuthRequest.AutoAuthTicket)
}
::std::string* NewAuthRequest::mutable_autoauthticket() {
  set_has_autoauthticket();
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthRequest.AutoAuthTicket)
  return autoauthticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewAuthRequest::release_autoauthticket() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthRequest.AutoAuthTicket)
  clear_has_autoauthticket();
  return autoauthticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewAuthRequest::set_allocated_autoauthticket(::std::string* autoauthticket) {
  if (autoauthticket != NULL) {
    set_has_autoauthticket();
  } else {
    clear_has_autoauthticket();
  }
  autoauthticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), autoauthticket);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthRequest.AutoAuthTicket)
}

// optional string DeviceName = 28;
bool NewAuthRequest::has_devicename() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void NewAuthRequest::set_has_devicename() {
  _has_bits_[0] |= 0x00010000u;
}
void NewAuthRequest::clear_has_devicename() {
  _has_bits_[0] &= ~0x00010000u;
}
void NewAuthRequest::clear_devicename() {
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_devicename();
}
const ::std::string& NewAuthRequest::devicename() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthRequest.DeviceName)
  return devicename_.GetNoArena();
}
void NewAuthRequest::set_devicename(const ::std::string& value) {
  set_has_devicename();
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewAuthRequest.DeviceName)
}
#if LANG_CXX11
void NewAuthRequest::set_devicename(::std::string&& value) {
  set_has_devicename();
  devicename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewAuthRequest.DeviceName)
}
#endif
void NewAuthRequest::set_devicename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_devicename();
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewAuthRequest.DeviceName)
}
void NewAuthRequest::set_devicename(const char* value, size_t size) {
  set_has_devicename();
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewAuthRequest.DeviceName)
}
::std::string* NewAuthRequest::mutable_devicename() {
  set_has_devicename();
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthRequest.DeviceName)
  return devicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewAuthRequest::release_devicename() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthRequest.DeviceName)
  clear_has_devicename();
  return devicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewAuthRequest::set_allocated_devicename(::std::string* devicename) {
  if (devicename != NULL) {
    set_has_devicename();
  } else {
    clear_has_devicename();
  }
  devicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicename);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthRequest.DeviceName)
}

// optional .micromsg.SKBuiltinBuffer_t WTLoginReqBuff = 29;
bool NewAuthRequest::has_wtloginreqbuff() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void NewAuthRequest::set_has_wtloginreqbuff() {
  _has_bits_[0] |= 0x40000000u;
}
void NewAuthRequest::clear_has_wtloginreqbuff() {
  _has_bits_[0] &= ~0x40000000u;
}
void NewAuthRequest::clear_wtloginreqbuff() {
  if (wtloginreqbuff_ != NULL) wtloginreqbuff_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_wtloginreqbuff();
}
const ::micromsg::SKBuiltinBuffer_t& NewAuthRequest::wtloginreqbuff() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthRequest.WTLoginReqBuff)
  return wtloginreqbuff_ != NULL ? *wtloginreqbuff_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* NewAuthRequest::mutable_wtloginreqbuff() {
  set_has_wtloginreqbuff();
  if (wtloginreqbuff_ == NULL) {
    wtloginreqbuff_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthRequest.WTLoginReqBuff)
  return wtloginreqbuff_;
}
::micromsg::SKBuiltinBuffer_t* NewAuthRequest::release_wtloginreqbuff() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthRequest.WTLoginReqBuff)
  clear_has_wtloginreqbuff();
  ::micromsg::SKBuiltinBuffer_t* temp = wtloginreqbuff_;
  wtloginreqbuff_ = NULL;
  return temp;
}
void NewAuthRequest::set_allocated_wtloginreqbuff(::micromsg::SKBuiltinBuffer_t* wtloginreqbuff) {
  delete wtloginreqbuff_;
  wtloginreqbuff_ = wtloginreqbuff;
  if (wtloginreqbuff) {
    set_has_wtloginreqbuff();
  } else {
    clear_has_wtloginreqbuff();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthRequest.WTLoginReqBuff)
}

// optional uint32 InputType = 30;
bool NewAuthRequest::has_inputtype() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void NewAuthRequest::set_has_inputtype() {
  _has_bits_[1] |= 0x00000010u;
}
void NewAuthRequest::clear_has_inputtype() {
  _has_bits_[1] &= ~0x00000010u;
}
void NewAuthRequest::clear_inputtype() {
  inputtype_ = 0u;
  clear_has_inputtype();
}
::google::protobuf::uint32 NewAuthRequest::inputtype() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthRequest.InputType)
  return inputtype_;
}
void NewAuthRequest::set_inputtype(::google::protobuf::uint32 value) {
  set_has_inputtype();
  inputtype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewAuthRequest.InputType)
}

// optional string ClientSeqID = 31;
bool NewAuthRequest::has_clientseqid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void NewAuthRequest::set_has_clientseqid() {
  _has_bits_[0] |= 0x00020000u;
}
void NewAuthRequest::clear_has_clientseqid() {
  _has_bits_[0] &= ~0x00020000u;
}
void NewAuthRequest::clear_clientseqid() {
  clientseqid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientseqid();
}
const ::std::string& NewAuthRequest::clientseqid() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthRequest.ClientSeqID)
  return clientseqid_.GetNoArena();
}
void NewAuthRequest::set_clientseqid(const ::std::string& value) {
  set_has_clientseqid();
  clientseqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewAuthRequest.ClientSeqID)
}
#if LANG_CXX11
void NewAuthRequest::set_clientseqid(::std::string&& value) {
  set_has_clientseqid();
  clientseqid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewAuthRequest.ClientSeqID)
}
#endif
void NewAuthRequest::set_clientseqid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientseqid();
  clientseqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewAuthRequest.ClientSeqID)
}
void NewAuthRequest::set_clientseqid(const char* value, size_t size) {
  set_has_clientseqid();
  clientseqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewAuthRequest.ClientSeqID)
}
::std::string* NewAuthRequest::mutable_clientseqid() {
  set_has_clientseqid();
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthRequest.ClientSeqID)
  return clientseqid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewAuthRequest::release_clientseqid() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthRequest.ClientSeqID)
  clear_has_clientseqid();
  return clientseqid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewAuthRequest::set_allocated_clientseqid(::std::string* clientseqid) {
  if (clientseqid != NULL) {
    set_has_clientseqid();
  } else {
    clear_has_clientseqid();
  }
  clientseqid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientseqid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthRequest.ClientSeqID)
}

// optional string BundleID = 32;
bool NewAuthRequest::has_bundleid() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void NewAuthRequest::set_has_bundleid() {
  _has_bits_[0] |= 0x00040000u;
}
void NewAuthRequest::clear_has_bundleid() {
  _has_bits_[0] &= ~0x00040000u;
}
void NewAuthRequest::clear_bundleid() {
  bundleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bundleid();
}
const ::std::string& NewAuthRequest::bundleid() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthRequest.BundleID)
  return bundleid_.GetNoArena();
}
void NewAuthRequest::set_bundleid(const ::std::string& value) {
  set_has_bundleid();
  bundleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewAuthRequest.BundleID)
}
#if LANG_CXX11
void NewAuthRequest::set_bundleid(::std::string&& value) {
  set_has_bundleid();
  bundleid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewAuthRequest.BundleID)
}
#endif
void NewAuthRequest::set_bundleid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bundleid();
  bundleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewAuthRequest.BundleID)
}
void NewAuthRequest::set_bundleid(const char* value, size_t size) {
  set_has_bundleid();
  bundleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewAuthRequest.BundleID)
}
::std::string* NewAuthRequest::mutable_bundleid() {
  set_has_bundleid();
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthRequest.BundleID)
  return bundleid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewAuthRequest::release_bundleid() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthRequest.BundleID)
  clear_has_bundleid();
  return bundleid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewAuthRequest::set_allocated_bundleid(::std::string* bundleid) {
  if (bundleid != NULL) {
    set_has_bundleid();
  } else {
    clear_has_bundleid();
  }
  bundleid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bundleid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthRequest.BundleID)
}

// optional string AdSource = 33;
bool NewAuthRequest::has_adsource() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void NewAuthRequest::set_has_adsource() {
  _has_bits_[0] |= 0x00080000u;
}
void NewAuthRequest::clear_has_adsource() {
  _has_bits_[0] &= ~0x00080000u;
}
void NewAuthRequest::clear_adsource() {
  adsource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_adsource();
}
const ::std::string& NewAuthRequest::adsource() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthRequest.AdSource)
  return adsource_.GetNoArena();
}
void NewAuthRequest::set_adsource(const ::std::string& value) {
  set_has_adsource();
  adsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewAuthRequest.AdSource)
}
#if LANG_CXX11
void NewAuthRequest::set_adsource(::std::string&& value) {
  set_has_adsource();
  adsource_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewAuthRequest.AdSource)
}
#endif
void NewAuthRequest::set_adsource(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_adsource();
  adsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewAuthRequest.AdSource)
}
void NewAuthRequest::set_adsource(const char* value, size_t size) {
  set_has_adsource();
  adsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewAuthRequest.AdSource)
}
::std::string* NewAuthRequest::mutable_adsource() {
  set_has_adsource();
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthRequest.AdSource)
  return adsource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewAuthRequest::release_adsource() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthRequest.AdSource)
  clear_has_adsource();
  return adsource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewAuthRequest::set_allocated_adsource(::std::string* adsource) {
  if (adsource != NULL) {
    set_has_adsource();
  } else {
    clear_has_adsource();
  }
  adsource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), adsource);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthRequest.AdSource)
}

// optional .micromsg.SKBuiltinBuffer_t CliDBEncryptKey = 34;
bool NewAuthRequest::has_clidbencryptkey() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void NewAuthRequest::set_has_clidbencryptkey() {
  _has_bits_[0] |= 0x80000000u;
}
void NewAuthRequest::clear_has_clidbencryptkey() {
  _has_bits_[0] &= ~0x80000000u;
}
void NewAuthRequest::clear_clidbencryptkey() {
  if (clidbencryptkey_ != NULL) clidbencryptkey_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_clidbencryptkey();
}
const ::micromsg::SKBuiltinBuffer_t& NewAuthRequest::clidbencryptkey() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthRequest.CliDBEncryptKey)
  return clidbencryptkey_ != NULL ? *clidbencryptkey_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* NewAuthRequest::mutable_clidbencryptkey() {
  set_has_clidbencryptkey();
  if (clidbencryptkey_ == NULL) {
    clidbencryptkey_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthRequest.CliDBEncryptKey)
  return clidbencryptkey_;
}
::micromsg::SKBuiltinBuffer_t* NewAuthRequest::release_clidbencryptkey() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthRequest.CliDBEncryptKey)
  clear_has_clidbencryptkey();
  ::micromsg::SKBuiltinBuffer_t* temp = clidbencryptkey_;
  clidbencryptkey_ = NULL;
  return temp;
}
void NewAuthRequest::set_allocated_clidbencryptkey(::micromsg::SKBuiltinBuffer_t* clidbencryptkey) {
  delete clidbencryptkey_;
  clidbencryptkey_ = clidbencryptkey;
  if (clidbencryptkey) {
    set_has_clidbencryptkey();
  } else {
    clear_has_clidbencryptkey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthRequest.CliDBEncryptKey)
}

// optional .micromsg.SKBuiltinBuffer_t CliDBEncryptInfo = 35;
bool NewAuthRequest::has_clidbencryptinfo() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void NewAuthRequest::set_has_clidbencryptinfo() {
  _has_bits_[1] |= 0x00000001u;
}
void NewAuthRequest::clear_has_clidbencryptinfo() {
  _has_bits_[1] &= ~0x00000001u;
}
void NewAuthRequest::clear_clidbencryptinfo() {
  if (clidbencryptinfo_ != NULL) clidbencryptinfo_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_clidbencryptinfo();
}
const ::micromsg::SKBuiltinBuffer_t& NewAuthRequest::clidbencryptinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthRequest.CliDBEncryptInfo)
  return clidbencryptinfo_ != NULL ? *clidbencryptinfo_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* NewAuthRequest::mutable_clidbencryptinfo() {
  set_has_clidbencryptinfo();
  if (clidbencryptinfo_ == NULL) {
    clidbencryptinfo_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthRequest.CliDBEncryptInfo)
  return clidbencryptinfo_;
}
::micromsg::SKBuiltinBuffer_t* NewAuthRequest::release_clidbencryptinfo() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthRequest.CliDBEncryptInfo)
  clear_has_clidbencryptinfo();
  ::micromsg::SKBuiltinBuffer_t* temp = clidbencryptinfo_;
  clidbencryptinfo_ = NULL;
  return temp;
}
void NewAuthRequest::set_allocated_clidbencryptinfo(::micromsg::SKBuiltinBuffer_t* clidbencryptinfo) {
  delete clidbencryptinfo_;
  clidbencryptinfo_ = clidbencryptinfo;
  if (clidbencryptinfo) {
    set_has_clidbencryptinfo();
  } else {
    clear_has_clidbencryptinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthRequest.CliDBEncryptInfo)
}

// optional string VerifySignature = 36;
bool NewAuthRequest::has_verifysignature() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void NewAuthRequest::set_has_verifysignature() {
  _has_bits_[0] |= 0x00100000u;
}
void NewAuthRequest::clear_has_verifysignature() {
  _has_bits_[0] &= ~0x00100000u;
}
void NewAuthRequest::clear_verifysignature() {
  verifysignature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verifysignature();
}
const ::std::string& NewAuthRequest::verifysignature() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthRequest.VerifySignature)
  return verifysignature_.GetNoArena();
}
void NewAuthRequest::set_verifysignature(const ::std::string& value) {
  set_has_verifysignature();
  verifysignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewAuthRequest.VerifySignature)
}
#if LANG_CXX11
void NewAuthRequest::set_verifysignature(::std::string&& value) {
  set_has_verifysignature();
  verifysignature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewAuthRequest.VerifySignature)
}
#endif
void NewAuthRequest::set_verifysignature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verifysignature();
  verifysignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewAuthRequest.VerifySignature)
}
void NewAuthRequest::set_verifysignature(const char* value, size_t size) {
  set_has_verifysignature();
  verifysignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewAuthRequest.VerifySignature)
}
::std::string* NewAuthRequest::mutable_verifysignature() {
  set_has_verifysignature();
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthRequest.VerifySignature)
  return verifysignature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewAuthRequest::release_verifysignature() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthRequest.VerifySignature)
  clear_has_verifysignature();
  return verifysignature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewAuthRequest::set_allocated_verifysignature(::std::string* verifysignature) {
  if (verifysignature != NULL) {
    set_has_verifysignature();
  } else {
    clear_has_verifysignature();
  }
  verifysignature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifysignature);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthRequest.VerifySignature)
}

// optional string VerifyContent = 37;
bool NewAuthRequest::has_verifycontent() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void NewAuthRequest::set_has_verifycontent() {
  _has_bits_[0] |= 0x00200000u;
}
void NewAuthRequest::clear_has_verifycontent() {
  _has_bits_[0] &= ~0x00200000u;
}
void NewAuthRequest::clear_verifycontent() {
  verifycontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verifycontent();
}
const ::std::string& NewAuthRequest::verifycontent() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthRequest.VerifyContent)
  return verifycontent_.GetNoArena();
}
void NewAuthRequest::set_verifycontent(const ::std::string& value) {
  set_has_verifycontent();
  verifycontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewAuthRequest.VerifyContent)
}
#if LANG_CXX11
void NewAuthRequest::set_verifycontent(::std::string&& value) {
  set_has_verifycontent();
  verifycontent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewAuthRequest.VerifyContent)
}
#endif
void NewAuthRequest::set_verifycontent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verifycontent();
  verifycontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewAuthRequest.VerifyContent)
}
void NewAuthRequest::set_verifycontent(const char* value, size_t size) {
  set_has_verifycontent();
  verifycontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewAuthRequest.VerifyContent)
}
::std::string* NewAuthRequest::mutable_verifycontent() {
  set_has_verifycontent();
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthRequest.VerifyContent)
  return verifycontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewAuthRequest::release_verifycontent() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthRequest.VerifyContent)
  clear_has_verifycontent();
  return verifycontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewAuthRequest::set_allocated_verifycontent(::std::string* verifycontent) {
  if (verifycontent != NULL) {
    set_has_verifycontent();
  } else {
    clear_has_verifycontent();
  }
  verifycontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifycontent);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthRequest.VerifyContent)
}

// optional uint32 SessionMode = 38;
bool NewAuthRequest::has_sessionmode() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void NewAuthRequest::set_has_sessionmode() {
  _has_bits_[1] |= 0x00000020u;
}
void NewAuthRequest::clear_has_sessionmode() {
  _has_bits_[1] &= ~0x00000020u;
}
void NewAuthRequest::clear_sessionmode() {
  sessionmode_ = 0u;
  clear_has_sessionmode();
}
::google::protobuf::uint32 NewAuthRequest::sessionmode() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthRequest.SessionMode)
  return sessionmode_;
}
void NewAuthRequest::set_sessionmode(::google::protobuf::uint32 value) {
  set_has_sessionmode();
  sessionmode_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewAuthRequest.SessionMode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewAuthResponse::kBaseResponseFieldNumber;
const int NewAuthResponse::kUinFieldNumber;
const int NewAuthResponse::kUserNameFieldNumber;
const int NewAuthResponse::kNickNameFieldNumber;
const int NewAuthResponse::kBindUinFieldNumber;
const int NewAuthResponse::kBindEmailFieldNumber;
const int NewAuthResponse::kBindMobileFieldNumber;
const int NewAuthResponse::kStatusFieldNumber;
const int NewAuthResponse::kSessionKeyFieldNumber;
const int NewAuthResponse::kImgSidFieldNumber;
const int NewAuthResponse::kImgBufFieldNumber;
const int NewAuthResponse::kOfficialUserNameFieldNumber;
const int NewAuthResponse::kOfficialNickNameFieldNumber;
const int NewAuthResponse::kQQMicroBlogUserNameFieldNumber;
const int NewAuthResponse::kQQMicroBlogStatusFieldNumber;
const int NewAuthResponse::kNewVersionFieldNumber;
const int NewAuthResponse::kTicketFieldNumber;
const int NewAuthResponse::kPushMailStatusFieldNumber;
const int NewAuthResponse::kSendCardBitFlagFieldNumber;
const int NewAuthResponse::kPushMailSettingTicketFieldNumber;
const int NewAuthResponse::kBuiltinIPListFieldNumber;
const int NewAuthResponse::kFSURLFieldNumber;
const int NewAuthResponse::kNetworkControlFieldNumber;
const int NewAuthResponse::kPluginFlagFieldNumber;
const int NewAuthResponse::kAliasFieldNumber;
const int NewAuthResponse::kRegTypeFieldNumber;
const int NewAuthResponse::kAuthKeyFieldNumber;
const int NewAuthResponse::kSidFieldNumber;
const int NewAuthResponse::kPluginKeyListFieldNumber;
const int NewAuthResponse::kImgEncryptKeyFieldNumber;
const int NewAuthResponse::kA2KeyFieldNumber;
const int NewAuthResponse::kKSidFieldNumber;
const int NewAuthResponse::kProfileFlagFieldNumber;
const int NewAuthResponse::kPasswordFieldNumber;
const int NewAuthResponse::kTimeStampFieldNumber;
const int NewAuthResponse::kIsAutoRegFieldNumber;
const int NewAuthResponse::kKickResponseFieldNumber;
const int NewAuthResponse::kApplyBetaUrlFieldNumber;
const int NewAuthResponse::kDeviceInfoXmlFieldNumber;
const int NewAuthResponse::kSoftConfigXmlFieldNumber;
const int NewAuthResponse::kNewHostListFieldNumber;
const int NewAuthResponse::kAuthTicketFieldNumber;
const int NewAuthResponse::kSafeDeviceFieldNumber;
const int NewAuthResponse::kObsoleteItem1FieldNumber;
const int NewAuthResponse::kNeedSetEmailPwdFieldNumber;
const int NewAuthResponse::kHintMsgFieldNumber;
const int NewAuthResponse::kAutoAuthTicketFieldNumber;
const int NewAuthResponse::kDnsInfoFieldNumber;
const int NewAuthResponse::kNextAuthTypeFieldNumber;
const int NewAuthResponse::kWTLoginRspBuffFieldNumber;
const int NewAuthResponse::kShowStyleFieldNumber;
const int NewAuthResponse::kCliDBEncryptKeyFieldNumber;
const int NewAuthResponse::kCliDBEncryptInfoFieldNumber;
const int NewAuthResponse::kFlagFieldNumber;
const int NewAuthResponse::kSnsDnsInfoFieldNumber;
const int NewAuthResponse::kAppDnsInfoFieldNumber;
const int NewAuthResponse::kVerifySignatureFieldNumber;
const int NewAuthResponse::kVerifyBuffFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewAuthResponse::NewAuthResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.NewAuthResponse)
}
NewAuthResponse::NewAuthResponse(const NewAuthResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sessionkey()) {
    sessionkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionkey_);
  }
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ticket()) {
    ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
  }
  pushmailsettingticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pushmailsettingticket()) {
    pushmailsettingticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pushmailsettingticket_);
  }
  fsurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fsurl()) {
    fsurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fsurl_);
  }
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_alias()) {
    alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
  }
  authkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_authkey()) {
    authkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authkey_);
  }
  sid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sid()) {
    sid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sid_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  kickresponse_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_kickresponse()) {
    kickresponse_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kickresponse_);
  }
  applybetaurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_applybetaurl()) {
    applybetaurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.applybetaurl_);
  }
  deviceinfoxml_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_deviceinfoxml()) {
    deviceinfoxml_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceinfoxml_);
  }
  softconfigxml_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_softconfigxml()) {
    softconfigxml_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.softconfigxml_);
  }
  authticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_authticket()) {
    authticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authticket_);
  }
  hintmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hintmsg()) {
    hintmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hintmsg_);
  }
  autoauthticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_autoauthticket()) {
    autoauthticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.autoauthticket_);
  }
  verifysignature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_verifysignature()) {
    verifysignature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifysignature_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_username()) {
    username_ = new ::micromsg::SKBuiltinString_t(*from.username_);
  } else {
    username_ = NULL;
  }
  if (from.has_nickname()) {
    nickname_ = new ::micromsg::SKBuiltinString_t(*from.nickname_);
  } else {
    nickname_ = NULL;
  }
  if (from.has_bindemail()) {
    bindemail_ = new ::micromsg::SKBuiltinString_t(*from.bindemail_);
  } else {
    bindemail_ = NULL;
  }
  if (from.has_bindmobile()) {
    bindmobile_ = new ::micromsg::SKBuiltinString_t(*from.bindmobile_);
  } else {
    bindmobile_ = NULL;
  }
  if (from.has_imgsid()) {
    imgsid_ = new ::micromsg::SKBuiltinString_t(*from.imgsid_);
  } else {
    imgsid_ = NULL;
  }
  if (from.has_imgbuf()) {
    imgbuf_ = new ::micromsg::SKBuiltinBuffer_t(*from.imgbuf_);
  } else {
    imgbuf_ = NULL;
  }
  if (from.has_officialusername()) {
    officialusername_ = new ::micromsg::SKBuiltinString_t(*from.officialusername_);
  } else {
    officialusername_ = NULL;
  }
  if (from.has_officialnickname()) {
    officialnickname_ = new ::micromsg::SKBuiltinString_t(*from.officialnickname_);
  } else {
    officialnickname_ = NULL;
  }
  if (from.has_qqmicroblogusername()) {
    qqmicroblogusername_ = new ::micromsg::SKBuiltinString_t(*from.qqmicroblogusername_);
  } else {
    qqmicroblogusername_ = NULL;
  }
  if (from.has_builtiniplist()) {
    builtiniplist_ = new ::micromsg::BuiltinIPList(*from.builtiniplist_);
  } else {
    builtiniplist_ = NULL;
  }
  if (from.has_networkcontrol()) {
    networkcontrol_ = new ::micromsg::NetworkControl(*from.networkcontrol_);
  } else {
    networkcontrol_ = NULL;
  }
  if (from.has_pluginkeylist()) {
    pluginkeylist_ = new ::micromsg::PluginKeyList(*from.pluginkeylist_);
  } else {
    pluginkeylist_ = NULL;
  }
  if (from.has_imgencryptkey()) {
    imgencryptkey_ = new ::micromsg::SKBuiltinString_t(*from.imgencryptkey_);
  } else {
    imgencryptkey_ = NULL;
  }
  if (from.has_a2key()) {
    a2key_ = new ::micromsg::SKBuiltinBuffer_t(*from.a2key_);
  } else {
    a2key_ = NULL;
  }
  if (from.has_ksid()) {
    ksid_ = new ::micromsg::SKBuiltinBuffer_t(*from.ksid_);
  } else {
    ksid_ = NULL;
  }
  if (from.has_newhostlist()) {
    newhostlist_ = new ::micromsg::HostList(*from.newhostlist_);
  } else {
    newhostlist_ = NULL;
  }
  if (from.has_dnsinfo()) {
    dnsinfo_ = new ::micromsg::CDNDnsInfo(*from.dnsinfo_);
  } else {
    dnsinfo_ = NULL;
  }
  if (from.has_wtloginrspbuff()) {
    wtloginrspbuff_ = new ::micromsg::SKBuiltinBuffer_t(*from.wtloginrspbuff_);
  } else {
    wtloginrspbuff_ = NULL;
  }
  if (from.has_showstyle()) {
    showstyle_ = new ::micromsg::ShowStyleKey(*from.showstyle_);
  } else {
    showstyle_ = NULL;
  }
  if (from.has_clidbencryptkey()) {
    clidbencryptkey_ = new ::micromsg::SKBuiltinBuffer_t(*from.clidbencryptkey_);
  } else {
    clidbencryptkey_ = NULL;
  }
  if (from.has_clidbencryptinfo()) {
    clidbencryptinfo_ = new ::micromsg::SKBuiltinBuffer_t(*from.clidbencryptinfo_);
  } else {
    clidbencryptinfo_ = NULL;
  }
  if (from.has_snsdnsinfo()) {
    snsdnsinfo_ = new ::micromsg::CDNDnsInfo(*from.snsdnsinfo_);
  } else {
    snsdnsinfo_ = NULL;
  }
  if (from.has_appdnsinfo()) {
    appdnsinfo_ = new ::micromsg::CDNDnsInfo(*from.appdnsinfo_);
  } else {
    appdnsinfo_ = NULL;
  }
  if (from.has_verifybuff()) {
    verifybuff_ = new ::micromsg::SKBuiltinBuffer_t(*from.verifybuff_);
  } else {
    verifybuff_ = NULL;
  }
  ::memcpy(&uin_, &from.uin_,
    reinterpret_cast<char*>(&flag_) -
    reinterpret_cast<char*>(&uin_) + sizeof(flag_));
  // @@protoc_insertion_point(copy_constructor:micromsg.NewAuthResponse)
}

void NewAuthResponse::SharedCtor() {
  sessionkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pushmailsettingticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fsurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kickresponse_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  applybetaurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deviceinfoxml_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  softconfigxml_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hintmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  autoauthticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifysignature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&flag_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(flag_));
  _cached_size_ = 0;
}

NewAuthResponse::~NewAuthResponse() {
  // @@protoc_insertion_point(destructor:micromsg.NewAuthResponse)
  SharedDtor();
}

void NewAuthResponse::SharedDtor() {
  sessionkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pushmailsettingticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fsurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alias_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kickresponse_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  applybetaurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deviceinfoxml_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  softconfigxml_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hintmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  autoauthticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifysignature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete username_;
  }
  if (this != internal_default_instance()) {
    delete nickname_;
  }
  if (this != internal_default_instance()) {
    delete bindemail_;
  }
  if (this != internal_default_instance()) {
    delete bindmobile_;
  }
  if (this != internal_default_instance()) {
    delete imgsid_;
  }
  if (this != internal_default_instance()) {
    delete imgbuf_;
  }
  if (this != internal_default_instance()) {
    delete officialusername_;
  }
  if (this != internal_default_instance()) {
    delete officialnickname_;
  }
  if (this != internal_default_instance()) {
    delete qqmicroblogusername_;
  }
  if (this != internal_default_instance()) {
    delete builtiniplist_;
  }
  if (this != internal_default_instance()) {
    delete networkcontrol_;
  }
  if (this != internal_default_instance()) {
    delete pluginkeylist_;
  }
  if (this != internal_default_instance()) {
    delete imgencryptkey_;
  }
  if (this != internal_default_instance()) {
    delete a2key_;
  }
  if (this != internal_default_instance()) {
    delete ksid_;
  }
  if (this != internal_default_instance()) {
    delete newhostlist_;
  }
  if (this != internal_default_instance()) {
    delete dnsinfo_;
  }
  if (this != internal_default_instance()) {
    delete wtloginrspbuff_;
  }
  if (this != internal_default_instance()) {
    delete showstyle_;
  }
  if (this != internal_default_instance()) {
    delete clidbencryptkey_;
  }
  if (this != internal_default_instance()) {
    delete clidbencryptinfo_;
  }
  if (this != internal_default_instance()) {
    delete snsdnsinfo_;
  }
  if (this != internal_default_instance()) {
    delete appdnsinfo_;
  }
  if (this != internal_default_instance()) {
    delete verifybuff_;
  }
}

void NewAuthResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewAuthResponse::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NewAuthResponse& NewAuthResponse::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

NewAuthResponse* NewAuthResponse::New(::google::protobuf::Arena* arena) const {
  NewAuthResponse* n = new NewAuthResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NewAuthResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.NewAuthResponse)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_sessionkey()) {
      GOOGLE_DCHECK(!sessionkey_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sessionkey_.UnsafeRawStringPointer())->clear();
    }
    if (has_ticket()) {
      GOOGLE_DCHECK(!ticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ticket_.UnsafeRawStringPointer())->clear();
    }
    if (has_pushmailsettingticket()) {
      GOOGLE_DCHECK(!pushmailsettingticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pushmailsettingticket_.UnsafeRawStringPointer())->clear();
    }
    if (has_fsurl()) {
      GOOGLE_DCHECK(!fsurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fsurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_alias()) {
      GOOGLE_DCHECK(!alias_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*alias_.UnsafeRawStringPointer())->clear();
    }
    if (has_authkey()) {
      GOOGLE_DCHECK(!authkey_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*authkey_.UnsafeRawStringPointer())->clear();
    }
    if (has_sid()) {
      GOOGLE_DCHECK(!sid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sid_.UnsafeRawStringPointer())->clear();
    }
    if (has_password()) {
      GOOGLE_DCHECK(!password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*password_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has_kickresponse()) {
      GOOGLE_DCHECK(!kickresponse_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*kickresponse_.UnsafeRawStringPointer())->clear();
    }
    if (has_applybetaurl()) {
      GOOGLE_DCHECK(!applybetaurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*applybetaurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_deviceinfoxml()) {
      GOOGLE_DCHECK(!deviceinfoxml_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*deviceinfoxml_.UnsafeRawStringPointer())->clear();
    }
    if (has_softconfigxml()) {
      GOOGLE_DCHECK(!softconfigxml_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*softconfigxml_.UnsafeRawStringPointer())->clear();
    }
    if (has_authticket()) {
      GOOGLE_DCHECK(!authticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*authticket_.UnsafeRawStringPointer())->clear();
    }
    if (has_hintmsg()) {
      GOOGLE_DCHECK(!hintmsg_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*hintmsg_.UnsafeRawStringPointer())->clear();
    }
    if (has_autoauthticket()) {
      GOOGLE_DCHECK(!autoauthticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*autoauthticket_.UnsafeRawStringPointer())->clear();
    }
    if (has_verifysignature()) {
      GOOGLE_DCHECK(!verifysignature_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*verifysignature_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_username()) {
      GOOGLE_DCHECK(username_ != NULL);
      username_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_nickname()) {
      GOOGLE_DCHECK(nickname_ != NULL);
      nickname_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_bindemail()) {
      GOOGLE_DCHECK(bindemail_ != NULL);
      bindemail_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_bindmobile()) {
      GOOGLE_DCHECK(bindmobile_ != NULL);
      bindmobile_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_imgsid()) {
      GOOGLE_DCHECK(imgsid_ != NULL);
      imgsid_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_imgbuf()) {
      GOOGLE_DCHECK(imgbuf_ != NULL);
      imgbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_officialusername()) {
      GOOGLE_DCHECK(officialusername_ != NULL);
      officialusername_->::micromsg::SKBuiltinString_t::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    if (has_officialnickname()) {
      GOOGLE_DCHECK(officialnickname_ != NULL);
      officialnickname_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_qqmicroblogusername()) {
      GOOGLE_DCHECK(qqmicroblogusername_ != NULL);
      qqmicroblogusername_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_builtiniplist()) {
      GOOGLE_DCHECK(builtiniplist_ != NULL);
      builtiniplist_->::micromsg::BuiltinIPList::Clear();
    }
    if (has_networkcontrol()) {
      GOOGLE_DCHECK(networkcontrol_ != NULL);
      networkcontrol_->::micromsg::NetworkControl::Clear();
    }
    if (has_pluginkeylist()) {
      GOOGLE_DCHECK(pluginkeylist_ != NULL);
      pluginkeylist_->::micromsg::PluginKeyList::Clear();
    }
    if (has_imgencryptkey()) {
      GOOGLE_DCHECK(imgencryptkey_ != NULL);
      imgencryptkey_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_a2key()) {
      GOOGLE_DCHECK(a2key_ != NULL);
      a2key_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_ksid()) {
      GOOGLE_DCHECK(ksid_ != NULL);
      ksid_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[32 / 32] & 255u) {
    if (has_newhostlist()) {
      GOOGLE_DCHECK(newhostlist_ != NULL);
      newhostlist_->::micromsg::HostList::Clear();
    }
    if (has_dnsinfo()) {
      GOOGLE_DCHECK(dnsinfo_ != NULL);
      dnsinfo_->::micromsg::CDNDnsInfo::Clear();
    }
    if (has_wtloginrspbuff()) {
      GOOGLE_DCHECK(wtloginrspbuff_ != NULL);
      wtloginrspbuff_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_showstyle()) {
      GOOGLE_DCHECK(showstyle_ != NULL);
      showstyle_->::micromsg::ShowStyleKey::Clear();
    }
    if (has_clidbencryptkey()) {
      GOOGLE_DCHECK(clidbencryptkey_ != NULL);
      clidbencryptkey_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_clidbencryptinfo()) {
      GOOGLE_DCHECK(clidbencryptinfo_ != NULL);
      clidbencryptinfo_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_snsdnsinfo()) {
      GOOGLE_DCHECK(snsdnsinfo_ != NULL);
      snsdnsinfo_->::micromsg::CDNDnsInfo::Clear();
    }
    if (has_appdnsinfo()) {
      GOOGLE_DCHECK(appdnsinfo_ != NULL);
      appdnsinfo_->::micromsg::CDNDnsInfo::Clear();
    }
  }
  if (has_verifybuff()) {
    GOOGLE_DCHECK(verifybuff_ != NULL);
    verifybuff_->::micromsg::SKBuiltinBuffer_t::Clear();
  }
  if (_has_bits_[40 / 32] & 65024u) {
    ::memset(&uin_, 0, reinterpret_cast<char*>(&sendcardbitflag_) -
      reinterpret_cast<char*>(&uin_) + sizeof(sendcardbitflag_));
  }
  if (_has_bits_[48 / 32] & 16711680u) {
    ::memset(&pluginflag_, 0, reinterpret_cast<char*>(&needsetemailpwd_) -
      reinterpret_cast<char*>(&pluginflag_) + sizeof(needsetemailpwd_));
  }
  if (_has_bits_[56 / 32] & 50331648u) {
    ::memset(&nextauthtype_, 0, reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&nextauthtype_) + sizeof(flag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NewAuthResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.NewAuthResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Uin = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_uin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t UserName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_username()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t NickName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 BindUin = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_binduin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &binduin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t BindEmail = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bindemail()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t BindMobile = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bindmobile()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Status = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes SessionKey = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sessionkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t ImgSid = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imgsid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t ImgBuf = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imgbuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t OfficialUserName = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_officialusername()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t OfficialNickName = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_officialnickname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinString_t QQMicroBlogUserName = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qqmicroblogusername()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 QQMicroBlogStatus = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_qqmicroblogstatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qqmicroblogstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 NewVersion = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_newversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Ticket = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ticket().data(), this->ticket().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewAuthResponse.Ticket");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 PushMailStatus = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_pushmailstatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pushmailstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 SendCardBitFlag = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_sendcardbitflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sendcardbitflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PushMailSettingTicket = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pushmailsettingticket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pushmailsettingticket().data(), this->pushmailsettingticket().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewAuthResponse.PushMailSettingTicket");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.BuiltinIPList BuiltinIPList = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_builtiniplist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FSURL = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fsurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fsurl().data(), this->fsurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewAuthResponse.FSURL");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.NetworkControl NetworkControl = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_networkcontrol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 PluginFlag = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          set_has_pluginflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pluginflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Alias = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alias()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->alias().data(), this->alias().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewAuthResponse.Alias");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 RegType = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u)) {
          set_has_regtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &regtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AuthKey = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->authkey().data(), this->authkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewAuthResponse.AuthKey");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Sid = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sid().data(), this->sid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewAuthResponse.Sid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.PluginKeyList PluginKeyList = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pluginkeylist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinString_t ImgEncryptKey = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imgencryptkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t A2Key = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_a2key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t KSid = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(258u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ksid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ProfileFlag = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(264u)) {
          set_has_profileflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &profileflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Password = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(274u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewAuthResponse.Password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 TimeStamp = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(280u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 IsAutoReg = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(288u)) {
          set_has_isautoreg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isautoreg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string KickResponse = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(298u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kickresponse()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->kickresponse().data(), this->kickresponse().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewAuthResponse.KickResponse");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ApplyBetaUrl = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(306u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_applybetaurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->applybetaurl().data(), this->applybetaurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewAuthResponse.ApplyBetaUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string DeviceInfoXml = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(314u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceinfoxml()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deviceinfoxml().data(), this->deviceinfoxml().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewAuthResponse.DeviceInfoXml");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string SoftConfigXml = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(322u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_softconfigxml()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->softconfigxml().data(), this->softconfigxml().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewAuthResponse.SoftConfigXml");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.HostList NewHostList = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(330u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newhostlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AuthTicket = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(338u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authticket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->authticket().data(), this->authticket().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewAuthResponse.AuthTicket");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 SafeDevice = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(344u)) {
          set_has_safedevice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &safedevice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ObsoleteItem1 = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(352u)) {
          set_has_obsoleteitem1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &obsoleteitem1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 NeedSetEmailPwd = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(360u)) {
          set_has_needsetemailpwd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &needsetemailpwd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string HintMsg = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(370u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hintmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hintmsg().data(), this->hintmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewAuthResponse.HintMsg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AutoAuthTicket = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(378u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_autoauthticket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->autoauthticket().data(), this->autoauthticket().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewAuthResponse.AutoAuthTicket");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.CDNDnsInfo DnsInfo = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(386u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dnsinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 NextAuthType = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(392u)) {
          set_has_nextauthtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nextauthtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t WTLoginRspBuff = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(402u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wtloginrspbuff()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.ShowStyleKey ShowStyle = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(410u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_showstyle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t CliDBEncryptKey = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(418u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clidbencryptkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t CliDBEncryptInfo = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(426u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clidbencryptinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Flag = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(432u)) {
          set_has_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.CDNDnsInfo SnsDnsInfo = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(442u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_snsdnsinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.CDNDnsInfo AppDnsInfo = 56;
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(450u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_appdnsinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string VerifySignature = 57;
      case 57: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(458u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verifysignature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->verifysignature().data(), this->verifysignature().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewAuthResponse.VerifySignature");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t VerifyBuff = 58;
      case 58: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(466u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_verifybuff()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.NewAuthResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.NewAuthResponse)
  return false;
#undef DO_
}

void NewAuthResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.NewAuthResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  cached_has_bits = _has_bits_[1];
  // required uint32 Uin = 2;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uin(), output);
  }

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t UserName = 3;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->username_, output);
  }

  // required .micromsg.SKBuiltinString_t NickName = 4;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->nickname_, output);
  }

  cached_has_bits = _has_bits_[1];
  // required uint32 BindUin = 5;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->binduin(), output);
  }

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t BindEmail = 6;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->bindemail_, output);
  }

  // required .micromsg.SKBuiltinString_t BindMobile = 7;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->bindmobile_, output);
  }

  cached_has_bits = _has_bits_[1];
  // required uint32 Status = 8;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->status(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes SessionKey = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->sessionkey(), output);
  }

  // required .micromsg.SKBuiltinString_t ImgSid = 10;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->imgsid_, output);
  }

  // required .micromsg.SKBuiltinBuffer_t ImgBuf = 11;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->imgbuf_, output);
  }

  // required .micromsg.SKBuiltinString_t OfficialUserName = 12;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->officialusername_, output);
  }

  // required .micromsg.SKBuiltinString_t OfficialNickName = 13;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->officialnickname_, output);
  }

  // optional .micromsg.SKBuiltinString_t QQMicroBlogUserName = 14;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->qqmicroblogusername_, output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 QQMicroBlogStatus = 15;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->qqmicroblogstatus(), output);
  }

  // optional uint32 NewVersion = 16;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->newversion(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string Ticket = 17;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ticket().data(), this->ticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthResponse.Ticket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->ticket(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 PushMailStatus = 18;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->pushmailstatus(), output);
  }

  // optional uint32 SendCardBitFlag = 19;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->sendcardbitflag(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string PushMailSettingTicket = 20;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pushmailsettingticket().data(), this->pushmailsettingticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthResponse.PushMailSettingTicket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->pushmailsettingticket(), output);
  }

  // optional .micromsg.BuiltinIPList BuiltinIPList = 21;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->builtiniplist_, output);
  }

  // optional string FSURL = 22;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fsurl().data(), this->fsurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthResponse.FSURL");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->fsurl(), output);
  }

  // optional .micromsg.NetworkControl NetworkControl = 23;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *this->networkcontrol_, output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 PluginFlag = 24;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->pluginflag(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string Alias = 25;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthResponse.Alias");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->alias(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 RegType = 26;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->regtype(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string AuthKey = 27;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authkey().data(), this->authkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthResponse.AuthKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->authkey(), output);
  }

  // optional string Sid = 28;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthResponse.Sid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      28, this->sid(), output);
  }

  // optional .micromsg.PluginKeyList PluginKeyList = 29;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, *this->pluginkeylist_, output);
  }

  // optional .micromsg.SKBuiltinString_t ImgEncryptKey = 30;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *this->imgencryptkey_, output);
  }

  // optional .micromsg.SKBuiltinBuffer_t A2Key = 31;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, *this->a2key_, output);
  }

  // optional .micromsg.SKBuiltinBuffer_t KSid = 32;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, *this->ksid_, output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 ProfileFlag = 33;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->profileflag(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string Password = 34;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthResponse.Password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      34, this->password(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 TimeStamp = 35;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->timestamp(), output);
  }

  // optional uint32 IsAutoReg = 36;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->isautoreg(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string KickResponse = 37;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->kickresponse().data(), this->kickresponse().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthResponse.KickResponse");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      37, this->kickresponse(), output);
  }

  // optional string ApplyBetaUrl = 38;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->applybetaurl().data(), this->applybetaurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthResponse.ApplyBetaUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      38, this->applybetaurl(), output);
  }

  // optional string DeviceInfoXml = 39;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deviceinfoxml().data(), this->deviceinfoxml().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthResponse.DeviceInfoXml");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      39, this->deviceinfoxml(), output);
  }

  // optional string SoftConfigXml = 40;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->softconfigxml().data(), this->softconfigxml().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthResponse.SoftConfigXml");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      40, this->softconfigxml(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .micromsg.HostList NewHostList = 41;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, *this->newhostlist_, output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string AuthTicket = 42;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authticket().data(), this->authticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthResponse.AuthTicket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      42, this->authticket(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 SafeDevice = 43;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->safedevice(), output);
  }

  // optional uint32 ObsoleteItem1 = 44;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(44, this->obsoleteitem1(), output);
  }

  // optional uint32 NeedSetEmailPwd = 45;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->needsetemailpwd(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string HintMsg = 46;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hintmsg().data(), this->hintmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthResponse.HintMsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      46, this->hintmsg(), output);
  }

  // optional string AutoAuthTicket = 47;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->autoauthticket().data(), this->autoauthticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthResponse.AutoAuthTicket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      47, this->autoauthticket(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .micromsg.CDNDnsInfo DnsInfo = 48;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      48, *this->dnsinfo_, output);
  }

  // optional uint32 NextAuthType = 49;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->nextauthtype(), output);
  }

  // optional .micromsg.SKBuiltinBuffer_t WTLoginRspBuff = 50;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, *this->wtloginrspbuff_, output);
  }

  // optional .micromsg.ShowStyleKey ShowStyle = 51;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, *this->showstyle_, output);
  }

  // optional .micromsg.SKBuiltinBuffer_t CliDBEncryptKey = 52;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      52, *this->clidbencryptkey_, output);
  }

  // optional .micromsg.SKBuiltinBuffer_t CliDBEncryptInfo = 53;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      53, *this->clidbencryptinfo_, output);
  }

  // optional uint32 Flag = 54;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(54, this->flag(), output);
  }

  // optional .micromsg.CDNDnsInfo SnsDnsInfo = 55;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      55, *this->snsdnsinfo_, output);
  }

  // optional .micromsg.CDNDnsInfo AppDnsInfo = 56;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      56, *this->appdnsinfo_, output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string VerifySignature = 57;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verifysignature().data(), this->verifysignature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthResponse.VerifySignature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      57, this->verifysignature(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .micromsg.SKBuiltinBuffer_t VerifyBuff = 58;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      58, *this->verifybuff_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.NewAuthResponse)
}

::google::protobuf::uint8* NewAuthResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.NewAuthResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  cached_has_bits = _has_bits_[1];
  // required uint32 Uin = 2;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uin(), target);
  }

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t UserName = 3;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->username_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t NickName = 4;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->nickname_, deterministic, target);
  }

  cached_has_bits = _has_bits_[1];
  // required uint32 BindUin = 5;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->binduin(), target);
  }

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t BindEmail = 6;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->bindemail_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t BindMobile = 7;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->bindmobile_, deterministic, target);
  }

  cached_has_bits = _has_bits_[1];
  // required uint32 Status = 8;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->status(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes SessionKey = 9;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->sessionkey(), target);
  }

  // required .micromsg.SKBuiltinString_t ImgSid = 10;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->imgsid_, deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t ImgBuf = 11;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->imgbuf_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t OfficialUserName = 12;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->officialusername_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t OfficialNickName = 13;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->officialnickname_, deterministic, target);
  }

  // optional .micromsg.SKBuiltinString_t QQMicroBlogUserName = 14;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->qqmicroblogusername_, deterministic, target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 QQMicroBlogStatus = 15;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->qqmicroblogstatus(), target);
  }

  // optional uint32 NewVersion = 16;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->newversion(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string Ticket = 17;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ticket().data(), this->ticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthResponse.Ticket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->ticket(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 PushMailStatus = 18;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->pushmailstatus(), target);
  }

  // optional uint32 SendCardBitFlag = 19;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->sendcardbitflag(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string PushMailSettingTicket = 20;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pushmailsettingticket().data(), this->pushmailsettingticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthResponse.PushMailSettingTicket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->pushmailsettingticket(), target);
  }

  // optional .micromsg.BuiltinIPList BuiltinIPList = 21;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->builtiniplist_, deterministic, target);
  }

  // optional string FSURL = 22;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fsurl().data(), this->fsurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthResponse.FSURL");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->fsurl(), target);
  }

  // optional .micromsg.NetworkControl NetworkControl = 23;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, *this->networkcontrol_, deterministic, target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 PluginFlag = 24;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->pluginflag(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string Alias = 25;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthResponse.Alias");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->alias(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 RegType = 26;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->regtype(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string AuthKey = 27;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authkey().data(), this->authkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthResponse.AuthKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->authkey(), target);
  }

  // optional string Sid = 28;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthResponse.Sid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->sid(), target);
  }

  // optional .micromsg.PluginKeyList PluginKeyList = 29;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        29, *this->pluginkeylist_, deterministic, target);
  }

  // optional .micromsg.SKBuiltinString_t ImgEncryptKey = 30;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        30, *this->imgencryptkey_, deterministic, target);
  }

  // optional .micromsg.SKBuiltinBuffer_t A2Key = 31;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        31, *this->a2key_, deterministic, target);
  }

  // optional .micromsg.SKBuiltinBuffer_t KSid = 32;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        32, *this->ksid_, deterministic, target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 ProfileFlag = 33;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->profileflag(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string Password = 34;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthResponse.Password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->password(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 TimeStamp = 35;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->timestamp(), target);
  }

  // optional uint32 IsAutoReg = 36;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->isautoreg(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string KickResponse = 37;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->kickresponse().data(), this->kickresponse().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthResponse.KickResponse");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        37, this->kickresponse(), target);
  }

  // optional string ApplyBetaUrl = 38;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->applybetaurl().data(), this->applybetaurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthResponse.ApplyBetaUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        38, this->applybetaurl(), target);
  }

  // optional string DeviceInfoXml = 39;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deviceinfoxml().data(), this->deviceinfoxml().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthResponse.DeviceInfoXml");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        39, this->deviceinfoxml(), target);
  }

  // optional string SoftConfigXml = 40;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->softconfigxml().data(), this->softconfigxml().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthResponse.SoftConfigXml");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->softconfigxml(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .micromsg.HostList NewHostList = 41;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        41, *this->newhostlist_, deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string AuthTicket = 42;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authticket().data(), this->authticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthResponse.AuthTicket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        42, this->authticket(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 SafeDevice = 43;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(43, this->safedevice(), target);
  }

  // optional uint32 ObsoleteItem1 = 44;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(44, this->obsoleteitem1(), target);
  }

  // optional uint32 NeedSetEmailPwd = 45;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(45, this->needsetemailpwd(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string HintMsg = 46;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hintmsg().data(), this->hintmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthResponse.HintMsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        46, this->hintmsg(), target);
  }

  // optional string AutoAuthTicket = 47;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->autoauthticket().data(), this->autoauthticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthResponse.AutoAuthTicket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        47, this->autoauthticket(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .micromsg.CDNDnsInfo DnsInfo = 48;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        48, *this->dnsinfo_, deterministic, target);
  }

  // optional uint32 NextAuthType = 49;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(49, this->nextauthtype(), target);
  }

  // optional .micromsg.SKBuiltinBuffer_t WTLoginRspBuff = 50;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        50, *this->wtloginrspbuff_, deterministic, target);
  }

  // optional .micromsg.ShowStyleKey ShowStyle = 51;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        51, *this->showstyle_, deterministic, target);
  }

  // optional .micromsg.SKBuiltinBuffer_t CliDBEncryptKey = 52;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        52, *this->clidbencryptkey_, deterministic, target);
  }

  // optional .micromsg.SKBuiltinBuffer_t CliDBEncryptInfo = 53;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        53, *this->clidbencryptinfo_, deterministic, target);
  }

  // optional uint32 Flag = 54;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(54, this->flag(), target);
  }

  // optional .micromsg.CDNDnsInfo SnsDnsInfo = 55;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        55, *this->snsdnsinfo_, deterministic, target);
  }

  // optional .micromsg.CDNDnsInfo AppDnsInfo = 56;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        56, *this->appdnsinfo_, deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string VerifySignature = 57;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verifysignature().data(), this->verifysignature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewAuthResponse.VerifySignature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        57, this->verifysignature(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .micromsg.SKBuiltinBuffer_t VerifyBuff = 58;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        58, *this->verifybuff_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.NewAuthResponse)
  return target;
}

size_t NewAuthResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.NewAuthResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_username()) {
    // required .micromsg.SKBuiltinString_t UserName = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->username_);
  }

  if (has_nickname()) {
    // required .micromsg.SKBuiltinString_t NickName = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->nickname_);
  }

  if (has_bindemail()) {
    // required .micromsg.SKBuiltinString_t BindEmail = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bindemail_);
  }

  if (has_bindmobile()) {
    // required .micromsg.SKBuiltinString_t BindMobile = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bindmobile_);
  }

  if (has_imgsid()) {
    // required .micromsg.SKBuiltinString_t ImgSid = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imgsid_);
  }

  if (has_imgbuf()) {
    // required .micromsg.SKBuiltinBuffer_t ImgBuf = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imgbuf_);
  }

  if (has_officialusername()) {
    // required .micromsg.SKBuiltinString_t OfficialUserName = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->officialusername_);
  }

  if (has_officialnickname()) {
    // required .micromsg.SKBuiltinString_t OfficialNickName = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->officialnickname_);
  }

  if (has_uin()) {
    // required uint32 Uin = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uin());
  }

  if (has_binduin()) {
    // required uint32 BindUin = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->binduin());
  }

  if (has_status()) {
    // required uint32 Status = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  return total_size;
}
size_t NewAuthResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.NewAuthResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if ((((_has_bits_[0] & 0x01ff0000) ^ 0x01ff0000)
         | ((_has_bits_[1] & 0x00000e00) ^ 0x00000e00)) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required .micromsg.SKBuiltinString_t UserName = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->username_);

    // required .micromsg.SKBuiltinString_t NickName = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->nickname_);

    // required .micromsg.SKBuiltinString_t BindEmail = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bindemail_);

    // required .micromsg.SKBuiltinString_t BindMobile = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bindmobile_);

    // required .micromsg.SKBuiltinString_t ImgSid = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imgsid_);

    // required .micromsg.SKBuiltinBuffer_t ImgBuf = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imgbuf_);

    // required .micromsg.SKBuiltinString_t OfficialUserName = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->officialusername_);

    // required .micromsg.SKBuiltinString_t OfficialNickName = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->officialnickname_);

    // required uint32 Uin = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uin());

    // required uint32 BindUin = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->binduin());

    // required uint32 Status = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes SessionKey = 9;
    if (has_sessionkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sessionkey());
    }

    // optional string Ticket = 17;
    if (has_ticket()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ticket());
    }

    // optional string PushMailSettingTicket = 20;
    if (has_pushmailsettingticket()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pushmailsettingticket());
    }

    // optional string FSURL = 22;
    if (has_fsurl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fsurl());
    }

    // optional string Alias = 25;
    if (has_alias()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alias());
    }

    // optional string AuthKey = 27;
    if (has_authkey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authkey());
    }

    // optional string Sid = 28;
    if (has_sid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sid());
    }

    // optional string Password = 34;
    if (has_password()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional string KickResponse = 37;
    if (has_kickresponse()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->kickresponse());
    }

    // optional string ApplyBetaUrl = 38;
    if (has_applybetaurl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->applybetaurl());
    }

    // optional string DeviceInfoXml = 39;
    if (has_deviceinfoxml()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceinfoxml());
    }

    // optional string SoftConfigXml = 40;
    if (has_softconfigxml()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->softconfigxml());
    }

    // optional string AuthTicket = 42;
    if (has_authticket()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authticket());
    }

    // optional string HintMsg = 46;
    if (has_hintmsg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hintmsg());
    }

    // optional string AutoAuthTicket = 47;
    if (has_autoauthticket()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->autoauthticket());
    }

    // optional string VerifySignature = 57;
    if (has_verifysignature()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verifysignature());
    }

  }
  if (_has_bits_[24 / 32] & 4261412864u) {
    // optional .micromsg.SKBuiltinString_t QQMicroBlogUserName = 14;
    if (has_qqmicroblogusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->qqmicroblogusername_);
    }

    // optional .micromsg.BuiltinIPList BuiltinIPList = 21;
    if (has_builtiniplist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->builtiniplist_);
    }

    // optional .micromsg.NetworkControl NetworkControl = 23;
    if (has_networkcontrol()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->networkcontrol_);
    }

    // optional .micromsg.PluginKeyList PluginKeyList = 29;
    if (has_pluginkeylist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pluginkeylist_);
    }

    // optional .micromsg.SKBuiltinString_t ImgEncryptKey = 30;
    if (has_imgencryptkey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->imgencryptkey_);
    }

    // optional .micromsg.SKBuiltinBuffer_t A2Key = 31;
    if (has_a2key()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->a2key_);
    }

    // optional .micromsg.SKBuiltinBuffer_t KSid = 32;
    if (has_ksid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ksid_);
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional .micromsg.HostList NewHostList = 41;
    if (has_newhostlist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->newhostlist_);
    }

    // optional .micromsg.CDNDnsInfo DnsInfo = 48;
    if (has_dnsinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dnsinfo_);
    }

    // optional .micromsg.SKBuiltinBuffer_t WTLoginRspBuff = 50;
    if (has_wtloginrspbuff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->wtloginrspbuff_);
    }

    // optional .micromsg.ShowStyleKey ShowStyle = 51;
    if (has_showstyle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->showstyle_);
    }

    // optional .micromsg.SKBuiltinBuffer_t CliDBEncryptKey = 52;
    if (has_clidbencryptkey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->clidbencryptkey_);
    }

    // optional .micromsg.SKBuiltinBuffer_t CliDBEncryptInfo = 53;
    if (has_clidbencryptinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->clidbencryptinfo_);
    }

    // optional .micromsg.CDNDnsInfo SnsDnsInfo = 55;
    if (has_snsdnsinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->snsdnsinfo_);
    }

    // optional .micromsg.CDNDnsInfo AppDnsInfo = 56;
    if (has_appdnsinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->appdnsinfo_);
    }

  }
  // optional .micromsg.SKBuiltinBuffer_t VerifyBuff = 58;
  if (has_verifybuff()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->verifybuff_);
  }

  if (_has_bits_[40 / 32] & 61440u) {
    // optional uint32 QQMicroBlogStatus = 15;
    if (has_qqmicroblogstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qqmicroblogstatus());
    }

    // optional uint32 NewVersion = 16;
    if (has_newversion()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newversion());
    }

    // optional uint32 PushMailStatus = 18;
    if (has_pushmailstatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pushmailstatus());
    }

    // optional uint32 SendCardBitFlag = 19;
    if (has_sendcardbitflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sendcardbitflag());
    }

  }
  if (_has_bits_[48 / 32] & 16711680u) {
    // optional uint32 PluginFlag = 24;
    if (has_pluginflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pluginflag());
    }

    // optional uint32 RegType = 26;
    if (has_regtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->regtype());
    }

    // optional uint32 ProfileFlag = 33;
    if (has_profileflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->profileflag());
    }

    // optional uint32 TimeStamp = 35;
    if (has_timestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional uint32 IsAutoReg = 36;
    if (has_isautoreg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isautoreg());
    }

    // optional uint32 SafeDevice = 43;
    if (has_safedevice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->safedevice());
    }

    // optional uint32 ObsoleteItem1 = 44;
    if (has_obsoleteitem1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->obsoleteitem1());
    }

    // optional uint32 NeedSetEmailPwd = 45;
    if (has_needsetemailpwd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->needsetemailpwd());
    }

  }
  if (_has_bits_[56 / 32] & 50331648u) {
    // optional uint32 NextAuthType = 49;
    if (has_nextauthtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nextauthtype());
    }

    // optional uint32 Flag = 54;
    if (has_flag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewAuthResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.NewAuthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NewAuthResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NewAuthResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.NewAuthResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.NewAuthResponse)
    MergeFrom(*source);
  }
}

void NewAuthResponse::MergeFrom(const NewAuthResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.NewAuthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sessionkey();
      sessionkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionkey_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_ticket();
      ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_pushmailsettingticket();
      pushmailsettingticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pushmailsettingticket_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_fsurl();
      fsurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fsurl_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_alias();
      alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_authkey();
      authkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authkey_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_sid();
      sid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sid_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_kickresponse();
      kickresponse_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kickresponse_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_applybetaurl();
      applybetaurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.applybetaurl_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_deviceinfoxml();
      deviceinfoxml_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceinfoxml_);
    }
    if (cached_has_bits & 0x00000800u) {
      set_has_softconfigxml();
      softconfigxml_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.softconfigxml_);
    }
    if (cached_has_bits & 0x00001000u) {
      set_has_authticket();
      authticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authticket_);
    }
    if (cached_has_bits & 0x00002000u) {
      set_has_hintmsg();
      hintmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hintmsg_);
    }
    if (cached_has_bits & 0x00004000u) {
      set_has_autoauthticket();
      autoauthticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.autoauthticket_);
    }
    if (cached_has_bits & 0x00008000u) {
      set_has_verifysignature();
      verifysignature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifysignature_);
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_username()->::micromsg::SKBuiltinString_t::MergeFrom(from.username());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_nickname()->::micromsg::SKBuiltinString_t::MergeFrom(from.nickname());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_bindemail()->::micromsg::SKBuiltinString_t::MergeFrom(from.bindemail());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_bindmobile()->::micromsg::SKBuiltinString_t::MergeFrom(from.bindmobile());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_imgsid()->::micromsg::SKBuiltinString_t::MergeFrom(from.imgsid());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_imgbuf()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.imgbuf());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_officialusername()->::micromsg::SKBuiltinString_t::MergeFrom(from.officialusername());
    }
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_officialnickname()->::micromsg::SKBuiltinString_t::MergeFrom(from.officialnickname());
    }
    if (cached_has_bits & 0x02000000u) {
      mutable_qqmicroblogusername()->::micromsg::SKBuiltinString_t::MergeFrom(from.qqmicroblogusername());
    }
    if (cached_has_bits & 0x04000000u) {
      mutable_builtiniplist()->::micromsg::BuiltinIPList::MergeFrom(from.builtiniplist());
    }
    if (cached_has_bits & 0x08000000u) {
      mutable_networkcontrol()->::micromsg::NetworkControl::MergeFrom(from.networkcontrol());
    }
    if (cached_has_bits & 0x10000000u) {
      mutable_pluginkeylist()->::micromsg::PluginKeyList::MergeFrom(from.pluginkeylist());
    }
    if (cached_has_bits & 0x20000000u) {
      mutable_imgencryptkey()->::micromsg::SKBuiltinString_t::MergeFrom(from.imgencryptkey());
    }
    if (cached_has_bits & 0x40000000u) {
      mutable_a2key()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.a2key());
    }
    if (cached_has_bits & 0x80000000u) {
      mutable_ksid()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.ksid());
    }
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_newhostlist()->::micromsg::HostList::MergeFrom(from.newhostlist());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_dnsinfo()->::micromsg::CDNDnsInfo::MergeFrom(from.dnsinfo());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_wtloginrspbuff()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.wtloginrspbuff());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_showstyle()->::micromsg::ShowStyleKey::MergeFrom(from.showstyle());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_clidbencryptkey()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.clidbencryptkey());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_clidbencryptinfo()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.clidbencryptinfo());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_snsdnsinfo()->::micromsg::CDNDnsInfo::MergeFrom(from.snsdnsinfo());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_appdnsinfo()->::micromsg::CDNDnsInfo::MergeFrom(from.appdnsinfo());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_verifybuff()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.verifybuff());
    }
    if (cached_has_bits & 0x00000200u) {
      uin_ = from.uin_;
    }
    if (cached_has_bits & 0x00000400u) {
      binduin_ = from.binduin_;
    }
    if (cached_has_bits & 0x00000800u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00001000u) {
      qqmicroblogstatus_ = from.qqmicroblogstatus_;
    }
    if (cached_has_bits & 0x00002000u) {
      newversion_ = from.newversion_;
    }
    if (cached_has_bits & 0x00004000u) {
      pushmailstatus_ = from.pushmailstatus_;
    }
    if (cached_has_bits & 0x00008000u) {
      sendcardbitflag_ = from.sendcardbitflag_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      pluginflag_ = from.pluginflag_;
    }
    if (cached_has_bits & 0x00020000u) {
      regtype_ = from.regtype_;
    }
    if (cached_has_bits & 0x00040000u) {
      profileflag_ = from.profileflag_;
    }
    if (cached_has_bits & 0x00080000u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00100000u) {
      isautoreg_ = from.isautoreg_;
    }
    if (cached_has_bits & 0x00200000u) {
      safedevice_ = from.safedevice_;
    }
    if (cached_has_bits & 0x00400000u) {
      obsoleteitem1_ = from.obsoleteitem1_;
    }
    if (cached_has_bits & 0x00800000u) {
      needsetemailpwd_ = from.needsetemailpwd_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 50331648u) {
    if (cached_has_bits & 0x01000000u) {
      nextauthtype_ = from.nextauthtype_;
    }
    if (cached_has_bits & 0x02000000u) {
      flag_ = from.flag_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void NewAuthResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.NewAuthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewAuthResponse::CopyFrom(const NewAuthResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.NewAuthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewAuthResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x01ff0000) != 0x01ff0000) return false;
  if ((_has_bits_[1] & 0x00000e00) != 0x00000e00) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_imgbuf()) {
    if (!this->imgbuf_->IsInitialized()) return false;
  }
  if (has_builtiniplist()) {
    if (!this->builtiniplist_->IsInitialized()) return false;
  }
  if (has_pluginkeylist()) {
    if (!this->pluginkeylist_->IsInitialized()) return false;
  }
  if (has_a2key()) {
    if (!this->a2key_->IsInitialized()) return false;
  }
  if (has_ksid()) {
    if (!this->ksid_->IsInitialized()) return false;
  }
  if (has_newhostlist()) {
    if (!this->newhostlist_->IsInitialized()) return false;
  }
  if (has_dnsinfo()) {
    if (!this->dnsinfo_->IsInitialized()) return false;
  }
  if (has_wtloginrspbuff()) {
    if (!this->wtloginrspbuff_->IsInitialized()) return false;
  }
  if (has_showstyle()) {
    if (!this->showstyle_->IsInitialized()) return false;
  }
  if (has_clidbencryptkey()) {
    if (!this->clidbencryptkey_->IsInitialized()) return false;
  }
  if (has_clidbencryptinfo()) {
    if (!this->clidbencryptinfo_->IsInitialized()) return false;
  }
  if (has_snsdnsinfo()) {
    if (!this->snsdnsinfo_->IsInitialized()) return false;
  }
  if (has_appdnsinfo()) {
    if (!this->appdnsinfo_->IsInitialized()) return false;
  }
  if (has_verifybuff()) {
    if (!this->verifybuff_->IsInitialized()) return false;
  }
  return true;
}

void NewAuthResponse::Swap(NewAuthResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewAuthResponse::InternalSwap(NewAuthResponse* other) {
  sessionkey_.Swap(&other->sessionkey_);
  ticket_.Swap(&other->ticket_);
  pushmailsettingticket_.Swap(&other->pushmailsettingticket_);
  fsurl_.Swap(&other->fsurl_);
  alias_.Swap(&other->alias_);
  authkey_.Swap(&other->authkey_);
  sid_.Swap(&other->sid_);
  password_.Swap(&other->password_);
  kickresponse_.Swap(&other->kickresponse_);
  applybetaurl_.Swap(&other->applybetaurl_);
  deviceinfoxml_.Swap(&other->deviceinfoxml_);
  softconfigxml_.Swap(&other->softconfigxml_);
  authticket_.Swap(&other->authticket_);
  hintmsg_.Swap(&other->hintmsg_);
  autoauthticket_.Swap(&other->autoauthticket_);
  verifysignature_.Swap(&other->verifysignature_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(username_, other->username_);
  std::swap(nickname_, other->nickname_);
  std::swap(bindemail_, other->bindemail_);
  std::swap(bindmobile_, other->bindmobile_);
  std::swap(imgsid_, other->imgsid_);
  std::swap(imgbuf_, other->imgbuf_);
  std::swap(officialusername_, other->officialusername_);
  std::swap(officialnickname_, other->officialnickname_);
  std::swap(qqmicroblogusername_, other->qqmicroblogusername_);
  std::swap(builtiniplist_, other->builtiniplist_);
  std::swap(networkcontrol_, other->networkcontrol_);
  std::swap(pluginkeylist_, other->pluginkeylist_);
  std::swap(imgencryptkey_, other->imgencryptkey_);
  std::swap(a2key_, other->a2key_);
  std::swap(ksid_, other->ksid_);
  std::swap(newhostlist_, other->newhostlist_);
  std::swap(dnsinfo_, other->dnsinfo_);
  std::swap(wtloginrspbuff_, other->wtloginrspbuff_);
  std::swap(showstyle_, other->showstyle_);
  std::swap(clidbencryptkey_, other->clidbencryptkey_);
  std::swap(clidbencryptinfo_, other->clidbencryptinfo_);
  std::swap(snsdnsinfo_, other->snsdnsinfo_);
  std::swap(appdnsinfo_, other->appdnsinfo_);
  std::swap(verifybuff_, other->verifybuff_);
  std::swap(uin_, other->uin_);
  std::swap(binduin_, other->binduin_);
  std::swap(status_, other->status_);
  std::swap(qqmicroblogstatus_, other->qqmicroblogstatus_);
  std::swap(newversion_, other->newversion_);
  std::swap(pushmailstatus_, other->pushmailstatus_);
  std::swap(sendcardbitflag_, other->sendcardbitflag_);
  std::swap(pluginflag_, other->pluginflag_);
  std::swap(regtype_, other->regtype_);
  std::swap(profileflag_, other->profileflag_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(isautoreg_, other->isautoreg_);
  std::swap(safedevice_, other->safedevice_);
  std::swap(obsoleteitem1_, other->obsoleteitem1_);
  std::swap(needsetemailpwd_, other->needsetemailpwd_);
  std::swap(nextauthtype_, other->nextauthtype_);
  std::swap(flag_, other->flag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NewAuthResponse::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NewAuthResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool NewAuthResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void NewAuthResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00010000u;
}
void NewAuthResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00010000u;
}
void NewAuthResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& NewAuthResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* NewAuthResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* NewAuthResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void NewAuthResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthResponse.BaseResponse)
}

// required uint32 Uin = 2;
bool NewAuthResponse::has_uin() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
void NewAuthResponse::set_has_uin() {
  _has_bits_[1] |= 0x00000200u;
}
void NewAuthResponse::clear_has_uin() {
  _has_bits_[1] &= ~0x00000200u;
}
void NewAuthResponse::clear_uin() {
  uin_ = 0u;
  clear_has_uin();
}
::google::protobuf::uint32 NewAuthResponse::uin() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.Uin)
  return uin_;
}
void NewAuthResponse::set_uin(::google::protobuf::uint32 value) {
  set_has_uin();
  uin_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewAuthResponse.Uin)
}

// required .micromsg.SKBuiltinString_t UserName = 3;
bool NewAuthResponse::has_username() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void NewAuthResponse::set_has_username() {
  _has_bits_[0] |= 0x00020000u;
}
void NewAuthResponse::clear_has_username() {
  _has_bits_[0] &= ~0x00020000u;
}
void NewAuthResponse::clear_username() {
  if (username_ != NULL) username_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_username();
}
const ::micromsg::SKBuiltinString_t& NewAuthResponse::username() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.UserName)
  return username_ != NULL ? *username_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* NewAuthResponse::mutable_username() {
  set_has_username();
  if (username_ == NULL) {
    username_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthResponse.UserName)
  return username_;
}
::micromsg::SKBuiltinString_t* NewAuthResponse::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthResponse.UserName)
  clear_has_username();
  ::micromsg::SKBuiltinString_t* temp = username_;
  username_ = NULL;
  return temp;
}
void NewAuthResponse::set_allocated_username(::micromsg::SKBuiltinString_t* username) {
  delete username_;
  username_ = username;
  if (username) {
    set_has_username();
  } else {
    clear_has_username();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthResponse.UserName)
}

// required .micromsg.SKBuiltinString_t NickName = 4;
bool NewAuthResponse::has_nickname() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void NewAuthResponse::set_has_nickname() {
  _has_bits_[0] |= 0x00040000u;
}
void NewAuthResponse::clear_has_nickname() {
  _has_bits_[0] &= ~0x00040000u;
}
void NewAuthResponse::clear_nickname() {
  if (nickname_ != NULL) nickname_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_nickname();
}
const ::micromsg::SKBuiltinString_t& NewAuthResponse::nickname() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.NickName)
  return nickname_ != NULL ? *nickname_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* NewAuthResponse::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == NULL) {
    nickname_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthResponse.NickName)
  return nickname_;
}
::micromsg::SKBuiltinString_t* NewAuthResponse::release_nickname() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthResponse.NickName)
  clear_has_nickname();
  ::micromsg::SKBuiltinString_t* temp = nickname_;
  nickname_ = NULL;
  return temp;
}
void NewAuthResponse::set_allocated_nickname(::micromsg::SKBuiltinString_t* nickname) {
  delete nickname_;
  nickname_ = nickname;
  if (nickname) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthResponse.NickName)
}

// required uint32 BindUin = 5;
bool NewAuthResponse::has_binduin() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
void NewAuthResponse::set_has_binduin() {
  _has_bits_[1] |= 0x00000400u;
}
void NewAuthResponse::clear_has_binduin() {
  _has_bits_[1] &= ~0x00000400u;
}
void NewAuthResponse::clear_binduin() {
  binduin_ = 0u;
  clear_has_binduin();
}
::google::protobuf::uint32 NewAuthResponse::binduin() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.BindUin)
  return binduin_;
}
void NewAuthResponse::set_binduin(::google::protobuf::uint32 value) {
  set_has_binduin();
  binduin_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewAuthResponse.BindUin)
}

// required .micromsg.SKBuiltinString_t BindEmail = 6;
bool NewAuthResponse::has_bindemail() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void NewAuthResponse::set_has_bindemail() {
  _has_bits_[0] |= 0x00080000u;
}
void NewAuthResponse::clear_has_bindemail() {
  _has_bits_[0] &= ~0x00080000u;
}
void NewAuthResponse::clear_bindemail() {
  if (bindemail_ != NULL) bindemail_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_bindemail();
}
const ::micromsg::SKBuiltinString_t& NewAuthResponse::bindemail() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.BindEmail)
  return bindemail_ != NULL ? *bindemail_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* NewAuthResponse::mutable_bindemail() {
  set_has_bindemail();
  if (bindemail_ == NULL) {
    bindemail_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthResponse.BindEmail)
  return bindemail_;
}
::micromsg::SKBuiltinString_t* NewAuthResponse::release_bindemail() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthResponse.BindEmail)
  clear_has_bindemail();
  ::micromsg::SKBuiltinString_t* temp = bindemail_;
  bindemail_ = NULL;
  return temp;
}
void NewAuthResponse::set_allocated_bindemail(::micromsg::SKBuiltinString_t* bindemail) {
  delete bindemail_;
  bindemail_ = bindemail;
  if (bindemail) {
    set_has_bindemail();
  } else {
    clear_has_bindemail();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthResponse.BindEmail)
}

// required .micromsg.SKBuiltinString_t BindMobile = 7;
bool NewAuthResponse::has_bindmobile() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void NewAuthResponse::set_has_bindmobile() {
  _has_bits_[0] |= 0x00100000u;
}
void NewAuthResponse::clear_has_bindmobile() {
  _has_bits_[0] &= ~0x00100000u;
}
void NewAuthResponse::clear_bindmobile() {
  if (bindmobile_ != NULL) bindmobile_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_bindmobile();
}
const ::micromsg::SKBuiltinString_t& NewAuthResponse::bindmobile() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.BindMobile)
  return bindmobile_ != NULL ? *bindmobile_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* NewAuthResponse::mutable_bindmobile() {
  set_has_bindmobile();
  if (bindmobile_ == NULL) {
    bindmobile_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthResponse.BindMobile)
  return bindmobile_;
}
::micromsg::SKBuiltinString_t* NewAuthResponse::release_bindmobile() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthResponse.BindMobile)
  clear_has_bindmobile();
  ::micromsg::SKBuiltinString_t* temp = bindmobile_;
  bindmobile_ = NULL;
  return temp;
}
void NewAuthResponse::set_allocated_bindmobile(::micromsg::SKBuiltinString_t* bindmobile) {
  delete bindmobile_;
  bindmobile_ = bindmobile;
  if (bindmobile) {
    set_has_bindmobile();
  } else {
    clear_has_bindmobile();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthResponse.BindMobile)
}

// required uint32 Status = 8;
bool NewAuthResponse::has_status() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
void NewAuthResponse::set_has_status() {
  _has_bits_[1] |= 0x00000800u;
}
void NewAuthResponse::clear_has_status() {
  _has_bits_[1] &= ~0x00000800u;
}
void NewAuthResponse::clear_status() {
  status_ = 0u;
  clear_has_status();
}
::google::protobuf::uint32 NewAuthResponse::status() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.Status)
  return status_;
}
void NewAuthResponse::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewAuthResponse.Status)
}

// optional bytes SessionKey = 9;
bool NewAuthResponse::has_sessionkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NewAuthResponse::set_has_sessionkey() {
  _has_bits_[0] |= 0x00000001u;
}
void NewAuthResponse::clear_has_sessionkey() {
  _has_bits_[0] &= ~0x00000001u;
}
void NewAuthResponse::clear_sessionkey() {
  sessionkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionkey();
}
const ::std::string& NewAuthResponse::sessionkey() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.SessionKey)
  return sessionkey_.GetNoArena();
}
void NewAuthResponse::set_sessionkey(const ::std::string& value) {
  set_has_sessionkey();
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewAuthResponse.SessionKey)
}
#if LANG_CXX11
void NewAuthResponse::set_sessionkey(::std::string&& value) {
  set_has_sessionkey();
  sessionkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewAuthResponse.SessionKey)
}
#endif
void NewAuthResponse::set_sessionkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionkey();
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewAuthResponse.SessionKey)
}
void NewAuthResponse::set_sessionkey(const void* value, size_t size) {
  set_has_sessionkey();
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewAuthResponse.SessionKey)
}
::std::string* NewAuthResponse::mutable_sessionkey() {
  set_has_sessionkey();
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthResponse.SessionKey)
  return sessionkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewAuthResponse::release_sessionkey() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthResponse.SessionKey)
  clear_has_sessionkey();
  return sessionkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewAuthResponse::set_allocated_sessionkey(::std::string* sessionkey) {
  if (sessionkey != NULL) {
    set_has_sessionkey();
  } else {
    clear_has_sessionkey();
  }
  sessionkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionkey);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthResponse.SessionKey)
}

// required .micromsg.SKBuiltinString_t ImgSid = 10;
bool NewAuthResponse::has_imgsid() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void NewAuthResponse::set_has_imgsid() {
  _has_bits_[0] |= 0x00200000u;
}
void NewAuthResponse::clear_has_imgsid() {
  _has_bits_[0] &= ~0x00200000u;
}
void NewAuthResponse::clear_imgsid() {
  if (imgsid_ != NULL) imgsid_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_imgsid();
}
const ::micromsg::SKBuiltinString_t& NewAuthResponse::imgsid() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.ImgSid)
  return imgsid_ != NULL ? *imgsid_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* NewAuthResponse::mutable_imgsid() {
  set_has_imgsid();
  if (imgsid_ == NULL) {
    imgsid_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthResponse.ImgSid)
  return imgsid_;
}
::micromsg::SKBuiltinString_t* NewAuthResponse::release_imgsid() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthResponse.ImgSid)
  clear_has_imgsid();
  ::micromsg::SKBuiltinString_t* temp = imgsid_;
  imgsid_ = NULL;
  return temp;
}
void NewAuthResponse::set_allocated_imgsid(::micromsg::SKBuiltinString_t* imgsid) {
  delete imgsid_;
  imgsid_ = imgsid;
  if (imgsid) {
    set_has_imgsid();
  } else {
    clear_has_imgsid();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthResponse.ImgSid)
}

// required .micromsg.SKBuiltinBuffer_t ImgBuf = 11;
bool NewAuthResponse::has_imgbuf() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void NewAuthResponse::set_has_imgbuf() {
  _has_bits_[0] |= 0x00400000u;
}
void NewAuthResponse::clear_has_imgbuf() {
  _has_bits_[0] &= ~0x00400000u;
}
void NewAuthResponse::clear_imgbuf() {
  if (imgbuf_ != NULL) imgbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_imgbuf();
}
const ::micromsg::SKBuiltinBuffer_t& NewAuthResponse::imgbuf() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.ImgBuf)
  return imgbuf_ != NULL ? *imgbuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* NewAuthResponse::mutable_imgbuf() {
  set_has_imgbuf();
  if (imgbuf_ == NULL) {
    imgbuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthResponse.ImgBuf)
  return imgbuf_;
}
::micromsg::SKBuiltinBuffer_t* NewAuthResponse::release_imgbuf() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthResponse.ImgBuf)
  clear_has_imgbuf();
  ::micromsg::SKBuiltinBuffer_t* temp = imgbuf_;
  imgbuf_ = NULL;
  return temp;
}
void NewAuthResponse::set_allocated_imgbuf(::micromsg::SKBuiltinBuffer_t* imgbuf) {
  delete imgbuf_;
  imgbuf_ = imgbuf;
  if (imgbuf) {
    set_has_imgbuf();
  } else {
    clear_has_imgbuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthResponse.ImgBuf)
}

// required .micromsg.SKBuiltinString_t OfficialUserName = 12;
bool NewAuthResponse::has_officialusername() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void NewAuthResponse::set_has_officialusername() {
  _has_bits_[0] |= 0x00800000u;
}
void NewAuthResponse::clear_has_officialusername() {
  _has_bits_[0] &= ~0x00800000u;
}
void NewAuthResponse::clear_officialusername() {
  if (officialusername_ != NULL) officialusername_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_officialusername();
}
const ::micromsg::SKBuiltinString_t& NewAuthResponse::officialusername() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.OfficialUserName)
  return officialusername_ != NULL ? *officialusername_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* NewAuthResponse::mutable_officialusername() {
  set_has_officialusername();
  if (officialusername_ == NULL) {
    officialusername_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthResponse.OfficialUserName)
  return officialusername_;
}
::micromsg::SKBuiltinString_t* NewAuthResponse::release_officialusername() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthResponse.OfficialUserName)
  clear_has_officialusername();
  ::micromsg::SKBuiltinString_t* temp = officialusername_;
  officialusername_ = NULL;
  return temp;
}
void NewAuthResponse::set_allocated_officialusername(::micromsg::SKBuiltinString_t* officialusername) {
  delete officialusername_;
  officialusername_ = officialusername;
  if (officialusername) {
    set_has_officialusername();
  } else {
    clear_has_officialusername();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthResponse.OfficialUserName)
}

// required .micromsg.SKBuiltinString_t OfficialNickName = 13;
bool NewAuthResponse::has_officialnickname() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void NewAuthResponse::set_has_officialnickname() {
  _has_bits_[0] |= 0x01000000u;
}
void NewAuthResponse::clear_has_officialnickname() {
  _has_bits_[0] &= ~0x01000000u;
}
void NewAuthResponse::clear_officialnickname() {
  if (officialnickname_ != NULL) officialnickname_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_officialnickname();
}
const ::micromsg::SKBuiltinString_t& NewAuthResponse::officialnickname() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.OfficialNickName)
  return officialnickname_ != NULL ? *officialnickname_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* NewAuthResponse::mutable_officialnickname() {
  set_has_officialnickname();
  if (officialnickname_ == NULL) {
    officialnickname_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthResponse.OfficialNickName)
  return officialnickname_;
}
::micromsg::SKBuiltinString_t* NewAuthResponse::release_officialnickname() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthResponse.OfficialNickName)
  clear_has_officialnickname();
  ::micromsg::SKBuiltinString_t* temp = officialnickname_;
  officialnickname_ = NULL;
  return temp;
}
void NewAuthResponse::set_allocated_officialnickname(::micromsg::SKBuiltinString_t* officialnickname) {
  delete officialnickname_;
  officialnickname_ = officialnickname;
  if (officialnickname) {
    set_has_officialnickname();
  } else {
    clear_has_officialnickname();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthResponse.OfficialNickName)
}

// optional .micromsg.SKBuiltinString_t QQMicroBlogUserName = 14;
bool NewAuthResponse::has_qqmicroblogusername() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void NewAuthResponse::set_has_qqmicroblogusername() {
  _has_bits_[0] |= 0x02000000u;
}
void NewAuthResponse::clear_has_qqmicroblogusername() {
  _has_bits_[0] &= ~0x02000000u;
}
void NewAuthResponse::clear_qqmicroblogusername() {
  if (qqmicroblogusername_ != NULL) qqmicroblogusername_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_qqmicroblogusername();
}
const ::micromsg::SKBuiltinString_t& NewAuthResponse::qqmicroblogusername() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.QQMicroBlogUserName)
  return qqmicroblogusername_ != NULL ? *qqmicroblogusername_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* NewAuthResponse::mutable_qqmicroblogusername() {
  set_has_qqmicroblogusername();
  if (qqmicroblogusername_ == NULL) {
    qqmicroblogusername_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthResponse.QQMicroBlogUserName)
  return qqmicroblogusername_;
}
::micromsg::SKBuiltinString_t* NewAuthResponse::release_qqmicroblogusername() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthResponse.QQMicroBlogUserName)
  clear_has_qqmicroblogusername();
  ::micromsg::SKBuiltinString_t* temp = qqmicroblogusername_;
  qqmicroblogusername_ = NULL;
  return temp;
}
void NewAuthResponse::set_allocated_qqmicroblogusername(::micromsg::SKBuiltinString_t* qqmicroblogusername) {
  delete qqmicroblogusername_;
  qqmicroblogusername_ = qqmicroblogusername;
  if (qqmicroblogusername) {
    set_has_qqmicroblogusername();
  } else {
    clear_has_qqmicroblogusername();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthResponse.QQMicroBlogUserName)
}

// optional uint32 QQMicroBlogStatus = 15;
bool NewAuthResponse::has_qqmicroblogstatus() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
void NewAuthResponse::set_has_qqmicroblogstatus() {
  _has_bits_[1] |= 0x00001000u;
}
void NewAuthResponse::clear_has_qqmicroblogstatus() {
  _has_bits_[1] &= ~0x00001000u;
}
void NewAuthResponse::clear_qqmicroblogstatus() {
  qqmicroblogstatus_ = 0u;
  clear_has_qqmicroblogstatus();
}
::google::protobuf::uint32 NewAuthResponse::qqmicroblogstatus() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.QQMicroBlogStatus)
  return qqmicroblogstatus_;
}
void NewAuthResponse::set_qqmicroblogstatus(::google::protobuf::uint32 value) {
  set_has_qqmicroblogstatus();
  qqmicroblogstatus_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewAuthResponse.QQMicroBlogStatus)
}

// optional uint32 NewVersion = 16;
bool NewAuthResponse::has_newversion() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
void NewAuthResponse::set_has_newversion() {
  _has_bits_[1] |= 0x00002000u;
}
void NewAuthResponse::clear_has_newversion() {
  _has_bits_[1] &= ~0x00002000u;
}
void NewAuthResponse::clear_newversion() {
  newversion_ = 0u;
  clear_has_newversion();
}
::google::protobuf::uint32 NewAuthResponse::newversion() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.NewVersion)
  return newversion_;
}
void NewAuthResponse::set_newversion(::google::protobuf::uint32 value) {
  set_has_newversion();
  newversion_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewAuthResponse.NewVersion)
}

// optional string Ticket = 17;
bool NewAuthResponse::has_ticket() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NewAuthResponse::set_has_ticket() {
  _has_bits_[0] |= 0x00000002u;
}
void NewAuthResponse::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000002u;
}
void NewAuthResponse::clear_ticket() {
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ticket();
}
const ::std::string& NewAuthResponse::ticket() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.Ticket)
  return ticket_.GetNoArena();
}
void NewAuthResponse::set_ticket(const ::std::string& value) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewAuthResponse.Ticket)
}
#if LANG_CXX11
void NewAuthResponse::set_ticket(::std::string&& value) {
  set_has_ticket();
  ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewAuthResponse.Ticket)
}
#endif
void NewAuthResponse::set_ticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewAuthResponse.Ticket)
}
void NewAuthResponse::set_ticket(const char* value, size_t size) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewAuthResponse.Ticket)
}
::std::string* NewAuthResponse::mutable_ticket() {
  set_has_ticket();
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthResponse.Ticket)
  return ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewAuthResponse::release_ticket() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthResponse.Ticket)
  clear_has_ticket();
  return ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewAuthResponse::set_allocated_ticket(::std::string* ticket) {
  if (ticket != NULL) {
    set_has_ticket();
  } else {
    clear_has_ticket();
  }
  ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticket);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthResponse.Ticket)
}

// optional uint32 PushMailStatus = 18;
bool NewAuthResponse::has_pushmailstatus() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
void NewAuthResponse::set_has_pushmailstatus() {
  _has_bits_[1] |= 0x00004000u;
}
void NewAuthResponse::clear_has_pushmailstatus() {
  _has_bits_[1] &= ~0x00004000u;
}
void NewAuthResponse::clear_pushmailstatus() {
  pushmailstatus_ = 0u;
  clear_has_pushmailstatus();
}
::google::protobuf::uint32 NewAuthResponse::pushmailstatus() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.PushMailStatus)
  return pushmailstatus_;
}
void NewAuthResponse::set_pushmailstatus(::google::protobuf::uint32 value) {
  set_has_pushmailstatus();
  pushmailstatus_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewAuthResponse.PushMailStatus)
}

// optional uint32 SendCardBitFlag = 19;
bool NewAuthResponse::has_sendcardbitflag() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
void NewAuthResponse::set_has_sendcardbitflag() {
  _has_bits_[1] |= 0x00008000u;
}
void NewAuthResponse::clear_has_sendcardbitflag() {
  _has_bits_[1] &= ~0x00008000u;
}
void NewAuthResponse::clear_sendcardbitflag() {
  sendcardbitflag_ = 0u;
  clear_has_sendcardbitflag();
}
::google::protobuf::uint32 NewAuthResponse::sendcardbitflag() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.SendCardBitFlag)
  return sendcardbitflag_;
}
void NewAuthResponse::set_sendcardbitflag(::google::protobuf::uint32 value) {
  set_has_sendcardbitflag();
  sendcardbitflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewAuthResponse.SendCardBitFlag)
}

// optional string PushMailSettingTicket = 20;
bool NewAuthResponse::has_pushmailsettingticket() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NewAuthResponse::set_has_pushmailsettingticket() {
  _has_bits_[0] |= 0x00000004u;
}
void NewAuthResponse::clear_has_pushmailsettingticket() {
  _has_bits_[0] &= ~0x00000004u;
}
void NewAuthResponse::clear_pushmailsettingticket() {
  pushmailsettingticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pushmailsettingticket();
}
const ::std::string& NewAuthResponse::pushmailsettingticket() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.PushMailSettingTicket)
  return pushmailsettingticket_.GetNoArena();
}
void NewAuthResponse::set_pushmailsettingticket(const ::std::string& value) {
  set_has_pushmailsettingticket();
  pushmailsettingticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewAuthResponse.PushMailSettingTicket)
}
#if LANG_CXX11
void NewAuthResponse::set_pushmailsettingticket(::std::string&& value) {
  set_has_pushmailsettingticket();
  pushmailsettingticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewAuthResponse.PushMailSettingTicket)
}
#endif
void NewAuthResponse::set_pushmailsettingticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pushmailsettingticket();
  pushmailsettingticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewAuthResponse.PushMailSettingTicket)
}
void NewAuthResponse::set_pushmailsettingticket(const char* value, size_t size) {
  set_has_pushmailsettingticket();
  pushmailsettingticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewAuthResponse.PushMailSettingTicket)
}
::std::string* NewAuthResponse::mutable_pushmailsettingticket() {
  set_has_pushmailsettingticket();
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthResponse.PushMailSettingTicket)
  return pushmailsettingticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewAuthResponse::release_pushmailsettingticket() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthResponse.PushMailSettingTicket)
  clear_has_pushmailsettingticket();
  return pushmailsettingticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewAuthResponse::set_allocated_pushmailsettingticket(::std::string* pushmailsettingticket) {
  if (pushmailsettingticket != NULL) {
    set_has_pushmailsettingticket();
  } else {
    clear_has_pushmailsettingticket();
  }
  pushmailsettingticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pushmailsettingticket);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthResponse.PushMailSettingTicket)
}

// optional .micromsg.BuiltinIPList BuiltinIPList = 21;
bool NewAuthResponse::has_builtiniplist() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void NewAuthResponse::set_has_builtiniplist() {
  _has_bits_[0] |= 0x04000000u;
}
void NewAuthResponse::clear_has_builtiniplist() {
  _has_bits_[0] &= ~0x04000000u;
}
void NewAuthResponse::clear_builtiniplist() {
  if (builtiniplist_ != NULL) builtiniplist_->::micromsg::BuiltinIPList::Clear();
  clear_has_builtiniplist();
}
const ::micromsg::BuiltinIPList& NewAuthResponse::builtiniplist() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.BuiltinIPList)
  return builtiniplist_ != NULL ? *builtiniplist_
                         : *::micromsg::BuiltinIPList::internal_default_instance();
}
::micromsg::BuiltinIPList* NewAuthResponse::mutable_builtiniplist() {
  set_has_builtiniplist();
  if (builtiniplist_ == NULL) {
    builtiniplist_ = new ::micromsg::BuiltinIPList;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthResponse.BuiltinIPList)
  return builtiniplist_;
}
::micromsg::BuiltinIPList* NewAuthResponse::release_builtiniplist() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthResponse.BuiltinIPList)
  clear_has_builtiniplist();
  ::micromsg::BuiltinIPList* temp = builtiniplist_;
  builtiniplist_ = NULL;
  return temp;
}
void NewAuthResponse::set_allocated_builtiniplist(::micromsg::BuiltinIPList* builtiniplist) {
  delete builtiniplist_;
  builtiniplist_ = builtiniplist;
  if (builtiniplist) {
    set_has_builtiniplist();
  } else {
    clear_has_builtiniplist();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthResponse.BuiltinIPList)
}

// optional string FSURL = 22;
bool NewAuthResponse::has_fsurl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NewAuthResponse::set_has_fsurl() {
  _has_bits_[0] |= 0x00000008u;
}
void NewAuthResponse::clear_has_fsurl() {
  _has_bits_[0] &= ~0x00000008u;
}
void NewAuthResponse::clear_fsurl() {
  fsurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fsurl();
}
const ::std::string& NewAuthResponse::fsurl() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.FSURL)
  return fsurl_.GetNoArena();
}
void NewAuthResponse::set_fsurl(const ::std::string& value) {
  set_has_fsurl();
  fsurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewAuthResponse.FSURL)
}
#if LANG_CXX11
void NewAuthResponse::set_fsurl(::std::string&& value) {
  set_has_fsurl();
  fsurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewAuthResponse.FSURL)
}
#endif
void NewAuthResponse::set_fsurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fsurl();
  fsurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewAuthResponse.FSURL)
}
void NewAuthResponse::set_fsurl(const char* value, size_t size) {
  set_has_fsurl();
  fsurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewAuthResponse.FSURL)
}
::std::string* NewAuthResponse::mutable_fsurl() {
  set_has_fsurl();
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthResponse.FSURL)
  return fsurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewAuthResponse::release_fsurl() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthResponse.FSURL)
  clear_has_fsurl();
  return fsurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewAuthResponse::set_allocated_fsurl(::std::string* fsurl) {
  if (fsurl != NULL) {
    set_has_fsurl();
  } else {
    clear_has_fsurl();
  }
  fsurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fsurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthResponse.FSURL)
}

// optional .micromsg.NetworkControl NetworkControl = 23;
bool NewAuthResponse::has_networkcontrol() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void NewAuthResponse::set_has_networkcontrol() {
  _has_bits_[0] |= 0x08000000u;
}
void NewAuthResponse::clear_has_networkcontrol() {
  _has_bits_[0] &= ~0x08000000u;
}
void NewAuthResponse::clear_networkcontrol() {
  if (networkcontrol_ != NULL) networkcontrol_->::micromsg::NetworkControl::Clear();
  clear_has_networkcontrol();
}
const ::micromsg::NetworkControl& NewAuthResponse::networkcontrol() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.NetworkControl)
  return networkcontrol_ != NULL ? *networkcontrol_
                         : *::micromsg::NetworkControl::internal_default_instance();
}
::micromsg::NetworkControl* NewAuthResponse::mutable_networkcontrol() {
  set_has_networkcontrol();
  if (networkcontrol_ == NULL) {
    networkcontrol_ = new ::micromsg::NetworkControl;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthResponse.NetworkControl)
  return networkcontrol_;
}
::micromsg::NetworkControl* NewAuthResponse::release_networkcontrol() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthResponse.NetworkControl)
  clear_has_networkcontrol();
  ::micromsg::NetworkControl* temp = networkcontrol_;
  networkcontrol_ = NULL;
  return temp;
}
void NewAuthResponse::set_allocated_networkcontrol(::micromsg::NetworkControl* networkcontrol) {
  delete networkcontrol_;
  networkcontrol_ = networkcontrol;
  if (networkcontrol) {
    set_has_networkcontrol();
  } else {
    clear_has_networkcontrol();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthResponse.NetworkControl)
}

// optional uint32 PluginFlag = 24;
bool NewAuthResponse::has_pluginflag() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
void NewAuthResponse::set_has_pluginflag() {
  _has_bits_[1] |= 0x00010000u;
}
void NewAuthResponse::clear_has_pluginflag() {
  _has_bits_[1] &= ~0x00010000u;
}
void NewAuthResponse::clear_pluginflag() {
  pluginflag_ = 0u;
  clear_has_pluginflag();
}
::google::protobuf::uint32 NewAuthResponse::pluginflag() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.PluginFlag)
  return pluginflag_;
}
void NewAuthResponse::set_pluginflag(::google::protobuf::uint32 value) {
  set_has_pluginflag();
  pluginflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewAuthResponse.PluginFlag)
}

// optional string Alias = 25;
bool NewAuthResponse::has_alias() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NewAuthResponse::set_has_alias() {
  _has_bits_[0] |= 0x00000010u;
}
void NewAuthResponse::clear_has_alias() {
  _has_bits_[0] &= ~0x00000010u;
}
void NewAuthResponse::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_alias();
}
const ::std::string& NewAuthResponse::alias() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.Alias)
  return alias_.GetNoArena();
}
void NewAuthResponse::set_alias(const ::std::string& value) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewAuthResponse.Alias)
}
#if LANG_CXX11
void NewAuthResponse::set_alias(::std::string&& value) {
  set_has_alias();
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewAuthResponse.Alias)
}
#endif
void NewAuthResponse::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewAuthResponse.Alias)
}
void NewAuthResponse::set_alias(const char* value, size_t size) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewAuthResponse.Alias)
}
::std::string* NewAuthResponse::mutable_alias() {
  set_has_alias();
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthResponse.Alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewAuthResponse::release_alias() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthResponse.Alias)
  clear_has_alias();
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewAuthResponse::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    set_has_alias();
  } else {
    clear_has_alias();
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthResponse.Alias)
}

// optional uint32 RegType = 26;
bool NewAuthResponse::has_regtype() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
void NewAuthResponse::set_has_regtype() {
  _has_bits_[1] |= 0x00020000u;
}
void NewAuthResponse::clear_has_regtype() {
  _has_bits_[1] &= ~0x00020000u;
}
void NewAuthResponse::clear_regtype() {
  regtype_ = 0u;
  clear_has_regtype();
}
::google::protobuf::uint32 NewAuthResponse::regtype() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.RegType)
  return regtype_;
}
void NewAuthResponse::set_regtype(::google::protobuf::uint32 value) {
  set_has_regtype();
  regtype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewAuthResponse.RegType)
}

// optional string AuthKey = 27;
bool NewAuthResponse::has_authkey() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void NewAuthResponse::set_has_authkey() {
  _has_bits_[0] |= 0x00000020u;
}
void NewAuthResponse::clear_has_authkey() {
  _has_bits_[0] &= ~0x00000020u;
}
void NewAuthResponse::clear_authkey() {
  authkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_authkey();
}
const ::std::string& NewAuthResponse::authkey() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.AuthKey)
  return authkey_.GetNoArena();
}
void NewAuthResponse::set_authkey(const ::std::string& value) {
  set_has_authkey();
  authkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewAuthResponse.AuthKey)
}
#if LANG_CXX11
void NewAuthResponse::set_authkey(::std::string&& value) {
  set_has_authkey();
  authkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewAuthResponse.AuthKey)
}
#endif
void NewAuthResponse::set_authkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_authkey();
  authkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewAuthResponse.AuthKey)
}
void NewAuthResponse::set_authkey(const char* value, size_t size) {
  set_has_authkey();
  authkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewAuthResponse.AuthKey)
}
::std::string* NewAuthResponse::mutable_authkey() {
  set_has_authkey();
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthResponse.AuthKey)
  return authkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewAuthResponse::release_authkey() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthResponse.AuthKey)
  clear_has_authkey();
  return authkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewAuthResponse::set_allocated_authkey(::std::string* authkey) {
  if (authkey != NULL) {
    set_has_authkey();
  } else {
    clear_has_authkey();
  }
  authkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), authkey);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthResponse.AuthKey)
}

// optional string Sid = 28;
bool NewAuthResponse::has_sid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void NewAuthResponse::set_has_sid() {
  _has_bits_[0] |= 0x00000040u;
}
void NewAuthResponse::clear_has_sid() {
  _has_bits_[0] &= ~0x00000040u;
}
void NewAuthResponse::clear_sid() {
  sid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sid();
}
const ::std::string& NewAuthResponse::sid() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.Sid)
  return sid_.GetNoArena();
}
void NewAuthResponse::set_sid(const ::std::string& value) {
  set_has_sid();
  sid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewAuthResponse.Sid)
}
#if LANG_CXX11
void NewAuthResponse::set_sid(::std::string&& value) {
  set_has_sid();
  sid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewAuthResponse.Sid)
}
#endif
void NewAuthResponse::set_sid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sid();
  sid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewAuthResponse.Sid)
}
void NewAuthResponse::set_sid(const char* value, size_t size) {
  set_has_sid();
  sid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewAuthResponse.Sid)
}
::std::string* NewAuthResponse::mutable_sid() {
  set_has_sid();
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthResponse.Sid)
  return sid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewAuthResponse::release_sid() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthResponse.Sid)
  clear_has_sid();
  return sid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewAuthResponse::set_allocated_sid(::std::string* sid) {
  if (sid != NULL) {
    set_has_sid();
  } else {
    clear_has_sid();
  }
  sid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthResponse.Sid)
}

// optional .micromsg.PluginKeyList PluginKeyList = 29;
bool NewAuthResponse::has_pluginkeylist() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void NewAuthResponse::set_has_pluginkeylist() {
  _has_bits_[0] |= 0x10000000u;
}
void NewAuthResponse::clear_has_pluginkeylist() {
  _has_bits_[0] &= ~0x10000000u;
}
void NewAuthResponse::clear_pluginkeylist() {
  if (pluginkeylist_ != NULL) pluginkeylist_->::micromsg::PluginKeyList::Clear();
  clear_has_pluginkeylist();
}
const ::micromsg::PluginKeyList& NewAuthResponse::pluginkeylist() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.PluginKeyList)
  return pluginkeylist_ != NULL ? *pluginkeylist_
                         : *::micromsg::PluginKeyList::internal_default_instance();
}
::micromsg::PluginKeyList* NewAuthResponse::mutable_pluginkeylist() {
  set_has_pluginkeylist();
  if (pluginkeylist_ == NULL) {
    pluginkeylist_ = new ::micromsg::PluginKeyList;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthResponse.PluginKeyList)
  return pluginkeylist_;
}
::micromsg::PluginKeyList* NewAuthResponse::release_pluginkeylist() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthResponse.PluginKeyList)
  clear_has_pluginkeylist();
  ::micromsg::PluginKeyList* temp = pluginkeylist_;
  pluginkeylist_ = NULL;
  return temp;
}
void NewAuthResponse::set_allocated_pluginkeylist(::micromsg::PluginKeyList* pluginkeylist) {
  delete pluginkeylist_;
  pluginkeylist_ = pluginkeylist;
  if (pluginkeylist) {
    set_has_pluginkeylist();
  } else {
    clear_has_pluginkeylist();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthResponse.PluginKeyList)
}

// optional .micromsg.SKBuiltinString_t ImgEncryptKey = 30;
bool NewAuthResponse::has_imgencryptkey() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void NewAuthResponse::set_has_imgencryptkey() {
  _has_bits_[0] |= 0x20000000u;
}
void NewAuthResponse::clear_has_imgencryptkey() {
  _has_bits_[0] &= ~0x20000000u;
}
void NewAuthResponse::clear_imgencryptkey() {
  if (imgencryptkey_ != NULL) imgencryptkey_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_imgencryptkey();
}
const ::micromsg::SKBuiltinString_t& NewAuthResponse::imgencryptkey() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.ImgEncryptKey)
  return imgencryptkey_ != NULL ? *imgencryptkey_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* NewAuthResponse::mutable_imgencryptkey() {
  set_has_imgencryptkey();
  if (imgencryptkey_ == NULL) {
    imgencryptkey_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthResponse.ImgEncryptKey)
  return imgencryptkey_;
}
::micromsg::SKBuiltinString_t* NewAuthResponse::release_imgencryptkey() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthResponse.ImgEncryptKey)
  clear_has_imgencryptkey();
  ::micromsg::SKBuiltinString_t* temp = imgencryptkey_;
  imgencryptkey_ = NULL;
  return temp;
}
void NewAuthResponse::set_allocated_imgencryptkey(::micromsg::SKBuiltinString_t* imgencryptkey) {
  delete imgencryptkey_;
  imgencryptkey_ = imgencryptkey;
  if (imgencryptkey) {
    set_has_imgencryptkey();
  } else {
    clear_has_imgencryptkey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthResponse.ImgEncryptKey)
}

// optional .micromsg.SKBuiltinBuffer_t A2Key = 31;
bool NewAuthResponse::has_a2key() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void NewAuthResponse::set_has_a2key() {
  _has_bits_[0] |= 0x40000000u;
}
void NewAuthResponse::clear_has_a2key() {
  _has_bits_[0] &= ~0x40000000u;
}
void NewAuthResponse::clear_a2key() {
  if (a2key_ != NULL) a2key_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_a2key();
}
const ::micromsg::SKBuiltinBuffer_t& NewAuthResponse::a2key() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.A2Key)
  return a2key_ != NULL ? *a2key_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* NewAuthResponse::mutable_a2key() {
  set_has_a2key();
  if (a2key_ == NULL) {
    a2key_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthResponse.A2Key)
  return a2key_;
}
::micromsg::SKBuiltinBuffer_t* NewAuthResponse::release_a2key() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthResponse.A2Key)
  clear_has_a2key();
  ::micromsg::SKBuiltinBuffer_t* temp = a2key_;
  a2key_ = NULL;
  return temp;
}
void NewAuthResponse::set_allocated_a2key(::micromsg::SKBuiltinBuffer_t* a2key) {
  delete a2key_;
  a2key_ = a2key;
  if (a2key) {
    set_has_a2key();
  } else {
    clear_has_a2key();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthResponse.A2Key)
}

// optional .micromsg.SKBuiltinBuffer_t KSid = 32;
bool NewAuthResponse::has_ksid() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void NewAuthResponse::set_has_ksid() {
  _has_bits_[0] |= 0x80000000u;
}
void NewAuthResponse::clear_has_ksid() {
  _has_bits_[0] &= ~0x80000000u;
}
void NewAuthResponse::clear_ksid() {
  if (ksid_ != NULL) ksid_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_ksid();
}
const ::micromsg::SKBuiltinBuffer_t& NewAuthResponse::ksid() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.KSid)
  return ksid_ != NULL ? *ksid_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* NewAuthResponse::mutable_ksid() {
  set_has_ksid();
  if (ksid_ == NULL) {
    ksid_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthResponse.KSid)
  return ksid_;
}
::micromsg::SKBuiltinBuffer_t* NewAuthResponse::release_ksid() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthResponse.KSid)
  clear_has_ksid();
  ::micromsg::SKBuiltinBuffer_t* temp = ksid_;
  ksid_ = NULL;
  return temp;
}
void NewAuthResponse::set_allocated_ksid(::micromsg::SKBuiltinBuffer_t* ksid) {
  delete ksid_;
  ksid_ = ksid;
  if (ksid) {
    set_has_ksid();
  } else {
    clear_has_ksid();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthResponse.KSid)
}

// optional uint32 ProfileFlag = 33;
bool NewAuthResponse::has_profileflag() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
void NewAuthResponse::set_has_profileflag() {
  _has_bits_[1] |= 0x00040000u;
}
void NewAuthResponse::clear_has_profileflag() {
  _has_bits_[1] &= ~0x00040000u;
}
void NewAuthResponse::clear_profileflag() {
  profileflag_ = 0u;
  clear_has_profileflag();
}
::google::protobuf::uint32 NewAuthResponse::profileflag() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.ProfileFlag)
  return profileflag_;
}
void NewAuthResponse::set_profileflag(::google::protobuf::uint32 value) {
  set_has_profileflag();
  profileflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewAuthResponse.ProfileFlag)
}

// optional string Password = 34;
bool NewAuthResponse::has_password() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void NewAuthResponse::set_has_password() {
  _has_bits_[0] |= 0x00000080u;
}
void NewAuthResponse::clear_has_password() {
  _has_bits_[0] &= ~0x00000080u;
}
void NewAuthResponse::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
const ::std::string& NewAuthResponse::password() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.Password)
  return password_.GetNoArena();
}
void NewAuthResponse::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewAuthResponse.Password)
}
#if LANG_CXX11
void NewAuthResponse::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewAuthResponse.Password)
}
#endif
void NewAuthResponse::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewAuthResponse.Password)
}
void NewAuthResponse::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewAuthResponse.Password)
}
::std::string* NewAuthResponse::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthResponse.Password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewAuthResponse::release_password() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthResponse.Password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewAuthResponse::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthResponse.Password)
}

// optional uint32 TimeStamp = 35;
bool NewAuthResponse::has_timestamp() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
void NewAuthResponse::set_has_timestamp() {
  _has_bits_[1] |= 0x00080000u;
}
void NewAuthResponse::clear_has_timestamp() {
  _has_bits_[1] &= ~0x00080000u;
}
void NewAuthResponse::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
::google::protobuf::uint32 NewAuthResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.TimeStamp)
  return timestamp_;
}
void NewAuthResponse::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewAuthResponse.TimeStamp)
}

// optional uint32 IsAutoReg = 36;
bool NewAuthResponse::has_isautoreg() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
void NewAuthResponse::set_has_isautoreg() {
  _has_bits_[1] |= 0x00100000u;
}
void NewAuthResponse::clear_has_isautoreg() {
  _has_bits_[1] &= ~0x00100000u;
}
void NewAuthResponse::clear_isautoreg() {
  isautoreg_ = 0u;
  clear_has_isautoreg();
}
::google::protobuf::uint32 NewAuthResponse::isautoreg() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.IsAutoReg)
  return isautoreg_;
}
void NewAuthResponse::set_isautoreg(::google::protobuf::uint32 value) {
  set_has_isautoreg();
  isautoreg_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewAuthResponse.IsAutoReg)
}

// optional string KickResponse = 37;
bool NewAuthResponse::has_kickresponse() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void NewAuthResponse::set_has_kickresponse() {
  _has_bits_[0] |= 0x00000100u;
}
void NewAuthResponse::clear_has_kickresponse() {
  _has_bits_[0] &= ~0x00000100u;
}
void NewAuthResponse::clear_kickresponse() {
  kickresponse_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_kickresponse();
}
const ::std::string& NewAuthResponse::kickresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.KickResponse)
  return kickresponse_.GetNoArena();
}
void NewAuthResponse::set_kickresponse(const ::std::string& value) {
  set_has_kickresponse();
  kickresponse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewAuthResponse.KickResponse)
}
#if LANG_CXX11
void NewAuthResponse::set_kickresponse(::std::string&& value) {
  set_has_kickresponse();
  kickresponse_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewAuthResponse.KickResponse)
}
#endif
void NewAuthResponse::set_kickresponse(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_kickresponse();
  kickresponse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewAuthResponse.KickResponse)
}
void NewAuthResponse::set_kickresponse(const char* value, size_t size) {
  set_has_kickresponse();
  kickresponse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewAuthResponse.KickResponse)
}
::std::string* NewAuthResponse::mutable_kickresponse() {
  set_has_kickresponse();
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthResponse.KickResponse)
  return kickresponse_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewAuthResponse::release_kickresponse() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthResponse.KickResponse)
  clear_has_kickresponse();
  return kickresponse_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewAuthResponse::set_allocated_kickresponse(::std::string* kickresponse) {
  if (kickresponse != NULL) {
    set_has_kickresponse();
  } else {
    clear_has_kickresponse();
  }
  kickresponse_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kickresponse);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthResponse.KickResponse)
}

// optional string ApplyBetaUrl = 38;
bool NewAuthResponse::has_applybetaurl() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void NewAuthResponse::set_has_applybetaurl() {
  _has_bits_[0] |= 0x00000200u;
}
void NewAuthResponse::clear_has_applybetaurl() {
  _has_bits_[0] &= ~0x00000200u;
}
void NewAuthResponse::clear_applybetaurl() {
  applybetaurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_applybetaurl();
}
const ::std::string& NewAuthResponse::applybetaurl() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.ApplyBetaUrl)
  return applybetaurl_.GetNoArena();
}
void NewAuthResponse::set_applybetaurl(const ::std::string& value) {
  set_has_applybetaurl();
  applybetaurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewAuthResponse.ApplyBetaUrl)
}
#if LANG_CXX11
void NewAuthResponse::set_applybetaurl(::std::string&& value) {
  set_has_applybetaurl();
  applybetaurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewAuthResponse.ApplyBetaUrl)
}
#endif
void NewAuthResponse::set_applybetaurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_applybetaurl();
  applybetaurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewAuthResponse.ApplyBetaUrl)
}
void NewAuthResponse::set_applybetaurl(const char* value, size_t size) {
  set_has_applybetaurl();
  applybetaurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewAuthResponse.ApplyBetaUrl)
}
::std::string* NewAuthResponse::mutable_applybetaurl() {
  set_has_applybetaurl();
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthResponse.ApplyBetaUrl)
  return applybetaurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewAuthResponse::release_applybetaurl() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthResponse.ApplyBetaUrl)
  clear_has_applybetaurl();
  return applybetaurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewAuthResponse::set_allocated_applybetaurl(::std::string* applybetaurl) {
  if (applybetaurl != NULL) {
    set_has_applybetaurl();
  } else {
    clear_has_applybetaurl();
  }
  applybetaurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), applybetaurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthResponse.ApplyBetaUrl)
}

// optional string DeviceInfoXml = 39;
bool NewAuthResponse::has_deviceinfoxml() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void NewAuthResponse::set_has_deviceinfoxml() {
  _has_bits_[0] |= 0x00000400u;
}
void NewAuthResponse::clear_has_deviceinfoxml() {
  _has_bits_[0] &= ~0x00000400u;
}
void NewAuthResponse::clear_deviceinfoxml() {
  deviceinfoxml_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deviceinfoxml();
}
const ::std::string& NewAuthResponse::deviceinfoxml() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.DeviceInfoXml)
  return deviceinfoxml_.GetNoArena();
}
void NewAuthResponse::set_deviceinfoxml(const ::std::string& value) {
  set_has_deviceinfoxml();
  deviceinfoxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewAuthResponse.DeviceInfoXml)
}
#if LANG_CXX11
void NewAuthResponse::set_deviceinfoxml(::std::string&& value) {
  set_has_deviceinfoxml();
  deviceinfoxml_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewAuthResponse.DeviceInfoXml)
}
#endif
void NewAuthResponse::set_deviceinfoxml(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_deviceinfoxml();
  deviceinfoxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewAuthResponse.DeviceInfoXml)
}
void NewAuthResponse::set_deviceinfoxml(const char* value, size_t size) {
  set_has_deviceinfoxml();
  deviceinfoxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewAuthResponse.DeviceInfoXml)
}
::std::string* NewAuthResponse::mutable_deviceinfoxml() {
  set_has_deviceinfoxml();
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthResponse.DeviceInfoXml)
  return deviceinfoxml_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewAuthResponse::release_deviceinfoxml() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthResponse.DeviceInfoXml)
  clear_has_deviceinfoxml();
  return deviceinfoxml_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewAuthResponse::set_allocated_deviceinfoxml(::std::string* deviceinfoxml) {
  if (deviceinfoxml != NULL) {
    set_has_deviceinfoxml();
  } else {
    clear_has_deviceinfoxml();
  }
  deviceinfoxml_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceinfoxml);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthResponse.DeviceInfoXml)
}

// optional string SoftConfigXml = 40;
bool NewAuthResponse::has_softconfigxml() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void NewAuthResponse::set_has_softconfigxml() {
  _has_bits_[0] |= 0x00000800u;
}
void NewAuthResponse::clear_has_softconfigxml() {
  _has_bits_[0] &= ~0x00000800u;
}
void NewAuthResponse::clear_softconfigxml() {
  softconfigxml_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_softconfigxml();
}
const ::std::string& NewAuthResponse::softconfigxml() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.SoftConfigXml)
  return softconfigxml_.GetNoArena();
}
void NewAuthResponse::set_softconfigxml(const ::std::string& value) {
  set_has_softconfigxml();
  softconfigxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewAuthResponse.SoftConfigXml)
}
#if LANG_CXX11
void NewAuthResponse::set_softconfigxml(::std::string&& value) {
  set_has_softconfigxml();
  softconfigxml_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewAuthResponse.SoftConfigXml)
}
#endif
void NewAuthResponse::set_softconfigxml(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_softconfigxml();
  softconfigxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewAuthResponse.SoftConfigXml)
}
void NewAuthResponse::set_softconfigxml(const char* value, size_t size) {
  set_has_softconfigxml();
  softconfigxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewAuthResponse.SoftConfigXml)
}
::std::string* NewAuthResponse::mutable_softconfigxml() {
  set_has_softconfigxml();
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthResponse.SoftConfigXml)
  return softconfigxml_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewAuthResponse::release_softconfigxml() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthResponse.SoftConfigXml)
  clear_has_softconfigxml();
  return softconfigxml_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewAuthResponse::set_allocated_softconfigxml(::std::string* softconfigxml) {
  if (softconfigxml != NULL) {
    set_has_softconfigxml();
  } else {
    clear_has_softconfigxml();
  }
  softconfigxml_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), softconfigxml);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthResponse.SoftConfigXml)
}

// optional .micromsg.HostList NewHostList = 41;
bool NewAuthResponse::has_newhostlist() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void NewAuthResponse::set_has_newhostlist() {
  _has_bits_[1] |= 0x00000001u;
}
void NewAuthResponse::clear_has_newhostlist() {
  _has_bits_[1] &= ~0x00000001u;
}
void NewAuthResponse::clear_newhostlist() {
  if (newhostlist_ != NULL) newhostlist_->::micromsg::HostList::Clear();
  clear_has_newhostlist();
}
const ::micromsg::HostList& NewAuthResponse::newhostlist() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.NewHostList)
  return newhostlist_ != NULL ? *newhostlist_
                         : *::micromsg::HostList::internal_default_instance();
}
::micromsg::HostList* NewAuthResponse::mutable_newhostlist() {
  set_has_newhostlist();
  if (newhostlist_ == NULL) {
    newhostlist_ = new ::micromsg::HostList;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthResponse.NewHostList)
  return newhostlist_;
}
::micromsg::HostList* NewAuthResponse::release_newhostlist() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthResponse.NewHostList)
  clear_has_newhostlist();
  ::micromsg::HostList* temp = newhostlist_;
  newhostlist_ = NULL;
  return temp;
}
void NewAuthResponse::set_allocated_newhostlist(::micromsg::HostList* newhostlist) {
  delete newhostlist_;
  newhostlist_ = newhostlist;
  if (newhostlist) {
    set_has_newhostlist();
  } else {
    clear_has_newhostlist();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthResponse.NewHostList)
}

// optional string AuthTicket = 42;
bool NewAuthResponse::has_authticket() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void NewAuthResponse::set_has_authticket() {
  _has_bits_[0] |= 0x00001000u;
}
void NewAuthResponse::clear_has_authticket() {
  _has_bits_[0] &= ~0x00001000u;
}
void NewAuthResponse::clear_authticket() {
  authticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_authticket();
}
const ::std::string& NewAuthResponse::authticket() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.AuthTicket)
  return authticket_.GetNoArena();
}
void NewAuthResponse::set_authticket(const ::std::string& value) {
  set_has_authticket();
  authticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewAuthResponse.AuthTicket)
}
#if LANG_CXX11
void NewAuthResponse::set_authticket(::std::string&& value) {
  set_has_authticket();
  authticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewAuthResponse.AuthTicket)
}
#endif
void NewAuthResponse::set_authticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_authticket();
  authticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewAuthResponse.AuthTicket)
}
void NewAuthResponse::set_authticket(const char* value, size_t size) {
  set_has_authticket();
  authticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewAuthResponse.AuthTicket)
}
::std::string* NewAuthResponse::mutable_authticket() {
  set_has_authticket();
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthResponse.AuthTicket)
  return authticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewAuthResponse::release_authticket() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthResponse.AuthTicket)
  clear_has_authticket();
  return authticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewAuthResponse::set_allocated_authticket(::std::string* authticket) {
  if (authticket != NULL) {
    set_has_authticket();
  } else {
    clear_has_authticket();
  }
  authticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), authticket);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthResponse.AuthTicket)
}

// optional uint32 SafeDevice = 43;
bool NewAuthResponse::has_safedevice() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
void NewAuthResponse::set_has_safedevice() {
  _has_bits_[1] |= 0x00200000u;
}
void NewAuthResponse::clear_has_safedevice() {
  _has_bits_[1] &= ~0x00200000u;
}
void NewAuthResponse::clear_safedevice() {
  safedevice_ = 0u;
  clear_has_safedevice();
}
::google::protobuf::uint32 NewAuthResponse::safedevice() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.SafeDevice)
  return safedevice_;
}
void NewAuthResponse::set_safedevice(::google::protobuf::uint32 value) {
  set_has_safedevice();
  safedevice_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewAuthResponse.SafeDevice)
}

// optional uint32 ObsoleteItem1 = 44;
bool NewAuthResponse::has_obsoleteitem1() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
void NewAuthResponse::set_has_obsoleteitem1() {
  _has_bits_[1] |= 0x00400000u;
}
void NewAuthResponse::clear_has_obsoleteitem1() {
  _has_bits_[1] &= ~0x00400000u;
}
void NewAuthResponse::clear_obsoleteitem1() {
  obsoleteitem1_ = 0u;
  clear_has_obsoleteitem1();
}
::google::protobuf::uint32 NewAuthResponse::obsoleteitem1() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.ObsoleteItem1)
  return obsoleteitem1_;
}
void NewAuthResponse::set_obsoleteitem1(::google::protobuf::uint32 value) {
  set_has_obsoleteitem1();
  obsoleteitem1_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewAuthResponse.ObsoleteItem1)
}

// optional uint32 NeedSetEmailPwd = 45;
bool NewAuthResponse::has_needsetemailpwd() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
void NewAuthResponse::set_has_needsetemailpwd() {
  _has_bits_[1] |= 0x00800000u;
}
void NewAuthResponse::clear_has_needsetemailpwd() {
  _has_bits_[1] &= ~0x00800000u;
}
void NewAuthResponse::clear_needsetemailpwd() {
  needsetemailpwd_ = 0u;
  clear_has_needsetemailpwd();
}
::google::protobuf::uint32 NewAuthResponse::needsetemailpwd() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.NeedSetEmailPwd)
  return needsetemailpwd_;
}
void NewAuthResponse::set_needsetemailpwd(::google::protobuf::uint32 value) {
  set_has_needsetemailpwd();
  needsetemailpwd_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewAuthResponse.NeedSetEmailPwd)
}

// optional string HintMsg = 46;
bool NewAuthResponse::has_hintmsg() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void NewAuthResponse::set_has_hintmsg() {
  _has_bits_[0] |= 0x00002000u;
}
void NewAuthResponse::clear_has_hintmsg() {
  _has_bits_[0] &= ~0x00002000u;
}
void NewAuthResponse::clear_hintmsg() {
  hintmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hintmsg();
}
const ::std::string& NewAuthResponse::hintmsg() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.HintMsg)
  return hintmsg_.GetNoArena();
}
void NewAuthResponse::set_hintmsg(const ::std::string& value) {
  set_has_hintmsg();
  hintmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewAuthResponse.HintMsg)
}
#if LANG_CXX11
void NewAuthResponse::set_hintmsg(::std::string&& value) {
  set_has_hintmsg();
  hintmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewAuthResponse.HintMsg)
}
#endif
void NewAuthResponse::set_hintmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hintmsg();
  hintmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewAuthResponse.HintMsg)
}
void NewAuthResponse::set_hintmsg(const char* value, size_t size) {
  set_has_hintmsg();
  hintmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewAuthResponse.HintMsg)
}
::std::string* NewAuthResponse::mutable_hintmsg() {
  set_has_hintmsg();
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthResponse.HintMsg)
  return hintmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewAuthResponse::release_hintmsg() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthResponse.HintMsg)
  clear_has_hintmsg();
  return hintmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewAuthResponse::set_allocated_hintmsg(::std::string* hintmsg) {
  if (hintmsg != NULL) {
    set_has_hintmsg();
  } else {
    clear_has_hintmsg();
  }
  hintmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hintmsg);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthResponse.HintMsg)
}

// optional string AutoAuthTicket = 47;
bool NewAuthResponse::has_autoauthticket() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void NewAuthResponse::set_has_autoauthticket() {
  _has_bits_[0] |= 0x00004000u;
}
void NewAuthResponse::clear_has_autoauthticket() {
  _has_bits_[0] &= ~0x00004000u;
}
void NewAuthResponse::clear_autoauthticket() {
  autoauthticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_autoauthticket();
}
const ::std::string& NewAuthResponse::autoauthticket() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.AutoAuthTicket)
  return autoauthticket_.GetNoArena();
}
void NewAuthResponse::set_autoauthticket(const ::std::string& value) {
  set_has_autoauthticket();
  autoauthticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewAuthResponse.AutoAuthTicket)
}
#if LANG_CXX11
void NewAuthResponse::set_autoauthticket(::std::string&& value) {
  set_has_autoauthticket();
  autoauthticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewAuthResponse.AutoAuthTicket)
}
#endif
void NewAuthResponse::set_autoauthticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_autoauthticket();
  autoauthticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewAuthResponse.AutoAuthTicket)
}
void NewAuthResponse::set_autoauthticket(const char* value, size_t size) {
  set_has_autoauthticket();
  autoauthticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewAuthResponse.AutoAuthTicket)
}
::std::string* NewAuthResponse::mutable_autoauthticket() {
  set_has_autoauthticket();
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthResponse.AutoAuthTicket)
  return autoauthticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewAuthResponse::release_autoauthticket() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthResponse.AutoAuthTicket)
  clear_has_autoauthticket();
  return autoauthticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewAuthResponse::set_allocated_autoauthticket(::std::string* autoauthticket) {
  if (autoauthticket != NULL) {
    set_has_autoauthticket();
  } else {
    clear_has_autoauthticket();
  }
  autoauthticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), autoauthticket);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthResponse.AutoAuthTicket)
}

// optional .micromsg.CDNDnsInfo DnsInfo = 48;
bool NewAuthResponse::has_dnsinfo() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void NewAuthResponse::set_has_dnsinfo() {
  _has_bits_[1] |= 0x00000002u;
}
void NewAuthResponse::clear_has_dnsinfo() {
  _has_bits_[1] &= ~0x00000002u;
}
void NewAuthResponse::clear_dnsinfo() {
  if (dnsinfo_ != NULL) dnsinfo_->::micromsg::CDNDnsInfo::Clear();
  clear_has_dnsinfo();
}
const ::micromsg::CDNDnsInfo& NewAuthResponse::dnsinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.DnsInfo)
  return dnsinfo_ != NULL ? *dnsinfo_
                         : *::micromsg::CDNDnsInfo::internal_default_instance();
}
::micromsg::CDNDnsInfo* NewAuthResponse::mutable_dnsinfo() {
  set_has_dnsinfo();
  if (dnsinfo_ == NULL) {
    dnsinfo_ = new ::micromsg::CDNDnsInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthResponse.DnsInfo)
  return dnsinfo_;
}
::micromsg::CDNDnsInfo* NewAuthResponse::release_dnsinfo() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthResponse.DnsInfo)
  clear_has_dnsinfo();
  ::micromsg::CDNDnsInfo* temp = dnsinfo_;
  dnsinfo_ = NULL;
  return temp;
}
void NewAuthResponse::set_allocated_dnsinfo(::micromsg::CDNDnsInfo* dnsinfo) {
  delete dnsinfo_;
  dnsinfo_ = dnsinfo;
  if (dnsinfo) {
    set_has_dnsinfo();
  } else {
    clear_has_dnsinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthResponse.DnsInfo)
}

// optional uint32 NextAuthType = 49;
bool NewAuthResponse::has_nextauthtype() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
void NewAuthResponse::set_has_nextauthtype() {
  _has_bits_[1] |= 0x01000000u;
}
void NewAuthResponse::clear_has_nextauthtype() {
  _has_bits_[1] &= ~0x01000000u;
}
void NewAuthResponse::clear_nextauthtype() {
  nextauthtype_ = 0u;
  clear_has_nextauthtype();
}
::google::protobuf::uint32 NewAuthResponse::nextauthtype() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.NextAuthType)
  return nextauthtype_;
}
void NewAuthResponse::set_nextauthtype(::google::protobuf::uint32 value) {
  set_has_nextauthtype();
  nextauthtype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewAuthResponse.NextAuthType)
}

// optional .micromsg.SKBuiltinBuffer_t WTLoginRspBuff = 50;
bool NewAuthResponse::has_wtloginrspbuff() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void NewAuthResponse::set_has_wtloginrspbuff() {
  _has_bits_[1] |= 0x00000004u;
}
void NewAuthResponse::clear_has_wtloginrspbuff() {
  _has_bits_[1] &= ~0x00000004u;
}
void NewAuthResponse::clear_wtloginrspbuff() {
  if (wtloginrspbuff_ != NULL) wtloginrspbuff_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_wtloginrspbuff();
}
const ::micromsg::SKBuiltinBuffer_t& NewAuthResponse::wtloginrspbuff() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.WTLoginRspBuff)
  return wtloginrspbuff_ != NULL ? *wtloginrspbuff_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* NewAuthResponse::mutable_wtloginrspbuff() {
  set_has_wtloginrspbuff();
  if (wtloginrspbuff_ == NULL) {
    wtloginrspbuff_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthResponse.WTLoginRspBuff)
  return wtloginrspbuff_;
}
::micromsg::SKBuiltinBuffer_t* NewAuthResponse::release_wtloginrspbuff() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthResponse.WTLoginRspBuff)
  clear_has_wtloginrspbuff();
  ::micromsg::SKBuiltinBuffer_t* temp = wtloginrspbuff_;
  wtloginrspbuff_ = NULL;
  return temp;
}
void NewAuthResponse::set_allocated_wtloginrspbuff(::micromsg::SKBuiltinBuffer_t* wtloginrspbuff) {
  delete wtloginrspbuff_;
  wtloginrspbuff_ = wtloginrspbuff;
  if (wtloginrspbuff) {
    set_has_wtloginrspbuff();
  } else {
    clear_has_wtloginrspbuff();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthResponse.WTLoginRspBuff)
}

// optional .micromsg.ShowStyleKey ShowStyle = 51;
bool NewAuthResponse::has_showstyle() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void NewAuthResponse::set_has_showstyle() {
  _has_bits_[1] |= 0x00000008u;
}
void NewAuthResponse::clear_has_showstyle() {
  _has_bits_[1] &= ~0x00000008u;
}
void NewAuthResponse::clear_showstyle() {
  if (showstyle_ != NULL) showstyle_->::micromsg::ShowStyleKey::Clear();
  clear_has_showstyle();
}
const ::micromsg::ShowStyleKey& NewAuthResponse::showstyle() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.ShowStyle)
  return showstyle_ != NULL ? *showstyle_
                         : *::micromsg::ShowStyleKey::internal_default_instance();
}
::micromsg::ShowStyleKey* NewAuthResponse::mutable_showstyle() {
  set_has_showstyle();
  if (showstyle_ == NULL) {
    showstyle_ = new ::micromsg::ShowStyleKey;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthResponse.ShowStyle)
  return showstyle_;
}
::micromsg::ShowStyleKey* NewAuthResponse::release_showstyle() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthResponse.ShowStyle)
  clear_has_showstyle();
  ::micromsg::ShowStyleKey* temp = showstyle_;
  showstyle_ = NULL;
  return temp;
}
void NewAuthResponse::set_allocated_showstyle(::micromsg::ShowStyleKey* showstyle) {
  delete showstyle_;
  showstyle_ = showstyle;
  if (showstyle) {
    set_has_showstyle();
  } else {
    clear_has_showstyle();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthResponse.ShowStyle)
}

// optional .micromsg.SKBuiltinBuffer_t CliDBEncryptKey = 52;
bool NewAuthResponse::has_clidbencryptkey() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void NewAuthResponse::set_has_clidbencryptkey() {
  _has_bits_[1] |= 0x00000010u;
}
void NewAuthResponse::clear_has_clidbencryptkey() {
  _has_bits_[1] &= ~0x00000010u;
}
void NewAuthResponse::clear_clidbencryptkey() {
  if (clidbencryptkey_ != NULL) clidbencryptkey_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_clidbencryptkey();
}
const ::micromsg::SKBuiltinBuffer_t& NewAuthResponse::clidbencryptkey() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.CliDBEncryptKey)
  return clidbencryptkey_ != NULL ? *clidbencryptkey_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* NewAuthResponse::mutable_clidbencryptkey() {
  set_has_clidbencryptkey();
  if (clidbencryptkey_ == NULL) {
    clidbencryptkey_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthResponse.CliDBEncryptKey)
  return clidbencryptkey_;
}
::micromsg::SKBuiltinBuffer_t* NewAuthResponse::release_clidbencryptkey() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthResponse.CliDBEncryptKey)
  clear_has_clidbencryptkey();
  ::micromsg::SKBuiltinBuffer_t* temp = clidbencryptkey_;
  clidbencryptkey_ = NULL;
  return temp;
}
void NewAuthResponse::set_allocated_clidbencryptkey(::micromsg::SKBuiltinBuffer_t* clidbencryptkey) {
  delete clidbencryptkey_;
  clidbencryptkey_ = clidbencryptkey;
  if (clidbencryptkey) {
    set_has_clidbencryptkey();
  } else {
    clear_has_clidbencryptkey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthResponse.CliDBEncryptKey)
}

// optional .micromsg.SKBuiltinBuffer_t CliDBEncryptInfo = 53;
bool NewAuthResponse::has_clidbencryptinfo() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void NewAuthResponse::set_has_clidbencryptinfo() {
  _has_bits_[1] |= 0x00000020u;
}
void NewAuthResponse::clear_has_clidbencryptinfo() {
  _has_bits_[1] &= ~0x00000020u;
}
void NewAuthResponse::clear_clidbencryptinfo() {
  if (clidbencryptinfo_ != NULL) clidbencryptinfo_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_clidbencryptinfo();
}
const ::micromsg::SKBuiltinBuffer_t& NewAuthResponse::clidbencryptinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.CliDBEncryptInfo)
  return clidbencryptinfo_ != NULL ? *clidbencryptinfo_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* NewAuthResponse::mutable_clidbencryptinfo() {
  set_has_clidbencryptinfo();
  if (clidbencryptinfo_ == NULL) {
    clidbencryptinfo_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthResponse.CliDBEncryptInfo)
  return clidbencryptinfo_;
}
::micromsg::SKBuiltinBuffer_t* NewAuthResponse::release_clidbencryptinfo() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthResponse.CliDBEncryptInfo)
  clear_has_clidbencryptinfo();
  ::micromsg::SKBuiltinBuffer_t* temp = clidbencryptinfo_;
  clidbencryptinfo_ = NULL;
  return temp;
}
void NewAuthResponse::set_allocated_clidbencryptinfo(::micromsg::SKBuiltinBuffer_t* clidbencryptinfo) {
  delete clidbencryptinfo_;
  clidbencryptinfo_ = clidbencryptinfo;
  if (clidbencryptinfo) {
    set_has_clidbencryptinfo();
  } else {
    clear_has_clidbencryptinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthResponse.CliDBEncryptInfo)
}

// optional uint32 Flag = 54;
bool NewAuthResponse::has_flag() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
void NewAuthResponse::set_has_flag() {
  _has_bits_[1] |= 0x02000000u;
}
void NewAuthResponse::clear_has_flag() {
  _has_bits_[1] &= ~0x02000000u;
}
void NewAuthResponse::clear_flag() {
  flag_ = 0u;
  clear_has_flag();
}
::google::protobuf::uint32 NewAuthResponse::flag() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.Flag)
  return flag_;
}
void NewAuthResponse::set_flag(::google::protobuf::uint32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewAuthResponse.Flag)
}

// optional .micromsg.CDNDnsInfo SnsDnsInfo = 55;
bool NewAuthResponse::has_snsdnsinfo() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void NewAuthResponse::set_has_snsdnsinfo() {
  _has_bits_[1] |= 0x00000040u;
}
void NewAuthResponse::clear_has_snsdnsinfo() {
  _has_bits_[1] &= ~0x00000040u;
}
void NewAuthResponse::clear_snsdnsinfo() {
  if (snsdnsinfo_ != NULL) snsdnsinfo_->::micromsg::CDNDnsInfo::Clear();
  clear_has_snsdnsinfo();
}
const ::micromsg::CDNDnsInfo& NewAuthResponse::snsdnsinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.SnsDnsInfo)
  return snsdnsinfo_ != NULL ? *snsdnsinfo_
                         : *::micromsg::CDNDnsInfo::internal_default_instance();
}
::micromsg::CDNDnsInfo* NewAuthResponse::mutable_snsdnsinfo() {
  set_has_snsdnsinfo();
  if (snsdnsinfo_ == NULL) {
    snsdnsinfo_ = new ::micromsg::CDNDnsInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthResponse.SnsDnsInfo)
  return snsdnsinfo_;
}
::micromsg::CDNDnsInfo* NewAuthResponse::release_snsdnsinfo() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthResponse.SnsDnsInfo)
  clear_has_snsdnsinfo();
  ::micromsg::CDNDnsInfo* temp = snsdnsinfo_;
  snsdnsinfo_ = NULL;
  return temp;
}
void NewAuthResponse::set_allocated_snsdnsinfo(::micromsg::CDNDnsInfo* snsdnsinfo) {
  delete snsdnsinfo_;
  snsdnsinfo_ = snsdnsinfo;
  if (snsdnsinfo) {
    set_has_snsdnsinfo();
  } else {
    clear_has_snsdnsinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthResponse.SnsDnsInfo)
}

// optional .micromsg.CDNDnsInfo AppDnsInfo = 56;
bool NewAuthResponse::has_appdnsinfo() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void NewAuthResponse::set_has_appdnsinfo() {
  _has_bits_[1] |= 0x00000080u;
}
void NewAuthResponse::clear_has_appdnsinfo() {
  _has_bits_[1] &= ~0x00000080u;
}
void NewAuthResponse::clear_appdnsinfo() {
  if (appdnsinfo_ != NULL) appdnsinfo_->::micromsg::CDNDnsInfo::Clear();
  clear_has_appdnsinfo();
}
const ::micromsg::CDNDnsInfo& NewAuthResponse::appdnsinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.AppDnsInfo)
  return appdnsinfo_ != NULL ? *appdnsinfo_
                         : *::micromsg::CDNDnsInfo::internal_default_instance();
}
::micromsg::CDNDnsInfo* NewAuthResponse::mutable_appdnsinfo() {
  set_has_appdnsinfo();
  if (appdnsinfo_ == NULL) {
    appdnsinfo_ = new ::micromsg::CDNDnsInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthResponse.AppDnsInfo)
  return appdnsinfo_;
}
::micromsg::CDNDnsInfo* NewAuthResponse::release_appdnsinfo() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthResponse.AppDnsInfo)
  clear_has_appdnsinfo();
  ::micromsg::CDNDnsInfo* temp = appdnsinfo_;
  appdnsinfo_ = NULL;
  return temp;
}
void NewAuthResponse::set_allocated_appdnsinfo(::micromsg::CDNDnsInfo* appdnsinfo) {
  delete appdnsinfo_;
  appdnsinfo_ = appdnsinfo;
  if (appdnsinfo) {
    set_has_appdnsinfo();
  } else {
    clear_has_appdnsinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthResponse.AppDnsInfo)
}

// optional string VerifySignature = 57;
bool NewAuthResponse::has_verifysignature() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void NewAuthResponse::set_has_verifysignature() {
  _has_bits_[0] |= 0x00008000u;
}
void NewAuthResponse::clear_has_verifysignature() {
  _has_bits_[0] &= ~0x00008000u;
}
void NewAuthResponse::clear_verifysignature() {
  verifysignature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verifysignature();
}
const ::std::string& NewAuthResponse::verifysignature() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.VerifySignature)
  return verifysignature_.GetNoArena();
}
void NewAuthResponse::set_verifysignature(const ::std::string& value) {
  set_has_verifysignature();
  verifysignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewAuthResponse.VerifySignature)
}
#if LANG_CXX11
void NewAuthResponse::set_verifysignature(::std::string&& value) {
  set_has_verifysignature();
  verifysignature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewAuthResponse.VerifySignature)
}
#endif
void NewAuthResponse::set_verifysignature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verifysignature();
  verifysignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewAuthResponse.VerifySignature)
}
void NewAuthResponse::set_verifysignature(const char* value, size_t size) {
  set_has_verifysignature();
  verifysignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewAuthResponse.VerifySignature)
}
::std::string* NewAuthResponse::mutable_verifysignature() {
  set_has_verifysignature();
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthResponse.VerifySignature)
  return verifysignature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewAuthResponse::release_verifysignature() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthResponse.VerifySignature)
  clear_has_verifysignature();
  return verifysignature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewAuthResponse::set_allocated_verifysignature(::std::string* verifysignature) {
  if (verifysignature != NULL) {
    set_has_verifysignature();
  } else {
    clear_has_verifysignature();
  }
  verifysignature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifysignature);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthResponse.VerifySignature)
}

// optional .micromsg.SKBuiltinBuffer_t VerifyBuff = 58;
bool NewAuthResponse::has_verifybuff() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void NewAuthResponse::set_has_verifybuff() {
  _has_bits_[1] |= 0x00000100u;
}
void NewAuthResponse::clear_has_verifybuff() {
  _has_bits_[1] &= ~0x00000100u;
}
void NewAuthResponse::clear_verifybuff() {
  if (verifybuff_ != NULL) verifybuff_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_verifybuff();
}
const ::micromsg::SKBuiltinBuffer_t& NewAuthResponse::verifybuff() const {
  // @@protoc_insertion_point(field_get:micromsg.NewAuthResponse.VerifyBuff)
  return verifybuff_ != NULL ? *verifybuff_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* NewAuthResponse::mutable_verifybuff() {
  set_has_verifybuff();
  if (verifybuff_ == NULL) {
    verifybuff_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewAuthResponse.VerifyBuff)
  return verifybuff_;
}
::micromsg::SKBuiltinBuffer_t* NewAuthResponse::release_verifybuff() {
  // @@protoc_insertion_point(field_release:micromsg.NewAuthResponse.VerifyBuff)
  clear_has_verifybuff();
  ::micromsg::SKBuiltinBuffer_t* temp = verifybuff_;
  verifybuff_ = NULL;
  return temp;
}
void NewAuthResponse::set_allocated_verifybuff(::micromsg::SKBuiltinBuffer_t* verifybuff) {
  delete verifybuff_;
  verifybuff_ = verifybuff;
  if (verifybuff) {
    set_has_verifybuff();
  } else {
    clear_has_verifybuff();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewAuthResponse.VerifyBuff)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BindGoogleContactRequest::kBaseRequestFieldNumber;
const int BindGoogleContactRequest::kOpcodeFieldNumber;
const int BindGoogleContactRequest::kGoogleContactNameFieldNumber;
const int BindGoogleContactRequest::kForceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BindGoogleContactRequest::BindGoogleContactRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BindGoogleContactRequest)
}
BindGoogleContactRequest::BindGoogleContactRequest(const BindGoogleContactRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  googlecontactname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_googlecontactname()) {
    googlecontactname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.googlecontactname_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&opcode_, &from.opcode_,
    reinterpret_cast<char*>(&force_) -
    reinterpret_cast<char*>(&opcode_) + sizeof(force_));
  // @@protoc_insertion_point(copy_constructor:micromsg.BindGoogleContactRequest)
}

void BindGoogleContactRequest::SharedCtor() {
  _cached_size_ = 0;
  googlecontactname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&force_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(force_));
}

BindGoogleContactRequest::~BindGoogleContactRequest() {
  // @@protoc_insertion_point(destructor:micromsg.BindGoogleContactRequest)
  SharedDtor();
}

void BindGoogleContactRequest::SharedDtor() {
  googlecontactname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void BindGoogleContactRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BindGoogleContactRequest::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BindGoogleContactRequest& BindGoogleContactRequest::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

BindGoogleContactRequest* BindGoogleContactRequest::New(::google::protobuf::Arena* arena) const {
  BindGoogleContactRequest* n = new BindGoogleContactRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BindGoogleContactRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BindGoogleContactRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_googlecontactname()) {
      GOOGLE_DCHECK(!googlecontactname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*googlecontactname_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&opcode_, 0, reinterpret_cast<char*>(&force_) -
      reinterpret_cast<char*>(&opcode_) + sizeof(force_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BindGoogleContactRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BindGoogleContactRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Opcode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_opcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string GoogleContactName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_googlecontactname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->googlecontactname().data(), this->googlecontactname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BindGoogleContactRequest.GoogleContactName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Force = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_force();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &force_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BindGoogleContactRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BindGoogleContactRequest)
  return false;
#undef DO_
}

void BindGoogleContactRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BindGoogleContactRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 Opcode = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->opcode(), output);
  }

  // optional string GoogleContactName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->googlecontactname().data(), this->googlecontactname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindGoogleContactRequest.GoogleContactName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->googlecontactname(), output);
  }

  // required uint32 Force = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->force(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BindGoogleContactRequest)
}

::google::protobuf::uint8* BindGoogleContactRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BindGoogleContactRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 Opcode = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->opcode(), target);
  }

  // optional string GoogleContactName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->googlecontactname().data(), this->googlecontactname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindGoogleContactRequest.GoogleContactName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->googlecontactname(), target);
  }

  // required uint32 Force = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->force(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BindGoogleContactRequest)
  return target;
}

size_t BindGoogleContactRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.BindGoogleContactRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_opcode()) {
    // required uint32 Opcode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());
  }

  if (has_force()) {
    // required uint32 Force = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->force());
  }

  return total_size;
}
size_t BindGoogleContactRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BindGoogleContactRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 Opcode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());

    // required uint32 Force = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->force());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string GoogleContactName = 3;
  if (has_googlecontactname()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->googlecontactname());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BindGoogleContactRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BindGoogleContactRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BindGoogleContactRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BindGoogleContactRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BindGoogleContactRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BindGoogleContactRequest)
    MergeFrom(*source);
  }
}

void BindGoogleContactRequest::MergeFrom(const BindGoogleContactRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BindGoogleContactRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_googlecontactname();
      googlecontactname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.googlecontactname_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000004u) {
      opcode_ = from.opcode_;
    }
    if (cached_has_bits & 0x00000008u) {
      force_ = from.force_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BindGoogleContactRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BindGoogleContactRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BindGoogleContactRequest::CopyFrom(const BindGoogleContactRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BindGoogleContactRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BindGoogleContactRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void BindGoogleContactRequest::Swap(BindGoogleContactRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BindGoogleContactRequest::InternalSwap(BindGoogleContactRequest* other) {
  googlecontactname_.Swap(&other->googlecontactname_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(opcode_, other->opcode_);
  std::swap(force_, other->force_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BindGoogleContactRequest::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BindGoogleContactRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool BindGoogleContactRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BindGoogleContactRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void BindGoogleContactRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void BindGoogleContactRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& BindGoogleContactRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.BindGoogleContactRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* BindGoogleContactRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BindGoogleContactRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* BindGoogleContactRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.BindGoogleContactRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void BindGoogleContactRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindGoogleContactRequest.BaseRequest)
}

// required uint32 Opcode = 2;
bool BindGoogleContactRequest::has_opcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BindGoogleContactRequest::set_has_opcode() {
  _has_bits_[0] |= 0x00000004u;
}
void BindGoogleContactRequest::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000004u;
}
void BindGoogleContactRequest::clear_opcode() {
  opcode_ = 0u;
  clear_has_opcode();
}
::google::protobuf::uint32 BindGoogleContactRequest::opcode() const {
  // @@protoc_insertion_point(field_get:micromsg.BindGoogleContactRequest.Opcode)
  return opcode_;
}
void BindGoogleContactRequest::set_opcode(::google::protobuf::uint32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BindGoogleContactRequest.Opcode)
}

// optional string GoogleContactName = 3;
bool BindGoogleContactRequest::has_googlecontactname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BindGoogleContactRequest::set_has_googlecontactname() {
  _has_bits_[0] |= 0x00000001u;
}
void BindGoogleContactRequest::clear_has_googlecontactname() {
  _has_bits_[0] &= ~0x00000001u;
}
void BindGoogleContactRequest::clear_googlecontactname() {
  googlecontactname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_googlecontactname();
}
const ::std::string& BindGoogleContactRequest::googlecontactname() const {
  // @@protoc_insertion_point(field_get:micromsg.BindGoogleContactRequest.GoogleContactName)
  return googlecontactname_.GetNoArena();
}
void BindGoogleContactRequest::set_googlecontactname(const ::std::string& value) {
  set_has_googlecontactname();
  googlecontactname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BindGoogleContactRequest.GoogleContactName)
}
#if LANG_CXX11
void BindGoogleContactRequest::set_googlecontactname(::std::string&& value) {
  set_has_googlecontactname();
  googlecontactname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BindGoogleContactRequest.GoogleContactName)
}
#endif
void BindGoogleContactRequest::set_googlecontactname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_googlecontactname();
  googlecontactname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BindGoogleContactRequest.GoogleContactName)
}
void BindGoogleContactRequest::set_googlecontactname(const char* value, size_t size) {
  set_has_googlecontactname();
  googlecontactname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BindGoogleContactRequest.GoogleContactName)
}
::std::string* BindGoogleContactRequest::mutable_googlecontactname() {
  set_has_googlecontactname();
  // @@protoc_insertion_point(field_mutable:micromsg.BindGoogleContactRequest.GoogleContactName)
  return googlecontactname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BindGoogleContactRequest::release_googlecontactname() {
  // @@protoc_insertion_point(field_release:micromsg.BindGoogleContactRequest.GoogleContactName)
  clear_has_googlecontactname();
  return googlecontactname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BindGoogleContactRequest::set_allocated_googlecontactname(::std::string* googlecontactname) {
  if (googlecontactname != NULL) {
    set_has_googlecontactname();
  } else {
    clear_has_googlecontactname();
  }
  googlecontactname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), googlecontactname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindGoogleContactRequest.GoogleContactName)
}

// required uint32 Force = 4;
bool BindGoogleContactRequest::has_force() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BindGoogleContactRequest::set_has_force() {
  _has_bits_[0] |= 0x00000008u;
}
void BindGoogleContactRequest::clear_has_force() {
  _has_bits_[0] &= ~0x00000008u;
}
void BindGoogleContactRequest::clear_force() {
  force_ = 0u;
  clear_has_force();
}
::google::protobuf::uint32 BindGoogleContactRequest::force() const {
  // @@protoc_insertion_point(field_get:micromsg.BindGoogleContactRequest.Force)
  return force_;
}
void BindGoogleContactRequest::set_force(::google::protobuf::uint32 value) {
  set_has_force();
  force_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BindGoogleContactRequest.Force)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BindGoogleContactResponse::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BindGoogleContactResponse::BindGoogleContactResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BindGoogleContactResponse)
}
BindGoogleContactResponse::BindGoogleContactResponse(const BindGoogleContactResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.BindGoogleContactResponse)
}

void BindGoogleContactResponse::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

BindGoogleContactResponse::~BindGoogleContactResponse() {
  // @@protoc_insertion_point(destructor:micromsg.BindGoogleContactResponse)
  SharedDtor();
}

void BindGoogleContactResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void BindGoogleContactResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BindGoogleContactResponse::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BindGoogleContactResponse& BindGoogleContactResponse::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

BindGoogleContactResponse* BindGoogleContactResponse::New(::google::protobuf::Arena* arena) const {
  BindGoogleContactResponse* n = new BindGoogleContactResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BindGoogleContactResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BindGoogleContactResponse)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BindGoogleContactResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BindGoogleContactResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BindGoogleContactResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BindGoogleContactResponse)
  return false;
#undef DO_
}

void BindGoogleContactResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BindGoogleContactResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BindGoogleContactResponse)
}

::google::protobuf::uint8* BindGoogleContactResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BindGoogleContactResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BindGoogleContactResponse)
  return target;
}

size_t BindGoogleContactResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BindGoogleContactResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BindGoogleContactResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BindGoogleContactResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BindGoogleContactResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BindGoogleContactResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BindGoogleContactResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BindGoogleContactResponse)
    MergeFrom(*source);
  }
}

void BindGoogleContactResponse::MergeFrom(const BindGoogleContactResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BindGoogleContactResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void BindGoogleContactResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BindGoogleContactResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BindGoogleContactResponse::CopyFrom(const BindGoogleContactResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BindGoogleContactResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BindGoogleContactResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void BindGoogleContactResponse::Swap(BindGoogleContactResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BindGoogleContactResponse::InternalSwap(BindGoogleContactResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BindGoogleContactResponse::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BindGoogleContactResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool BindGoogleContactResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BindGoogleContactResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void BindGoogleContactResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void BindGoogleContactResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& BindGoogleContactResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.BindGoogleContactResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* BindGoogleContactResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BindGoogleContactResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* BindGoogleContactResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.BindGoogleContactResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void BindGoogleContactResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindGoogleContactResponse.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BindLinkedinContactRequest::kBaseRequestFieldNumber;
const int BindLinkedinContactRequest::kOpcodeFieldNumber;
const int BindLinkedinContactRequest::kVisibleFieldNumber;
const int BindLinkedinContactRequest::kLinkedinMemberIDFieldNumber;
const int BindLinkedinContactRequest::kLinkedinNameFieldNumber;
const int BindLinkedinContactRequest::kLinkedinPublicUrlFieldNumber;
const int BindLinkedinContactRequest::kTimestampFieldNumber;
const int BindLinkedinContactRequest::kNounceFieldNumber;
const int BindLinkedinContactRequest::kLinkedinSignatureFieldNumber;
const int BindLinkedinContactRequest::kLinkedinReturnSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BindLinkedinContactRequest::BindLinkedinContactRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BindLinkedinContactRequest)
}
BindLinkedinContactRequest::BindLinkedinContactRequest(const BindLinkedinContactRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  linkedinmemberid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_linkedinmemberid()) {
    linkedinmemberid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.linkedinmemberid_);
  }
  linkedinname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_linkedinname()) {
    linkedinname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.linkedinname_);
  }
  linkedinpublicurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_linkedinpublicurl()) {
    linkedinpublicurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.linkedinpublicurl_);
  }
  timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_timestamp()) {
    timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
  }
  nounce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nounce()) {
    nounce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nounce_);
  }
  linkedinsignature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_linkedinsignature()) {
    linkedinsignature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.linkedinsignature_);
  }
  linkedinreturnsignature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_linkedinreturnsignature()) {
    linkedinreturnsignature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.linkedinreturnsignature_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&opcode_, &from.opcode_,
    reinterpret_cast<char*>(&visible_) -
    reinterpret_cast<char*>(&opcode_) + sizeof(visible_));
  // @@protoc_insertion_point(copy_constructor:micromsg.BindLinkedinContactRequest)
}

void BindLinkedinContactRequest::SharedCtor() {
  _cached_size_ = 0;
  linkedinmemberid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  linkedinname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  linkedinpublicurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nounce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  linkedinsignature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  linkedinreturnsignature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&visible_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(visible_));
}

BindLinkedinContactRequest::~BindLinkedinContactRequest() {
  // @@protoc_insertion_point(destructor:micromsg.BindLinkedinContactRequest)
  SharedDtor();
}

void BindLinkedinContactRequest::SharedDtor() {
  linkedinmemberid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  linkedinname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  linkedinpublicurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nounce_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  linkedinsignature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  linkedinreturnsignature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void BindLinkedinContactRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BindLinkedinContactRequest::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BindLinkedinContactRequest& BindLinkedinContactRequest::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

BindLinkedinContactRequest* BindLinkedinContactRequest::New(::google::protobuf::Arena* arena) const {
  BindLinkedinContactRequest* n = new BindLinkedinContactRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BindLinkedinContactRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BindLinkedinContactRequest)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_linkedinmemberid()) {
      GOOGLE_DCHECK(!linkedinmemberid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*linkedinmemberid_.UnsafeRawStringPointer())->clear();
    }
    if (has_linkedinname()) {
      GOOGLE_DCHECK(!linkedinname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*linkedinname_.UnsafeRawStringPointer())->clear();
    }
    if (has_linkedinpublicurl()) {
      GOOGLE_DCHECK(!linkedinpublicurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*linkedinpublicurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_timestamp()) {
      GOOGLE_DCHECK(!timestamp_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*timestamp_.UnsafeRawStringPointer())->clear();
    }
    if (has_nounce()) {
      GOOGLE_DCHECK(!nounce_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*nounce_.UnsafeRawStringPointer())->clear();
    }
    if (has_linkedinsignature()) {
      GOOGLE_DCHECK(!linkedinsignature_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*linkedinsignature_.UnsafeRawStringPointer())->clear();
    }
    if (has_linkedinreturnsignature()) {
      GOOGLE_DCHECK(!linkedinreturnsignature_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*linkedinreturnsignature_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&opcode_, 0, reinterpret_cast<char*>(&visible_) -
      reinterpret_cast<char*>(&opcode_) + sizeof(visible_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BindLinkedinContactRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BindLinkedinContactRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Opcode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_opcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Visible = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_visible();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &visible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string LinkedinMemberID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_linkedinmemberid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->linkedinmemberid().data(), this->linkedinmemberid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BindLinkedinContactRequest.LinkedinMemberID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string LinkedinName = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_linkedinname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->linkedinname().data(), this->linkedinname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BindLinkedinContactRequest.LinkedinName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string LinkedinPublicUrl = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_linkedinpublicurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->linkedinpublicurl().data(), this->linkedinpublicurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BindLinkedinContactRequest.LinkedinPublicUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Timestamp = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BindLinkedinContactRequest.Timestamp");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Nounce = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nounce()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nounce().data(), this->nounce().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BindLinkedinContactRequest.Nounce");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string LinkedinSignature = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_linkedinsignature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->linkedinsignature().data(), this->linkedinsignature().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BindLinkedinContactRequest.LinkedinSignature");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string LinkedinReturnSignature = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_linkedinreturnsignature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->linkedinreturnsignature().data(), this->linkedinreturnsignature().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BindLinkedinContactRequest.LinkedinReturnSignature");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BindLinkedinContactRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BindLinkedinContactRequest)
  return false;
#undef DO_
}

void BindLinkedinContactRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BindLinkedinContactRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 Opcode = 2;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->opcode(), output);
  }

  // required uint32 Visible = 3;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->visible(), output);
  }

  // optional string LinkedinMemberID = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->linkedinmemberid().data(), this->linkedinmemberid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindLinkedinContactRequest.LinkedinMemberID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->linkedinmemberid(), output);
  }

  // optional string LinkedinName = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->linkedinname().data(), this->linkedinname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindLinkedinContactRequest.LinkedinName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->linkedinname(), output);
  }

  // optional string LinkedinPublicUrl = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->linkedinpublicurl().data(), this->linkedinpublicurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindLinkedinContactRequest.LinkedinPublicUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->linkedinpublicurl(), output);
  }

  // optional string Timestamp = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindLinkedinContactRequest.Timestamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->timestamp(), output);
  }

  // optional string Nounce = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nounce().data(), this->nounce().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindLinkedinContactRequest.Nounce");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->nounce(), output);
  }

  // optional string LinkedinSignature = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->linkedinsignature().data(), this->linkedinsignature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindLinkedinContactRequest.LinkedinSignature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->linkedinsignature(), output);
  }

  // optional string LinkedinReturnSignature = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->linkedinreturnsignature().data(), this->linkedinreturnsignature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindLinkedinContactRequest.LinkedinReturnSignature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->linkedinreturnsignature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BindLinkedinContactRequest)
}

::google::protobuf::uint8* BindLinkedinContactRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BindLinkedinContactRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 Opcode = 2;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->opcode(), target);
  }

  // required uint32 Visible = 3;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->visible(), target);
  }

  // optional string LinkedinMemberID = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->linkedinmemberid().data(), this->linkedinmemberid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindLinkedinContactRequest.LinkedinMemberID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->linkedinmemberid(), target);
  }

  // optional string LinkedinName = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->linkedinname().data(), this->linkedinname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindLinkedinContactRequest.LinkedinName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->linkedinname(), target);
  }

  // optional string LinkedinPublicUrl = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->linkedinpublicurl().data(), this->linkedinpublicurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindLinkedinContactRequest.LinkedinPublicUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->linkedinpublicurl(), target);
  }

  // optional string Timestamp = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindLinkedinContactRequest.Timestamp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->timestamp(), target);
  }

  // optional string Nounce = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nounce().data(), this->nounce().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindLinkedinContactRequest.Nounce");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->nounce(), target);
  }

  // optional string LinkedinSignature = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->linkedinsignature().data(), this->linkedinsignature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindLinkedinContactRequest.LinkedinSignature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->linkedinsignature(), target);
  }

  // optional string LinkedinReturnSignature = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->linkedinreturnsignature().data(), this->linkedinreturnsignature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindLinkedinContactRequest.LinkedinReturnSignature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->linkedinreturnsignature(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BindLinkedinContactRequest)
  return target;
}

size_t BindLinkedinContactRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.BindLinkedinContactRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_opcode()) {
    // required uint32 Opcode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());
  }

  if (has_visible()) {
    // required uint32 Visible = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->visible());
  }

  return total_size;
}
size_t BindLinkedinContactRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BindLinkedinContactRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000380) ^ 0x00000380) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 Opcode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());

    // required uint32 Visible = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->visible());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string LinkedinMemberID = 4;
    if (has_linkedinmemberid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->linkedinmemberid());
    }

    // optional string LinkedinName = 5;
    if (has_linkedinname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->linkedinname());
    }

    // optional string LinkedinPublicUrl = 6;
    if (has_linkedinpublicurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->linkedinpublicurl());
    }

    // optional string Timestamp = 7;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }

    // optional string Nounce = 8;
    if (has_nounce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nounce());
    }

    // optional string LinkedinSignature = 9;
    if (has_linkedinsignature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->linkedinsignature());
    }

    // optional string LinkedinReturnSignature = 10;
    if (has_linkedinreturnsignature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->linkedinreturnsignature());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BindLinkedinContactRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BindLinkedinContactRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BindLinkedinContactRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BindLinkedinContactRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BindLinkedinContactRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BindLinkedinContactRequest)
    MergeFrom(*source);
  }
}

void BindLinkedinContactRequest::MergeFrom(const BindLinkedinContactRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BindLinkedinContactRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_linkedinmemberid();
      linkedinmemberid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.linkedinmemberid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_linkedinname();
      linkedinname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.linkedinname_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_linkedinpublicurl();
      linkedinpublicurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.linkedinpublicurl_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_timestamp();
      timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_nounce();
      nounce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nounce_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_linkedinsignature();
      linkedinsignature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.linkedinsignature_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_linkedinreturnsignature();
      linkedinreturnsignature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.linkedinreturnsignature_);
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      opcode_ = from.opcode_;
    }
    if (cached_has_bits & 0x00000200u) {
      visible_ = from.visible_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BindLinkedinContactRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BindLinkedinContactRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BindLinkedinContactRequest::CopyFrom(const BindLinkedinContactRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BindLinkedinContactRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BindLinkedinContactRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000380) != 0x00000380) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void BindLinkedinContactRequest::Swap(BindLinkedinContactRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BindLinkedinContactRequest::InternalSwap(BindLinkedinContactRequest* other) {
  linkedinmemberid_.Swap(&other->linkedinmemberid_);
  linkedinname_.Swap(&other->linkedinname_);
  linkedinpublicurl_.Swap(&other->linkedinpublicurl_);
  timestamp_.Swap(&other->timestamp_);
  nounce_.Swap(&other->nounce_);
  linkedinsignature_.Swap(&other->linkedinsignature_);
  linkedinreturnsignature_.Swap(&other->linkedinreturnsignature_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(opcode_, other->opcode_);
  std::swap(visible_, other->visible_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BindLinkedinContactRequest::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BindLinkedinContactRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool BindLinkedinContactRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BindLinkedinContactRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000080u;
}
void BindLinkedinContactRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000080u;
}
void BindLinkedinContactRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& BindLinkedinContactRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.BindLinkedinContactRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* BindLinkedinContactRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BindLinkedinContactRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* BindLinkedinContactRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.BindLinkedinContactRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void BindLinkedinContactRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindLinkedinContactRequest.BaseRequest)
}

// required uint32 Opcode = 2;
bool BindLinkedinContactRequest::has_opcode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void BindLinkedinContactRequest::set_has_opcode() {
  _has_bits_[0] |= 0x00000100u;
}
void BindLinkedinContactRequest::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000100u;
}
void BindLinkedinContactRequest::clear_opcode() {
  opcode_ = 0u;
  clear_has_opcode();
}
::google::protobuf::uint32 BindLinkedinContactRequest::opcode() const {
  // @@protoc_insertion_point(field_get:micromsg.BindLinkedinContactRequest.Opcode)
  return opcode_;
}
void BindLinkedinContactRequest::set_opcode(::google::protobuf::uint32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BindLinkedinContactRequest.Opcode)
}

// required uint32 Visible = 3;
bool BindLinkedinContactRequest::has_visible() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void BindLinkedinContactRequest::set_has_visible() {
  _has_bits_[0] |= 0x00000200u;
}
void BindLinkedinContactRequest::clear_has_visible() {
  _has_bits_[0] &= ~0x00000200u;
}
void BindLinkedinContactRequest::clear_visible() {
  visible_ = 0u;
  clear_has_visible();
}
::google::protobuf::uint32 BindLinkedinContactRequest::visible() const {
  // @@protoc_insertion_point(field_get:micromsg.BindLinkedinContactRequest.Visible)
  return visible_;
}
void BindLinkedinContactRequest::set_visible(::google::protobuf::uint32 value) {
  set_has_visible();
  visible_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BindLinkedinContactRequest.Visible)
}

// optional string LinkedinMemberID = 4;
bool BindLinkedinContactRequest::has_linkedinmemberid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BindLinkedinContactRequest::set_has_linkedinmemberid() {
  _has_bits_[0] |= 0x00000001u;
}
void BindLinkedinContactRequest::clear_has_linkedinmemberid() {
  _has_bits_[0] &= ~0x00000001u;
}
void BindLinkedinContactRequest::clear_linkedinmemberid() {
  linkedinmemberid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_linkedinmemberid();
}
const ::std::string& BindLinkedinContactRequest::linkedinmemberid() const {
  // @@protoc_insertion_point(field_get:micromsg.BindLinkedinContactRequest.LinkedinMemberID)
  return linkedinmemberid_.GetNoArena();
}
void BindLinkedinContactRequest::set_linkedinmemberid(const ::std::string& value) {
  set_has_linkedinmemberid();
  linkedinmemberid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BindLinkedinContactRequest.LinkedinMemberID)
}
#if LANG_CXX11
void BindLinkedinContactRequest::set_linkedinmemberid(::std::string&& value) {
  set_has_linkedinmemberid();
  linkedinmemberid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BindLinkedinContactRequest.LinkedinMemberID)
}
#endif
void BindLinkedinContactRequest::set_linkedinmemberid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_linkedinmemberid();
  linkedinmemberid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BindLinkedinContactRequest.LinkedinMemberID)
}
void BindLinkedinContactRequest::set_linkedinmemberid(const char* value, size_t size) {
  set_has_linkedinmemberid();
  linkedinmemberid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BindLinkedinContactRequest.LinkedinMemberID)
}
::std::string* BindLinkedinContactRequest::mutable_linkedinmemberid() {
  set_has_linkedinmemberid();
  // @@protoc_insertion_point(field_mutable:micromsg.BindLinkedinContactRequest.LinkedinMemberID)
  return linkedinmemberid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BindLinkedinContactRequest::release_linkedinmemberid() {
  // @@protoc_insertion_point(field_release:micromsg.BindLinkedinContactRequest.LinkedinMemberID)
  clear_has_linkedinmemberid();
  return linkedinmemberid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BindLinkedinContactRequest::set_allocated_linkedinmemberid(::std::string* linkedinmemberid) {
  if (linkedinmemberid != NULL) {
    set_has_linkedinmemberid();
  } else {
    clear_has_linkedinmemberid();
  }
  linkedinmemberid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), linkedinmemberid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindLinkedinContactRequest.LinkedinMemberID)
}

// optional string LinkedinName = 5;
bool BindLinkedinContactRequest::has_linkedinname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BindLinkedinContactRequest::set_has_linkedinname() {
  _has_bits_[0] |= 0x00000002u;
}
void BindLinkedinContactRequest::clear_has_linkedinname() {
  _has_bits_[0] &= ~0x00000002u;
}
void BindLinkedinContactRequest::clear_linkedinname() {
  linkedinname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_linkedinname();
}
const ::std::string& BindLinkedinContactRequest::linkedinname() const {
  // @@protoc_insertion_point(field_get:micromsg.BindLinkedinContactRequest.LinkedinName)
  return linkedinname_.GetNoArena();
}
void BindLinkedinContactRequest::set_linkedinname(const ::std::string& value) {
  set_has_linkedinname();
  linkedinname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BindLinkedinContactRequest.LinkedinName)
}
#if LANG_CXX11
void BindLinkedinContactRequest::set_linkedinname(::std::string&& value) {
  set_has_linkedinname();
  linkedinname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BindLinkedinContactRequest.LinkedinName)
}
#endif
void BindLinkedinContactRequest::set_linkedinname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_linkedinname();
  linkedinname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BindLinkedinContactRequest.LinkedinName)
}
void BindLinkedinContactRequest::set_linkedinname(const char* value, size_t size) {
  set_has_linkedinname();
  linkedinname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BindLinkedinContactRequest.LinkedinName)
}
::std::string* BindLinkedinContactRequest::mutable_linkedinname() {
  set_has_linkedinname();
  // @@protoc_insertion_point(field_mutable:micromsg.BindLinkedinContactRequest.LinkedinName)
  return linkedinname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BindLinkedinContactRequest::release_linkedinname() {
  // @@protoc_insertion_point(field_release:micromsg.BindLinkedinContactRequest.LinkedinName)
  clear_has_linkedinname();
  return linkedinname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BindLinkedinContactRequest::set_allocated_linkedinname(::std::string* linkedinname) {
  if (linkedinname != NULL) {
    set_has_linkedinname();
  } else {
    clear_has_linkedinname();
  }
  linkedinname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), linkedinname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindLinkedinContactRequest.LinkedinName)
}

// optional string LinkedinPublicUrl = 6;
bool BindLinkedinContactRequest::has_linkedinpublicurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BindLinkedinContactRequest::set_has_linkedinpublicurl() {
  _has_bits_[0] |= 0x00000004u;
}
void BindLinkedinContactRequest::clear_has_linkedinpublicurl() {
  _has_bits_[0] &= ~0x00000004u;
}
void BindLinkedinContactRequest::clear_linkedinpublicurl() {
  linkedinpublicurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_linkedinpublicurl();
}
const ::std::string& BindLinkedinContactRequest::linkedinpublicurl() const {
  // @@protoc_insertion_point(field_get:micromsg.BindLinkedinContactRequest.LinkedinPublicUrl)
  return linkedinpublicurl_.GetNoArena();
}
void BindLinkedinContactRequest::set_linkedinpublicurl(const ::std::string& value) {
  set_has_linkedinpublicurl();
  linkedinpublicurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BindLinkedinContactRequest.LinkedinPublicUrl)
}
#if LANG_CXX11
void BindLinkedinContactRequest::set_linkedinpublicurl(::std::string&& value) {
  set_has_linkedinpublicurl();
  linkedinpublicurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BindLinkedinContactRequest.LinkedinPublicUrl)
}
#endif
void BindLinkedinContactRequest::set_linkedinpublicurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_linkedinpublicurl();
  linkedinpublicurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BindLinkedinContactRequest.LinkedinPublicUrl)
}
void BindLinkedinContactRequest::set_linkedinpublicurl(const char* value, size_t size) {
  set_has_linkedinpublicurl();
  linkedinpublicurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BindLinkedinContactRequest.LinkedinPublicUrl)
}
::std::string* BindLinkedinContactRequest::mutable_linkedinpublicurl() {
  set_has_linkedinpublicurl();
  // @@protoc_insertion_point(field_mutable:micromsg.BindLinkedinContactRequest.LinkedinPublicUrl)
  return linkedinpublicurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BindLinkedinContactRequest::release_linkedinpublicurl() {
  // @@protoc_insertion_point(field_release:micromsg.BindLinkedinContactRequest.LinkedinPublicUrl)
  clear_has_linkedinpublicurl();
  return linkedinpublicurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BindLinkedinContactRequest::set_allocated_linkedinpublicurl(::std::string* linkedinpublicurl) {
  if (linkedinpublicurl != NULL) {
    set_has_linkedinpublicurl();
  } else {
    clear_has_linkedinpublicurl();
  }
  linkedinpublicurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), linkedinpublicurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindLinkedinContactRequest.LinkedinPublicUrl)
}

// optional string Timestamp = 7;
bool BindLinkedinContactRequest::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BindLinkedinContactRequest::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
void BindLinkedinContactRequest::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
void BindLinkedinContactRequest::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timestamp();
}
const ::std::string& BindLinkedinContactRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:micromsg.BindLinkedinContactRequest.Timestamp)
  return timestamp_.GetNoArena();
}
void BindLinkedinContactRequest::set_timestamp(const ::std::string& value) {
  set_has_timestamp();
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BindLinkedinContactRequest.Timestamp)
}
#if LANG_CXX11
void BindLinkedinContactRequest::set_timestamp(::std::string&& value) {
  set_has_timestamp();
  timestamp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BindLinkedinContactRequest.Timestamp)
}
#endif
void BindLinkedinContactRequest::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_timestamp();
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BindLinkedinContactRequest.Timestamp)
}
void BindLinkedinContactRequest::set_timestamp(const char* value, size_t size) {
  set_has_timestamp();
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BindLinkedinContactRequest.Timestamp)
}
::std::string* BindLinkedinContactRequest::mutable_timestamp() {
  set_has_timestamp();
  // @@protoc_insertion_point(field_mutable:micromsg.BindLinkedinContactRequest.Timestamp)
  return timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BindLinkedinContactRequest::release_timestamp() {
  // @@protoc_insertion_point(field_release:micromsg.BindLinkedinContactRequest.Timestamp)
  clear_has_timestamp();
  return timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BindLinkedinContactRequest::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp != NULL) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindLinkedinContactRequest.Timestamp)
}

// optional string Nounce = 8;
bool BindLinkedinContactRequest::has_nounce() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BindLinkedinContactRequest::set_has_nounce() {
  _has_bits_[0] |= 0x00000010u;
}
void BindLinkedinContactRequest::clear_has_nounce() {
  _has_bits_[0] &= ~0x00000010u;
}
void BindLinkedinContactRequest::clear_nounce() {
  nounce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nounce();
}
const ::std::string& BindLinkedinContactRequest::nounce() const {
  // @@protoc_insertion_point(field_get:micromsg.BindLinkedinContactRequest.Nounce)
  return nounce_.GetNoArena();
}
void BindLinkedinContactRequest::set_nounce(const ::std::string& value) {
  set_has_nounce();
  nounce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BindLinkedinContactRequest.Nounce)
}
#if LANG_CXX11
void BindLinkedinContactRequest::set_nounce(::std::string&& value) {
  set_has_nounce();
  nounce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BindLinkedinContactRequest.Nounce)
}
#endif
void BindLinkedinContactRequest::set_nounce(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nounce();
  nounce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BindLinkedinContactRequest.Nounce)
}
void BindLinkedinContactRequest::set_nounce(const char* value, size_t size) {
  set_has_nounce();
  nounce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BindLinkedinContactRequest.Nounce)
}
::std::string* BindLinkedinContactRequest::mutable_nounce() {
  set_has_nounce();
  // @@protoc_insertion_point(field_mutable:micromsg.BindLinkedinContactRequest.Nounce)
  return nounce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BindLinkedinContactRequest::release_nounce() {
  // @@protoc_insertion_point(field_release:micromsg.BindLinkedinContactRequest.Nounce)
  clear_has_nounce();
  return nounce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BindLinkedinContactRequest::set_allocated_nounce(::std::string* nounce) {
  if (nounce != NULL) {
    set_has_nounce();
  } else {
    clear_has_nounce();
  }
  nounce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nounce);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindLinkedinContactRequest.Nounce)
}

// optional string LinkedinSignature = 9;
bool BindLinkedinContactRequest::has_linkedinsignature() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BindLinkedinContactRequest::set_has_linkedinsignature() {
  _has_bits_[0] |= 0x00000020u;
}
void BindLinkedinContactRequest::clear_has_linkedinsignature() {
  _has_bits_[0] &= ~0x00000020u;
}
void BindLinkedinContactRequest::clear_linkedinsignature() {
  linkedinsignature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_linkedinsignature();
}
const ::std::string& BindLinkedinContactRequest::linkedinsignature() const {
  // @@protoc_insertion_point(field_get:micromsg.BindLinkedinContactRequest.LinkedinSignature)
  return linkedinsignature_.GetNoArena();
}
void BindLinkedinContactRequest::set_linkedinsignature(const ::std::string& value) {
  set_has_linkedinsignature();
  linkedinsignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BindLinkedinContactRequest.LinkedinSignature)
}
#if LANG_CXX11
void BindLinkedinContactRequest::set_linkedinsignature(::std::string&& value) {
  set_has_linkedinsignature();
  linkedinsignature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BindLinkedinContactRequest.LinkedinSignature)
}
#endif
void BindLinkedinContactRequest::set_linkedinsignature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_linkedinsignature();
  linkedinsignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BindLinkedinContactRequest.LinkedinSignature)
}
void BindLinkedinContactRequest::set_linkedinsignature(const char* value, size_t size) {
  set_has_linkedinsignature();
  linkedinsignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BindLinkedinContactRequest.LinkedinSignature)
}
::std::string* BindLinkedinContactRequest::mutable_linkedinsignature() {
  set_has_linkedinsignature();
  // @@protoc_insertion_point(field_mutable:micromsg.BindLinkedinContactRequest.LinkedinSignature)
  return linkedinsignature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BindLinkedinContactRequest::release_linkedinsignature() {
  // @@protoc_insertion_point(field_release:micromsg.BindLinkedinContactRequest.LinkedinSignature)
  clear_has_linkedinsignature();
  return linkedinsignature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BindLinkedinContactRequest::set_allocated_linkedinsignature(::std::string* linkedinsignature) {
  if (linkedinsignature != NULL) {
    set_has_linkedinsignature();
  } else {
    clear_has_linkedinsignature();
  }
  linkedinsignature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), linkedinsignature);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindLinkedinContactRequest.LinkedinSignature)
}

// optional string LinkedinReturnSignature = 10;
bool BindLinkedinContactRequest::has_linkedinreturnsignature() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BindLinkedinContactRequest::set_has_linkedinreturnsignature() {
  _has_bits_[0] |= 0x00000040u;
}
void BindLinkedinContactRequest::clear_has_linkedinreturnsignature() {
  _has_bits_[0] &= ~0x00000040u;
}
void BindLinkedinContactRequest::clear_linkedinreturnsignature() {
  linkedinreturnsignature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_linkedinreturnsignature();
}
const ::std::string& BindLinkedinContactRequest::linkedinreturnsignature() const {
  // @@protoc_insertion_point(field_get:micromsg.BindLinkedinContactRequest.LinkedinReturnSignature)
  return linkedinreturnsignature_.GetNoArena();
}
void BindLinkedinContactRequest::set_linkedinreturnsignature(const ::std::string& value) {
  set_has_linkedinreturnsignature();
  linkedinreturnsignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BindLinkedinContactRequest.LinkedinReturnSignature)
}
#if LANG_CXX11
void BindLinkedinContactRequest::set_linkedinreturnsignature(::std::string&& value) {
  set_has_linkedinreturnsignature();
  linkedinreturnsignature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BindLinkedinContactRequest.LinkedinReturnSignature)
}
#endif
void BindLinkedinContactRequest::set_linkedinreturnsignature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_linkedinreturnsignature();
  linkedinreturnsignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BindLinkedinContactRequest.LinkedinReturnSignature)
}
void BindLinkedinContactRequest::set_linkedinreturnsignature(const char* value, size_t size) {
  set_has_linkedinreturnsignature();
  linkedinreturnsignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BindLinkedinContactRequest.LinkedinReturnSignature)
}
::std::string* BindLinkedinContactRequest::mutable_linkedinreturnsignature() {
  set_has_linkedinreturnsignature();
  // @@protoc_insertion_point(field_mutable:micromsg.BindLinkedinContactRequest.LinkedinReturnSignature)
  return linkedinreturnsignature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BindLinkedinContactRequest::release_linkedinreturnsignature() {
  // @@protoc_insertion_point(field_release:micromsg.BindLinkedinContactRequest.LinkedinReturnSignature)
  clear_has_linkedinreturnsignature();
  return linkedinreturnsignature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BindLinkedinContactRequest::set_allocated_linkedinreturnsignature(::std::string* linkedinreturnsignature) {
  if (linkedinreturnsignature != NULL) {
    set_has_linkedinreturnsignature();
  } else {
    clear_has_linkedinreturnsignature();
  }
  linkedinreturnsignature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), linkedinreturnsignature);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindLinkedinContactRequest.LinkedinReturnSignature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BindLinkedinContactResponse::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BindLinkedinContactResponse::BindLinkedinContactResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BindLinkedinContactResponse)
}
BindLinkedinContactResponse::BindLinkedinContactResponse(const BindLinkedinContactResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.BindLinkedinContactResponse)
}

void BindLinkedinContactResponse::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

BindLinkedinContactResponse::~BindLinkedinContactResponse() {
  // @@protoc_insertion_point(destructor:micromsg.BindLinkedinContactResponse)
  SharedDtor();
}

void BindLinkedinContactResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void BindLinkedinContactResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BindLinkedinContactResponse::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BindLinkedinContactResponse& BindLinkedinContactResponse::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

BindLinkedinContactResponse* BindLinkedinContactResponse::New(::google::protobuf::Arena* arena) const {
  BindLinkedinContactResponse* n = new BindLinkedinContactResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BindLinkedinContactResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BindLinkedinContactResponse)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BindLinkedinContactResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BindLinkedinContactResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BindLinkedinContactResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BindLinkedinContactResponse)
  return false;
#undef DO_
}

void BindLinkedinContactResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BindLinkedinContactResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BindLinkedinContactResponse)
}

::google::protobuf::uint8* BindLinkedinContactResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BindLinkedinContactResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BindLinkedinContactResponse)
  return target;
}

size_t BindLinkedinContactResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BindLinkedinContactResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BindLinkedinContactResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BindLinkedinContactResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BindLinkedinContactResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BindLinkedinContactResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BindLinkedinContactResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BindLinkedinContactResponse)
    MergeFrom(*source);
  }
}

void BindLinkedinContactResponse::MergeFrom(const BindLinkedinContactResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BindLinkedinContactResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void BindLinkedinContactResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BindLinkedinContactResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BindLinkedinContactResponse::CopyFrom(const BindLinkedinContactResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BindLinkedinContactResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BindLinkedinContactResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void BindLinkedinContactResponse::Swap(BindLinkedinContactResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BindLinkedinContactResponse::InternalSwap(BindLinkedinContactResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BindLinkedinContactResponse::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BindLinkedinContactResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool BindLinkedinContactResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BindLinkedinContactResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void BindLinkedinContactResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void BindLinkedinContactResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& BindLinkedinContactResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.BindLinkedinContactResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* BindLinkedinContactResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BindLinkedinContactResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* BindLinkedinContactResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.BindLinkedinContactResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void BindLinkedinContactResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindLinkedinContactResponse.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnBindLinkedinContactRequest::kBaseRequestFieldNumber;
const int UnBindLinkedinContactRequest::kOpcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnBindLinkedinContactRequest::UnBindLinkedinContactRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.UnBindLinkedinContactRequest)
}
UnBindLinkedinContactRequest::UnBindLinkedinContactRequest(const UnBindLinkedinContactRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  opcode_ = from.opcode_;
  // @@protoc_insertion_point(copy_constructor:micromsg.UnBindLinkedinContactRequest)
}

void UnBindLinkedinContactRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&opcode_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(opcode_));
}

UnBindLinkedinContactRequest::~UnBindLinkedinContactRequest() {
  // @@protoc_insertion_point(destructor:micromsg.UnBindLinkedinContactRequest)
  SharedDtor();
}

void UnBindLinkedinContactRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void UnBindLinkedinContactRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnBindLinkedinContactRequest::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UnBindLinkedinContactRequest& UnBindLinkedinContactRequest::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

UnBindLinkedinContactRequest* UnBindLinkedinContactRequest::New(::google::protobuf::Arena* arena) const {
  UnBindLinkedinContactRequest* n = new UnBindLinkedinContactRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnBindLinkedinContactRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.UnBindLinkedinContactRequest)
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  opcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UnBindLinkedinContactRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.UnBindLinkedinContactRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Opcode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_opcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.UnBindLinkedinContactRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.UnBindLinkedinContactRequest)
  return false;
#undef DO_
}

void UnBindLinkedinContactRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.UnBindLinkedinContactRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 Opcode = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->opcode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.UnBindLinkedinContactRequest)
}

::google::protobuf::uint8* UnBindLinkedinContactRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.UnBindLinkedinContactRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 Opcode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->opcode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.UnBindLinkedinContactRequest)
  return target;
}

size_t UnBindLinkedinContactRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.UnBindLinkedinContactRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_opcode()) {
    // required uint32 Opcode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());
  }

  return total_size;
}
size_t UnBindLinkedinContactRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.UnBindLinkedinContactRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 Opcode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnBindLinkedinContactRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.UnBindLinkedinContactRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UnBindLinkedinContactRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnBindLinkedinContactRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.UnBindLinkedinContactRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.UnBindLinkedinContactRequest)
    MergeFrom(*source);
  }
}

void UnBindLinkedinContactRequest::MergeFrom(const UnBindLinkedinContactRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.UnBindLinkedinContactRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      opcode_ = from.opcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UnBindLinkedinContactRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.UnBindLinkedinContactRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnBindLinkedinContactRequest::CopyFrom(const UnBindLinkedinContactRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.UnBindLinkedinContactRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnBindLinkedinContactRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void UnBindLinkedinContactRequest::Swap(UnBindLinkedinContactRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnBindLinkedinContactRequest::InternalSwap(UnBindLinkedinContactRequest* other) {
  std::swap(baserequest_, other->baserequest_);
  std::swap(opcode_, other->opcode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnBindLinkedinContactRequest::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnBindLinkedinContactRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool UnBindLinkedinContactRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UnBindLinkedinContactRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void UnBindLinkedinContactRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void UnBindLinkedinContactRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& UnBindLinkedinContactRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.UnBindLinkedinContactRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* UnBindLinkedinContactRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UnBindLinkedinContactRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* UnBindLinkedinContactRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.UnBindLinkedinContactRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void UnBindLinkedinContactRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UnBindLinkedinContactRequest.BaseRequest)
}

// required uint32 Opcode = 2;
bool UnBindLinkedinContactRequest::has_opcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UnBindLinkedinContactRequest::set_has_opcode() {
  _has_bits_[0] |= 0x00000002u;
}
void UnBindLinkedinContactRequest::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000002u;
}
void UnBindLinkedinContactRequest::clear_opcode() {
  opcode_ = 0u;
  clear_has_opcode();
}
::google::protobuf::uint32 UnBindLinkedinContactRequest::opcode() const {
  // @@protoc_insertion_point(field_get:micromsg.UnBindLinkedinContactRequest.Opcode)
  return opcode_;
}
void UnBindLinkedinContactRequest::set_opcode(::google::protobuf::uint32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UnBindLinkedinContactRequest.Opcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnBindLinkedinContactResponse::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnBindLinkedinContactResponse::UnBindLinkedinContactResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.UnBindLinkedinContactResponse)
}
UnBindLinkedinContactResponse::UnBindLinkedinContactResponse(const UnBindLinkedinContactResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.UnBindLinkedinContactResponse)
}

void UnBindLinkedinContactResponse::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

UnBindLinkedinContactResponse::~UnBindLinkedinContactResponse() {
  // @@protoc_insertion_point(destructor:micromsg.UnBindLinkedinContactResponse)
  SharedDtor();
}

void UnBindLinkedinContactResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void UnBindLinkedinContactResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnBindLinkedinContactResponse::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UnBindLinkedinContactResponse& UnBindLinkedinContactResponse::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

UnBindLinkedinContactResponse* UnBindLinkedinContactResponse::New(::google::protobuf::Arena* arena) const {
  UnBindLinkedinContactResponse* n = new UnBindLinkedinContactResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnBindLinkedinContactResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.UnBindLinkedinContactResponse)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UnBindLinkedinContactResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.UnBindLinkedinContactResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.UnBindLinkedinContactResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.UnBindLinkedinContactResponse)
  return false;
#undef DO_
}

void UnBindLinkedinContactResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.UnBindLinkedinContactResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.UnBindLinkedinContactResponse)
}

::google::protobuf::uint8* UnBindLinkedinContactResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.UnBindLinkedinContactResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.UnBindLinkedinContactResponse)
  return target;
}

size_t UnBindLinkedinContactResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.UnBindLinkedinContactResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnBindLinkedinContactResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.UnBindLinkedinContactResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UnBindLinkedinContactResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnBindLinkedinContactResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.UnBindLinkedinContactResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.UnBindLinkedinContactResponse)
    MergeFrom(*source);
  }
}

void UnBindLinkedinContactResponse::MergeFrom(const UnBindLinkedinContactResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.UnBindLinkedinContactResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void UnBindLinkedinContactResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.UnBindLinkedinContactResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnBindLinkedinContactResponse::CopyFrom(const UnBindLinkedinContactResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.UnBindLinkedinContactResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnBindLinkedinContactResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void UnBindLinkedinContactResponse::Swap(UnBindLinkedinContactResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnBindLinkedinContactResponse::InternalSwap(UnBindLinkedinContactResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnBindLinkedinContactResponse::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnBindLinkedinContactResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool UnBindLinkedinContactResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UnBindLinkedinContactResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void UnBindLinkedinContactResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void UnBindLinkedinContactResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& UnBindLinkedinContactResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.UnBindLinkedinContactResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* UnBindLinkedinContactResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UnBindLinkedinContactResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* UnBindLinkedinContactResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.UnBindLinkedinContactResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void UnBindLinkedinContactResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UnBindLinkedinContactResponse.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginQRCodeNotify::kUUIDFieldNumber;
const int LoginQRCodeNotify::kStatusFieldNumber;
const int LoginQRCodeNotify::kUserNameFieldNumber;
const int LoginQRCodeNotify::kPwdFieldNumber;
const int LoginQRCodeNotify::kHeadImgURLFieldNumber;
const int LoginQRCodeNotify::kPushLoginURLExpiredTimeFieldNumber;
const int LoginQRCodeNotify::kNickNameFieldNumber;
const int LoginQRCodeNotify::kExpiredTimeFieldNumber;
const int LoginQRCodeNotify::kPairWaitTipFieldNumber;
const int LoginQRCodeNotify::kAuthorClientVersionFieldNumber;
const int LoginQRCodeNotify::kAuthorDeviceTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginQRCodeNotify::LoginQRCodeNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.LoginQRCodeNotify)
}
LoginQRCodeNotify::LoginQRCodeNotify(const LoginQRCodeNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_uuid()) {
    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pwd()) {
    pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  headimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_headimgurl()) {
    headimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headimgurl_);
  }
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nickname()) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  pairwaittip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pairwaittip()) {
    pairwaittip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pairwaittip_);
  }
  authordevicetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_authordevicetype()) {
    authordevicetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authordevicetype_);
  }
  ::memcpy(&status_, &from.status_,
    reinterpret_cast<char*>(&authorclientversion_) -
    reinterpret_cast<char*>(&status_) + sizeof(authorclientversion_));
  // @@protoc_insertion_point(copy_constructor:micromsg.LoginQRCodeNotify)
}

void LoginQRCodeNotify::SharedCtor() {
  _cached_size_ = 0;
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pairwaittip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authordevicetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, reinterpret_cast<char*>(&authorclientversion_) -
    reinterpret_cast<char*>(&status_) + sizeof(authorclientversion_));
}

LoginQRCodeNotify::~LoginQRCodeNotify() {
  // @@protoc_insertion_point(destructor:micromsg.LoginQRCodeNotify)
  SharedDtor();
}

void LoginQRCodeNotify::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headimgurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pairwaittip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authordevicetype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoginQRCodeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginQRCodeNotify::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginQRCodeNotify& LoginQRCodeNotify::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

LoginQRCodeNotify* LoginQRCodeNotify::New(::google::protobuf::Arena* arena) const {
  LoginQRCodeNotify* n = new LoginQRCodeNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginQRCodeNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.LoginQRCodeNotify)
  if (_has_bits_[0 / 32] & 127u) {
    if (has_uuid()) {
      GOOGLE_DCHECK(!uuid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*uuid_.UnsafeRawStringPointer())->clear();
    }
    if (has_username()) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
    if (has_pwd()) {
      GOOGLE_DCHECK(!pwd_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pwd_.UnsafeRawStringPointer())->clear();
    }
    if (has_headimgurl()) {
      GOOGLE_DCHECK(!headimgurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*headimgurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_nickname()) {
      GOOGLE_DCHECK(!nickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*nickname_.UnsafeRawStringPointer())->clear();
    }
    if (has_pairwaittip()) {
      GOOGLE_DCHECK(!pairwaittip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pairwaittip_.UnsafeRawStringPointer())->clear();
    }
    if (has_authordevicetype()) {
      GOOGLE_DCHECK(!authordevicetype_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*authordevicetype_.UnsafeRawStringPointer())->clear();
    }
  }
  status_ = 0u;
  if (_has_bits_[8 / 32] & 1792u) {
    ::memset(&pushloginurlexpiredtime_, 0, reinterpret_cast<char*>(&authorclientversion_) -
      reinterpret_cast<char*>(&pushloginurlexpiredtime_) + sizeof(authorclientversion_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LoginQRCodeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.LoginQRCodeNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string UUID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.LoginQRCodeNotify.UUID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string UserName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.LoginQRCodeNotify.UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Pwd = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pwd().data(), this->pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.LoginQRCodeNotify.Pwd");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string HeadImgURL = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headimgurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->headimgurl().data(), this->headimgurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.LoginQRCodeNotify.HeadImgURL");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 PushLoginURLExpiredTime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_pushloginurlexpiredtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pushloginurlexpiredtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string NickName = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.LoginQRCodeNotify.NickName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ExpiredTime = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_expiredtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expiredtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PairWaitTip = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pairwaittip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pairwaittip().data(), this->pairwaittip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.LoginQRCodeNotify.PairWaitTip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 AuthorClientVersion = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_authorclientversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &authorclientversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AuthorDeviceType = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authordevicetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->authordevicetype().data(), this->authordevicetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.LoginQRCodeNotify.AuthorDeviceType");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.LoginQRCodeNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.LoginQRCodeNotify)
  return false;
#undef DO_
}

void LoginQRCodeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.LoginQRCodeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string UUID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.LoginQRCodeNotify.UUID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuid(), output);
  }

  // required uint32 Status = 2;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  // optional string UserName = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.LoginQRCodeNotify.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->username(), output);
  }

  // optional string Pwd = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.LoginQRCodeNotify.Pwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->pwd(), output);
  }

  // optional string HeadImgURL = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headimgurl().data(), this->headimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.LoginQRCodeNotify.HeadImgURL");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->headimgurl(), output);
  }

  // optional uint32 PushLoginURLExpiredTime = 6;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->pushloginurlexpiredtime(), output);
  }

  // optional string NickName = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.LoginQRCodeNotify.NickName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->nickname(), output);
  }

  // optional uint32 ExpiredTime = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->expiredtime(), output);
  }

  // optional string PairWaitTip = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pairwaittip().data(), this->pairwaittip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.LoginQRCodeNotify.PairWaitTip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->pairwaittip(), output);
  }

  // optional uint32 AuthorClientVersion = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->authorclientversion(), output);
  }

  // optional string AuthorDeviceType = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authordevicetype().data(), this->authordevicetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.LoginQRCodeNotify.AuthorDeviceType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->authordevicetype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.LoginQRCodeNotify)
}

::google::protobuf::uint8* LoginQRCodeNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.LoginQRCodeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string UUID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.LoginQRCodeNotify.UUID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  // required uint32 Status = 2;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  // optional string UserName = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.LoginQRCodeNotify.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }

  // optional string Pwd = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.LoginQRCodeNotify.Pwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pwd(), target);
  }

  // optional string HeadImgURL = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headimgurl().data(), this->headimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.LoginQRCodeNotify.HeadImgURL");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->headimgurl(), target);
  }

  // optional uint32 PushLoginURLExpiredTime = 6;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->pushloginurlexpiredtime(), target);
  }

  // optional string NickName = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.LoginQRCodeNotify.NickName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->nickname(), target);
  }

  // optional uint32 ExpiredTime = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->expiredtime(), target);
  }

  // optional string PairWaitTip = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pairwaittip().data(), this->pairwaittip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.LoginQRCodeNotify.PairWaitTip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->pairwaittip(), target);
  }

  // optional uint32 AuthorClientVersion = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->authorclientversion(), target);
  }

  // optional string AuthorDeviceType = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authordevicetype().data(), this->authordevicetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.LoginQRCodeNotify.AuthorDeviceType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->authordevicetype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.LoginQRCodeNotify)
  return target;
}

size_t LoginQRCodeNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.LoginQRCodeNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 Status = 2;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string UUID = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // optional string UserName = 3;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string Pwd = 4;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }

    // optional string HeadImgURL = 5;
    if (has_headimgurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headimgurl());
    }

    // optional string NickName = 7;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string PairWaitTip = 9;
    if (has_pairwaittip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pairwaittip());
    }

    // optional string AuthorDeviceType = 11;
    if (has_authordevicetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authordevicetype());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional uint32 PushLoginURLExpiredTime = 6;
    if (has_pushloginurlexpiredtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pushloginurlexpiredtime());
    }

    // optional uint32 ExpiredTime = 8;
    if (has_expiredtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expiredtime());
    }

    // optional uint32 AuthorClientVersion = 10;
    if (has_authorclientversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->authorclientversion());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginQRCodeNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.LoginQRCodeNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginQRCodeNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginQRCodeNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.LoginQRCodeNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.LoginQRCodeNotify)
    MergeFrom(*source);
  }
}

void LoginQRCodeNotify::MergeFrom(const LoginQRCodeNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.LoginQRCodeNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_uuid();
      uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_pwd();
      pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_headimgurl();
      headimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headimgurl_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_pairwaittip();
      pairwaittip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pairwaittip_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_authordevicetype();
      authordevicetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authordevicetype_);
    }
    if (cached_has_bits & 0x00000080u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      pushloginurlexpiredtime_ = from.pushloginurlexpiredtime_;
    }
    if (cached_has_bits & 0x00000200u) {
      expiredtime_ = from.expiredtime_;
    }
    if (cached_has_bits & 0x00000400u) {
      authorclientversion_ = from.authorclientversion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LoginQRCodeNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.LoginQRCodeNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginQRCodeNotify::CopyFrom(const LoginQRCodeNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.LoginQRCodeNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginQRCodeNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000080) != 0x00000080) return false;
  return true;
}

void LoginQRCodeNotify::Swap(LoginQRCodeNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginQRCodeNotify::InternalSwap(LoginQRCodeNotify* other) {
  uuid_.Swap(&other->uuid_);
  username_.Swap(&other->username_);
  pwd_.Swap(&other->pwd_);
  headimgurl_.Swap(&other->headimgurl_);
  nickname_.Swap(&other->nickname_);
  pairwaittip_.Swap(&other->pairwaittip_);
  authordevicetype_.Swap(&other->authordevicetype_);
  std::swap(status_, other->status_);
  std::swap(pushloginurlexpiredtime_, other->pushloginurlexpiredtime_);
  std::swap(expiredtime_, other->expiredtime_);
  std::swap(authorclientversion_, other->authorclientversion_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginQRCodeNotify::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginQRCodeNotify

// optional string UUID = 1;
bool LoginQRCodeNotify::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LoginQRCodeNotify::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
void LoginQRCodeNotify::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
void LoginQRCodeNotify::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuid();
}
const ::std::string& LoginQRCodeNotify::uuid() const {
  // @@protoc_insertion_point(field_get:micromsg.LoginQRCodeNotify.UUID)
  return uuid_.GetNoArena();
}
void LoginQRCodeNotify::set_uuid(const ::std::string& value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.LoginQRCodeNotify.UUID)
}
#if LANG_CXX11
void LoginQRCodeNotify::set_uuid(::std::string&& value) {
  set_has_uuid();
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.LoginQRCodeNotify.UUID)
}
#endif
void LoginQRCodeNotify::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.LoginQRCodeNotify.UUID)
}
void LoginQRCodeNotify::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.LoginQRCodeNotify.UUID)
}
::std::string* LoginQRCodeNotify::mutable_uuid() {
  set_has_uuid();
  // @@protoc_insertion_point(field_mutable:micromsg.LoginQRCodeNotify.UUID)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginQRCodeNotify::release_uuid() {
  // @@protoc_insertion_point(field_release:micromsg.LoginQRCodeNotify.UUID)
  clear_has_uuid();
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginQRCodeNotify::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    set_has_uuid();
  } else {
    clear_has_uuid();
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.LoginQRCodeNotify.UUID)
}

// required uint32 Status = 2;
bool LoginQRCodeNotify::has_status() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void LoginQRCodeNotify::set_has_status() {
  _has_bits_[0] |= 0x00000080u;
}
void LoginQRCodeNotify::clear_has_status() {
  _has_bits_[0] &= ~0x00000080u;
}
void LoginQRCodeNotify::clear_status() {
  status_ = 0u;
  clear_has_status();
}
::google::protobuf::uint32 LoginQRCodeNotify::status() const {
  // @@protoc_insertion_point(field_get:micromsg.LoginQRCodeNotify.Status)
  return status_;
}
void LoginQRCodeNotify::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:micromsg.LoginQRCodeNotify.Status)
}

// optional string UserName = 3;
bool LoginQRCodeNotify::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LoginQRCodeNotify::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
void LoginQRCodeNotify::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
void LoginQRCodeNotify::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& LoginQRCodeNotify::username() const {
  // @@protoc_insertion_point(field_get:micromsg.LoginQRCodeNotify.UserName)
  return username_.GetNoArena();
}
void LoginQRCodeNotify::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.LoginQRCodeNotify.UserName)
}
#if LANG_CXX11
void LoginQRCodeNotify::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.LoginQRCodeNotify.UserName)
}
#endif
void LoginQRCodeNotify::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.LoginQRCodeNotify.UserName)
}
void LoginQRCodeNotify::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.LoginQRCodeNotify.UserName)
}
::std::string* LoginQRCodeNotify::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.LoginQRCodeNotify.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginQRCodeNotify::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.LoginQRCodeNotify.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginQRCodeNotify::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.LoginQRCodeNotify.UserName)
}

// optional string Pwd = 4;
bool LoginQRCodeNotify::has_pwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LoginQRCodeNotify::set_has_pwd() {
  _has_bits_[0] |= 0x00000004u;
}
void LoginQRCodeNotify::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000004u;
}
void LoginQRCodeNotify::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pwd();
}
const ::std::string& LoginQRCodeNotify::pwd() const {
  // @@protoc_insertion_point(field_get:micromsg.LoginQRCodeNotify.Pwd)
  return pwd_.GetNoArena();
}
void LoginQRCodeNotify::set_pwd(const ::std::string& value) {
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.LoginQRCodeNotify.Pwd)
}
#if LANG_CXX11
void LoginQRCodeNotify::set_pwd(::std::string&& value) {
  set_has_pwd();
  pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.LoginQRCodeNotify.Pwd)
}
#endif
void LoginQRCodeNotify::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.LoginQRCodeNotify.Pwd)
}
void LoginQRCodeNotify::set_pwd(const char* value, size_t size) {
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.LoginQRCodeNotify.Pwd)
}
::std::string* LoginQRCodeNotify::mutable_pwd() {
  set_has_pwd();
  // @@protoc_insertion_point(field_mutable:micromsg.LoginQRCodeNotify.Pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginQRCodeNotify::release_pwd() {
  // @@protoc_insertion_point(field_release:micromsg.LoginQRCodeNotify.Pwd)
  clear_has_pwd();
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginQRCodeNotify::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    set_has_pwd();
  } else {
    clear_has_pwd();
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:micromsg.LoginQRCodeNotify.Pwd)
}

// optional string HeadImgURL = 5;
bool LoginQRCodeNotify::has_headimgurl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LoginQRCodeNotify::set_has_headimgurl() {
  _has_bits_[0] |= 0x00000008u;
}
void LoginQRCodeNotify::clear_has_headimgurl() {
  _has_bits_[0] &= ~0x00000008u;
}
void LoginQRCodeNotify::clear_headimgurl() {
  headimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_headimgurl();
}
const ::std::string& LoginQRCodeNotify::headimgurl() const {
  // @@protoc_insertion_point(field_get:micromsg.LoginQRCodeNotify.HeadImgURL)
  return headimgurl_.GetNoArena();
}
void LoginQRCodeNotify::set_headimgurl(const ::std::string& value) {
  set_has_headimgurl();
  headimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.LoginQRCodeNotify.HeadImgURL)
}
#if LANG_CXX11
void LoginQRCodeNotify::set_headimgurl(::std::string&& value) {
  set_has_headimgurl();
  headimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.LoginQRCodeNotify.HeadImgURL)
}
#endif
void LoginQRCodeNotify::set_headimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_headimgurl();
  headimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.LoginQRCodeNotify.HeadImgURL)
}
void LoginQRCodeNotify::set_headimgurl(const char* value, size_t size) {
  set_has_headimgurl();
  headimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.LoginQRCodeNotify.HeadImgURL)
}
::std::string* LoginQRCodeNotify::mutable_headimgurl() {
  set_has_headimgurl();
  // @@protoc_insertion_point(field_mutable:micromsg.LoginQRCodeNotify.HeadImgURL)
  return headimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginQRCodeNotify::release_headimgurl() {
  // @@protoc_insertion_point(field_release:micromsg.LoginQRCodeNotify.HeadImgURL)
  clear_has_headimgurl();
  return headimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginQRCodeNotify::set_allocated_headimgurl(::std::string* headimgurl) {
  if (headimgurl != NULL) {
    set_has_headimgurl();
  } else {
    clear_has_headimgurl();
  }
  headimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headimgurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.LoginQRCodeNotify.HeadImgURL)
}

// optional uint32 PushLoginURLExpiredTime = 6;
bool LoginQRCodeNotify::has_pushloginurlexpiredtime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void LoginQRCodeNotify::set_has_pushloginurlexpiredtime() {
  _has_bits_[0] |= 0x00000100u;
}
void LoginQRCodeNotify::clear_has_pushloginurlexpiredtime() {
  _has_bits_[0] &= ~0x00000100u;
}
void LoginQRCodeNotify::clear_pushloginurlexpiredtime() {
  pushloginurlexpiredtime_ = 0u;
  clear_has_pushloginurlexpiredtime();
}
::google::protobuf::uint32 LoginQRCodeNotify::pushloginurlexpiredtime() const {
  // @@protoc_insertion_point(field_get:micromsg.LoginQRCodeNotify.PushLoginURLExpiredTime)
  return pushloginurlexpiredtime_;
}
void LoginQRCodeNotify::set_pushloginurlexpiredtime(::google::protobuf::uint32 value) {
  set_has_pushloginurlexpiredtime();
  pushloginurlexpiredtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.LoginQRCodeNotify.PushLoginURLExpiredTime)
}

// optional string NickName = 7;
bool LoginQRCodeNotify::has_nickname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LoginQRCodeNotify::set_has_nickname() {
  _has_bits_[0] |= 0x00000010u;
}
void LoginQRCodeNotify::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000010u;
}
void LoginQRCodeNotify::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
const ::std::string& LoginQRCodeNotify::nickname() const {
  // @@protoc_insertion_point(field_get:micromsg.LoginQRCodeNotify.NickName)
  return nickname_.GetNoArena();
}
void LoginQRCodeNotify::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.LoginQRCodeNotify.NickName)
}
#if LANG_CXX11
void LoginQRCodeNotify::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.LoginQRCodeNotify.NickName)
}
#endif
void LoginQRCodeNotify::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.LoginQRCodeNotify.NickName)
}
void LoginQRCodeNotify::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.LoginQRCodeNotify.NickName)
}
::std::string* LoginQRCodeNotify::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:micromsg.LoginQRCodeNotify.NickName)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginQRCodeNotify::release_nickname() {
  // @@protoc_insertion_point(field_release:micromsg.LoginQRCodeNotify.NickName)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginQRCodeNotify::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.LoginQRCodeNotify.NickName)
}

// optional uint32 ExpiredTime = 8;
bool LoginQRCodeNotify::has_expiredtime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void LoginQRCodeNotify::set_has_expiredtime() {
  _has_bits_[0] |= 0x00000200u;
}
void LoginQRCodeNotify::clear_has_expiredtime() {
  _has_bits_[0] &= ~0x00000200u;
}
void LoginQRCodeNotify::clear_expiredtime() {
  expiredtime_ = 0u;
  clear_has_expiredtime();
}
::google::protobuf::uint32 LoginQRCodeNotify::expiredtime() const {
  // @@protoc_insertion_point(field_get:micromsg.LoginQRCodeNotify.ExpiredTime)
  return expiredtime_;
}
void LoginQRCodeNotify::set_expiredtime(::google::protobuf::uint32 value) {
  set_has_expiredtime();
  expiredtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.LoginQRCodeNotify.ExpiredTime)
}

// optional string PairWaitTip = 9;
bool LoginQRCodeNotify::has_pairwaittip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LoginQRCodeNotify::set_has_pairwaittip() {
  _has_bits_[0] |= 0x00000020u;
}
void LoginQRCodeNotify::clear_has_pairwaittip() {
  _has_bits_[0] &= ~0x00000020u;
}
void LoginQRCodeNotify::clear_pairwaittip() {
  pairwaittip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pairwaittip();
}
const ::std::string& LoginQRCodeNotify::pairwaittip() const {
  // @@protoc_insertion_point(field_get:micromsg.LoginQRCodeNotify.PairWaitTip)
  return pairwaittip_.GetNoArena();
}
void LoginQRCodeNotify::set_pairwaittip(const ::std::string& value) {
  set_has_pairwaittip();
  pairwaittip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.LoginQRCodeNotify.PairWaitTip)
}
#if LANG_CXX11
void LoginQRCodeNotify::set_pairwaittip(::std::string&& value) {
  set_has_pairwaittip();
  pairwaittip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.LoginQRCodeNotify.PairWaitTip)
}
#endif
void LoginQRCodeNotify::set_pairwaittip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pairwaittip();
  pairwaittip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.LoginQRCodeNotify.PairWaitTip)
}
void LoginQRCodeNotify::set_pairwaittip(const char* value, size_t size) {
  set_has_pairwaittip();
  pairwaittip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.LoginQRCodeNotify.PairWaitTip)
}
::std::string* LoginQRCodeNotify::mutable_pairwaittip() {
  set_has_pairwaittip();
  // @@protoc_insertion_point(field_mutable:micromsg.LoginQRCodeNotify.PairWaitTip)
  return pairwaittip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginQRCodeNotify::release_pairwaittip() {
  // @@protoc_insertion_point(field_release:micromsg.LoginQRCodeNotify.PairWaitTip)
  clear_has_pairwaittip();
  return pairwaittip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginQRCodeNotify::set_allocated_pairwaittip(::std::string* pairwaittip) {
  if (pairwaittip != NULL) {
    set_has_pairwaittip();
  } else {
    clear_has_pairwaittip();
  }
  pairwaittip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pairwaittip);
  // @@protoc_insertion_point(field_set_allocated:micromsg.LoginQRCodeNotify.PairWaitTip)
}

// optional uint32 AuthorClientVersion = 10;
bool LoginQRCodeNotify::has_authorclientversion() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void LoginQRCodeNotify::set_has_authorclientversion() {
  _has_bits_[0] |= 0x00000400u;
}
void LoginQRCodeNotify::clear_has_authorclientversion() {
  _has_bits_[0] &= ~0x00000400u;
}
void LoginQRCodeNotify::clear_authorclientversion() {
  authorclientversion_ = 0u;
  clear_has_authorclientversion();
}
::google::protobuf::uint32 LoginQRCodeNotify::authorclientversion() const {
  // @@protoc_insertion_point(field_get:micromsg.LoginQRCodeNotify.AuthorClientVersion)
  return authorclientversion_;
}
void LoginQRCodeNotify::set_authorclientversion(::google::protobuf::uint32 value) {
  set_has_authorclientversion();
  authorclientversion_ = value;
  // @@protoc_insertion_point(field_set:micromsg.LoginQRCodeNotify.AuthorClientVersion)
}

// optional string AuthorDeviceType = 11;
bool LoginQRCodeNotify::has_authordevicetype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LoginQRCodeNotify::set_has_authordevicetype() {
  _has_bits_[0] |= 0x00000040u;
}
void LoginQRCodeNotify::clear_has_authordevicetype() {
  _has_bits_[0] &= ~0x00000040u;
}
void LoginQRCodeNotify::clear_authordevicetype() {
  authordevicetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_authordevicetype();
}
const ::std::string& LoginQRCodeNotify::authordevicetype() const {
  // @@protoc_insertion_point(field_get:micromsg.LoginQRCodeNotify.AuthorDeviceType)
  return authordevicetype_.GetNoArena();
}
void LoginQRCodeNotify::set_authordevicetype(const ::std::string& value) {
  set_has_authordevicetype();
  authordevicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.LoginQRCodeNotify.AuthorDeviceType)
}
#if LANG_CXX11
void LoginQRCodeNotify::set_authordevicetype(::std::string&& value) {
  set_has_authordevicetype();
  authordevicetype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.LoginQRCodeNotify.AuthorDeviceType)
}
#endif
void LoginQRCodeNotify::set_authordevicetype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_authordevicetype();
  authordevicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.LoginQRCodeNotify.AuthorDeviceType)
}
void LoginQRCodeNotify::set_authordevicetype(const char* value, size_t size) {
  set_has_authordevicetype();
  authordevicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.LoginQRCodeNotify.AuthorDeviceType)
}
::std::string* LoginQRCodeNotify::mutable_authordevicetype() {
  set_has_authordevicetype();
  // @@protoc_insertion_point(field_mutable:micromsg.LoginQRCodeNotify.AuthorDeviceType)
  return authordevicetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginQRCodeNotify::release_authordevicetype() {
  // @@protoc_insertion_point(field_release:micromsg.LoginQRCodeNotify.AuthorDeviceType)
  clear_has_authordevicetype();
  return authordevicetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginQRCodeNotify::set_allocated_authordevicetype(::std::string* authordevicetype) {
  if (authordevicetype != NULL) {
    set_has_authordevicetype();
  } else {
    clear_has_authordevicetype();
  }
  authordevicetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), authordevicetype);
  // @@protoc_insertion_point(field_set_allocated:micromsg.LoginQRCodeNotify.AuthorDeviceType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginQRCodeNotifyPkg::kNotifyDataFieldNumber;
const int LoginQRCodeNotifyPkg::kOPCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginQRCodeNotifyPkg::LoginQRCodeNotifyPkg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.LoginQRCodeNotifyPkg)
}
LoginQRCodeNotifyPkg::LoginQRCodeNotifyPkg(const LoginQRCodeNotifyPkg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_notifydata()) {
    notifydata_ = new ::micromsg::SKBuiltinBuffer_t(*from.notifydata_);
  } else {
    notifydata_ = NULL;
  }
  opcode_ = from.opcode_;
  // @@protoc_insertion_point(copy_constructor:micromsg.LoginQRCodeNotifyPkg)
}

void LoginQRCodeNotifyPkg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&notifydata_, 0, reinterpret_cast<char*>(&opcode_) -
    reinterpret_cast<char*>(&notifydata_) + sizeof(opcode_));
}

LoginQRCodeNotifyPkg::~LoginQRCodeNotifyPkg() {
  // @@protoc_insertion_point(destructor:micromsg.LoginQRCodeNotifyPkg)
  SharedDtor();
}

void LoginQRCodeNotifyPkg::SharedDtor() {
  if (this != internal_default_instance()) {
    delete notifydata_;
  }
}

void LoginQRCodeNotifyPkg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginQRCodeNotifyPkg::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginQRCodeNotifyPkg& LoginQRCodeNotifyPkg::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

LoginQRCodeNotifyPkg* LoginQRCodeNotifyPkg::New(::google::protobuf::Arena* arena) const {
  LoginQRCodeNotifyPkg* n = new LoginQRCodeNotifyPkg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginQRCodeNotifyPkg::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.LoginQRCodeNotifyPkg)
  if (has_notifydata()) {
    GOOGLE_DCHECK(notifydata_ != NULL);
    notifydata_->::micromsg::SKBuiltinBuffer_t::Clear();
  }
  opcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LoginQRCodeNotifyPkg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.LoginQRCodeNotifyPkg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.SKBuiltinBuffer_t NotifyData = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notifydata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 OPCode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_opcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.LoginQRCodeNotifyPkg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.LoginQRCodeNotifyPkg)
  return false;
#undef DO_
}

void LoginQRCodeNotifyPkg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.LoginQRCodeNotifyPkg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinBuffer_t NotifyData = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->notifydata_, output);
  }

  // required uint32 OPCode = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->opcode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.LoginQRCodeNotifyPkg)
}

::google::protobuf::uint8* LoginQRCodeNotifyPkg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.LoginQRCodeNotifyPkg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinBuffer_t NotifyData = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->notifydata_, deterministic, target);
  }

  // required uint32 OPCode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->opcode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.LoginQRCodeNotifyPkg)
  return target;
}

size_t LoginQRCodeNotifyPkg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.LoginQRCodeNotifyPkg)
  size_t total_size = 0;

  if (has_notifydata()) {
    // required .micromsg.SKBuiltinBuffer_t NotifyData = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->notifydata_);
  }

  if (has_opcode()) {
    // required uint32 OPCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());
  }

  return total_size;
}
size_t LoginQRCodeNotifyPkg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.LoginQRCodeNotifyPkg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.SKBuiltinBuffer_t NotifyData = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->notifydata_);

    // required uint32 OPCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginQRCodeNotifyPkg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.LoginQRCodeNotifyPkg)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginQRCodeNotifyPkg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginQRCodeNotifyPkg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.LoginQRCodeNotifyPkg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.LoginQRCodeNotifyPkg)
    MergeFrom(*source);
  }
}

void LoginQRCodeNotifyPkg::MergeFrom(const LoginQRCodeNotifyPkg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.LoginQRCodeNotifyPkg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_notifydata()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.notifydata());
    }
    if (cached_has_bits & 0x00000002u) {
      opcode_ = from.opcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LoginQRCodeNotifyPkg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.LoginQRCodeNotifyPkg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginQRCodeNotifyPkg::CopyFrom(const LoginQRCodeNotifyPkg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.LoginQRCodeNotifyPkg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginQRCodeNotifyPkg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_notifydata()) {
    if (!this->notifydata_->IsInitialized()) return false;
  }
  return true;
}

void LoginQRCodeNotifyPkg::Swap(LoginQRCodeNotifyPkg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginQRCodeNotifyPkg::InternalSwap(LoginQRCodeNotifyPkg* other) {
  std::swap(notifydata_, other->notifydata_);
  std::swap(opcode_, other->opcode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginQRCodeNotifyPkg::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginQRCodeNotifyPkg

// required .micromsg.SKBuiltinBuffer_t NotifyData = 1;
bool LoginQRCodeNotifyPkg::has_notifydata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LoginQRCodeNotifyPkg::set_has_notifydata() {
  _has_bits_[0] |= 0x00000001u;
}
void LoginQRCodeNotifyPkg::clear_has_notifydata() {
  _has_bits_[0] &= ~0x00000001u;
}
void LoginQRCodeNotifyPkg::clear_notifydata() {
  if (notifydata_ != NULL) notifydata_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_notifydata();
}
const ::micromsg::SKBuiltinBuffer_t& LoginQRCodeNotifyPkg::notifydata() const {
  // @@protoc_insertion_point(field_get:micromsg.LoginQRCodeNotifyPkg.NotifyData)
  return notifydata_ != NULL ? *notifydata_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* LoginQRCodeNotifyPkg::mutable_notifydata() {
  set_has_notifydata();
  if (notifydata_ == NULL) {
    notifydata_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.LoginQRCodeNotifyPkg.NotifyData)
  return notifydata_;
}
::micromsg::SKBuiltinBuffer_t* LoginQRCodeNotifyPkg::release_notifydata() {
  // @@protoc_insertion_point(field_release:micromsg.LoginQRCodeNotifyPkg.NotifyData)
  clear_has_notifydata();
  ::micromsg::SKBuiltinBuffer_t* temp = notifydata_;
  notifydata_ = NULL;
  return temp;
}
void LoginQRCodeNotifyPkg::set_allocated_notifydata(::micromsg::SKBuiltinBuffer_t* notifydata) {
  delete notifydata_;
  notifydata_ = notifydata;
  if (notifydata) {
    set_has_notifydata();
  } else {
    clear_has_notifydata();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.LoginQRCodeNotifyPkg.NotifyData)
}

// required uint32 OPCode = 2;
bool LoginQRCodeNotifyPkg::has_opcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LoginQRCodeNotifyPkg::set_has_opcode() {
  _has_bits_[0] |= 0x00000002u;
}
void LoginQRCodeNotifyPkg::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000002u;
}
void LoginQRCodeNotifyPkg::clear_opcode() {
  opcode_ = 0u;
  clear_has_opcode();
}
::google::protobuf::uint32 LoginQRCodeNotifyPkg::opcode() const {
  // @@protoc_insertion_point(field_get:micromsg.LoginQRCodeNotifyPkg.OPCode)
  return opcode_;
}
void LoginQRCodeNotifyPkg::set_opcode(::google::protobuf::uint32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:micromsg.LoginQRCodeNotifyPkg.OPCode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetLoginQRCodeRequest::kBaseRequestFieldNumber;
const int GetLoginQRCodeRequest::kRandomEncryKeyFieldNumber;
const int GetLoginQRCodeRequest::kOPCodeFieldNumber;
const int GetLoginQRCodeRequest::kDeviceNameFieldNumber;
const int GetLoginQRCodeRequest::kUserNameFieldNumber;
const int GetLoginQRCodeRequest::kExtDevLoginTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetLoginQRCodeRequest::GetLoginQRCodeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetLoginQRCodeRequest)
}
GetLoginQRCodeRequest::GetLoginQRCodeRequest(const GetLoginQRCodeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  devicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_devicename()) {
    devicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicename_);
  }
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_randomencrykey()) {
    randomencrykey_ = new ::micromsg::SKBuiltinBuffer_t(*from.randomencrykey_);
  } else {
    randomencrykey_ = NULL;
  }
  ::memcpy(&opcode_, &from.opcode_,
    reinterpret_cast<char*>(&extdevlogintype_) -
    reinterpret_cast<char*>(&opcode_) + sizeof(extdevlogintype_));
  // @@protoc_insertion_point(copy_constructor:micromsg.GetLoginQRCodeRequest)
}

void GetLoginQRCodeRequest::SharedCtor() {
  _cached_size_ = 0;
  devicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&extdevlogintype_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(extdevlogintype_));
}

GetLoginQRCodeRequest::~GetLoginQRCodeRequest() {
  // @@protoc_insertion_point(destructor:micromsg.GetLoginQRCodeRequest)
  SharedDtor();
}

void GetLoginQRCodeRequest::SharedDtor() {
  devicename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete randomencrykey_;
  }
}

void GetLoginQRCodeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLoginQRCodeRequest::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetLoginQRCodeRequest& GetLoginQRCodeRequest::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetLoginQRCodeRequest* GetLoginQRCodeRequest::New(::google::protobuf::Arena* arena) const {
  GetLoginQRCodeRequest* n = new GetLoginQRCodeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetLoginQRCodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetLoginQRCodeRequest)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_devicename()) {
      GOOGLE_DCHECK(!devicename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*devicename_.UnsafeRawStringPointer())->clear();
    }
    if (has_username()) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_randomencrykey()) {
      GOOGLE_DCHECK(randomencrykey_ != NULL);
      randomencrykey_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 48u) {
    ::memset(&opcode_, 0, reinterpret_cast<char*>(&extdevlogintype_) -
      reinterpret_cast<char*>(&opcode_) + sizeof(extdevlogintype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetLoginQRCodeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetLoginQRCodeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_randomencrykey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 OPCode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_opcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string DeviceName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devicename().data(), this->devicename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetLoginQRCodeRequest.DeviceName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string UserName = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetLoginQRCodeRequest.UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ExtDevLoginType = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_extdevlogintype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extdevlogintype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetLoginQRCodeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetLoginQRCodeRequest)
  return false;
#undef DO_
}

void GetLoginQRCodeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetLoginQRCodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->randomencrykey_, output);
  }

  // optional uint32 OPCode = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->opcode(), output);
  }

  // optional string DeviceName = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetLoginQRCodeRequest.DeviceName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->devicename(), output);
  }

  // optional string UserName = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetLoginQRCodeRequest.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->username(), output);
  }

  // optional uint32 ExtDevLoginType = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->extdevlogintype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetLoginQRCodeRequest)
}

::google::protobuf::uint8* GetLoginQRCodeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetLoginQRCodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->randomencrykey_, deterministic, target);
  }

  // optional uint32 OPCode = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->opcode(), target);
  }

  // optional string DeviceName = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetLoginQRCodeRequest.DeviceName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->devicename(), target);
  }

  // optional string UserName = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetLoginQRCodeRequest.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->username(), target);
  }

  // optional uint32 ExtDevLoginType = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->extdevlogintype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetLoginQRCodeRequest)
  return target;
}

size_t GetLoginQRCodeRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetLoginQRCodeRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_randomencrykey()) {
    // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->randomencrykey_);
  }

  return total_size;
}
size_t GetLoginQRCodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetLoginQRCodeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->randomencrykey_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string DeviceName = 4;
    if (has_devicename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicename());
    }

    // optional string UserName = 5;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

  }
  if (_has_bits_[0 / 32] & 48u) {
    // optional uint32 OPCode = 3;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opcode());
    }

    // optional uint32 ExtDevLoginType = 6;
    if (has_extdevlogintype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extdevlogintype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLoginQRCodeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetLoginQRCodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLoginQRCodeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetLoginQRCodeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetLoginQRCodeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetLoginQRCodeRequest)
    MergeFrom(*source);
  }
}

void GetLoginQRCodeRequest::MergeFrom(const GetLoginQRCodeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetLoginQRCodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_devicename();
      devicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicename_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_randomencrykey()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.randomencrykey());
    }
    if (cached_has_bits & 0x00000010u) {
      opcode_ = from.opcode_;
    }
    if (cached_has_bits & 0x00000020u) {
      extdevlogintype_ = from.extdevlogintype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetLoginQRCodeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetLoginQRCodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLoginQRCodeRequest::CopyFrom(const GetLoginQRCodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetLoginQRCodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLoginQRCodeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_randomencrykey()) {
    if (!this->randomencrykey_->IsInitialized()) return false;
  }
  return true;
}

void GetLoginQRCodeRequest::Swap(GetLoginQRCodeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetLoginQRCodeRequest::InternalSwap(GetLoginQRCodeRequest* other) {
  devicename_.Swap(&other->devicename_);
  username_.Swap(&other->username_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(randomencrykey_, other->randomencrykey_);
  std::swap(opcode_, other->opcode_);
  std::swap(extdevlogintype_, other->extdevlogintype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetLoginQRCodeRequest::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetLoginQRCodeRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool GetLoginQRCodeRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetLoginQRCodeRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
void GetLoginQRCodeRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetLoginQRCodeRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GetLoginQRCodeRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLoginQRCodeRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GetLoginQRCodeRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetLoginQRCodeRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GetLoginQRCodeRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetLoginQRCodeRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GetLoginQRCodeRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetLoginQRCodeRequest.BaseRequest)
}

// required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 2;
bool GetLoginQRCodeRequest::has_randomencrykey() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetLoginQRCodeRequest::set_has_randomencrykey() {
  _has_bits_[0] |= 0x00000008u;
}
void GetLoginQRCodeRequest::clear_has_randomencrykey() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetLoginQRCodeRequest::clear_randomencrykey() {
  if (randomencrykey_ != NULL) randomencrykey_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_randomencrykey();
}
const ::micromsg::SKBuiltinBuffer_t& GetLoginQRCodeRequest::randomencrykey() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLoginQRCodeRequest.RandomEncryKey)
  return randomencrykey_ != NULL ? *randomencrykey_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* GetLoginQRCodeRequest::mutable_randomencrykey() {
  set_has_randomencrykey();
  if (randomencrykey_ == NULL) {
    randomencrykey_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetLoginQRCodeRequest.RandomEncryKey)
  return randomencrykey_;
}
::micromsg::SKBuiltinBuffer_t* GetLoginQRCodeRequest::release_randomencrykey() {
  // @@protoc_insertion_point(field_release:micromsg.GetLoginQRCodeRequest.RandomEncryKey)
  clear_has_randomencrykey();
  ::micromsg::SKBuiltinBuffer_t* temp = randomencrykey_;
  randomencrykey_ = NULL;
  return temp;
}
void GetLoginQRCodeRequest::set_allocated_randomencrykey(::micromsg::SKBuiltinBuffer_t* randomencrykey) {
  delete randomencrykey_;
  randomencrykey_ = randomencrykey;
  if (randomencrykey) {
    set_has_randomencrykey();
  } else {
    clear_has_randomencrykey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetLoginQRCodeRequest.RandomEncryKey)
}

// optional uint32 OPCode = 3;
bool GetLoginQRCodeRequest::has_opcode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GetLoginQRCodeRequest::set_has_opcode() {
  _has_bits_[0] |= 0x00000010u;
}
void GetLoginQRCodeRequest::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000010u;
}
void GetLoginQRCodeRequest::clear_opcode() {
  opcode_ = 0u;
  clear_has_opcode();
}
::google::protobuf::uint32 GetLoginQRCodeRequest::opcode() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLoginQRCodeRequest.OPCode)
  return opcode_;
}
void GetLoginQRCodeRequest::set_opcode(::google::protobuf::uint32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetLoginQRCodeRequest.OPCode)
}

// optional string DeviceName = 4;
bool GetLoginQRCodeRequest::has_devicename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetLoginQRCodeRequest::set_has_devicename() {
  _has_bits_[0] |= 0x00000001u;
}
void GetLoginQRCodeRequest::clear_has_devicename() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetLoginQRCodeRequest::clear_devicename() {
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_devicename();
}
const ::std::string& GetLoginQRCodeRequest::devicename() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLoginQRCodeRequest.DeviceName)
  return devicename_.GetNoArena();
}
void GetLoginQRCodeRequest::set_devicename(const ::std::string& value) {
  set_has_devicename();
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetLoginQRCodeRequest.DeviceName)
}
#if LANG_CXX11
void GetLoginQRCodeRequest::set_devicename(::std::string&& value) {
  set_has_devicename();
  devicename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetLoginQRCodeRequest.DeviceName)
}
#endif
void GetLoginQRCodeRequest::set_devicename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_devicename();
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetLoginQRCodeRequest.DeviceName)
}
void GetLoginQRCodeRequest::set_devicename(const char* value, size_t size) {
  set_has_devicename();
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetLoginQRCodeRequest.DeviceName)
}
::std::string* GetLoginQRCodeRequest::mutable_devicename() {
  set_has_devicename();
  // @@protoc_insertion_point(field_mutable:micromsg.GetLoginQRCodeRequest.DeviceName)
  return devicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetLoginQRCodeRequest::release_devicename() {
  // @@protoc_insertion_point(field_release:micromsg.GetLoginQRCodeRequest.DeviceName)
  clear_has_devicename();
  return devicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetLoginQRCodeRequest::set_allocated_devicename(::std::string* devicename) {
  if (devicename != NULL) {
    set_has_devicename();
  } else {
    clear_has_devicename();
  }
  devicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicename);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetLoginQRCodeRequest.DeviceName)
}

// optional string UserName = 5;
bool GetLoginQRCodeRequest::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetLoginQRCodeRequest::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
void GetLoginQRCodeRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetLoginQRCodeRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& GetLoginQRCodeRequest::username() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLoginQRCodeRequest.UserName)
  return username_.GetNoArena();
}
void GetLoginQRCodeRequest::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetLoginQRCodeRequest.UserName)
}
#if LANG_CXX11
void GetLoginQRCodeRequest::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetLoginQRCodeRequest.UserName)
}
#endif
void GetLoginQRCodeRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetLoginQRCodeRequest.UserName)
}
void GetLoginQRCodeRequest::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetLoginQRCodeRequest.UserName)
}
::std::string* GetLoginQRCodeRequest::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.GetLoginQRCodeRequest.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetLoginQRCodeRequest::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.GetLoginQRCodeRequest.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetLoginQRCodeRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetLoginQRCodeRequest.UserName)
}

// optional uint32 ExtDevLoginType = 6;
bool GetLoginQRCodeRequest::has_extdevlogintype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GetLoginQRCodeRequest::set_has_extdevlogintype() {
  _has_bits_[0] |= 0x00000020u;
}
void GetLoginQRCodeRequest::clear_has_extdevlogintype() {
  _has_bits_[0] &= ~0x00000020u;
}
void GetLoginQRCodeRequest::clear_extdevlogintype() {
  extdevlogintype_ = 0u;
  clear_has_extdevlogintype();
}
::google::protobuf::uint32 GetLoginQRCodeRequest::extdevlogintype() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLoginQRCodeRequest.ExtDevLoginType)
  return extdevlogintype_;
}
void GetLoginQRCodeRequest::set_extdevlogintype(::google::protobuf::uint32 value) {
  set_has_extdevlogintype();
  extdevlogintype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetLoginQRCodeRequest.ExtDevLoginType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetLoginQRCodeResponse::kBaseResponseFieldNumber;
const int GetLoginQRCodeResponse::kQRCodeFieldNumber;
const int GetLoginQRCodeResponse::kUUIDFieldNumber;
const int GetLoginQRCodeResponse::kCheckTimeFieldNumber;
const int GetLoginQRCodeResponse::kNotifyKeyFieldNumber;
const int GetLoginQRCodeResponse::kExpiredTimeFieldNumber;
const int GetLoginQRCodeResponse::kBlueToothBroadCastUUIDFieldNumber;
const int GetLoginQRCodeResponse::kBlueToothBroadCastContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetLoginQRCodeResponse::GetLoginQRCodeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetLoginQRCodeResponse)
}
GetLoginQRCodeResponse::GetLoginQRCodeResponse(const GetLoginQRCodeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_uuid()) {
    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  bluetoothbroadcastuuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bluetoothbroadcastuuid()) {
    bluetoothbroadcastuuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bluetoothbroadcastuuid_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_qrcode()) {
    qrcode_ = new ::micromsg::SKBuiltinBuffer_t(*from.qrcode_);
  } else {
    qrcode_ = NULL;
  }
  if (from.has_notifykey()) {
    notifykey_ = new ::micromsg::SKBuiltinBuffer_t(*from.notifykey_);
  } else {
    notifykey_ = NULL;
  }
  if (from.has_bluetoothbroadcastcontent()) {
    bluetoothbroadcastcontent_ = new ::micromsg::SKBuiltinBuffer_t(*from.bluetoothbroadcastcontent_);
  } else {
    bluetoothbroadcastcontent_ = NULL;
  }
  ::memcpy(&checktime_, &from.checktime_,
    reinterpret_cast<char*>(&expiredtime_) -
    reinterpret_cast<char*>(&checktime_) + sizeof(expiredtime_));
  // @@protoc_insertion_point(copy_constructor:micromsg.GetLoginQRCodeResponse)
}

void GetLoginQRCodeResponse::SharedCtor() {
  _cached_size_ = 0;
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bluetoothbroadcastuuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&expiredtime_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(expiredtime_));
}

GetLoginQRCodeResponse::~GetLoginQRCodeResponse() {
  // @@protoc_insertion_point(destructor:micromsg.GetLoginQRCodeResponse)
  SharedDtor();
}

void GetLoginQRCodeResponse::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bluetoothbroadcastuuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete qrcode_;
  }
  if (this != internal_default_instance()) {
    delete notifykey_;
  }
  if (this != internal_default_instance()) {
    delete bluetoothbroadcastcontent_;
  }
}

void GetLoginQRCodeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLoginQRCodeResponse::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetLoginQRCodeResponse& GetLoginQRCodeResponse::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetLoginQRCodeResponse* GetLoginQRCodeResponse::New(::google::protobuf::Arena* arena) const {
  GetLoginQRCodeResponse* n = new GetLoginQRCodeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetLoginQRCodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetLoginQRCodeResponse)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_uuid()) {
      GOOGLE_DCHECK(!uuid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*uuid_.UnsafeRawStringPointer())->clear();
    }
    if (has_bluetoothbroadcastuuid()) {
      GOOGLE_DCHECK(!bluetoothbroadcastuuid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bluetoothbroadcastuuid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_qrcode()) {
      GOOGLE_DCHECK(qrcode_ != NULL);
      qrcode_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_notifykey()) {
      GOOGLE_DCHECK(notifykey_ != NULL);
      notifykey_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_bluetoothbroadcastcontent()) {
      GOOGLE_DCHECK(bluetoothbroadcastcontent_ != NULL);
      bluetoothbroadcastcontent_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 192u) {
    ::memset(&checktime_, 0, reinterpret_cast<char*>(&expiredtime_) -
      reinterpret_cast<char*>(&checktime_) + sizeof(expiredtime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetLoginQRCodeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetLoginQRCodeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t QRCode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qrcode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string UUID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetLoginQRCodeResponse.UUID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 CheckTime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_checktime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &checktime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t NotifyKey = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notifykey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ExpiredTime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_expiredtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expiredtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string BlueToothBroadCastUUID = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bluetoothbroadcastuuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bluetoothbroadcastuuid().data(), this->bluetoothbroadcastuuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetLoginQRCodeResponse.BlueToothBroadCastUUID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t BlueToothBroadCastContent = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bluetoothbroadcastcontent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetLoginQRCodeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetLoginQRCodeResponse)
  return false;
#undef DO_
}

void GetLoginQRCodeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetLoginQRCodeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required .micromsg.SKBuiltinBuffer_t QRCode = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->qrcode_, output);
  }

  // optional string UUID = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetLoginQRCodeResponse.UUID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->uuid(), output);
  }

  // required uint32 CheckTime = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->checktime(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t NotifyKey = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->notifykey_, output);
  }

  // optional uint32 ExpiredTime = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->expiredtime(), output);
  }

  // optional string BlueToothBroadCastUUID = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bluetoothbroadcastuuid().data(), this->bluetoothbroadcastuuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetLoginQRCodeResponse.BlueToothBroadCastUUID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->bluetoothbroadcastuuid(), output);
  }

  // optional .micromsg.SKBuiltinBuffer_t BlueToothBroadCastContent = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->bluetoothbroadcastcontent_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetLoginQRCodeResponse)
}

::google::protobuf::uint8* GetLoginQRCodeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetLoginQRCodeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t QRCode = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->qrcode_, deterministic, target);
  }

  // optional string UUID = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetLoginQRCodeResponse.UUID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uuid(), target);
  }

  // required uint32 CheckTime = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->checktime(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t NotifyKey = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->notifykey_, deterministic, target);
  }

  // optional uint32 ExpiredTime = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->expiredtime(), target);
  }

  // optional string BlueToothBroadCastUUID = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bluetoothbroadcastuuid().data(), this->bluetoothbroadcastuuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetLoginQRCodeResponse.BlueToothBroadCastUUID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->bluetoothbroadcastuuid(), target);
  }

  // optional .micromsg.SKBuiltinBuffer_t BlueToothBroadCastContent = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->bluetoothbroadcastcontent_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetLoginQRCodeResponse)
  return target;
}

size_t GetLoginQRCodeResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetLoginQRCodeResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_qrcode()) {
    // required .micromsg.SKBuiltinBuffer_t QRCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->qrcode_);
  }

  if (has_notifykey()) {
    // required .micromsg.SKBuiltinBuffer_t NotifyKey = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->notifykey_);
  }

  if (has_checktime()) {
    // required uint32 CheckTime = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->checktime());
  }

  return total_size;
}
size_t GetLoginQRCodeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetLoginQRCodeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000005c) ^ 0x0000005c) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required .micromsg.SKBuiltinBuffer_t QRCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->qrcode_);

    // required .micromsg.SKBuiltinBuffer_t NotifyKey = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->notifykey_);

    // required uint32 CheckTime = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->checktime());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string UUID = 3;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // optional string BlueToothBroadCastUUID = 7;
    if (has_bluetoothbroadcastuuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bluetoothbroadcastuuid());
    }

  }
  // optional .micromsg.SKBuiltinBuffer_t BlueToothBroadCastContent = 8;
  if (has_bluetoothbroadcastcontent()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bluetoothbroadcastcontent_);
  }

  // optional uint32 ExpiredTime = 6;
  if (has_expiredtime()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->expiredtime());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLoginQRCodeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetLoginQRCodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLoginQRCodeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetLoginQRCodeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetLoginQRCodeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetLoginQRCodeResponse)
    MergeFrom(*source);
  }
}

void GetLoginQRCodeResponse::MergeFrom(const GetLoginQRCodeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetLoginQRCodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_uuid();
      uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_bluetoothbroadcastuuid();
      bluetoothbroadcastuuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bluetoothbroadcastuuid_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_qrcode()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.qrcode());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_notifykey()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.notifykey());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_bluetoothbroadcastcontent()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.bluetoothbroadcastcontent());
    }
    if (cached_has_bits & 0x00000040u) {
      checktime_ = from.checktime_;
    }
    if (cached_has_bits & 0x00000080u) {
      expiredtime_ = from.expiredtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetLoginQRCodeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetLoginQRCodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLoginQRCodeResponse::CopyFrom(const GetLoginQRCodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetLoginQRCodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLoginQRCodeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000005c) != 0x0000005c) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_qrcode()) {
    if (!this->qrcode_->IsInitialized()) return false;
  }
  if (has_notifykey()) {
    if (!this->notifykey_->IsInitialized()) return false;
  }
  if (has_bluetoothbroadcastcontent()) {
    if (!this->bluetoothbroadcastcontent_->IsInitialized()) return false;
  }
  return true;
}

void GetLoginQRCodeResponse::Swap(GetLoginQRCodeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetLoginQRCodeResponse::InternalSwap(GetLoginQRCodeResponse* other) {
  uuid_.Swap(&other->uuid_);
  bluetoothbroadcastuuid_.Swap(&other->bluetoothbroadcastuuid_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(qrcode_, other->qrcode_);
  std::swap(notifykey_, other->notifykey_);
  std::swap(bluetoothbroadcastcontent_, other->bluetoothbroadcastcontent_);
  std::swap(checktime_, other->checktime_);
  std::swap(expiredtime_, other->expiredtime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetLoginQRCodeResponse::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetLoginQRCodeResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetLoginQRCodeResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetLoginQRCodeResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000004u;
}
void GetLoginQRCodeResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetLoginQRCodeResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetLoginQRCodeResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLoginQRCodeResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetLoginQRCodeResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetLoginQRCodeResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetLoginQRCodeResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetLoginQRCodeResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetLoginQRCodeResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetLoginQRCodeResponse.BaseResponse)
}

// required .micromsg.SKBuiltinBuffer_t QRCode = 2;
bool GetLoginQRCodeResponse::has_qrcode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetLoginQRCodeResponse::set_has_qrcode() {
  _has_bits_[0] |= 0x00000008u;
}
void GetLoginQRCodeResponse::clear_has_qrcode() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetLoginQRCodeResponse::clear_qrcode() {
  if (qrcode_ != NULL) qrcode_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_qrcode();
}
const ::micromsg::SKBuiltinBuffer_t& GetLoginQRCodeResponse::qrcode() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLoginQRCodeResponse.QRCode)
  return qrcode_ != NULL ? *qrcode_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* GetLoginQRCodeResponse::mutable_qrcode() {
  set_has_qrcode();
  if (qrcode_ == NULL) {
    qrcode_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetLoginQRCodeResponse.QRCode)
  return qrcode_;
}
::micromsg::SKBuiltinBuffer_t* GetLoginQRCodeResponse::release_qrcode() {
  // @@protoc_insertion_point(field_release:micromsg.GetLoginQRCodeResponse.QRCode)
  clear_has_qrcode();
  ::micromsg::SKBuiltinBuffer_t* temp = qrcode_;
  qrcode_ = NULL;
  return temp;
}
void GetLoginQRCodeResponse::set_allocated_qrcode(::micromsg::SKBuiltinBuffer_t* qrcode) {
  delete qrcode_;
  qrcode_ = qrcode;
  if (qrcode) {
    set_has_qrcode();
  } else {
    clear_has_qrcode();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetLoginQRCodeResponse.QRCode)
}

// optional string UUID = 3;
bool GetLoginQRCodeResponse::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetLoginQRCodeResponse::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
void GetLoginQRCodeResponse::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetLoginQRCodeResponse::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuid();
}
const ::std::string& GetLoginQRCodeResponse::uuid() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLoginQRCodeResponse.UUID)
  return uuid_.GetNoArena();
}
void GetLoginQRCodeResponse::set_uuid(const ::std::string& value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetLoginQRCodeResponse.UUID)
}
#if LANG_CXX11
void GetLoginQRCodeResponse::set_uuid(::std::string&& value) {
  set_has_uuid();
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetLoginQRCodeResponse.UUID)
}
#endif
void GetLoginQRCodeResponse::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetLoginQRCodeResponse.UUID)
}
void GetLoginQRCodeResponse::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetLoginQRCodeResponse.UUID)
}
::std::string* GetLoginQRCodeResponse::mutable_uuid() {
  set_has_uuid();
  // @@protoc_insertion_point(field_mutable:micromsg.GetLoginQRCodeResponse.UUID)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetLoginQRCodeResponse::release_uuid() {
  // @@protoc_insertion_point(field_release:micromsg.GetLoginQRCodeResponse.UUID)
  clear_has_uuid();
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetLoginQRCodeResponse::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    set_has_uuid();
  } else {
    clear_has_uuid();
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetLoginQRCodeResponse.UUID)
}

// required uint32 CheckTime = 4;
bool GetLoginQRCodeResponse::has_checktime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GetLoginQRCodeResponse::set_has_checktime() {
  _has_bits_[0] |= 0x00000040u;
}
void GetLoginQRCodeResponse::clear_has_checktime() {
  _has_bits_[0] &= ~0x00000040u;
}
void GetLoginQRCodeResponse::clear_checktime() {
  checktime_ = 0u;
  clear_has_checktime();
}
::google::protobuf::uint32 GetLoginQRCodeResponse::checktime() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLoginQRCodeResponse.CheckTime)
  return checktime_;
}
void GetLoginQRCodeResponse::set_checktime(::google::protobuf::uint32 value) {
  set_has_checktime();
  checktime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetLoginQRCodeResponse.CheckTime)
}

// required .micromsg.SKBuiltinBuffer_t NotifyKey = 5;
bool GetLoginQRCodeResponse::has_notifykey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GetLoginQRCodeResponse::set_has_notifykey() {
  _has_bits_[0] |= 0x00000010u;
}
void GetLoginQRCodeResponse::clear_has_notifykey() {
  _has_bits_[0] &= ~0x00000010u;
}
void GetLoginQRCodeResponse::clear_notifykey() {
  if (notifykey_ != NULL) notifykey_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_notifykey();
}
const ::micromsg::SKBuiltinBuffer_t& GetLoginQRCodeResponse::notifykey() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLoginQRCodeResponse.NotifyKey)
  return notifykey_ != NULL ? *notifykey_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* GetLoginQRCodeResponse::mutable_notifykey() {
  set_has_notifykey();
  if (notifykey_ == NULL) {
    notifykey_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetLoginQRCodeResponse.NotifyKey)
  return notifykey_;
}
::micromsg::SKBuiltinBuffer_t* GetLoginQRCodeResponse::release_notifykey() {
  // @@protoc_insertion_point(field_release:micromsg.GetLoginQRCodeResponse.NotifyKey)
  clear_has_notifykey();
  ::micromsg::SKBuiltinBuffer_t* temp = notifykey_;
  notifykey_ = NULL;
  return temp;
}
void GetLoginQRCodeResponse::set_allocated_notifykey(::micromsg::SKBuiltinBuffer_t* notifykey) {
  delete notifykey_;
  notifykey_ = notifykey;
  if (notifykey) {
    set_has_notifykey();
  } else {
    clear_has_notifykey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetLoginQRCodeResponse.NotifyKey)
}

// optional uint32 ExpiredTime = 6;
bool GetLoginQRCodeResponse::has_expiredtime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void GetLoginQRCodeResponse::set_has_expiredtime() {
  _has_bits_[0] |= 0x00000080u;
}
void GetLoginQRCodeResponse::clear_has_expiredtime() {
  _has_bits_[0] &= ~0x00000080u;
}
void GetLoginQRCodeResponse::clear_expiredtime() {
  expiredtime_ = 0u;
  clear_has_expiredtime();
}
::google::protobuf::uint32 GetLoginQRCodeResponse::expiredtime() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLoginQRCodeResponse.ExpiredTime)
  return expiredtime_;
}
void GetLoginQRCodeResponse::set_expiredtime(::google::protobuf::uint32 value) {
  set_has_expiredtime();
  expiredtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetLoginQRCodeResponse.ExpiredTime)
}

// optional string BlueToothBroadCastUUID = 7;
bool GetLoginQRCodeResponse::has_bluetoothbroadcastuuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetLoginQRCodeResponse::set_has_bluetoothbroadcastuuid() {
  _has_bits_[0] |= 0x00000002u;
}
void GetLoginQRCodeResponse::clear_has_bluetoothbroadcastuuid() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetLoginQRCodeResponse::clear_bluetoothbroadcastuuid() {
  bluetoothbroadcastuuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bluetoothbroadcastuuid();
}
const ::std::string& GetLoginQRCodeResponse::bluetoothbroadcastuuid() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLoginQRCodeResponse.BlueToothBroadCastUUID)
  return bluetoothbroadcastuuid_.GetNoArena();
}
void GetLoginQRCodeResponse::set_bluetoothbroadcastuuid(const ::std::string& value) {
  set_has_bluetoothbroadcastuuid();
  bluetoothbroadcastuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetLoginQRCodeResponse.BlueToothBroadCastUUID)
}
#if LANG_CXX11
void GetLoginQRCodeResponse::set_bluetoothbroadcastuuid(::std::string&& value) {
  set_has_bluetoothbroadcastuuid();
  bluetoothbroadcastuuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetLoginQRCodeResponse.BlueToothBroadCastUUID)
}
#endif
void GetLoginQRCodeResponse::set_bluetoothbroadcastuuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bluetoothbroadcastuuid();
  bluetoothbroadcastuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetLoginQRCodeResponse.BlueToothBroadCastUUID)
}
void GetLoginQRCodeResponse::set_bluetoothbroadcastuuid(const char* value, size_t size) {
  set_has_bluetoothbroadcastuuid();
  bluetoothbroadcastuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetLoginQRCodeResponse.BlueToothBroadCastUUID)
}
::std::string* GetLoginQRCodeResponse::mutable_bluetoothbroadcastuuid() {
  set_has_bluetoothbroadcastuuid();
  // @@protoc_insertion_point(field_mutable:micromsg.GetLoginQRCodeResponse.BlueToothBroadCastUUID)
  return bluetoothbroadcastuuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetLoginQRCodeResponse::release_bluetoothbroadcastuuid() {
  // @@protoc_insertion_point(field_release:micromsg.GetLoginQRCodeResponse.BlueToothBroadCastUUID)
  clear_has_bluetoothbroadcastuuid();
  return bluetoothbroadcastuuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetLoginQRCodeResponse::set_allocated_bluetoothbroadcastuuid(::std::string* bluetoothbroadcastuuid) {
  if (bluetoothbroadcastuuid != NULL) {
    set_has_bluetoothbroadcastuuid();
  } else {
    clear_has_bluetoothbroadcastuuid();
  }
  bluetoothbroadcastuuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bluetoothbroadcastuuid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetLoginQRCodeResponse.BlueToothBroadCastUUID)
}

// optional .micromsg.SKBuiltinBuffer_t BlueToothBroadCastContent = 8;
bool GetLoginQRCodeResponse::has_bluetoothbroadcastcontent() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GetLoginQRCodeResponse::set_has_bluetoothbroadcastcontent() {
  _has_bits_[0] |= 0x00000020u;
}
void GetLoginQRCodeResponse::clear_has_bluetoothbroadcastcontent() {
  _has_bits_[0] &= ~0x00000020u;
}
void GetLoginQRCodeResponse::clear_bluetoothbroadcastcontent() {
  if (bluetoothbroadcastcontent_ != NULL) bluetoothbroadcastcontent_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_bluetoothbroadcastcontent();
}
const ::micromsg::SKBuiltinBuffer_t& GetLoginQRCodeResponse::bluetoothbroadcastcontent() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLoginQRCodeResponse.BlueToothBroadCastContent)
  return bluetoothbroadcastcontent_ != NULL ? *bluetoothbroadcastcontent_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* GetLoginQRCodeResponse::mutable_bluetoothbroadcastcontent() {
  set_has_bluetoothbroadcastcontent();
  if (bluetoothbroadcastcontent_ == NULL) {
    bluetoothbroadcastcontent_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetLoginQRCodeResponse.BlueToothBroadCastContent)
  return bluetoothbroadcastcontent_;
}
::micromsg::SKBuiltinBuffer_t* GetLoginQRCodeResponse::release_bluetoothbroadcastcontent() {
  // @@protoc_insertion_point(field_release:micromsg.GetLoginQRCodeResponse.BlueToothBroadCastContent)
  clear_has_bluetoothbroadcastcontent();
  ::micromsg::SKBuiltinBuffer_t* temp = bluetoothbroadcastcontent_;
  bluetoothbroadcastcontent_ = NULL;
  return temp;
}
void GetLoginQRCodeResponse::set_allocated_bluetoothbroadcastcontent(::micromsg::SKBuiltinBuffer_t* bluetoothbroadcastcontent) {
  delete bluetoothbroadcastcontent_;
  bluetoothbroadcastcontent_ = bluetoothbroadcastcontent;
  if (bluetoothbroadcastcontent) {
    set_has_bluetoothbroadcastcontent();
  } else {
    clear_has_bluetoothbroadcastcontent();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetLoginQRCodeResponse.BlueToothBroadCastContent)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckLoginQRCodeRequest::kBaseRequestFieldNumber;
const int CheckLoginQRCodeRequest::kRandomEncryKeyFieldNumber;
const int CheckLoginQRCodeRequest::kUUIDFieldNumber;
const int CheckLoginQRCodeRequest::kTimeStampFieldNumber;
const int CheckLoginQRCodeRequest::kOPCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckLoginQRCodeRequest::CheckLoginQRCodeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.CheckLoginQRCodeRequest)
}
CheckLoginQRCodeRequest::CheckLoginQRCodeRequest(const CheckLoginQRCodeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_uuid()) {
    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_randomencrykey()) {
    randomencrykey_ = new ::micromsg::SKBuiltinBuffer_t(*from.randomencrykey_);
  } else {
    randomencrykey_ = NULL;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    reinterpret_cast<char*>(&opcode_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(opcode_));
  // @@protoc_insertion_point(copy_constructor:micromsg.CheckLoginQRCodeRequest)
}

void CheckLoginQRCodeRequest::SharedCtor() {
  _cached_size_ = 0;
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&opcode_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(opcode_));
}

CheckLoginQRCodeRequest::~CheckLoginQRCodeRequest() {
  // @@protoc_insertion_point(destructor:micromsg.CheckLoginQRCodeRequest)
  SharedDtor();
}

void CheckLoginQRCodeRequest::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete randomencrykey_;
  }
}

void CheckLoginQRCodeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckLoginQRCodeRequest::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CheckLoginQRCodeRequest& CheckLoginQRCodeRequest::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

CheckLoginQRCodeRequest* CheckLoginQRCodeRequest::New(::google::protobuf::Arena* arena) const {
  CheckLoginQRCodeRequest* n = new CheckLoginQRCodeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckLoginQRCodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.CheckLoginQRCodeRequest)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_uuid()) {
      GOOGLE_DCHECK(!uuid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*uuid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_randomencrykey()) {
      GOOGLE_DCHECK(randomencrykey_ != NULL);
      randomencrykey_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&timestamp_, 0, reinterpret_cast<char*>(&opcode_) -
      reinterpret_cast<char*>(&timestamp_) + sizeof(opcode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CheckLoginQRCodeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.CheckLoginQRCodeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_randomencrykey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string UUID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CheckLoginQRCodeRequest.UUID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 TimeStamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 OPCode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_opcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.CheckLoginQRCodeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.CheckLoginQRCodeRequest)
  return false;
#undef DO_
}

void CheckLoginQRCodeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.CheckLoginQRCodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->randomencrykey_, output);
  }

  // optional string UUID = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckLoginQRCodeRequest.UUID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->uuid(), output);
  }

  // required uint32 TimeStamp = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->timestamp(), output);
  }

  // optional uint32 OPCode = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->opcode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.CheckLoginQRCodeRequest)
}

::google::protobuf::uint8* CheckLoginQRCodeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.CheckLoginQRCodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->randomencrykey_, deterministic, target);
  }

  // optional string UUID = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CheckLoginQRCodeRequest.UUID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uuid(), target);
  }

  // required uint32 TimeStamp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->timestamp(), target);
  }

  // optional uint32 OPCode = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->opcode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.CheckLoginQRCodeRequest)
  return target;
}

size_t CheckLoginQRCodeRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.CheckLoginQRCodeRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_randomencrykey()) {
    // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->randomencrykey_);
  }

  if (has_timestamp()) {
    // required uint32 TimeStamp = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timestamp());
  }

  return total_size;
}
size_t CheckLoginQRCodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.CheckLoginQRCodeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->randomencrykey_);

    // required uint32 TimeStamp = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string UUID = 3;
  if (has_uuid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  // optional uint32 OPCode = 5;
  if (has_opcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckLoginQRCodeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.CheckLoginQRCodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckLoginQRCodeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckLoginQRCodeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.CheckLoginQRCodeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.CheckLoginQRCodeRequest)
    MergeFrom(*source);
  }
}

void CheckLoginQRCodeRequest::MergeFrom(const CheckLoginQRCodeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.CheckLoginQRCodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_uuid();
      uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_randomencrykey()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.randomencrykey());
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      opcode_ = from.opcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CheckLoginQRCodeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.CheckLoginQRCodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckLoginQRCodeRequest::CopyFrom(const CheckLoginQRCodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.CheckLoginQRCodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckLoginQRCodeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_randomencrykey()) {
    if (!this->randomencrykey_->IsInitialized()) return false;
  }
  return true;
}

void CheckLoginQRCodeRequest::Swap(CheckLoginQRCodeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckLoginQRCodeRequest::InternalSwap(CheckLoginQRCodeRequest* other) {
  uuid_.Swap(&other->uuid_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(randomencrykey_, other->randomencrykey_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(opcode_, other->opcode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckLoginQRCodeRequest::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckLoginQRCodeRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool CheckLoginQRCodeRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CheckLoginQRCodeRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void CheckLoginQRCodeRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void CheckLoginQRCodeRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& CheckLoginQRCodeRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckLoginQRCodeRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* CheckLoginQRCodeRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CheckLoginQRCodeRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* CheckLoginQRCodeRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.CheckLoginQRCodeRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void CheckLoginQRCodeRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckLoginQRCodeRequest.BaseRequest)
}

// required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 2;
bool CheckLoginQRCodeRequest::has_randomencrykey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CheckLoginQRCodeRequest::set_has_randomencrykey() {
  _has_bits_[0] |= 0x00000004u;
}
void CheckLoginQRCodeRequest::clear_has_randomencrykey() {
  _has_bits_[0] &= ~0x00000004u;
}
void CheckLoginQRCodeRequest::clear_randomencrykey() {
  if (randomencrykey_ != NULL) randomencrykey_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_randomencrykey();
}
const ::micromsg::SKBuiltinBuffer_t& CheckLoginQRCodeRequest::randomencrykey() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckLoginQRCodeRequest.RandomEncryKey)
  return randomencrykey_ != NULL ? *randomencrykey_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* CheckLoginQRCodeRequest::mutable_randomencrykey() {
  set_has_randomencrykey();
  if (randomencrykey_ == NULL) {
    randomencrykey_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CheckLoginQRCodeRequest.RandomEncryKey)
  return randomencrykey_;
}
::micromsg::SKBuiltinBuffer_t* CheckLoginQRCodeRequest::release_randomencrykey() {
  // @@protoc_insertion_point(field_release:micromsg.CheckLoginQRCodeRequest.RandomEncryKey)
  clear_has_randomencrykey();
  ::micromsg::SKBuiltinBuffer_t* temp = randomencrykey_;
  randomencrykey_ = NULL;
  return temp;
}
void CheckLoginQRCodeRequest::set_allocated_randomencrykey(::micromsg::SKBuiltinBuffer_t* randomencrykey) {
  delete randomencrykey_;
  randomencrykey_ = randomencrykey;
  if (randomencrykey) {
    set_has_randomencrykey();
  } else {
    clear_has_randomencrykey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckLoginQRCodeRequest.RandomEncryKey)
}

// optional string UUID = 3;
bool CheckLoginQRCodeRequest::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CheckLoginQRCodeRequest::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
void CheckLoginQRCodeRequest::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CheckLoginQRCodeRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuid();
}
const ::std::string& CheckLoginQRCodeRequest::uuid() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckLoginQRCodeRequest.UUID)
  return uuid_.GetNoArena();
}
void CheckLoginQRCodeRequest::set_uuid(const ::std::string& value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CheckLoginQRCodeRequest.UUID)
}
#if LANG_CXX11
void CheckLoginQRCodeRequest::set_uuid(::std::string&& value) {
  set_has_uuid();
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CheckLoginQRCodeRequest.UUID)
}
#endif
void CheckLoginQRCodeRequest::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CheckLoginQRCodeRequest.UUID)
}
void CheckLoginQRCodeRequest::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CheckLoginQRCodeRequest.UUID)
}
::std::string* CheckLoginQRCodeRequest::mutable_uuid() {
  set_has_uuid();
  // @@protoc_insertion_point(field_mutable:micromsg.CheckLoginQRCodeRequest.UUID)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckLoginQRCodeRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:micromsg.CheckLoginQRCodeRequest.UUID)
  clear_has_uuid();
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckLoginQRCodeRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    set_has_uuid();
  } else {
    clear_has_uuid();
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckLoginQRCodeRequest.UUID)
}

// required uint32 TimeStamp = 4;
bool CheckLoginQRCodeRequest::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CheckLoginQRCodeRequest::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
void CheckLoginQRCodeRequest::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
void CheckLoginQRCodeRequest::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
::google::protobuf::uint32 CheckLoginQRCodeRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckLoginQRCodeRequest.TimeStamp)
  return timestamp_;
}
void CheckLoginQRCodeRequest::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CheckLoginQRCodeRequest.TimeStamp)
}

// optional uint32 OPCode = 5;
bool CheckLoginQRCodeRequest::has_opcode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CheckLoginQRCodeRequest::set_has_opcode() {
  _has_bits_[0] |= 0x00000010u;
}
void CheckLoginQRCodeRequest::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000010u;
}
void CheckLoginQRCodeRequest::clear_opcode() {
  opcode_ = 0u;
  clear_has_opcode();
}
::google::protobuf::uint32 CheckLoginQRCodeRequest::opcode() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckLoginQRCodeRequest.OPCode)
  return opcode_;
}
void CheckLoginQRCodeRequest::set_opcode(::google::protobuf::uint32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CheckLoginQRCodeRequest.OPCode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckLoginQRCodeResponse::kBaseResponseFieldNumber;
const int CheckLoginQRCodeResponse::kNotifyPkgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckLoginQRCodeResponse::CheckLoginQRCodeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.CheckLoginQRCodeResponse)
}
CheckLoginQRCodeResponse::CheckLoginQRCodeResponse(const CheckLoginQRCodeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_notifypkg()) {
    notifypkg_ = new ::micromsg::LoginQRCodeNotifyPkg(*from.notifypkg_);
  } else {
    notifypkg_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.CheckLoginQRCodeResponse)
}

void CheckLoginQRCodeResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&notifypkg_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(notifypkg_));
}

CheckLoginQRCodeResponse::~CheckLoginQRCodeResponse() {
  // @@protoc_insertion_point(destructor:micromsg.CheckLoginQRCodeResponse)
  SharedDtor();
}

void CheckLoginQRCodeResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete notifypkg_;
  }
}

void CheckLoginQRCodeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckLoginQRCodeResponse::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CheckLoginQRCodeResponse& CheckLoginQRCodeResponse::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

CheckLoginQRCodeResponse* CheckLoginQRCodeResponse::New(::google::protobuf::Arena* arena) const {
  CheckLoginQRCodeResponse* n = new CheckLoginQRCodeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckLoginQRCodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.CheckLoginQRCodeResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_notifypkg()) {
      GOOGLE_DCHECK(notifypkg_ != NULL);
      notifypkg_->::micromsg::LoginQRCodeNotifyPkg::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CheckLoginQRCodeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.CheckLoginQRCodeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.LoginQRCodeNotifyPkg NotifyPkg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notifypkg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.CheckLoginQRCodeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.CheckLoginQRCodeResponse)
  return false;
#undef DO_
}

void CheckLoginQRCodeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.CheckLoginQRCodeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional .micromsg.LoginQRCodeNotifyPkg NotifyPkg = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->notifypkg_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.CheckLoginQRCodeResponse)
}

::google::protobuf::uint8* CheckLoginQRCodeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.CheckLoginQRCodeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional .micromsg.LoginQRCodeNotifyPkg NotifyPkg = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->notifypkg_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.CheckLoginQRCodeResponse)
  return target;
}

size_t CheckLoginQRCodeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.CheckLoginQRCodeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  // optional .micromsg.LoginQRCodeNotifyPkg NotifyPkg = 3;
  if (has_notifypkg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->notifypkg_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckLoginQRCodeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.CheckLoginQRCodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckLoginQRCodeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckLoginQRCodeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.CheckLoginQRCodeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.CheckLoginQRCodeResponse)
    MergeFrom(*source);
  }
}

void CheckLoginQRCodeResponse::MergeFrom(const CheckLoginQRCodeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.CheckLoginQRCodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_notifypkg()->::micromsg::LoginQRCodeNotifyPkg::MergeFrom(from.notifypkg());
    }
  }
}

void CheckLoginQRCodeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.CheckLoginQRCodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckLoginQRCodeResponse::CopyFrom(const CheckLoginQRCodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.CheckLoginQRCodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckLoginQRCodeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_notifypkg()) {
    if (!this->notifypkg_->IsInitialized()) return false;
  }
  return true;
}

void CheckLoginQRCodeResponse::Swap(CheckLoginQRCodeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckLoginQRCodeResponse::InternalSwap(CheckLoginQRCodeResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(notifypkg_, other->notifypkg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckLoginQRCodeResponse::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckLoginQRCodeResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool CheckLoginQRCodeResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CheckLoginQRCodeResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void CheckLoginQRCodeResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void CheckLoginQRCodeResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& CheckLoginQRCodeResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckLoginQRCodeResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* CheckLoginQRCodeResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CheckLoginQRCodeResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* CheckLoginQRCodeResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.CheckLoginQRCodeResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void CheckLoginQRCodeResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckLoginQRCodeResponse.BaseResponse)
}

// optional .micromsg.LoginQRCodeNotifyPkg NotifyPkg = 3;
bool CheckLoginQRCodeResponse::has_notifypkg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CheckLoginQRCodeResponse::set_has_notifypkg() {
  _has_bits_[0] |= 0x00000002u;
}
void CheckLoginQRCodeResponse::clear_has_notifypkg() {
  _has_bits_[0] &= ~0x00000002u;
}
void CheckLoginQRCodeResponse::clear_notifypkg() {
  if (notifypkg_ != NULL) notifypkg_->::micromsg::LoginQRCodeNotifyPkg::Clear();
  clear_has_notifypkg();
}
const ::micromsg::LoginQRCodeNotifyPkg& CheckLoginQRCodeResponse::notifypkg() const {
  // @@protoc_insertion_point(field_get:micromsg.CheckLoginQRCodeResponse.NotifyPkg)
  return notifypkg_ != NULL ? *notifypkg_
                         : *::micromsg::LoginQRCodeNotifyPkg::internal_default_instance();
}
::micromsg::LoginQRCodeNotifyPkg* CheckLoginQRCodeResponse::mutable_notifypkg() {
  set_has_notifypkg();
  if (notifypkg_ == NULL) {
    notifypkg_ = new ::micromsg::LoginQRCodeNotifyPkg;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CheckLoginQRCodeResponse.NotifyPkg)
  return notifypkg_;
}
::micromsg::LoginQRCodeNotifyPkg* CheckLoginQRCodeResponse::release_notifypkg() {
  // @@protoc_insertion_point(field_release:micromsg.CheckLoginQRCodeResponse.NotifyPkg)
  clear_has_notifypkg();
  ::micromsg::LoginQRCodeNotifyPkg* temp = notifypkg_;
  notifypkg_ = NULL;
  return temp;
}
void CheckLoginQRCodeResponse::set_allocated_notifypkg(::micromsg::LoginQRCodeNotifyPkg* notifypkg) {
  delete notifypkg_;
  notifypkg_ = notifypkg;
  if (notifypkg) {
    set_has_notifypkg();
  } else {
    clear_has_notifypkg();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CheckLoginQRCodeResponse.NotifyPkg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetLoginURLRequest::kBaseRequestFieldNumber;
const int GetLoginURLRequest::kUUIDFieldNumber;
const int GetLoginURLRequest::kFromDeviceIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetLoginURLRequest::GetLoginURLRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetLoginURLRequest)
}
GetLoginURLRequest::GetLoginURLRequest(const GetLoginURLRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_uuid()) {
    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  fromdeviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fromdeviceid()) {
    fromdeviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromdeviceid_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GetLoginURLRequest)
}

void GetLoginURLRequest::SharedCtor() {
  _cached_size_ = 0;
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fromdeviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baserequest_ = NULL;
}

GetLoginURLRequest::~GetLoginURLRequest() {
  // @@protoc_insertion_point(destructor:micromsg.GetLoginURLRequest)
  SharedDtor();
}

void GetLoginURLRequest::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fromdeviceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GetLoginURLRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLoginURLRequest::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetLoginURLRequest& GetLoginURLRequest::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetLoginURLRequest* GetLoginURLRequest::New(::google::protobuf::Arena* arena) const {
  GetLoginURLRequest* n = new GetLoginURLRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetLoginURLRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetLoginURLRequest)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_uuid()) {
      GOOGLE_DCHECK(!uuid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*uuid_.UnsafeRawStringPointer())->clear();
    }
    if (has_fromdeviceid()) {
      GOOGLE_DCHECK(!fromdeviceid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fromdeviceid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetLoginURLRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetLoginURLRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string UUID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetLoginURLRequest.UUID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes FromDeviceID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fromdeviceid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetLoginURLRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetLoginURLRequest)
  return false;
#undef DO_
}

void GetLoginURLRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetLoginURLRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string UUID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetLoginURLRequest.UUID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uuid(), output);
  }

  // optional bytes FromDeviceID = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->fromdeviceid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetLoginURLRequest)
}

::google::protobuf::uint8* GetLoginURLRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetLoginURLRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string UUID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetLoginURLRequest.UUID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uuid(), target);
  }

  // optional bytes FromDeviceID = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->fromdeviceid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetLoginURLRequest)
  return target;
}

size_t GetLoginURLRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetLoginURLRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string UUID = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // optional bytes FromDeviceID = 3;
    if (has_fromdeviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fromdeviceid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLoginURLRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetLoginURLRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLoginURLRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetLoginURLRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetLoginURLRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetLoginURLRequest)
    MergeFrom(*source);
  }
}

void GetLoginURLRequest::MergeFrom(const GetLoginURLRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetLoginURLRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_uuid();
      uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_fromdeviceid();
      fromdeviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromdeviceid_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
  }
}

void GetLoginURLRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetLoginURLRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLoginURLRequest::CopyFrom(const GetLoginURLRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetLoginURLRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLoginURLRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GetLoginURLRequest::Swap(GetLoginURLRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetLoginURLRequest::InternalSwap(GetLoginURLRequest* other) {
  uuid_.Swap(&other->uuid_);
  fromdeviceid_.Swap(&other->fromdeviceid_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetLoginURLRequest::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetLoginURLRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool GetLoginURLRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetLoginURLRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
void GetLoginURLRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetLoginURLRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GetLoginURLRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLoginURLRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GetLoginURLRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetLoginURLRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GetLoginURLRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetLoginURLRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GetLoginURLRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetLoginURLRequest.BaseRequest)
}

// optional string UUID = 2;
bool GetLoginURLRequest::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetLoginURLRequest::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
void GetLoginURLRequest::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetLoginURLRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuid();
}
const ::std::string& GetLoginURLRequest::uuid() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLoginURLRequest.UUID)
  return uuid_.GetNoArena();
}
void GetLoginURLRequest::set_uuid(const ::std::string& value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetLoginURLRequest.UUID)
}
#if LANG_CXX11
void GetLoginURLRequest::set_uuid(::std::string&& value) {
  set_has_uuid();
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetLoginURLRequest.UUID)
}
#endif
void GetLoginURLRequest::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetLoginURLRequest.UUID)
}
void GetLoginURLRequest::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetLoginURLRequest.UUID)
}
::std::string* GetLoginURLRequest::mutable_uuid() {
  set_has_uuid();
  // @@protoc_insertion_point(field_mutable:micromsg.GetLoginURLRequest.UUID)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetLoginURLRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:micromsg.GetLoginURLRequest.UUID)
  clear_has_uuid();
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetLoginURLRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    set_has_uuid();
  } else {
    clear_has_uuid();
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetLoginURLRequest.UUID)
}

// optional bytes FromDeviceID = 3;
bool GetLoginURLRequest::has_fromdeviceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetLoginURLRequest::set_has_fromdeviceid() {
  _has_bits_[0] |= 0x00000002u;
}
void GetLoginURLRequest::clear_has_fromdeviceid() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetLoginURLRequest::clear_fromdeviceid() {
  fromdeviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fromdeviceid();
}
const ::std::string& GetLoginURLRequest::fromdeviceid() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLoginURLRequest.FromDeviceID)
  return fromdeviceid_.GetNoArena();
}
void GetLoginURLRequest::set_fromdeviceid(const ::std::string& value) {
  set_has_fromdeviceid();
  fromdeviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetLoginURLRequest.FromDeviceID)
}
#if LANG_CXX11
void GetLoginURLRequest::set_fromdeviceid(::std::string&& value) {
  set_has_fromdeviceid();
  fromdeviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetLoginURLRequest.FromDeviceID)
}
#endif
void GetLoginURLRequest::set_fromdeviceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fromdeviceid();
  fromdeviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetLoginURLRequest.FromDeviceID)
}
void GetLoginURLRequest::set_fromdeviceid(const void* value, size_t size) {
  set_has_fromdeviceid();
  fromdeviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetLoginURLRequest.FromDeviceID)
}
::std::string* GetLoginURLRequest::mutable_fromdeviceid() {
  set_has_fromdeviceid();
  // @@protoc_insertion_point(field_mutable:micromsg.GetLoginURLRequest.FromDeviceID)
  return fromdeviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetLoginURLRequest::release_fromdeviceid() {
  // @@protoc_insertion_point(field_release:micromsg.GetLoginURLRequest.FromDeviceID)
  clear_has_fromdeviceid();
  return fromdeviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetLoginURLRequest::set_allocated_fromdeviceid(::std::string* fromdeviceid) {
  if (fromdeviceid != NULL) {
    set_has_fromdeviceid();
  } else {
    clear_has_fromdeviceid();
  }
  fromdeviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromdeviceid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetLoginURLRequest.FromDeviceID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetLoginURLResponse::kBaseResponseFieldNumber;
const int GetLoginURLResponse::kURLFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetLoginURLResponse::GetLoginURLResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetLoginURLResponse)
}
GetLoginURLResponse::GetLoginURLResponse(const GetLoginURLResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GetLoginURLResponse)
}

void GetLoginURLResponse::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baseresponse_ = NULL;
}

GetLoginURLResponse::~GetLoginURLResponse() {
  // @@protoc_insertion_point(destructor:micromsg.GetLoginURLResponse)
  SharedDtor();
}

void GetLoginURLResponse::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void GetLoginURLResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLoginURLResponse::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetLoginURLResponse& GetLoginURLResponse::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetLoginURLResponse* GetLoginURLResponse::New(::google::protobuf::Arena* arena) const {
  GetLoginURLResponse* n = new GetLoginURLResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetLoginURLResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetLoginURLResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetLoginURLResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetLoginURLResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string URL = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetLoginURLResponse.URL");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetLoginURLResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetLoginURLResponse)
  return false;
#undef DO_
}

void GetLoginURLResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetLoginURLResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional string URL = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetLoginURLResponse.URL");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetLoginURLResponse)
}

::google::protobuf::uint8* GetLoginURLResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetLoginURLResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional string URL = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetLoginURLResponse.URL");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetLoginURLResponse)
  return target;
}

size_t GetLoginURLResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetLoginURLResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  // optional string URL = 2;
  if (has_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLoginURLResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetLoginURLResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLoginURLResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetLoginURLResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetLoginURLResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetLoginURLResponse)
    MergeFrom(*source);
  }
}

void GetLoginURLResponse::MergeFrom(const GetLoginURLResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetLoginURLResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
  }
}

void GetLoginURLResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetLoginURLResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLoginURLResponse::CopyFrom(const GetLoginURLResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetLoginURLResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLoginURLResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void GetLoginURLResponse::Swap(GetLoginURLResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetLoginURLResponse::InternalSwap(GetLoginURLResponse* other) {
  url_.Swap(&other->url_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetLoginURLResponse::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetLoginURLResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetLoginURLResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetLoginURLResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
void GetLoginURLResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetLoginURLResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetLoginURLResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLoginURLResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetLoginURLResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetLoginURLResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetLoginURLResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetLoginURLResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetLoginURLResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetLoginURLResponse.BaseResponse)
}

// optional string URL = 2;
bool GetLoginURLResponse::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetLoginURLResponse::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void GetLoginURLResponse::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetLoginURLResponse::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& GetLoginURLResponse::url() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLoginURLResponse.URL)
  return url_.GetNoArena();
}
void GetLoginURLResponse::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetLoginURLResponse.URL)
}
#if LANG_CXX11
void GetLoginURLResponse::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetLoginURLResponse.URL)
}
#endif
void GetLoginURLResponse::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetLoginURLResponse.URL)
}
void GetLoginURLResponse::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetLoginURLResponse.URL)
}
::std::string* GetLoginURLResponse::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:micromsg.GetLoginURLResponse.URL)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetLoginURLResponse::release_url() {
  // @@protoc_insertion_point(field_release:micromsg.GetLoginURLResponse.URL)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetLoginURLResponse::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetLoginURLResponse.URL)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PushLoginURLRequest::kBaseRequestFieldNumber;
const int PushLoginURLRequest::kUserNameFieldNumber;
const int PushLoginURLRequest::kAutoAuthTicketFieldNumber;
const int PushLoginURLRequest::kClientIDFieldNumber;
const int PushLoginURLRequest::kRandomEncryKeyFieldNumber;
const int PushLoginURLRequest::kOPCodeFieldNumber;
const int PushLoginURLRequest::kDeviceNameFieldNumber;
const int PushLoginURLRequest::kAutoAuthKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PushLoginURLRequest::PushLoginURLRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.PushLoginURLRequest)
}
PushLoginURLRequest::PushLoginURLRequest(const PushLoginURLRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  autoauthticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_autoauthticket()) {
    autoauthticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.autoauthticket_);
  }
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientid()) {
    clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
  }
  devicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_devicename()) {
    devicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicename_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_randomencrykey()) {
    randomencrykey_ = new ::micromsg::SKBuiltinBuffer_t(*from.randomencrykey_);
  } else {
    randomencrykey_ = NULL;
  }
  if (from.has_autoauthkey()) {
    autoauthkey_ = new ::micromsg::SKBuiltinBuffer_t(*from.autoauthkey_);
  } else {
    autoauthkey_ = NULL;
  }
  opcode_ = from.opcode_;
  // @@protoc_insertion_point(copy_constructor:micromsg.PushLoginURLRequest)
}

void PushLoginURLRequest::SharedCtor() {
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  autoauthticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&opcode_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(opcode_));
}

PushLoginURLRequest::~PushLoginURLRequest() {
  // @@protoc_insertion_point(destructor:micromsg.PushLoginURLRequest)
  SharedDtor();
}

void PushLoginURLRequest::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  autoauthticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete randomencrykey_;
  }
  if (this != internal_default_instance()) {
    delete autoauthkey_;
  }
}

void PushLoginURLRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushLoginURLRequest::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PushLoginURLRequest& PushLoginURLRequest::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

PushLoginURLRequest* PushLoginURLRequest::New(::google::protobuf::Arena* arena) const {
  PushLoginURLRequest* n = new PushLoginURLRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PushLoginURLRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.PushLoginURLRequest)
  if (_has_bits_[0 / 32] & 127u) {
    if (has_username()) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
    if (has_autoauthticket()) {
      GOOGLE_DCHECK(!autoauthticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*autoauthticket_.UnsafeRawStringPointer())->clear();
    }
    if (has_clientid()) {
      GOOGLE_DCHECK(!clientid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*clientid_.UnsafeRawStringPointer())->clear();
    }
    if (has_devicename()) {
      GOOGLE_DCHECK(!devicename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*devicename_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_randomencrykey()) {
      GOOGLE_DCHECK(randomencrykey_ != NULL);
      randomencrykey_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_autoauthkey()) {
      GOOGLE_DCHECK(autoauthkey_ != NULL);
      autoauthkey_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  opcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PushLoginURLRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.PushLoginURLRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string UserName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.PushLoginURLRequest.UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AutoAuthTicket = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_autoauthticket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->autoauthticket().data(), this->autoauthticket().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.PushLoginURLRequest.AutoAuthTicket");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ClientID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientid().data(), this->clientid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.PushLoginURLRequest.ClientID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_randomencrykey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 OPCode = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_opcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string DeviceName = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devicename().data(), this->devicename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.PushLoginURLRequest.DeviceName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t AutoAuthKey = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_autoauthkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.PushLoginURLRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.PushLoginURLRequest)
  return false;
#undef DO_
}

void PushLoginURLRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.PushLoginURLRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string UserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PushLoginURLRequest.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // optional string AutoAuthTicket = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->autoauthticket().data(), this->autoauthticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PushLoginURLRequest.AutoAuthTicket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->autoauthticket(), output);
  }

  // optional string ClientID = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PushLoginURLRequest.ClientID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->clientid(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->randomencrykey_, output);
  }

  // required uint32 OPCode = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->opcode(), output);
  }

  // optional string DeviceName = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PushLoginURLRequest.DeviceName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->devicename(), output);
  }

  // optional .micromsg.SKBuiltinBuffer_t AutoAuthKey = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->autoauthkey_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.PushLoginURLRequest)
}

::google::protobuf::uint8* PushLoginURLRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.PushLoginURLRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string UserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PushLoginURLRequest.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // optional string AutoAuthTicket = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->autoauthticket().data(), this->autoauthticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PushLoginURLRequest.AutoAuthTicket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->autoauthticket(), target);
  }

  // optional string ClientID = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PushLoginURLRequest.ClientID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->clientid(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->randomencrykey_, deterministic, target);
  }

  // required uint32 OPCode = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->opcode(), target);
  }

  // optional string DeviceName = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PushLoginURLRequest.DeviceName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->devicename(), target);
  }

  // optional .micromsg.SKBuiltinBuffer_t AutoAuthKey = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->autoauthkey_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.PushLoginURLRequest)
  return target;
}

size_t PushLoginURLRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.PushLoginURLRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_randomencrykey()) {
    // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->randomencrykey_);
  }

  if (has_opcode()) {
    // required uint32 OPCode = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());
  }

  return total_size;
}
size_t PushLoginURLRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.PushLoginURLRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000b0) ^ 0x000000b0) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->randomencrykey_);

    // required uint32 OPCode = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string UserName = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string AutoAuthTicket = 3;
    if (has_autoauthticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->autoauthticket());
    }

    // optional string ClientID = 4;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientid());
    }

    // optional string DeviceName = 7;
    if (has_devicename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicename());
    }

  }
  // optional .micromsg.SKBuiltinBuffer_t AutoAuthKey = 8;
  if (has_autoauthkey()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->autoauthkey_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushLoginURLRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.PushLoginURLRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PushLoginURLRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PushLoginURLRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.PushLoginURLRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.PushLoginURLRequest)
    MergeFrom(*source);
  }
}

void PushLoginURLRequest::MergeFrom(const PushLoginURLRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.PushLoginURLRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_autoauthticket();
      autoauthticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.autoauthticket_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_clientid();
      clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_devicename();
      devicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicename_);
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_randomencrykey()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.randomencrykey());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_autoauthkey()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.autoauthkey());
    }
    if (cached_has_bits & 0x00000080u) {
      opcode_ = from.opcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PushLoginURLRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.PushLoginURLRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushLoginURLRequest::CopyFrom(const PushLoginURLRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.PushLoginURLRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushLoginURLRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000b0) != 0x000000b0) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_randomencrykey()) {
    if (!this->randomencrykey_->IsInitialized()) return false;
  }
  if (has_autoauthkey()) {
    if (!this->autoauthkey_->IsInitialized()) return false;
  }
  return true;
}

void PushLoginURLRequest::Swap(PushLoginURLRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PushLoginURLRequest::InternalSwap(PushLoginURLRequest* other) {
  username_.Swap(&other->username_);
  autoauthticket_.Swap(&other->autoauthticket_);
  clientid_.Swap(&other->clientid_);
  devicename_.Swap(&other->devicename_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(randomencrykey_, other->randomencrykey_);
  std::swap(autoauthkey_, other->autoauthkey_);
  std::swap(opcode_, other->opcode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PushLoginURLRequest::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PushLoginURLRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool PushLoginURLRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PushLoginURLRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000010u;
}
void PushLoginURLRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000010u;
}
void PushLoginURLRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& PushLoginURLRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.PushLoginURLRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* PushLoginURLRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.PushLoginURLRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* PushLoginURLRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.PushLoginURLRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void PushLoginURLRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.PushLoginURLRequest.BaseRequest)
}

// optional string UserName = 2;
bool PushLoginURLRequest::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PushLoginURLRequest::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void PushLoginURLRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void PushLoginURLRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& PushLoginURLRequest::username() const {
  // @@protoc_insertion_point(field_get:micromsg.PushLoginURLRequest.UserName)
  return username_.GetNoArena();
}
void PushLoginURLRequest::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PushLoginURLRequest.UserName)
}
#if LANG_CXX11
void PushLoginURLRequest::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PushLoginURLRequest.UserName)
}
#endif
void PushLoginURLRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PushLoginURLRequest.UserName)
}
void PushLoginURLRequest::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PushLoginURLRequest.UserName)
}
::std::string* PushLoginURLRequest::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.PushLoginURLRequest.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PushLoginURLRequest::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.PushLoginURLRequest.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PushLoginURLRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PushLoginURLRequest.UserName)
}

// optional string AutoAuthTicket = 3;
bool PushLoginURLRequest::has_autoauthticket() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PushLoginURLRequest::set_has_autoauthticket() {
  _has_bits_[0] |= 0x00000002u;
}
void PushLoginURLRequest::clear_has_autoauthticket() {
  _has_bits_[0] &= ~0x00000002u;
}
void PushLoginURLRequest::clear_autoauthticket() {
  autoauthticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_autoauthticket();
}
const ::std::string& PushLoginURLRequest::autoauthticket() const {
  // @@protoc_insertion_point(field_get:micromsg.PushLoginURLRequest.AutoAuthTicket)
  return autoauthticket_.GetNoArena();
}
void PushLoginURLRequest::set_autoauthticket(const ::std::string& value) {
  set_has_autoauthticket();
  autoauthticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PushLoginURLRequest.AutoAuthTicket)
}
#if LANG_CXX11
void PushLoginURLRequest::set_autoauthticket(::std::string&& value) {
  set_has_autoauthticket();
  autoauthticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PushLoginURLRequest.AutoAuthTicket)
}
#endif
void PushLoginURLRequest::set_autoauthticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_autoauthticket();
  autoauthticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PushLoginURLRequest.AutoAuthTicket)
}
void PushLoginURLRequest::set_autoauthticket(const char* value, size_t size) {
  set_has_autoauthticket();
  autoauthticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PushLoginURLRequest.AutoAuthTicket)
}
::std::string* PushLoginURLRequest::mutable_autoauthticket() {
  set_has_autoauthticket();
  // @@protoc_insertion_point(field_mutable:micromsg.PushLoginURLRequest.AutoAuthTicket)
  return autoauthticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PushLoginURLRequest::release_autoauthticket() {
  // @@protoc_insertion_point(field_release:micromsg.PushLoginURLRequest.AutoAuthTicket)
  clear_has_autoauthticket();
  return autoauthticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PushLoginURLRequest::set_allocated_autoauthticket(::std::string* autoauthticket) {
  if (autoauthticket != NULL) {
    set_has_autoauthticket();
  } else {
    clear_has_autoauthticket();
  }
  autoauthticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), autoauthticket);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PushLoginURLRequest.AutoAuthTicket)
}

// optional string ClientID = 4;
bool PushLoginURLRequest::has_clientid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PushLoginURLRequest::set_has_clientid() {
  _has_bits_[0] |= 0x00000004u;
}
void PushLoginURLRequest::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000004u;
}
void PushLoginURLRequest::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientid();
}
const ::std::string& PushLoginURLRequest::clientid() const {
  // @@protoc_insertion_point(field_get:micromsg.PushLoginURLRequest.ClientID)
  return clientid_.GetNoArena();
}
void PushLoginURLRequest::set_clientid(const ::std::string& value) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PushLoginURLRequest.ClientID)
}
#if LANG_CXX11
void PushLoginURLRequest::set_clientid(::std::string&& value) {
  set_has_clientid();
  clientid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PushLoginURLRequest.ClientID)
}
#endif
void PushLoginURLRequest::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PushLoginURLRequest.ClientID)
}
void PushLoginURLRequest::set_clientid(const char* value, size_t size) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PushLoginURLRequest.ClientID)
}
::std::string* PushLoginURLRequest::mutable_clientid() {
  set_has_clientid();
  // @@protoc_insertion_point(field_mutable:micromsg.PushLoginURLRequest.ClientID)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PushLoginURLRequest::release_clientid() {
  // @@protoc_insertion_point(field_release:micromsg.PushLoginURLRequest.ClientID)
  clear_has_clientid();
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PushLoginURLRequest::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    set_has_clientid();
  } else {
    clear_has_clientid();
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PushLoginURLRequest.ClientID)
}

// required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 5;
bool PushLoginURLRequest::has_randomencrykey() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PushLoginURLRequest::set_has_randomencrykey() {
  _has_bits_[0] |= 0x00000020u;
}
void PushLoginURLRequest::clear_has_randomencrykey() {
  _has_bits_[0] &= ~0x00000020u;
}
void PushLoginURLRequest::clear_randomencrykey() {
  if (randomencrykey_ != NULL) randomencrykey_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_randomencrykey();
}
const ::micromsg::SKBuiltinBuffer_t& PushLoginURLRequest::randomencrykey() const {
  // @@protoc_insertion_point(field_get:micromsg.PushLoginURLRequest.RandomEncryKey)
  return randomencrykey_ != NULL ? *randomencrykey_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* PushLoginURLRequest::mutable_randomencrykey() {
  set_has_randomencrykey();
  if (randomencrykey_ == NULL) {
    randomencrykey_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.PushLoginURLRequest.RandomEncryKey)
  return randomencrykey_;
}
::micromsg::SKBuiltinBuffer_t* PushLoginURLRequest::release_randomencrykey() {
  // @@protoc_insertion_point(field_release:micromsg.PushLoginURLRequest.RandomEncryKey)
  clear_has_randomencrykey();
  ::micromsg::SKBuiltinBuffer_t* temp = randomencrykey_;
  randomencrykey_ = NULL;
  return temp;
}
void PushLoginURLRequest::set_allocated_randomencrykey(::micromsg::SKBuiltinBuffer_t* randomencrykey) {
  delete randomencrykey_;
  randomencrykey_ = randomencrykey;
  if (randomencrykey) {
    set_has_randomencrykey();
  } else {
    clear_has_randomencrykey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.PushLoginURLRequest.RandomEncryKey)
}

// required uint32 OPCode = 6;
bool PushLoginURLRequest::has_opcode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PushLoginURLRequest::set_has_opcode() {
  _has_bits_[0] |= 0x00000080u;
}
void PushLoginURLRequest::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000080u;
}
void PushLoginURLRequest::clear_opcode() {
  opcode_ = 0u;
  clear_has_opcode();
}
::google::protobuf::uint32 PushLoginURLRequest::opcode() const {
  // @@protoc_insertion_point(field_get:micromsg.PushLoginURLRequest.OPCode)
  return opcode_;
}
void PushLoginURLRequest::set_opcode(::google::protobuf::uint32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PushLoginURLRequest.OPCode)
}

// optional string DeviceName = 7;
bool PushLoginURLRequest::has_devicename() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PushLoginURLRequest::set_has_devicename() {
  _has_bits_[0] |= 0x00000008u;
}
void PushLoginURLRequest::clear_has_devicename() {
  _has_bits_[0] &= ~0x00000008u;
}
void PushLoginURLRequest::clear_devicename() {
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_devicename();
}
const ::std::string& PushLoginURLRequest::devicename() const {
  // @@protoc_insertion_point(field_get:micromsg.PushLoginURLRequest.DeviceName)
  return devicename_.GetNoArena();
}
void PushLoginURLRequest::set_devicename(const ::std::string& value) {
  set_has_devicename();
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PushLoginURLRequest.DeviceName)
}
#if LANG_CXX11
void PushLoginURLRequest::set_devicename(::std::string&& value) {
  set_has_devicename();
  devicename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PushLoginURLRequest.DeviceName)
}
#endif
void PushLoginURLRequest::set_devicename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_devicename();
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PushLoginURLRequest.DeviceName)
}
void PushLoginURLRequest::set_devicename(const char* value, size_t size) {
  set_has_devicename();
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PushLoginURLRequest.DeviceName)
}
::std::string* PushLoginURLRequest::mutable_devicename() {
  set_has_devicename();
  // @@protoc_insertion_point(field_mutable:micromsg.PushLoginURLRequest.DeviceName)
  return devicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PushLoginURLRequest::release_devicename() {
  // @@protoc_insertion_point(field_release:micromsg.PushLoginURLRequest.DeviceName)
  clear_has_devicename();
  return devicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PushLoginURLRequest::set_allocated_devicename(::std::string* devicename) {
  if (devicename != NULL) {
    set_has_devicename();
  } else {
    clear_has_devicename();
  }
  devicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicename);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PushLoginURLRequest.DeviceName)
}

// optional .micromsg.SKBuiltinBuffer_t AutoAuthKey = 8;
bool PushLoginURLRequest::has_autoauthkey() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PushLoginURLRequest::set_has_autoauthkey() {
  _has_bits_[0] |= 0x00000040u;
}
void PushLoginURLRequest::clear_has_autoauthkey() {
  _has_bits_[0] &= ~0x00000040u;
}
void PushLoginURLRequest::clear_autoauthkey() {
  if (autoauthkey_ != NULL) autoauthkey_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_autoauthkey();
}
const ::micromsg::SKBuiltinBuffer_t& PushLoginURLRequest::autoauthkey() const {
  // @@protoc_insertion_point(field_get:micromsg.PushLoginURLRequest.AutoAuthKey)
  return autoauthkey_ != NULL ? *autoauthkey_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* PushLoginURLRequest::mutable_autoauthkey() {
  set_has_autoauthkey();
  if (autoauthkey_ == NULL) {
    autoauthkey_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.PushLoginURLRequest.AutoAuthKey)
  return autoauthkey_;
}
::micromsg::SKBuiltinBuffer_t* PushLoginURLRequest::release_autoauthkey() {
  // @@protoc_insertion_point(field_release:micromsg.PushLoginURLRequest.AutoAuthKey)
  clear_has_autoauthkey();
  ::micromsg::SKBuiltinBuffer_t* temp = autoauthkey_;
  autoauthkey_ = NULL;
  return temp;
}
void PushLoginURLRequest::set_allocated_autoauthkey(::micromsg::SKBuiltinBuffer_t* autoauthkey) {
  delete autoauthkey_;
  autoauthkey_ = autoauthkey;
  if (autoauthkey) {
    set_has_autoauthkey();
  } else {
    clear_has_autoauthkey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.PushLoginURLRequest.AutoAuthKey)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PushLoginURLResponse::kBaseResponseFieldNumber;
const int PushLoginURLResponse::kUUIDFieldNumber;
const int PushLoginURLResponse::kNotifyKeyFieldNumber;
const int PushLoginURLResponse::kCheckTimeFieldNumber;
const int PushLoginURLResponse::kExpiredTimeFieldNumber;
const int PushLoginURLResponse::kBlueToothBroadCastUUIDFieldNumber;
const int PushLoginURLResponse::kBlueToothBroadCastContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PushLoginURLResponse::PushLoginURLResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.PushLoginURLResponse)
}
PushLoginURLResponse::PushLoginURLResponse(const PushLoginURLResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_uuid()) {
    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  bluetoothbroadcastuuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bluetoothbroadcastuuid()) {
    bluetoothbroadcastuuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bluetoothbroadcastuuid_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_notifykey()) {
    notifykey_ = new ::micromsg::SKBuiltinBuffer_t(*from.notifykey_);
  } else {
    notifykey_ = NULL;
  }
  if (from.has_bluetoothbroadcastcontent()) {
    bluetoothbroadcastcontent_ = new ::micromsg::SKBuiltinBuffer_t(*from.bluetoothbroadcastcontent_);
  } else {
    bluetoothbroadcastcontent_ = NULL;
  }
  ::memcpy(&checktime_, &from.checktime_,
    reinterpret_cast<char*>(&expiredtime_) -
    reinterpret_cast<char*>(&checktime_) + sizeof(expiredtime_));
  // @@protoc_insertion_point(copy_constructor:micromsg.PushLoginURLResponse)
}

void PushLoginURLResponse::SharedCtor() {
  _cached_size_ = 0;
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bluetoothbroadcastuuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&expiredtime_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(expiredtime_));
}

PushLoginURLResponse::~PushLoginURLResponse() {
  // @@protoc_insertion_point(destructor:micromsg.PushLoginURLResponse)
  SharedDtor();
}

void PushLoginURLResponse::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bluetoothbroadcastuuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete notifykey_;
  }
  if (this != internal_default_instance()) {
    delete bluetoothbroadcastcontent_;
  }
}

void PushLoginURLResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushLoginURLResponse::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PushLoginURLResponse& PushLoginURLResponse::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

PushLoginURLResponse* PushLoginURLResponse::New(::google::protobuf::Arena* arena) const {
  PushLoginURLResponse* n = new PushLoginURLResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PushLoginURLResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.PushLoginURLResponse)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_uuid()) {
      GOOGLE_DCHECK(!uuid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*uuid_.UnsafeRawStringPointer())->clear();
    }
    if (has_bluetoothbroadcastuuid()) {
      GOOGLE_DCHECK(!bluetoothbroadcastuuid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bluetoothbroadcastuuid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_notifykey()) {
      GOOGLE_DCHECK(notifykey_ != NULL);
      notifykey_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_bluetoothbroadcastcontent()) {
      GOOGLE_DCHECK(bluetoothbroadcastcontent_ != NULL);
      bluetoothbroadcastcontent_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 96u) {
    ::memset(&checktime_, 0, reinterpret_cast<char*>(&expiredtime_) -
      reinterpret_cast<char*>(&checktime_) + sizeof(expiredtime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PushLoginURLResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.PushLoginURLResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string UUID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.PushLoginURLResponse.UUID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t NotifyKey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notifykey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 CheckTime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_checktime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &checktime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ExpiredTime = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_expiredtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expiredtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string BlueToothBroadCastUUID = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bluetoothbroadcastuuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bluetoothbroadcastuuid().data(), this->bluetoothbroadcastuuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.PushLoginURLResponse.BlueToothBroadCastUUID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t BlueToothBroadCastContent = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bluetoothbroadcastcontent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.PushLoginURLResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.PushLoginURLResponse)
  return false;
#undef DO_
}

void PushLoginURLResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.PushLoginURLResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional string UUID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PushLoginURLResponse.UUID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uuid(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t NotifyKey = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->notifykey_, output);
  }

  // required uint32 CheckTime = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->checktime(), output);
  }

  // required uint32 ExpiredTime = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->expiredtime(), output);
  }

  // optional string BlueToothBroadCastUUID = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bluetoothbroadcastuuid().data(), this->bluetoothbroadcastuuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PushLoginURLResponse.BlueToothBroadCastUUID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->bluetoothbroadcastuuid(), output);
  }

  // optional .micromsg.SKBuiltinBuffer_t BlueToothBroadCastContent = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->bluetoothbroadcastcontent_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.PushLoginURLResponse)
}

::google::protobuf::uint8* PushLoginURLResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.PushLoginURLResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional string UUID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PushLoginURLResponse.UUID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uuid(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t NotifyKey = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->notifykey_, deterministic, target);
  }

  // required uint32 CheckTime = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->checktime(), target);
  }

  // required uint32 ExpiredTime = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->expiredtime(), target);
  }

  // optional string BlueToothBroadCastUUID = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bluetoothbroadcastuuid().data(), this->bluetoothbroadcastuuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PushLoginURLResponse.BlueToothBroadCastUUID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->bluetoothbroadcastuuid(), target);
  }

  // optional .micromsg.SKBuiltinBuffer_t BlueToothBroadCastContent = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->bluetoothbroadcastcontent_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.PushLoginURLResponse)
  return target;
}

size_t PushLoginURLResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.PushLoginURLResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_notifykey()) {
    // required .micromsg.SKBuiltinBuffer_t NotifyKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->notifykey_);
  }

  if (has_checktime()) {
    // required uint32 CheckTime = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->checktime());
  }

  if (has_expiredtime()) {
    // required uint32 ExpiredTime = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->expiredtime());
  }

  return total_size;
}
size_t PushLoginURLResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.PushLoginURLResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000006c) ^ 0x0000006c) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required .micromsg.SKBuiltinBuffer_t NotifyKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->notifykey_);

    // required uint32 CheckTime = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->checktime());

    // required uint32 ExpiredTime = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->expiredtime());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string UUID = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // optional string BlueToothBroadCastUUID = 6;
    if (has_bluetoothbroadcastuuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bluetoothbroadcastuuid());
    }

  }
  // optional .micromsg.SKBuiltinBuffer_t BlueToothBroadCastContent = 7;
  if (has_bluetoothbroadcastcontent()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bluetoothbroadcastcontent_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushLoginURLResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.PushLoginURLResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PushLoginURLResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PushLoginURLResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.PushLoginURLResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.PushLoginURLResponse)
    MergeFrom(*source);
  }
}

void PushLoginURLResponse::MergeFrom(const PushLoginURLResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.PushLoginURLResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_uuid();
      uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_bluetoothbroadcastuuid();
      bluetoothbroadcastuuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bluetoothbroadcastuuid_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_notifykey()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.notifykey());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_bluetoothbroadcastcontent()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.bluetoothbroadcastcontent());
    }
    if (cached_has_bits & 0x00000020u) {
      checktime_ = from.checktime_;
    }
    if (cached_has_bits & 0x00000040u) {
      expiredtime_ = from.expiredtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PushLoginURLResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.PushLoginURLResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushLoginURLResponse::CopyFrom(const PushLoginURLResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.PushLoginURLResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushLoginURLResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000006c) != 0x0000006c) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_notifykey()) {
    if (!this->notifykey_->IsInitialized()) return false;
  }
  if (has_bluetoothbroadcastcontent()) {
    if (!this->bluetoothbroadcastcontent_->IsInitialized()) return false;
  }
  return true;
}

void PushLoginURLResponse::Swap(PushLoginURLResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PushLoginURLResponse::InternalSwap(PushLoginURLResponse* other) {
  uuid_.Swap(&other->uuid_);
  bluetoothbroadcastuuid_.Swap(&other->bluetoothbroadcastuuid_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(notifykey_, other->notifykey_);
  std::swap(bluetoothbroadcastcontent_, other->bluetoothbroadcastcontent_);
  std::swap(checktime_, other->checktime_);
  std::swap(expiredtime_, other->expiredtime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PushLoginURLResponse::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PushLoginURLResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool PushLoginURLResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PushLoginURLResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000004u;
}
void PushLoginURLResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000004u;
}
void PushLoginURLResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& PushLoginURLResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.PushLoginURLResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* PushLoginURLResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.PushLoginURLResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* PushLoginURLResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.PushLoginURLResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void PushLoginURLResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.PushLoginURLResponse.BaseResponse)
}

// optional string UUID = 2;
bool PushLoginURLResponse::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PushLoginURLResponse::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
void PushLoginURLResponse::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
void PushLoginURLResponse::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuid();
}
const ::std::string& PushLoginURLResponse::uuid() const {
  // @@protoc_insertion_point(field_get:micromsg.PushLoginURLResponse.UUID)
  return uuid_.GetNoArena();
}
void PushLoginURLResponse::set_uuid(const ::std::string& value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PushLoginURLResponse.UUID)
}
#if LANG_CXX11
void PushLoginURLResponse::set_uuid(::std::string&& value) {
  set_has_uuid();
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PushLoginURLResponse.UUID)
}
#endif
void PushLoginURLResponse::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PushLoginURLResponse.UUID)
}
void PushLoginURLResponse::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PushLoginURLResponse.UUID)
}
::std::string* PushLoginURLResponse::mutable_uuid() {
  set_has_uuid();
  // @@protoc_insertion_point(field_mutable:micromsg.PushLoginURLResponse.UUID)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PushLoginURLResponse::release_uuid() {
  // @@protoc_insertion_point(field_release:micromsg.PushLoginURLResponse.UUID)
  clear_has_uuid();
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PushLoginURLResponse::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    set_has_uuid();
  } else {
    clear_has_uuid();
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PushLoginURLResponse.UUID)
}

// required .micromsg.SKBuiltinBuffer_t NotifyKey = 3;
bool PushLoginURLResponse::has_notifykey() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PushLoginURLResponse::set_has_notifykey() {
  _has_bits_[0] |= 0x00000008u;
}
void PushLoginURLResponse::clear_has_notifykey() {
  _has_bits_[0] &= ~0x00000008u;
}
void PushLoginURLResponse::clear_notifykey() {
  if (notifykey_ != NULL) notifykey_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_notifykey();
}
const ::micromsg::SKBuiltinBuffer_t& PushLoginURLResponse::notifykey() const {
  // @@protoc_insertion_point(field_get:micromsg.PushLoginURLResponse.NotifyKey)
  return notifykey_ != NULL ? *notifykey_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* PushLoginURLResponse::mutable_notifykey() {
  set_has_notifykey();
  if (notifykey_ == NULL) {
    notifykey_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.PushLoginURLResponse.NotifyKey)
  return notifykey_;
}
::micromsg::SKBuiltinBuffer_t* PushLoginURLResponse::release_notifykey() {
  // @@protoc_insertion_point(field_release:micromsg.PushLoginURLResponse.NotifyKey)
  clear_has_notifykey();
  ::micromsg::SKBuiltinBuffer_t* temp = notifykey_;
  notifykey_ = NULL;
  return temp;
}
void PushLoginURLResponse::set_allocated_notifykey(::micromsg::SKBuiltinBuffer_t* notifykey) {
  delete notifykey_;
  notifykey_ = notifykey;
  if (notifykey) {
    set_has_notifykey();
  } else {
    clear_has_notifykey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.PushLoginURLResponse.NotifyKey)
}

// required uint32 CheckTime = 4;
bool PushLoginURLResponse::has_checktime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PushLoginURLResponse::set_has_checktime() {
  _has_bits_[0] |= 0x00000020u;
}
void PushLoginURLResponse::clear_has_checktime() {
  _has_bits_[0] &= ~0x00000020u;
}
void PushLoginURLResponse::clear_checktime() {
  checktime_ = 0u;
  clear_has_checktime();
}
::google::protobuf::uint32 PushLoginURLResponse::checktime() const {
  // @@protoc_insertion_point(field_get:micromsg.PushLoginURLResponse.CheckTime)
  return checktime_;
}
void PushLoginURLResponse::set_checktime(::google::protobuf::uint32 value) {
  set_has_checktime();
  checktime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PushLoginURLResponse.CheckTime)
}

// required uint32 ExpiredTime = 5;
bool PushLoginURLResponse::has_expiredtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PushLoginURLResponse::set_has_expiredtime() {
  _has_bits_[0] |= 0x00000040u;
}
void PushLoginURLResponse::clear_has_expiredtime() {
  _has_bits_[0] &= ~0x00000040u;
}
void PushLoginURLResponse::clear_expiredtime() {
  expiredtime_ = 0u;
  clear_has_expiredtime();
}
::google::protobuf::uint32 PushLoginURLResponse::expiredtime() const {
  // @@protoc_insertion_point(field_get:micromsg.PushLoginURLResponse.ExpiredTime)
  return expiredtime_;
}
void PushLoginURLResponse::set_expiredtime(::google::protobuf::uint32 value) {
  set_has_expiredtime();
  expiredtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PushLoginURLResponse.ExpiredTime)
}

// optional string BlueToothBroadCastUUID = 6;
bool PushLoginURLResponse::has_bluetoothbroadcastuuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PushLoginURLResponse::set_has_bluetoothbroadcastuuid() {
  _has_bits_[0] |= 0x00000002u;
}
void PushLoginURLResponse::clear_has_bluetoothbroadcastuuid() {
  _has_bits_[0] &= ~0x00000002u;
}
void PushLoginURLResponse::clear_bluetoothbroadcastuuid() {
  bluetoothbroadcastuuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bluetoothbroadcastuuid();
}
const ::std::string& PushLoginURLResponse::bluetoothbroadcastuuid() const {
  // @@protoc_insertion_point(field_get:micromsg.PushLoginURLResponse.BlueToothBroadCastUUID)
  return bluetoothbroadcastuuid_.GetNoArena();
}
void PushLoginURLResponse::set_bluetoothbroadcastuuid(const ::std::string& value) {
  set_has_bluetoothbroadcastuuid();
  bluetoothbroadcastuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PushLoginURLResponse.BlueToothBroadCastUUID)
}
#if LANG_CXX11
void PushLoginURLResponse::set_bluetoothbroadcastuuid(::std::string&& value) {
  set_has_bluetoothbroadcastuuid();
  bluetoothbroadcastuuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PushLoginURLResponse.BlueToothBroadCastUUID)
}
#endif
void PushLoginURLResponse::set_bluetoothbroadcastuuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bluetoothbroadcastuuid();
  bluetoothbroadcastuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PushLoginURLResponse.BlueToothBroadCastUUID)
}
void PushLoginURLResponse::set_bluetoothbroadcastuuid(const char* value, size_t size) {
  set_has_bluetoothbroadcastuuid();
  bluetoothbroadcastuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PushLoginURLResponse.BlueToothBroadCastUUID)
}
::std::string* PushLoginURLResponse::mutable_bluetoothbroadcastuuid() {
  set_has_bluetoothbroadcastuuid();
  // @@protoc_insertion_point(field_mutable:micromsg.PushLoginURLResponse.BlueToothBroadCastUUID)
  return bluetoothbroadcastuuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PushLoginURLResponse::release_bluetoothbroadcastuuid() {
  // @@protoc_insertion_point(field_release:micromsg.PushLoginURLResponse.BlueToothBroadCastUUID)
  clear_has_bluetoothbroadcastuuid();
  return bluetoothbroadcastuuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PushLoginURLResponse::set_allocated_bluetoothbroadcastuuid(::std::string* bluetoothbroadcastuuid) {
  if (bluetoothbroadcastuuid != NULL) {
    set_has_bluetoothbroadcastuuid();
  } else {
    clear_has_bluetoothbroadcastuuid();
  }
  bluetoothbroadcastuuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bluetoothbroadcastuuid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PushLoginURLResponse.BlueToothBroadCastUUID)
}

// optional .micromsg.SKBuiltinBuffer_t BlueToothBroadCastContent = 7;
bool PushLoginURLResponse::has_bluetoothbroadcastcontent() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PushLoginURLResponse::set_has_bluetoothbroadcastcontent() {
  _has_bits_[0] |= 0x00000010u;
}
void PushLoginURLResponse::clear_has_bluetoothbroadcastcontent() {
  _has_bits_[0] &= ~0x00000010u;
}
void PushLoginURLResponse::clear_bluetoothbroadcastcontent() {
  if (bluetoothbroadcastcontent_ != NULL) bluetoothbroadcastcontent_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_bluetoothbroadcastcontent();
}
const ::micromsg::SKBuiltinBuffer_t& PushLoginURLResponse::bluetoothbroadcastcontent() const {
  // @@protoc_insertion_point(field_get:micromsg.PushLoginURLResponse.BlueToothBroadCastContent)
  return bluetoothbroadcastcontent_ != NULL ? *bluetoothbroadcastcontent_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* PushLoginURLResponse::mutable_bluetoothbroadcastcontent() {
  set_has_bluetoothbroadcastcontent();
  if (bluetoothbroadcastcontent_ == NULL) {
    bluetoothbroadcastcontent_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.PushLoginURLResponse.BlueToothBroadCastContent)
  return bluetoothbroadcastcontent_;
}
::micromsg::SKBuiltinBuffer_t* PushLoginURLResponse::release_bluetoothbroadcastcontent() {
  // @@protoc_insertion_point(field_release:micromsg.PushLoginURLResponse.BlueToothBroadCastContent)
  clear_has_bluetoothbroadcastcontent();
  ::micromsg::SKBuiltinBuffer_t* temp = bluetoothbroadcastcontent_;
  bluetoothbroadcastcontent_ = NULL;
  return temp;
}
void PushLoginURLResponse::set_allocated_bluetoothbroadcastcontent(::micromsg::SKBuiltinBuffer_t* bluetoothbroadcastcontent) {
  delete bluetoothbroadcastcontent_;
  bluetoothbroadcastcontent_ = bluetoothbroadcastcontent;
  if (bluetoothbroadcastcontent) {
    set_has_bluetoothbroadcastcontent();
  } else {
    clear_has_bluetoothbroadcastcontent();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.PushLoginURLResponse.BlueToothBroadCastContent)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlueToothBindLoginRequest::kBaseRequestFieldNumber;
const int BlueToothBindLoginRequest::kURLFieldNumber;
const int BlueToothBindLoginRequest::kOPCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlueToothBindLoginRequest::BlueToothBindLoginRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BlueToothBindLoginRequest)
}
BlueToothBindLoginRequest::BlueToothBindLoginRequest(const BlueToothBindLoginRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  opcode_ = from.opcode_;
  // @@protoc_insertion_point(copy_constructor:micromsg.BlueToothBindLoginRequest)
}

void BlueToothBindLoginRequest::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&opcode_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(opcode_));
}

BlueToothBindLoginRequest::~BlueToothBindLoginRequest() {
  // @@protoc_insertion_point(destructor:micromsg.BlueToothBindLoginRequest)
  SharedDtor();
}

void BlueToothBindLoginRequest::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void BlueToothBindLoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlueToothBindLoginRequest::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BlueToothBindLoginRequest& BlueToothBindLoginRequest::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

BlueToothBindLoginRequest* BlueToothBindLoginRequest::New(::google::protobuf::Arena* arena) const {
  BlueToothBindLoginRequest* n = new BlueToothBindLoginRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlueToothBindLoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BlueToothBindLoginRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  opcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BlueToothBindLoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BlueToothBindLoginRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string URL = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BlueToothBindLoginRequest.URL");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 OPCode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_opcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BlueToothBindLoginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BlueToothBindLoginRequest)
  return false;
#undef DO_
}

void BlueToothBindLoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BlueToothBindLoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string URL = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BlueToothBindLoginRequest.URL");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  // required uint32 OPCode = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->opcode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BlueToothBindLoginRequest)
}

::google::protobuf::uint8* BlueToothBindLoginRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BlueToothBindLoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string URL = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BlueToothBindLoginRequest.URL");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  // required uint32 OPCode = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->opcode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BlueToothBindLoginRequest)
  return target;
}

size_t BlueToothBindLoginRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.BlueToothBindLoginRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_opcode()) {
    // required uint32 OPCode = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());
  }

  return total_size;
}
size_t BlueToothBindLoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BlueToothBindLoginRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 OPCode = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string URL = 2;
  if (has_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlueToothBindLoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BlueToothBindLoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BlueToothBindLoginRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlueToothBindLoginRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BlueToothBindLoginRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BlueToothBindLoginRequest)
    MergeFrom(*source);
  }
}

void BlueToothBindLoginRequest::MergeFrom(const BlueToothBindLoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BlueToothBindLoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000004u) {
      opcode_ = from.opcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BlueToothBindLoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BlueToothBindLoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlueToothBindLoginRequest::CopyFrom(const BlueToothBindLoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BlueToothBindLoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlueToothBindLoginRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void BlueToothBindLoginRequest::Swap(BlueToothBindLoginRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlueToothBindLoginRequest::InternalSwap(BlueToothBindLoginRequest* other) {
  url_.Swap(&other->url_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(opcode_, other->opcode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlueToothBindLoginRequest::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlueToothBindLoginRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool BlueToothBindLoginRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BlueToothBindLoginRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void BlueToothBindLoginRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void BlueToothBindLoginRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& BlueToothBindLoginRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.BlueToothBindLoginRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* BlueToothBindLoginRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BlueToothBindLoginRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* BlueToothBindLoginRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.BlueToothBindLoginRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void BlueToothBindLoginRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BlueToothBindLoginRequest.BaseRequest)
}

// optional string URL = 2;
bool BlueToothBindLoginRequest::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BlueToothBindLoginRequest::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void BlueToothBindLoginRequest::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void BlueToothBindLoginRequest::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& BlueToothBindLoginRequest::url() const {
  // @@protoc_insertion_point(field_get:micromsg.BlueToothBindLoginRequest.URL)
  return url_.GetNoArena();
}
void BlueToothBindLoginRequest::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BlueToothBindLoginRequest.URL)
}
#if LANG_CXX11
void BlueToothBindLoginRequest::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BlueToothBindLoginRequest.URL)
}
#endif
void BlueToothBindLoginRequest::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BlueToothBindLoginRequest.URL)
}
void BlueToothBindLoginRequest::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BlueToothBindLoginRequest.URL)
}
::std::string* BlueToothBindLoginRequest::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:micromsg.BlueToothBindLoginRequest.URL)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BlueToothBindLoginRequest::release_url() {
  // @@protoc_insertion_point(field_release:micromsg.BlueToothBindLoginRequest.URL)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BlueToothBindLoginRequest::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BlueToothBindLoginRequest.URL)
}

// required uint32 OPCode = 3;
bool BlueToothBindLoginRequest::has_opcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BlueToothBindLoginRequest::set_has_opcode() {
  _has_bits_[0] |= 0x00000004u;
}
void BlueToothBindLoginRequest::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000004u;
}
void BlueToothBindLoginRequest::clear_opcode() {
  opcode_ = 0u;
  clear_has_opcode();
}
::google::protobuf::uint32 BlueToothBindLoginRequest::opcode() const {
  // @@protoc_insertion_point(field_get:micromsg.BlueToothBindLoginRequest.OPCode)
  return opcode_;
}
void BlueToothBindLoginRequest::set_opcode(::google::protobuf::uint32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BlueToothBindLoginRequest.OPCode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlueToothBindLoginResponse::kBaseResponseFieldNumber;
const int BlueToothBindLoginResponse::kDeviceNameFieldNumber;
const int BlueToothBindLoginResponse::kExpiredTimeFieldNumber;
const int BlueToothBindLoginResponse::kUUIDFieldNumber;
const int BlueToothBindLoginResponse::kBlueToothBroadCastUUIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlueToothBindLoginResponse::BlueToothBindLoginResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BlueToothBindLoginResponse)
}
BlueToothBindLoginResponse::BlueToothBindLoginResponse(const BlueToothBindLoginResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  devicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_devicename()) {
    devicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicename_);
  }
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_uuid()) {
    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  bluetoothbroadcastuuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bluetoothbroadcastuuid()) {
    bluetoothbroadcastuuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bluetoothbroadcastuuid_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  expiredtime_ = from.expiredtime_;
  // @@protoc_insertion_point(copy_constructor:micromsg.BlueToothBindLoginResponse)
}

void BlueToothBindLoginResponse::SharedCtor() {
  _cached_size_ = 0;
  devicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bluetoothbroadcastuuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&expiredtime_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(expiredtime_));
}

BlueToothBindLoginResponse::~BlueToothBindLoginResponse() {
  // @@protoc_insertion_point(destructor:micromsg.BlueToothBindLoginResponse)
  SharedDtor();
}

void BlueToothBindLoginResponse::SharedDtor() {
  devicename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bluetoothbroadcastuuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void BlueToothBindLoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlueToothBindLoginResponse::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BlueToothBindLoginResponse& BlueToothBindLoginResponse::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

BlueToothBindLoginResponse* BlueToothBindLoginResponse::New(::google::protobuf::Arena* arena) const {
  BlueToothBindLoginResponse* n = new BlueToothBindLoginResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlueToothBindLoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BlueToothBindLoginResponse)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_devicename()) {
      GOOGLE_DCHECK(!devicename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*devicename_.UnsafeRawStringPointer())->clear();
    }
    if (has_uuid()) {
      GOOGLE_DCHECK(!uuid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*uuid_.UnsafeRawStringPointer())->clear();
    }
    if (has_bluetoothbroadcastuuid()) {
      GOOGLE_DCHECK(!bluetoothbroadcastuuid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bluetoothbroadcastuuid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  expiredtime_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BlueToothBindLoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BlueToothBindLoginResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string DeviceName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devicename().data(), this->devicename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BlueToothBindLoginResponse.DeviceName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ExpiredTime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_expiredtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expiredtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string UUID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BlueToothBindLoginResponse.UUID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string BlueToothBroadCastUUID = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bluetoothbroadcastuuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bluetoothbroadcastuuid().data(), this->bluetoothbroadcastuuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BlueToothBindLoginResponse.BlueToothBroadCastUUID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BlueToothBindLoginResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BlueToothBindLoginResponse)
  return false;
#undef DO_
}

void BlueToothBindLoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BlueToothBindLoginResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional string DeviceName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BlueToothBindLoginResponse.DeviceName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->devicename(), output);
  }

  // required uint32 ExpiredTime = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->expiredtime(), output);
  }

  // optional string UUID = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BlueToothBindLoginResponse.UUID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->uuid(), output);
  }

  // optional string BlueToothBroadCastUUID = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bluetoothbroadcastuuid().data(), this->bluetoothbroadcastuuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BlueToothBindLoginResponse.BlueToothBroadCastUUID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->bluetoothbroadcastuuid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BlueToothBindLoginResponse)
}

::google::protobuf::uint8* BlueToothBindLoginResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BlueToothBindLoginResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional string DeviceName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BlueToothBindLoginResponse.DeviceName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->devicename(), target);
  }

  // required uint32 ExpiredTime = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->expiredtime(), target);
  }

  // optional string UUID = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BlueToothBindLoginResponse.UUID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uuid(), target);
  }

  // optional string BlueToothBroadCastUUID = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bluetoothbroadcastuuid().data(), this->bluetoothbroadcastuuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BlueToothBindLoginResponse.BlueToothBroadCastUUID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->bluetoothbroadcastuuid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BlueToothBindLoginResponse)
  return target;
}

size_t BlueToothBindLoginResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.BlueToothBindLoginResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_expiredtime()) {
    // required uint32 ExpiredTime = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->expiredtime());
  }

  return total_size;
}
size_t BlueToothBindLoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BlueToothBindLoginResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000018) ^ 0x00000018) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 ExpiredTime = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->expiredtime());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string DeviceName = 2;
    if (has_devicename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicename());
    }

    // optional string UUID = 4;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // optional string BlueToothBroadCastUUID = 5;
    if (has_bluetoothbroadcastuuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bluetoothbroadcastuuid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlueToothBindLoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BlueToothBindLoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BlueToothBindLoginResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlueToothBindLoginResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BlueToothBindLoginResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BlueToothBindLoginResponse)
    MergeFrom(*source);
  }
}

void BlueToothBindLoginResponse::MergeFrom(const BlueToothBindLoginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BlueToothBindLoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_devicename();
      devicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicename_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_uuid();
      uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_bluetoothbroadcastuuid();
      bluetoothbroadcastuuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bluetoothbroadcastuuid_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000010u) {
      expiredtime_ = from.expiredtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BlueToothBindLoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BlueToothBindLoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlueToothBindLoginResponse::CopyFrom(const BlueToothBindLoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BlueToothBindLoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlueToothBindLoginResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000018) != 0x00000018) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void BlueToothBindLoginResponse::Swap(BlueToothBindLoginResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlueToothBindLoginResponse::InternalSwap(BlueToothBindLoginResponse* other) {
  devicename_.Swap(&other->devicename_);
  uuid_.Swap(&other->uuid_);
  bluetoothbroadcastuuid_.Swap(&other->bluetoothbroadcastuuid_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(expiredtime_, other->expiredtime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlueToothBindLoginResponse::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlueToothBindLoginResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool BlueToothBindLoginResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BlueToothBindLoginResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000008u;
}
void BlueToothBindLoginResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000008u;
}
void BlueToothBindLoginResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& BlueToothBindLoginResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.BlueToothBindLoginResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* BlueToothBindLoginResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BlueToothBindLoginResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* BlueToothBindLoginResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.BlueToothBindLoginResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void BlueToothBindLoginResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BlueToothBindLoginResponse.BaseResponse)
}

// optional string DeviceName = 2;
bool BlueToothBindLoginResponse::has_devicename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BlueToothBindLoginResponse::set_has_devicename() {
  _has_bits_[0] |= 0x00000001u;
}
void BlueToothBindLoginResponse::clear_has_devicename() {
  _has_bits_[0] &= ~0x00000001u;
}
void BlueToothBindLoginResponse::clear_devicename() {
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_devicename();
}
const ::std::string& BlueToothBindLoginResponse::devicename() const {
  // @@protoc_insertion_point(field_get:micromsg.BlueToothBindLoginResponse.DeviceName)
  return devicename_.GetNoArena();
}
void BlueToothBindLoginResponse::set_devicename(const ::std::string& value) {
  set_has_devicename();
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BlueToothBindLoginResponse.DeviceName)
}
#if LANG_CXX11
void BlueToothBindLoginResponse::set_devicename(::std::string&& value) {
  set_has_devicename();
  devicename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BlueToothBindLoginResponse.DeviceName)
}
#endif
void BlueToothBindLoginResponse::set_devicename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_devicename();
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BlueToothBindLoginResponse.DeviceName)
}
void BlueToothBindLoginResponse::set_devicename(const char* value, size_t size) {
  set_has_devicename();
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BlueToothBindLoginResponse.DeviceName)
}
::std::string* BlueToothBindLoginResponse::mutable_devicename() {
  set_has_devicename();
  // @@protoc_insertion_point(field_mutable:micromsg.BlueToothBindLoginResponse.DeviceName)
  return devicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BlueToothBindLoginResponse::release_devicename() {
  // @@protoc_insertion_point(field_release:micromsg.BlueToothBindLoginResponse.DeviceName)
  clear_has_devicename();
  return devicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BlueToothBindLoginResponse::set_allocated_devicename(::std::string* devicename) {
  if (devicename != NULL) {
    set_has_devicename();
  } else {
    clear_has_devicename();
  }
  devicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicename);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BlueToothBindLoginResponse.DeviceName)
}

// required uint32 ExpiredTime = 3;
bool BlueToothBindLoginResponse::has_expiredtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BlueToothBindLoginResponse::set_has_expiredtime() {
  _has_bits_[0] |= 0x00000010u;
}
void BlueToothBindLoginResponse::clear_has_expiredtime() {
  _has_bits_[0] &= ~0x00000010u;
}
void BlueToothBindLoginResponse::clear_expiredtime() {
  expiredtime_ = 0u;
  clear_has_expiredtime();
}
::google::protobuf::uint32 BlueToothBindLoginResponse::expiredtime() const {
  // @@protoc_insertion_point(field_get:micromsg.BlueToothBindLoginResponse.ExpiredTime)
  return expiredtime_;
}
void BlueToothBindLoginResponse::set_expiredtime(::google::protobuf::uint32 value) {
  set_has_expiredtime();
  expiredtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BlueToothBindLoginResponse.ExpiredTime)
}

// optional string UUID = 4;
bool BlueToothBindLoginResponse::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BlueToothBindLoginResponse::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
void BlueToothBindLoginResponse::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
void BlueToothBindLoginResponse::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuid();
}
const ::std::string& BlueToothBindLoginResponse::uuid() const {
  // @@protoc_insertion_point(field_get:micromsg.BlueToothBindLoginResponse.UUID)
  return uuid_.GetNoArena();
}
void BlueToothBindLoginResponse::set_uuid(const ::std::string& value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BlueToothBindLoginResponse.UUID)
}
#if LANG_CXX11
void BlueToothBindLoginResponse::set_uuid(::std::string&& value) {
  set_has_uuid();
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BlueToothBindLoginResponse.UUID)
}
#endif
void BlueToothBindLoginResponse::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BlueToothBindLoginResponse.UUID)
}
void BlueToothBindLoginResponse::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BlueToothBindLoginResponse.UUID)
}
::std::string* BlueToothBindLoginResponse::mutable_uuid() {
  set_has_uuid();
  // @@protoc_insertion_point(field_mutable:micromsg.BlueToothBindLoginResponse.UUID)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BlueToothBindLoginResponse::release_uuid() {
  // @@protoc_insertion_point(field_release:micromsg.BlueToothBindLoginResponse.UUID)
  clear_has_uuid();
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BlueToothBindLoginResponse::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    set_has_uuid();
  } else {
    clear_has_uuid();
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BlueToothBindLoginResponse.UUID)
}

// optional string BlueToothBroadCastUUID = 5;
bool BlueToothBindLoginResponse::has_bluetoothbroadcastuuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BlueToothBindLoginResponse::set_has_bluetoothbroadcastuuid() {
  _has_bits_[0] |= 0x00000004u;
}
void BlueToothBindLoginResponse::clear_has_bluetoothbroadcastuuid() {
  _has_bits_[0] &= ~0x00000004u;
}
void BlueToothBindLoginResponse::clear_bluetoothbroadcastuuid() {
  bluetoothbroadcastuuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bluetoothbroadcastuuid();
}
const ::std::string& BlueToothBindLoginResponse::bluetoothbroadcastuuid() const {
  // @@protoc_insertion_point(field_get:micromsg.BlueToothBindLoginResponse.BlueToothBroadCastUUID)
  return bluetoothbroadcastuuid_.GetNoArena();
}
void BlueToothBindLoginResponse::set_bluetoothbroadcastuuid(const ::std::string& value) {
  set_has_bluetoothbroadcastuuid();
  bluetoothbroadcastuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BlueToothBindLoginResponse.BlueToothBroadCastUUID)
}
#if LANG_CXX11
void BlueToothBindLoginResponse::set_bluetoothbroadcastuuid(::std::string&& value) {
  set_has_bluetoothbroadcastuuid();
  bluetoothbroadcastuuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BlueToothBindLoginResponse.BlueToothBroadCastUUID)
}
#endif
void BlueToothBindLoginResponse::set_bluetoothbroadcastuuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bluetoothbroadcastuuid();
  bluetoothbroadcastuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BlueToothBindLoginResponse.BlueToothBroadCastUUID)
}
void BlueToothBindLoginResponse::set_bluetoothbroadcastuuid(const char* value, size_t size) {
  set_has_bluetoothbroadcastuuid();
  bluetoothbroadcastuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BlueToothBindLoginResponse.BlueToothBroadCastUUID)
}
::std::string* BlueToothBindLoginResponse::mutable_bluetoothbroadcastuuid() {
  set_has_bluetoothbroadcastuuid();
  // @@protoc_insertion_point(field_mutable:micromsg.BlueToothBindLoginResponse.BlueToothBroadCastUUID)
  return bluetoothbroadcastuuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BlueToothBindLoginResponse::release_bluetoothbroadcastuuid() {
  // @@protoc_insertion_point(field_release:micromsg.BlueToothBindLoginResponse.BlueToothBroadCastUUID)
  clear_has_bluetoothbroadcastuuid();
  return bluetoothbroadcastuuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BlueToothBindLoginResponse::set_allocated_bluetoothbroadcastuuid(::std::string* bluetoothbroadcastuuid) {
  if (bluetoothbroadcastuuid != NULL) {
    set_has_bluetoothbroadcastuuid();
  } else {
    clear_has_bluetoothbroadcastuuid();
  }
  bluetoothbroadcastuuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bluetoothbroadcastuuid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BlueToothBindLoginResponse.BlueToothBroadCastUUID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlueToothAutoLoginRequest::kBaseRequestFieldNumber;
const int BlueToothAutoLoginRequest::kUserNameFieldNumber;
const int BlueToothAutoLoginRequest::kUUIDFieldNumber;
const int BlueToothAutoLoginRequest::kAutoAuthTicketFieldNumber;
const int BlueToothAutoLoginRequest::kLoginInfoDataFieldNumber;
const int BlueToothAutoLoginRequest::kRandomEncryKeyFieldNumber;
const int BlueToothAutoLoginRequest::kBlueToothBroadCastUUIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlueToothAutoLoginRequest::BlueToothAutoLoginRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BlueToothAutoLoginRequest)
}
BlueToothAutoLoginRequest::BlueToothAutoLoginRequest(const BlueToothAutoLoginRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_uuid()) {
    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  autoauthticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_autoauthticket()) {
    autoauthticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.autoauthticket_);
  }
  bluetoothbroadcastuuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bluetoothbroadcastuuid()) {
    bluetoothbroadcastuuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bluetoothbroadcastuuid_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_logininfodata()) {
    logininfodata_ = new ::micromsg::SKBuiltinBuffer_t(*from.logininfodata_);
  } else {
    logininfodata_ = NULL;
  }
  if (from.has_randomencrykey()) {
    randomencrykey_ = new ::micromsg::SKBuiltinBuffer_t(*from.randomencrykey_);
  } else {
    randomencrykey_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.BlueToothAutoLoginRequest)
}

void BlueToothAutoLoginRequest::SharedCtor() {
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  autoauthticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bluetoothbroadcastuuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&randomencrykey_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(randomencrykey_));
}

BlueToothAutoLoginRequest::~BlueToothAutoLoginRequest() {
  // @@protoc_insertion_point(destructor:micromsg.BlueToothAutoLoginRequest)
  SharedDtor();
}

void BlueToothAutoLoginRequest::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  autoauthticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bluetoothbroadcastuuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete logininfodata_;
  }
  if (this != internal_default_instance()) {
    delete randomencrykey_;
  }
}

void BlueToothAutoLoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlueToothAutoLoginRequest::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BlueToothAutoLoginRequest& BlueToothAutoLoginRequest::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

BlueToothAutoLoginRequest* BlueToothAutoLoginRequest::New(::google::protobuf::Arena* arena) const {
  BlueToothAutoLoginRequest* n = new BlueToothAutoLoginRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlueToothAutoLoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BlueToothAutoLoginRequest)
  if (_has_bits_[0 / 32] & 127u) {
    if (has_username()) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
    if (has_uuid()) {
      GOOGLE_DCHECK(!uuid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*uuid_.UnsafeRawStringPointer())->clear();
    }
    if (has_autoauthticket()) {
      GOOGLE_DCHECK(!autoauthticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*autoauthticket_.UnsafeRawStringPointer())->clear();
    }
    if (has_bluetoothbroadcastuuid()) {
      GOOGLE_DCHECK(!bluetoothbroadcastuuid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bluetoothbroadcastuuid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_logininfodata()) {
      GOOGLE_DCHECK(logininfodata_ != NULL);
      logininfodata_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_randomencrykey()) {
      GOOGLE_DCHECK(randomencrykey_ != NULL);
      randomencrykey_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BlueToothAutoLoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BlueToothAutoLoginRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string UserName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BlueToothAutoLoginRequest.UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string UUID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BlueToothAutoLoginRequest.UUID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AutoAuthTicket = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_autoauthticket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->autoauthticket().data(), this->autoauthticket().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BlueToothAutoLoginRequest.AutoAuthTicket");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t LoginInfoData = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logininfodata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_randomencrykey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string BlueToothBroadCastUUID = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bluetoothbroadcastuuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bluetoothbroadcastuuid().data(), this->bluetoothbroadcastuuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BlueToothAutoLoginRequest.BlueToothBroadCastUUID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BlueToothAutoLoginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BlueToothAutoLoginRequest)
  return false;
#undef DO_
}

void BlueToothAutoLoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BlueToothAutoLoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string UserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BlueToothAutoLoginRequest.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // optional string UUID = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BlueToothAutoLoginRequest.UUID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->uuid(), output);
  }

  // optional string AutoAuthTicket = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->autoauthticket().data(), this->autoauthticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BlueToothAutoLoginRequest.AutoAuthTicket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->autoauthticket(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t LoginInfoData = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->logininfodata_, output);
  }

  // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->randomencrykey_, output);
  }

  // optional string BlueToothBroadCastUUID = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bluetoothbroadcastuuid().data(), this->bluetoothbroadcastuuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BlueToothAutoLoginRequest.BlueToothBroadCastUUID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->bluetoothbroadcastuuid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BlueToothAutoLoginRequest)
}

::google::protobuf::uint8* BlueToothAutoLoginRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BlueToothAutoLoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string UserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BlueToothAutoLoginRequest.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // optional string UUID = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BlueToothAutoLoginRequest.UUID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uuid(), target);
  }

  // optional string AutoAuthTicket = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->autoauthticket().data(), this->autoauthticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BlueToothAutoLoginRequest.AutoAuthTicket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->autoauthticket(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t LoginInfoData = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->logininfodata_, deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->randomencrykey_, deterministic, target);
  }

  // optional string BlueToothBroadCastUUID = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bluetoothbroadcastuuid().data(), this->bluetoothbroadcastuuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BlueToothAutoLoginRequest.BlueToothBroadCastUUID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->bluetoothbroadcastuuid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BlueToothAutoLoginRequest)
  return target;
}

size_t BlueToothAutoLoginRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.BlueToothAutoLoginRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_logininfodata()) {
    // required .micromsg.SKBuiltinBuffer_t LoginInfoData = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->logininfodata_);
  }

  if (has_randomencrykey()) {
    // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->randomencrykey_);
  }

  return total_size;
}
size_t BlueToothAutoLoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BlueToothAutoLoginRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000070) ^ 0x00000070) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.SKBuiltinBuffer_t LoginInfoData = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->logininfodata_);

    // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->randomencrykey_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string UserName = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string UUID = 3;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // optional string AutoAuthTicket = 4;
    if (has_autoauthticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->autoauthticket());
    }

    // optional string BlueToothBroadCastUUID = 7;
    if (has_bluetoothbroadcastuuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bluetoothbroadcastuuid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlueToothAutoLoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BlueToothAutoLoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BlueToothAutoLoginRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlueToothAutoLoginRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BlueToothAutoLoginRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BlueToothAutoLoginRequest)
    MergeFrom(*source);
  }
}

void BlueToothAutoLoginRequest::MergeFrom(const BlueToothAutoLoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BlueToothAutoLoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_uuid();
      uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_autoauthticket();
      autoauthticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.autoauthticket_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_bluetoothbroadcastuuid();
      bluetoothbroadcastuuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bluetoothbroadcastuuid_);
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_logininfodata()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.logininfodata());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_randomencrykey()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.randomencrykey());
    }
  }
}

void BlueToothAutoLoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BlueToothAutoLoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlueToothAutoLoginRequest::CopyFrom(const BlueToothAutoLoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BlueToothAutoLoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlueToothAutoLoginRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000070) != 0x00000070) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_logininfodata()) {
    if (!this->logininfodata_->IsInitialized()) return false;
  }
  if (has_randomencrykey()) {
    if (!this->randomencrykey_->IsInitialized()) return false;
  }
  return true;
}

void BlueToothAutoLoginRequest::Swap(BlueToothAutoLoginRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlueToothAutoLoginRequest::InternalSwap(BlueToothAutoLoginRequest* other) {
  username_.Swap(&other->username_);
  uuid_.Swap(&other->uuid_);
  autoauthticket_.Swap(&other->autoauthticket_);
  bluetoothbroadcastuuid_.Swap(&other->bluetoothbroadcastuuid_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(logininfodata_, other->logininfodata_);
  std::swap(randomencrykey_, other->randomencrykey_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlueToothAutoLoginRequest::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlueToothAutoLoginRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool BlueToothAutoLoginRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BlueToothAutoLoginRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000010u;
}
void BlueToothAutoLoginRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000010u;
}
void BlueToothAutoLoginRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& BlueToothAutoLoginRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.BlueToothAutoLoginRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* BlueToothAutoLoginRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BlueToothAutoLoginRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* BlueToothAutoLoginRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.BlueToothAutoLoginRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void BlueToothAutoLoginRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BlueToothAutoLoginRequest.BaseRequest)
}

// optional string UserName = 2;
bool BlueToothAutoLoginRequest::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BlueToothAutoLoginRequest::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void BlueToothAutoLoginRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void BlueToothAutoLoginRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& BlueToothAutoLoginRequest::username() const {
  // @@protoc_insertion_point(field_get:micromsg.BlueToothAutoLoginRequest.UserName)
  return username_.GetNoArena();
}
void BlueToothAutoLoginRequest::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BlueToothAutoLoginRequest.UserName)
}
#if LANG_CXX11
void BlueToothAutoLoginRequest::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BlueToothAutoLoginRequest.UserName)
}
#endif
void BlueToothAutoLoginRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BlueToothAutoLoginRequest.UserName)
}
void BlueToothAutoLoginRequest::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BlueToothAutoLoginRequest.UserName)
}
::std::string* BlueToothAutoLoginRequest::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.BlueToothAutoLoginRequest.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BlueToothAutoLoginRequest::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.BlueToothAutoLoginRequest.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BlueToothAutoLoginRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BlueToothAutoLoginRequest.UserName)
}

// optional string UUID = 3;
bool BlueToothAutoLoginRequest::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BlueToothAutoLoginRequest::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
void BlueToothAutoLoginRequest::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
void BlueToothAutoLoginRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuid();
}
const ::std::string& BlueToothAutoLoginRequest::uuid() const {
  // @@protoc_insertion_point(field_get:micromsg.BlueToothAutoLoginRequest.UUID)
  return uuid_.GetNoArena();
}
void BlueToothAutoLoginRequest::set_uuid(const ::std::string& value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BlueToothAutoLoginRequest.UUID)
}
#if LANG_CXX11
void BlueToothAutoLoginRequest::set_uuid(::std::string&& value) {
  set_has_uuid();
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BlueToothAutoLoginRequest.UUID)
}
#endif
void BlueToothAutoLoginRequest::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BlueToothAutoLoginRequest.UUID)
}
void BlueToothAutoLoginRequest::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BlueToothAutoLoginRequest.UUID)
}
::std::string* BlueToothAutoLoginRequest::mutable_uuid() {
  set_has_uuid();
  // @@protoc_insertion_point(field_mutable:micromsg.BlueToothAutoLoginRequest.UUID)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BlueToothAutoLoginRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:micromsg.BlueToothAutoLoginRequest.UUID)
  clear_has_uuid();
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BlueToothAutoLoginRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    set_has_uuid();
  } else {
    clear_has_uuid();
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BlueToothAutoLoginRequest.UUID)
}

// optional string AutoAuthTicket = 4;
bool BlueToothAutoLoginRequest::has_autoauthticket() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BlueToothAutoLoginRequest::set_has_autoauthticket() {
  _has_bits_[0] |= 0x00000004u;
}
void BlueToothAutoLoginRequest::clear_has_autoauthticket() {
  _has_bits_[0] &= ~0x00000004u;
}
void BlueToothAutoLoginRequest::clear_autoauthticket() {
  autoauthticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_autoauthticket();
}
const ::std::string& BlueToothAutoLoginRequest::autoauthticket() const {
  // @@protoc_insertion_point(field_get:micromsg.BlueToothAutoLoginRequest.AutoAuthTicket)
  return autoauthticket_.GetNoArena();
}
void BlueToothAutoLoginRequest::set_autoauthticket(const ::std::string& value) {
  set_has_autoauthticket();
  autoauthticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BlueToothAutoLoginRequest.AutoAuthTicket)
}
#if LANG_CXX11
void BlueToothAutoLoginRequest::set_autoauthticket(::std::string&& value) {
  set_has_autoauthticket();
  autoauthticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BlueToothAutoLoginRequest.AutoAuthTicket)
}
#endif
void BlueToothAutoLoginRequest::set_autoauthticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_autoauthticket();
  autoauthticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BlueToothAutoLoginRequest.AutoAuthTicket)
}
void BlueToothAutoLoginRequest::set_autoauthticket(const char* value, size_t size) {
  set_has_autoauthticket();
  autoauthticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BlueToothAutoLoginRequest.AutoAuthTicket)
}
::std::string* BlueToothAutoLoginRequest::mutable_autoauthticket() {
  set_has_autoauthticket();
  // @@protoc_insertion_point(field_mutable:micromsg.BlueToothAutoLoginRequest.AutoAuthTicket)
  return autoauthticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BlueToothAutoLoginRequest::release_autoauthticket() {
  // @@protoc_insertion_point(field_release:micromsg.BlueToothAutoLoginRequest.AutoAuthTicket)
  clear_has_autoauthticket();
  return autoauthticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BlueToothAutoLoginRequest::set_allocated_autoauthticket(::std::string* autoauthticket) {
  if (autoauthticket != NULL) {
    set_has_autoauthticket();
  } else {
    clear_has_autoauthticket();
  }
  autoauthticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), autoauthticket);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BlueToothAutoLoginRequest.AutoAuthTicket)
}

// required .micromsg.SKBuiltinBuffer_t LoginInfoData = 5;
bool BlueToothAutoLoginRequest::has_logininfodata() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BlueToothAutoLoginRequest::set_has_logininfodata() {
  _has_bits_[0] |= 0x00000020u;
}
void BlueToothAutoLoginRequest::clear_has_logininfodata() {
  _has_bits_[0] &= ~0x00000020u;
}
void BlueToothAutoLoginRequest::clear_logininfodata() {
  if (logininfodata_ != NULL) logininfodata_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_logininfodata();
}
const ::micromsg::SKBuiltinBuffer_t& BlueToothAutoLoginRequest::logininfodata() const {
  // @@protoc_insertion_point(field_get:micromsg.BlueToothAutoLoginRequest.LoginInfoData)
  return logininfodata_ != NULL ? *logininfodata_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* BlueToothAutoLoginRequest::mutable_logininfodata() {
  set_has_logininfodata();
  if (logininfodata_ == NULL) {
    logininfodata_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BlueToothAutoLoginRequest.LoginInfoData)
  return logininfodata_;
}
::micromsg::SKBuiltinBuffer_t* BlueToothAutoLoginRequest::release_logininfodata() {
  // @@protoc_insertion_point(field_release:micromsg.BlueToothAutoLoginRequest.LoginInfoData)
  clear_has_logininfodata();
  ::micromsg::SKBuiltinBuffer_t* temp = logininfodata_;
  logininfodata_ = NULL;
  return temp;
}
void BlueToothAutoLoginRequest::set_allocated_logininfodata(::micromsg::SKBuiltinBuffer_t* logininfodata) {
  delete logininfodata_;
  logininfodata_ = logininfodata;
  if (logininfodata) {
    set_has_logininfodata();
  } else {
    clear_has_logininfodata();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BlueToothAutoLoginRequest.LoginInfoData)
}

// required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 6;
bool BlueToothAutoLoginRequest::has_randomencrykey() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BlueToothAutoLoginRequest::set_has_randomencrykey() {
  _has_bits_[0] |= 0x00000040u;
}
void BlueToothAutoLoginRequest::clear_has_randomencrykey() {
  _has_bits_[0] &= ~0x00000040u;
}
void BlueToothAutoLoginRequest::clear_randomencrykey() {
  if (randomencrykey_ != NULL) randomencrykey_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_randomencrykey();
}
const ::micromsg::SKBuiltinBuffer_t& BlueToothAutoLoginRequest::randomencrykey() const {
  // @@protoc_insertion_point(field_get:micromsg.BlueToothAutoLoginRequest.RandomEncryKey)
  return randomencrykey_ != NULL ? *randomencrykey_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* BlueToothAutoLoginRequest::mutable_randomencrykey() {
  set_has_randomencrykey();
  if (randomencrykey_ == NULL) {
    randomencrykey_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BlueToothAutoLoginRequest.RandomEncryKey)
  return randomencrykey_;
}
::micromsg::SKBuiltinBuffer_t* BlueToothAutoLoginRequest::release_randomencrykey() {
  // @@protoc_insertion_point(field_release:micromsg.BlueToothAutoLoginRequest.RandomEncryKey)
  clear_has_randomencrykey();
  ::micromsg::SKBuiltinBuffer_t* temp = randomencrykey_;
  randomencrykey_ = NULL;
  return temp;
}
void BlueToothAutoLoginRequest::set_allocated_randomencrykey(::micromsg::SKBuiltinBuffer_t* randomencrykey) {
  delete randomencrykey_;
  randomencrykey_ = randomencrykey;
  if (randomencrykey) {
    set_has_randomencrykey();
  } else {
    clear_has_randomencrykey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BlueToothAutoLoginRequest.RandomEncryKey)
}

// optional string BlueToothBroadCastUUID = 7;
bool BlueToothAutoLoginRequest::has_bluetoothbroadcastuuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BlueToothAutoLoginRequest::set_has_bluetoothbroadcastuuid() {
  _has_bits_[0] |= 0x00000008u;
}
void BlueToothAutoLoginRequest::clear_has_bluetoothbroadcastuuid() {
  _has_bits_[0] &= ~0x00000008u;
}
void BlueToothAutoLoginRequest::clear_bluetoothbroadcastuuid() {
  bluetoothbroadcastuuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bluetoothbroadcastuuid();
}
const ::std::string& BlueToothAutoLoginRequest::bluetoothbroadcastuuid() const {
  // @@protoc_insertion_point(field_get:micromsg.BlueToothAutoLoginRequest.BlueToothBroadCastUUID)
  return bluetoothbroadcastuuid_.GetNoArena();
}
void BlueToothAutoLoginRequest::set_bluetoothbroadcastuuid(const ::std::string& value) {
  set_has_bluetoothbroadcastuuid();
  bluetoothbroadcastuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BlueToothAutoLoginRequest.BlueToothBroadCastUUID)
}
#if LANG_CXX11
void BlueToothAutoLoginRequest::set_bluetoothbroadcastuuid(::std::string&& value) {
  set_has_bluetoothbroadcastuuid();
  bluetoothbroadcastuuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BlueToothAutoLoginRequest.BlueToothBroadCastUUID)
}
#endif
void BlueToothAutoLoginRequest::set_bluetoothbroadcastuuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bluetoothbroadcastuuid();
  bluetoothbroadcastuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BlueToothAutoLoginRequest.BlueToothBroadCastUUID)
}
void BlueToothAutoLoginRequest::set_bluetoothbroadcastuuid(const char* value, size_t size) {
  set_has_bluetoothbroadcastuuid();
  bluetoothbroadcastuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BlueToothAutoLoginRequest.BlueToothBroadCastUUID)
}
::std::string* BlueToothAutoLoginRequest::mutable_bluetoothbroadcastuuid() {
  set_has_bluetoothbroadcastuuid();
  // @@protoc_insertion_point(field_mutable:micromsg.BlueToothAutoLoginRequest.BlueToothBroadCastUUID)
  return bluetoothbroadcastuuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BlueToothAutoLoginRequest::release_bluetoothbroadcastuuid() {
  // @@protoc_insertion_point(field_release:micromsg.BlueToothAutoLoginRequest.BlueToothBroadCastUUID)
  clear_has_bluetoothbroadcastuuid();
  return bluetoothbroadcastuuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BlueToothAutoLoginRequest::set_allocated_bluetoothbroadcastuuid(::std::string* bluetoothbroadcastuuid) {
  if (bluetoothbroadcastuuid != NULL) {
    set_has_bluetoothbroadcastuuid();
  } else {
    clear_has_bluetoothbroadcastuuid();
  }
  bluetoothbroadcastuuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bluetoothbroadcastuuid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BlueToothAutoLoginRequest.BlueToothBroadCastUUID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlueToothAutoLoginResponse::kBaseResponseFieldNumber;
const int BlueToothAutoLoginResponse::kUserNameFieldNumber;
const int BlueToothAutoLoginResponse::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlueToothAutoLoginResponse::BlueToothAutoLoginResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BlueToothAutoLoginResponse)
}
BlueToothAutoLoginResponse::BlueToothAutoLoginResponse(const BlueToothAutoLoginResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.BlueToothAutoLoginResponse)
}

void BlueToothAutoLoginResponse::SharedCtor() {
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baseresponse_ = NULL;
}

BlueToothAutoLoginResponse::~BlueToothAutoLoginResponse() {
  // @@protoc_insertion_point(destructor:micromsg.BlueToothAutoLoginResponse)
  SharedDtor();
}

void BlueToothAutoLoginResponse::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void BlueToothAutoLoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlueToothAutoLoginResponse::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BlueToothAutoLoginResponse& BlueToothAutoLoginResponse::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

BlueToothAutoLoginResponse* BlueToothAutoLoginResponse::New(::google::protobuf::Arena* arena) const {
  BlueToothAutoLoginResponse* n = new BlueToothAutoLoginResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlueToothAutoLoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BlueToothAutoLoginResponse)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_username()) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
    if (has_password()) {
      GOOGLE_DCHECK(!password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*password_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BlueToothAutoLoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BlueToothAutoLoginResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string UserName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BlueToothAutoLoginResponse.UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Password = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BlueToothAutoLoginResponse.Password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BlueToothAutoLoginResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BlueToothAutoLoginResponse)
  return false;
#undef DO_
}

void BlueToothAutoLoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BlueToothAutoLoginResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional string UserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BlueToothAutoLoginResponse.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // optional string Password = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BlueToothAutoLoginResponse.Password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BlueToothAutoLoginResponse)
}

::google::protobuf::uint8* BlueToothAutoLoginResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BlueToothAutoLoginResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional string UserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BlueToothAutoLoginResponse.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // optional string Password = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BlueToothAutoLoginResponse.Password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BlueToothAutoLoginResponse)
  return target;
}

size_t BlueToothAutoLoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BlueToothAutoLoginResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string UserName = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string Password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlueToothAutoLoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BlueToothAutoLoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BlueToothAutoLoginResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlueToothAutoLoginResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BlueToothAutoLoginResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BlueToothAutoLoginResponse)
    MergeFrom(*source);
  }
}

void BlueToothAutoLoginResponse::MergeFrom(const BlueToothAutoLoginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BlueToothAutoLoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
  }
}

void BlueToothAutoLoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BlueToothAutoLoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlueToothAutoLoginResponse::CopyFrom(const BlueToothAutoLoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BlueToothAutoLoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlueToothAutoLoginResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void BlueToothAutoLoginResponse::Swap(BlueToothAutoLoginResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlueToothAutoLoginResponse::InternalSwap(BlueToothAutoLoginResponse* other) {
  username_.Swap(&other->username_);
  password_.Swap(&other->password_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlueToothAutoLoginResponse::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlueToothAutoLoginResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool BlueToothAutoLoginResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BlueToothAutoLoginResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000004u;
}
void BlueToothAutoLoginResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000004u;
}
void BlueToothAutoLoginResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& BlueToothAutoLoginResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.BlueToothAutoLoginResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* BlueToothAutoLoginResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BlueToothAutoLoginResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* BlueToothAutoLoginResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.BlueToothAutoLoginResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void BlueToothAutoLoginResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BlueToothAutoLoginResponse.BaseResponse)
}

// optional string UserName = 2;
bool BlueToothAutoLoginResponse::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BlueToothAutoLoginResponse::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void BlueToothAutoLoginResponse::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void BlueToothAutoLoginResponse::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& BlueToothAutoLoginResponse::username() const {
  // @@protoc_insertion_point(field_get:micromsg.BlueToothAutoLoginResponse.UserName)
  return username_.GetNoArena();
}
void BlueToothAutoLoginResponse::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BlueToothAutoLoginResponse.UserName)
}
#if LANG_CXX11
void BlueToothAutoLoginResponse::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BlueToothAutoLoginResponse.UserName)
}
#endif
void BlueToothAutoLoginResponse::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BlueToothAutoLoginResponse.UserName)
}
void BlueToothAutoLoginResponse::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BlueToothAutoLoginResponse.UserName)
}
::std::string* BlueToothAutoLoginResponse::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.BlueToothAutoLoginResponse.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BlueToothAutoLoginResponse::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.BlueToothAutoLoginResponse.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BlueToothAutoLoginResponse::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BlueToothAutoLoginResponse.UserName)
}

// optional string Password = 3;
bool BlueToothAutoLoginResponse::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BlueToothAutoLoginResponse::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
void BlueToothAutoLoginResponse::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
void BlueToothAutoLoginResponse::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
const ::std::string& BlueToothAutoLoginResponse::password() const {
  // @@protoc_insertion_point(field_get:micromsg.BlueToothAutoLoginResponse.Password)
  return password_.GetNoArena();
}
void BlueToothAutoLoginResponse::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BlueToothAutoLoginResponse.Password)
}
#if LANG_CXX11
void BlueToothAutoLoginResponse::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BlueToothAutoLoginResponse.Password)
}
#endif
void BlueToothAutoLoginResponse::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BlueToothAutoLoginResponse.Password)
}
void BlueToothAutoLoginResponse::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BlueToothAutoLoginResponse.Password)
}
::std::string* BlueToothAutoLoginResponse::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:micromsg.BlueToothAutoLoginResponse.Password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BlueToothAutoLoginResponse::release_password() {
  // @@protoc_insertion_point(field_release:micromsg.BlueToothAutoLoginResponse.Password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BlueToothAutoLoginResponse::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BlueToothAutoLoginResponse.Password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlueToothAutoLoginInfoPkg::kSaltFieldNumber;
const int BlueToothAutoLoginInfoPkg::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlueToothAutoLoginInfoPkg::BlueToothAutoLoginInfoPkg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BlueToothAutoLoginInfoPkg)
}
BlueToothAutoLoginInfoPkg::BlueToothAutoLoginInfoPkg(const BlueToothAutoLoginInfoPkg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_salt()) {
    salt_ = new ::micromsg::SKBuiltinBuffer_t(*from.salt_);
  } else {
    salt_ = NULL;
  }
  if (from.has_data()) {
    data_ = new ::micromsg::SKBuiltinBuffer_t(*from.data_);
  } else {
    data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.BlueToothAutoLoginInfoPkg)
}

void BlueToothAutoLoginInfoPkg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&salt_, 0, reinterpret_cast<char*>(&data_) -
    reinterpret_cast<char*>(&salt_) + sizeof(data_));
}

BlueToothAutoLoginInfoPkg::~BlueToothAutoLoginInfoPkg() {
  // @@protoc_insertion_point(destructor:micromsg.BlueToothAutoLoginInfoPkg)
  SharedDtor();
}

void BlueToothAutoLoginInfoPkg::SharedDtor() {
  if (this != internal_default_instance()) {
    delete salt_;
  }
  if (this != internal_default_instance()) {
    delete data_;
  }
}

void BlueToothAutoLoginInfoPkg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlueToothAutoLoginInfoPkg::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BlueToothAutoLoginInfoPkg& BlueToothAutoLoginInfoPkg::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

BlueToothAutoLoginInfoPkg* BlueToothAutoLoginInfoPkg::New(::google::protobuf::Arena* arena) const {
  BlueToothAutoLoginInfoPkg* n = new BlueToothAutoLoginInfoPkg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlueToothAutoLoginInfoPkg::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BlueToothAutoLoginInfoPkg)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_salt()) {
      GOOGLE_DCHECK(salt_ != NULL);
      salt_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_data()) {
      GOOGLE_DCHECK(data_ != NULL);
      data_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BlueToothAutoLoginInfoPkg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BlueToothAutoLoginInfoPkg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.SKBuiltinBuffer_t Salt = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_salt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t Data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BlueToothAutoLoginInfoPkg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BlueToothAutoLoginInfoPkg)
  return false;
#undef DO_
}

void BlueToothAutoLoginInfoPkg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BlueToothAutoLoginInfoPkg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinBuffer_t Salt = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->salt_, output);
  }

  // required .micromsg.SKBuiltinBuffer_t Data = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->data_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BlueToothAutoLoginInfoPkg)
}

::google::protobuf::uint8* BlueToothAutoLoginInfoPkg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BlueToothAutoLoginInfoPkg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinBuffer_t Salt = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->salt_, deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t Data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->data_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BlueToothAutoLoginInfoPkg)
  return target;
}

size_t BlueToothAutoLoginInfoPkg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.BlueToothAutoLoginInfoPkg)
  size_t total_size = 0;

  if (has_salt()) {
    // required .micromsg.SKBuiltinBuffer_t Salt = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->salt_);
  }

  if (has_data()) {
    // required .micromsg.SKBuiltinBuffer_t Data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  return total_size;
}
size_t BlueToothAutoLoginInfoPkg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BlueToothAutoLoginInfoPkg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.SKBuiltinBuffer_t Salt = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->salt_);

    // required .micromsg.SKBuiltinBuffer_t Data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlueToothAutoLoginInfoPkg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BlueToothAutoLoginInfoPkg)
  GOOGLE_DCHECK_NE(&from, this);
  const BlueToothAutoLoginInfoPkg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlueToothAutoLoginInfoPkg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BlueToothAutoLoginInfoPkg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BlueToothAutoLoginInfoPkg)
    MergeFrom(*source);
  }
}

void BlueToothAutoLoginInfoPkg::MergeFrom(const BlueToothAutoLoginInfoPkg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BlueToothAutoLoginInfoPkg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_salt()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.salt());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_data()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.data());
    }
  }
}

void BlueToothAutoLoginInfoPkg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BlueToothAutoLoginInfoPkg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlueToothAutoLoginInfoPkg::CopyFrom(const BlueToothAutoLoginInfoPkg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BlueToothAutoLoginInfoPkg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlueToothAutoLoginInfoPkg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_salt()) {
    if (!this->salt_->IsInitialized()) return false;
  }
  if (has_data()) {
    if (!this->data_->IsInitialized()) return false;
  }
  return true;
}

void BlueToothAutoLoginInfoPkg::Swap(BlueToothAutoLoginInfoPkg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlueToothAutoLoginInfoPkg::InternalSwap(BlueToothAutoLoginInfoPkg* other) {
  std::swap(salt_, other->salt_);
  std::swap(data_, other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlueToothAutoLoginInfoPkg::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlueToothAutoLoginInfoPkg

// required .micromsg.SKBuiltinBuffer_t Salt = 1;
bool BlueToothAutoLoginInfoPkg::has_salt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BlueToothAutoLoginInfoPkg::set_has_salt() {
  _has_bits_[0] |= 0x00000001u;
}
void BlueToothAutoLoginInfoPkg::clear_has_salt() {
  _has_bits_[0] &= ~0x00000001u;
}
void BlueToothAutoLoginInfoPkg::clear_salt() {
  if (salt_ != NULL) salt_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_salt();
}
const ::micromsg::SKBuiltinBuffer_t& BlueToothAutoLoginInfoPkg::salt() const {
  // @@protoc_insertion_point(field_get:micromsg.BlueToothAutoLoginInfoPkg.Salt)
  return salt_ != NULL ? *salt_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* BlueToothAutoLoginInfoPkg::mutable_salt() {
  set_has_salt();
  if (salt_ == NULL) {
    salt_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BlueToothAutoLoginInfoPkg.Salt)
  return salt_;
}
::micromsg::SKBuiltinBuffer_t* BlueToothAutoLoginInfoPkg::release_salt() {
  // @@protoc_insertion_point(field_release:micromsg.BlueToothAutoLoginInfoPkg.Salt)
  clear_has_salt();
  ::micromsg::SKBuiltinBuffer_t* temp = salt_;
  salt_ = NULL;
  return temp;
}
void BlueToothAutoLoginInfoPkg::set_allocated_salt(::micromsg::SKBuiltinBuffer_t* salt) {
  delete salt_;
  salt_ = salt;
  if (salt) {
    set_has_salt();
  } else {
    clear_has_salt();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BlueToothAutoLoginInfoPkg.Salt)
}

// required .micromsg.SKBuiltinBuffer_t Data = 2;
bool BlueToothAutoLoginInfoPkg::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BlueToothAutoLoginInfoPkg::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void BlueToothAutoLoginInfoPkg::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void BlueToothAutoLoginInfoPkg::clear_data() {
  if (data_ != NULL) data_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_data();
}
const ::micromsg::SKBuiltinBuffer_t& BlueToothAutoLoginInfoPkg::data() const {
  // @@protoc_insertion_point(field_get:micromsg.BlueToothAutoLoginInfoPkg.Data)
  return data_ != NULL ? *data_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* BlueToothAutoLoginInfoPkg::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BlueToothAutoLoginInfoPkg.Data)
  return data_;
}
::micromsg::SKBuiltinBuffer_t* BlueToothAutoLoginInfoPkg::release_data() {
  // @@protoc_insertion_point(field_release:micromsg.BlueToothAutoLoginInfoPkg.Data)
  clear_has_data();
  ::micromsg::SKBuiltinBuffer_t* temp = data_;
  data_ = NULL;
  return temp;
}
void BlueToothAutoLoginInfoPkg::set_allocated_data(::micromsg::SKBuiltinBuffer_t* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BlueToothAutoLoginInfoPkg.Data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlueToothAutoLoginInfo::kUinFieldNumber;
const int BlueToothAutoLoginInfo::kDeviceTypeFieldNumber;
const int BlueToothAutoLoginInfo::kClientVersionFieldNumber;
const int BlueToothAutoLoginInfo::kDeviceIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlueToothAutoLoginInfo::BlueToothAutoLoginInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BlueToothAutoLoginInfo)
}
BlueToothAutoLoginInfo::BlueToothAutoLoginInfo(const BlueToothAutoLoginInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  devicetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_devicetype()) {
    devicetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicetype_);
  }
  deviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_deviceid()) {
    deviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  ::memcpy(&uin_, &from.uin_,
    reinterpret_cast<char*>(&clientversion_) -
    reinterpret_cast<char*>(&uin_) + sizeof(clientversion_));
  // @@protoc_insertion_point(copy_constructor:micromsg.BlueToothAutoLoginInfo)
}

void BlueToothAutoLoginInfo::SharedCtor() {
  _cached_size_ = 0;
  devicetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uin_, 0, reinterpret_cast<char*>(&clientversion_) -
    reinterpret_cast<char*>(&uin_) + sizeof(clientversion_));
}

BlueToothAutoLoginInfo::~BlueToothAutoLoginInfo() {
  // @@protoc_insertion_point(destructor:micromsg.BlueToothAutoLoginInfo)
  SharedDtor();
}

void BlueToothAutoLoginInfo::SharedDtor() {
  devicetype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deviceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BlueToothAutoLoginInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlueToothAutoLoginInfo::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BlueToothAutoLoginInfo& BlueToothAutoLoginInfo::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

BlueToothAutoLoginInfo* BlueToothAutoLoginInfo::New(::google::protobuf::Arena* arena) const {
  BlueToothAutoLoginInfo* n = new BlueToothAutoLoginInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlueToothAutoLoginInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BlueToothAutoLoginInfo)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_devicetype()) {
      GOOGLE_DCHECK(!devicetype_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*devicetype_.UnsafeRawStringPointer())->clear();
    }
    if (has_deviceid()) {
      GOOGLE_DCHECK(!deviceid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*deviceid_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&uin_, 0, reinterpret_cast<char*>(&clientversion_) -
      reinterpret_cast<char*>(&uin_) + sizeof(clientversion_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BlueToothAutoLoginInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BlueToothAutoLoginInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Uin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_uin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string DeviceType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devicetype().data(), this->devicetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BlueToothAutoLoginInfo.DeviceType");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ClientVersion = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_clientversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes DeviceID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_deviceid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BlueToothAutoLoginInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BlueToothAutoLoginInfo)
  return false;
#undef DO_
}

void BlueToothAutoLoginInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BlueToothAutoLoginInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Uin = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uin(), output);
  }

  // optional string DeviceType = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicetype().data(), this->devicetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BlueToothAutoLoginInfo.DeviceType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->devicetype(), output);
  }

  // required uint32 ClientVersion = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->clientversion(), output);
  }

  // optional bytes DeviceID = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->deviceid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BlueToothAutoLoginInfo)
}

::google::protobuf::uint8* BlueToothAutoLoginInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BlueToothAutoLoginInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Uin = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uin(), target);
  }

  // optional string DeviceType = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicetype().data(), this->devicetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BlueToothAutoLoginInfo.DeviceType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->devicetype(), target);
  }

  // required uint32 ClientVersion = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->clientversion(), target);
  }

  // optional bytes DeviceID = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->deviceid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BlueToothAutoLoginInfo)
  return target;
}

size_t BlueToothAutoLoginInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.BlueToothAutoLoginInfo)
  size_t total_size = 0;

  if (has_uin()) {
    // required uint32 Uin = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uin());
  }

  if (has_clientversion()) {
    // required uint32 ClientVersion = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->clientversion());
  }

  return total_size;
}
size_t BlueToothAutoLoginInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BlueToothAutoLoginInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required uint32 Uin = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uin());

    // required uint32 ClientVersion = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->clientversion());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string DeviceType = 2;
    if (has_devicetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicetype());
    }

    // optional bytes DeviceID = 4;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->deviceid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlueToothAutoLoginInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BlueToothAutoLoginInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BlueToothAutoLoginInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlueToothAutoLoginInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BlueToothAutoLoginInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BlueToothAutoLoginInfo)
    MergeFrom(*source);
  }
}

void BlueToothAutoLoginInfo::MergeFrom(const BlueToothAutoLoginInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BlueToothAutoLoginInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_devicetype();
      devicetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicetype_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_deviceid();
      deviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
    }
    if (cached_has_bits & 0x00000004u) {
      uin_ = from.uin_;
    }
    if (cached_has_bits & 0x00000008u) {
      clientversion_ = from.clientversion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BlueToothAutoLoginInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BlueToothAutoLoginInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlueToothAutoLoginInfo::CopyFrom(const BlueToothAutoLoginInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BlueToothAutoLoginInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlueToothAutoLoginInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;
  return true;
}

void BlueToothAutoLoginInfo::Swap(BlueToothAutoLoginInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlueToothAutoLoginInfo::InternalSwap(BlueToothAutoLoginInfo* other) {
  devicetype_.Swap(&other->devicetype_);
  deviceid_.Swap(&other->deviceid_);
  std::swap(uin_, other->uin_);
  std::swap(clientversion_, other->clientversion_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlueToothAutoLoginInfo::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlueToothAutoLoginInfo

// required uint32 Uin = 1;
bool BlueToothAutoLoginInfo::has_uin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BlueToothAutoLoginInfo::set_has_uin() {
  _has_bits_[0] |= 0x00000004u;
}
void BlueToothAutoLoginInfo::clear_has_uin() {
  _has_bits_[0] &= ~0x00000004u;
}
void BlueToothAutoLoginInfo::clear_uin() {
  uin_ = 0u;
  clear_has_uin();
}
::google::protobuf::uint32 BlueToothAutoLoginInfo::uin() const {
  // @@protoc_insertion_point(field_get:micromsg.BlueToothAutoLoginInfo.Uin)
  return uin_;
}
void BlueToothAutoLoginInfo::set_uin(::google::protobuf::uint32 value) {
  set_has_uin();
  uin_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BlueToothAutoLoginInfo.Uin)
}

// optional string DeviceType = 2;
bool BlueToothAutoLoginInfo::has_devicetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BlueToothAutoLoginInfo::set_has_devicetype() {
  _has_bits_[0] |= 0x00000001u;
}
void BlueToothAutoLoginInfo::clear_has_devicetype() {
  _has_bits_[0] &= ~0x00000001u;
}
void BlueToothAutoLoginInfo::clear_devicetype() {
  devicetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_devicetype();
}
const ::std::string& BlueToothAutoLoginInfo::devicetype() const {
  // @@protoc_insertion_point(field_get:micromsg.BlueToothAutoLoginInfo.DeviceType)
  return devicetype_.GetNoArena();
}
void BlueToothAutoLoginInfo::set_devicetype(const ::std::string& value) {
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BlueToothAutoLoginInfo.DeviceType)
}
#if LANG_CXX11
void BlueToothAutoLoginInfo::set_devicetype(::std::string&& value) {
  set_has_devicetype();
  devicetype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BlueToothAutoLoginInfo.DeviceType)
}
#endif
void BlueToothAutoLoginInfo::set_devicetype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BlueToothAutoLoginInfo.DeviceType)
}
void BlueToothAutoLoginInfo::set_devicetype(const char* value, size_t size) {
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BlueToothAutoLoginInfo.DeviceType)
}
::std::string* BlueToothAutoLoginInfo::mutable_devicetype() {
  set_has_devicetype();
  // @@protoc_insertion_point(field_mutable:micromsg.BlueToothAutoLoginInfo.DeviceType)
  return devicetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BlueToothAutoLoginInfo::release_devicetype() {
  // @@protoc_insertion_point(field_release:micromsg.BlueToothAutoLoginInfo.DeviceType)
  clear_has_devicetype();
  return devicetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BlueToothAutoLoginInfo::set_allocated_devicetype(::std::string* devicetype) {
  if (devicetype != NULL) {
    set_has_devicetype();
  } else {
    clear_has_devicetype();
  }
  devicetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicetype);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BlueToothAutoLoginInfo.DeviceType)
}

// required uint32 ClientVersion = 3;
bool BlueToothAutoLoginInfo::has_clientversion() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BlueToothAutoLoginInfo::set_has_clientversion() {
  _has_bits_[0] |= 0x00000008u;
}
void BlueToothAutoLoginInfo::clear_has_clientversion() {
  _has_bits_[0] &= ~0x00000008u;
}
void BlueToothAutoLoginInfo::clear_clientversion() {
  clientversion_ = 0u;
  clear_has_clientversion();
}
::google::protobuf::uint32 BlueToothAutoLoginInfo::clientversion() const {
  // @@protoc_insertion_point(field_get:micromsg.BlueToothAutoLoginInfo.ClientVersion)
  return clientversion_;
}
void BlueToothAutoLoginInfo::set_clientversion(::google::protobuf::uint32 value) {
  set_has_clientversion();
  clientversion_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BlueToothAutoLoginInfo.ClientVersion)
}

// optional bytes DeviceID = 4;
bool BlueToothAutoLoginInfo::has_deviceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BlueToothAutoLoginInfo::set_has_deviceid() {
  _has_bits_[0] |= 0x00000002u;
}
void BlueToothAutoLoginInfo::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000002u;
}
void BlueToothAutoLoginInfo::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deviceid();
}
const ::std::string& BlueToothAutoLoginInfo::deviceid() const {
  // @@protoc_insertion_point(field_get:micromsg.BlueToothAutoLoginInfo.DeviceID)
  return deviceid_.GetNoArena();
}
void BlueToothAutoLoginInfo::set_deviceid(const ::std::string& value) {
  set_has_deviceid();
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BlueToothAutoLoginInfo.DeviceID)
}
#if LANG_CXX11
void BlueToothAutoLoginInfo::set_deviceid(::std::string&& value) {
  set_has_deviceid();
  deviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BlueToothAutoLoginInfo.DeviceID)
}
#endif
void BlueToothAutoLoginInfo::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_deviceid();
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BlueToothAutoLoginInfo.DeviceID)
}
void BlueToothAutoLoginInfo::set_deviceid(const void* value, size_t size) {
  set_has_deviceid();
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BlueToothAutoLoginInfo.DeviceID)
}
::std::string* BlueToothAutoLoginInfo::mutable_deviceid() {
  set_has_deviceid();
  // @@protoc_insertion_point(field_mutable:micromsg.BlueToothAutoLoginInfo.DeviceID)
  return deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BlueToothAutoLoginInfo::release_deviceid() {
  // @@protoc_insertion_point(field_release:micromsg.BlueToothAutoLoginInfo.DeviceID)
  clear_has_deviceid();
  return deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BlueToothAutoLoginInfo::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid != NULL) {
    set_has_deviceid();
  } else {
    clear_has_deviceid();
  }
  deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BlueToothAutoLoginInfo.DeviceID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BindBlackberryPPIDRequest::kBaseRequestFieldNumber;
const int BindBlackberryPPIDRequest::kOpcodeFieldNumber;
const int BindBlackberryPPIDRequest::kBBPPIDFieldNumber;
const int BindBlackberryPPIDRequest::kBBPINFieldNumber;
const int BindBlackberryPPIDRequest::kBBMNickNameFieldNumber;
const int BindBlackberryPPIDRequest::kForceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BindBlackberryPPIDRequest::BindBlackberryPPIDRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BindBlackberryPPIDRequest)
}
BindBlackberryPPIDRequest::BindBlackberryPPIDRequest(const BindBlackberryPPIDRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bbppid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bbppid()) {
    bbppid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bbppid_);
  }
  bbpin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bbpin()) {
    bbpin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bbpin_);
  }
  bbmnickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bbmnickname()) {
    bbmnickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bbmnickname_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&opcode_, &from.opcode_,
    reinterpret_cast<char*>(&force_) -
    reinterpret_cast<char*>(&opcode_) + sizeof(force_));
  // @@protoc_insertion_point(copy_constructor:micromsg.BindBlackberryPPIDRequest)
}

void BindBlackberryPPIDRequest::SharedCtor() {
  _cached_size_ = 0;
  bbppid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bbpin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bbmnickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&force_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(force_));
}

BindBlackberryPPIDRequest::~BindBlackberryPPIDRequest() {
  // @@protoc_insertion_point(destructor:micromsg.BindBlackberryPPIDRequest)
  SharedDtor();
}

void BindBlackberryPPIDRequest::SharedDtor() {
  bbppid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bbpin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bbmnickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void BindBlackberryPPIDRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BindBlackberryPPIDRequest::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BindBlackberryPPIDRequest& BindBlackberryPPIDRequest::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

BindBlackberryPPIDRequest* BindBlackberryPPIDRequest::New(::google::protobuf::Arena* arena) const {
  BindBlackberryPPIDRequest* n = new BindBlackberryPPIDRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BindBlackberryPPIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BindBlackberryPPIDRequest)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_bbppid()) {
      GOOGLE_DCHECK(!bbppid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bbppid_.UnsafeRawStringPointer())->clear();
    }
    if (has_bbpin()) {
      GOOGLE_DCHECK(!bbpin_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bbpin_.UnsafeRawStringPointer())->clear();
    }
    if (has_bbmnickname()) {
      GOOGLE_DCHECK(!bbmnickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bbmnickname_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 48u) {
    ::memset(&opcode_, 0, reinterpret_cast<char*>(&force_) -
      reinterpret_cast<char*>(&opcode_) + sizeof(force_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BindBlackberryPPIDRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BindBlackberryPPIDRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Opcode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_opcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string BBPPID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bbppid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bbppid().data(), this->bbppid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BindBlackberryPPIDRequest.BBPPID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string BBPIN = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bbpin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bbpin().data(), this->bbpin().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BindBlackberryPPIDRequest.BBPIN");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string BBMNickName = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bbmnickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bbmnickname().data(), this->bbmnickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BindBlackberryPPIDRequest.BBMNickName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Force = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_force();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &force_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BindBlackberryPPIDRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BindBlackberryPPIDRequest)
  return false;
#undef DO_
}

void BindBlackberryPPIDRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BindBlackberryPPIDRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 Opcode = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->opcode(), output);
  }

  // optional string BBPPID = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bbppid().data(), this->bbppid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindBlackberryPPIDRequest.BBPPID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->bbppid(), output);
  }

  // optional string BBPIN = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bbpin().data(), this->bbpin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindBlackberryPPIDRequest.BBPIN");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->bbpin(), output);
  }

  // optional string BBMNickName = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bbmnickname().data(), this->bbmnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindBlackberryPPIDRequest.BBMNickName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->bbmnickname(), output);
  }

  // required uint32 Force = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->force(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BindBlackberryPPIDRequest)
}

::google::protobuf::uint8* BindBlackberryPPIDRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BindBlackberryPPIDRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 Opcode = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->opcode(), target);
  }

  // optional string BBPPID = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bbppid().data(), this->bbppid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindBlackberryPPIDRequest.BBPPID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bbppid(), target);
  }

  // optional string BBPIN = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bbpin().data(), this->bbpin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindBlackberryPPIDRequest.BBPIN");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->bbpin(), target);
  }

  // optional string BBMNickName = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bbmnickname().data(), this->bbmnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindBlackberryPPIDRequest.BBMNickName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->bbmnickname(), target);
  }

  // required uint32 Force = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->force(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BindBlackberryPPIDRequest)
  return target;
}

size_t BindBlackberryPPIDRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.BindBlackberryPPIDRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_opcode()) {
    // required uint32 Opcode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());
  }

  if (has_force()) {
    // required uint32 Force = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->force());
  }

  return total_size;
}
size_t BindBlackberryPPIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BindBlackberryPPIDRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000038) ^ 0x00000038) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 Opcode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());

    // required uint32 Force = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->force());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string BBPPID = 3;
    if (has_bbppid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bbppid());
    }

    // optional string BBPIN = 4;
    if (has_bbpin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bbpin());
    }

    // optional string BBMNickName = 5;
    if (has_bbmnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bbmnickname());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BindBlackberryPPIDRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BindBlackberryPPIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BindBlackberryPPIDRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BindBlackberryPPIDRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BindBlackberryPPIDRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BindBlackberryPPIDRequest)
    MergeFrom(*source);
  }
}

void BindBlackberryPPIDRequest::MergeFrom(const BindBlackberryPPIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BindBlackberryPPIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_bbppid();
      bbppid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bbppid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_bbpin();
      bbpin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bbpin_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_bbmnickname();
      bbmnickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bbmnickname_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000010u) {
      opcode_ = from.opcode_;
    }
    if (cached_has_bits & 0x00000020u) {
      force_ = from.force_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BindBlackberryPPIDRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BindBlackberryPPIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BindBlackberryPPIDRequest::CopyFrom(const BindBlackberryPPIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BindBlackberryPPIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BindBlackberryPPIDRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000038) != 0x00000038) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void BindBlackberryPPIDRequest::Swap(BindBlackberryPPIDRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BindBlackberryPPIDRequest::InternalSwap(BindBlackberryPPIDRequest* other) {
  bbppid_.Swap(&other->bbppid_);
  bbpin_.Swap(&other->bbpin_);
  bbmnickname_.Swap(&other->bbmnickname_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(opcode_, other->opcode_);
  std::swap(force_, other->force_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BindBlackberryPPIDRequest::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BindBlackberryPPIDRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool BindBlackberryPPIDRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BindBlackberryPPIDRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000008u;
}
void BindBlackberryPPIDRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000008u;
}
void BindBlackberryPPIDRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& BindBlackberryPPIDRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.BindBlackberryPPIDRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* BindBlackberryPPIDRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BindBlackberryPPIDRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* BindBlackberryPPIDRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.BindBlackberryPPIDRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void BindBlackberryPPIDRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindBlackberryPPIDRequest.BaseRequest)
}

// required uint32 Opcode = 2;
bool BindBlackberryPPIDRequest::has_opcode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BindBlackberryPPIDRequest::set_has_opcode() {
  _has_bits_[0] |= 0x00000010u;
}
void BindBlackberryPPIDRequest::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000010u;
}
void BindBlackberryPPIDRequest::clear_opcode() {
  opcode_ = 0u;
  clear_has_opcode();
}
::google::protobuf::uint32 BindBlackberryPPIDRequest::opcode() const {
  // @@protoc_insertion_point(field_get:micromsg.BindBlackberryPPIDRequest.Opcode)
  return opcode_;
}
void BindBlackberryPPIDRequest::set_opcode(::google::protobuf::uint32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BindBlackberryPPIDRequest.Opcode)
}

// optional string BBPPID = 3;
bool BindBlackberryPPIDRequest::has_bbppid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BindBlackberryPPIDRequest::set_has_bbppid() {
  _has_bits_[0] |= 0x00000001u;
}
void BindBlackberryPPIDRequest::clear_has_bbppid() {
  _has_bits_[0] &= ~0x00000001u;
}
void BindBlackberryPPIDRequest::clear_bbppid() {
  bbppid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bbppid();
}
const ::std::string& BindBlackberryPPIDRequest::bbppid() const {
  // @@protoc_insertion_point(field_get:micromsg.BindBlackberryPPIDRequest.BBPPID)
  return bbppid_.GetNoArena();
}
void BindBlackberryPPIDRequest::set_bbppid(const ::std::string& value) {
  set_has_bbppid();
  bbppid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BindBlackberryPPIDRequest.BBPPID)
}
#if LANG_CXX11
void BindBlackberryPPIDRequest::set_bbppid(::std::string&& value) {
  set_has_bbppid();
  bbppid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BindBlackberryPPIDRequest.BBPPID)
}
#endif
void BindBlackberryPPIDRequest::set_bbppid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bbppid();
  bbppid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BindBlackberryPPIDRequest.BBPPID)
}
void BindBlackberryPPIDRequest::set_bbppid(const char* value, size_t size) {
  set_has_bbppid();
  bbppid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BindBlackberryPPIDRequest.BBPPID)
}
::std::string* BindBlackberryPPIDRequest::mutable_bbppid() {
  set_has_bbppid();
  // @@protoc_insertion_point(field_mutable:micromsg.BindBlackberryPPIDRequest.BBPPID)
  return bbppid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BindBlackberryPPIDRequest::release_bbppid() {
  // @@protoc_insertion_point(field_release:micromsg.BindBlackberryPPIDRequest.BBPPID)
  clear_has_bbppid();
  return bbppid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BindBlackberryPPIDRequest::set_allocated_bbppid(::std::string* bbppid) {
  if (bbppid != NULL) {
    set_has_bbppid();
  } else {
    clear_has_bbppid();
  }
  bbppid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bbppid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindBlackberryPPIDRequest.BBPPID)
}

// optional string BBPIN = 4;
bool BindBlackberryPPIDRequest::has_bbpin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BindBlackberryPPIDRequest::set_has_bbpin() {
  _has_bits_[0] |= 0x00000002u;
}
void BindBlackberryPPIDRequest::clear_has_bbpin() {
  _has_bits_[0] &= ~0x00000002u;
}
void BindBlackberryPPIDRequest::clear_bbpin() {
  bbpin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bbpin();
}
const ::std::string& BindBlackberryPPIDRequest::bbpin() const {
  // @@protoc_insertion_point(field_get:micromsg.BindBlackberryPPIDRequest.BBPIN)
  return bbpin_.GetNoArena();
}
void BindBlackberryPPIDRequest::set_bbpin(const ::std::string& value) {
  set_has_bbpin();
  bbpin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BindBlackberryPPIDRequest.BBPIN)
}
#if LANG_CXX11
void BindBlackberryPPIDRequest::set_bbpin(::std::string&& value) {
  set_has_bbpin();
  bbpin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BindBlackberryPPIDRequest.BBPIN)
}
#endif
void BindBlackberryPPIDRequest::set_bbpin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bbpin();
  bbpin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BindBlackberryPPIDRequest.BBPIN)
}
void BindBlackberryPPIDRequest::set_bbpin(const char* value, size_t size) {
  set_has_bbpin();
  bbpin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BindBlackberryPPIDRequest.BBPIN)
}
::std::string* BindBlackberryPPIDRequest::mutable_bbpin() {
  set_has_bbpin();
  // @@protoc_insertion_point(field_mutable:micromsg.BindBlackberryPPIDRequest.BBPIN)
  return bbpin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BindBlackberryPPIDRequest::release_bbpin() {
  // @@protoc_insertion_point(field_release:micromsg.BindBlackberryPPIDRequest.BBPIN)
  clear_has_bbpin();
  return bbpin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BindBlackberryPPIDRequest::set_allocated_bbpin(::std::string* bbpin) {
  if (bbpin != NULL) {
    set_has_bbpin();
  } else {
    clear_has_bbpin();
  }
  bbpin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bbpin);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindBlackberryPPIDRequest.BBPIN)
}

// optional string BBMNickName = 5;
bool BindBlackberryPPIDRequest::has_bbmnickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BindBlackberryPPIDRequest::set_has_bbmnickname() {
  _has_bits_[0] |= 0x00000004u;
}
void BindBlackberryPPIDRequest::clear_has_bbmnickname() {
  _has_bits_[0] &= ~0x00000004u;
}
void BindBlackberryPPIDRequest::clear_bbmnickname() {
  bbmnickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bbmnickname();
}
const ::std::string& BindBlackberryPPIDRequest::bbmnickname() const {
  // @@protoc_insertion_point(field_get:micromsg.BindBlackberryPPIDRequest.BBMNickName)
  return bbmnickname_.GetNoArena();
}
void BindBlackberryPPIDRequest::set_bbmnickname(const ::std::string& value) {
  set_has_bbmnickname();
  bbmnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BindBlackberryPPIDRequest.BBMNickName)
}
#if LANG_CXX11
void BindBlackberryPPIDRequest::set_bbmnickname(::std::string&& value) {
  set_has_bbmnickname();
  bbmnickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BindBlackberryPPIDRequest.BBMNickName)
}
#endif
void BindBlackberryPPIDRequest::set_bbmnickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bbmnickname();
  bbmnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BindBlackberryPPIDRequest.BBMNickName)
}
void BindBlackberryPPIDRequest::set_bbmnickname(const char* value, size_t size) {
  set_has_bbmnickname();
  bbmnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BindBlackberryPPIDRequest.BBMNickName)
}
::std::string* BindBlackberryPPIDRequest::mutable_bbmnickname() {
  set_has_bbmnickname();
  // @@protoc_insertion_point(field_mutable:micromsg.BindBlackberryPPIDRequest.BBMNickName)
  return bbmnickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BindBlackberryPPIDRequest::release_bbmnickname() {
  // @@protoc_insertion_point(field_release:micromsg.BindBlackberryPPIDRequest.BBMNickName)
  clear_has_bbmnickname();
  return bbmnickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BindBlackberryPPIDRequest::set_allocated_bbmnickname(::std::string* bbmnickname) {
  if (bbmnickname != NULL) {
    set_has_bbmnickname();
  } else {
    clear_has_bbmnickname();
  }
  bbmnickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bbmnickname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindBlackberryPPIDRequest.BBMNickName)
}

// required uint32 Force = 6;
bool BindBlackberryPPIDRequest::has_force() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BindBlackberryPPIDRequest::set_has_force() {
  _has_bits_[0] |= 0x00000020u;
}
void BindBlackberryPPIDRequest::clear_has_force() {
  _has_bits_[0] &= ~0x00000020u;
}
void BindBlackberryPPIDRequest::clear_force() {
  force_ = 0u;
  clear_has_force();
}
::google::protobuf::uint32 BindBlackberryPPIDRequest::force() const {
  // @@protoc_insertion_point(field_get:micromsg.BindBlackberryPPIDRequest.Force)
  return force_;
}
void BindBlackberryPPIDRequest::set_force(::google::protobuf::uint32 value) {
  set_has_force();
  force_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BindBlackberryPPIDRequest.Force)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BindBlackberryPPIDResponse::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BindBlackberryPPIDResponse::BindBlackberryPPIDResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BindBlackberryPPIDResponse)
}
BindBlackberryPPIDResponse::BindBlackberryPPIDResponse(const BindBlackberryPPIDResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.BindBlackberryPPIDResponse)
}

void BindBlackberryPPIDResponse::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

BindBlackberryPPIDResponse::~BindBlackberryPPIDResponse() {
  // @@protoc_insertion_point(destructor:micromsg.BindBlackberryPPIDResponse)
  SharedDtor();
}

void BindBlackberryPPIDResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void BindBlackberryPPIDResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BindBlackberryPPIDResponse::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BindBlackberryPPIDResponse& BindBlackberryPPIDResponse::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

BindBlackberryPPIDResponse* BindBlackberryPPIDResponse::New(::google::protobuf::Arena* arena) const {
  BindBlackberryPPIDResponse* n = new BindBlackberryPPIDResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BindBlackberryPPIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BindBlackberryPPIDResponse)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BindBlackberryPPIDResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BindBlackberryPPIDResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BindBlackberryPPIDResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BindBlackberryPPIDResponse)
  return false;
#undef DO_
}

void BindBlackberryPPIDResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BindBlackberryPPIDResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BindBlackberryPPIDResponse)
}

::google::protobuf::uint8* BindBlackberryPPIDResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BindBlackberryPPIDResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BindBlackberryPPIDResponse)
  return target;
}

size_t BindBlackberryPPIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BindBlackberryPPIDResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BindBlackberryPPIDResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BindBlackberryPPIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BindBlackberryPPIDResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BindBlackberryPPIDResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BindBlackberryPPIDResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BindBlackberryPPIDResponse)
    MergeFrom(*source);
  }
}

void BindBlackberryPPIDResponse::MergeFrom(const BindBlackberryPPIDResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BindBlackberryPPIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void BindBlackberryPPIDResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BindBlackberryPPIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BindBlackberryPPIDResponse::CopyFrom(const BindBlackberryPPIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BindBlackberryPPIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BindBlackberryPPIDResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void BindBlackberryPPIDResponse::Swap(BindBlackberryPPIDResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BindBlackberryPPIDResponse::InternalSwap(BindBlackberryPPIDResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BindBlackberryPPIDResponse::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BindBlackberryPPIDResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool BindBlackberryPPIDResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BindBlackberryPPIDResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void BindBlackberryPPIDResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void BindBlackberryPPIDResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& BindBlackberryPPIDResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.BindBlackberryPPIDResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* BindBlackberryPPIDResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BindBlackberryPPIDResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* BindBlackberryPPIDResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.BindBlackberryPPIDResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void BindBlackberryPPIDResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindBlackberryPPIDResponse.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LockWebDeviceRequest::kBaseRequestFieldNumber;
const int LockWebDeviceRequest::kOPCodeFieldNumber;
const int LockWebDeviceRequest::kBlueToothBroadCastUUIDFieldNumber;
const int LockWebDeviceRequest::kBlueToothBroadCastContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LockWebDeviceRequest::LockWebDeviceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.LockWebDeviceRequest)
}
LockWebDeviceRequest::LockWebDeviceRequest(const LockWebDeviceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bluetoothbroadcastuuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bluetoothbroadcastuuid()) {
    bluetoothbroadcastuuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bluetoothbroadcastuuid_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_bluetoothbroadcastcontent()) {
    bluetoothbroadcastcontent_ = new ::micromsg::SKBuiltinBuffer_t(*from.bluetoothbroadcastcontent_);
  } else {
    bluetoothbroadcastcontent_ = NULL;
  }
  opcode_ = from.opcode_;
  // @@protoc_insertion_point(copy_constructor:micromsg.LockWebDeviceRequest)
}

void LockWebDeviceRequest::SharedCtor() {
  _cached_size_ = 0;
  bluetoothbroadcastuuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&opcode_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(opcode_));
}

LockWebDeviceRequest::~LockWebDeviceRequest() {
  // @@protoc_insertion_point(destructor:micromsg.LockWebDeviceRequest)
  SharedDtor();
}

void LockWebDeviceRequest::SharedDtor() {
  bluetoothbroadcastuuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete bluetoothbroadcastcontent_;
  }
}

void LockWebDeviceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LockWebDeviceRequest::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LockWebDeviceRequest& LockWebDeviceRequest::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

LockWebDeviceRequest* LockWebDeviceRequest::New(::google::protobuf::Arena* arena) const {
  LockWebDeviceRequest* n = new LockWebDeviceRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LockWebDeviceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.LockWebDeviceRequest)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_bluetoothbroadcastuuid()) {
      GOOGLE_DCHECK(!bluetoothbroadcastuuid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bluetoothbroadcastuuid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_bluetoothbroadcastcontent()) {
      GOOGLE_DCHECK(bluetoothbroadcastcontent_ != NULL);
      bluetoothbroadcastcontent_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  opcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LockWebDeviceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.LockWebDeviceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 OPCode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_opcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string BlueToothBroadCastUUID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bluetoothbroadcastuuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bluetoothbroadcastuuid().data(), this->bluetoothbroadcastuuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.LockWebDeviceRequest.BlueToothBroadCastUUID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t BlueToothBroadCastContent = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bluetoothbroadcastcontent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.LockWebDeviceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.LockWebDeviceRequest)
  return false;
#undef DO_
}

void LockWebDeviceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.LockWebDeviceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 OPCode = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->opcode(), output);
  }

  // optional string BlueToothBroadCastUUID = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bluetoothbroadcastuuid().data(), this->bluetoothbroadcastuuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.LockWebDeviceRequest.BlueToothBroadCastUUID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->bluetoothbroadcastuuid(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t BlueToothBroadCastContent = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->bluetoothbroadcastcontent_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.LockWebDeviceRequest)
}

::google::protobuf::uint8* LockWebDeviceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.LockWebDeviceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 OPCode = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->opcode(), target);
  }

  // optional string BlueToothBroadCastUUID = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bluetoothbroadcastuuid().data(), this->bluetoothbroadcastuuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.LockWebDeviceRequest.BlueToothBroadCastUUID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bluetoothbroadcastuuid(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t BlueToothBroadCastContent = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->bluetoothbroadcastcontent_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.LockWebDeviceRequest)
  return target;
}

size_t LockWebDeviceRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.LockWebDeviceRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_bluetoothbroadcastcontent()) {
    // required .micromsg.SKBuiltinBuffer_t BlueToothBroadCastContent = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bluetoothbroadcastcontent_);
  }

  if (has_opcode()) {
    // required uint32 OPCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());
  }

  return total_size;
}
size_t LockWebDeviceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.LockWebDeviceRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.SKBuiltinBuffer_t BlueToothBroadCastContent = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bluetoothbroadcastcontent_);

    // required uint32 OPCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string BlueToothBroadCastUUID = 3;
  if (has_bluetoothbroadcastuuid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bluetoothbroadcastuuid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LockWebDeviceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.LockWebDeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LockWebDeviceRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LockWebDeviceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.LockWebDeviceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.LockWebDeviceRequest)
    MergeFrom(*source);
  }
}

void LockWebDeviceRequest::MergeFrom(const LockWebDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.LockWebDeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_bluetoothbroadcastuuid();
      bluetoothbroadcastuuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bluetoothbroadcastuuid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_bluetoothbroadcastcontent()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.bluetoothbroadcastcontent());
    }
    if (cached_has_bits & 0x00000008u) {
      opcode_ = from.opcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LockWebDeviceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.LockWebDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LockWebDeviceRequest::CopyFrom(const LockWebDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.LockWebDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockWebDeviceRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_bluetoothbroadcastcontent()) {
    if (!this->bluetoothbroadcastcontent_->IsInitialized()) return false;
  }
  return true;
}

void LockWebDeviceRequest::Swap(LockWebDeviceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LockWebDeviceRequest::InternalSwap(LockWebDeviceRequest* other) {
  bluetoothbroadcastuuid_.Swap(&other->bluetoothbroadcastuuid_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(bluetoothbroadcastcontent_, other->bluetoothbroadcastcontent_);
  std::swap(opcode_, other->opcode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LockWebDeviceRequest::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LockWebDeviceRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool LockWebDeviceRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LockWebDeviceRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void LockWebDeviceRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void LockWebDeviceRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& LockWebDeviceRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.LockWebDeviceRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* LockWebDeviceRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.LockWebDeviceRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* LockWebDeviceRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.LockWebDeviceRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void LockWebDeviceRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.LockWebDeviceRequest.BaseRequest)
}

// required uint32 OPCode = 2;
bool LockWebDeviceRequest::has_opcode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LockWebDeviceRequest::set_has_opcode() {
  _has_bits_[0] |= 0x00000008u;
}
void LockWebDeviceRequest::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000008u;
}
void LockWebDeviceRequest::clear_opcode() {
  opcode_ = 0u;
  clear_has_opcode();
}
::google::protobuf::uint32 LockWebDeviceRequest::opcode() const {
  // @@protoc_insertion_point(field_get:micromsg.LockWebDeviceRequest.OPCode)
  return opcode_;
}
void LockWebDeviceRequest::set_opcode(::google::protobuf::uint32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:micromsg.LockWebDeviceRequest.OPCode)
}

// optional string BlueToothBroadCastUUID = 3;
bool LockWebDeviceRequest::has_bluetoothbroadcastuuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LockWebDeviceRequest::set_has_bluetoothbroadcastuuid() {
  _has_bits_[0] |= 0x00000001u;
}
void LockWebDeviceRequest::clear_has_bluetoothbroadcastuuid() {
  _has_bits_[0] &= ~0x00000001u;
}
void LockWebDeviceRequest::clear_bluetoothbroadcastuuid() {
  bluetoothbroadcastuuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bluetoothbroadcastuuid();
}
const ::std::string& LockWebDeviceRequest::bluetoothbroadcastuuid() const {
  // @@protoc_insertion_point(field_get:micromsg.LockWebDeviceRequest.BlueToothBroadCastUUID)
  return bluetoothbroadcastuuid_.GetNoArena();
}
void LockWebDeviceRequest::set_bluetoothbroadcastuuid(const ::std::string& value) {
  set_has_bluetoothbroadcastuuid();
  bluetoothbroadcastuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.LockWebDeviceRequest.BlueToothBroadCastUUID)
}
#if LANG_CXX11
void LockWebDeviceRequest::set_bluetoothbroadcastuuid(::std::string&& value) {
  set_has_bluetoothbroadcastuuid();
  bluetoothbroadcastuuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.LockWebDeviceRequest.BlueToothBroadCastUUID)
}
#endif
void LockWebDeviceRequest::set_bluetoothbroadcastuuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bluetoothbroadcastuuid();
  bluetoothbroadcastuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.LockWebDeviceRequest.BlueToothBroadCastUUID)
}
void LockWebDeviceRequest::set_bluetoothbroadcastuuid(const char* value, size_t size) {
  set_has_bluetoothbroadcastuuid();
  bluetoothbroadcastuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.LockWebDeviceRequest.BlueToothBroadCastUUID)
}
::std::string* LockWebDeviceRequest::mutable_bluetoothbroadcastuuid() {
  set_has_bluetoothbroadcastuuid();
  // @@protoc_insertion_point(field_mutable:micromsg.LockWebDeviceRequest.BlueToothBroadCastUUID)
  return bluetoothbroadcastuuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LockWebDeviceRequest::release_bluetoothbroadcastuuid() {
  // @@protoc_insertion_point(field_release:micromsg.LockWebDeviceRequest.BlueToothBroadCastUUID)
  clear_has_bluetoothbroadcastuuid();
  return bluetoothbroadcastuuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LockWebDeviceRequest::set_allocated_bluetoothbroadcastuuid(::std::string* bluetoothbroadcastuuid) {
  if (bluetoothbroadcastuuid != NULL) {
    set_has_bluetoothbroadcastuuid();
  } else {
    clear_has_bluetoothbroadcastuuid();
  }
  bluetoothbroadcastuuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bluetoothbroadcastuuid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.LockWebDeviceRequest.BlueToothBroadCastUUID)
}

// required .micromsg.SKBuiltinBuffer_t BlueToothBroadCastContent = 4;
bool LockWebDeviceRequest::has_bluetoothbroadcastcontent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LockWebDeviceRequest::set_has_bluetoothbroadcastcontent() {
  _has_bits_[0] |= 0x00000004u;
}
void LockWebDeviceRequest::clear_has_bluetoothbroadcastcontent() {
  _has_bits_[0] &= ~0x00000004u;
}
void LockWebDeviceRequest::clear_bluetoothbroadcastcontent() {
  if (bluetoothbroadcastcontent_ != NULL) bluetoothbroadcastcontent_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_bluetoothbroadcastcontent();
}
const ::micromsg::SKBuiltinBuffer_t& LockWebDeviceRequest::bluetoothbroadcastcontent() const {
  // @@protoc_insertion_point(field_get:micromsg.LockWebDeviceRequest.BlueToothBroadCastContent)
  return bluetoothbroadcastcontent_ != NULL ? *bluetoothbroadcastcontent_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* LockWebDeviceRequest::mutable_bluetoothbroadcastcontent() {
  set_has_bluetoothbroadcastcontent();
  if (bluetoothbroadcastcontent_ == NULL) {
    bluetoothbroadcastcontent_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.LockWebDeviceRequest.BlueToothBroadCastContent)
  return bluetoothbroadcastcontent_;
}
::micromsg::SKBuiltinBuffer_t* LockWebDeviceRequest::release_bluetoothbroadcastcontent() {
  // @@protoc_insertion_point(field_release:micromsg.LockWebDeviceRequest.BlueToothBroadCastContent)
  clear_has_bluetoothbroadcastcontent();
  ::micromsg::SKBuiltinBuffer_t* temp = bluetoothbroadcastcontent_;
  bluetoothbroadcastcontent_ = NULL;
  return temp;
}
void LockWebDeviceRequest::set_allocated_bluetoothbroadcastcontent(::micromsg::SKBuiltinBuffer_t* bluetoothbroadcastcontent) {
  delete bluetoothbroadcastcontent_;
  bluetoothbroadcastcontent_ = bluetoothbroadcastcontent;
  if (bluetoothbroadcastcontent) {
    set_has_bluetoothbroadcastcontent();
  } else {
    clear_has_bluetoothbroadcastcontent();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.LockWebDeviceRequest.BlueToothBroadCastContent)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LockWebDeviceResponse::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LockWebDeviceResponse::LockWebDeviceResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.LockWebDeviceResponse)
}
LockWebDeviceResponse::LockWebDeviceResponse(const LockWebDeviceResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.LockWebDeviceResponse)
}

void LockWebDeviceResponse::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

LockWebDeviceResponse::~LockWebDeviceResponse() {
  // @@protoc_insertion_point(destructor:micromsg.LockWebDeviceResponse)
  SharedDtor();
}

void LockWebDeviceResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void LockWebDeviceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LockWebDeviceResponse::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LockWebDeviceResponse& LockWebDeviceResponse::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

LockWebDeviceResponse* LockWebDeviceResponse::New(::google::protobuf::Arena* arena) const {
  LockWebDeviceResponse* n = new LockWebDeviceResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LockWebDeviceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.LockWebDeviceResponse)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LockWebDeviceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.LockWebDeviceResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.LockWebDeviceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.LockWebDeviceResponse)
  return false;
#undef DO_
}

void LockWebDeviceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.LockWebDeviceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.LockWebDeviceResponse)
}

::google::protobuf::uint8* LockWebDeviceResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.LockWebDeviceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.LockWebDeviceResponse)
  return target;
}

size_t LockWebDeviceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.LockWebDeviceResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LockWebDeviceResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.LockWebDeviceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LockWebDeviceResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LockWebDeviceResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.LockWebDeviceResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.LockWebDeviceResponse)
    MergeFrom(*source);
  }
}

void LockWebDeviceResponse::MergeFrom(const LockWebDeviceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.LockWebDeviceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void LockWebDeviceResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.LockWebDeviceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LockWebDeviceResponse::CopyFrom(const LockWebDeviceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.LockWebDeviceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockWebDeviceResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void LockWebDeviceResponse::Swap(LockWebDeviceResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LockWebDeviceResponse::InternalSwap(LockWebDeviceResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LockWebDeviceResponse::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LockWebDeviceResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool LockWebDeviceResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LockWebDeviceResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void LockWebDeviceResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void LockWebDeviceResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& LockWebDeviceResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.LockWebDeviceResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* LockWebDeviceResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.LockWebDeviceResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* LockWebDeviceResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.LockWebDeviceResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void LockWebDeviceResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.LockWebDeviceResponse.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetIosExtensionKeyRequest::kBaseRequestFieldNumber;
const int GetIosExtensionKeyRequest::kExtensionSessionTypeFieldNumber;
const int GetIosExtensionKeyRequest::kExtensionDeviceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetIosExtensionKeyRequest::GetIosExtensionKeyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetIosExtensionKeyRequest)
}
GetIosExtensionKeyRequest::GetIosExtensionKeyRequest(const GetIosExtensionKeyRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  extensiondeviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_extensiondeviceid()) {
    extensiondeviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extensiondeviceid_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  extensionsessiontype_ = from.extensionsessiontype_;
  // @@protoc_insertion_point(copy_constructor:micromsg.GetIosExtensionKeyRequest)
}

void GetIosExtensionKeyRequest::SharedCtor() {
  _cached_size_ = 0;
  extensiondeviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&extensionsessiontype_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(extensionsessiontype_));
}

GetIosExtensionKeyRequest::~GetIosExtensionKeyRequest() {
  // @@protoc_insertion_point(destructor:micromsg.GetIosExtensionKeyRequest)
  SharedDtor();
}

void GetIosExtensionKeyRequest::SharedDtor() {
  extensiondeviceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GetIosExtensionKeyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetIosExtensionKeyRequest::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetIosExtensionKeyRequest& GetIosExtensionKeyRequest::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetIosExtensionKeyRequest* GetIosExtensionKeyRequest::New(::google::protobuf::Arena* arena) const {
  GetIosExtensionKeyRequest* n = new GetIosExtensionKeyRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetIosExtensionKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetIosExtensionKeyRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_extensiondeviceid()) {
      GOOGLE_DCHECK(!extensiondeviceid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*extensiondeviceid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  extensionsessiontype_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetIosExtensionKeyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetIosExtensionKeyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ExtensionSessionType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_extensionsessiontype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extensionsessiontype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes ExtensionDeviceId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_extensiondeviceid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetIosExtensionKeyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetIosExtensionKeyRequest)
  return false;
#undef DO_
}

void GetIosExtensionKeyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetIosExtensionKeyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional uint32 ExtensionSessionType = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->extensionsessiontype(), output);
  }

  // optional bytes ExtensionDeviceId = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->extensiondeviceid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetIosExtensionKeyRequest)
}

::google::protobuf::uint8* GetIosExtensionKeyRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetIosExtensionKeyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional uint32 ExtensionSessionType = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->extensionsessiontype(), target);
  }

  // optional bytes ExtensionDeviceId = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->extensiondeviceid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetIosExtensionKeyRequest)
  return target;
}

size_t GetIosExtensionKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetIosExtensionKeyRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  // optional bytes ExtensionDeviceId = 3;
  if (has_extensiondeviceid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->extensiondeviceid());
  }

  // optional uint32 ExtensionSessionType = 2;
  if (has_extensionsessiontype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->extensionsessiontype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetIosExtensionKeyRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetIosExtensionKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetIosExtensionKeyRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetIosExtensionKeyRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetIosExtensionKeyRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetIosExtensionKeyRequest)
    MergeFrom(*source);
  }
}

void GetIosExtensionKeyRequest::MergeFrom(const GetIosExtensionKeyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetIosExtensionKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_extensiondeviceid();
      extensiondeviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extensiondeviceid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000004u) {
      extensionsessiontype_ = from.extensionsessiontype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetIosExtensionKeyRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetIosExtensionKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetIosExtensionKeyRequest::CopyFrom(const GetIosExtensionKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetIosExtensionKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIosExtensionKeyRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GetIosExtensionKeyRequest::Swap(GetIosExtensionKeyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetIosExtensionKeyRequest::InternalSwap(GetIosExtensionKeyRequest* other) {
  extensiondeviceid_.Swap(&other->extensiondeviceid_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(extensionsessiontype_, other->extensionsessiontype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetIosExtensionKeyRequest::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetIosExtensionKeyRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool GetIosExtensionKeyRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetIosExtensionKeyRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void GetIosExtensionKeyRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetIosExtensionKeyRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GetIosExtensionKeyRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetIosExtensionKeyRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GetIosExtensionKeyRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetIosExtensionKeyRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GetIosExtensionKeyRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetIosExtensionKeyRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GetIosExtensionKeyRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetIosExtensionKeyRequest.BaseRequest)
}

// optional uint32 ExtensionSessionType = 2;
bool GetIosExtensionKeyRequest::has_extensionsessiontype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetIosExtensionKeyRequest::set_has_extensionsessiontype() {
  _has_bits_[0] |= 0x00000004u;
}
void GetIosExtensionKeyRequest::clear_has_extensionsessiontype() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetIosExtensionKeyRequest::clear_extensionsessiontype() {
  extensionsessiontype_ = 0u;
  clear_has_extensionsessiontype();
}
::google::protobuf::uint32 GetIosExtensionKeyRequest::extensionsessiontype() const {
  // @@protoc_insertion_point(field_get:micromsg.GetIosExtensionKeyRequest.ExtensionSessionType)
  return extensionsessiontype_;
}
void GetIosExtensionKeyRequest::set_extensionsessiontype(::google::protobuf::uint32 value) {
  set_has_extensionsessiontype();
  extensionsessiontype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetIosExtensionKeyRequest.ExtensionSessionType)
}

// optional bytes ExtensionDeviceId = 3;
bool GetIosExtensionKeyRequest::has_extensiondeviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetIosExtensionKeyRequest::set_has_extensiondeviceid() {
  _has_bits_[0] |= 0x00000001u;
}
void GetIosExtensionKeyRequest::clear_has_extensiondeviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetIosExtensionKeyRequest::clear_extensiondeviceid() {
  extensiondeviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extensiondeviceid();
}
const ::std::string& GetIosExtensionKeyRequest::extensiondeviceid() const {
  // @@protoc_insertion_point(field_get:micromsg.GetIosExtensionKeyRequest.ExtensionDeviceId)
  return extensiondeviceid_.GetNoArena();
}
void GetIosExtensionKeyRequest::set_extensiondeviceid(const ::std::string& value) {
  set_has_extensiondeviceid();
  extensiondeviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetIosExtensionKeyRequest.ExtensionDeviceId)
}
#if LANG_CXX11
void GetIosExtensionKeyRequest::set_extensiondeviceid(::std::string&& value) {
  set_has_extensiondeviceid();
  extensiondeviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetIosExtensionKeyRequest.ExtensionDeviceId)
}
#endif
void GetIosExtensionKeyRequest::set_extensiondeviceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_extensiondeviceid();
  extensiondeviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetIosExtensionKeyRequest.ExtensionDeviceId)
}
void GetIosExtensionKeyRequest::set_extensiondeviceid(const void* value, size_t size) {
  set_has_extensiondeviceid();
  extensiondeviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetIosExtensionKeyRequest.ExtensionDeviceId)
}
::std::string* GetIosExtensionKeyRequest::mutable_extensiondeviceid() {
  set_has_extensiondeviceid();
  // @@protoc_insertion_point(field_mutable:micromsg.GetIosExtensionKeyRequest.ExtensionDeviceId)
  return extensiondeviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetIosExtensionKeyRequest::release_extensiondeviceid() {
  // @@protoc_insertion_point(field_release:micromsg.GetIosExtensionKeyRequest.ExtensionDeviceId)
  clear_has_extensiondeviceid();
  return extensiondeviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetIosExtensionKeyRequest::set_allocated_extensiondeviceid(::std::string* extensiondeviceid) {
  if (extensiondeviceid != NULL) {
    set_has_extensiondeviceid();
  } else {
    clear_has_extensiondeviceid();
  }
  extensiondeviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extensiondeviceid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetIosExtensionKeyRequest.ExtensionDeviceId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExtSession::kSessionTypeFieldNumber;
const int ExtSession::kSessionKeyFieldNumber;
const int ExtSession::kServerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExtSession::ExtSession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ExtSession)
}
ExtSession::ExtSession(const ExtSession& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sessionkey()) {
    sessionkey_ = new ::micromsg::SKBuiltinBuffer_t(*from.sessionkey_);
  } else {
    sessionkey_ = NULL;
  }
  if (from.has_serverid()) {
    serverid_ = new ::micromsg::SKBuiltinBuffer_t(*from.serverid_);
  } else {
    serverid_ = NULL;
  }
  sessiontype_ = from.sessiontype_;
  // @@protoc_insertion_point(copy_constructor:micromsg.ExtSession)
}

void ExtSession::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&sessionkey_, 0, reinterpret_cast<char*>(&sessiontype_) -
    reinterpret_cast<char*>(&sessionkey_) + sizeof(sessiontype_));
}

ExtSession::~ExtSession() {
  // @@protoc_insertion_point(destructor:micromsg.ExtSession)
  SharedDtor();
}

void ExtSession::SharedDtor() {
  if (this != internal_default_instance()) {
    delete sessionkey_;
  }
  if (this != internal_default_instance()) {
    delete serverid_;
  }
}

void ExtSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExtSession::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExtSession& ExtSession::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExtSession* ExtSession::New(::google::protobuf::Arena* arena) const {
  ExtSession* n = new ExtSession;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExtSession::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ExtSession)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_sessionkey()) {
      GOOGLE_DCHECK(sessionkey_ != NULL);
      sessionkey_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_serverid()) {
      GOOGLE_DCHECK(serverid_ != NULL);
      serverid_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  sessiontype_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ExtSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ExtSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 SessionType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_sessiontype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessiontype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t SessionKey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sessionkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t ServerId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_serverid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ExtSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ExtSession)
  return false;
#undef DO_
}

void ExtSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ExtSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 SessionType = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sessiontype(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t SessionKey = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->sessionkey_, output);
  }

  // required .micromsg.SKBuiltinBuffer_t ServerId = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->serverid_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ExtSession)
}

::google::protobuf::uint8* ExtSession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ExtSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 SessionType = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sessiontype(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t SessionKey = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->sessionkey_, deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t ServerId = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->serverid_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ExtSession)
  return target;
}

size_t ExtSession::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.ExtSession)
  size_t total_size = 0;

  if (has_sessionkey()) {
    // required .micromsg.SKBuiltinBuffer_t SessionKey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sessionkey_);
  }

  if (has_serverid()) {
    // required .micromsg.SKBuiltinBuffer_t ServerId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->serverid_);
  }

  if (has_sessiontype()) {
    // required uint32 SessionType = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sessiontype());
  }

  return total_size;
}
size_t ExtSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ExtSession)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .micromsg.SKBuiltinBuffer_t SessionKey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sessionkey_);

    // required .micromsg.SKBuiltinBuffer_t ServerId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->serverid_);

    // required uint32 SessionType = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sessiontype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtSession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ExtSession)
  GOOGLE_DCHECK_NE(&from, this);
  const ExtSession* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExtSession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ExtSession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ExtSession)
    MergeFrom(*source);
  }
}

void ExtSession::MergeFrom(const ExtSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ExtSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_sessionkey()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.sessionkey());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_serverid()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.serverid());
    }
    if (cached_has_bits & 0x00000004u) {
      sessiontype_ = from.sessiontype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ExtSession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ExtSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtSession::CopyFrom(const ExtSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ExtSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtSession::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_sessionkey()) {
    if (!this->sessionkey_->IsInitialized()) return false;
  }
  if (has_serverid()) {
    if (!this->serverid_->IsInitialized()) return false;
  }
  return true;
}

void ExtSession::Swap(ExtSession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExtSession::InternalSwap(ExtSession* other) {
  std::swap(sessionkey_, other->sessionkey_);
  std::swap(serverid_, other->serverid_);
  std::swap(sessiontype_, other->sessiontype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExtSession::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExtSession

// required uint32 SessionType = 1;
bool ExtSession::has_sessiontype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ExtSession::set_has_sessiontype() {
  _has_bits_[0] |= 0x00000004u;
}
void ExtSession::clear_has_sessiontype() {
  _has_bits_[0] &= ~0x00000004u;
}
void ExtSession::clear_sessiontype() {
  sessiontype_ = 0u;
  clear_has_sessiontype();
}
::google::protobuf::uint32 ExtSession::sessiontype() const {
  // @@protoc_insertion_point(field_get:micromsg.ExtSession.SessionType)
  return sessiontype_;
}
void ExtSession::set_sessiontype(::google::protobuf::uint32 value) {
  set_has_sessiontype();
  sessiontype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ExtSession.SessionType)
}

// required .micromsg.SKBuiltinBuffer_t SessionKey = 2;
bool ExtSession::has_sessionkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ExtSession::set_has_sessionkey() {
  _has_bits_[0] |= 0x00000001u;
}
void ExtSession::clear_has_sessionkey() {
  _has_bits_[0] &= ~0x00000001u;
}
void ExtSession::clear_sessionkey() {
  if (sessionkey_ != NULL) sessionkey_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_sessionkey();
}
const ::micromsg::SKBuiltinBuffer_t& ExtSession::sessionkey() const {
  // @@protoc_insertion_point(field_get:micromsg.ExtSession.SessionKey)
  return sessionkey_ != NULL ? *sessionkey_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* ExtSession::mutable_sessionkey() {
  set_has_sessionkey();
  if (sessionkey_ == NULL) {
    sessionkey_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ExtSession.SessionKey)
  return sessionkey_;
}
::micromsg::SKBuiltinBuffer_t* ExtSession::release_sessionkey() {
  // @@protoc_insertion_point(field_release:micromsg.ExtSession.SessionKey)
  clear_has_sessionkey();
  ::micromsg::SKBuiltinBuffer_t* temp = sessionkey_;
  sessionkey_ = NULL;
  return temp;
}
void ExtSession::set_allocated_sessionkey(::micromsg::SKBuiltinBuffer_t* sessionkey) {
  delete sessionkey_;
  sessionkey_ = sessionkey;
  if (sessionkey) {
    set_has_sessionkey();
  } else {
    clear_has_sessionkey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ExtSession.SessionKey)
}

// required .micromsg.SKBuiltinBuffer_t ServerId = 3;
bool ExtSession::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ExtSession::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
void ExtSession::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
void ExtSession::clear_serverid() {
  if (serverid_ != NULL) serverid_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_serverid();
}
const ::micromsg::SKBuiltinBuffer_t& ExtSession::serverid() const {
  // @@protoc_insertion_point(field_get:micromsg.ExtSession.ServerId)
  return serverid_ != NULL ? *serverid_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* ExtSession::mutable_serverid() {
  set_has_serverid();
  if (serverid_ == NULL) {
    serverid_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ExtSession.ServerId)
  return serverid_;
}
::micromsg::SKBuiltinBuffer_t* ExtSession::release_serverid() {
  // @@protoc_insertion_point(field_release:micromsg.ExtSession.ServerId)
  clear_has_serverid();
  ::micromsg::SKBuiltinBuffer_t* temp = serverid_;
  serverid_ = NULL;
  return temp;
}
void ExtSession::set_allocated_serverid(::micromsg::SKBuiltinBuffer_t* serverid) {
  delete serverid_;
  serverid_ = serverid;
  if (serverid) {
    set_has_serverid();
  } else {
    clear_has_serverid();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ExtSession.ServerId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetIosExtensionKeyResponse::kBaseResponseFieldNumber;
const int GetIosExtensionKeyResponse::kKeyFieldNumber;
const int GetIosExtensionKeyResponse::kExtensionSessionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetIosExtensionKeyResponse::GetIosExtensionKeyResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetIosExtensionKeyResponse)
}
GetIosExtensionKeyResponse::GetIosExtensionKeyResponse(const GetIosExtensionKeyResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_key()) {
    key_ = new ::micromsg::SKBuiltinBuffer_t(*from.key_);
  } else {
    key_ = NULL;
  }
  if (from.has_extensionsession()) {
    extensionsession_ = new ::micromsg::ExtSession(*from.extensionsession_);
  } else {
    extensionsession_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GetIosExtensionKeyResponse)
}

void GetIosExtensionKeyResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&extensionsession_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(extensionsession_));
}

GetIosExtensionKeyResponse::~GetIosExtensionKeyResponse() {
  // @@protoc_insertion_point(destructor:micromsg.GetIosExtensionKeyResponse)
  SharedDtor();
}

void GetIosExtensionKeyResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete key_;
  }
  if (this != internal_default_instance()) {
    delete extensionsession_;
  }
}

void GetIosExtensionKeyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetIosExtensionKeyResponse::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetIosExtensionKeyResponse& GetIosExtensionKeyResponse::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetIosExtensionKeyResponse* GetIosExtensionKeyResponse::New(::google::protobuf::Arena* arena) const {
  GetIosExtensionKeyResponse* n = new GetIosExtensionKeyResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetIosExtensionKeyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetIosExtensionKeyResponse)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_key()) {
      GOOGLE_DCHECK(key_ != NULL);
      key_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_extensionsession()) {
      GOOGLE_DCHECK(extensionsession_ != NULL);
      extensionsession_->::micromsg::ExtSession::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetIosExtensionKeyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetIosExtensionKeyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t Key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.ExtSession ExtensionSession = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extensionsession()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetIosExtensionKeyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetIosExtensionKeyResponse)
  return false;
#undef DO_
}

void GetIosExtensionKeyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetIosExtensionKeyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required .micromsg.SKBuiltinBuffer_t Key = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->key_, output);
  }

  // optional .micromsg.ExtSession ExtensionSession = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->extensionsession_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetIosExtensionKeyResponse)
}

::google::protobuf::uint8* GetIosExtensionKeyResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetIosExtensionKeyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t Key = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->key_, deterministic, target);
  }

  // optional .micromsg.ExtSession ExtensionSession = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->extensionsession_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetIosExtensionKeyResponse)
  return target;
}

size_t GetIosExtensionKeyResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetIosExtensionKeyResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_key()) {
    // required .micromsg.SKBuiltinBuffer_t Key = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  return total_size;
}
size_t GetIosExtensionKeyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetIosExtensionKeyResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required .micromsg.SKBuiltinBuffer_t Key = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .micromsg.ExtSession ExtensionSession = 3;
  if (has_extensionsession()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->extensionsession_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetIosExtensionKeyResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetIosExtensionKeyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetIosExtensionKeyResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetIosExtensionKeyResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetIosExtensionKeyResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetIosExtensionKeyResponse)
    MergeFrom(*source);
  }
}

void GetIosExtensionKeyResponse::MergeFrom(const GetIosExtensionKeyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetIosExtensionKeyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_key()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.key());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_extensionsession()->::micromsg::ExtSession::MergeFrom(from.extensionsession());
    }
  }
}

void GetIosExtensionKeyResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetIosExtensionKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetIosExtensionKeyResponse::CopyFrom(const GetIosExtensionKeyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetIosExtensionKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIosExtensionKeyResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_key()) {
    if (!this->key_->IsInitialized()) return false;
  }
  if (has_extensionsession()) {
    if (!this->extensionsession_->IsInitialized()) return false;
  }
  return true;
}

void GetIosExtensionKeyResponse::Swap(GetIosExtensionKeyResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetIosExtensionKeyResponse::InternalSwap(GetIosExtensionKeyResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(key_, other->key_);
  std::swap(extensionsession_, other->extensionsession_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetIosExtensionKeyResponse::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetIosExtensionKeyResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetIosExtensionKeyResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetIosExtensionKeyResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void GetIosExtensionKeyResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetIosExtensionKeyResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetIosExtensionKeyResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetIosExtensionKeyResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetIosExtensionKeyResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetIosExtensionKeyResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetIosExtensionKeyResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetIosExtensionKeyResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetIosExtensionKeyResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetIosExtensionKeyResponse.BaseResponse)
}

// required .micromsg.SKBuiltinBuffer_t Key = 2;
bool GetIosExtensionKeyResponse::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetIosExtensionKeyResponse::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
void GetIosExtensionKeyResponse::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetIosExtensionKeyResponse::clear_key() {
  if (key_ != NULL) key_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_key();
}
const ::micromsg::SKBuiltinBuffer_t& GetIosExtensionKeyResponse::key() const {
  // @@protoc_insertion_point(field_get:micromsg.GetIosExtensionKeyResponse.Key)
  return key_ != NULL ? *key_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* GetIosExtensionKeyResponse::mutable_key() {
  set_has_key();
  if (key_ == NULL) {
    key_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetIosExtensionKeyResponse.Key)
  return key_;
}
::micromsg::SKBuiltinBuffer_t* GetIosExtensionKeyResponse::release_key() {
  // @@protoc_insertion_point(field_release:micromsg.GetIosExtensionKeyResponse.Key)
  clear_has_key();
  ::micromsg::SKBuiltinBuffer_t* temp = key_;
  key_ = NULL;
  return temp;
}
void GetIosExtensionKeyResponse::set_allocated_key(::micromsg::SKBuiltinBuffer_t* key) {
  delete key_;
  key_ = key;
  if (key) {
    set_has_key();
  } else {
    clear_has_key();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetIosExtensionKeyResponse.Key)
}

// optional .micromsg.ExtSession ExtensionSession = 3;
bool GetIosExtensionKeyResponse::has_extensionsession() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetIosExtensionKeyResponse::set_has_extensionsession() {
  _has_bits_[0] |= 0x00000004u;
}
void GetIosExtensionKeyResponse::clear_has_extensionsession() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetIosExtensionKeyResponse::clear_extensionsession() {
  if (extensionsession_ != NULL) extensionsession_->::micromsg::ExtSession::Clear();
  clear_has_extensionsession();
}
const ::micromsg::ExtSession& GetIosExtensionKeyResponse::extensionsession() const {
  // @@protoc_insertion_point(field_get:micromsg.GetIosExtensionKeyResponse.ExtensionSession)
  return extensionsession_ != NULL ? *extensionsession_
                         : *::micromsg::ExtSession::internal_default_instance();
}
::micromsg::ExtSession* GetIosExtensionKeyResponse::mutable_extensionsession() {
  set_has_extensionsession();
  if (extensionsession_ == NULL) {
    extensionsession_ = new ::micromsg::ExtSession;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetIosExtensionKeyResponse.ExtensionSession)
  return extensionsession_;
}
::micromsg::ExtSession* GetIosExtensionKeyResponse::release_extensionsession() {
  // @@protoc_insertion_point(field_release:micromsg.GetIosExtensionKeyResponse.ExtensionSession)
  clear_has_extensionsession();
  ::micromsg::ExtSession* temp = extensionsession_;
  extensionsession_ = NULL;
  return temp;
}
void GetIosExtensionKeyResponse::set_allocated_extensionsession(::micromsg::ExtSession* extensionsession) {
  delete extensionsession_;
  extensionsession_ = extensionsession;
  if (extensionsession) {
    set_has_extensionsession();
  } else {
    clear_has_extensionsession();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetIosExtensionKeyResponse.ExtensionSession)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PatternLockBuffer::kUinFieldNumber;
const int PatternLockBuffer::kVersionFieldNumber;
const int PatternLockBuffer::kSvrpatternhashFieldNumber;
const int PatternLockBuffer::kLockstatusFieldNumber;
const int PatternLockBuffer::kSignFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PatternLockBuffer::PatternLockBuffer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.PatternLockBuffer)
}
PatternLockBuffer::PatternLockBuffer(const PatternLockBuffer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_svrpatternhash()) {
    svrpatternhash_ = new ::micromsg::SKBuiltinBuffer_t(*from.svrpatternhash_);
  } else {
    svrpatternhash_ = NULL;
  }
  if (from.has_sign()) {
    sign_ = new ::micromsg::SKBuiltinBuffer_t(*from.sign_);
  } else {
    sign_ = NULL;
  }
  ::memcpy(&uin_, &from.uin_,
    reinterpret_cast<char*>(&lockstatus_) -
    reinterpret_cast<char*>(&uin_) + sizeof(lockstatus_));
  // @@protoc_insertion_point(copy_constructor:micromsg.PatternLockBuffer)
}

void PatternLockBuffer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&svrpatternhash_, 0, reinterpret_cast<char*>(&lockstatus_) -
    reinterpret_cast<char*>(&svrpatternhash_) + sizeof(lockstatus_));
}

PatternLockBuffer::~PatternLockBuffer() {
  // @@protoc_insertion_point(destructor:micromsg.PatternLockBuffer)
  SharedDtor();
}

void PatternLockBuffer::SharedDtor() {
  if (this != internal_default_instance()) {
    delete svrpatternhash_;
  }
  if (this != internal_default_instance()) {
    delete sign_;
  }
}

void PatternLockBuffer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PatternLockBuffer::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PatternLockBuffer& PatternLockBuffer::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

PatternLockBuffer* PatternLockBuffer::New(::google::protobuf::Arena* arena) const {
  PatternLockBuffer* n = new PatternLockBuffer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PatternLockBuffer::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.PatternLockBuffer)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_svrpatternhash()) {
      GOOGLE_DCHECK(svrpatternhash_ != NULL);
      svrpatternhash_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_sign()) {
      GOOGLE_DCHECK(sign_ != NULL);
      sign_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&uin_, 0, reinterpret_cast<char*>(&lockstatus_) -
      reinterpret_cast<char*>(&uin_) + sizeof(lockstatus_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PatternLockBuffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.PatternLockBuffer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_uin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t svrpatternhash = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svrpatternhash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lockstatus = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_lockstatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lockstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t sign = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.PatternLockBuffer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.PatternLockBuffer)
  return false;
#undef DO_
}

void PatternLockBuffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.PatternLockBuffer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 uin = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uin(), output);
  }

  // optional uint32 version = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  // optional .micromsg.SKBuiltinBuffer_t svrpatternhash = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->svrpatternhash_, output);
  }

  // optional uint32 lockstatus = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lockstatus(), output);
  }

  // optional .micromsg.SKBuiltinBuffer_t sign = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->sign_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.PatternLockBuffer)
}

::google::protobuf::uint8* PatternLockBuffer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.PatternLockBuffer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 uin = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uin(), target);
  }

  // optional uint32 version = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version(), target);
  }

  // optional .micromsg.SKBuiltinBuffer_t svrpatternhash = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->svrpatternhash_, deterministic, target);
  }

  // optional uint32 lockstatus = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lockstatus(), target);
  }

  // optional .micromsg.SKBuiltinBuffer_t sign = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->sign_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.PatternLockBuffer)
  return target;
}

size_t PatternLockBuffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.PatternLockBuffer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .micromsg.SKBuiltinBuffer_t svrpatternhash = 3;
    if (has_svrpatternhash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->svrpatternhash_);
    }

    // optional .micromsg.SKBuiltinBuffer_t sign = 5;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sign_);
    }

    // optional uint32 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional uint32 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint32 lockstatus = 4;
    if (has_lockstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lockstatus());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PatternLockBuffer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.PatternLockBuffer)
  GOOGLE_DCHECK_NE(&from, this);
  const PatternLockBuffer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PatternLockBuffer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.PatternLockBuffer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.PatternLockBuffer)
    MergeFrom(*source);
  }
}

void PatternLockBuffer::MergeFrom(const PatternLockBuffer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.PatternLockBuffer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_svrpatternhash()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.svrpatternhash());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_sign()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.sign());
    }
    if (cached_has_bits & 0x00000004u) {
      uin_ = from.uin_;
    }
    if (cached_has_bits & 0x00000008u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000010u) {
      lockstatus_ = from.lockstatus_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PatternLockBuffer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.PatternLockBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatternLockBuffer::CopyFrom(const PatternLockBuffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.PatternLockBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatternLockBuffer::IsInitialized() const {
  if (has_svrpatternhash()) {
    if (!this->svrpatternhash_->IsInitialized()) return false;
  }
  if (has_sign()) {
    if (!this->sign_->IsInitialized()) return false;
  }
  return true;
}

void PatternLockBuffer::Swap(PatternLockBuffer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PatternLockBuffer::InternalSwap(PatternLockBuffer* other) {
  std::swap(svrpatternhash_, other->svrpatternhash_);
  std::swap(sign_, other->sign_);
  std::swap(uin_, other->uin_);
  std::swap(version_, other->version_);
  std::swap(lockstatus_, other->lockstatus_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PatternLockBuffer::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PatternLockBuffer

// optional uint32 uin = 1;
bool PatternLockBuffer::has_uin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PatternLockBuffer::set_has_uin() {
  _has_bits_[0] |= 0x00000004u;
}
void PatternLockBuffer::clear_has_uin() {
  _has_bits_[0] &= ~0x00000004u;
}
void PatternLockBuffer::clear_uin() {
  uin_ = 0u;
  clear_has_uin();
}
::google::protobuf::uint32 PatternLockBuffer::uin() const {
  // @@protoc_insertion_point(field_get:micromsg.PatternLockBuffer.uin)
  return uin_;
}
void PatternLockBuffer::set_uin(::google::protobuf::uint32 value) {
  set_has_uin();
  uin_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PatternLockBuffer.uin)
}

// optional uint32 version = 2;
bool PatternLockBuffer::has_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PatternLockBuffer::set_has_version() {
  _has_bits_[0] |= 0x00000008u;
}
void PatternLockBuffer::clear_has_version() {
  _has_bits_[0] &= ~0x00000008u;
}
void PatternLockBuffer::clear_version() {
  version_ = 0u;
  clear_has_version();
}
::google::protobuf::uint32 PatternLockBuffer::version() const {
  // @@protoc_insertion_point(field_get:micromsg.PatternLockBuffer.version)
  return version_;
}
void PatternLockBuffer::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PatternLockBuffer.version)
}

// optional .micromsg.SKBuiltinBuffer_t svrpatternhash = 3;
bool PatternLockBuffer::has_svrpatternhash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PatternLockBuffer::set_has_svrpatternhash() {
  _has_bits_[0] |= 0x00000001u;
}
void PatternLockBuffer::clear_has_svrpatternhash() {
  _has_bits_[0] &= ~0x00000001u;
}
void PatternLockBuffer::clear_svrpatternhash() {
  if (svrpatternhash_ != NULL) svrpatternhash_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_svrpatternhash();
}
const ::micromsg::SKBuiltinBuffer_t& PatternLockBuffer::svrpatternhash() const {
  // @@protoc_insertion_point(field_get:micromsg.PatternLockBuffer.svrpatternhash)
  return svrpatternhash_ != NULL ? *svrpatternhash_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* PatternLockBuffer::mutable_svrpatternhash() {
  set_has_svrpatternhash();
  if (svrpatternhash_ == NULL) {
    svrpatternhash_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.PatternLockBuffer.svrpatternhash)
  return svrpatternhash_;
}
::micromsg::SKBuiltinBuffer_t* PatternLockBuffer::release_svrpatternhash() {
  // @@protoc_insertion_point(field_release:micromsg.PatternLockBuffer.svrpatternhash)
  clear_has_svrpatternhash();
  ::micromsg::SKBuiltinBuffer_t* temp = svrpatternhash_;
  svrpatternhash_ = NULL;
  return temp;
}
void PatternLockBuffer::set_allocated_svrpatternhash(::micromsg::SKBuiltinBuffer_t* svrpatternhash) {
  delete svrpatternhash_;
  svrpatternhash_ = svrpatternhash;
  if (svrpatternhash) {
    set_has_svrpatternhash();
  } else {
    clear_has_svrpatternhash();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.PatternLockBuffer.svrpatternhash)
}

// optional uint32 lockstatus = 4;
bool PatternLockBuffer::has_lockstatus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PatternLockBuffer::set_has_lockstatus() {
  _has_bits_[0] |= 0x00000010u;
}
void PatternLockBuffer::clear_has_lockstatus() {
  _has_bits_[0] &= ~0x00000010u;
}
void PatternLockBuffer::clear_lockstatus() {
  lockstatus_ = 0u;
  clear_has_lockstatus();
}
::google::protobuf::uint32 PatternLockBuffer::lockstatus() const {
  // @@protoc_insertion_point(field_get:micromsg.PatternLockBuffer.lockstatus)
  return lockstatus_;
}
void PatternLockBuffer::set_lockstatus(::google::protobuf::uint32 value) {
  set_has_lockstatus();
  lockstatus_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PatternLockBuffer.lockstatus)
}

// optional .micromsg.SKBuiltinBuffer_t sign = 5;
bool PatternLockBuffer::has_sign() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PatternLockBuffer::set_has_sign() {
  _has_bits_[0] |= 0x00000002u;
}
void PatternLockBuffer::clear_has_sign() {
  _has_bits_[0] &= ~0x00000002u;
}
void PatternLockBuffer::clear_sign() {
  if (sign_ != NULL) sign_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_sign();
}
const ::micromsg::SKBuiltinBuffer_t& PatternLockBuffer::sign() const {
  // @@protoc_insertion_point(field_get:micromsg.PatternLockBuffer.sign)
  return sign_ != NULL ? *sign_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* PatternLockBuffer::mutable_sign() {
  set_has_sign();
  if (sign_ == NULL) {
    sign_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.PatternLockBuffer.sign)
  return sign_;
}
::micromsg::SKBuiltinBuffer_t* PatternLockBuffer::release_sign() {
  // @@protoc_insertion_point(field_release:micromsg.PatternLockBuffer.sign)
  clear_has_sign();
  ::micromsg::SKBuiltinBuffer_t* temp = sign_;
  sign_ = NULL;
  return temp;
}
void PatternLockBuffer::set_allocated_sign(::micromsg::SKBuiltinBuffer_t* sign) {
  delete sign_;
  sign_ = sign;
  if (sign) {
    set_has_sign();
  } else {
    clear_has_sign();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.PatternLockBuffer.sign)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterNewPatternLockRequest::kBaseRequestFieldNumber;
const int RegisterNewPatternLockRequest::kPaytokenFieldNumber;
const int RegisterNewPatternLockRequest::kPatternhashFieldNumber;
const int RegisterNewPatternLockRequest::kCmdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterNewPatternLockRequest::RegisterNewPatternLockRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.RegisterNewPatternLockRequest)
}
RegisterNewPatternLockRequest::RegisterNewPatternLockRequest(const RegisterNewPatternLockRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_paytoken()) {
    paytoken_ = new ::micromsg::SKBuiltinBuffer_t(*from.paytoken_);
  } else {
    paytoken_ = NULL;
  }
  if (from.has_patternhash()) {
    patternhash_ = new ::micromsg::SKBuiltinBuffer_t(*from.patternhash_);
  } else {
    patternhash_ = NULL;
  }
  cmd_ = from.cmd_;
  // @@protoc_insertion_point(copy_constructor:micromsg.RegisterNewPatternLockRequest)
}

void RegisterNewPatternLockRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(cmd_));
}

RegisterNewPatternLockRequest::~RegisterNewPatternLockRequest() {
  // @@protoc_insertion_point(destructor:micromsg.RegisterNewPatternLockRequest)
  SharedDtor();
}

void RegisterNewPatternLockRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete paytoken_;
  }
  if (this != internal_default_instance()) {
    delete patternhash_;
  }
}

void RegisterNewPatternLockRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterNewPatternLockRequest::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegisterNewPatternLockRequest& RegisterNewPatternLockRequest::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

RegisterNewPatternLockRequest* RegisterNewPatternLockRequest::New(::google::protobuf::Arena* arena) const {
  RegisterNewPatternLockRequest* n = new RegisterNewPatternLockRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegisterNewPatternLockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.RegisterNewPatternLockRequest)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_paytoken()) {
      GOOGLE_DCHECK(paytoken_ != NULL);
      paytoken_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_patternhash()) {
      GOOGLE_DCHECK(patternhash_ != NULL);
      patternhash_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  cmd_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RegisterNewPatternLockRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.RegisterNewPatternLockRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t paytoken = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_paytoken()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t patternhash = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_patternhash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cmd = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_cmd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.RegisterNewPatternLockRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.RegisterNewPatternLockRequest)
  return false;
#undef DO_
}

void RegisterNewPatternLockRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.RegisterNewPatternLockRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional .micromsg.SKBuiltinBuffer_t paytoken = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->paytoken_, output);
  }

  // optional .micromsg.SKBuiltinBuffer_t patternhash = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->patternhash_, output);
  }

  // optional uint32 cmd = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cmd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.RegisterNewPatternLockRequest)
}

::google::protobuf::uint8* RegisterNewPatternLockRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.RegisterNewPatternLockRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional .micromsg.SKBuiltinBuffer_t paytoken = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->paytoken_, deterministic, target);
  }

  // optional .micromsg.SKBuiltinBuffer_t patternhash = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->patternhash_, deterministic, target);
  }

  // optional uint32 cmd = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cmd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.RegisterNewPatternLockRequest)
  return target;
}

size_t RegisterNewPatternLockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.RegisterNewPatternLockRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  if (_has_bits_[0 / 32] & 14u) {
    // optional .micromsg.SKBuiltinBuffer_t paytoken = 2;
    if (has_paytoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->paytoken_);
    }

    // optional .micromsg.SKBuiltinBuffer_t patternhash = 3;
    if (has_patternhash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->patternhash_);
    }

    // optional uint32 cmd = 4;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterNewPatternLockRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.RegisterNewPatternLockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterNewPatternLockRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterNewPatternLockRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.RegisterNewPatternLockRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.RegisterNewPatternLockRequest)
    MergeFrom(*source);
  }
}

void RegisterNewPatternLockRequest::MergeFrom(const RegisterNewPatternLockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.RegisterNewPatternLockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_paytoken()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.paytoken());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_patternhash()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.patternhash());
    }
    if (cached_has_bits & 0x00000008u) {
      cmd_ = from.cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RegisterNewPatternLockRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.RegisterNewPatternLockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterNewPatternLockRequest::CopyFrom(const RegisterNewPatternLockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.RegisterNewPatternLockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterNewPatternLockRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_paytoken()) {
    if (!this->paytoken_->IsInitialized()) return false;
  }
  if (has_patternhash()) {
    if (!this->patternhash_->IsInitialized()) return false;
  }
  return true;
}

void RegisterNewPatternLockRequest::Swap(RegisterNewPatternLockRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterNewPatternLockRequest::InternalSwap(RegisterNewPatternLockRequest* other) {
  std::swap(baserequest_, other->baserequest_);
  std::swap(paytoken_, other->paytoken_);
  std::swap(patternhash_, other->patternhash_);
  std::swap(cmd_, other->cmd_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegisterNewPatternLockRequest::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegisterNewPatternLockRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool RegisterNewPatternLockRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RegisterNewPatternLockRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void RegisterNewPatternLockRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void RegisterNewPatternLockRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& RegisterNewPatternLockRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.RegisterNewPatternLockRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* RegisterNewPatternLockRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.RegisterNewPatternLockRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* RegisterNewPatternLockRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.RegisterNewPatternLockRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void RegisterNewPatternLockRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.RegisterNewPatternLockRequest.BaseRequest)
}

// optional .micromsg.SKBuiltinBuffer_t paytoken = 2;
bool RegisterNewPatternLockRequest::has_paytoken() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RegisterNewPatternLockRequest::set_has_paytoken() {
  _has_bits_[0] |= 0x00000002u;
}
void RegisterNewPatternLockRequest::clear_has_paytoken() {
  _has_bits_[0] &= ~0x00000002u;
}
void RegisterNewPatternLockRequest::clear_paytoken() {
  if (paytoken_ != NULL) paytoken_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_paytoken();
}
const ::micromsg::SKBuiltinBuffer_t& RegisterNewPatternLockRequest::paytoken() const {
  // @@protoc_insertion_point(field_get:micromsg.RegisterNewPatternLockRequest.paytoken)
  return paytoken_ != NULL ? *paytoken_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* RegisterNewPatternLockRequest::mutable_paytoken() {
  set_has_paytoken();
  if (paytoken_ == NULL) {
    paytoken_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.RegisterNewPatternLockRequest.paytoken)
  return paytoken_;
}
::micromsg::SKBuiltinBuffer_t* RegisterNewPatternLockRequest::release_paytoken() {
  // @@protoc_insertion_point(field_release:micromsg.RegisterNewPatternLockRequest.paytoken)
  clear_has_paytoken();
  ::micromsg::SKBuiltinBuffer_t* temp = paytoken_;
  paytoken_ = NULL;
  return temp;
}
void RegisterNewPatternLockRequest::set_allocated_paytoken(::micromsg::SKBuiltinBuffer_t* paytoken) {
  delete paytoken_;
  paytoken_ = paytoken;
  if (paytoken) {
    set_has_paytoken();
  } else {
    clear_has_paytoken();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.RegisterNewPatternLockRequest.paytoken)
}

// optional .micromsg.SKBuiltinBuffer_t patternhash = 3;
bool RegisterNewPatternLockRequest::has_patternhash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RegisterNewPatternLockRequest::set_has_patternhash() {
  _has_bits_[0] |= 0x00000004u;
}
void RegisterNewPatternLockRequest::clear_has_patternhash() {
  _has_bits_[0] &= ~0x00000004u;
}
void RegisterNewPatternLockRequest::clear_patternhash() {
  if (patternhash_ != NULL) patternhash_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_patternhash();
}
const ::micromsg::SKBuiltinBuffer_t& RegisterNewPatternLockRequest::patternhash() const {
  // @@protoc_insertion_point(field_get:micromsg.RegisterNewPatternLockRequest.patternhash)
  return patternhash_ != NULL ? *patternhash_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* RegisterNewPatternLockRequest::mutable_patternhash() {
  set_has_patternhash();
  if (patternhash_ == NULL) {
    patternhash_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.RegisterNewPatternLockRequest.patternhash)
  return patternhash_;
}
::micromsg::SKBuiltinBuffer_t* RegisterNewPatternLockRequest::release_patternhash() {
  // @@protoc_insertion_point(field_release:micromsg.RegisterNewPatternLockRequest.patternhash)
  clear_has_patternhash();
  ::micromsg::SKBuiltinBuffer_t* temp = patternhash_;
  patternhash_ = NULL;
  return temp;
}
void RegisterNewPatternLockRequest::set_allocated_patternhash(::micromsg::SKBuiltinBuffer_t* patternhash) {
  delete patternhash_;
  patternhash_ = patternhash;
  if (patternhash) {
    set_has_patternhash();
  } else {
    clear_has_patternhash();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.RegisterNewPatternLockRequest.patternhash)
}

// optional uint32 cmd = 4;
bool RegisterNewPatternLockRequest::has_cmd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RegisterNewPatternLockRequest::set_has_cmd() {
  _has_bits_[0] |= 0x00000008u;
}
void RegisterNewPatternLockRequest::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000008u;
}
void RegisterNewPatternLockRequest::clear_cmd() {
  cmd_ = 0u;
  clear_has_cmd();
}
::google::protobuf::uint32 RegisterNewPatternLockRequest::cmd() const {
  // @@protoc_insertion_point(field_get:micromsg.RegisterNewPatternLockRequest.cmd)
  return cmd_;
}
void RegisterNewPatternLockRequest::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:micromsg.RegisterNewPatternLockRequest.cmd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterNewPatternLockResponse::kBaseResponseFieldNumber;
const int RegisterNewPatternLockResponse::kPatternlockbufFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterNewPatternLockResponse::RegisterNewPatternLockResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.RegisterNewPatternLockResponse)
}
RegisterNewPatternLockResponse::RegisterNewPatternLockResponse(const RegisterNewPatternLockResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_patternlockbuf()) {
    patternlockbuf_ = new ::micromsg::PatternLockBuffer(*from.patternlockbuf_);
  } else {
    patternlockbuf_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.RegisterNewPatternLockResponse)
}

void RegisterNewPatternLockResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&patternlockbuf_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(patternlockbuf_));
}

RegisterNewPatternLockResponse::~RegisterNewPatternLockResponse() {
  // @@protoc_insertion_point(destructor:micromsg.RegisterNewPatternLockResponse)
  SharedDtor();
}

void RegisterNewPatternLockResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete patternlockbuf_;
  }
}

void RegisterNewPatternLockResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterNewPatternLockResponse::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegisterNewPatternLockResponse& RegisterNewPatternLockResponse::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

RegisterNewPatternLockResponse* RegisterNewPatternLockResponse::New(::google::protobuf::Arena* arena) const {
  RegisterNewPatternLockResponse* n = new RegisterNewPatternLockResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegisterNewPatternLockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.RegisterNewPatternLockResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_patternlockbuf()) {
      GOOGLE_DCHECK(patternlockbuf_ != NULL);
      patternlockbuf_->::micromsg::PatternLockBuffer::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RegisterNewPatternLockResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.RegisterNewPatternLockResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.PatternLockBuffer patternlockbuf = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_patternlockbuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.RegisterNewPatternLockResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.RegisterNewPatternLockResponse)
  return false;
#undef DO_
}

void RegisterNewPatternLockResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.RegisterNewPatternLockResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional .micromsg.PatternLockBuffer patternlockbuf = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->patternlockbuf_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.RegisterNewPatternLockResponse)
}

::google::protobuf::uint8* RegisterNewPatternLockResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.RegisterNewPatternLockResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional .micromsg.PatternLockBuffer patternlockbuf = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->patternlockbuf_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.RegisterNewPatternLockResponse)
  return target;
}

size_t RegisterNewPatternLockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.RegisterNewPatternLockResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  // optional .micromsg.PatternLockBuffer patternlockbuf = 2;
  if (has_patternlockbuf()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->patternlockbuf_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterNewPatternLockResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.RegisterNewPatternLockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterNewPatternLockResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterNewPatternLockResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.RegisterNewPatternLockResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.RegisterNewPatternLockResponse)
    MergeFrom(*source);
  }
}

void RegisterNewPatternLockResponse::MergeFrom(const RegisterNewPatternLockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.RegisterNewPatternLockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_patternlockbuf()->::micromsg::PatternLockBuffer::MergeFrom(from.patternlockbuf());
    }
  }
}

void RegisterNewPatternLockResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.RegisterNewPatternLockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterNewPatternLockResponse::CopyFrom(const RegisterNewPatternLockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.RegisterNewPatternLockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterNewPatternLockResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_patternlockbuf()) {
    if (!this->patternlockbuf_->IsInitialized()) return false;
  }
  return true;
}

void RegisterNewPatternLockResponse::Swap(RegisterNewPatternLockResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterNewPatternLockResponse::InternalSwap(RegisterNewPatternLockResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(patternlockbuf_, other->patternlockbuf_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegisterNewPatternLockResponse::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegisterNewPatternLockResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool RegisterNewPatternLockResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RegisterNewPatternLockResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void RegisterNewPatternLockResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void RegisterNewPatternLockResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& RegisterNewPatternLockResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.RegisterNewPatternLockResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* RegisterNewPatternLockResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.RegisterNewPatternLockResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* RegisterNewPatternLockResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.RegisterNewPatternLockResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void RegisterNewPatternLockResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.RegisterNewPatternLockResponse.BaseResponse)
}

// optional .micromsg.PatternLockBuffer patternlockbuf = 2;
bool RegisterNewPatternLockResponse::has_patternlockbuf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RegisterNewPatternLockResponse::set_has_patternlockbuf() {
  _has_bits_[0] |= 0x00000002u;
}
void RegisterNewPatternLockResponse::clear_has_patternlockbuf() {
  _has_bits_[0] &= ~0x00000002u;
}
void RegisterNewPatternLockResponse::clear_patternlockbuf() {
  if (patternlockbuf_ != NULL) patternlockbuf_->::micromsg::PatternLockBuffer::Clear();
  clear_has_patternlockbuf();
}
const ::micromsg::PatternLockBuffer& RegisterNewPatternLockResponse::patternlockbuf() const {
  // @@protoc_insertion_point(field_get:micromsg.RegisterNewPatternLockResponse.patternlockbuf)
  return patternlockbuf_ != NULL ? *patternlockbuf_
                         : *::micromsg::PatternLockBuffer::internal_default_instance();
}
::micromsg::PatternLockBuffer* RegisterNewPatternLockResponse::mutable_patternlockbuf() {
  set_has_patternlockbuf();
  if (patternlockbuf_ == NULL) {
    patternlockbuf_ = new ::micromsg::PatternLockBuffer;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.RegisterNewPatternLockResponse.patternlockbuf)
  return patternlockbuf_;
}
::micromsg::PatternLockBuffer* RegisterNewPatternLockResponse::release_patternlockbuf() {
  // @@protoc_insertion_point(field_release:micromsg.RegisterNewPatternLockResponse.patternlockbuf)
  clear_has_patternlockbuf();
  ::micromsg::PatternLockBuffer* temp = patternlockbuf_;
  patternlockbuf_ = NULL;
  return temp;
}
void RegisterNewPatternLockResponse::set_allocated_patternlockbuf(::micromsg::PatternLockBuffer* patternlockbuf) {
  delete patternlockbuf_;
  patternlockbuf_ = patternlockbuf;
  if (patternlockbuf) {
    set_has_patternlockbuf();
  } else {
    clear_has_patternlockbuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.RegisterNewPatternLockResponse.patternlockbuf)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpPatternLockRequest::kBaseRequestFieldNumber;
const int OpPatternLockRequest::kCmdFieldNumber;
const int OpPatternLockRequest::kNowpatternhashFieldNumber;
const int OpPatternLockRequest::kNewpatternhashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpPatternLockRequest::OpPatternLockRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.OpPatternLockRequest)
}
OpPatternLockRequest::OpPatternLockRequest(const OpPatternLockRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_nowpatternhash()) {
    nowpatternhash_ = new ::micromsg::SKBuiltinBuffer_t(*from.nowpatternhash_);
  } else {
    nowpatternhash_ = NULL;
  }
  if (from.has_newpatternhash()) {
    newpatternhash_ = new ::micromsg::SKBuiltinBuffer_t(*from.newpatternhash_);
  } else {
    newpatternhash_ = NULL;
  }
  cmd_ = from.cmd_;
  // @@protoc_insertion_point(copy_constructor:micromsg.OpPatternLockRequest)
}

void OpPatternLockRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(cmd_));
}

OpPatternLockRequest::~OpPatternLockRequest() {
  // @@protoc_insertion_point(destructor:micromsg.OpPatternLockRequest)
  SharedDtor();
}

void OpPatternLockRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete nowpatternhash_;
  }
  if (this != internal_default_instance()) {
    delete newpatternhash_;
  }
}

void OpPatternLockRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpPatternLockRequest::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OpPatternLockRequest& OpPatternLockRequest::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

OpPatternLockRequest* OpPatternLockRequest::New(::google::protobuf::Arena* arena) const {
  OpPatternLockRequest* n = new OpPatternLockRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpPatternLockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.OpPatternLockRequest)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_nowpatternhash()) {
      GOOGLE_DCHECK(nowpatternhash_ != NULL);
      nowpatternhash_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_newpatternhash()) {
      GOOGLE_DCHECK(newpatternhash_ != NULL);
      newpatternhash_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  cmd_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OpPatternLockRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.OpPatternLockRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cmd = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_cmd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t nowpatternhash = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nowpatternhash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t newpatternhash = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newpatternhash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.OpPatternLockRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.OpPatternLockRequest)
  return false;
#undef DO_
}

void OpPatternLockRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.OpPatternLockRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional uint32 cmd = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cmd(), output);
  }

  // optional .micromsg.SKBuiltinBuffer_t nowpatternhash = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->nowpatternhash_, output);
  }

  // optional .micromsg.SKBuiltinBuffer_t newpatternhash = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->newpatternhash_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.OpPatternLockRequest)
}

::google::protobuf::uint8* OpPatternLockRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.OpPatternLockRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional uint32 cmd = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cmd(), target);
  }

  // optional .micromsg.SKBuiltinBuffer_t nowpatternhash = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->nowpatternhash_, deterministic, target);
  }

  // optional .micromsg.SKBuiltinBuffer_t newpatternhash = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->newpatternhash_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.OpPatternLockRequest)
  return target;
}

size_t OpPatternLockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.OpPatternLockRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  if (_has_bits_[0 / 32] & 14u) {
    // optional .micromsg.SKBuiltinBuffer_t nowpatternhash = 3;
    if (has_nowpatternhash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->nowpatternhash_);
    }

    // optional .micromsg.SKBuiltinBuffer_t newpatternhash = 4;
    if (has_newpatternhash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->newpatternhash_);
    }

    // optional uint32 cmd = 2;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpPatternLockRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.OpPatternLockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OpPatternLockRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpPatternLockRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.OpPatternLockRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.OpPatternLockRequest)
    MergeFrom(*source);
  }
}

void OpPatternLockRequest::MergeFrom(const OpPatternLockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.OpPatternLockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_nowpatternhash()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.nowpatternhash());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_newpatternhash()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.newpatternhash());
    }
    if (cached_has_bits & 0x00000008u) {
      cmd_ = from.cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OpPatternLockRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.OpPatternLockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpPatternLockRequest::CopyFrom(const OpPatternLockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.OpPatternLockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpPatternLockRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_nowpatternhash()) {
    if (!this->nowpatternhash_->IsInitialized()) return false;
  }
  if (has_newpatternhash()) {
    if (!this->newpatternhash_->IsInitialized()) return false;
  }
  return true;
}

void OpPatternLockRequest::Swap(OpPatternLockRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpPatternLockRequest::InternalSwap(OpPatternLockRequest* other) {
  std::swap(baserequest_, other->baserequest_);
  std::swap(nowpatternhash_, other->nowpatternhash_);
  std::swap(newpatternhash_, other->newpatternhash_);
  std::swap(cmd_, other->cmd_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpPatternLockRequest::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpPatternLockRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool OpPatternLockRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OpPatternLockRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void OpPatternLockRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void OpPatternLockRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& OpPatternLockRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.OpPatternLockRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* OpPatternLockRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.OpPatternLockRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* OpPatternLockRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.OpPatternLockRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void OpPatternLockRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.OpPatternLockRequest.BaseRequest)
}

// optional uint32 cmd = 2;
bool OpPatternLockRequest::has_cmd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OpPatternLockRequest::set_has_cmd() {
  _has_bits_[0] |= 0x00000008u;
}
void OpPatternLockRequest::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000008u;
}
void OpPatternLockRequest::clear_cmd() {
  cmd_ = 0u;
  clear_has_cmd();
}
::google::protobuf::uint32 OpPatternLockRequest::cmd() const {
  // @@protoc_insertion_point(field_get:micromsg.OpPatternLockRequest.cmd)
  return cmd_;
}
void OpPatternLockRequest::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:micromsg.OpPatternLockRequest.cmd)
}

// optional .micromsg.SKBuiltinBuffer_t nowpatternhash = 3;
bool OpPatternLockRequest::has_nowpatternhash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OpPatternLockRequest::set_has_nowpatternhash() {
  _has_bits_[0] |= 0x00000002u;
}
void OpPatternLockRequest::clear_has_nowpatternhash() {
  _has_bits_[0] &= ~0x00000002u;
}
void OpPatternLockRequest::clear_nowpatternhash() {
  if (nowpatternhash_ != NULL) nowpatternhash_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_nowpatternhash();
}
const ::micromsg::SKBuiltinBuffer_t& OpPatternLockRequest::nowpatternhash() const {
  // @@protoc_insertion_point(field_get:micromsg.OpPatternLockRequest.nowpatternhash)
  return nowpatternhash_ != NULL ? *nowpatternhash_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* OpPatternLockRequest::mutable_nowpatternhash() {
  set_has_nowpatternhash();
  if (nowpatternhash_ == NULL) {
    nowpatternhash_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.OpPatternLockRequest.nowpatternhash)
  return nowpatternhash_;
}
::micromsg::SKBuiltinBuffer_t* OpPatternLockRequest::release_nowpatternhash() {
  // @@protoc_insertion_point(field_release:micromsg.OpPatternLockRequest.nowpatternhash)
  clear_has_nowpatternhash();
  ::micromsg::SKBuiltinBuffer_t* temp = nowpatternhash_;
  nowpatternhash_ = NULL;
  return temp;
}
void OpPatternLockRequest::set_allocated_nowpatternhash(::micromsg::SKBuiltinBuffer_t* nowpatternhash) {
  delete nowpatternhash_;
  nowpatternhash_ = nowpatternhash;
  if (nowpatternhash) {
    set_has_nowpatternhash();
  } else {
    clear_has_nowpatternhash();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.OpPatternLockRequest.nowpatternhash)
}

// optional .micromsg.SKBuiltinBuffer_t newpatternhash = 4;
bool OpPatternLockRequest::has_newpatternhash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OpPatternLockRequest::set_has_newpatternhash() {
  _has_bits_[0] |= 0x00000004u;
}
void OpPatternLockRequest::clear_has_newpatternhash() {
  _has_bits_[0] &= ~0x00000004u;
}
void OpPatternLockRequest::clear_newpatternhash() {
  if (newpatternhash_ != NULL) newpatternhash_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_newpatternhash();
}
const ::micromsg::SKBuiltinBuffer_t& OpPatternLockRequest::newpatternhash() const {
  // @@protoc_insertion_point(field_get:micromsg.OpPatternLockRequest.newpatternhash)
  return newpatternhash_ != NULL ? *newpatternhash_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* OpPatternLockRequest::mutable_newpatternhash() {
  set_has_newpatternhash();
  if (newpatternhash_ == NULL) {
    newpatternhash_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.OpPatternLockRequest.newpatternhash)
  return newpatternhash_;
}
::micromsg::SKBuiltinBuffer_t* OpPatternLockRequest::release_newpatternhash() {
  // @@protoc_insertion_point(field_release:micromsg.OpPatternLockRequest.newpatternhash)
  clear_has_newpatternhash();
  ::micromsg::SKBuiltinBuffer_t* temp = newpatternhash_;
  newpatternhash_ = NULL;
  return temp;
}
void OpPatternLockRequest::set_allocated_newpatternhash(::micromsg::SKBuiltinBuffer_t* newpatternhash) {
  delete newpatternhash_;
  newpatternhash_ = newpatternhash;
  if (newpatternhash) {
    set_has_newpatternhash();
  } else {
    clear_has_newpatternhash();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.OpPatternLockRequest.newpatternhash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpPatternLockResponse::kBaseResponseFieldNumber;
const int OpPatternLockResponse::kPatternlockbufFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpPatternLockResponse::OpPatternLockResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.OpPatternLockResponse)
}
OpPatternLockResponse::OpPatternLockResponse(const OpPatternLockResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_patternlockbuf()) {
    patternlockbuf_ = new ::micromsg::PatternLockBuffer(*from.patternlockbuf_);
  } else {
    patternlockbuf_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.OpPatternLockResponse)
}

void OpPatternLockResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&patternlockbuf_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(patternlockbuf_));
}

OpPatternLockResponse::~OpPatternLockResponse() {
  // @@protoc_insertion_point(destructor:micromsg.OpPatternLockResponse)
  SharedDtor();
}

void OpPatternLockResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete patternlockbuf_;
  }
}

void OpPatternLockResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpPatternLockResponse::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OpPatternLockResponse& OpPatternLockResponse::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

OpPatternLockResponse* OpPatternLockResponse::New(::google::protobuf::Arena* arena) const {
  OpPatternLockResponse* n = new OpPatternLockResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpPatternLockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.OpPatternLockResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_patternlockbuf()) {
      GOOGLE_DCHECK(patternlockbuf_ != NULL);
      patternlockbuf_->::micromsg::PatternLockBuffer::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OpPatternLockResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.OpPatternLockResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.PatternLockBuffer patternlockbuf = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_patternlockbuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.OpPatternLockResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.OpPatternLockResponse)
  return false;
#undef DO_
}

void OpPatternLockResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.OpPatternLockResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional .micromsg.PatternLockBuffer patternlockbuf = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->patternlockbuf_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.OpPatternLockResponse)
}

::google::protobuf::uint8* OpPatternLockResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.OpPatternLockResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional .micromsg.PatternLockBuffer patternlockbuf = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->patternlockbuf_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.OpPatternLockResponse)
  return target;
}

size_t OpPatternLockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.OpPatternLockResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  // optional .micromsg.PatternLockBuffer patternlockbuf = 2;
  if (has_patternlockbuf()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->patternlockbuf_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpPatternLockResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.OpPatternLockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OpPatternLockResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpPatternLockResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.OpPatternLockResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.OpPatternLockResponse)
    MergeFrom(*source);
  }
}

void OpPatternLockResponse::MergeFrom(const OpPatternLockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.OpPatternLockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_patternlockbuf()->::micromsg::PatternLockBuffer::MergeFrom(from.patternlockbuf());
    }
  }
}

void OpPatternLockResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.OpPatternLockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpPatternLockResponse::CopyFrom(const OpPatternLockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.OpPatternLockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpPatternLockResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_patternlockbuf()) {
    if (!this->patternlockbuf_->IsInitialized()) return false;
  }
  return true;
}

void OpPatternLockResponse::Swap(OpPatternLockResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpPatternLockResponse::InternalSwap(OpPatternLockResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(patternlockbuf_, other->patternlockbuf_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpPatternLockResponse::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpPatternLockResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool OpPatternLockResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OpPatternLockResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void OpPatternLockResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void OpPatternLockResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& OpPatternLockResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.OpPatternLockResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* OpPatternLockResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.OpPatternLockResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* OpPatternLockResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.OpPatternLockResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void OpPatternLockResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.OpPatternLockResponse.BaseResponse)
}

// optional .micromsg.PatternLockBuffer patternlockbuf = 2;
bool OpPatternLockResponse::has_patternlockbuf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OpPatternLockResponse::set_has_patternlockbuf() {
  _has_bits_[0] |= 0x00000002u;
}
void OpPatternLockResponse::clear_has_patternlockbuf() {
  _has_bits_[0] &= ~0x00000002u;
}
void OpPatternLockResponse::clear_patternlockbuf() {
  if (patternlockbuf_ != NULL) patternlockbuf_->::micromsg::PatternLockBuffer::Clear();
  clear_has_patternlockbuf();
}
const ::micromsg::PatternLockBuffer& OpPatternLockResponse::patternlockbuf() const {
  // @@protoc_insertion_point(field_get:micromsg.OpPatternLockResponse.patternlockbuf)
  return patternlockbuf_ != NULL ? *patternlockbuf_
                         : *::micromsg::PatternLockBuffer::internal_default_instance();
}
::micromsg::PatternLockBuffer* OpPatternLockResponse::mutable_patternlockbuf() {
  set_has_patternlockbuf();
  if (patternlockbuf_ == NULL) {
    patternlockbuf_ = new ::micromsg::PatternLockBuffer;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.OpPatternLockResponse.patternlockbuf)
  return patternlockbuf_;
}
::micromsg::PatternLockBuffer* OpPatternLockResponse::release_patternlockbuf() {
  // @@protoc_insertion_point(field_release:micromsg.OpPatternLockResponse.patternlockbuf)
  clear_has_patternlockbuf();
  ::micromsg::PatternLockBuffer* temp = patternlockbuf_;
  patternlockbuf_ = NULL;
  return temp;
}
void OpPatternLockResponse::set_allocated_patternlockbuf(::micromsg::PatternLockBuffer* patternlockbuf) {
  delete patternlockbuf_;
  patternlockbuf_ = patternlockbuf;
  if (patternlockbuf) {
    set_has_patternlockbuf();
  } else {
    clear_has_patternlockbuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.OpPatternLockResponse.patternlockbuf)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WTLoginImgReqInfo::kImgSidFieldNumber;
const int WTLoginImgReqInfo::kImgCodeFieldNumber;
const int WTLoginImgReqInfo::kImgEncryptKeyFieldNumber;
const int WTLoginImgReqInfo::kKSidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WTLoginImgReqInfo::WTLoginImgReqInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.WTLoginImgReqInfo)
}
WTLoginImgReqInfo::WTLoginImgReqInfo(const WTLoginImgReqInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  imgsid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_imgsid()) {
    imgsid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imgsid_);
  }
  imgcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_imgcode()) {
    imgcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imgcode_);
  }
  imgencryptkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_imgencryptkey()) {
    imgencryptkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imgencryptkey_);
  }
  if (from.has_ksid()) {
    ksid_ = new ::micromsg::SKBuiltinBuffer_t(*from.ksid_);
  } else {
    ksid_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.WTLoginImgReqInfo)
}

void WTLoginImgReqInfo::SharedCtor() {
  _cached_size_ = 0;
  imgsid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imgcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imgencryptkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ksid_ = NULL;
}

WTLoginImgReqInfo::~WTLoginImgReqInfo() {
  // @@protoc_insertion_point(destructor:micromsg.WTLoginImgReqInfo)
  SharedDtor();
}

void WTLoginImgReqInfo::SharedDtor() {
  imgsid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imgcode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imgencryptkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete ksid_;
  }
}

void WTLoginImgReqInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WTLoginImgReqInfo::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WTLoginImgReqInfo& WTLoginImgReqInfo::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

WTLoginImgReqInfo* WTLoginImgReqInfo::New(::google::protobuf::Arena* arena) const {
  WTLoginImgReqInfo* n = new WTLoginImgReqInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WTLoginImgReqInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.WTLoginImgReqInfo)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_imgsid()) {
      GOOGLE_DCHECK(!imgsid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*imgsid_.UnsafeRawStringPointer())->clear();
    }
    if (has_imgcode()) {
      GOOGLE_DCHECK(!imgcode_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*imgcode_.UnsafeRawStringPointer())->clear();
    }
    if (has_imgencryptkey()) {
      GOOGLE_DCHECK(!imgencryptkey_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*imgencryptkey_.UnsafeRawStringPointer())->clear();
    }
    if (has_ksid()) {
      GOOGLE_DCHECK(ksid_ != NULL);
      ksid_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WTLoginImgReqInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.WTLoginImgReqInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ImgSid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imgsid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imgsid().data(), this->imgsid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.WTLoginImgReqInfo.ImgSid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ImgCode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imgcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imgcode().data(), this->imgcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.WTLoginImgReqInfo.ImgCode");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ImgEncryptKey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imgencryptkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imgencryptkey().data(), this->imgencryptkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.WTLoginImgReqInfo.ImgEncryptKey");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t KSid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ksid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.WTLoginImgReqInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.WTLoginImgReqInfo)
  return false;
#undef DO_
}

void WTLoginImgReqInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.WTLoginImgReqInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ImgSid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imgsid().data(), this->imgsid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.WTLoginImgReqInfo.ImgSid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->imgsid(), output);
  }

  // optional string ImgCode = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imgcode().data(), this->imgcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.WTLoginImgReqInfo.ImgCode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->imgcode(), output);
  }

  // optional string ImgEncryptKey = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imgencryptkey().data(), this->imgencryptkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.WTLoginImgReqInfo.ImgEncryptKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->imgencryptkey(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t KSid = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->ksid_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.WTLoginImgReqInfo)
}

::google::protobuf::uint8* WTLoginImgReqInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.WTLoginImgReqInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ImgSid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imgsid().data(), this->imgsid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.WTLoginImgReqInfo.ImgSid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->imgsid(), target);
  }

  // optional string ImgCode = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imgcode().data(), this->imgcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.WTLoginImgReqInfo.ImgCode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->imgcode(), target);
  }

  // optional string ImgEncryptKey = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imgencryptkey().data(), this->imgencryptkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.WTLoginImgReqInfo.ImgEncryptKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->imgencryptkey(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t KSid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->ksid_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.WTLoginImgReqInfo)
  return target;
}

size_t WTLoginImgReqInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.WTLoginImgReqInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.SKBuiltinBuffer_t KSid = 4;
  if (has_ksid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ksid_);
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string ImgSid = 1;
    if (has_imgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imgsid());
    }

    // optional string ImgCode = 2;
    if (has_imgcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imgcode());
    }

    // optional string ImgEncryptKey = 3;
    if (has_imgencryptkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imgencryptkey());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WTLoginImgReqInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.WTLoginImgReqInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const WTLoginImgReqInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WTLoginImgReqInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.WTLoginImgReqInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.WTLoginImgReqInfo)
    MergeFrom(*source);
  }
}

void WTLoginImgReqInfo::MergeFrom(const WTLoginImgReqInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.WTLoginImgReqInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_imgsid();
      imgsid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imgsid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_imgcode();
      imgcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imgcode_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_imgencryptkey();
      imgencryptkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imgencryptkey_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_ksid()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.ksid());
    }
  }
}

void WTLoginImgReqInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.WTLoginImgReqInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WTLoginImgReqInfo::CopyFrom(const WTLoginImgReqInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.WTLoginImgReqInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WTLoginImgReqInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  if (has_ksid()) {
    if (!this->ksid_->IsInitialized()) return false;
  }
  return true;
}

void WTLoginImgReqInfo::Swap(WTLoginImgReqInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WTLoginImgReqInfo::InternalSwap(WTLoginImgReqInfo* other) {
  imgsid_.Swap(&other->imgsid_);
  imgcode_.Swap(&other->imgcode_);
  imgencryptkey_.Swap(&other->imgencryptkey_);
  std::swap(ksid_, other->ksid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WTLoginImgReqInfo::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WTLoginImgReqInfo

// optional string ImgSid = 1;
bool WTLoginImgReqInfo::has_imgsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WTLoginImgReqInfo::set_has_imgsid() {
  _has_bits_[0] |= 0x00000001u;
}
void WTLoginImgReqInfo::clear_has_imgsid() {
  _has_bits_[0] &= ~0x00000001u;
}
void WTLoginImgReqInfo::clear_imgsid() {
  imgsid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imgsid();
}
const ::std::string& WTLoginImgReqInfo::imgsid() const {
  // @@protoc_insertion_point(field_get:micromsg.WTLoginImgReqInfo.ImgSid)
  return imgsid_.GetNoArena();
}
void WTLoginImgReqInfo::set_imgsid(const ::std::string& value) {
  set_has_imgsid();
  imgsid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.WTLoginImgReqInfo.ImgSid)
}
#if LANG_CXX11
void WTLoginImgReqInfo::set_imgsid(::std::string&& value) {
  set_has_imgsid();
  imgsid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.WTLoginImgReqInfo.ImgSid)
}
#endif
void WTLoginImgReqInfo::set_imgsid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imgsid();
  imgsid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.WTLoginImgReqInfo.ImgSid)
}
void WTLoginImgReqInfo::set_imgsid(const char* value, size_t size) {
  set_has_imgsid();
  imgsid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.WTLoginImgReqInfo.ImgSid)
}
::std::string* WTLoginImgReqInfo::mutable_imgsid() {
  set_has_imgsid();
  // @@protoc_insertion_point(field_mutable:micromsg.WTLoginImgReqInfo.ImgSid)
  return imgsid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WTLoginImgReqInfo::release_imgsid() {
  // @@protoc_insertion_point(field_release:micromsg.WTLoginImgReqInfo.ImgSid)
  clear_has_imgsid();
  return imgsid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WTLoginImgReqInfo::set_allocated_imgsid(::std::string* imgsid) {
  if (imgsid != NULL) {
    set_has_imgsid();
  } else {
    clear_has_imgsid();
  }
  imgsid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imgsid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.WTLoginImgReqInfo.ImgSid)
}

// optional string ImgCode = 2;
bool WTLoginImgReqInfo::has_imgcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WTLoginImgReqInfo::set_has_imgcode() {
  _has_bits_[0] |= 0x00000002u;
}
void WTLoginImgReqInfo::clear_has_imgcode() {
  _has_bits_[0] &= ~0x00000002u;
}
void WTLoginImgReqInfo::clear_imgcode() {
  imgcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imgcode();
}
const ::std::string& WTLoginImgReqInfo::imgcode() const {
  // @@protoc_insertion_point(field_get:micromsg.WTLoginImgReqInfo.ImgCode)
  return imgcode_.GetNoArena();
}
void WTLoginImgReqInfo::set_imgcode(const ::std::string& value) {
  set_has_imgcode();
  imgcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.WTLoginImgReqInfo.ImgCode)
}
#if LANG_CXX11
void WTLoginImgReqInfo::set_imgcode(::std::string&& value) {
  set_has_imgcode();
  imgcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.WTLoginImgReqInfo.ImgCode)
}
#endif
void WTLoginImgReqInfo::set_imgcode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imgcode();
  imgcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.WTLoginImgReqInfo.ImgCode)
}
void WTLoginImgReqInfo::set_imgcode(const char* value, size_t size) {
  set_has_imgcode();
  imgcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.WTLoginImgReqInfo.ImgCode)
}
::std::string* WTLoginImgReqInfo::mutable_imgcode() {
  set_has_imgcode();
  // @@protoc_insertion_point(field_mutable:micromsg.WTLoginImgReqInfo.ImgCode)
  return imgcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WTLoginImgReqInfo::release_imgcode() {
  // @@protoc_insertion_point(field_release:micromsg.WTLoginImgReqInfo.ImgCode)
  clear_has_imgcode();
  return imgcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WTLoginImgReqInfo::set_allocated_imgcode(::std::string* imgcode) {
  if (imgcode != NULL) {
    set_has_imgcode();
  } else {
    clear_has_imgcode();
  }
  imgcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imgcode);
  // @@protoc_insertion_point(field_set_allocated:micromsg.WTLoginImgReqInfo.ImgCode)
}

// optional string ImgEncryptKey = 3;
bool WTLoginImgReqInfo::has_imgencryptkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void WTLoginImgReqInfo::set_has_imgencryptkey() {
  _has_bits_[0] |= 0x00000004u;
}
void WTLoginImgReqInfo::clear_has_imgencryptkey() {
  _has_bits_[0] &= ~0x00000004u;
}
void WTLoginImgReqInfo::clear_imgencryptkey() {
  imgencryptkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imgencryptkey();
}
const ::std::string& WTLoginImgReqInfo::imgencryptkey() const {
  // @@protoc_insertion_point(field_get:micromsg.WTLoginImgReqInfo.ImgEncryptKey)
  return imgencryptkey_.GetNoArena();
}
void WTLoginImgReqInfo::set_imgencryptkey(const ::std::string& value) {
  set_has_imgencryptkey();
  imgencryptkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.WTLoginImgReqInfo.ImgEncryptKey)
}
#if LANG_CXX11
void WTLoginImgReqInfo::set_imgencryptkey(::std::string&& value) {
  set_has_imgencryptkey();
  imgencryptkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.WTLoginImgReqInfo.ImgEncryptKey)
}
#endif
void WTLoginImgReqInfo::set_imgencryptkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imgencryptkey();
  imgencryptkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.WTLoginImgReqInfo.ImgEncryptKey)
}
void WTLoginImgReqInfo::set_imgencryptkey(const char* value, size_t size) {
  set_has_imgencryptkey();
  imgencryptkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.WTLoginImgReqInfo.ImgEncryptKey)
}
::std::string* WTLoginImgReqInfo::mutable_imgencryptkey() {
  set_has_imgencryptkey();
  // @@protoc_insertion_point(field_mutable:micromsg.WTLoginImgReqInfo.ImgEncryptKey)
  return imgencryptkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WTLoginImgReqInfo::release_imgencryptkey() {
  // @@protoc_insertion_point(field_release:micromsg.WTLoginImgReqInfo.ImgEncryptKey)
  clear_has_imgencryptkey();
  return imgencryptkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WTLoginImgReqInfo::set_allocated_imgencryptkey(::std::string* imgencryptkey) {
  if (imgencryptkey != NULL) {
    set_has_imgencryptkey();
  } else {
    clear_has_imgencryptkey();
  }
  imgencryptkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imgencryptkey);
  // @@protoc_insertion_point(field_set_allocated:micromsg.WTLoginImgReqInfo.ImgEncryptKey)
}

// required .micromsg.SKBuiltinBuffer_t KSid = 4;
bool WTLoginImgReqInfo::has_ksid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void WTLoginImgReqInfo::set_has_ksid() {
  _has_bits_[0] |= 0x00000008u;
}
void WTLoginImgReqInfo::clear_has_ksid() {
  _has_bits_[0] &= ~0x00000008u;
}
void WTLoginImgReqInfo::clear_ksid() {
  if (ksid_ != NULL) ksid_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_ksid();
}
const ::micromsg::SKBuiltinBuffer_t& WTLoginImgReqInfo::ksid() const {
  // @@protoc_insertion_point(field_get:micromsg.WTLoginImgReqInfo.KSid)
  return ksid_ != NULL ? *ksid_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* WTLoginImgReqInfo::mutable_ksid() {
  set_has_ksid();
  if (ksid_ == NULL) {
    ksid_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.WTLoginImgReqInfo.KSid)
  return ksid_;
}
::micromsg::SKBuiltinBuffer_t* WTLoginImgReqInfo::release_ksid() {
  // @@protoc_insertion_point(field_release:micromsg.WTLoginImgReqInfo.KSid)
  clear_has_ksid();
  ::micromsg::SKBuiltinBuffer_t* temp = ksid_;
  ksid_ = NULL;
  return temp;
}
void WTLoginImgReqInfo::set_allocated_ksid(::micromsg::SKBuiltinBuffer_t* ksid) {
  delete ksid_;
  ksid_ = ksid;
  if (ksid) {
    set_has_ksid();
  } else {
    clear_has_ksid();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.WTLoginImgReqInfo.KSid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WTLoginImgRespInfo::kImgEncryptKeyFieldNumber;
const int WTLoginImgRespInfo::kKSidFieldNumber;
const int WTLoginImgRespInfo::kImgSidFieldNumber;
const int WTLoginImgRespInfo::kImgBufFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WTLoginImgRespInfo::WTLoginImgRespInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.WTLoginImgRespInfo)
}
WTLoginImgRespInfo::WTLoginImgRespInfo(const WTLoginImgRespInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  imgencryptkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_imgencryptkey()) {
    imgencryptkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imgencryptkey_);
  }
  imgsid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_imgsid()) {
    imgsid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imgsid_);
  }
  if (from.has_ksid()) {
    ksid_ = new ::micromsg::SKBuiltinBuffer_t(*from.ksid_);
  } else {
    ksid_ = NULL;
  }
  if (from.has_imgbuf()) {
    imgbuf_ = new ::micromsg::SKBuiltinBuffer_t(*from.imgbuf_);
  } else {
    imgbuf_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.WTLoginImgRespInfo)
}

void WTLoginImgRespInfo::SharedCtor() {
  _cached_size_ = 0;
  imgencryptkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imgsid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ksid_, 0, reinterpret_cast<char*>(&imgbuf_) -
    reinterpret_cast<char*>(&ksid_) + sizeof(imgbuf_));
}

WTLoginImgRespInfo::~WTLoginImgRespInfo() {
  // @@protoc_insertion_point(destructor:micromsg.WTLoginImgRespInfo)
  SharedDtor();
}

void WTLoginImgRespInfo::SharedDtor() {
  imgencryptkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imgsid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete ksid_;
  }
  if (this != internal_default_instance()) {
    delete imgbuf_;
  }
}

void WTLoginImgRespInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WTLoginImgRespInfo::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WTLoginImgRespInfo& WTLoginImgRespInfo::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

WTLoginImgRespInfo* WTLoginImgRespInfo::New(::google::protobuf::Arena* arena) const {
  WTLoginImgRespInfo* n = new WTLoginImgRespInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WTLoginImgRespInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.WTLoginImgRespInfo)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_imgencryptkey()) {
      GOOGLE_DCHECK(!imgencryptkey_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*imgencryptkey_.UnsafeRawStringPointer())->clear();
    }
    if (has_imgsid()) {
      GOOGLE_DCHECK(!imgsid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*imgsid_.UnsafeRawStringPointer())->clear();
    }
    if (has_ksid()) {
      GOOGLE_DCHECK(ksid_ != NULL);
      ksid_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_imgbuf()) {
      GOOGLE_DCHECK(imgbuf_ != NULL);
      imgbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WTLoginImgRespInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.WTLoginImgRespInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ImgEncryptKey = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imgencryptkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imgencryptkey().data(), this->imgencryptkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.WTLoginImgRespInfo.ImgEncryptKey");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t KSid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ksid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ImgSid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imgsid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imgsid().data(), this->imgsid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.WTLoginImgRespInfo.ImgSid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t ImgBuf = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imgbuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.WTLoginImgRespInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.WTLoginImgRespInfo)
  return false;
#undef DO_
}

void WTLoginImgRespInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.WTLoginImgRespInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ImgEncryptKey = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imgencryptkey().data(), this->imgencryptkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.WTLoginImgRespInfo.ImgEncryptKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->imgencryptkey(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t KSid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->ksid_, output);
  }

  // optional string ImgSid = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imgsid().data(), this->imgsid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.WTLoginImgRespInfo.ImgSid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->imgsid(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t ImgBuf = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->imgbuf_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.WTLoginImgRespInfo)
}

::google::protobuf::uint8* WTLoginImgRespInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.WTLoginImgRespInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ImgEncryptKey = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imgencryptkey().data(), this->imgencryptkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.WTLoginImgRespInfo.ImgEncryptKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->imgencryptkey(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t KSid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->ksid_, deterministic, target);
  }

  // optional string ImgSid = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imgsid().data(), this->imgsid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.WTLoginImgRespInfo.ImgSid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->imgsid(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t ImgBuf = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->imgbuf_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.WTLoginImgRespInfo)
  return target;
}

size_t WTLoginImgRespInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.WTLoginImgRespInfo)
  size_t total_size = 0;

  if (has_ksid()) {
    // required .micromsg.SKBuiltinBuffer_t KSid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ksid_);
  }

  if (has_imgbuf()) {
    // required .micromsg.SKBuiltinBuffer_t ImgBuf = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imgbuf_);
  }

  return total_size;
}
size_t WTLoginImgRespInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.WTLoginImgRespInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required .micromsg.SKBuiltinBuffer_t KSid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ksid_);

    // required .micromsg.SKBuiltinBuffer_t ImgBuf = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imgbuf_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string ImgEncryptKey = 1;
    if (has_imgencryptkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imgencryptkey());
    }

    // optional string ImgSid = 3;
    if (has_imgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imgsid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WTLoginImgRespInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.WTLoginImgRespInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const WTLoginImgRespInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WTLoginImgRespInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.WTLoginImgRespInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.WTLoginImgRespInfo)
    MergeFrom(*source);
  }
}

void WTLoginImgRespInfo::MergeFrom(const WTLoginImgRespInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.WTLoginImgRespInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_imgencryptkey();
      imgencryptkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imgencryptkey_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_imgsid();
      imgsid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imgsid_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_ksid()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.ksid());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_imgbuf()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.imgbuf());
    }
  }
}

void WTLoginImgRespInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.WTLoginImgRespInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WTLoginImgRespInfo::CopyFrom(const WTLoginImgRespInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.WTLoginImgRespInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WTLoginImgRespInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;
  if (has_ksid()) {
    if (!this->ksid_->IsInitialized()) return false;
  }
  if (has_imgbuf()) {
    if (!this->imgbuf_->IsInitialized()) return false;
  }
  return true;
}

void WTLoginImgRespInfo::Swap(WTLoginImgRespInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WTLoginImgRespInfo::InternalSwap(WTLoginImgRespInfo* other) {
  imgencryptkey_.Swap(&other->imgencryptkey_);
  imgsid_.Swap(&other->imgsid_);
  std::swap(ksid_, other->ksid_);
  std::swap(imgbuf_, other->imgbuf_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WTLoginImgRespInfo::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WTLoginImgRespInfo

// optional string ImgEncryptKey = 1;
bool WTLoginImgRespInfo::has_imgencryptkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WTLoginImgRespInfo::set_has_imgencryptkey() {
  _has_bits_[0] |= 0x00000001u;
}
void WTLoginImgRespInfo::clear_has_imgencryptkey() {
  _has_bits_[0] &= ~0x00000001u;
}
void WTLoginImgRespInfo::clear_imgencryptkey() {
  imgencryptkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imgencryptkey();
}
const ::std::string& WTLoginImgRespInfo::imgencryptkey() const {
  // @@protoc_insertion_point(field_get:micromsg.WTLoginImgRespInfo.ImgEncryptKey)
  return imgencryptkey_.GetNoArena();
}
void WTLoginImgRespInfo::set_imgencryptkey(const ::std::string& value) {
  set_has_imgencryptkey();
  imgencryptkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.WTLoginImgRespInfo.ImgEncryptKey)
}
#if LANG_CXX11
void WTLoginImgRespInfo::set_imgencryptkey(::std::string&& value) {
  set_has_imgencryptkey();
  imgencryptkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.WTLoginImgRespInfo.ImgEncryptKey)
}
#endif
void WTLoginImgRespInfo::set_imgencryptkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imgencryptkey();
  imgencryptkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.WTLoginImgRespInfo.ImgEncryptKey)
}
void WTLoginImgRespInfo::set_imgencryptkey(const char* value, size_t size) {
  set_has_imgencryptkey();
  imgencryptkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.WTLoginImgRespInfo.ImgEncryptKey)
}
::std::string* WTLoginImgRespInfo::mutable_imgencryptkey() {
  set_has_imgencryptkey();
  // @@protoc_insertion_point(field_mutable:micromsg.WTLoginImgRespInfo.ImgEncryptKey)
  return imgencryptkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WTLoginImgRespInfo::release_imgencryptkey() {
  // @@protoc_insertion_point(field_release:micromsg.WTLoginImgRespInfo.ImgEncryptKey)
  clear_has_imgencryptkey();
  return imgencryptkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WTLoginImgRespInfo::set_allocated_imgencryptkey(::std::string* imgencryptkey) {
  if (imgencryptkey != NULL) {
    set_has_imgencryptkey();
  } else {
    clear_has_imgencryptkey();
  }
  imgencryptkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imgencryptkey);
  // @@protoc_insertion_point(field_set_allocated:micromsg.WTLoginImgRespInfo.ImgEncryptKey)
}

// required .micromsg.SKBuiltinBuffer_t KSid = 2;
bool WTLoginImgRespInfo::has_ksid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void WTLoginImgRespInfo::set_has_ksid() {
  _has_bits_[0] |= 0x00000004u;
}
void WTLoginImgRespInfo::clear_has_ksid() {
  _has_bits_[0] &= ~0x00000004u;
}
void WTLoginImgRespInfo::clear_ksid() {
  if (ksid_ != NULL) ksid_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_ksid();
}
const ::micromsg::SKBuiltinBuffer_t& WTLoginImgRespInfo::ksid() const {
  // @@protoc_insertion_point(field_get:micromsg.WTLoginImgRespInfo.KSid)
  return ksid_ != NULL ? *ksid_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* WTLoginImgRespInfo::mutable_ksid() {
  set_has_ksid();
  if (ksid_ == NULL) {
    ksid_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.WTLoginImgRespInfo.KSid)
  return ksid_;
}
::micromsg::SKBuiltinBuffer_t* WTLoginImgRespInfo::release_ksid() {
  // @@protoc_insertion_point(field_release:micromsg.WTLoginImgRespInfo.KSid)
  clear_has_ksid();
  ::micromsg::SKBuiltinBuffer_t* temp = ksid_;
  ksid_ = NULL;
  return temp;
}
void WTLoginImgRespInfo::set_allocated_ksid(::micromsg::SKBuiltinBuffer_t* ksid) {
  delete ksid_;
  ksid_ = ksid;
  if (ksid) {
    set_has_ksid();
  } else {
    clear_has_ksid();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.WTLoginImgRespInfo.KSid)
}

// optional string ImgSid = 3;
bool WTLoginImgRespInfo::has_imgsid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WTLoginImgRespInfo::set_has_imgsid() {
  _has_bits_[0] |= 0x00000002u;
}
void WTLoginImgRespInfo::clear_has_imgsid() {
  _has_bits_[0] &= ~0x00000002u;
}
void WTLoginImgRespInfo::clear_imgsid() {
  imgsid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imgsid();
}
const ::std::string& WTLoginImgRespInfo::imgsid() const {
  // @@protoc_insertion_point(field_get:micromsg.WTLoginImgRespInfo.ImgSid)
  return imgsid_.GetNoArena();
}
void WTLoginImgRespInfo::set_imgsid(const ::std::string& value) {
  set_has_imgsid();
  imgsid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.WTLoginImgRespInfo.ImgSid)
}
#if LANG_CXX11
void WTLoginImgRespInfo::set_imgsid(::std::string&& value) {
  set_has_imgsid();
  imgsid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.WTLoginImgRespInfo.ImgSid)
}
#endif
void WTLoginImgRespInfo::set_imgsid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imgsid();
  imgsid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.WTLoginImgRespInfo.ImgSid)
}
void WTLoginImgRespInfo::set_imgsid(const char* value, size_t size) {
  set_has_imgsid();
  imgsid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.WTLoginImgRespInfo.ImgSid)
}
::std::string* WTLoginImgRespInfo::mutable_imgsid() {
  set_has_imgsid();
  // @@protoc_insertion_point(field_mutable:micromsg.WTLoginImgRespInfo.ImgSid)
  return imgsid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WTLoginImgRespInfo::release_imgsid() {
  // @@protoc_insertion_point(field_release:micromsg.WTLoginImgRespInfo.ImgSid)
  clear_has_imgsid();
  return imgsid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WTLoginImgRespInfo::set_allocated_imgsid(::std::string* imgsid) {
  if (imgsid != NULL) {
    set_has_imgsid();
  } else {
    clear_has_imgsid();
  }
  imgsid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imgsid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.WTLoginImgRespInfo.ImgSid)
}

// required .micromsg.SKBuiltinBuffer_t ImgBuf = 4;
bool WTLoginImgRespInfo::has_imgbuf() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void WTLoginImgRespInfo::set_has_imgbuf() {
  _has_bits_[0] |= 0x00000008u;
}
void WTLoginImgRespInfo::clear_has_imgbuf() {
  _has_bits_[0] &= ~0x00000008u;
}
void WTLoginImgRespInfo::clear_imgbuf() {
  if (imgbuf_ != NULL) imgbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_imgbuf();
}
const ::micromsg::SKBuiltinBuffer_t& WTLoginImgRespInfo::imgbuf() const {
  // @@protoc_insertion_point(field_get:micromsg.WTLoginImgRespInfo.ImgBuf)
  return imgbuf_ != NULL ? *imgbuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* WTLoginImgRespInfo::mutable_imgbuf() {
  set_has_imgbuf();
  if (imgbuf_ == NULL) {
    imgbuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.WTLoginImgRespInfo.ImgBuf)
  return imgbuf_;
}
::micromsg::SKBuiltinBuffer_t* WTLoginImgRespInfo::release_imgbuf() {
  // @@protoc_insertion_point(field_release:micromsg.WTLoginImgRespInfo.ImgBuf)
  clear_has_imgbuf();
  ::micromsg::SKBuiltinBuffer_t* temp = imgbuf_;
  imgbuf_ = NULL;
  return temp;
}
void WTLoginImgRespInfo::set_allocated_imgbuf(::micromsg::SKBuiltinBuffer_t* imgbuf) {
  delete imgbuf_;
  imgbuf_ = imgbuf;
  if (imgbuf) {
    set_has_imgbuf();
  } else {
    clear_has_imgbuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.WTLoginImgRespInfo.ImgBuf)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WxVerifyCodeReqInfo::kVerifySignatureFieldNumber;
const int WxVerifyCodeReqInfo::kVerifyContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WxVerifyCodeReqInfo::WxVerifyCodeReqInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.WxVerifyCodeReqInfo)
}
WxVerifyCodeReqInfo::WxVerifyCodeReqInfo(const WxVerifyCodeReqInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  verifysignature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_verifysignature()) {
    verifysignature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifysignature_);
  }
  verifycontent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_verifycontent()) {
    verifycontent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifycontent_);
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.WxVerifyCodeReqInfo)
}

void WxVerifyCodeReqInfo::SharedCtor() {
  _cached_size_ = 0;
  verifysignature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifycontent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

WxVerifyCodeReqInfo::~WxVerifyCodeReqInfo() {
  // @@protoc_insertion_point(destructor:micromsg.WxVerifyCodeReqInfo)
  SharedDtor();
}

void WxVerifyCodeReqInfo::SharedDtor() {
  verifysignature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifycontent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WxVerifyCodeReqInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WxVerifyCodeReqInfo::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WxVerifyCodeReqInfo& WxVerifyCodeReqInfo::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

WxVerifyCodeReqInfo* WxVerifyCodeReqInfo::New(::google::protobuf::Arena* arena) const {
  WxVerifyCodeReqInfo* n = new WxVerifyCodeReqInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WxVerifyCodeReqInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.WxVerifyCodeReqInfo)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_verifysignature()) {
      GOOGLE_DCHECK(!verifysignature_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*verifysignature_.UnsafeRawStringPointer())->clear();
    }
    if (has_verifycontent()) {
      GOOGLE_DCHECK(!verifycontent_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*verifycontent_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WxVerifyCodeReqInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.WxVerifyCodeReqInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string VerifySignature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verifysignature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->verifysignature().data(), this->verifysignature().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.WxVerifyCodeReqInfo.VerifySignature");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string VerifyContent = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verifycontent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->verifycontent().data(), this->verifycontent().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.WxVerifyCodeReqInfo.VerifyContent");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.WxVerifyCodeReqInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.WxVerifyCodeReqInfo)
  return false;
#undef DO_
}

void WxVerifyCodeReqInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.WxVerifyCodeReqInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string VerifySignature = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verifysignature().data(), this->verifysignature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.WxVerifyCodeReqInfo.VerifySignature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->verifysignature(), output);
  }

  // optional string VerifyContent = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verifycontent().data(), this->verifycontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.WxVerifyCodeReqInfo.VerifyContent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->verifycontent(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.WxVerifyCodeReqInfo)
}

::google::protobuf::uint8* WxVerifyCodeReqInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.WxVerifyCodeReqInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string VerifySignature = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verifysignature().data(), this->verifysignature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.WxVerifyCodeReqInfo.VerifySignature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->verifysignature(), target);
  }

  // optional string VerifyContent = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verifycontent().data(), this->verifycontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.WxVerifyCodeReqInfo.VerifyContent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->verifycontent(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.WxVerifyCodeReqInfo)
  return target;
}

size_t WxVerifyCodeReqInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.WxVerifyCodeReqInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string VerifySignature = 1;
    if (has_verifysignature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verifysignature());
    }

    // optional string VerifyContent = 2;
    if (has_verifycontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verifycontent());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WxVerifyCodeReqInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.WxVerifyCodeReqInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const WxVerifyCodeReqInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WxVerifyCodeReqInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.WxVerifyCodeReqInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.WxVerifyCodeReqInfo)
    MergeFrom(*source);
  }
}

void WxVerifyCodeReqInfo::MergeFrom(const WxVerifyCodeReqInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.WxVerifyCodeReqInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_verifysignature();
      verifysignature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifysignature_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_verifycontent();
      verifycontent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifycontent_);
    }
  }
}

void WxVerifyCodeReqInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.WxVerifyCodeReqInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WxVerifyCodeReqInfo::CopyFrom(const WxVerifyCodeReqInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.WxVerifyCodeReqInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WxVerifyCodeReqInfo::IsInitialized() const {
  return true;
}

void WxVerifyCodeReqInfo::Swap(WxVerifyCodeReqInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WxVerifyCodeReqInfo::InternalSwap(WxVerifyCodeReqInfo* other) {
  verifysignature_.Swap(&other->verifysignature_);
  verifycontent_.Swap(&other->verifycontent_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WxVerifyCodeReqInfo::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WxVerifyCodeReqInfo

// optional string VerifySignature = 1;
bool WxVerifyCodeReqInfo::has_verifysignature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WxVerifyCodeReqInfo::set_has_verifysignature() {
  _has_bits_[0] |= 0x00000001u;
}
void WxVerifyCodeReqInfo::clear_has_verifysignature() {
  _has_bits_[0] &= ~0x00000001u;
}
void WxVerifyCodeReqInfo::clear_verifysignature() {
  verifysignature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verifysignature();
}
const ::std::string& WxVerifyCodeReqInfo::verifysignature() const {
  // @@protoc_insertion_point(field_get:micromsg.WxVerifyCodeReqInfo.VerifySignature)
  return verifysignature_.GetNoArena();
}
void WxVerifyCodeReqInfo::set_verifysignature(const ::std::string& value) {
  set_has_verifysignature();
  verifysignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.WxVerifyCodeReqInfo.VerifySignature)
}
#if LANG_CXX11
void WxVerifyCodeReqInfo::set_verifysignature(::std::string&& value) {
  set_has_verifysignature();
  verifysignature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.WxVerifyCodeReqInfo.VerifySignature)
}
#endif
void WxVerifyCodeReqInfo::set_verifysignature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verifysignature();
  verifysignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.WxVerifyCodeReqInfo.VerifySignature)
}
void WxVerifyCodeReqInfo::set_verifysignature(const char* value, size_t size) {
  set_has_verifysignature();
  verifysignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.WxVerifyCodeReqInfo.VerifySignature)
}
::std::string* WxVerifyCodeReqInfo::mutable_verifysignature() {
  set_has_verifysignature();
  // @@protoc_insertion_point(field_mutable:micromsg.WxVerifyCodeReqInfo.VerifySignature)
  return verifysignature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WxVerifyCodeReqInfo::release_verifysignature() {
  // @@protoc_insertion_point(field_release:micromsg.WxVerifyCodeReqInfo.VerifySignature)
  clear_has_verifysignature();
  return verifysignature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WxVerifyCodeReqInfo::set_allocated_verifysignature(::std::string* verifysignature) {
  if (verifysignature != NULL) {
    set_has_verifysignature();
  } else {
    clear_has_verifysignature();
  }
  verifysignature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifysignature);
  // @@protoc_insertion_point(field_set_allocated:micromsg.WxVerifyCodeReqInfo.VerifySignature)
}

// optional string VerifyContent = 2;
bool WxVerifyCodeReqInfo::has_verifycontent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WxVerifyCodeReqInfo::set_has_verifycontent() {
  _has_bits_[0] |= 0x00000002u;
}
void WxVerifyCodeReqInfo::clear_has_verifycontent() {
  _has_bits_[0] &= ~0x00000002u;
}
void WxVerifyCodeReqInfo::clear_verifycontent() {
  verifycontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verifycontent();
}
const ::std::string& WxVerifyCodeReqInfo::verifycontent() const {
  // @@protoc_insertion_point(field_get:micromsg.WxVerifyCodeReqInfo.VerifyContent)
  return verifycontent_.GetNoArena();
}
void WxVerifyCodeReqInfo::set_verifycontent(const ::std::string& value) {
  set_has_verifycontent();
  verifycontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.WxVerifyCodeReqInfo.VerifyContent)
}
#if LANG_CXX11
void WxVerifyCodeReqInfo::set_verifycontent(::std::string&& value) {
  set_has_verifycontent();
  verifycontent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.WxVerifyCodeReqInfo.VerifyContent)
}
#endif
void WxVerifyCodeReqInfo::set_verifycontent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verifycontent();
  verifycontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.WxVerifyCodeReqInfo.VerifyContent)
}
void WxVerifyCodeReqInfo::set_verifycontent(const char* value, size_t size) {
  set_has_verifycontent();
  verifycontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.WxVerifyCodeReqInfo.VerifyContent)
}
::std::string* WxVerifyCodeReqInfo::mutable_verifycontent() {
  set_has_verifycontent();
  // @@protoc_insertion_point(field_mutable:micromsg.WxVerifyCodeReqInfo.VerifyContent)
  return verifycontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WxVerifyCodeReqInfo::release_verifycontent() {
  // @@protoc_insertion_point(field_release:micromsg.WxVerifyCodeReqInfo.VerifyContent)
  clear_has_verifycontent();
  return verifycontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WxVerifyCodeReqInfo::set_allocated_verifycontent(::std::string* verifycontent) {
  if (verifycontent != NULL) {
    set_has_verifycontent();
  } else {
    clear_has_verifycontent();
  }
  verifycontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifycontent);
  // @@protoc_insertion_point(field_set_allocated:micromsg.WxVerifyCodeReqInfo.VerifyContent)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WxVerifyCodeRespInfo::kVerifySignatureFieldNumber;
const int WxVerifyCodeRespInfo::kVerifyBuffFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WxVerifyCodeRespInfo::WxVerifyCodeRespInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.WxVerifyCodeRespInfo)
}
WxVerifyCodeRespInfo::WxVerifyCodeRespInfo(const WxVerifyCodeRespInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  verifysignature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_verifysignature()) {
    verifysignature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifysignature_);
  }
  if (from.has_verifybuff()) {
    verifybuff_ = new ::micromsg::SKBuiltinBuffer_t(*from.verifybuff_);
  } else {
    verifybuff_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.WxVerifyCodeRespInfo)
}

void WxVerifyCodeRespInfo::SharedCtor() {
  _cached_size_ = 0;
  verifysignature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifybuff_ = NULL;
}

WxVerifyCodeRespInfo::~WxVerifyCodeRespInfo() {
  // @@protoc_insertion_point(destructor:micromsg.WxVerifyCodeRespInfo)
  SharedDtor();
}

void WxVerifyCodeRespInfo::SharedDtor() {
  verifysignature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete verifybuff_;
  }
}

void WxVerifyCodeRespInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WxVerifyCodeRespInfo::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WxVerifyCodeRespInfo& WxVerifyCodeRespInfo::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

WxVerifyCodeRespInfo* WxVerifyCodeRespInfo::New(::google::protobuf::Arena* arena) const {
  WxVerifyCodeRespInfo* n = new WxVerifyCodeRespInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WxVerifyCodeRespInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.WxVerifyCodeRespInfo)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_verifysignature()) {
      GOOGLE_DCHECK(!verifysignature_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*verifysignature_.UnsafeRawStringPointer())->clear();
    }
    if (has_verifybuff()) {
      GOOGLE_DCHECK(verifybuff_ != NULL);
      verifybuff_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WxVerifyCodeRespInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.WxVerifyCodeRespInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string VerifySignature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verifysignature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->verifysignature().data(), this->verifysignature().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.WxVerifyCodeRespInfo.VerifySignature");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t VerifyBuff = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_verifybuff()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.WxVerifyCodeRespInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.WxVerifyCodeRespInfo)
  return false;
#undef DO_
}

void WxVerifyCodeRespInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.WxVerifyCodeRespInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string VerifySignature = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verifysignature().data(), this->verifysignature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.WxVerifyCodeRespInfo.VerifySignature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->verifysignature(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t VerifyBuff = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->verifybuff_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.WxVerifyCodeRespInfo)
}

::google::protobuf::uint8* WxVerifyCodeRespInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.WxVerifyCodeRespInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string VerifySignature = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verifysignature().data(), this->verifysignature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.WxVerifyCodeRespInfo.VerifySignature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->verifysignature(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t VerifyBuff = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->verifybuff_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.WxVerifyCodeRespInfo)
  return target;
}

size_t WxVerifyCodeRespInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.WxVerifyCodeRespInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.SKBuiltinBuffer_t VerifyBuff = 2;
  if (has_verifybuff()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->verifybuff_);
  }
  // optional string VerifySignature = 1;
  if (has_verifysignature()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->verifysignature());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WxVerifyCodeRespInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.WxVerifyCodeRespInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const WxVerifyCodeRespInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WxVerifyCodeRespInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.WxVerifyCodeRespInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.WxVerifyCodeRespInfo)
    MergeFrom(*source);
  }
}

void WxVerifyCodeRespInfo::MergeFrom(const WxVerifyCodeRespInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.WxVerifyCodeRespInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_verifysignature();
      verifysignature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifysignature_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_verifybuff()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.verifybuff());
    }
  }
}

void WxVerifyCodeRespInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.WxVerifyCodeRespInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WxVerifyCodeRespInfo::CopyFrom(const WxVerifyCodeRespInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.WxVerifyCodeRespInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WxVerifyCodeRespInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_verifybuff()) {
    if (!this->verifybuff_->IsInitialized()) return false;
  }
  return true;
}

void WxVerifyCodeRespInfo::Swap(WxVerifyCodeRespInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WxVerifyCodeRespInfo::InternalSwap(WxVerifyCodeRespInfo* other) {
  verifysignature_.Swap(&other->verifysignature_);
  std::swap(verifybuff_, other->verifybuff_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WxVerifyCodeRespInfo::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WxVerifyCodeRespInfo

// optional string VerifySignature = 1;
bool WxVerifyCodeRespInfo::has_verifysignature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WxVerifyCodeRespInfo::set_has_verifysignature() {
  _has_bits_[0] |= 0x00000001u;
}
void WxVerifyCodeRespInfo::clear_has_verifysignature() {
  _has_bits_[0] &= ~0x00000001u;
}
void WxVerifyCodeRespInfo::clear_verifysignature() {
  verifysignature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verifysignature();
}
const ::std::string& WxVerifyCodeRespInfo::verifysignature() const {
  // @@protoc_insertion_point(field_get:micromsg.WxVerifyCodeRespInfo.VerifySignature)
  return verifysignature_.GetNoArena();
}
void WxVerifyCodeRespInfo::set_verifysignature(const ::std::string& value) {
  set_has_verifysignature();
  verifysignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.WxVerifyCodeRespInfo.VerifySignature)
}
#if LANG_CXX11
void WxVerifyCodeRespInfo::set_verifysignature(::std::string&& value) {
  set_has_verifysignature();
  verifysignature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.WxVerifyCodeRespInfo.VerifySignature)
}
#endif
void WxVerifyCodeRespInfo::set_verifysignature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verifysignature();
  verifysignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.WxVerifyCodeRespInfo.VerifySignature)
}
void WxVerifyCodeRespInfo::set_verifysignature(const char* value, size_t size) {
  set_has_verifysignature();
  verifysignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.WxVerifyCodeRespInfo.VerifySignature)
}
::std::string* WxVerifyCodeRespInfo::mutable_verifysignature() {
  set_has_verifysignature();
  // @@protoc_insertion_point(field_mutable:micromsg.WxVerifyCodeRespInfo.VerifySignature)
  return verifysignature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WxVerifyCodeRespInfo::release_verifysignature() {
  // @@protoc_insertion_point(field_release:micromsg.WxVerifyCodeRespInfo.VerifySignature)
  clear_has_verifysignature();
  return verifysignature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WxVerifyCodeRespInfo::set_allocated_verifysignature(::std::string* verifysignature) {
  if (verifysignature != NULL) {
    set_has_verifysignature();
  } else {
    clear_has_verifysignature();
  }
  verifysignature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifysignature);
  // @@protoc_insertion_point(field_set_allocated:micromsg.WxVerifyCodeRespInfo.VerifySignature)
}

// required .micromsg.SKBuiltinBuffer_t VerifyBuff = 2;
bool WxVerifyCodeRespInfo::has_verifybuff() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WxVerifyCodeRespInfo::set_has_verifybuff() {
  _has_bits_[0] |= 0x00000002u;
}
void WxVerifyCodeRespInfo::clear_has_verifybuff() {
  _has_bits_[0] &= ~0x00000002u;
}
void WxVerifyCodeRespInfo::clear_verifybuff() {
  if (verifybuff_ != NULL) verifybuff_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_verifybuff();
}
const ::micromsg::SKBuiltinBuffer_t& WxVerifyCodeRespInfo::verifybuff() const {
  // @@protoc_insertion_point(field_get:micromsg.WxVerifyCodeRespInfo.VerifyBuff)
  return verifybuff_ != NULL ? *verifybuff_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* WxVerifyCodeRespInfo::mutable_verifybuff() {
  set_has_verifybuff();
  if (verifybuff_ == NULL) {
    verifybuff_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.WxVerifyCodeRespInfo.VerifyBuff)
  return verifybuff_;
}
::micromsg::SKBuiltinBuffer_t* WxVerifyCodeRespInfo::release_verifybuff() {
  // @@protoc_insertion_point(field_release:micromsg.WxVerifyCodeRespInfo.VerifyBuff)
  clear_has_verifybuff();
  ::micromsg::SKBuiltinBuffer_t* temp = verifybuff_;
  verifybuff_ = NULL;
  return temp;
}
void WxVerifyCodeRespInfo::set_allocated_verifybuff(::micromsg::SKBuiltinBuffer_t* verifybuff) {
  delete verifybuff_;
  verifybuff_ = verifybuff;
  if (verifybuff) {
    set_has_verifybuff();
  } else {
    clear_has_verifybuff();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.WxVerifyCodeRespInfo.VerifyBuff)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BaseAuthReqInfo::kWTLoginReqBuffFieldNumber;
const int BaseAuthReqInfo::kWTLoginImgReqInfoFieldNumber;
const int BaseAuthReqInfo::kWxVerifyCodeReqInfoFieldNumber;
const int BaseAuthReqInfo::kCliDBEncryptKeyFieldNumber;
const int BaseAuthReqInfo::kCliDBEncryptInfoFieldNumber;
const int BaseAuthReqInfo::kAuthReqFlagFieldNumber;
const int BaseAuthReqInfo::kAuthTicketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BaseAuthReqInfo::BaseAuthReqInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BaseAuthReqInfo)
}
BaseAuthReqInfo::BaseAuthReqInfo(const BaseAuthReqInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  authticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_authticket()) {
    authticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authticket_);
  }
  if (from.has_wtloginreqbuff()) {
    wtloginreqbuff_ = new ::micromsg::SKBuiltinBuffer_t(*from.wtloginreqbuff_);
  } else {
    wtloginreqbuff_ = NULL;
  }
  if (from.has_wtloginimgreqinfo()) {
    wtloginimgreqinfo_ = new ::micromsg::WTLoginImgReqInfo(*from.wtloginimgreqinfo_);
  } else {
    wtloginimgreqinfo_ = NULL;
  }
  if (from.has_wxverifycodereqinfo()) {
    wxverifycodereqinfo_ = new ::micromsg::WxVerifyCodeReqInfo(*from.wxverifycodereqinfo_);
  } else {
    wxverifycodereqinfo_ = NULL;
  }
  if (from.has_clidbencryptkey()) {
    clidbencryptkey_ = new ::micromsg::SKBuiltinBuffer_t(*from.clidbencryptkey_);
  } else {
    clidbencryptkey_ = NULL;
  }
  if (from.has_clidbencryptinfo()) {
    clidbencryptinfo_ = new ::micromsg::SKBuiltinBuffer_t(*from.clidbencryptinfo_);
  } else {
    clidbencryptinfo_ = NULL;
  }
  authreqflag_ = from.authreqflag_;
  // @@protoc_insertion_point(copy_constructor:micromsg.BaseAuthReqInfo)
}

void BaseAuthReqInfo::SharedCtor() {
  _cached_size_ = 0;
  authticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&wtloginreqbuff_, 0, reinterpret_cast<char*>(&authreqflag_) -
    reinterpret_cast<char*>(&wtloginreqbuff_) + sizeof(authreqflag_));
}

BaseAuthReqInfo::~BaseAuthReqInfo() {
  // @@protoc_insertion_point(destructor:micromsg.BaseAuthReqInfo)
  SharedDtor();
}

void BaseAuthReqInfo::SharedDtor() {
  authticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete wtloginreqbuff_;
  }
  if (this != internal_default_instance()) {
    delete wtloginimgreqinfo_;
  }
  if (this != internal_default_instance()) {
    delete wxverifycodereqinfo_;
  }
  if (this != internal_default_instance()) {
    delete clidbencryptkey_;
  }
  if (this != internal_default_instance()) {
    delete clidbencryptinfo_;
  }
}

void BaseAuthReqInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseAuthReqInfo::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BaseAuthReqInfo& BaseAuthReqInfo::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

BaseAuthReqInfo* BaseAuthReqInfo::New(::google::protobuf::Arena* arena) const {
  BaseAuthReqInfo* n = new BaseAuthReqInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BaseAuthReqInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BaseAuthReqInfo)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_authticket()) {
      GOOGLE_DCHECK(!authticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*authticket_.UnsafeRawStringPointer())->clear();
    }
    if (has_wtloginreqbuff()) {
      GOOGLE_DCHECK(wtloginreqbuff_ != NULL);
      wtloginreqbuff_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_wtloginimgreqinfo()) {
      GOOGLE_DCHECK(wtloginimgreqinfo_ != NULL);
      wtloginimgreqinfo_->::micromsg::WTLoginImgReqInfo::Clear();
    }
    if (has_wxverifycodereqinfo()) {
      GOOGLE_DCHECK(wxverifycodereqinfo_ != NULL);
      wxverifycodereqinfo_->::micromsg::WxVerifyCodeReqInfo::Clear();
    }
    if (has_clidbencryptkey()) {
      GOOGLE_DCHECK(clidbencryptkey_ != NULL);
      clidbencryptkey_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_clidbencryptinfo()) {
      GOOGLE_DCHECK(clidbencryptinfo_ != NULL);
      clidbencryptinfo_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  authreqflag_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BaseAuthReqInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BaseAuthReqInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .micromsg.SKBuiltinBuffer_t WTLoginReqBuff = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wtloginreqbuff()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.WTLoginImgReqInfo WTLoginImgReqInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wtloginimgreqinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.WxVerifyCodeReqInfo WxVerifyCodeReqInfo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wxverifycodereqinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t CliDBEncryptKey = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clidbencryptkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t CliDBEncryptInfo = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clidbencryptinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 AuthReqFlag = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_authreqflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &authreqflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AuthTicket = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authticket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->authticket().data(), this->authticket().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BaseAuthReqInfo.AuthTicket");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BaseAuthReqInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BaseAuthReqInfo)
  return false;
#undef DO_
}

void BaseAuthReqInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BaseAuthReqInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .micromsg.SKBuiltinBuffer_t WTLoginReqBuff = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->wtloginreqbuff_, output);
  }

  // optional .micromsg.WTLoginImgReqInfo WTLoginImgReqInfo = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->wtloginimgreqinfo_, output);
  }

  // optional .micromsg.WxVerifyCodeReqInfo WxVerifyCodeReqInfo = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->wxverifycodereqinfo_, output);
  }

  // optional .micromsg.SKBuiltinBuffer_t CliDBEncryptKey = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->clidbencryptkey_, output);
  }

  // optional .micromsg.SKBuiltinBuffer_t CliDBEncryptInfo = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->clidbencryptinfo_, output);
  }

  // optional uint32 AuthReqFlag = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->authreqflag(), output);
  }

  // optional string AuthTicket = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authticket().data(), this->authticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BaseAuthReqInfo.AuthTicket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->authticket(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BaseAuthReqInfo)
}

::google::protobuf::uint8* BaseAuthReqInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BaseAuthReqInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .micromsg.SKBuiltinBuffer_t WTLoginReqBuff = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->wtloginreqbuff_, deterministic, target);
  }

  // optional .micromsg.WTLoginImgReqInfo WTLoginImgReqInfo = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->wtloginimgreqinfo_, deterministic, target);
  }

  // optional .micromsg.WxVerifyCodeReqInfo WxVerifyCodeReqInfo = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->wxverifycodereqinfo_, deterministic, target);
  }

  // optional .micromsg.SKBuiltinBuffer_t CliDBEncryptKey = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->clidbencryptkey_, deterministic, target);
  }

  // optional .micromsg.SKBuiltinBuffer_t CliDBEncryptInfo = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->clidbencryptinfo_, deterministic, target);
  }

  // optional uint32 AuthReqFlag = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->authreqflag(), target);
  }

  // optional string AuthTicket = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authticket().data(), this->authticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BaseAuthReqInfo.AuthTicket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->authticket(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BaseAuthReqInfo)
  return target;
}

size_t BaseAuthReqInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BaseAuthReqInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string AuthTicket = 7;
    if (has_authticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authticket());
    }

    // optional .micromsg.SKBuiltinBuffer_t WTLoginReqBuff = 1;
    if (has_wtloginreqbuff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->wtloginreqbuff_);
    }

    // optional .micromsg.WTLoginImgReqInfo WTLoginImgReqInfo = 2;
    if (has_wtloginimgreqinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->wtloginimgreqinfo_);
    }

    // optional .micromsg.WxVerifyCodeReqInfo WxVerifyCodeReqInfo = 3;
    if (has_wxverifycodereqinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->wxverifycodereqinfo_);
    }

    // optional .micromsg.SKBuiltinBuffer_t CliDBEncryptKey = 4;
    if (has_clidbencryptkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->clidbencryptkey_);
    }

    // optional .micromsg.SKBuiltinBuffer_t CliDBEncryptInfo = 5;
    if (has_clidbencryptinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->clidbencryptinfo_);
    }

    // optional uint32 AuthReqFlag = 6;
    if (has_authreqflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->authreqflag());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseAuthReqInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BaseAuthReqInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BaseAuthReqInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BaseAuthReqInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BaseAuthReqInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BaseAuthReqInfo)
    MergeFrom(*source);
  }
}

void BaseAuthReqInfo::MergeFrom(const BaseAuthReqInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BaseAuthReqInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_authticket();
      authticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authticket_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_wtloginreqbuff()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.wtloginreqbuff());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_wtloginimgreqinfo()->::micromsg::WTLoginImgReqInfo::MergeFrom(from.wtloginimgreqinfo());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_wxverifycodereqinfo()->::micromsg::WxVerifyCodeReqInfo::MergeFrom(from.wxverifycodereqinfo());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_clidbencryptkey()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.clidbencryptkey());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_clidbencryptinfo()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.clidbencryptinfo());
    }
    if (cached_has_bits & 0x00000040u) {
      authreqflag_ = from.authreqflag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BaseAuthReqInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BaseAuthReqInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseAuthReqInfo::CopyFrom(const BaseAuthReqInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BaseAuthReqInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseAuthReqInfo::IsInitialized() const {
  if (has_wtloginreqbuff()) {
    if (!this->wtloginreqbuff_->IsInitialized()) return false;
  }
  if (has_wtloginimgreqinfo()) {
    if (!this->wtloginimgreqinfo_->IsInitialized()) return false;
  }
  if (has_clidbencryptkey()) {
    if (!this->clidbencryptkey_->IsInitialized()) return false;
  }
  if (has_clidbencryptinfo()) {
    if (!this->clidbencryptinfo_->IsInitialized()) return false;
  }
  return true;
}

void BaseAuthReqInfo::Swap(BaseAuthReqInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BaseAuthReqInfo::InternalSwap(BaseAuthReqInfo* other) {
  authticket_.Swap(&other->authticket_);
  std::swap(wtloginreqbuff_, other->wtloginreqbuff_);
  std::swap(wtloginimgreqinfo_, other->wtloginimgreqinfo_);
  std::swap(wxverifycodereqinfo_, other->wxverifycodereqinfo_);
  std::swap(clidbencryptkey_, other->clidbencryptkey_);
  std::swap(clidbencryptinfo_, other->clidbencryptinfo_);
  std::swap(authreqflag_, other->authreqflag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BaseAuthReqInfo::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BaseAuthReqInfo

// optional .micromsg.SKBuiltinBuffer_t WTLoginReqBuff = 1;
bool BaseAuthReqInfo::has_wtloginreqbuff() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BaseAuthReqInfo::set_has_wtloginreqbuff() {
  _has_bits_[0] |= 0x00000002u;
}
void BaseAuthReqInfo::clear_has_wtloginreqbuff() {
  _has_bits_[0] &= ~0x00000002u;
}
void BaseAuthReqInfo::clear_wtloginreqbuff() {
  if (wtloginreqbuff_ != NULL) wtloginreqbuff_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_wtloginreqbuff();
}
const ::micromsg::SKBuiltinBuffer_t& BaseAuthReqInfo::wtloginreqbuff() const {
  // @@protoc_insertion_point(field_get:micromsg.BaseAuthReqInfo.WTLoginReqBuff)
  return wtloginreqbuff_ != NULL ? *wtloginreqbuff_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* BaseAuthReqInfo::mutable_wtloginreqbuff() {
  set_has_wtloginreqbuff();
  if (wtloginreqbuff_ == NULL) {
    wtloginreqbuff_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BaseAuthReqInfo.WTLoginReqBuff)
  return wtloginreqbuff_;
}
::micromsg::SKBuiltinBuffer_t* BaseAuthReqInfo::release_wtloginreqbuff() {
  // @@protoc_insertion_point(field_release:micromsg.BaseAuthReqInfo.WTLoginReqBuff)
  clear_has_wtloginreqbuff();
  ::micromsg::SKBuiltinBuffer_t* temp = wtloginreqbuff_;
  wtloginreqbuff_ = NULL;
  return temp;
}
void BaseAuthReqInfo::set_allocated_wtloginreqbuff(::micromsg::SKBuiltinBuffer_t* wtloginreqbuff) {
  delete wtloginreqbuff_;
  wtloginreqbuff_ = wtloginreqbuff;
  if (wtloginreqbuff) {
    set_has_wtloginreqbuff();
  } else {
    clear_has_wtloginreqbuff();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BaseAuthReqInfo.WTLoginReqBuff)
}

// optional .micromsg.WTLoginImgReqInfo WTLoginImgReqInfo = 2;
bool BaseAuthReqInfo::has_wtloginimgreqinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BaseAuthReqInfo::set_has_wtloginimgreqinfo() {
  _has_bits_[0] |= 0x00000004u;
}
void BaseAuthReqInfo::clear_has_wtloginimgreqinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
void BaseAuthReqInfo::clear_wtloginimgreqinfo() {
  if (wtloginimgreqinfo_ != NULL) wtloginimgreqinfo_->::micromsg::WTLoginImgReqInfo::Clear();
  clear_has_wtloginimgreqinfo();
}
const ::micromsg::WTLoginImgReqInfo& BaseAuthReqInfo::wtloginimgreqinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.BaseAuthReqInfo.WTLoginImgReqInfo)
  return wtloginimgreqinfo_ != NULL ? *wtloginimgreqinfo_
                         : *::micromsg::WTLoginImgReqInfo::internal_default_instance();
}
::micromsg::WTLoginImgReqInfo* BaseAuthReqInfo::mutable_wtloginimgreqinfo() {
  set_has_wtloginimgreqinfo();
  if (wtloginimgreqinfo_ == NULL) {
    wtloginimgreqinfo_ = new ::micromsg::WTLoginImgReqInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BaseAuthReqInfo.WTLoginImgReqInfo)
  return wtloginimgreqinfo_;
}
::micromsg::WTLoginImgReqInfo* BaseAuthReqInfo::release_wtloginimgreqinfo() {
  // @@protoc_insertion_point(field_release:micromsg.BaseAuthReqInfo.WTLoginImgReqInfo)
  clear_has_wtloginimgreqinfo();
  ::micromsg::WTLoginImgReqInfo* temp = wtloginimgreqinfo_;
  wtloginimgreqinfo_ = NULL;
  return temp;
}
void BaseAuthReqInfo::set_allocated_wtloginimgreqinfo(::micromsg::WTLoginImgReqInfo* wtloginimgreqinfo) {
  delete wtloginimgreqinfo_;
  wtloginimgreqinfo_ = wtloginimgreqinfo;
  if (wtloginimgreqinfo) {
    set_has_wtloginimgreqinfo();
  } else {
    clear_has_wtloginimgreqinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BaseAuthReqInfo.WTLoginImgReqInfo)
}

// optional .micromsg.WxVerifyCodeReqInfo WxVerifyCodeReqInfo = 3;
bool BaseAuthReqInfo::has_wxverifycodereqinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BaseAuthReqInfo::set_has_wxverifycodereqinfo() {
  _has_bits_[0] |= 0x00000008u;
}
void BaseAuthReqInfo::clear_has_wxverifycodereqinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
void BaseAuthReqInfo::clear_wxverifycodereqinfo() {
  if (wxverifycodereqinfo_ != NULL) wxverifycodereqinfo_->::micromsg::WxVerifyCodeReqInfo::Clear();
  clear_has_wxverifycodereqinfo();
}
const ::micromsg::WxVerifyCodeReqInfo& BaseAuthReqInfo::wxverifycodereqinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.BaseAuthReqInfo.WxVerifyCodeReqInfo)
  return wxverifycodereqinfo_ != NULL ? *wxverifycodereqinfo_
                         : *::micromsg::WxVerifyCodeReqInfo::internal_default_instance();
}
::micromsg::WxVerifyCodeReqInfo* BaseAuthReqInfo::mutable_wxverifycodereqinfo() {
  set_has_wxverifycodereqinfo();
  if (wxverifycodereqinfo_ == NULL) {
    wxverifycodereqinfo_ = new ::micromsg::WxVerifyCodeReqInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BaseAuthReqInfo.WxVerifyCodeReqInfo)
  return wxverifycodereqinfo_;
}
::micromsg::WxVerifyCodeReqInfo* BaseAuthReqInfo::release_wxverifycodereqinfo() {
  // @@protoc_insertion_point(field_release:micromsg.BaseAuthReqInfo.WxVerifyCodeReqInfo)
  clear_has_wxverifycodereqinfo();
  ::micromsg::WxVerifyCodeReqInfo* temp = wxverifycodereqinfo_;
  wxverifycodereqinfo_ = NULL;
  return temp;
}
void BaseAuthReqInfo::set_allocated_wxverifycodereqinfo(::micromsg::WxVerifyCodeReqInfo* wxverifycodereqinfo) {
  delete wxverifycodereqinfo_;
  wxverifycodereqinfo_ = wxverifycodereqinfo;
  if (wxverifycodereqinfo) {
    set_has_wxverifycodereqinfo();
  } else {
    clear_has_wxverifycodereqinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BaseAuthReqInfo.WxVerifyCodeReqInfo)
}

// optional .micromsg.SKBuiltinBuffer_t CliDBEncryptKey = 4;
bool BaseAuthReqInfo::has_clidbencryptkey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BaseAuthReqInfo::set_has_clidbencryptkey() {
  _has_bits_[0] |= 0x00000010u;
}
void BaseAuthReqInfo::clear_has_clidbencryptkey() {
  _has_bits_[0] &= ~0x00000010u;
}
void BaseAuthReqInfo::clear_clidbencryptkey() {
  if (clidbencryptkey_ != NULL) clidbencryptkey_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_clidbencryptkey();
}
const ::micromsg::SKBuiltinBuffer_t& BaseAuthReqInfo::clidbencryptkey() const {
  // @@protoc_insertion_point(field_get:micromsg.BaseAuthReqInfo.CliDBEncryptKey)
  return clidbencryptkey_ != NULL ? *clidbencryptkey_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* BaseAuthReqInfo::mutable_clidbencryptkey() {
  set_has_clidbencryptkey();
  if (clidbencryptkey_ == NULL) {
    clidbencryptkey_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BaseAuthReqInfo.CliDBEncryptKey)
  return clidbencryptkey_;
}
::micromsg::SKBuiltinBuffer_t* BaseAuthReqInfo::release_clidbencryptkey() {
  // @@protoc_insertion_point(field_release:micromsg.BaseAuthReqInfo.CliDBEncryptKey)
  clear_has_clidbencryptkey();
  ::micromsg::SKBuiltinBuffer_t* temp = clidbencryptkey_;
  clidbencryptkey_ = NULL;
  return temp;
}
void BaseAuthReqInfo::set_allocated_clidbencryptkey(::micromsg::SKBuiltinBuffer_t* clidbencryptkey) {
  delete clidbencryptkey_;
  clidbencryptkey_ = clidbencryptkey;
  if (clidbencryptkey) {
    set_has_clidbencryptkey();
  } else {
    clear_has_clidbencryptkey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BaseAuthReqInfo.CliDBEncryptKey)
}

// optional .micromsg.SKBuiltinBuffer_t CliDBEncryptInfo = 5;
bool BaseAuthReqInfo::has_clidbencryptinfo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BaseAuthReqInfo::set_has_clidbencryptinfo() {
  _has_bits_[0] |= 0x00000020u;
}
void BaseAuthReqInfo::clear_has_clidbencryptinfo() {
  _has_bits_[0] &= ~0x00000020u;
}
void BaseAuthReqInfo::clear_clidbencryptinfo() {
  if (clidbencryptinfo_ != NULL) clidbencryptinfo_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_clidbencryptinfo();
}
const ::micromsg::SKBuiltinBuffer_t& BaseAuthReqInfo::clidbencryptinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.BaseAuthReqInfo.CliDBEncryptInfo)
  return clidbencryptinfo_ != NULL ? *clidbencryptinfo_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* BaseAuthReqInfo::mutable_clidbencryptinfo() {
  set_has_clidbencryptinfo();
  if (clidbencryptinfo_ == NULL) {
    clidbencryptinfo_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BaseAuthReqInfo.CliDBEncryptInfo)
  return clidbencryptinfo_;
}
::micromsg::SKBuiltinBuffer_t* BaseAuthReqInfo::release_clidbencryptinfo() {
  // @@protoc_insertion_point(field_release:micromsg.BaseAuthReqInfo.CliDBEncryptInfo)
  clear_has_clidbencryptinfo();
  ::micromsg::SKBuiltinBuffer_t* temp = clidbencryptinfo_;
  clidbencryptinfo_ = NULL;
  return temp;
}
void BaseAuthReqInfo::set_allocated_clidbencryptinfo(::micromsg::SKBuiltinBuffer_t* clidbencryptinfo) {
  delete clidbencryptinfo_;
  clidbencryptinfo_ = clidbencryptinfo;
  if (clidbencryptinfo) {
    set_has_clidbencryptinfo();
  } else {
    clear_has_clidbencryptinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BaseAuthReqInfo.CliDBEncryptInfo)
}

// optional uint32 AuthReqFlag = 6;
bool BaseAuthReqInfo::has_authreqflag() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BaseAuthReqInfo::set_has_authreqflag() {
  _has_bits_[0] |= 0x00000040u;
}
void BaseAuthReqInfo::clear_has_authreqflag() {
  _has_bits_[0] &= ~0x00000040u;
}
void BaseAuthReqInfo::clear_authreqflag() {
  authreqflag_ = 0u;
  clear_has_authreqflag();
}
::google::protobuf::uint32 BaseAuthReqInfo::authreqflag() const {
  // @@protoc_insertion_point(field_get:micromsg.BaseAuthReqInfo.AuthReqFlag)
  return authreqflag_;
}
void BaseAuthReqInfo::set_authreqflag(::google::protobuf::uint32 value) {
  set_has_authreqflag();
  authreqflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BaseAuthReqInfo.AuthReqFlag)
}

// optional string AuthTicket = 7;
bool BaseAuthReqInfo::has_authticket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BaseAuthReqInfo::set_has_authticket() {
  _has_bits_[0] |= 0x00000001u;
}
void BaseAuthReqInfo::clear_has_authticket() {
  _has_bits_[0] &= ~0x00000001u;
}
void BaseAuthReqInfo::clear_authticket() {
  authticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_authticket();
}
const ::std::string& BaseAuthReqInfo::authticket() const {
  // @@protoc_insertion_point(field_get:micromsg.BaseAuthReqInfo.AuthTicket)
  return authticket_.GetNoArena();
}
void BaseAuthReqInfo::set_authticket(const ::std::string& value) {
  set_has_authticket();
  authticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BaseAuthReqInfo.AuthTicket)
}
#if LANG_CXX11
void BaseAuthReqInfo::set_authticket(::std::string&& value) {
  set_has_authticket();
  authticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BaseAuthReqInfo.AuthTicket)
}
#endif
void BaseAuthReqInfo::set_authticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_authticket();
  authticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BaseAuthReqInfo.AuthTicket)
}
void BaseAuthReqInfo::set_authticket(const char* value, size_t size) {
  set_has_authticket();
  authticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BaseAuthReqInfo.AuthTicket)
}
::std::string* BaseAuthReqInfo::mutable_authticket() {
  set_has_authticket();
  // @@protoc_insertion_point(field_mutable:micromsg.BaseAuthReqInfo.AuthTicket)
  return authticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BaseAuthReqInfo::release_authticket() {
  // @@protoc_insertion_point(field_release:micromsg.BaseAuthReqInfo.AuthTicket)
  clear_has_authticket();
  return authticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BaseAuthReqInfo::set_allocated_authticket(::std::string* authticket) {
  if (authticket != NULL) {
    set_has_authticket();
  } else {
    clear_has_authticket();
  }
  authticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), authticket);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BaseAuthReqInfo.AuthTicket)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ManualAuthRsaReqData::kRandomEncryKeyFieldNumber;
const int ManualAuthRsaReqData::kCliPubECDHKeyFieldNumber;
const int ManualAuthRsaReqData::kUserNameFieldNumber;
const int ManualAuthRsaReqData::kPwdFieldNumber;
const int ManualAuthRsaReqData::kPwd2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ManualAuthRsaReqData::ManualAuthRsaReqData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ManualAuthRsaReqData)
}
ManualAuthRsaReqData::ManualAuthRsaReqData(const ManualAuthRsaReqData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pwd()) {
    pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  pwd2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pwd2()) {
    pwd2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd2_);
  }
  if (from.has_randomencrykey()) {
    randomencrykey_ = new ::micromsg::SKBuiltinBuffer_t(*from.randomencrykey_);
  } else {
    randomencrykey_ = NULL;
  }
  if (from.has_clipubecdhkey()) {
    clipubecdhkey_ = new ::micromsg::ECDHKey(*from.clipubecdhkey_);
  } else {
    clipubecdhkey_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.ManualAuthRsaReqData)
}

void ManualAuthRsaReqData::SharedCtor() {
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&randomencrykey_, 0, reinterpret_cast<char*>(&clipubecdhkey_) -
    reinterpret_cast<char*>(&randomencrykey_) + sizeof(clipubecdhkey_));
}

ManualAuthRsaReqData::~ManualAuthRsaReqData() {
  // @@protoc_insertion_point(destructor:micromsg.ManualAuthRsaReqData)
  SharedDtor();
}

void ManualAuthRsaReqData::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete randomencrykey_;
  }
  if (this != internal_default_instance()) {
    delete clipubecdhkey_;
  }
}

void ManualAuthRsaReqData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManualAuthRsaReqData::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ManualAuthRsaReqData& ManualAuthRsaReqData::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

ManualAuthRsaReqData* ManualAuthRsaReqData::New(::google::protobuf::Arena* arena) const {
  ManualAuthRsaReqData* n = new ManualAuthRsaReqData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ManualAuthRsaReqData::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ManualAuthRsaReqData)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_username()) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
    if (has_pwd()) {
      GOOGLE_DCHECK(!pwd_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pwd_.UnsafeRawStringPointer())->clear();
    }
    if (has_pwd2()) {
      GOOGLE_DCHECK(!pwd2_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pwd2_.UnsafeRawStringPointer())->clear();
    }
    if (has_randomencrykey()) {
      GOOGLE_DCHECK(randomencrykey_ != NULL);
      randomencrykey_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_clipubecdhkey()) {
      GOOGLE_DCHECK(clipubecdhkey_ != NULL);
      clipubecdhkey_->::micromsg::ECDHKey::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ManualAuthRsaReqData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ManualAuthRsaReqData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_randomencrykey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.ECDHKey CliPubECDHKey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clipubecdhkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string UserName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ManualAuthRsaReqData.UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Pwd = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pwd().data(), this->pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ManualAuthRsaReqData.Pwd");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Pwd2 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pwd2().data(), this->pwd2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ManualAuthRsaReqData.Pwd2");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ManualAuthRsaReqData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ManualAuthRsaReqData)
  return false;
#undef DO_
}

void ManualAuthRsaReqData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ManualAuthRsaReqData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->randomencrykey_, output);
  }

  // required .micromsg.ECDHKey CliPubECDHKey = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->clipubecdhkey_, output);
  }

  // optional string UserName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ManualAuthRsaReqData.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->username(), output);
  }

  // optional string Pwd = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ManualAuthRsaReqData.Pwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->pwd(), output);
  }

  // optional string Pwd2 = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd2().data(), this->pwd2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ManualAuthRsaReqData.Pwd2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->pwd2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ManualAuthRsaReqData)
}

::google::protobuf::uint8* ManualAuthRsaReqData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ManualAuthRsaReqData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->randomencrykey_, deterministic, target);
  }

  // required .micromsg.ECDHKey CliPubECDHKey = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->clipubecdhkey_, deterministic, target);
  }

  // optional string UserName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ManualAuthRsaReqData.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }

  // optional string Pwd = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ManualAuthRsaReqData.Pwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pwd(), target);
  }

  // optional string Pwd2 = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd2().data(), this->pwd2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ManualAuthRsaReqData.Pwd2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->pwd2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ManualAuthRsaReqData)
  return target;
}

size_t ManualAuthRsaReqData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.ManualAuthRsaReqData)
  size_t total_size = 0;

  if (has_randomencrykey()) {
    // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->randomencrykey_);
  }

  if (has_clipubecdhkey()) {
    // required .micromsg.ECDHKey CliPubECDHKey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->clipubecdhkey_);
  }

  return total_size;
}
size_t ManualAuthRsaReqData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ManualAuthRsaReqData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000018) ^ 0x00000018) == 0) {  // All required fields are present.
    // required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->randomencrykey_);

    // required .micromsg.ECDHKey CliPubECDHKey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->clipubecdhkey_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string UserName = 3;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string Pwd = 4;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }

    // optional string Pwd2 = 5;
    if (has_pwd2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd2());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManualAuthRsaReqData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ManualAuthRsaReqData)
  GOOGLE_DCHECK_NE(&from, this);
  const ManualAuthRsaReqData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ManualAuthRsaReqData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ManualAuthRsaReqData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ManualAuthRsaReqData)
    MergeFrom(*source);
  }
}

void ManualAuthRsaReqData::MergeFrom(const ManualAuthRsaReqData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ManualAuthRsaReqData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_pwd();
      pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_pwd2();
      pwd2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd2_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_randomencrykey()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.randomencrykey());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_clipubecdhkey()->::micromsg::ECDHKey::MergeFrom(from.clipubecdhkey());
    }
  }
}

void ManualAuthRsaReqData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ManualAuthRsaReqData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualAuthRsaReqData::CopyFrom(const ManualAuthRsaReqData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ManualAuthRsaReqData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualAuthRsaReqData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000018) != 0x00000018) return false;
  if (has_randomencrykey()) {
    if (!this->randomencrykey_->IsInitialized()) return false;
  }
  if (has_clipubecdhkey()) {
    if (!this->clipubecdhkey_->IsInitialized()) return false;
  }
  return true;
}

void ManualAuthRsaReqData::Swap(ManualAuthRsaReqData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ManualAuthRsaReqData::InternalSwap(ManualAuthRsaReqData* other) {
  username_.Swap(&other->username_);
  pwd_.Swap(&other->pwd_);
  pwd2_.Swap(&other->pwd2_);
  std::swap(randomencrykey_, other->randomencrykey_);
  std::swap(clipubecdhkey_, other->clipubecdhkey_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ManualAuthRsaReqData::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ManualAuthRsaReqData

// required .micromsg.SKBuiltinBuffer_t RandomEncryKey = 1;
bool ManualAuthRsaReqData::has_randomencrykey() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ManualAuthRsaReqData::set_has_randomencrykey() {
  _has_bits_[0] |= 0x00000008u;
}
void ManualAuthRsaReqData::clear_has_randomencrykey() {
  _has_bits_[0] &= ~0x00000008u;
}
void ManualAuthRsaReqData::clear_randomencrykey() {
  if (randomencrykey_ != NULL) randomencrykey_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_randomencrykey();
}
const ::micromsg::SKBuiltinBuffer_t& ManualAuthRsaReqData::randomencrykey() const {
  // @@protoc_insertion_point(field_get:micromsg.ManualAuthRsaReqData.RandomEncryKey)
  return randomencrykey_ != NULL ? *randomencrykey_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* ManualAuthRsaReqData::mutable_randomencrykey() {
  set_has_randomencrykey();
  if (randomencrykey_ == NULL) {
    randomencrykey_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ManualAuthRsaReqData.RandomEncryKey)
  return randomencrykey_;
}
::micromsg::SKBuiltinBuffer_t* ManualAuthRsaReqData::release_randomencrykey() {
  // @@protoc_insertion_point(field_release:micromsg.ManualAuthRsaReqData.RandomEncryKey)
  clear_has_randomencrykey();
  ::micromsg::SKBuiltinBuffer_t* temp = randomencrykey_;
  randomencrykey_ = NULL;
  return temp;
}
void ManualAuthRsaReqData::set_allocated_randomencrykey(::micromsg::SKBuiltinBuffer_t* randomencrykey) {
  delete randomencrykey_;
  randomencrykey_ = randomencrykey;
  if (randomencrykey) {
    set_has_randomencrykey();
  } else {
    clear_has_randomencrykey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ManualAuthRsaReqData.RandomEncryKey)
}

// required .micromsg.ECDHKey CliPubECDHKey = 2;
bool ManualAuthRsaReqData::has_clipubecdhkey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ManualAuthRsaReqData::set_has_clipubecdhkey() {
  _has_bits_[0] |= 0x00000010u;
}
void ManualAuthRsaReqData::clear_has_clipubecdhkey() {
  _has_bits_[0] &= ~0x00000010u;
}
void ManualAuthRsaReqData::clear_clipubecdhkey() {
  if (clipubecdhkey_ != NULL) clipubecdhkey_->::micromsg::ECDHKey::Clear();
  clear_has_clipubecdhkey();
}
const ::micromsg::ECDHKey& ManualAuthRsaReqData::clipubecdhkey() const {
  // @@protoc_insertion_point(field_get:micromsg.ManualAuthRsaReqData.CliPubECDHKey)
  return clipubecdhkey_ != NULL ? *clipubecdhkey_
                         : *::micromsg::ECDHKey::internal_default_instance();
}
::micromsg::ECDHKey* ManualAuthRsaReqData::mutable_clipubecdhkey() {
  set_has_clipubecdhkey();
  if (clipubecdhkey_ == NULL) {
    clipubecdhkey_ = new ::micromsg::ECDHKey;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ManualAuthRsaReqData.CliPubECDHKey)
  return clipubecdhkey_;
}
::micromsg::ECDHKey* ManualAuthRsaReqData::release_clipubecdhkey() {
  // @@protoc_insertion_point(field_release:micromsg.ManualAuthRsaReqData.CliPubECDHKey)
  clear_has_clipubecdhkey();
  ::micromsg::ECDHKey* temp = clipubecdhkey_;
  clipubecdhkey_ = NULL;
  return temp;
}
void ManualAuthRsaReqData::set_allocated_clipubecdhkey(::micromsg::ECDHKey* clipubecdhkey) {
  delete clipubecdhkey_;
  clipubecdhkey_ = clipubecdhkey;
  if (clipubecdhkey) {
    set_has_clipubecdhkey();
  } else {
    clear_has_clipubecdhkey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ManualAuthRsaReqData.CliPubECDHKey)
}

// optional string UserName = 3;
bool ManualAuthRsaReqData::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ManualAuthRsaReqData::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void ManualAuthRsaReqData::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void ManualAuthRsaReqData::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& ManualAuthRsaReqData::username() const {
  // @@protoc_insertion_point(field_get:micromsg.ManualAuthRsaReqData.UserName)
  return username_.GetNoArena();
}
void ManualAuthRsaReqData::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ManualAuthRsaReqData.UserName)
}
#if LANG_CXX11
void ManualAuthRsaReqData::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ManualAuthRsaReqData.UserName)
}
#endif
void ManualAuthRsaReqData::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ManualAuthRsaReqData.UserName)
}
void ManualAuthRsaReqData::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ManualAuthRsaReqData.UserName)
}
::std::string* ManualAuthRsaReqData::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.ManualAuthRsaReqData.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthRsaReqData::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.ManualAuthRsaReqData.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthRsaReqData::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ManualAuthRsaReqData.UserName)
}

// optional string Pwd = 4;
bool ManualAuthRsaReqData::has_pwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ManualAuthRsaReqData::set_has_pwd() {
  _has_bits_[0] |= 0x00000002u;
}
void ManualAuthRsaReqData::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000002u;
}
void ManualAuthRsaReqData::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pwd();
}
const ::std::string& ManualAuthRsaReqData::pwd() const {
  // @@protoc_insertion_point(field_get:micromsg.ManualAuthRsaReqData.Pwd)
  return pwd_.GetNoArena();
}
void ManualAuthRsaReqData::set_pwd(const ::std::string& value) {
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ManualAuthRsaReqData.Pwd)
}
#if LANG_CXX11
void ManualAuthRsaReqData::set_pwd(::std::string&& value) {
  set_has_pwd();
  pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ManualAuthRsaReqData.Pwd)
}
#endif
void ManualAuthRsaReqData::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ManualAuthRsaReqData.Pwd)
}
void ManualAuthRsaReqData::set_pwd(const char* value, size_t size) {
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ManualAuthRsaReqData.Pwd)
}
::std::string* ManualAuthRsaReqData::mutable_pwd() {
  set_has_pwd();
  // @@protoc_insertion_point(field_mutable:micromsg.ManualAuthRsaReqData.Pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthRsaReqData::release_pwd() {
  // @@protoc_insertion_point(field_release:micromsg.ManualAuthRsaReqData.Pwd)
  clear_has_pwd();
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthRsaReqData::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    set_has_pwd();
  } else {
    clear_has_pwd();
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ManualAuthRsaReqData.Pwd)
}

// optional string Pwd2 = 5;
bool ManualAuthRsaReqData::has_pwd2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ManualAuthRsaReqData::set_has_pwd2() {
  _has_bits_[0] |= 0x00000004u;
}
void ManualAuthRsaReqData::clear_has_pwd2() {
  _has_bits_[0] &= ~0x00000004u;
}
void ManualAuthRsaReqData::clear_pwd2() {
  pwd2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pwd2();
}
const ::std::string& ManualAuthRsaReqData::pwd2() const {
  // @@protoc_insertion_point(field_get:micromsg.ManualAuthRsaReqData.Pwd2)
  return pwd2_.GetNoArena();
}
void ManualAuthRsaReqData::set_pwd2(const ::std::string& value) {
  set_has_pwd2();
  pwd2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ManualAuthRsaReqData.Pwd2)
}
#if LANG_CXX11
void ManualAuthRsaReqData::set_pwd2(::std::string&& value) {
  set_has_pwd2();
  pwd2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ManualAuthRsaReqData.Pwd2)
}
#endif
void ManualAuthRsaReqData::set_pwd2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pwd2();
  pwd2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ManualAuthRsaReqData.Pwd2)
}
void ManualAuthRsaReqData::set_pwd2(const char* value, size_t size) {
  set_has_pwd2();
  pwd2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ManualAuthRsaReqData.Pwd2)
}
::std::string* ManualAuthRsaReqData::mutable_pwd2() {
  set_has_pwd2();
  // @@protoc_insertion_point(field_mutable:micromsg.ManualAuthRsaReqData.Pwd2)
  return pwd2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthRsaReqData::release_pwd2() {
  // @@protoc_insertion_point(field_release:micromsg.ManualAuthRsaReqData.Pwd2)
  clear_has_pwd2();
  return pwd2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthRsaReqData::set_allocated_pwd2(::std::string* pwd2) {
  if (pwd2 != NULL) {
    set_has_pwd2();
  } else {
    clear_has_pwd2();
  }
  pwd2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd2);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ManualAuthRsaReqData.Pwd2)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ManualAuthAesReqData::kBaseRequestFieldNumber;
const int ManualAuthAesReqData::kBaseReqInfoFieldNumber;
const int ManualAuthAesReqData::kIMEIFieldNumber;
const int ManualAuthAesReqData::kSoftTypeFieldNumber;
const int ManualAuthAesReqData::kBuiltinIPSeqFieldNumber;
const int ManualAuthAesReqData::kClientSeqIDFieldNumber;
const int ManualAuthAesReqData::kSignatureFieldNumber;
const int ManualAuthAesReqData::kDeviceNameFieldNumber;
const int ManualAuthAesReqData::kDeviceTypeFieldNumber;
const int ManualAuthAesReqData::kLanguageFieldNumber;
const int ManualAuthAesReqData::kTimeZoneFieldNumber;
const int ManualAuthAesReqData::kChannelFieldNumber;
const int ManualAuthAesReqData::kTimeStampFieldNumber;
const int ManualAuthAesReqData::kDeviceBrandFieldNumber;
const int ManualAuthAesReqData::kDeviceModelFieldNumber;
const int ManualAuthAesReqData::kOSTypeFieldNumber;
const int ManualAuthAesReqData::kRealCountryFieldNumber;
const int ManualAuthAesReqData::kBundleIDFieldNumber;
const int ManualAuthAesReqData::kAdSourceFieldNumber;
const int ManualAuthAesReqData::kIPhoneVerFieldNumber;
const int ManualAuthAesReqData::kInputTypeFieldNumber;
const int ManualAuthAesReqData::kClientcheckdatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ManualAuthAesReqData::ManualAuthAesReqData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ManualAuthAesReqData)
}
ManualAuthAesReqData::ManualAuthAesReqData(const ManualAuthAesReqData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  imei_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_imei()) {
    imei_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imei_);
  }
  softtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_softtype()) {
    softtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.softtype_);
  }
  clientseqid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientseqid()) {
    clientseqid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientseqid_);
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  devicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_devicename()) {
    devicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicename_);
  }
  devicetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_devicetype()) {
    devicetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicetype_);
  }
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_language()) {
    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  timezone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_timezone()) {
    timezone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timezone_);
  }
  devicebrand_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_devicebrand()) {
    devicebrand_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicebrand_);
  }
  devicemodel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_devicemodel()) {
    devicemodel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicemodel_);
  }
  ostype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ostype()) {
    ostype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ostype_);
  }
  realcountry_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_realcountry()) {
    realcountry_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.realcountry_);
  }
  bundleid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bundleid()) {
    bundleid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bundleid_);
  }
  adsource_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_adsource()) {
    adsource_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.adsource_);
  }
  iphonever_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_iphonever()) {
    iphonever_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iphonever_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_basereqinfo()) {
    basereqinfo_ = new ::micromsg::BaseAuthReqInfo(*from.basereqinfo_);
  } else {
    basereqinfo_ = NULL;
  }
  if (from.has_clientcheckdat()) {
    clientcheckdat_ = new ::micromsg::SKBuiltinBuffer_t(*from.clientcheckdat_);
  } else {
    clientcheckdat_ = NULL;
  }
  ::memcpy(&builtinipseq_, &from.builtinipseq_,
    reinterpret_cast<char*>(&inputtype_) -
    reinterpret_cast<char*>(&builtinipseq_) + sizeof(inputtype_));
  // @@protoc_insertion_point(copy_constructor:micromsg.ManualAuthAesReqData)
}

void ManualAuthAesReqData::SharedCtor() {
  _cached_size_ = 0;
  imei_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  softtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientseqid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicebrand_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicemodel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ostype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  realcountry_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bundleid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  adsource_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iphonever_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&inputtype_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(inputtype_));
}

ManualAuthAesReqData::~ManualAuthAesReqData() {
  // @@protoc_insertion_point(destructor:micromsg.ManualAuthAesReqData)
  SharedDtor();
}

void ManualAuthAesReqData::SharedDtor() {
  imei_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  softtype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientseqid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicetype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicebrand_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicemodel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ostype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  realcountry_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bundleid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  adsource_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iphonever_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete basereqinfo_;
  }
  if (this != internal_default_instance()) {
    delete clientcheckdat_;
  }
}

void ManualAuthAesReqData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManualAuthAesReqData::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ManualAuthAesReqData& ManualAuthAesReqData::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

ManualAuthAesReqData* ManualAuthAesReqData::New(::google::protobuf::Arena* arena) const {
  ManualAuthAesReqData* n = new ManualAuthAesReqData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ManualAuthAesReqData::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ManualAuthAesReqData)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_imei()) {
      GOOGLE_DCHECK(!imei_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*imei_.UnsafeRawStringPointer())->clear();
    }
    if (has_softtype()) {
      GOOGLE_DCHECK(!softtype_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*softtype_.UnsafeRawStringPointer())->clear();
    }
    if (has_clientseqid()) {
      GOOGLE_DCHECK(!clientseqid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*clientseqid_.UnsafeRawStringPointer())->clear();
    }
    if (has_signature()) {
      GOOGLE_DCHECK(!signature_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*signature_.UnsafeRawStringPointer())->clear();
    }
    if (has_devicename()) {
      GOOGLE_DCHECK(!devicename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*devicename_.UnsafeRawStringPointer())->clear();
    }
    if (has_devicetype()) {
      GOOGLE_DCHECK(!devicetype_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*devicetype_.UnsafeRawStringPointer())->clear();
    }
    if (has_language()) {
      GOOGLE_DCHECK(!language_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*language_.UnsafeRawStringPointer())->clear();
    }
    if (has_timezone()) {
      GOOGLE_DCHECK(!timezone_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*timezone_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has_devicebrand()) {
      GOOGLE_DCHECK(!devicebrand_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*devicebrand_.UnsafeRawStringPointer())->clear();
    }
    if (has_devicemodel()) {
      GOOGLE_DCHECK(!devicemodel_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*devicemodel_.UnsafeRawStringPointer())->clear();
    }
    if (has_ostype()) {
      GOOGLE_DCHECK(!ostype_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ostype_.UnsafeRawStringPointer())->clear();
    }
    if (has_realcountry()) {
      GOOGLE_DCHECK(!realcountry_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*realcountry_.UnsafeRawStringPointer())->clear();
    }
    if (has_bundleid()) {
      GOOGLE_DCHECK(!bundleid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bundleid_.UnsafeRawStringPointer())->clear();
    }
    if (has_adsource()) {
      GOOGLE_DCHECK(!adsource_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*adsource_.UnsafeRawStringPointer())->clear();
    }
    if (has_iphonever()) {
      GOOGLE_DCHECK(!iphonever_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*iphonever_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 196608u) {
    if (has_basereqinfo()) {
      GOOGLE_DCHECK(basereqinfo_ != NULL);
      basereqinfo_->::micromsg::BaseAuthReqInfo::Clear();
    }
    if (has_clientcheckdat()) {
      GOOGLE_DCHECK(clientcheckdat_ != NULL);
      clientcheckdat_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 3932160u) {
    ::memset(&builtinipseq_, 0, reinterpret_cast<char*>(&inputtype_) -
      reinterpret_cast<char*>(&builtinipseq_) + sizeof(inputtype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ManualAuthAesReqData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ManualAuthAesReqData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.BaseAuthReqInfo BaseReqInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basereqinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string IMEI = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imei()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imei().data(), this->imei().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ManualAuthAesReqData.IMEI");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string SoftType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_softtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->softtype().data(), this->softtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ManualAuthAesReqData.SoftType");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 BuiltinIPSeq = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_builtinipseq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &builtinipseq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ClientSeqID = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientseqid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientseqid().data(), this->clientseqid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ManualAuthAesReqData.ClientSeqID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Signature = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ManualAuthAesReqData.Signature");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string DeviceName = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devicename().data(), this->devicename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ManualAuthAesReqData.DeviceName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string DeviceType = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devicetype().data(), this->devicetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ManualAuthAesReqData.DeviceType");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Language = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ManualAuthAesReqData.Language");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string TimeZone = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timezone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->timezone().data(), this->timezone().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ManualAuthAesReqData.TimeZone");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Channel = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_channel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 TimeStamp = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string DeviceBrand = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicebrand()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devicebrand().data(), this->devicebrand().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ManualAuthAesReqData.DeviceBrand");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string DeviceModel = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicemodel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devicemodel().data(), this->devicemodel().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ManualAuthAesReqData.DeviceModel");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string OSType = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ostype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ostype().data(), this->ostype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ManualAuthAesReqData.OSType");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string RealCountry = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_realcountry()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->realcountry().data(), this->realcountry().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ManualAuthAesReqData.RealCountry");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string BundleID = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bundleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bundleid().data(), this->bundleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ManualAuthAesReqData.BundleID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AdSource = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adsource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->adsource().data(), this->adsource().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ManualAuthAesReqData.AdSource");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string IPhoneVer = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iphonever()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->iphonever().data(), this->iphonever().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ManualAuthAesReqData.IPhoneVer");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 InputType = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_inputtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inputtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t Clientcheckdat = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clientcheckdat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ManualAuthAesReqData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ManualAuthAesReqData)
  return false;
#undef DO_
}

void ManualAuthAesReqData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ManualAuthAesReqData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional .micromsg.BaseAuthReqInfo BaseReqInfo = 2;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->basereqinfo_, output);
  }

  // optional string IMEI = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ManualAuthAesReqData.IMEI");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->imei(), output);
  }

  // optional string SoftType = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->softtype().data(), this->softtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ManualAuthAesReqData.SoftType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->softtype(), output);
  }

  // required uint32 BuiltinIPSeq = 5;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->builtinipseq(), output);
  }

  // optional string ClientSeqID = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientseqid().data(), this->clientseqid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ManualAuthAesReqData.ClientSeqID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->clientseqid(), output);
  }

  // optional string Signature = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ManualAuthAesReqData.Signature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->signature(), output);
  }

  // optional string DeviceName = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ManualAuthAesReqData.DeviceName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->devicename(), output);
  }

  // optional string DeviceType = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicetype().data(), this->devicetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ManualAuthAesReqData.DeviceType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->devicetype(), output);
  }

  // optional string Language = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ManualAuthAesReqData.Language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->language(), output);
  }

  // optional string TimeZone = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timezone().data(), this->timezone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ManualAuthAesReqData.TimeZone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->timezone(), output);
  }

  // optional int32 Channel = 13;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->channel(), output);
  }

  // optional uint32 TimeStamp = 14;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->timestamp(), output);
  }

  // optional string DeviceBrand = 15;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicebrand().data(), this->devicebrand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ManualAuthAesReqData.DeviceBrand");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->devicebrand(), output);
  }

  // optional string DeviceModel = 16;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicemodel().data(), this->devicemodel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ManualAuthAesReqData.DeviceModel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->devicemodel(), output);
  }

  // optional string OSType = 17;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ostype().data(), this->ostype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ManualAuthAesReqData.OSType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->ostype(), output);
  }

  // optional string RealCountry = 18;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->realcountry().data(), this->realcountry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ManualAuthAesReqData.RealCountry");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->realcountry(), output);
  }

  // optional string BundleID = 19;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bundleid().data(), this->bundleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ManualAuthAesReqData.BundleID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->bundleid(), output);
  }

  // optional string AdSource = 20;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adsource().data(), this->adsource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ManualAuthAesReqData.AdSource");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->adsource(), output);
  }

  // optional string IPhoneVer = 21;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iphonever().data(), this->iphonever().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ManualAuthAesReqData.IPhoneVer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->iphonever(), output);
  }

  // required uint32 InputType = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->inputtype(), output);
  }

  // optional .micromsg.SKBuiltinBuffer_t Clientcheckdat = 23;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *this->clientcheckdat_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ManualAuthAesReqData)
}

::google::protobuf::uint8* ManualAuthAesReqData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ManualAuthAesReqData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional .micromsg.BaseAuthReqInfo BaseReqInfo = 2;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->basereqinfo_, deterministic, target);
  }

  // optional string IMEI = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ManualAuthAesReqData.IMEI");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->imei(), target);
  }

  // optional string SoftType = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->softtype().data(), this->softtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ManualAuthAesReqData.SoftType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->softtype(), target);
  }

  // required uint32 BuiltinIPSeq = 5;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->builtinipseq(), target);
  }

  // optional string ClientSeqID = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientseqid().data(), this->clientseqid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ManualAuthAesReqData.ClientSeqID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->clientseqid(), target);
  }

  // optional string Signature = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ManualAuthAesReqData.Signature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->signature(), target);
  }

  // optional string DeviceName = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ManualAuthAesReqData.DeviceName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->devicename(), target);
  }

  // optional string DeviceType = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicetype().data(), this->devicetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ManualAuthAesReqData.DeviceType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->devicetype(), target);
  }

  // optional string Language = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ManualAuthAesReqData.Language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->language(), target);
  }

  // optional string TimeZone = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timezone().data(), this->timezone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ManualAuthAesReqData.TimeZone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->timezone(), target);
  }

  // optional int32 Channel = 13;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->channel(), target);
  }

  // optional uint32 TimeStamp = 14;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->timestamp(), target);
  }

  // optional string DeviceBrand = 15;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicebrand().data(), this->devicebrand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ManualAuthAesReqData.DeviceBrand");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->devicebrand(), target);
  }

  // optional string DeviceModel = 16;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicemodel().data(), this->devicemodel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ManualAuthAesReqData.DeviceModel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->devicemodel(), target);
  }

  // optional string OSType = 17;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ostype().data(), this->ostype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ManualAuthAesReqData.OSType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->ostype(), target);
  }

  // optional string RealCountry = 18;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->realcountry().data(), this->realcountry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ManualAuthAesReqData.RealCountry");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->realcountry(), target);
  }

  // optional string BundleID = 19;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bundleid().data(), this->bundleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ManualAuthAesReqData.BundleID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->bundleid(), target);
  }

  // optional string AdSource = 20;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adsource().data(), this->adsource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ManualAuthAesReqData.AdSource");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->adsource(), target);
  }

  // optional string IPhoneVer = 21;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iphonever().data(), this->iphonever().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ManualAuthAesReqData.IPhoneVer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->iphonever(), target);
  }

  // required uint32 InputType = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->inputtype(), target);
  }

  // optional .micromsg.SKBuiltinBuffer_t Clientcheckdat = 23;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, *this->clientcheckdat_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ManualAuthAesReqData)
  return target;
}

size_t ManualAuthAesReqData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.ManualAuthAesReqData)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_builtinipseq()) {
    // required uint32 BuiltinIPSeq = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->builtinipseq());
  }

  if (has_inputtype()) {
    // required uint32 InputType = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->inputtype());
  }

  return total_size;
}
size_t ManualAuthAesReqData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ManualAuthAesReqData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00248000) ^ 0x00248000) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 BuiltinIPSeq = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->builtinipseq());

    // required uint32 InputType = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->inputtype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string IMEI = 3;
    if (has_imei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imei());
    }

    // optional string SoftType = 4;
    if (has_softtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->softtype());
    }

    // optional string ClientSeqID = 6;
    if (has_clientseqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientseqid());
    }

    // optional string Signature = 7;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }

    // optional string DeviceName = 8;
    if (has_devicename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicename());
    }

    // optional string DeviceType = 9;
    if (has_devicetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicetype());
    }

    // optional string Language = 10;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

    // optional string TimeZone = 11;
    if (has_timezone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timezone());
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional string DeviceBrand = 15;
    if (has_devicebrand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicebrand());
    }

    // optional string DeviceModel = 16;
    if (has_devicemodel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicemodel());
    }

    // optional string OSType = 17;
    if (has_ostype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ostype());
    }

    // optional string RealCountry = 18;
    if (has_realcountry()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->realcountry());
    }

    // optional string BundleID = 19;
    if (has_bundleid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bundleid());
    }

    // optional string AdSource = 20;
    if (has_adsource()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->adsource());
    }

    // optional string IPhoneVer = 21;
    if (has_iphonever()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->iphonever());
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional .micromsg.BaseAuthReqInfo BaseReqInfo = 2;
    if (has_basereqinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->basereqinfo_);
    }

    // optional .micromsg.SKBuiltinBuffer_t Clientcheckdat = 23;
    if (has_clientcheckdat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->clientcheckdat_);
    }

  }
  if (_has_bits_[16 / 32] & 1572864u) {
    // optional int32 Channel = 13;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional uint32 TimeStamp = 14;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManualAuthAesReqData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ManualAuthAesReqData)
  GOOGLE_DCHECK_NE(&from, this);
  const ManualAuthAesReqData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ManualAuthAesReqData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ManualAuthAesReqData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ManualAuthAesReqData)
    MergeFrom(*source);
  }
}

void ManualAuthAesReqData::MergeFrom(const ManualAuthAesReqData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ManualAuthAesReqData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_imei();
      imei_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imei_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_softtype();
      softtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.softtype_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_clientseqid();
      clientseqid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientseqid_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_signature();
      signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_devicename();
      devicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicename_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_devicetype();
      devicetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicetype_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_language();
      language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_timezone();
      timezone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timezone_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_devicebrand();
      devicebrand_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicebrand_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_devicemodel();
      devicemodel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicemodel_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_ostype();
      ostype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ostype_);
    }
    if (cached_has_bits & 0x00000800u) {
      set_has_realcountry();
      realcountry_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.realcountry_);
    }
    if (cached_has_bits & 0x00001000u) {
      set_has_bundleid();
      bundleid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bundleid_);
    }
    if (cached_has_bits & 0x00002000u) {
      set_has_adsource();
      adsource_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.adsource_);
    }
    if (cached_has_bits & 0x00004000u) {
      set_has_iphonever();
      iphonever_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iphonever_);
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
  }
  if (cached_has_bits & 4128768u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_basereqinfo()->::micromsg::BaseAuthReqInfo::MergeFrom(from.basereqinfo());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_clientcheckdat()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.clientcheckdat());
    }
    if (cached_has_bits & 0x00040000u) {
      builtinipseq_ = from.builtinipseq_;
    }
    if (cached_has_bits & 0x00080000u) {
      channel_ = from.channel_;
    }
    if (cached_has_bits & 0x00100000u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00200000u) {
      inputtype_ = from.inputtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ManualAuthAesReqData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ManualAuthAesReqData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualAuthAesReqData::CopyFrom(const ManualAuthAesReqData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ManualAuthAesReqData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualAuthAesReqData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00248000) != 0x00248000) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_basereqinfo()) {
    if (!this->basereqinfo_->IsInitialized()) return false;
  }
  if (has_clientcheckdat()) {
    if (!this->clientcheckdat_->IsInitialized()) return false;
  }
  return true;
}

void ManualAuthAesReqData::Swap(ManualAuthAesReqData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ManualAuthAesReqData::InternalSwap(ManualAuthAesReqData* other) {
  imei_.Swap(&other->imei_);
  softtype_.Swap(&other->softtype_);
  clientseqid_.Swap(&other->clientseqid_);
  signature_.Swap(&other->signature_);
  devicename_.Swap(&other->devicename_);
  devicetype_.Swap(&other->devicetype_);
  language_.Swap(&other->language_);
  timezone_.Swap(&other->timezone_);
  devicebrand_.Swap(&other->devicebrand_);
  devicemodel_.Swap(&other->devicemodel_);
  ostype_.Swap(&other->ostype_);
  realcountry_.Swap(&other->realcountry_);
  bundleid_.Swap(&other->bundleid_);
  adsource_.Swap(&other->adsource_);
  iphonever_.Swap(&other->iphonever_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(basereqinfo_, other->basereqinfo_);
  std::swap(clientcheckdat_, other->clientcheckdat_);
  std::swap(builtinipseq_, other->builtinipseq_);
  std::swap(channel_, other->channel_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(inputtype_, other->inputtype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ManualAuthAesReqData::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ManualAuthAesReqData

// required .micromsg.BaseRequest BaseRequest = 1;
bool ManualAuthAesReqData::has_baserequest() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void ManualAuthAesReqData::set_has_baserequest() {
  _has_bits_[0] |= 0x00008000u;
}
void ManualAuthAesReqData::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00008000u;
}
void ManualAuthAesReqData::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& ManualAuthAesReqData::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.ManualAuthAesReqData.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* ManualAuthAesReqData::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ManualAuthAesReqData.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* ManualAuthAesReqData::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.ManualAuthAesReqData.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void ManualAuthAesReqData::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ManualAuthAesReqData.BaseRequest)
}

// optional .micromsg.BaseAuthReqInfo BaseReqInfo = 2;
bool ManualAuthAesReqData::has_basereqinfo() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void ManualAuthAesReqData::set_has_basereqinfo() {
  _has_bits_[0] |= 0x00010000u;
}
void ManualAuthAesReqData::clear_has_basereqinfo() {
  _has_bits_[0] &= ~0x00010000u;
}
void ManualAuthAesReqData::clear_basereqinfo() {
  if (basereqinfo_ != NULL) basereqinfo_->::micromsg::BaseAuthReqInfo::Clear();
  clear_has_basereqinfo();
}
const ::micromsg::BaseAuthReqInfo& ManualAuthAesReqData::basereqinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.ManualAuthAesReqData.BaseReqInfo)
  return basereqinfo_ != NULL ? *basereqinfo_
                         : *::micromsg::BaseAuthReqInfo::internal_default_instance();
}
::micromsg::BaseAuthReqInfo* ManualAuthAesReqData::mutable_basereqinfo() {
  set_has_basereqinfo();
  if (basereqinfo_ == NULL) {
    basereqinfo_ = new ::micromsg::BaseAuthReqInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ManualAuthAesReqData.BaseReqInfo)
  return basereqinfo_;
}
::micromsg::BaseAuthReqInfo* ManualAuthAesReqData::release_basereqinfo() {
  // @@protoc_insertion_point(field_release:micromsg.ManualAuthAesReqData.BaseReqInfo)
  clear_has_basereqinfo();
  ::micromsg::BaseAuthReqInfo* temp = basereqinfo_;
  basereqinfo_ = NULL;
  return temp;
}
void ManualAuthAesReqData::set_allocated_basereqinfo(::micromsg::BaseAuthReqInfo* basereqinfo) {
  delete basereqinfo_;
  basereqinfo_ = basereqinfo;
  if (basereqinfo) {
    set_has_basereqinfo();
  } else {
    clear_has_basereqinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ManualAuthAesReqData.BaseReqInfo)
}

// optional string IMEI = 3;
bool ManualAuthAesReqData::has_imei() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ManualAuthAesReqData::set_has_imei() {
  _has_bits_[0] |= 0x00000001u;
}
void ManualAuthAesReqData::clear_has_imei() {
  _has_bits_[0] &= ~0x00000001u;
}
void ManualAuthAesReqData::clear_imei() {
  imei_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imei();
}
const ::std::string& ManualAuthAesReqData::imei() const {
  // @@protoc_insertion_point(field_get:micromsg.ManualAuthAesReqData.IMEI)
  return imei_.GetNoArena();
}
void ManualAuthAesReqData::set_imei(const ::std::string& value) {
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ManualAuthAesReqData.IMEI)
}
#if LANG_CXX11
void ManualAuthAesReqData::set_imei(::std::string&& value) {
  set_has_imei();
  imei_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ManualAuthAesReqData.IMEI)
}
#endif
void ManualAuthAesReqData::set_imei(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ManualAuthAesReqData.IMEI)
}
void ManualAuthAesReqData::set_imei(const char* value, size_t size) {
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ManualAuthAesReqData.IMEI)
}
::std::string* ManualAuthAesReqData::mutable_imei() {
  set_has_imei();
  // @@protoc_insertion_point(field_mutable:micromsg.ManualAuthAesReqData.IMEI)
  return imei_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthAesReqData::release_imei() {
  // @@protoc_insertion_point(field_release:micromsg.ManualAuthAesReqData.IMEI)
  clear_has_imei();
  return imei_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthAesReqData::set_allocated_imei(::std::string* imei) {
  if (imei != NULL) {
    set_has_imei();
  } else {
    clear_has_imei();
  }
  imei_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imei);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ManualAuthAesReqData.IMEI)
}

// optional string SoftType = 4;
bool ManualAuthAesReqData::has_softtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ManualAuthAesReqData::set_has_softtype() {
  _has_bits_[0] |= 0x00000002u;
}
void ManualAuthAesReqData::clear_has_softtype() {
  _has_bits_[0] &= ~0x00000002u;
}
void ManualAuthAesReqData::clear_softtype() {
  softtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_softtype();
}
const ::std::string& ManualAuthAesReqData::softtype() const {
  // @@protoc_insertion_point(field_get:micromsg.ManualAuthAesReqData.SoftType)
  return softtype_.GetNoArena();
}
void ManualAuthAesReqData::set_softtype(const ::std::string& value) {
  set_has_softtype();
  softtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ManualAuthAesReqData.SoftType)
}
#if LANG_CXX11
void ManualAuthAesReqData::set_softtype(::std::string&& value) {
  set_has_softtype();
  softtype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ManualAuthAesReqData.SoftType)
}
#endif
void ManualAuthAesReqData::set_softtype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_softtype();
  softtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ManualAuthAesReqData.SoftType)
}
void ManualAuthAesReqData::set_softtype(const char* value, size_t size) {
  set_has_softtype();
  softtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ManualAuthAesReqData.SoftType)
}
::std::string* ManualAuthAesReqData::mutable_softtype() {
  set_has_softtype();
  // @@protoc_insertion_point(field_mutable:micromsg.ManualAuthAesReqData.SoftType)
  return softtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthAesReqData::release_softtype() {
  // @@protoc_insertion_point(field_release:micromsg.ManualAuthAesReqData.SoftType)
  clear_has_softtype();
  return softtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthAesReqData::set_allocated_softtype(::std::string* softtype) {
  if (softtype != NULL) {
    set_has_softtype();
  } else {
    clear_has_softtype();
  }
  softtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), softtype);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ManualAuthAesReqData.SoftType)
}

// required uint32 BuiltinIPSeq = 5;
bool ManualAuthAesReqData::has_builtinipseq() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void ManualAuthAesReqData::set_has_builtinipseq() {
  _has_bits_[0] |= 0x00040000u;
}
void ManualAuthAesReqData::clear_has_builtinipseq() {
  _has_bits_[0] &= ~0x00040000u;
}
void ManualAuthAesReqData::clear_builtinipseq() {
  builtinipseq_ = 0u;
  clear_has_builtinipseq();
}
::google::protobuf::uint32 ManualAuthAesReqData::builtinipseq() const {
  // @@protoc_insertion_point(field_get:micromsg.ManualAuthAesReqData.BuiltinIPSeq)
  return builtinipseq_;
}
void ManualAuthAesReqData::set_builtinipseq(::google::protobuf::uint32 value) {
  set_has_builtinipseq();
  builtinipseq_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ManualAuthAesReqData.BuiltinIPSeq)
}

// optional string ClientSeqID = 6;
bool ManualAuthAesReqData::has_clientseqid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ManualAuthAesReqData::set_has_clientseqid() {
  _has_bits_[0] |= 0x00000004u;
}
void ManualAuthAesReqData::clear_has_clientseqid() {
  _has_bits_[0] &= ~0x00000004u;
}
void ManualAuthAesReqData::clear_clientseqid() {
  clientseqid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientseqid();
}
const ::std::string& ManualAuthAesReqData::clientseqid() const {
  // @@protoc_insertion_point(field_get:micromsg.ManualAuthAesReqData.ClientSeqID)
  return clientseqid_.GetNoArena();
}
void ManualAuthAesReqData::set_clientseqid(const ::std::string& value) {
  set_has_clientseqid();
  clientseqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ManualAuthAesReqData.ClientSeqID)
}
#if LANG_CXX11
void ManualAuthAesReqData::set_clientseqid(::std::string&& value) {
  set_has_clientseqid();
  clientseqid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ManualAuthAesReqData.ClientSeqID)
}
#endif
void ManualAuthAesReqData::set_clientseqid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientseqid();
  clientseqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ManualAuthAesReqData.ClientSeqID)
}
void ManualAuthAesReqData::set_clientseqid(const char* value, size_t size) {
  set_has_clientseqid();
  clientseqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ManualAuthAesReqData.ClientSeqID)
}
::std::string* ManualAuthAesReqData::mutable_clientseqid() {
  set_has_clientseqid();
  // @@protoc_insertion_point(field_mutable:micromsg.ManualAuthAesReqData.ClientSeqID)
  return clientseqid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthAesReqData::release_clientseqid() {
  // @@protoc_insertion_point(field_release:micromsg.ManualAuthAesReqData.ClientSeqID)
  clear_has_clientseqid();
  return clientseqid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthAesReqData::set_allocated_clientseqid(::std::string* clientseqid) {
  if (clientseqid != NULL) {
    set_has_clientseqid();
  } else {
    clear_has_clientseqid();
  }
  clientseqid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientseqid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ManualAuthAesReqData.ClientSeqID)
}

// optional string Signature = 7;
bool ManualAuthAesReqData::has_signature() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ManualAuthAesReqData::set_has_signature() {
  _has_bits_[0] |= 0x00000008u;
}
void ManualAuthAesReqData::clear_has_signature() {
  _has_bits_[0] &= ~0x00000008u;
}
void ManualAuthAesReqData::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signature();
}
const ::std::string& ManualAuthAesReqData::signature() const {
  // @@protoc_insertion_point(field_get:micromsg.ManualAuthAesReqData.Signature)
  return signature_.GetNoArena();
}
void ManualAuthAesReqData::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ManualAuthAesReqData.Signature)
}
#if LANG_CXX11
void ManualAuthAesReqData::set_signature(::std::string&& value) {
  set_has_signature();
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ManualAuthAesReqData.Signature)
}
#endif
void ManualAuthAesReqData::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ManualAuthAesReqData.Signature)
}
void ManualAuthAesReqData::set_signature(const char* value, size_t size) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ManualAuthAesReqData.Signature)
}
::std::string* ManualAuthAesReqData::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:micromsg.ManualAuthAesReqData.Signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthAesReqData::release_signature() {
  // @@protoc_insertion_point(field_release:micromsg.ManualAuthAesReqData.Signature)
  clear_has_signature();
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthAesReqData::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ManualAuthAesReqData.Signature)
}

// optional string DeviceName = 8;
bool ManualAuthAesReqData::has_devicename() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ManualAuthAesReqData::set_has_devicename() {
  _has_bits_[0] |= 0x00000010u;
}
void ManualAuthAesReqData::clear_has_devicename() {
  _has_bits_[0] &= ~0x00000010u;
}
void ManualAuthAesReqData::clear_devicename() {
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_devicename();
}
const ::std::string& ManualAuthAesReqData::devicename() const {
  // @@protoc_insertion_point(field_get:micromsg.ManualAuthAesReqData.DeviceName)
  return devicename_.GetNoArena();
}
void ManualAuthAesReqData::set_devicename(const ::std::string& value) {
  set_has_devicename();
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ManualAuthAesReqData.DeviceName)
}
#if LANG_CXX11
void ManualAuthAesReqData::set_devicename(::std::string&& value) {
  set_has_devicename();
  devicename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ManualAuthAesReqData.DeviceName)
}
#endif
void ManualAuthAesReqData::set_devicename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_devicename();
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ManualAuthAesReqData.DeviceName)
}
void ManualAuthAesReqData::set_devicename(const char* value, size_t size) {
  set_has_devicename();
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ManualAuthAesReqData.DeviceName)
}
::std::string* ManualAuthAesReqData::mutable_devicename() {
  set_has_devicename();
  // @@protoc_insertion_point(field_mutable:micromsg.ManualAuthAesReqData.DeviceName)
  return devicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthAesReqData::release_devicename() {
  // @@protoc_insertion_point(field_release:micromsg.ManualAuthAesReqData.DeviceName)
  clear_has_devicename();
  return devicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthAesReqData::set_allocated_devicename(::std::string* devicename) {
  if (devicename != NULL) {
    set_has_devicename();
  } else {
    clear_has_devicename();
  }
  devicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicename);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ManualAuthAesReqData.DeviceName)
}

// optional string DeviceType = 9;
bool ManualAuthAesReqData::has_devicetype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ManualAuthAesReqData::set_has_devicetype() {
  _has_bits_[0] |= 0x00000020u;
}
void ManualAuthAesReqData::clear_has_devicetype() {
  _has_bits_[0] &= ~0x00000020u;
}
void ManualAuthAesReqData::clear_devicetype() {
  devicetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_devicetype();
}
const ::std::string& ManualAuthAesReqData::devicetype() const {
  // @@protoc_insertion_point(field_get:micromsg.ManualAuthAesReqData.DeviceType)
  return devicetype_.GetNoArena();
}
void ManualAuthAesReqData::set_devicetype(const ::std::string& value) {
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ManualAuthAesReqData.DeviceType)
}
#if LANG_CXX11
void ManualAuthAesReqData::set_devicetype(::std::string&& value) {
  set_has_devicetype();
  devicetype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ManualAuthAesReqData.DeviceType)
}
#endif
void ManualAuthAesReqData::set_devicetype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ManualAuthAesReqData.DeviceType)
}
void ManualAuthAesReqData::set_devicetype(const char* value, size_t size) {
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ManualAuthAesReqData.DeviceType)
}
::std::string* ManualAuthAesReqData::mutable_devicetype() {
  set_has_devicetype();
  // @@protoc_insertion_point(field_mutable:micromsg.ManualAuthAesReqData.DeviceType)
  return devicetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthAesReqData::release_devicetype() {
  // @@protoc_insertion_point(field_release:micromsg.ManualAuthAesReqData.DeviceType)
  clear_has_devicetype();
  return devicetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthAesReqData::set_allocated_devicetype(::std::string* devicetype) {
  if (devicetype != NULL) {
    set_has_devicetype();
  } else {
    clear_has_devicetype();
  }
  devicetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicetype);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ManualAuthAesReqData.DeviceType)
}

// optional string Language = 10;
bool ManualAuthAesReqData::has_language() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ManualAuthAesReqData::set_has_language() {
  _has_bits_[0] |= 0x00000040u;
}
void ManualAuthAesReqData::clear_has_language() {
  _has_bits_[0] &= ~0x00000040u;
}
void ManualAuthAesReqData::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_language();
}
const ::std::string& ManualAuthAesReqData::language() const {
  // @@protoc_insertion_point(field_get:micromsg.ManualAuthAesReqData.Language)
  return language_.GetNoArena();
}
void ManualAuthAesReqData::set_language(const ::std::string& value) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ManualAuthAesReqData.Language)
}
#if LANG_CXX11
void ManualAuthAesReqData::set_language(::std::string&& value) {
  set_has_language();
  language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ManualAuthAesReqData.Language)
}
#endif
void ManualAuthAesReqData::set_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ManualAuthAesReqData.Language)
}
void ManualAuthAesReqData::set_language(const char* value, size_t size) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ManualAuthAesReqData.Language)
}
::std::string* ManualAuthAesReqData::mutable_language() {
  set_has_language();
  // @@protoc_insertion_point(field_mutable:micromsg.ManualAuthAesReqData.Language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthAesReqData::release_language() {
  // @@protoc_insertion_point(field_release:micromsg.ManualAuthAesReqData.Language)
  clear_has_language();
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthAesReqData::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    set_has_language();
  } else {
    clear_has_language();
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ManualAuthAesReqData.Language)
}

// optional string TimeZone = 11;
bool ManualAuthAesReqData::has_timezone() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ManualAuthAesReqData::set_has_timezone() {
  _has_bits_[0] |= 0x00000080u;
}
void ManualAuthAesReqData::clear_has_timezone() {
  _has_bits_[0] &= ~0x00000080u;
}
void ManualAuthAesReqData::clear_timezone() {
  timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timezone();
}
const ::std::string& ManualAuthAesReqData::timezone() const {
  // @@protoc_insertion_point(field_get:micromsg.ManualAuthAesReqData.TimeZone)
  return timezone_.GetNoArena();
}
void ManualAuthAesReqData::set_timezone(const ::std::string& value) {
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ManualAuthAesReqData.TimeZone)
}
#if LANG_CXX11
void ManualAuthAesReqData::set_timezone(::std::string&& value) {
  set_has_timezone();
  timezone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ManualAuthAesReqData.TimeZone)
}
#endif
void ManualAuthAesReqData::set_timezone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ManualAuthAesReqData.TimeZone)
}
void ManualAuthAesReqData::set_timezone(const char* value, size_t size) {
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ManualAuthAesReqData.TimeZone)
}
::std::string* ManualAuthAesReqData::mutable_timezone() {
  set_has_timezone();
  // @@protoc_insertion_point(field_mutable:micromsg.ManualAuthAesReqData.TimeZone)
  return timezone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthAesReqData::release_timezone() {
  // @@protoc_insertion_point(field_release:micromsg.ManualAuthAesReqData.TimeZone)
  clear_has_timezone();
  return timezone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthAesReqData::set_allocated_timezone(::std::string* timezone) {
  if (timezone != NULL) {
    set_has_timezone();
  } else {
    clear_has_timezone();
  }
  timezone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timezone);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ManualAuthAesReqData.TimeZone)
}

// optional int32 Channel = 13;
bool ManualAuthAesReqData::has_channel() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void ManualAuthAesReqData::set_has_channel() {
  _has_bits_[0] |= 0x00080000u;
}
void ManualAuthAesReqData::clear_has_channel() {
  _has_bits_[0] &= ~0x00080000u;
}
void ManualAuthAesReqData::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
::google::protobuf::int32 ManualAuthAesReqData::channel() const {
  // @@protoc_insertion_point(field_get:micromsg.ManualAuthAesReqData.Channel)
  return channel_;
}
void ManualAuthAesReqData::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ManualAuthAesReqData.Channel)
}

// optional uint32 TimeStamp = 14;
bool ManualAuthAesReqData::has_timestamp() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void ManualAuthAesReqData::set_has_timestamp() {
  _has_bits_[0] |= 0x00100000u;
}
void ManualAuthAesReqData::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00100000u;
}
void ManualAuthAesReqData::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
::google::protobuf::uint32 ManualAuthAesReqData::timestamp() const {
  // @@protoc_insertion_point(field_get:micromsg.ManualAuthAesReqData.TimeStamp)
  return timestamp_;
}
void ManualAuthAesReqData::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ManualAuthAesReqData.TimeStamp)
}

// optional string DeviceBrand = 15;
bool ManualAuthAesReqData::has_devicebrand() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ManualAuthAesReqData::set_has_devicebrand() {
  _has_bits_[0] |= 0x00000100u;
}
void ManualAuthAesReqData::clear_has_devicebrand() {
  _has_bits_[0] &= ~0x00000100u;
}
void ManualAuthAesReqData::clear_devicebrand() {
  devicebrand_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_devicebrand();
}
const ::std::string& ManualAuthAesReqData::devicebrand() const {
  // @@protoc_insertion_point(field_get:micromsg.ManualAuthAesReqData.DeviceBrand)
  return devicebrand_.GetNoArena();
}
void ManualAuthAesReqData::set_devicebrand(const ::std::string& value) {
  set_has_devicebrand();
  devicebrand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ManualAuthAesReqData.DeviceBrand)
}
#if LANG_CXX11
void ManualAuthAesReqData::set_devicebrand(::std::string&& value) {
  set_has_devicebrand();
  devicebrand_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ManualAuthAesReqData.DeviceBrand)
}
#endif
void ManualAuthAesReqData::set_devicebrand(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_devicebrand();
  devicebrand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ManualAuthAesReqData.DeviceBrand)
}
void ManualAuthAesReqData::set_devicebrand(const char* value, size_t size) {
  set_has_devicebrand();
  devicebrand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ManualAuthAesReqData.DeviceBrand)
}
::std::string* ManualAuthAesReqData::mutable_devicebrand() {
  set_has_devicebrand();
  // @@protoc_insertion_point(field_mutable:micromsg.ManualAuthAesReqData.DeviceBrand)
  return devicebrand_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthAesReqData::release_devicebrand() {
  // @@protoc_insertion_point(field_release:micromsg.ManualAuthAesReqData.DeviceBrand)
  clear_has_devicebrand();
  return devicebrand_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthAesReqData::set_allocated_devicebrand(::std::string* devicebrand) {
  if (devicebrand != NULL) {
    set_has_devicebrand();
  } else {
    clear_has_devicebrand();
  }
  devicebrand_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicebrand);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ManualAuthAesReqData.DeviceBrand)
}

// optional string DeviceModel = 16;
bool ManualAuthAesReqData::has_devicemodel() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ManualAuthAesReqData::set_has_devicemodel() {
  _has_bits_[0] |= 0x00000200u;
}
void ManualAuthAesReqData::clear_has_devicemodel() {
  _has_bits_[0] &= ~0x00000200u;
}
void ManualAuthAesReqData::clear_devicemodel() {
  devicemodel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_devicemodel();
}
const ::std::string& ManualAuthAesReqData::devicemodel() const {
  // @@protoc_insertion_point(field_get:micromsg.ManualAuthAesReqData.DeviceModel)
  return devicemodel_.GetNoArena();
}
void ManualAuthAesReqData::set_devicemodel(const ::std::string& value) {
  set_has_devicemodel();
  devicemodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ManualAuthAesReqData.DeviceModel)
}
#if LANG_CXX11
void ManualAuthAesReqData::set_devicemodel(::std::string&& value) {
  set_has_devicemodel();
  devicemodel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ManualAuthAesReqData.DeviceModel)
}
#endif
void ManualAuthAesReqData::set_devicemodel(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_devicemodel();
  devicemodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ManualAuthAesReqData.DeviceModel)
}
void ManualAuthAesReqData::set_devicemodel(const char* value, size_t size) {
  set_has_devicemodel();
  devicemodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ManualAuthAesReqData.DeviceModel)
}
::std::string* ManualAuthAesReqData::mutable_devicemodel() {
  set_has_devicemodel();
  // @@protoc_insertion_point(field_mutable:micromsg.ManualAuthAesReqData.DeviceModel)
  return devicemodel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthAesReqData::release_devicemodel() {
  // @@protoc_insertion_point(field_release:micromsg.ManualAuthAesReqData.DeviceModel)
  clear_has_devicemodel();
  return devicemodel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthAesReqData::set_allocated_devicemodel(::std::string* devicemodel) {
  if (devicemodel != NULL) {
    set_has_devicemodel();
  } else {
    clear_has_devicemodel();
  }
  devicemodel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicemodel);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ManualAuthAesReqData.DeviceModel)
}

// optional string OSType = 17;
bool ManualAuthAesReqData::has_ostype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ManualAuthAesReqData::set_has_ostype() {
  _has_bits_[0] |= 0x00000400u;
}
void ManualAuthAesReqData::clear_has_ostype() {
  _has_bits_[0] &= ~0x00000400u;
}
void ManualAuthAesReqData::clear_ostype() {
  ostype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ostype();
}
const ::std::string& ManualAuthAesReqData::ostype() const {
  // @@protoc_insertion_point(field_get:micromsg.ManualAuthAesReqData.OSType)
  return ostype_.GetNoArena();
}
void ManualAuthAesReqData::set_ostype(const ::std::string& value) {
  set_has_ostype();
  ostype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ManualAuthAesReqData.OSType)
}
#if LANG_CXX11
void ManualAuthAesReqData::set_ostype(::std::string&& value) {
  set_has_ostype();
  ostype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ManualAuthAesReqData.OSType)
}
#endif
void ManualAuthAesReqData::set_ostype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ostype();
  ostype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ManualAuthAesReqData.OSType)
}
void ManualAuthAesReqData::set_ostype(const char* value, size_t size) {
  set_has_ostype();
  ostype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ManualAuthAesReqData.OSType)
}
::std::string* ManualAuthAesReqData::mutable_ostype() {
  set_has_ostype();
  // @@protoc_insertion_point(field_mutable:micromsg.ManualAuthAesReqData.OSType)
  return ostype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthAesReqData::release_ostype() {
  // @@protoc_insertion_point(field_release:micromsg.ManualAuthAesReqData.OSType)
  clear_has_ostype();
  return ostype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthAesReqData::set_allocated_ostype(::std::string* ostype) {
  if (ostype != NULL) {
    set_has_ostype();
  } else {
    clear_has_ostype();
  }
  ostype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ostype);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ManualAuthAesReqData.OSType)
}

// optional string RealCountry = 18;
bool ManualAuthAesReqData::has_realcountry() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ManualAuthAesReqData::set_has_realcountry() {
  _has_bits_[0] |= 0x00000800u;
}
void ManualAuthAesReqData::clear_has_realcountry() {
  _has_bits_[0] &= ~0x00000800u;
}
void ManualAuthAesReqData::clear_realcountry() {
  realcountry_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_realcountry();
}
const ::std::string& ManualAuthAesReqData::realcountry() const {
  // @@protoc_insertion_point(field_get:micromsg.ManualAuthAesReqData.RealCountry)
  return realcountry_.GetNoArena();
}
void ManualAuthAesReqData::set_realcountry(const ::std::string& value) {
  set_has_realcountry();
  realcountry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ManualAuthAesReqData.RealCountry)
}
#if LANG_CXX11
void ManualAuthAesReqData::set_realcountry(::std::string&& value) {
  set_has_realcountry();
  realcountry_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ManualAuthAesReqData.RealCountry)
}
#endif
void ManualAuthAesReqData::set_realcountry(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_realcountry();
  realcountry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ManualAuthAesReqData.RealCountry)
}
void ManualAuthAesReqData::set_realcountry(const char* value, size_t size) {
  set_has_realcountry();
  realcountry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ManualAuthAesReqData.RealCountry)
}
::std::string* ManualAuthAesReqData::mutable_realcountry() {
  set_has_realcountry();
  // @@protoc_insertion_point(field_mutable:micromsg.ManualAuthAesReqData.RealCountry)
  return realcountry_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthAesReqData::release_realcountry() {
  // @@protoc_insertion_point(field_release:micromsg.ManualAuthAesReqData.RealCountry)
  clear_has_realcountry();
  return realcountry_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthAesReqData::set_allocated_realcountry(::std::string* realcountry) {
  if (realcountry != NULL) {
    set_has_realcountry();
  } else {
    clear_has_realcountry();
  }
  realcountry_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), realcountry);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ManualAuthAesReqData.RealCountry)
}

// optional string BundleID = 19;
bool ManualAuthAesReqData::has_bundleid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ManualAuthAesReqData::set_has_bundleid() {
  _has_bits_[0] |= 0x00001000u;
}
void ManualAuthAesReqData::clear_has_bundleid() {
  _has_bits_[0] &= ~0x00001000u;
}
void ManualAuthAesReqData::clear_bundleid() {
  bundleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bundleid();
}
const ::std::string& ManualAuthAesReqData::bundleid() const {
  // @@protoc_insertion_point(field_get:micromsg.ManualAuthAesReqData.BundleID)
  return bundleid_.GetNoArena();
}
void ManualAuthAesReqData::set_bundleid(const ::std::string& value) {
  set_has_bundleid();
  bundleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ManualAuthAesReqData.BundleID)
}
#if LANG_CXX11
void ManualAuthAesReqData::set_bundleid(::std::string&& value) {
  set_has_bundleid();
  bundleid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ManualAuthAesReqData.BundleID)
}
#endif
void ManualAuthAesReqData::set_bundleid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bundleid();
  bundleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ManualAuthAesReqData.BundleID)
}
void ManualAuthAesReqData::set_bundleid(const char* value, size_t size) {
  set_has_bundleid();
  bundleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ManualAuthAesReqData.BundleID)
}
::std::string* ManualAuthAesReqData::mutable_bundleid() {
  set_has_bundleid();
  // @@protoc_insertion_point(field_mutable:micromsg.ManualAuthAesReqData.BundleID)
  return bundleid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthAesReqData::release_bundleid() {
  // @@protoc_insertion_point(field_release:micromsg.ManualAuthAesReqData.BundleID)
  clear_has_bundleid();
  return bundleid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthAesReqData::set_allocated_bundleid(::std::string* bundleid) {
  if (bundleid != NULL) {
    set_has_bundleid();
  } else {
    clear_has_bundleid();
  }
  bundleid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bundleid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ManualAuthAesReqData.BundleID)
}

// optional string AdSource = 20;
bool ManualAuthAesReqData::has_adsource() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ManualAuthAesReqData::set_has_adsource() {
  _has_bits_[0] |= 0x00002000u;
}
void ManualAuthAesReqData::clear_has_adsource() {
  _has_bits_[0] &= ~0x00002000u;
}
void ManualAuthAesReqData::clear_adsource() {
  adsource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_adsource();
}
const ::std::string& ManualAuthAesReqData::adsource() const {
  // @@protoc_insertion_point(field_get:micromsg.ManualAuthAesReqData.AdSource)
  return adsource_.GetNoArena();
}
void ManualAuthAesReqData::set_adsource(const ::std::string& value) {
  set_has_adsource();
  adsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ManualAuthAesReqData.AdSource)
}
#if LANG_CXX11
void ManualAuthAesReqData::set_adsource(::std::string&& value) {
  set_has_adsource();
  adsource_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ManualAuthAesReqData.AdSource)
}
#endif
void ManualAuthAesReqData::set_adsource(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_adsource();
  adsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ManualAuthAesReqData.AdSource)
}
void ManualAuthAesReqData::set_adsource(const char* value, size_t size) {
  set_has_adsource();
  adsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ManualAuthAesReqData.AdSource)
}
::std::string* ManualAuthAesReqData::mutable_adsource() {
  set_has_adsource();
  // @@protoc_insertion_point(field_mutable:micromsg.ManualAuthAesReqData.AdSource)
  return adsource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthAesReqData::release_adsource() {
  // @@protoc_insertion_point(field_release:micromsg.ManualAuthAesReqData.AdSource)
  clear_has_adsource();
  return adsource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthAesReqData::set_allocated_adsource(::std::string* adsource) {
  if (adsource != NULL) {
    set_has_adsource();
  } else {
    clear_has_adsource();
  }
  adsource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), adsource);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ManualAuthAesReqData.AdSource)
}

// optional string IPhoneVer = 21;
bool ManualAuthAesReqData::has_iphonever() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ManualAuthAesReqData::set_has_iphonever() {
  _has_bits_[0] |= 0x00004000u;
}
void ManualAuthAesReqData::clear_has_iphonever() {
  _has_bits_[0] &= ~0x00004000u;
}
void ManualAuthAesReqData::clear_iphonever() {
  iphonever_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_iphonever();
}
const ::std::string& ManualAuthAesReqData::iphonever() const {
  // @@protoc_insertion_point(field_get:micromsg.ManualAuthAesReqData.IPhoneVer)
  return iphonever_.GetNoArena();
}
void ManualAuthAesReqData::set_iphonever(const ::std::string& value) {
  set_has_iphonever();
  iphonever_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ManualAuthAesReqData.IPhoneVer)
}
#if LANG_CXX11
void ManualAuthAesReqData::set_iphonever(::std::string&& value) {
  set_has_iphonever();
  iphonever_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ManualAuthAesReqData.IPhoneVer)
}
#endif
void ManualAuthAesReqData::set_iphonever(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_iphonever();
  iphonever_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ManualAuthAesReqData.IPhoneVer)
}
void ManualAuthAesReqData::set_iphonever(const char* value, size_t size) {
  set_has_iphonever();
  iphonever_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ManualAuthAesReqData.IPhoneVer)
}
::std::string* ManualAuthAesReqData::mutable_iphonever() {
  set_has_iphonever();
  // @@protoc_insertion_point(field_mutable:micromsg.ManualAuthAesReqData.IPhoneVer)
  return iphonever_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthAesReqData::release_iphonever() {
  // @@protoc_insertion_point(field_release:micromsg.ManualAuthAesReqData.IPhoneVer)
  clear_has_iphonever();
  return iphonever_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthAesReqData::set_allocated_iphonever(::std::string* iphonever) {
  if (iphonever != NULL) {
    set_has_iphonever();
  } else {
    clear_has_iphonever();
  }
  iphonever_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iphonever);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ManualAuthAesReqData.IPhoneVer)
}

// required uint32 InputType = 22;
bool ManualAuthAesReqData::has_inputtype() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void ManualAuthAesReqData::set_has_inputtype() {
  _has_bits_[0] |= 0x00200000u;
}
void ManualAuthAesReqData::clear_has_inputtype() {
  _has_bits_[0] &= ~0x00200000u;
}
void ManualAuthAesReqData::clear_inputtype() {
  inputtype_ = 0u;
  clear_has_inputtype();
}
::google::protobuf::uint32 ManualAuthAesReqData::inputtype() const {
  // @@protoc_insertion_point(field_get:micromsg.ManualAuthAesReqData.InputType)
  return inputtype_;
}
void ManualAuthAesReqData::set_inputtype(::google::protobuf::uint32 value) {
  set_has_inputtype();
  inputtype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ManualAuthAesReqData.InputType)
}

// optional .micromsg.SKBuiltinBuffer_t Clientcheckdat = 23;
bool ManualAuthAesReqData::has_clientcheckdat() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void ManualAuthAesReqData::set_has_clientcheckdat() {
  _has_bits_[0] |= 0x00020000u;
}
void ManualAuthAesReqData::clear_has_clientcheckdat() {
  _has_bits_[0] &= ~0x00020000u;
}
void ManualAuthAesReqData::clear_clientcheckdat() {
  if (clientcheckdat_ != NULL) clientcheckdat_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_clientcheckdat();
}
const ::micromsg::SKBuiltinBuffer_t& ManualAuthAesReqData::clientcheckdat() const {
  // @@protoc_insertion_point(field_get:micromsg.ManualAuthAesReqData.Clientcheckdat)
  return clientcheckdat_ != NULL ? *clientcheckdat_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* ManualAuthAesReqData::mutable_clientcheckdat() {
  set_has_clientcheckdat();
  if (clientcheckdat_ == NULL) {
    clientcheckdat_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ManualAuthAesReqData.Clientcheckdat)
  return clientcheckdat_;
}
::micromsg::SKBuiltinBuffer_t* ManualAuthAesReqData::release_clientcheckdat() {
  // @@protoc_insertion_point(field_release:micromsg.ManualAuthAesReqData.Clientcheckdat)
  clear_has_clientcheckdat();
  ::micromsg::SKBuiltinBuffer_t* temp = clientcheckdat_;
  clientcheckdat_ = NULL;
  return temp;
}
void ManualAuthAesReqData::set_allocated_clientcheckdat(::micromsg::SKBuiltinBuffer_t* clientcheckdat) {
  delete clientcheckdat_;
  clientcheckdat_ = clientcheckdat;
  if (clientcheckdat) {
    set_has_clientcheckdat();
  } else {
    clear_has_clientcheckdat();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ManualAuthAesReqData.Clientcheckdat)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ManualAuthRequest::kRsaReqDataFieldNumber;
const int ManualAuthRequest::kAesReqDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ManualAuthRequest::ManualAuthRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ManualAuthRequest)
}
ManualAuthRequest::ManualAuthRequest(const ManualAuthRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_rsareqdata()) {
    rsareqdata_ = new ::micromsg::ManualAuthRsaReqData(*from.rsareqdata_);
  } else {
    rsareqdata_ = NULL;
  }
  if (from.has_aesreqdata()) {
    aesreqdata_ = new ::micromsg::ManualAuthAesReqData(*from.aesreqdata_);
  } else {
    aesreqdata_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.ManualAuthRequest)
}

void ManualAuthRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&rsareqdata_, 0, reinterpret_cast<char*>(&aesreqdata_) -
    reinterpret_cast<char*>(&rsareqdata_) + sizeof(aesreqdata_));
}

ManualAuthRequest::~ManualAuthRequest() {
  // @@protoc_insertion_point(destructor:micromsg.ManualAuthRequest)
  SharedDtor();
}

void ManualAuthRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete rsareqdata_;
  }
  if (this != internal_default_instance()) {
    delete aesreqdata_;
  }
}

void ManualAuthRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManualAuthRequest::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ManualAuthRequest& ManualAuthRequest::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

ManualAuthRequest* ManualAuthRequest::New(::google::protobuf::Arena* arena) const {
  ManualAuthRequest* n = new ManualAuthRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ManualAuthRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ManualAuthRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_rsareqdata()) {
      GOOGLE_DCHECK(rsareqdata_ != NULL);
      rsareqdata_->::micromsg::ManualAuthRsaReqData::Clear();
    }
    if (has_aesreqdata()) {
      GOOGLE_DCHECK(aesreqdata_ != NULL);
      aesreqdata_->::micromsg::ManualAuthAesReqData::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ManualAuthRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ManualAuthRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.ManualAuthRsaReqData RsaReqData = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rsareqdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.ManualAuthAesReqData AesReqData = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aesreqdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ManualAuthRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ManualAuthRequest)
  return false;
#undef DO_
}

void ManualAuthRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ManualAuthRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.ManualAuthRsaReqData RsaReqData = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->rsareqdata_, output);
  }

  // required .micromsg.ManualAuthAesReqData AesReqData = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->aesreqdata_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ManualAuthRequest)
}

::google::protobuf::uint8* ManualAuthRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ManualAuthRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.ManualAuthRsaReqData RsaReqData = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->rsareqdata_, deterministic, target);
  }

  // required .micromsg.ManualAuthAesReqData AesReqData = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->aesreqdata_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ManualAuthRequest)
  return target;
}

size_t ManualAuthRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.ManualAuthRequest)
  size_t total_size = 0;

  if (has_rsareqdata()) {
    // required .micromsg.ManualAuthRsaReqData RsaReqData = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rsareqdata_);
  }

  if (has_aesreqdata()) {
    // required .micromsg.ManualAuthAesReqData AesReqData = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->aesreqdata_);
  }

  return total_size;
}
size_t ManualAuthRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ManualAuthRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.ManualAuthRsaReqData RsaReqData = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rsareqdata_);

    // required .micromsg.ManualAuthAesReqData AesReqData = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->aesreqdata_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManualAuthRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ManualAuthRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ManualAuthRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ManualAuthRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ManualAuthRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ManualAuthRequest)
    MergeFrom(*source);
  }
}

void ManualAuthRequest::MergeFrom(const ManualAuthRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ManualAuthRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_rsareqdata()->::micromsg::ManualAuthRsaReqData::MergeFrom(from.rsareqdata());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_aesreqdata()->::micromsg::ManualAuthAesReqData::MergeFrom(from.aesreqdata());
    }
  }
}

void ManualAuthRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ManualAuthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualAuthRequest::CopyFrom(const ManualAuthRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ManualAuthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualAuthRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_rsareqdata()) {
    if (!this->rsareqdata_->IsInitialized()) return false;
  }
  if (has_aesreqdata()) {
    if (!this->aesreqdata_->IsInitialized()) return false;
  }
  return true;
}

void ManualAuthRequest::Swap(ManualAuthRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ManualAuthRequest::InternalSwap(ManualAuthRequest* other) {
  std::swap(rsareqdata_, other->rsareqdata_);
  std::swap(aesreqdata_, other->aesreqdata_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ManualAuthRequest::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ManualAuthRequest

// required .micromsg.ManualAuthRsaReqData RsaReqData = 1;
bool ManualAuthRequest::has_rsareqdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ManualAuthRequest::set_has_rsareqdata() {
  _has_bits_[0] |= 0x00000001u;
}
void ManualAuthRequest::clear_has_rsareqdata() {
  _has_bits_[0] &= ~0x00000001u;
}
void ManualAuthRequest::clear_rsareqdata() {
  if (rsareqdata_ != NULL) rsareqdata_->::micromsg::ManualAuthRsaReqData::Clear();
  clear_has_rsareqdata();
}
const ::micromsg::ManualAuthRsaReqData& ManualAuthRequest::rsareqdata() const {
  // @@protoc_insertion_point(field_get:micromsg.ManualAuthRequest.RsaReqData)
  return rsareqdata_ != NULL ? *rsareqdata_
                         : *::micromsg::ManualAuthRsaReqData::internal_default_instance();
}
::micromsg::ManualAuthRsaReqData* ManualAuthRequest::mutable_rsareqdata() {
  set_has_rsareqdata();
  if (rsareqdata_ == NULL) {
    rsareqdata_ = new ::micromsg::ManualAuthRsaReqData;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ManualAuthRequest.RsaReqData)
  return rsareqdata_;
}
::micromsg::ManualAuthRsaReqData* ManualAuthRequest::release_rsareqdata() {
  // @@protoc_insertion_point(field_release:micromsg.ManualAuthRequest.RsaReqData)
  clear_has_rsareqdata();
  ::micromsg::ManualAuthRsaReqData* temp = rsareqdata_;
  rsareqdata_ = NULL;
  return temp;
}
void ManualAuthRequest::set_allocated_rsareqdata(::micromsg::ManualAuthRsaReqData* rsareqdata) {
  delete rsareqdata_;
  rsareqdata_ = rsareqdata;
  if (rsareqdata) {
    set_has_rsareqdata();
  } else {
    clear_has_rsareqdata();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ManualAuthRequest.RsaReqData)
}

// required .micromsg.ManualAuthAesReqData AesReqData = 2;
bool ManualAuthRequest::has_aesreqdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ManualAuthRequest::set_has_aesreqdata() {
  _has_bits_[0] |= 0x00000002u;
}
void ManualAuthRequest::clear_has_aesreqdata() {
  _has_bits_[0] &= ~0x00000002u;
}
void ManualAuthRequest::clear_aesreqdata() {
  if (aesreqdata_ != NULL) aesreqdata_->::micromsg::ManualAuthAesReqData::Clear();
  clear_has_aesreqdata();
}
const ::micromsg::ManualAuthAesReqData& ManualAuthRequest::aesreqdata() const {
  // @@protoc_insertion_point(field_get:micromsg.ManualAuthRequest.AesReqData)
  return aesreqdata_ != NULL ? *aesreqdata_
                         : *::micromsg::ManualAuthAesReqData::internal_default_instance();
}
::micromsg::ManualAuthAesReqData* ManualAuthRequest::mutable_aesreqdata() {
  set_has_aesreqdata();
  if (aesreqdata_ == NULL) {
    aesreqdata_ = new ::micromsg::ManualAuthAesReqData;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ManualAuthRequest.AesReqData)
  return aesreqdata_;
}
::micromsg::ManualAuthAesReqData* ManualAuthRequest::release_aesreqdata() {
  // @@protoc_insertion_point(field_release:micromsg.ManualAuthRequest.AesReqData)
  clear_has_aesreqdata();
  ::micromsg::ManualAuthAesReqData* temp = aesreqdata_;
  aesreqdata_ = NULL;
  return temp;
}
void ManualAuthRequest::set_allocated_aesreqdata(::micromsg::ManualAuthAesReqData* aesreqdata) {
  delete aesreqdata_;
  aesreqdata_ = aesreqdata;
  if (aesreqdata) {
    set_has_aesreqdata();
  } else {
    clear_has_aesreqdata();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ManualAuthRequest.AesReqData)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutoAuthRsaReqData::kAesEncryptKeyFieldNumber;
const int AutoAuthRsaReqData::kCliPubECDHKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AutoAuthRsaReqData::AutoAuthRsaReqData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.AutoAuthRsaReqData)
}
AutoAuthRsaReqData::AutoAuthRsaReqData(const AutoAuthRsaReqData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_aesencryptkey()) {
    aesencryptkey_ = new ::micromsg::SKBuiltinBuffer_t(*from.aesencryptkey_);
  } else {
    aesencryptkey_ = NULL;
  }
  if (from.has_clipubecdhkey()) {
    clipubecdhkey_ = new ::micromsg::ECDHKey(*from.clipubecdhkey_);
  } else {
    clipubecdhkey_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.AutoAuthRsaReqData)
}

void AutoAuthRsaReqData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&aesencryptkey_, 0, reinterpret_cast<char*>(&clipubecdhkey_) -
    reinterpret_cast<char*>(&aesencryptkey_) + sizeof(clipubecdhkey_));
}

AutoAuthRsaReqData::~AutoAuthRsaReqData() {
  // @@protoc_insertion_point(destructor:micromsg.AutoAuthRsaReqData)
  SharedDtor();
}

void AutoAuthRsaReqData::SharedDtor() {
  if (this != internal_default_instance()) {
    delete aesencryptkey_;
  }
  if (this != internal_default_instance()) {
    delete clipubecdhkey_;
  }
}

void AutoAuthRsaReqData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AutoAuthRsaReqData::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AutoAuthRsaReqData& AutoAuthRsaReqData::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

AutoAuthRsaReqData* AutoAuthRsaReqData::New(::google::protobuf::Arena* arena) const {
  AutoAuthRsaReqData* n = new AutoAuthRsaReqData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AutoAuthRsaReqData::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.AutoAuthRsaReqData)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_aesencryptkey()) {
      GOOGLE_DCHECK(aesencryptkey_ != NULL);
      aesencryptkey_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_clipubecdhkey()) {
      GOOGLE_DCHECK(clipubecdhkey_ != NULL);
      clipubecdhkey_->::micromsg::ECDHKey::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AutoAuthRsaReqData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.AutoAuthRsaReqData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.SKBuiltinBuffer_t AesEncryptKey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aesencryptkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.ECDHKey CliPubECDHKey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clipubecdhkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.AutoAuthRsaReqData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.AutoAuthRsaReqData)
  return false;
#undef DO_
}

void AutoAuthRsaReqData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.AutoAuthRsaReqData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinBuffer_t AesEncryptKey = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->aesencryptkey_, output);
  }

  // optional .micromsg.ECDHKey CliPubECDHKey = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->clipubecdhkey_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.AutoAuthRsaReqData)
}

::google::protobuf::uint8* AutoAuthRsaReqData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.AutoAuthRsaReqData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinBuffer_t AesEncryptKey = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->aesencryptkey_, deterministic, target);
  }

  // optional .micromsg.ECDHKey CliPubECDHKey = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->clipubecdhkey_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.AutoAuthRsaReqData)
  return target;
}

size_t AutoAuthRsaReqData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.AutoAuthRsaReqData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.SKBuiltinBuffer_t AesEncryptKey = 2;
  if (has_aesencryptkey()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->aesencryptkey_);
  }
  // optional .micromsg.ECDHKey CliPubECDHKey = 3;
  if (has_clipubecdhkey()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->clipubecdhkey_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutoAuthRsaReqData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.AutoAuthRsaReqData)
  GOOGLE_DCHECK_NE(&from, this);
  const AutoAuthRsaReqData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AutoAuthRsaReqData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.AutoAuthRsaReqData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.AutoAuthRsaReqData)
    MergeFrom(*source);
  }
}

void AutoAuthRsaReqData::MergeFrom(const AutoAuthRsaReqData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.AutoAuthRsaReqData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_aesencryptkey()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.aesencryptkey());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_clipubecdhkey()->::micromsg::ECDHKey::MergeFrom(from.clipubecdhkey());
    }
  }
}

void AutoAuthRsaReqData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.AutoAuthRsaReqData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoAuthRsaReqData::CopyFrom(const AutoAuthRsaReqData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.AutoAuthRsaReqData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoAuthRsaReqData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_aesencryptkey()) {
    if (!this->aesencryptkey_->IsInitialized()) return false;
  }
  if (has_clipubecdhkey()) {
    if (!this->clipubecdhkey_->IsInitialized()) return false;
  }
  return true;
}

void AutoAuthRsaReqData::Swap(AutoAuthRsaReqData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AutoAuthRsaReqData::InternalSwap(AutoAuthRsaReqData* other) {
  std::swap(aesencryptkey_, other->aesencryptkey_);
  std::swap(clipubecdhkey_, other->clipubecdhkey_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AutoAuthRsaReqData::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AutoAuthRsaReqData

// required .micromsg.SKBuiltinBuffer_t AesEncryptKey = 2;
bool AutoAuthRsaReqData::has_aesencryptkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AutoAuthRsaReqData::set_has_aesencryptkey() {
  _has_bits_[0] |= 0x00000001u;
}
void AutoAuthRsaReqData::clear_has_aesencryptkey() {
  _has_bits_[0] &= ~0x00000001u;
}
void AutoAuthRsaReqData::clear_aesencryptkey() {
  if (aesencryptkey_ != NULL) aesencryptkey_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_aesencryptkey();
}
const ::micromsg::SKBuiltinBuffer_t& AutoAuthRsaReqData::aesencryptkey() const {
  // @@protoc_insertion_point(field_get:micromsg.AutoAuthRsaReqData.AesEncryptKey)
  return aesencryptkey_ != NULL ? *aesencryptkey_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* AutoAuthRsaReqData::mutable_aesencryptkey() {
  set_has_aesencryptkey();
  if (aesencryptkey_ == NULL) {
    aesencryptkey_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AutoAuthRsaReqData.AesEncryptKey)
  return aesencryptkey_;
}
::micromsg::SKBuiltinBuffer_t* AutoAuthRsaReqData::release_aesencryptkey() {
  // @@protoc_insertion_point(field_release:micromsg.AutoAuthRsaReqData.AesEncryptKey)
  clear_has_aesencryptkey();
  ::micromsg::SKBuiltinBuffer_t* temp = aesencryptkey_;
  aesencryptkey_ = NULL;
  return temp;
}
void AutoAuthRsaReqData::set_allocated_aesencryptkey(::micromsg::SKBuiltinBuffer_t* aesencryptkey) {
  delete aesencryptkey_;
  aesencryptkey_ = aesencryptkey;
  if (aesencryptkey) {
    set_has_aesencryptkey();
  } else {
    clear_has_aesencryptkey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AutoAuthRsaReqData.AesEncryptKey)
}

// optional .micromsg.ECDHKey CliPubECDHKey = 3;
bool AutoAuthRsaReqData::has_clipubecdhkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AutoAuthRsaReqData::set_has_clipubecdhkey() {
  _has_bits_[0] |= 0x00000002u;
}
void AutoAuthRsaReqData::clear_has_clipubecdhkey() {
  _has_bits_[0] &= ~0x00000002u;
}
void AutoAuthRsaReqData::clear_clipubecdhkey() {
  if (clipubecdhkey_ != NULL) clipubecdhkey_->::micromsg::ECDHKey::Clear();
  clear_has_clipubecdhkey();
}
const ::micromsg::ECDHKey& AutoAuthRsaReqData::clipubecdhkey() const {
  // @@protoc_insertion_point(field_get:micromsg.AutoAuthRsaReqData.CliPubECDHKey)
  return clipubecdhkey_ != NULL ? *clipubecdhkey_
                         : *::micromsg::ECDHKey::internal_default_instance();
}
::micromsg::ECDHKey* AutoAuthRsaReqData::mutable_clipubecdhkey() {
  set_has_clipubecdhkey();
  if (clipubecdhkey_ == NULL) {
    clipubecdhkey_ = new ::micromsg::ECDHKey;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AutoAuthRsaReqData.CliPubECDHKey)
  return clipubecdhkey_;
}
::micromsg::ECDHKey* AutoAuthRsaReqData::release_clipubecdhkey() {
  // @@protoc_insertion_point(field_release:micromsg.AutoAuthRsaReqData.CliPubECDHKey)
  clear_has_clipubecdhkey();
  ::micromsg::ECDHKey* temp = clipubecdhkey_;
  clipubecdhkey_ = NULL;
  return temp;
}
void AutoAuthRsaReqData::set_allocated_clipubecdhkey(::micromsg::ECDHKey* clipubecdhkey) {
  delete clipubecdhkey_;
  clipubecdhkey_ = clipubecdhkey;
  if (clipubecdhkey) {
    set_has_clipubecdhkey();
  } else {
    clear_has_clipubecdhkey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AutoAuthRsaReqData.CliPubECDHKey)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutoAuthKey::kEncryptKeyFieldNumber;
const int AutoAuthKey::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AutoAuthKey::AutoAuthKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.AutoAuthKey)
}
AutoAuthKey::AutoAuthKey(const AutoAuthKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_encryptkey()) {
    encryptkey_ = new ::micromsg::SKBuiltinBuffer_t(*from.encryptkey_);
  } else {
    encryptkey_ = NULL;
  }
  if (from.has_key()) {
    key_ = new ::micromsg::SKBuiltinBuffer_t(*from.key_);
  } else {
    key_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.AutoAuthKey)
}

void AutoAuthKey::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&encryptkey_, 0, reinterpret_cast<char*>(&key_) -
    reinterpret_cast<char*>(&encryptkey_) + sizeof(key_));
}

AutoAuthKey::~AutoAuthKey() {
  // @@protoc_insertion_point(destructor:micromsg.AutoAuthKey)
  SharedDtor();
}

void AutoAuthKey::SharedDtor() {
  if (this != internal_default_instance()) {
    delete encryptkey_;
  }
  if (this != internal_default_instance()) {
    delete key_;
  }
}

void AutoAuthKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AutoAuthKey::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AutoAuthKey& AutoAuthKey::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

AutoAuthKey* AutoAuthKey::New(::google::protobuf::Arena* arena) const {
  AutoAuthKey* n = new AutoAuthKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AutoAuthKey::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.AutoAuthKey)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_encryptkey()) {
      GOOGLE_DCHECK(encryptkey_ != NULL);
      encryptkey_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_key()) {
      GOOGLE_DCHECK(key_ != NULL);
      key_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AutoAuthKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.AutoAuthKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.SKBuiltinBuffer_t EncryptKey = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_encryptkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t Key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.AutoAuthKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.AutoAuthKey)
  return false;
#undef DO_
}

void AutoAuthKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.AutoAuthKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinBuffer_t EncryptKey = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->encryptkey_, output);
  }

  // required .micromsg.SKBuiltinBuffer_t Key = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->key_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.AutoAuthKey)
}

::google::protobuf::uint8* AutoAuthKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.AutoAuthKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinBuffer_t EncryptKey = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->encryptkey_, deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t Key = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->key_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.AutoAuthKey)
  return target;
}

size_t AutoAuthKey::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.AutoAuthKey)
  size_t total_size = 0;

  if (has_encryptkey()) {
    // required .micromsg.SKBuiltinBuffer_t EncryptKey = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->encryptkey_);
  }

  if (has_key()) {
    // required .micromsg.SKBuiltinBuffer_t Key = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  return total_size;
}
size_t AutoAuthKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.AutoAuthKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.SKBuiltinBuffer_t EncryptKey = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->encryptkey_);

    // required .micromsg.SKBuiltinBuffer_t Key = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutoAuthKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.AutoAuthKey)
  GOOGLE_DCHECK_NE(&from, this);
  const AutoAuthKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AutoAuthKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.AutoAuthKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.AutoAuthKey)
    MergeFrom(*source);
  }
}

void AutoAuthKey::MergeFrom(const AutoAuthKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.AutoAuthKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_encryptkey()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.encryptkey());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_key()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.key());
    }
  }
}

void AutoAuthKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.AutoAuthKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoAuthKey::CopyFrom(const AutoAuthKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.AutoAuthKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoAuthKey::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_encryptkey()) {
    if (!this->encryptkey_->IsInitialized()) return false;
  }
  if (has_key()) {
    if (!this->key_->IsInitialized()) return false;
  }
  return true;
}

void AutoAuthKey::Swap(AutoAuthKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AutoAuthKey::InternalSwap(AutoAuthKey* other) {
  std::swap(encryptkey_, other->encryptkey_);
  std::swap(key_, other->key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AutoAuthKey::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AutoAuthKey

// required .micromsg.SKBuiltinBuffer_t EncryptKey = 1;
bool AutoAuthKey::has_encryptkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AutoAuthKey::set_has_encryptkey() {
  _has_bits_[0] |= 0x00000001u;
}
void AutoAuthKey::clear_has_encryptkey() {
  _has_bits_[0] &= ~0x00000001u;
}
void AutoAuthKey::clear_encryptkey() {
  if (encryptkey_ != NULL) encryptkey_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_encryptkey();
}
const ::micromsg::SKBuiltinBuffer_t& AutoAuthKey::encryptkey() const {
  // @@protoc_insertion_point(field_get:micromsg.AutoAuthKey.EncryptKey)
  return encryptkey_ != NULL ? *encryptkey_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* AutoAuthKey::mutable_encryptkey() {
  set_has_encryptkey();
  if (encryptkey_ == NULL) {
    encryptkey_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AutoAuthKey.EncryptKey)
  return encryptkey_;
}
::micromsg::SKBuiltinBuffer_t* AutoAuthKey::release_encryptkey() {
  // @@protoc_insertion_point(field_release:micromsg.AutoAuthKey.EncryptKey)
  clear_has_encryptkey();
  ::micromsg::SKBuiltinBuffer_t* temp = encryptkey_;
  encryptkey_ = NULL;
  return temp;
}
void AutoAuthKey::set_allocated_encryptkey(::micromsg::SKBuiltinBuffer_t* encryptkey) {
  delete encryptkey_;
  encryptkey_ = encryptkey;
  if (encryptkey) {
    set_has_encryptkey();
  } else {
    clear_has_encryptkey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AutoAuthKey.EncryptKey)
}

// required .micromsg.SKBuiltinBuffer_t Key = 2;
bool AutoAuthKey::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AutoAuthKey::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
void AutoAuthKey::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void AutoAuthKey::clear_key() {
  if (key_ != NULL) key_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_key();
}
const ::micromsg::SKBuiltinBuffer_t& AutoAuthKey::key() const {
  // @@protoc_insertion_point(field_get:micromsg.AutoAuthKey.Key)
  return key_ != NULL ? *key_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* AutoAuthKey::mutable_key() {
  set_has_key();
  if (key_ == NULL) {
    key_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AutoAuthKey.Key)
  return key_;
}
::micromsg::SKBuiltinBuffer_t* AutoAuthKey::release_key() {
  // @@protoc_insertion_point(field_release:micromsg.AutoAuthKey.Key)
  clear_has_key();
  ::micromsg::SKBuiltinBuffer_t* temp = key_;
  key_ = NULL;
  return temp;
}
void AutoAuthKey::set_allocated_key(::micromsg::SKBuiltinBuffer_t* key) {
  delete key_;
  key_ = key;
  if (key) {
    set_has_key();
  } else {
    clear_has_key();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AutoAuthKey.Key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutoAuthAesReqData::kBaseRequestFieldNumber;
const int AutoAuthAesReqData::kBaseReqInfoFieldNumber;
const int AutoAuthAesReqData::kAutoAuthKeyFieldNumber;
const int AutoAuthAesReqData::kIMEIFieldNumber;
const int AutoAuthAesReqData::kSoftTypeFieldNumber;
const int AutoAuthAesReqData::kBuiltinIPSeqFieldNumber;
const int AutoAuthAesReqData::kClientSeqIDFieldNumber;
const int AutoAuthAesReqData::kSignatureFieldNumber;
const int AutoAuthAesReqData::kDeviceNameFieldNumber;
const int AutoAuthAesReqData::kDeviceTypeFieldNumber;
const int AutoAuthAesReqData::kLanguageFieldNumber;
const int AutoAuthAesReqData::kTimeZoneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AutoAuthAesReqData::AutoAuthAesReqData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.AutoAuthAesReqData)
}
AutoAuthAesReqData::AutoAuthAesReqData(const AutoAuthAesReqData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  imei_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_imei()) {
    imei_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imei_);
  }
  softtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_softtype()) {
    softtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.softtype_);
  }
  clientseqid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientseqid()) {
    clientseqid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientseqid_);
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  devicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_devicename()) {
    devicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicename_);
  }
  devicetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_devicetype()) {
    devicetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicetype_);
  }
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_language()) {
    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  timezone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_timezone()) {
    timezone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timezone_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_basereqinfo()) {
    basereqinfo_ = new ::micromsg::BaseAuthReqInfo(*from.basereqinfo_);
  } else {
    basereqinfo_ = NULL;
  }
  if (from.has_autoauthkey()) {
    autoauthkey_ = new ::micromsg::SKBuiltinBuffer_t(*from.autoauthkey_);
  } else {
    autoauthkey_ = NULL;
  }
  builtinipseq_ = from.builtinipseq_;
  // @@protoc_insertion_point(copy_constructor:micromsg.AutoAuthAesReqData)
}

void AutoAuthAesReqData::SharedCtor() {
  _cached_size_ = 0;
  imei_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  softtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientseqid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&builtinipseq_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(builtinipseq_));
}

AutoAuthAesReqData::~AutoAuthAesReqData() {
  // @@protoc_insertion_point(destructor:micromsg.AutoAuthAesReqData)
  SharedDtor();
}

void AutoAuthAesReqData::SharedDtor() {
  imei_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  softtype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientseqid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicetype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete basereqinfo_;
  }
  if (this != internal_default_instance()) {
    delete autoauthkey_;
  }
}

void AutoAuthAesReqData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AutoAuthAesReqData::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AutoAuthAesReqData& AutoAuthAesReqData::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

AutoAuthAesReqData* AutoAuthAesReqData::New(::google::protobuf::Arena* arena) const {
  AutoAuthAesReqData* n = new AutoAuthAesReqData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AutoAuthAesReqData::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.AutoAuthAesReqData)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_imei()) {
      GOOGLE_DCHECK(!imei_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*imei_.UnsafeRawStringPointer())->clear();
    }
    if (has_softtype()) {
      GOOGLE_DCHECK(!softtype_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*softtype_.UnsafeRawStringPointer())->clear();
    }
    if (has_clientseqid()) {
      GOOGLE_DCHECK(!clientseqid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*clientseqid_.UnsafeRawStringPointer())->clear();
    }
    if (has_signature()) {
      GOOGLE_DCHECK(!signature_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*signature_.UnsafeRawStringPointer())->clear();
    }
    if (has_devicename()) {
      GOOGLE_DCHECK(!devicename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*devicename_.UnsafeRawStringPointer())->clear();
    }
    if (has_devicetype()) {
      GOOGLE_DCHECK(!devicetype_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*devicetype_.UnsafeRawStringPointer())->clear();
    }
    if (has_language()) {
      GOOGLE_DCHECK(!language_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*language_.UnsafeRawStringPointer())->clear();
    }
    if (has_timezone()) {
      GOOGLE_DCHECK(!timezone_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*timezone_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[8 / 32] & 1792u) {
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_basereqinfo()) {
      GOOGLE_DCHECK(basereqinfo_ != NULL);
      basereqinfo_->::micromsg::BaseAuthReqInfo::Clear();
    }
    if (has_autoauthkey()) {
      GOOGLE_DCHECK(autoauthkey_ != NULL);
      autoauthkey_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  builtinipseq_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AutoAuthAesReqData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.AutoAuthAesReqData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.BaseAuthReqInfo BaseReqInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basereqinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t AutoAuthKey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_autoauthkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string IMEI = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imei()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imei().data(), this->imei().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.AutoAuthAesReqData.IMEI");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string SoftType = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_softtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->softtype().data(), this->softtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.AutoAuthAesReqData.SoftType");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 BuiltinIPSeq = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_builtinipseq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &builtinipseq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ClientSeqID = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientseqid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientseqid().data(), this->clientseqid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.AutoAuthAesReqData.ClientSeqID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Signature = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.AutoAuthAesReqData.Signature");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string DeviceName = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devicename().data(), this->devicename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.AutoAuthAesReqData.DeviceName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string DeviceType = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devicetype().data(), this->devicetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.AutoAuthAesReqData.DeviceType");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Language = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.AutoAuthAesReqData.Language");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string TimeZone = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timezone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->timezone().data(), this->timezone().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.AutoAuthAesReqData.TimeZone");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.AutoAuthAesReqData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.AutoAuthAesReqData)
  return false;
#undef DO_
}

void AutoAuthAesReqData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.AutoAuthAesReqData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional .micromsg.BaseAuthReqInfo BaseReqInfo = 2;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->basereqinfo_, output);
  }

  // required .micromsg.SKBuiltinBuffer_t AutoAuthKey = 3;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->autoauthkey_, output);
  }

  // optional string IMEI = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AutoAuthAesReqData.IMEI");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->imei(), output);
  }

  // optional string SoftType = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->softtype().data(), this->softtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AutoAuthAesReqData.SoftType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->softtype(), output);
  }

  // required uint32 BuiltinIPSeq = 6;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->builtinipseq(), output);
  }

  // optional string ClientSeqID = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientseqid().data(), this->clientseqid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AutoAuthAesReqData.ClientSeqID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->clientseqid(), output);
  }

  // optional string Signature = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AutoAuthAesReqData.Signature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->signature(), output);
  }

  // optional string DeviceName = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AutoAuthAesReqData.DeviceName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->devicename(), output);
  }

  // optional string DeviceType = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicetype().data(), this->devicetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AutoAuthAesReqData.DeviceType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->devicetype(), output);
  }

  // optional string Language = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AutoAuthAesReqData.Language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->language(), output);
  }

  // optional string TimeZone = 12;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timezone().data(), this->timezone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AutoAuthAesReqData.TimeZone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->timezone(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.AutoAuthAesReqData)
}

::google::protobuf::uint8* AutoAuthAesReqData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.AutoAuthAesReqData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional .micromsg.BaseAuthReqInfo BaseReqInfo = 2;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->basereqinfo_, deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t AutoAuthKey = 3;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->autoauthkey_, deterministic, target);
  }

  // optional string IMEI = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AutoAuthAesReqData.IMEI");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->imei(), target);
  }

  // optional string SoftType = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->softtype().data(), this->softtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AutoAuthAesReqData.SoftType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->softtype(), target);
  }

  // required uint32 BuiltinIPSeq = 6;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->builtinipseq(), target);
  }

  // optional string ClientSeqID = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientseqid().data(), this->clientseqid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AutoAuthAesReqData.ClientSeqID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->clientseqid(), target);
  }

  // optional string Signature = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AutoAuthAesReqData.Signature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->signature(), target);
  }

  // optional string DeviceName = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AutoAuthAesReqData.DeviceName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->devicename(), target);
  }

  // optional string DeviceType = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicetype().data(), this->devicetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AutoAuthAesReqData.DeviceType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->devicetype(), target);
  }

  // optional string Language = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AutoAuthAesReqData.Language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->language(), target);
  }

  // optional string TimeZone = 12;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timezone().data(), this->timezone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AutoAuthAesReqData.TimeZone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->timezone(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.AutoAuthAesReqData)
  return target;
}

size_t AutoAuthAesReqData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.AutoAuthAesReqData)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_autoauthkey()) {
    // required .micromsg.SKBuiltinBuffer_t AutoAuthKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->autoauthkey_);
  }

  if (has_builtinipseq()) {
    // required uint32 BuiltinIPSeq = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->builtinipseq());
  }

  return total_size;
}
size_t AutoAuthAesReqData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.AutoAuthAesReqData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000d00) ^ 0x00000d00) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.SKBuiltinBuffer_t AutoAuthKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->autoauthkey_);

    // required uint32 BuiltinIPSeq = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->builtinipseq());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string IMEI = 4;
    if (has_imei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imei());
    }

    // optional string SoftType = 5;
    if (has_softtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->softtype());
    }

    // optional string ClientSeqID = 7;
    if (has_clientseqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientseqid());
    }

    // optional string Signature = 8;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }

    // optional string DeviceName = 9;
    if (has_devicename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicename());
    }

    // optional string DeviceType = 10;
    if (has_devicetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicetype());
    }

    // optional string Language = 11;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

    // optional string TimeZone = 12;
    if (has_timezone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timezone());
    }

  }
  // optional .micromsg.BaseAuthReqInfo BaseReqInfo = 2;
  if (has_basereqinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->basereqinfo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutoAuthAesReqData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.AutoAuthAesReqData)
  GOOGLE_DCHECK_NE(&from, this);
  const AutoAuthAesReqData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AutoAuthAesReqData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.AutoAuthAesReqData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.AutoAuthAesReqData)
    MergeFrom(*source);
  }
}

void AutoAuthAesReqData::MergeFrom(const AutoAuthAesReqData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.AutoAuthAesReqData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_imei();
      imei_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imei_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_softtype();
      softtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.softtype_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_clientseqid();
      clientseqid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientseqid_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_signature();
      signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_devicename();
      devicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicename_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_devicetype();
      devicetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicetype_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_language();
      language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_timezone();
      timezone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timezone_);
    }
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_basereqinfo()->::micromsg::BaseAuthReqInfo::MergeFrom(from.basereqinfo());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_autoauthkey()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.autoauthkey());
    }
    if (cached_has_bits & 0x00000800u) {
      builtinipseq_ = from.builtinipseq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AutoAuthAesReqData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.AutoAuthAesReqData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoAuthAesReqData::CopyFrom(const AutoAuthAesReqData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.AutoAuthAesReqData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoAuthAesReqData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000d00) != 0x00000d00) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_basereqinfo()) {
    if (!this->basereqinfo_->IsInitialized()) return false;
  }
  if (has_autoauthkey()) {
    if (!this->autoauthkey_->IsInitialized()) return false;
  }
  return true;
}

void AutoAuthAesReqData::Swap(AutoAuthAesReqData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AutoAuthAesReqData::InternalSwap(AutoAuthAesReqData* other) {
  imei_.Swap(&other->imei_);
  softtype_.Swap(&other->softtype_);
  clientseqid_.Swap(&other->clientseqid_);
  signature_.Swap(&other->signature_);
  devicename_.Swap(&other->devicename_);
  devicetype_.Swap(&other->devicetype_);
  language_.Swap(&other->language_);
  timezone_.Swap(&other->timezone_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(basereqinfo_, other->basereqinfo_);
  std::swap(autoauthkey_, other->autoauthkey_);
  std::swap(builtinipseq_, other->builtinipseq_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AutoAuthAesReqData::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AutoAuthAesReqData

// required .micromsg.BaseRequest BaseRequest = 1;
bool AutoAuthAesReqData::has_baserequest() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void AutoAuthAesReqData::set_has_baserequest() {
  _has_bits_[0] |= 0x00000100u;
}
void AutoAuthAesReqData::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000100u;
}
void AutoAuthAesReqData::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& AutoAuthAesReqData::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.AutoAuthAesReqData.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* AutoAuthAesReqData::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AutoAuthAesReqData.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* AutoAuthAesReqData::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.AutoAuthAesReqData.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void AutoAuthAesReqData::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AutoAuthAesReqData.BaseRequest)
}

// optional .micromsg.BaseAuthReqInfo BaseReqInfo = 2;
bool AutoAuthAesReqData::has_basereqinfo() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void AutoAuthAesReqData::set_has_basereqinfo() {
  _has_bits_[0] |= 0x00000200u;
}
void AutoAuthAesReqData::clear_has_basereqinfo() {
  _has_bits_[0] &= ~0x00000200u;
}
void AutoAuthAesReqData::clear_basereqinfo() {
  if (basereqinfo_ != NULL) basereqinfo_->::micromsg::BaseAuthReqInfo::Clear();
  clear_has_basereqinfo();
}
const ::micromsg::BaseAuthReqInfo& AutoAuthAesReqData::basereqinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.AutoAuthAesReqData.BaseReqInfo)
  return basereqinfo_ != NULL ? *basereqinfo_
                         : *::micromsg::BaseAuthReqInfo::internal_default_instance();
}
::micromsg::BaseAuthReqInfo* AutoAuthAesReqData::mutable_basereqinfo() {
  set_has_basereqinfo();
  if (basereqinfo_ == NULL) {
    basereqinfo_ = new ::micromsg::BaseAuthReqInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AutoAuthAesReqData.BaseReqInfo)
  return basereqinfo_;
}
::micromsg::BaseAuthReqInfo* AutoAuthAesReqData::release_basereqinfo() {
  // @@protoc_insertion_point(field_release:micromsg.AutoAuthAesReqData.BaseReqInfo)
  clear_has_basereqinfo();
  ::micromsg::BaseAuthReqInfo* temp = basereqinfo_;
  basereqinfo_ = NULL;
  return temp;
}
void AutoAuthAesReqData::set_allocated_basereqinfo(::micromsg::BaseAuthReqInfo* basereqinfo) {
  delete basereqinfo_;
  basereqinfo_ = basereqinfo;
  if (basereqinfo) {
    set_has_basereqinfo();
  } else {
    clear_has_basereqinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AutoAuthAesReqData.BaseReqInfo)
}

// required .micromsg.SKBuiltinBuffer_t AutoAuthKey = 3;
bool AutoAuthAesReqData::has_autoauthkey() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void AutoAuthAesReqData::set_has_autoauthkey() {
  _has_bits_[0] |= 0x00000400u;
}
void AutoAuthAesReqData::clear_has_autoauthkey() {
  _has_bits_[0] &= ~0x00000400u;
}
void AutoAuthAesReqData::clear_autoauthkey() {
  if (autoauthkey_ != NULL) autoauthkey_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_autoauthkey();
}
const ::micromsg::SKBuiltinBuffer_t& AutoAuthAesReqData::autoauthkey() const {
  // @@protoc_insertion_point(field_get:micromsg.AutoAuthAesReqData.AutoAuthKey)
  return autoauthkey_ != NULL ? *autoauthkey_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* AutoAuthAesReqData::mutable_autoauthkey() {
  set_has_autoauthkey();
  if (autoauthkey_ == NULL) {
    autoauthkey_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AutoAuthAesReqData.AutoAuthKey)
  return autoauthkey_;
}
::micromsg::SKBuiltinBuffer_t* AutoAuthAesReqData::release_autoauthkey() {
  // @@protoc_insertion_point(field_release:micromsg.AutoAuthAesReqData.AutoAuthKey)
  clear_has_autoauthkey();
  ::micromsg::SKBuiltinBuffer_t* temp = autoauthkey_;
  autoauthkey_ = NULL;
  return temp;
}
void AutoAuthAesReqData::set_allocated_autoauthkey(::micromsg::SKBuiltinBuffer_t* autoauthkey) {
  delete autoauthkey_;
  autoauthkey_ = autoauthkey;
  if (autoauthkey) {
    set_has_autoauthkey();
  } else {
    clear_has_autoauthkey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AutoAuthAesReqData.AutoAuthKey)
}

// optional string IMEI = 4;
bool AutoAuthAesReqData::has_imei() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AutoAuthAesReqData::set_has_imei() {
  _has_bits_[0] |= 0x00000001u;
}
void AutoAuthAesReqData::clear_has_imei() {
  _has_bits_[0] &= ~0x00000001u;
}
void AutoAuthAesReqData::clear_imei() {
  imei_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imei();
}
const ::std::string& AutoAuthAesReqData::imei() const {
  // @@protoc_insertion_point(field_get:micromsg.AutoAuthAesReqData.IMEI)
  return imei_.GetNoArena();
}
void AutoAuthAesReqData::set_imei(const ::std::string& value) {
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AutoAuthAesReqData.IMEI)
}
#if LANG_CXX11
void AutoAuthAesReqData::set_imei(::std::string&& value) {
  set_has_imei();
  imei_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AutoAuthAesReqData.IMEI)
}
#endif
void AutoAuthAesReqData::set_imei(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AutoAuthAesReqData.IMEI)
}
void AutoAuthAesReqData::set_imei(const char* value, size_t size) {
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AutoAuthAesReqData.IMEI)
}
::std::string* AutoAuthAesReqData::mutable_imei() {
  set_has_imei();
  // @@protoc_insertion_point(field_mutable:micromsg.AutoAuthAesReqData.IMEI)
  return imei_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AutoAuthAesReqData::release_imei() {
  // @@protoc_insertion_point(field_release:micromsg.AutoAuthAesReqData.IMEI)
  clear_has_imei();
  return imei_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AutoAuthAesReqData::set_allocated_imei(::std::string* imei) {
  if (imei != NULL) {
    set_has_imei();
  } else {
    clear_has_imei();
  }
  imei_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imei);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AutoAuthAesReqData.IMEI)
}

// optional string SoftType = 5;
bool AutoAuthAesReqData::has_softtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AutoAuthAesReqData::set_has_softtype() {
  _has_bits_[0] |= 0x00000002u;
}
void AutoAuthAesReqData::clear_has_softtype() {
  _has_bits_[0] &= ~0x00000002u;
}
void AutoAuthAesReqData::clear_softtype() {
  softtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_softtype();
}
const ::std::string& AutoAuthAesReqData::softtype() const {
  // @@protoc_insertion_point(field_get:micromsg.AutoAuthAesReqData.SoftType)
  return softtype_.GetNoArena();
}
void AutoAuthAesReqData::set_softtype(const ::std::string& value) {
  set_has_softtype();
  softtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AutoAuthAesReqData.SoftType)
}
#if LANG_CXX11
void AutoAuthAesReqData::set_softtype(::std::string&& value) {
  set_has_softtype();
  softtype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AutoAuthAesReqData.SoftType)
}
#endif
void AutoAuthAesReqData::set_softtype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_softtype();
  softtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AutoAuthAesReqData.SoftType)
}
void AutoAuthAesReqData::set_softtype(const char* value, size_t size) {
  set_has_softtype();
  softtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AutoAuthAesReqData.SoftType)
}
::std::string* AutoAuthAesReqData::mutable_softtype() {
  set_has_softtype();
  // @@protoc_insertion_point(field_mutable:micromsg.AutoAuthAesReqData.SoftType)
  return softtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AutoAuthAesReqData::release_softtype() {
  // @@protoc_insertion_point(field_release:micromsg.AutoAuthAesReqData.SoftType)
  clear_has_softtype();
  return softtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AutoAuthAesReqData::set_allocated_softtype(::std::string* softtype) {
  if (softtype != NULL) {
    set_has_softtype();
  } else {
    clear_has_softtype();
  }
  softtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), softtype);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AutoAuthAesReqData.SoftType)
}

// required uint32 BuiltinIPSeq = 6;
bool AutoAuthAesReqData::has_builtinipseq() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void AutoAuthAesReqData::set_has_builtinipseq() {
  _has_bits_[0] |= 0x00000800u;
}
void AutoAuthAesReqData::clear_has_builtinipseq() {
  _has_bits_[0] &= ~0x00000800u;
}
void AutoAuthAesReqData::clear_builtinipseq() {
  builtinipseq_ = 0u;
  clear_has_builtinipseq();
}
::google::protobuf::uint32 AutoAuthAesReqData::builtinipseq() const {
  // @@protoc_insertion_point(field_get:micromsg.AutoAuthAesReqData.BuiltinIPSeq)
  return builtinipseq_;
}
void AutoAuthAesReqData::set_builtinipseq(::google::protobuf::uint32 value) {
  set_has_builtinipseq();
  builtinipseq_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AutoAuthAesReqData.BuiltinIPSeq)
}

// optional string ClientSeqID = 7;
bool AutoAuthAesReqData::has_clientseqid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AutoAuthAesReqData::set_has_clientseqid() {
  _has_bits_[0] |= 0x00000004u;
}
void AutoAuthAesReqData::clear_has_clientseqid() {
  _has_bits_[0] &= ~0x00000004u;
}
void AutoAuthAesReqData::clear_clientseqid() {
  clientseqid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientseqid();
}
const ::std::string& AutoAuthAesReqData::clientseqid() const {
  // @@protoc_insertion_point(field_get:micromsg.AutoAuthAesReqData.ClientSeqID)
  return clientseqid_.GetNoArena();
}
void AutoAuthAesReqData::set_clientseqid(const ::std::string& value) {
  set_has_clientseqid();
  clientseqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AutoAuthAesReqData.ClientSeqID)
}
#if LANG_CXX11
void AutoAuthAesReqData::set_clientseqid(::std::string&& value) {
  set_has_clientseqid();
  clientseqid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AutoAuthAesReqData.ClientSeqID)
}
#endif
void AutoAuthAesReqData::set_clientseqid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientseqid();
  clientseqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AutoAuthAesReqData.ClientSeqID)
}
void AutoAuthAesReqData::set_clientseqid(const char* value, size_t size) {
  set_has_clientseqid();
  clientseqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AutoAuthAesReqData.ClientSeqID)
}
::std::string* AutoAuthAesReqData::mutable_clientseqid() {
  set_has_clientseqid();
  // @@protoc_insertion_point(field_mutable:micromsg.AutoAuthAesReqData.ClientSeqID)
  return clientseqid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AutoAuthAesReqData::release_clientseqid() {
  // @@protoc_insertion_point(field_release:micromsg.AutoAuthAesReqData.ClientSeqID)
  clear_has_clientseqid();
  return clientseqid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AutoAuthAesReqData::set_allocated_clientseqid(::std::string* clientseqid) {
  if (clientseqid != NULL) {
    set_has_clientseqid();
  } else {
    clear_has_clientseqid();
  }
  clientseqid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientseqid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AutoAuthAesReqData.ClientSeqID)
}

// optional string Signature = 8;
bool AutoAuthAesReqData::has_signature() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AutoAuthAesReqData::set_has_signature() {
  _has_bits_[0] |= 0x00000008u;
}
void AutoAuthAesReqData::clear_has_signature() {
  _has_bits_[0] &= ~0x00000008u;
}
void AutoAuthAesReqData::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signature();
}
const ::std::string& AutoAuthAesReqData::signature() const {
  // @@protoc_insertion_point(field_get:micromsg.AutoAuthAesReqData.Signature)
  return signature_.GetNoArena();
}
void AutoAuthAesReqData::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AutoAuthAesReqData.Signature)
}
#if LANG_CXX11
void AutoAuthAesReqData::set_signature(::std::string&& value) {
  set_has_signature();
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AutoAuthAesReqData.Signature)
}
#endif
void AutoAuthAesReqData::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AutoAuthAesReqData.Signature)
}
void AutoAuthAesReqData::set_signature(const char* value, size_t size) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AutoAuthAesReqData.Signature)
}
::std::string* AutoAuthAesReqData::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:micromsg.AutoAuthAesReqData.Signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AutoAuthAesReqData::release_signature() {
  // @@protoc_insertion_point(field_release:micromsg.AutoAuthAesReqData.Signature)
  clear_has_signature();
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AutoAuthAesReqData::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AutoAuthAesReqData.Signature)
}

// optional string DeviceName = 9;
bool AutoAuthAesReqData::has_devicename() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AutoAuthAesReqData::set_has_devicename() {
  _has_bits_[0] |= 0x00000010u;
}
void AutoAuthAesReqData::clear_has_devicename() {
  _has_bits_[0] &= ~0x00000010u;
}
void AutoAuthAesReqData::clear_devicename() {
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_devicename();
}
const ::std::string& AutoAuthAesReqData::devicename() const {
  // @@protoc_insertion_point(field_get:micromsg.AutoAuthAesReqData.DeviceName)
  return devicename_.GetNoArena();
}
void AutoAuthAesReqData::set_devicename(const ::std::string& value) {
  set_has_devicename();
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AutoAuthAesReqData.DeviceName)
}
#if LANG_CXX11
void AutoAuthAesReqData::set_devicename(::std::string&& value) {
  set_has_devicename();
  devicename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AutoAuthAesReqData.DeviceName)
}
#endif
void AutoAuthAesReqData::set_devicename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_devicename();
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AutoAuthAesReqData.DeviceName)
}
void AutoAuthAesReqData::set_devicename(const char* value, size_t size) {
  set_has_devicename();
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AutoAuthAesReqData.DeviceName)
}
::std::string* AutoAuthAesReqData::mutable_devicename() {
  set_has_devicename();
  // @@protoc_insertion_point(field_mutable:micromsg.AutoAuthAesReqData.DeviceName)
  return devicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AutoAuthAesReqData::release_devicename() {
  // @@protoc_insertion_point(field_release:micromsg.AutoAuthAesReqData.DeviceName)
  clear_has_devicename();
  return devicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AutoAuthAesReqData::set_allocated_devicename(::std::string* devicename) {
  if (devicename != NULL) {
    set_has_devicename();
  } else {
    clear_has_devicename();
  }
  devicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicename);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AutoAuthAesReqData.DeviceName)
}

// optional string DeviceType = 10;
bool AutoAuthAesReqData::has_devicetype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void AutoAuthAesReqData::set_has_devicetype() {
  _has_bits_[0] |= 0x00000020u;
}
void AutoAuthAesReqData::clear_has_devicetype() {
  _has_bits_[0] &= ~0x00000020u;
}
void AutoAuthAesReqData::clear_devicetype() {
  devicetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_devicetype();
}
const ::std::string& AutoAuthAesReqData::devicetype() const {
  // @@protoc_insertion_point(field_get:micromsg.AutoAuthAesReqData.DeviceType)
  return devicetype_.GetNoArena();
}
void AutoAuthAesReqData::set_devicetype(const ::std::string& value) {
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AutoAuthAesReqData.DeviceType)
}
#if LANG_CXX11
void AutoAuthAesReqData::set_devicetype(::std::string&& value) {
  set_has_devicetype();
  devicetype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AutoAuthAesReqData.DeviceType)
}
#endif
void AutoAuthAesReqData::set_devicetype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AutoAuthAesReqData.DeviceType)
}
void AutoAuthAesReqData::set_devicetype(const char* value, size_t size) {
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AutoAuthAesReqData.DeviceType)
}
::std::string* AutoAuthAesReqData::mutable_devicetype() {
  set_has_devicetype();
  // @@protoc_insertion_point(field_mutable:micromsg.AutoAuthAesReqData.DeviceType)
  return devicetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AutoAuthAesReqData::release_devicetype() {
  // @@protoc_insertion_point(field_release:micromsg.AutoAuthAesReqData.DeviceType)
  clear_has_devicetype();
  return devicetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AutoAuthAesReqData::set_allocated_devicetype(::std::string* devicetype) {
  if (devicetype != NULL) {
    set_has_devicetype();
  } else {
    clear_has_devicetype();
  }
  devicetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicetype);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AutoAuthAesReqData.DeviceType)
}

// optional string Language = 11;
bool AutoAuthAesReqData::has_language() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void AutoAuthAesReqData::set_has_language() {
  _has_bits_[0] |= 0x00000040u;
}
void AutoAuthAesReqData::clear_has_language() {
  _has_bits_[0] &= ~0x00000040u;
}
void AutoAuthAesReqData::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_language();
}
const ::std::string& AutoAuthAesReqData::language() const {
  // @@protoc_insertion_point(field_get:micromsg.AutoAuthAesReqData.Language)
  return language_.GetNoArena();
}
void AutoAuthAesReqData::set_language(const ::std::string& value) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AutoAuthAesReqData.Language)
}
#if LANG_CXX11
void AutoAuthAesReqData::set_language(::std::string&& value) {
  set_has_language();
  language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AutoAuthAesReqData.Language)
}
#endif
void AutoAuthAesReqData::set_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AutoAuthAesReqData.Language)
}
void AutoAuthAesReqData::set_language(const char* value, size_t size) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AutoAuthAesReqData.Language)
}
::std::string* AutoAuthAesReqData::mutable_language() {
  set_has_language();
  // @@protoc_insertion_point(field_mutable:micromsg.AutoAuthAesReqData.Language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AutoAuthAesReqData::release_language() {
  // @@protoc_insertion_point(field_release:micromsg.AutoAuthAesReqData.Language)
  clear_has_language();
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AutoAuthAesReqData::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    set_has_language();
  } else {
    clear_has_language();
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AutoAuthAesReqData.Language)
}

// optional string TimeZone = 12;
bool AutoAuthAesReqData::has_timezone() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void AutoAuthAesReqData::set_has_timezone() {
  _has_bits_[0] |= 0x00000080u;
}
void AutoAuthAesReqData::clear_has_timezone() {
  _has_bits_[0] &= ~0x00000080u;
}
void AutoAuthAesReqData::clear_timezone() {
  timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timezone();
}
const ::std::string& AutoAuthAesReqData::timezone() const {
  // @@protoc_insertion_point(field_get:micromsg.AutoAuthAesReqData.TimeZone)
  return timezone_.GetNoArena();
}
void AutoAuthAesReqData::set_timezone(const ::std::string& value) {
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AutoAuthAesReqData.TimeZone)
}
#if LANG_CXX11
void AutoAuthAesReqData::set_timezone(::std::string&& value) {
  set_has_timezone();
  timezone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AutoAuthAesReqData.TimeZone)
}
#endif
void AutoAuthAesReqData::set_timezone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AutoAuthAesReqData.TimeZone)
}
void AutoAuthAesReqData::set_timezone(const char* value, size_t size) {
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AutoAuthAesReqData.TimeZone)
}
::std::string* AutoAuthAesReqData::mutable_timezone() {
  set_has_timezone();
  // @@protoc_insertion_point(field_mutable:micromsg.AutoAuthAesReqData.TimeZone)
  return timezone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AutoAuthAesReqData::release_timezone() {
  // @@protoc_insertion_point(field_release:micromsg.AutoAuthAesReqData.TimeZone)
  clear_has_timezone();
  return timezone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AutoAuthAesReqData::set_allocated_timezone(::std::string* timezone) {
  if (timezone != NULL) {
    set_has_timezone();
  } else {
    clear_has_timezone();
  }
  timezone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timezone);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AutoAuthAesReqData.TimeZone)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutoAuthRequest::kRsaReqDataFieldNumber;
const int AutoAuthRequest::kAesReqDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AutoAuthRequest::AutoAuthRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.AutoAuthRequest)
}
AutoAuthRequest::AutoAuthRequest(const AutoAuthRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_rsareqdata()) {
    rsareqdata_ = new ::micromsg::AutoAuthRsaReqData(*from.rsareqdata_);
  } else {
    rsareqdata_ = NULL;
  }
  if (from.has_aesreqdata()) {
    aesreqdata_ = new ::micromsg::AutoAuthAesReqData(*from.aesreqdata_);
  } else {
    aesreqdata_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.AutoAuthRequest)
}

void AutoAuthRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&rsareqdata_, 0, reinterpret_cast<char*>(&aesreqdata_) -
    reinterpret_cast<char*>(&rsareqdata_) + sizeof(aesreqdata_));
}

AutoAuthRequest::~AutoAuthRequest() {
  // @@protoc_insertion_point(destructor:micromsg.AutoAuthRequest)
  SharedDtor();
}

void AutoAuthRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete rsareqdata_;
  }
  if (this != internal_default_instance()) {
    delete aesreqdata_;
  }
}

void AutoAuthRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AutoAuthRequest::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AutoAuthRequest& AutoAuthRequest::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

AutoAuthRequest* AutoAuthRequest::New(::google::protobuf::Arena* arena) const {
  AutoAuthRequest* n = new AutoAuthRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AutoAuthRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.AutoAuthRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_rsareqdata()) {
      GOOGLE_DCHECK(rsareqdata_ != NULL);
      rsareqdata_->::micromsg::AutoAuthRsaReqData::Clear();
    }
    if (has_aesreqdata()) {
      GOOGLE_DCHECK(aesreqdata_ != NULL);
      aesreqdata_->::micromsg::AutoAuthAesReqData::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AutoAuthRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.AutoAuthRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.AutoAuthRsaReqData RsaReqData = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rsareqdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.AutoAuthAesReqData AesReqData = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aesreqdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.AutoAuthRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.AutoAuthRequest)
  return false;
#undef DO_
}

void AutoAuthRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.AutoAuthRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.AutoAuthRsaReqData RsaReqData = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->rsareqdata_, output);
  }

  // required .micromsg.AutoAuthAesReqData AesReqData = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->aesreqdata_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.AutoAuthRequest)
}

::google::protobuf::uint8* AutoAuthRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.AutoAuthRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.AutoAuthRsaReqData RsaReqData = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->rsareqdata_, deterministic, target);
  }

  // required .micromsg.AutoAuthAesReqData AesReqData = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->aesreqdata_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.AutoAuthRequest)
  return target;
}

size_t AutoAuthRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.AutoAuthRequest)
  size_t total_size = 0;

  if (has_rsareqdata()) {
    // required .micromsg.AutoAuthRsaReqData RsaReqData = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rsareqdata_);
  }

  if (has_aesreqdata()) {
    // required .micromsg.AutoAuthAesReqData AesReqData = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->aesreqdata_);
  }

  return total_size;
}
size_t AutoAuthRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.AutoAuthRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.AutoAuthRsaReqData RsaReqData = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rsareqdata_);

    // required .micromsg.AutoAuthAesReqData AesReqData = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->aesreqdata_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutoAuthRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.AutoAuthRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AutoAuthRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AutoAuthRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.AutoAuthRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.AutoAuthRequest)
    MergeFrom(*source);
  }
}

void AutoAuthRequest::MergeFrom(const AutoAuthRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.AutoAuthRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_rsareqdata()->::micromsg::AutoAuthRsaReqData::MergeFrom(from.rsareqdata());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_aesreqdata()->::micromsg::AutoAuthAesReqData::MergeFrom(from.aesreqdata());
    }
  }
}

void AutoAuthRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.AutoAuthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoAuthRequest::CopyFrom(const AutoAuthRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.AutoAuthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoAuthRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_rsareqdata()) {
    if (!this->rsareqdata_->IsInitialized()) return false;
  }
  if (has_aesreqdata()) {
    if (!this->aesreqdata_->IsInitialized()) return false;
  }
  return true;
}

void AutoAuthRequest::Swap(AutoAuthRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AutoAuthRequest::InternalSwap(AutoAuthRequest* other) {
  std::swap(rsareqdata_, other->rsareqdata_);
  std::swap(aesreqdata_, other->aesreqdata_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AutoAuthRequest::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AutoAuthRequest

// required .micromsg.AutoAuthRsaReqData RsaReqData = 1;
bool AutoAuthRequest::has_rsareqdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AutoAuthRequest::set_has_rsareqdata() {
  _has_bits_[0] |= 0x00000001u;
}
void AutoAuthRequest::clear_has_rsareqdata() {
  _has_bits_[0] &= ~0x00000001u;
}
void AutoAuthRequest::clear_rsareqdata() {
  if (rsareqdata_ != NULL) rsareqdata_->::micromsg::AutoAuthRsaReqData::Clear();
  clear_has_rsareqdata();
}
const ::micromsg::AutoAuthRsaReqData& AutoAuthRequest::rsareqdata() const {
  // @@protoc_insertion_point(field_get:micromsg.AutoAuthRequest.RsaReqData)
  return rsareqdata_ != NULL ? *rsareqdata_
                         : *::micromsg::AutoAuthRsaReqData::internal_default_instance();
}
::micromsg::AutoAuthRsaReqData* AutoAuthRequest::mutable_rsareqdata() {
  set_has_rsareqdata();
  if (rsareqdata_ == NULL) {
    rsareqdata_ = new ::micromsg::AutoAuthRsaReqData;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AutoAuthRequest.RsaReqData)
  return rsareqdata_;
}
::micromsg::AutoAuthRsaReqData* AutoAuthRequest::release_rsareqdata() {
  // @@protoc_insertion_point(field_release:micromsg.AutoAuthRequest.RsaReqData)
  clear_has_rsareqdata();
  ::micromsg::AutoAuthRsaReqData* temp = rsareqdata_;
  rsareqdata_ = NULL;
  return temp;
}
void AutoAuthRequest::set_allocated_rsareqdata(::micromsg::AutoAuthRsaReqData* rsareqdata) {
  delete rsareqdata_;
  rsareqdata_ = rsareqdata;
  if (rsareqdata) {
    set_has_rsareqdata();
  } else {
    clear_has_rsareqdata();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AutoAuthRequest.RsaReqData)
}

// required .micromsg.AutoAuthAesReqData AesReqData = 2;
bool AutoAuthRequest::has_aesreqdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AutoAuthRequest::set_has_aesreqdata() {
  _has_bits_[0] |= 0x00000002u;
}
void AutoAuthRequest::clear_has_aesreqdata() {
  _has_bits_[0] &= ~0x00000002u;
}
void AutoAuthRequest::clear_aesreqdata() {
  if (aesreqdata_ != NULL) aesreqdata_->::micromsg::AutoAuthAesReqData::Clear();
  clear_has_aesreqdata();
}
const ::micromsg::AutoAuthAesReqData& AutoAuthRequest::aesreqdata() const {
  // @@protoc_insertion_point(field_get:micromsg.AutoAuthRequest.AesReqData)
  return aesreqdata_ != NULL ? *aesreqdata_
                         : *::micromsg::AutoAuthAesReqData::internal_default_instance();
}
::micromsg::AutoAuthAesReqData* AutoAuthRequest::mutable_aesreqdata() {
  set_has_aesreqdata();
  if (aesreqdata_ == NULL) {
    aesreqdata_ = new ::micromsg::AutoAuthAesReqData;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AutoAuthRequest.AesReqData)
  return aesreqdata_;
}
::micromsg::AutoAuthAesReqData* AutoAuthRequest::release_aesreqdata() {
  // @@protoc_insertion_point(field_release:micromsg.AutoAuthRequest.AesReqData)
  clear_has_aesreqdata();
  ::micromsg::AutoAuthAesReqData* temp = aesreqdata_;
  aesreqdata_ = NULL;
  return temp;
}
void AutoAuthRequest::set_allocated_aesreqdata(::micromsg::AutoAuthAesReqData* aesreqdata) {
  delete aesreqdata_;
  aesreqdata_ = aesreqdata;
  if (aesreqdata) {
    set_has_aesreqdata();
  } else {
    clear_has_aesreqdata();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AutoAuthRequest.AesReqData)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkSectResp::kNewHostListFieldNumber;
const int NetworkSectResp::kNetworkControlFieldNumber;
const int NetworkSectResp::kBuiltinIPListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkSectResp::NetworkSectResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.NetworkSectResp)
}
NetworkSectResp::NetworkSectResp(const NetworkSectResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_newhostlist()) {
    newhostlist_ = new ::micromsg::HostList(*from.newhostlist_);
  } else {
    newhostlist_ = NULL;
  }
  if (from.has_networkcontrol()) {
    networkcontrol_ = new ::micromsg::NetworkControl(*from.networkcontrol_);
  } else {
    networkcontrol_ = NULL;
  }
  if (from.has_builtiniplist()) {
    builtiniplist_ = new ::micromsg::BuiltinIPList(*from.builtiniplist_);
  } else {
    builtiniplist_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.NetworkSectResp)
}

void NetworkSectResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&newhostlist_, 0, reinterpret_cast<char*>(&builtiniplist_) -
    reinterpret_cast<char*>(&newhostlist_) + sizeof(builtiniplist_));
}

NetworkSectResp::~NetworkSectResp() {
  // @@protoc_insertion_point(destructor:micromsg.NetworkSectResp)
  SharedDtor();
}

void NetworkSectResp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete newhostlist_;
  }
  if (this != internal_default_instance()) {
    delete networkcontrol_;
  }
  if (this != internal_default_instance()) {
    delete builtiniplist_;
  }
}

void NetworkSectResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkSectResp::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NetworkSectResp& NetworkSectResp::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetworkSectResp* NetworkSectResp::New(::google::protobuf::Arena* arena) const {
  NetworkSectResp* n = new NetworkSectResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkSectResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.NetworkSectResp)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_newhostlist()) {
      GOOGLE_DCHECK(newhostlist_ != NULL);
      newhostlist_->::micromsg::HostList::Clear();
    }
    if (has_networkcontrol()) {
      GOOGLE_DCHECK(networkcontrol_ != NULL);
      networkcontrol_->::micromsg::NetworkControl::Clear();
    }
    if (has_builtiniplist()) {
      GOOGLE_DCHECK(builtiniplist_ != NULL);
      builtiniplist_->::micromsg::BuiltinIPList::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NetworkSectResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.NetworkSectResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .micromsg.HostList NewHostList = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newhostlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.NetworkControl NetworkControl = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_networkcontrol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.BuiltinIPList BuiltinIPList = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_builtiniplist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.NetworkSectResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.NetworkSectResp)
  return false;
#undef DO_
}

void NetworkSectResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.NetworkSectResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .micromsg.HostList NewHostList = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->newhostlist_, output);
  }

  // optional .micromsg.NetworkControl NetworkControl = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->networkcontrol_, output);
  }

  // optional .micromsg.BuiltinIPList BuiltinIPList = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->builtiniplist_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.NetworkSectResp)
}

::google::protobuf::uint8* NetworkSectResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.NetworkSectResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .micromsg.HostList NewHostList = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->newhostlist_, deterministic, target);
  }

  // optional .micromsg.NetworkControl NetworkControl = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->networkcontrol_, deterministic, target);
  }

  // optional .micromsg.BuiltinIPList BuiltinIPList = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->builtiniplist_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.NetworkSectResp)
  return target;
}

size_t NetworkSectResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.NetworkSectResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .micromsg.HostList NewHostList = 1;
    if (has_newhostlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->newhostlist_);
    }

    // optional .micromsg.NetworkControl NetworkControl = 2;
    if (has_networkcontrol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->networkcontrol_);
    }

    // optional .micromsg.BuiltinIPList BuiltinIPList = 3;
    if (has_builtiniplist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->builtiniplist_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkSectResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.NetworkSectResp)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkSectResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetworkSectResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.NetworkSectResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.NetworkSectResp)
    MergeFrom(*source);
  }
}

void NetworkSectResp::MergeFrom(const NetworkSectResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.NetworkSectResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_newhostlist()->::micromsg::HostList::MergeFrom(from.newhostlist());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_networkcontrol()->::micromsg::NetworkControl::MergeFrom(from.networkcontrol());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_builtiniplist()->::micromsg::BuiltinIPList::MergeFrom(from.builtiniplist());
    }
  }
}

void NetworkSectResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.NetworkSectResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkSectResp::CopyFrom(const NetworkSectResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.NetworkSectResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkSectResp::IsInitialized() const {
  if (has_newhostlist()) {
    if (!this->newhostlist_->IsInitialized()) return false;
  }
  if (has_builtiniplist()) {
    if (!this->builtiniplist_->IsInitialized()) return false;
  }
  return true;
}

void NetworkSectResp::Swap(NetworkSectResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkSectResp::InternalSwap(NetworkSectResp* other) {
  std::swap(newhostlist_, other->newhostlist_);
  std::swap(networkcontrol_, other->networkcontrol_);
  std::swap(builtiniplist_, other->builtiniplist_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetworkSectResp::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkSectResp

// optional .micromsg.HostList NewHostList = 1;
bool NetworkSectResp::has_newhostlist() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetworkSectResp::set_has_newhostlist() {
  _has_bits_[0] |= 0x00000001u;
}
void NetworkSectResp::clear_has_newhostlist() {
  _has_bits_[0] &= ~0x00000001u;
}
void NetworkSectResp::clear_newhostlist() {
  if (newhostlist_ != NULL) newhostlist_->::micromsg::HostList::Clear();
  clear_has_newhostlist();
}
const ::micromsg::HostList& NetworkSectResp::newhostlist() const {
  // @@protoc_insertion_point(field_get:micromsg.NetworkSectResp.NewHostList)
  return newhostlist_ != NULL ? *newhostlist_
                         : *::micromsg::HostList::internal_default_instance();
}
::micromsg::HostList* NetworkSectResp::mutable_newhostlist() {
  set_has_newhostlist();
  if (newhostlist_ == NULL) {
    newhostlist_ = new ::micromsg::HostList;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NetworkSectResp.NewHostList)
  return newhostlist_;
}
::micromsg::HostList* NetworkSectResp::release_newhostlist() {
  // @@protoc_insertion_point(field_release:micromsg.NetworkSectResp.NewHostList)
  clear_has_newhostlist();
  ::micromsg::HostList* temp = newhostlist_;
  newhostlist_ = NULL;
  return temp;
}
void NetworkSectResp::set_allocated_newhostlist(::micromsg::HostList* newhostlist) {
  delete newhostlist_;
  newhostlist_ = newhostlist;
  if (newhostlist) {
    set_has_newhostlist();
  } else {
    clear_has_newhostlist();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NetworkSectResp.NewHostList)
}

// optional .micromsg.NetworkControl NetworkControl = 2;
bool NetworkSectResp::has_networkcontrol() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NetworkSectResp::set_has_networkcontrol() {
  _has_bits_[0] |= 0x00000002u;
}
void NetworkSectResp::clear_has_networkcontrol() {
  _has_bits_[0] &= ~0x00000002u;
}
void NetworkSectResp::clear_networkcontrol() {
  if (networkcontrol_ != NULL) networkcontrol_->::micromsg::NetworkControl::Clear();
  clear_has_networkcontrol();
}
const ::micromsg::NetworkControl& NetworkSectResp::networkcontrol() const {
  // @@protoc_insertion_point(field_get:micromsg.NetworkSectResp.NetworkControl)
  return networkcontrol_ != NULL ? *networkcontrol_
                         : *::micromsg::NetworkControl::internal_default_instance();
}
::micromsg::NetworkControl* NetworkSectResp::mutable_networkcontrol() {
  set_has_networkcontrol();
  if (networkcontrol_ == NULL) {
    networkcontrol_ = new ::micromsg::NetworkControl;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NetworkSectResp.NetworkControl)
  return networkcontrol_;
}
::micromsg::NetworkControl* NetworkSectResp::release_networkcontrol() {
  // @@protoc_insertion_point(field_release:micromsg.NetworkSectResp.NetworkControl)
  clear_has_networkcontrol();
  ::micromsg::NetworkControl* temp = networkcontrol_;
  networkcontrol_ = NULL;
  return temp;
}
void NetworkSectResp::set_allocated_networkcontrol(::micromsg::NetworkControl* networkcontrol) {
  delete networkcontrol_;
  networkcontrol_ = networkcontrol;
  if (networkcontrol) {
    set_has_networkcontrol();
  } else {
    clear_has_networkcontrol();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NetworkSectResp.NetworkControl)
}

// optional .micromsg.BuiltinIPList BuiltinIPList = 3;
bool NetworkSectResp::has_builtiniplist() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NetworkSectResp::set_has_builtiniplist() {
  _has_bits_[0] |= 0x00000004u;
}
void NetworkSectResp::clear_has_builtiniplist() {
  _has_bits_[0] &= ~0x00000004u;
}
void NetworkSectResp::clear_builtiniplist() {
  if (builtiniplist_ != NULL) builtiniplist_->::micromsg::BuiltinIPList::Clear();
  clear_has_builtiniplist();
}
const ::micromsg::BuiltinIPList& NetworkSectResp::builtiniplist() const {
  // @@protoc_insertion_point(field_get:micromsg.NetworkSectResp.BuiltinIPList)
  return builtiniplist_ != NULL ? *builtiniplist_
                         : *::micromsg::BuiltinIPList::internal_default_instance();
}
::micromsg::BuiltinIPList* NetworkSectResp::mutable_builtiniplist() {
  set_has_builtiniplist();
  if (builtiniplist_ == NULL) {
    builtiniplist_ = new ::micromsg::BuiltinIPList;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NetworkSectResp.BuiltinIPList)
  return builtiniplist_;
}
::micromsg::BuiltinIPList* NetworkSectResp::release_builtiniplist() {
  // @@protoc_insertion_point(field_release:micromsg.NetworkSectResp.BuiltinIPList)
  clear_has_builtiniplist();
  ::micromsg::BuiltinIPList* temp = builtiniplist_;
  builtiniplist_ = NULL;
  return temp;
}
void NetworkSectResp::set_allocated_builtiniplist(::micromsg::BuiltinIPList* builtiniplist) {
  delete builtiniplist_;
  builtiniplist_ = builtiniplist;
  if (builtiniplist) {
    set_has_builtiniplist();
  } else {
    clear_has_builtiniplist();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NetworkSectResp.BuiltinIPList)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthSectResp::kUinFieldNumber;
const int AuthSectResp::kSvrPubECDHKeyFieldNumber;
const int AuthSectResp::kSessionKeyFieldNumber;
const int AuthSectResp::kAutoAuthKeyFieldNumber;
const int AuthSectResp::kWTLoginRspBuffFlagFieldNumber;
const int AuthSectResp::kWTLoginRspBuffFieldNumber;
const int AuthSectResp::kWTLoginImgRespInfoFieldNumber;
const int AuthSectResp::kWxVerifyCodeRespInfoFieldNumber;
const int AuthSectResp::kCliDBEncryptKeyFieldNumber;
const int AuthSectResp::kCliDBEncryptInfoFieldNumber;
const int AuthSectResp::kAuthKeyFieldNumber;
const int AuthSectResp::kA2KeyFieldNumber;
const int AuthSectResp::kApplyBetaUrlFieldNumber;
const int AuthSectResp::kShowStyleFieldNumber;
const int AuthSectResp::kAuthTicketFieldNumber;
const int AuthSectResp::kNewVersionFieldNumber;
const int AuthSectResp::kUpdateFlagFieldNumber;
const int AuthSectResp::kAuthResultFlagFieldNumber;
const int AuthSectResp::kFSURLFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthSectResp::AuthSectResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.AuthSectResp)
}
AuthSectResp::AuthSectResp(const AuthSectResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  authkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_authkey()) {
    authkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authkey_);
  }
  applybetaurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_applybetaurl()) {
    applybetaurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.applybetaurl_);
  }
  authticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_authticket()) {
    authticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authticket_);
  }
  fsurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fsurl()) {
    fsurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fsurl_);
  }
  if (from.has_svrpubecdhkey()) {
    svrpubecdhkey_ = new ::micromsg::ECDHKey(*from.svrpubecdhkey_);
  } else {
    svrpubecdhkey_ = NULL;
  }
  if (from.has_sessionkey()) {
    sessionkey_ = new ::micromsg::SKBuiltinBuffer_t(*from.sessionkey_);
  } else {
    sessionkey_ = NULL;
  }
  if (from.has_autoauthkey()) {
    autoauthkey_ = new ::micromsg::SKBuiltinBuffer_t(*from.autoauthkey_);
  } else {
    autoauthkey_ = NULL;
  }
  if (from.has_wtloginrspbuff()) {
    wtloginrspbuff_ = new ::micromsg::SKBuiltinBuffer_t(*from.wtloginrspbuff_);
  } else {
    wtloginrspbuff_ = NULL;
  }
  if (from.has_wtloginimgrespinfo()) {
    wtloginimgrespinfo_ = new ::micromsg::WTLoginImgRespInfo(*from.wtloginimgrespinfo_);
  } else {
    wtloginimgrespinfo_ = NULL;
  }
  if (from.has_wxverifycoderespinfo()) {
    wxverifycoderespinfo_ = new ::micromsg::WxVerifyCodeRespInfo(*from.wxverifycoderespinfo_);
  } else {
    wxverifycoderespinfo_ = NULL;
  }
  if (from.has_clidbencryptkey()) {
    clidbencryptkey_ = new ::micromsg::SKBuiltinBuffer_t(*from.clidbencryptkey_);
  } else {
    clidbencryptkey_ = NULL;
  }
  if (from.has_clidbencryptinfo()) {
    clidbencryptinfo_ = new ::micromsg::SKBuiltinBuffer_t(*from.clidbencryptinfo_);
  } else {
    clidbencryptinfo_ = NULL;
  }
  if (from.has_a2key()) {
    a2key_ = new ::micromsg::SKBuiltinBuffer_t(*from.a2key_);
  } else {
    a2key_ = NULL;
  }
  if (from.has_showstyle()) {
    showstyle_ = new ::micromsg::ShowStyleKey(*from.showstyle_);
  } else {
    showstyle_ = NULL;
  }
  ::memcpy(&uin_, &from.uin_,
    reinterpret_cast<char*>(&authresultflag_) -
    reinterpret_cast<char*>(&uin_) + sizeof(authresultflag_));
  // @@protoc_insertion_point(copy_constructor:micromsg.AuthSectResp)
}

void AuthSectResp::SharedCtor() {
  _cached_size_ = 0;
  authkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  applybetaurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fsurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&svrpubecdhkey_, 0, reinterpret_cast<char*>(&authresultflag_) -
    reinterpret_cast<char*>(&svrpubecdhkey_) + sizeof(authresultflag_));
}

AuthSectResp::~AuthSectResp() {
  // @@protoc_insertion_point(destructor:micromsg.AuthSectResp)
  SharedDtor();
}

void AuthSectResp::SharedDtor() {
  authkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  applybetaurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fsurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete svrpubecdhkey_;
  }
  if (this != internal_default_instance()) {
    delete sessionkey_;
  }
  if (this != internal_default_instance()) {
    delete autoauthkey_;
  }
  if (this != internal_default_instance()) {
    delete wtloginrspbuff_;
  }
  if (this != internal_default_instance()) {
    delete wtloginimgrespinfo_;
  }
  if (this != internal_default_instance()) {
    delete wxverifycoderespinfo_;
  }
  if (this != internal_default_instance()) {
    delete clidbencryptkey_;
  }
  if (this != internal_default_instance()) {
    delete clidbencryptinfo_;
  }
  if (this != internal_default_instance()) {
    delete a2key_;
  }
  if (this != internal_default_instance()) {
    delete showstyle_;
  }
}

void AuthSectResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthSectResp::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AuthSectResp& AuthSectResp::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthSectResp* AuthSectResp::New(::google::protobuf::Arena* arena) const {
  AuthSectResp* n = new AuthSectResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthSectResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.AuthSectResp)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_authkey()) {
      GOOGLE_DCHECK(!authkey_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*authkey_.UnsafeRawStringPointer())->clear();
    }
    if (has_applybetaurl()) {
      GOOGLE_DCHECK(!applybetaurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*applybetaurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_authticket()) {
      GOOGLE_DCHECK(!authticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*authticket_.UnsafeRawStringPointer())->clear();
    }
    if (has_fsurl()) {
      GOOGLE_DCHECK(!fsurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fsurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_svrpubecdhkey()) {
      GOOGLE_DCHECK(svrpubecdhkey_ != NULL);
      svrpubecdhkey_->::micromsg::ECDHKey::Clear();
    }
    if (has_sessionkey()) {
      GOOGLE_DCHECK(sessionkey_ != NULL);
      sessionkey_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_autoauthkey()) {
      GOOGLE_DCHECK(autoauthkey_ != NULL);
      autoauthkey_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_wtloginrspbuff()) {
      GOOGLE_DCHECK(wtloginrspbuff_ != NULL);
      wtloginrspbuff_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 16128u) {
    if (has_wtloginimgrespinfo()) {
      GOOGLE_DCHECK(wtloginimgrespinfo_ != NULL);
      wtloginimgrespinfo_->::micromsg::WTLoginImgRespInfo::Clear();
    }
    if (has_wxverifycoderespinfo()) {
      GOOGLE_DCHECK(wxverifycoderespinfo_ != NULL);
      wxverifycoderespinfo_->::micromsg::WxVerifyCodeRespInfo::Clear();
    }
    if (has_clidbencryptkey()) {
      GOOGLE_DCHECK(clidbencryptkey_ != NULL);
      clidbencryptkey_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_clidbencryptinfo()) {
      GOOGLE_DCHECK(clidbencryptinfo_ != NULL);
      clidbencryptinfo_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_a2key()) {
      GOOGLE_DCHECK(a2key_ != NULL);
      a2key_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_showstyle()) {
      GOOGLE_DCHECK(showstyle_ != NULL);
      showstyle_->::micromsg::ShowStyleKey::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 49152u) {
    ::memset(&uin_, 0, reinterpret_cast<char*>(&wtloginrspbuffflag_) -
      reinterpret_cast<char*>(&uin_) + sizeof(wtloginrspbuffflag_));
  }
  if (_has_bits_[16 / 32] & 458752u) {
    ::memset(&newversion_, 0, reinterpret_cast<char*>(&authresultflag_) -
      reinterpret_cast<char*>(&newversion_) + sizeof(authresultflag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AuthSectResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.AuthSectResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Uin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_uin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.ECDHKey SvrPubECDHKey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svrpubecdhkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t SessionKey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sessionkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t AutoAuthKey = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_autoauthkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 WTLoginRspBuffFlag = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_wtloginrspbuffflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wtloginrspbuffflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t WTLoginRspBuff = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wtloginrspbuff()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.WTLoginImgRespInfo WTLoginImgRespInfo = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wtloginimgrespinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.WxVerifyCodeRespInfo WxVerifyCodeRespInfo = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wxverifycoderespinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t CliDBEncryptKey = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clidbencryptkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t CliDBEncryptInfo = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clidbencryptinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AuthKey = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->authkey().data(), this->authkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.AuthSectResp.AuthKey");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t A2Key = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_a2key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ApplyBetaUrl = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_applybetaurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->applybetaurl().data(), this->applybetaurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.AuthSectResp.ApplyBetaUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.ShowStyleKey ShowStyle = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_showstyle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AuthTicket = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authticket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->authticket().data(), this->authticket().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.AuthSectResp.AuthTicket");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 NewVersion = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_newversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 UpdateFlag = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_updateflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updateflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 AuthResultFlag = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_authresultflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &authresultflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FSURL = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fsurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fsurl().data(), this->fsurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.AuthSectResp.FSURL");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.AuthSectResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.AuthSectResp)
  return false;
#undef DO_
}

void AuthSectResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.AuthSectResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Uin = 1;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uin(), output);
  }

  // required .micromsg.ECDHKey SvrPubECDHKey = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->svrpubecdhkey_, output);
  }

  // required .micromsg.SKBuiltinBuffer_t SessionKey = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->sessionkey_, output);
  }

  // required .micromsg.SKBuiltinBuffer_t AutoAuthKey = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->autoauthkey_, output);
  }

  // required uint32 WTLoginRspBuffFlag = 5;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->wtloginrspbuffflag(), output);
  }

  // optional .micromsg.SKBuiltinBuffer_t WTLoginRspBuff = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->wtloginrspbuff_, output);
  }

  // optional .micromsg.WTLoginImgRespInfo WTLoginImgRespInfo = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->wtloginimgrespinfo_, output);
  }

  // optional .micromsg.WxVerifyCodeRespInfo WxVerifyCodeRespInfo = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->wxverifycoderespinfo_, output);
  }

  // optional .micromsg.SKBuiltinBuffer_t CliDBEncryptKey = 9;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->clidbencryptkey_, output);
  }

  // optional .micromsg.SKBuiltinBuffer_t CliDBEncryptInfo = 10;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->clidbencryptinfo_, output);
  }

  // optional string AuthKey = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authkey().data(), this->authkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AuthSectResp.AuthKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->authkey(), output);
  }

  // optional .micromsg.SKBuiltinBuffer_t A2Key = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->a2key_, output);
  }

  // optional string ApplyBetaUrl = 14;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->applybetaurl().data(), this->applybetaurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AuthSectResp.ApplyBetaUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->applybetaurl(), output);
  }

  // optional .micromsg.ShowStyleKey ShowStyle = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->showstyle_, output);
  }

  // optional string AuthTicket = 16;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authticket().data(), this->authticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AuthSectResp.AuthTicket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->authticket(), output);
  }

  // optional uint32 NewVersion = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->newversion(), output);
  }

  // optional uint32 UpdateFlag = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->updateflag(), output);
  }

  // optional uint32 AuthResultFlag = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->authresultflag(), output);
  }

  // optional string FSURL = 20;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fsurl().data(), this->fsurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AuthSectResp.FSURL");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->fsurl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.AuthSectResp)
}

::google::protobuf::uint8* AuthSectResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.AuthSectResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Uin = 1;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uin(), target);
  }

  // required .micromsg.ECDHKey SvrPubECDHKey = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->svrpubecdhkey_, deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t SessionKey = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->sessionkey_, deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t AutoAuthKey = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->autoauthkey_, deterministic, target);
  }

  // required uint32 WTLoginRspBuffFlag = 5;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->wtloginrspbuffflag(), target);
  }

  // optional .micromsg.SKBuiltinBuffer_t WTLoginRspBuff = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->wtloginrspbuff_, deterministic, target);
  }

  // optional .micromsg.WTLoginImgRespInfo WTLoginImgRespInfo = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->wtloginimgrespinfo_, deterministic, target);
  }

  // optional .micromsg.WxVerifyCodeRespInfo WxVerifyCodeRespInfo = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->wxverifycoderespinfo_, deterministic, target);
  }

  // optional .micromsg.SKBuiltinBuffer_t CliDBEncryptKey = 9;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->clidbencryptkey_, deterministic, target);
  }

  // optional .micromsg.SKBuiltinBuffer_t CliDBEncryptInfo = 10;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->clidbencryptinfo_, deterministic, target);
  }

  // optional string AuthKey = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authkey().data(), this->authkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AuthSectResp.AuthKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->authkey(), target);
  }

  // optional .micromsg.SKBuiltinBuffer_t A2Key = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->a2key_, deterministic, target);
  }

  // optional string ApplyBetaUrl = 14;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->applybetaurl().data(), this->applybetaurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AuthSectResp.ApplyBetaUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->applybetaurl(), target);
  }

  // optional .micromsg.ShowStyleKey ShowStyle = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->showstyle_, deterministic, target);
  }

  // optional string AuthTicket = 16;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authticket().data(), this->authticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AuthSectResp.AuthTicket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->authticket(), target);
  }

  // optional uint32 NewVersion = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->newversion(), target);
  }

  // optional uint32 UpdateFlag = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->updateflag(), target);
  }

  // optional uint32 AuthResultFlag = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->authresultflag(), target);
  }

  // optional string FSURL = 20;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fsurl().data(), this->fsurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AuthSectResp.FSURL");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->fsurl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.AuthSectResp)
  return target;
}

size_t AuthSectResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.AuthSectResp)
  size_t total_size = 0;

  if (has_svrpubecdhkey()) {
    // required .micromsg.ECDHKey SvrPubECDHKey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->svrpubecdhkey_);
  }

  if (has_sessionkey()) {
    // required .micromsg.SKBuiltinBuffer_t SessionKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sessionkey_);
  }

  if (has_autoauthkey()) {
    // required .micromsg.SKBuiltinBuffer_t AutoAuthKey = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->autoauthkey_);
  }

  if (has_uin()) {
    // required uint32 Uin = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uin());
  }

  if (has_wtloginrspbuffflag()) {
    // required uint32 WTLoginRspBuffFlag = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->wtloginrspbuffflag());
  }

  return total_size;
}
size_t AuthSectResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.AuthSectResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000c070) ^ 0x0000c070) == 0) {  // All required fields are present.
    // required .micromsg.ECDHKey SvrPubECDHKey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->svrpubecdhkey_);

    // required .micromsg.SKBuiltinBuffer_t SessionKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sessionkey_);

    // required .micromsg.SKBuiltinBuffer_t AutoAuthKey = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->autoauthkey_);

    // required uint32 Uin = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uin());

    // required uint32 WTLoginRspBuffFlag = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->wtloginrspbuffflag());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string AuthKey = 11;
    if (has_authkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authkey());
    }

    // optional string ApplyBetaUrl = 14;
    if (has_applybetaurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->applybetaurl());
    }

    // optional string AuthTicket = 16;
    if (has_authticket()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authticket());
    }

    // optional string FSURL = 20;
    if (has_fsurl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fsurl());
    }

  }
  // optional .micromsg.SKBuiltinBuffer_t WTLoginRspBuff = 6;
  if (has_wtloginrspbuff()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->wtloginrspbuff_);
  }

  if (_has_bits_[8 / 32] & 16128u) {
    // optional .micromsg.WTLoginImgRespInfo WTLoginImgRespInfo = 7;
    if (has_wtloginimgrespinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->wtloginimgrespinfo_);
    }

    // optional .micromsg.WxVerifyCodeRespInfo WxVerifyCodeRespInfo = 8;
    if (has_wxverifycoderespinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->wxverifycoderespinfo_);
    }

    // optional .micromsg.SKBuiltinBuffer_t CliDBEncryptKey = 9;
    if (has_clidbencryptkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->clidbencryptkey_);
    }

    // optional .micromsg.SKBuiltinBuffer_t CliDBEncryptInfo = 10;
    if (has_clidbencryptinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->clidbencryptinfo_);
    }

    // optional .micromsg.SKBuiltinBuffer_t A2Key = 12;
    if (has_a2key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->a2key_);
    }

    // optional .micromsg.ShowStyleKey ShowStyle = 15;
    if (has_showstyle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->showstyle_);
    }

  }
  if (_has_bits_[16 / 32] & 458752u) {
    // optional uint32 NewVersion = 17;
    if (has_newversion()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newversion());
    }

    // optional uint32 UpdateFlag = 18;
    if (has_updateflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->updateflag());
    }

    // optional uint32 AuthResultFlag = 19;
    if (has_authresultflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->authresultflag());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthSectResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.AuthSectResp)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthSectResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthSectResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.AuthSectResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.AuthSectResp)
    MergeFrom(*source);
  }
}

void AuthSectResp::MergeFrom(const AuthSectResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.AuthSectResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_authkey();
      authkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authkey_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_applybetaurl();
      applybetaurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.applybetaurl_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_authticket();
      authticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authticket_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_fsurl();
      fsurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fsurl_);
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_svrpubecdhkey()->::micromsg::ECDHKey::MergeFrom(from.svrpubecdhkey());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_sessionkey()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.sessionkey());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_autoauthkey()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.autoauthkey());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_wtloginrspbuff()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.wtloginrspbuff());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_wtloginimgrespinfo()->::micromsg::WTLoginImgRespInfo::MergeFrom(from.wtloginimgrespinfo());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_wxverifycoderespinfo()->::micromsg::WxVerifyCodeRespInfo::MergeFrom(from.wxverifycoderespinfo());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_clidbencryptkey()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.clidbencryptkey());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_clidbencryptinfo()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.clidbencryptinfo());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_a2key()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.a2key());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_showstyle()->::micromsg::ShowStyleKey::MergeFrom(from.showstyle());
    }
    if (cached_has_bits & 0x00004000u) {
      uin_ = from.uin_;
    }
    if (cached_has_bits & 0x00008000u) {
      wtloginrspbuffflag_ = from.wtloginrspbuffflag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 458752u) {
    if (cached_has_bits & 0x00010000u) {
      newversion_ = from.newversion_;
    }
    if (cached_has_bits & 0x00020000u) {
      updateflag_ = from.updateflag_;
    }
    if (cached_has_bits & 0x00040000u) {
      authresultflag_ = from.authresultflag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AuthSectResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.AuthSectResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthSectResp::CopyFrom(const AuthSectResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.AuthSectResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthSectResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000c070) != 0x0000c070) return false;
  if (has_svrpubecdhkey()) {
    if (!this->svrpubecdhkey_->IsInitialized()) return false;
  }
  if (has_sessionkey()) {
    if (!this->sessionkey_->IsInitialized()) return false;
  }
  if (has_autoauthkey()) {
    if (!this->autoauthkey_->IsInitialized()) return false;
  }
  if (has_wtloginrspbuff()) {
    if (!this->wtloginrspbuff_->IsInitialized()) return false;
  }
  if (has_wtloginimgrespinfo()) {
    if (!this->wtloginimgrespinfo_->IsInitialized()) return false;
  }
  if (has_wxverifycoderespinfo()) {
    if (!this->wxverifycoderespinfo_->IsInitialized()) return false;
  }
  if (has_clidbencryptkey()) {
    if (!this->clidbencryptkey_->IsInitialized()) return false;
  }
  if (has_clidbencryptinfo()) {
    if (!this->clidbencryptinfo_->IsInitialized()) return false;
  }
  if (has_a2key()) {
    if (!this->a2key_->IsInitialized()) return false;
  }
  if (has_showstyle()) {
    if (!this->showstyle_->IsInitialized()) return false;
  }
  return true;
}

void AuthSectResp::Swap(AuthSectResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthSectResp::InternalSwap(AuthSectResp* other) {
  authkey_.Swap(&other->authkey_);
  applybetaurl_.Swap(&other->applybetaurl_);
  authticket_.Swap(&other->authticket_);
  fsurl_.Swap(&other->fsurl_);
  std::swap(svrpubecdhkey_, other->svrpubecdhkey_);
  std::swap(sessionkey_, other->sessionkey_);
  std::swap(autoauthkey_, other->autoauthkey_);
  std::swap(wtloginrspbuff_, other->wtloginrspbuff_);
  std::swap(wtloginimgrespinfo_, other->wtloginimgrespinfo_);
  std::swap(wxverifycoderespinfo_, other->wxverifycoderespinfo_);
  std::swap(clidbencryptkey_, other->clidbencryptkey_);
  std::swap(clidbencryptinfo_, other->clidbencryptinfo_);
  std::swap(a2key_, other->a2key_);
  std::swap(showstyle_, other->showstyle_);
  std::swap(uin_, other->uin_);
  std::swap(wtloginrspbuffflag_, other->wtloginrspbuffflag_);
  std::swap(newversion_, other->newversion_);
  std::swap(updateflag_, other->updateflag_);
  std::swap(authresultflag_, other->authresultflag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthSectResp::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthSectResp

// required uint32 Uin = 1;
bool AuthSectResp::has_uin() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void AuthSectResp::set_has_uin() {
  _has_bits_[0] |= 0x00004000u;
}
void AuthSectResp::clear_has_uin() {
  _has_bits_[0] &= ~0x00004000u;
}
void AuthSectResp::clear_uin() {
  uin_ = 0u;
  clear_has_uin();
}
::google::protobuf::uint32 AuthSectResp::uin() const {
  // @@protoc_insertion_point(field_get:micromsg.AuthSectResp.Uin)
  return uin_;
}
void AuthSectResp::set_uin(::google::protobuf::uint32 value) {
  set_has_uin();
  uin_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AuthSectResp.Uin)
}

// required .micromsg.ECDHKey SvrPubECDHKey = 2;
bool AuthSectResp::has_svrpubecdhkey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AuthSectResp::set_has_svrpubecdhkey() {
  _has_bits_[0] |= 0x00000010u;
}
void AuthSectResp::clear_has_svrpubecdhkey() {
  _has_bits_[0] &= ~0x00000010u;
}
void AuthSectResp::clear_svrpubecdhkey() {
  if (svrpubecdhkey_ != NULL) svrpubecdhkey_->::micromsg::ECDHKey::Clear();
  clear_has_svrpubecdhkey();
}
const ::micromsg::ECDHKey& AuthSectResp::svrpubecdhkey() const {
  // @@protoc_insertion_point(field_get:micromsg.AuthSectResp.SvrPubECDHKey)
  return svrpubecdhkey_ != NULL ? *svrpubecdhkey_
                         : *::micromsg::ECDHKey::internal_default_instance();
}
::micromsg::ECDHKey* AuthSectResp::mutable_svrpubecdhkey() {
  set_has_svrpubecdhkey();
  if (svrpubecdhkey_ == NULL) {
    svrpubecdhkey_ = new ::micromsg::ECDHKey;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AuthSectResp.SvrPubECDHKey)
  return svrpubecdhkey_;
}
::micromsg::ECDHKey* AuthSectResp::release_svrpubecdhkey() {
  // @@protoc_insertion_point(field_release:micromsg.AuthSectResp.SvrPubECDHKey)
  clear_has_svrpubecdhkey();
  ::micromsg::ECDHKey* temp = svrpubecdhkey_;
  svrpubecdhkey_ = NULL;
  return temp;
}
void AuthSectResp::set_allocated_svrpubecdhkey(::micromsg::ECDHKey* svrpubecdhkey) {
  delete svrpubecdhkey_;
  svrpubecdhkey_ = svrpubecdhkey;
  if (svrpubecdhkey) {
    set_has_svrpubecdhkey();
  } else {
    clear_has_svrpubecdhkey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AuthSectResp.SvrPubECDHKey)
}

// required .micromsg.SKBuiltinBuffer_t SessionKey = 3;
bool AuthSectResp::has_sessionkey() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void AuthSectResp::set_has_sessionkey() {
  _has_bits_[0] |= 0x00000020u;
}
void AuthSectResp::clear_has_sessionkey() {
  _has_bits_[0] &= ~0x00000020u;
}
void AuthSectResp::clear_sessionkey() {
  if (sessionkey_ != NULL) sessionkey_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_sessionkey();
}
const ::micromsg::SKBuiltinBuffer_t& AuthSectResp::sessionkey() const {
  // @@protoc_insertion_point(field_get:micromsg.AuthSectResp.SessionKey)
  return sessionkey_ != NULL ? *sessionkey_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* AuthSectResp::mutable_sessionkey() {
  set_has_sessionkey();
  if (sessionkey_ == NULL) {
    sessionkey_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AuthSectResp.SessionKey)
  return sessionkey_;
}
::micromsg::SKBuiltinBuffer_t* AuthSectResp::release_sessionkey() {
  // @@protoc_insertion_point(field_release:micromsg.AuthSectResp.SessionKey)
  clear_has_sessionkey();
  ::micromsg::SKBuiltinBuffer_t* temp = sessionkey_;
  sessionkey_ = NULL;
  return temp;
}
void AuthSectResp::set_allocated_sessionkey(::micromsg::SKBuiltinBuffer_t* sessionkey) {
  delete sessionkey_;
  sessionkey_ = sessionkey;
  if (sessionkey) {
    set_has_sessionkey();
  } else {
    clear_has_sessionkey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AuthSectResp.SessionKey)
}

// required .micromsg.SKBuiltinBuffer_t AutoAuthKey = 4;
bool AuthSectResp::has_autoauthkey() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void AuthSectResp::set_has_autoauthkey() {
  _has_bits_[0] |= 0x00000040u;
}
void AuthSectResp::clear_has_autoauthkey() {
  _has_bits_[0] &= ~0x00000040u;
}
void AuthSectResp::clear_autoauthkey() {
  if (autoauthkey_ != NULL) autoauthkey_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_autoauthkey();
}
const ::micromsg::SKBuiltinBuffer_t& AuthSectResp::autoauthkey() const {
  // @@protoc_insertion_point(field_get:micromsg.AuthSectResp.AutoAuthKey)
  return autoauthkey_ != NULL ? *autoauthkey_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* AuthSectResp::mutable_autoauthkey() {
  set_has_autoauthkey();
  if (autoauthkey_ == NULL) {
    autoauthkey_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AuthSectResp.AutoAuthKey)
  return autoauthkey_;
}
::micromsg::SKBuiltinBuffer_t* AuthSectResp::release_autoauthkey() {
  // @@protoc_insertion_point(field_release:micromsg.AuthSectResp.AutoAuthKey)
  clear_has_autoauthkey();
  ::micromsg::SKBuiltinBuffer_t* temp = autoauthkey_;
  autoauthkey_ = NULL;
  return temp;
}
void AuthSectResp::set_allocated_autoauthkey(::micromsg::SKBuiltinBuffer_t* autoauthkey) {
  delete autoauthkey_;
  autoauthkey_ = autoauthkey;
  if (autoauthkey) {
    set_has_autoauthkey();
  } else {
    clear_has_autoauthkey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AuthSectResp.AutoAuthKey)
}

// required uint32 WTLoginRspBuffFlag = 5;
bool AuthSectResp::has_wtloginrspbuffflag() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void AuthSectResp::set_has_wtloginrspbuffflag() {
  _has_bits_[0] |= 0x00008000u;
}
void AuthSectResp::clear_has_wtloginrspbuffflag() {
  _has_bits_[0] &= ~0x00008000u;
}
void AuthSectResp::clear_wtloginrspbuffflag() {
  wtloginrspbuffflag_ = 0u;
  clear_has_wtloginrspbuffflag();
}
::google::protobuf::uint32 AuthSectResp::wtloginrspbuffflag() const {
  // @@protoc_insertion_point(field_get:micromsg.AuthSectResp.WTLoginRspBuffFlag)
  return wtloginrspbuffflag_;
}
void AuthSectResp::set_wtloginrspbuffflag(::google::protobuf::uint32 value) {
  set_has_wtloginrspbuffflag();
  wtloginrspbuffflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AuthSectResp.WTLoginRspBuffFlag)
}

// optional .micromsg.SKBuiltinBuffer_t WTLoginRspBuff = 6;
bool AuthSectResp::has_wtloginrspbuff() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void AuthSectResp::set_has_wtloginrspbuff() {
  _has_bits_[0] |= 0x00000080u;
}
void AuthSectResp::clear_has_wtloginrspbuff() {
  _has_bits_[0] &= ~0x00000080u;
}
void AuthSectResp::clear_wtloginrspbuff() {
  if (wtloginrspbuff_ != NULL) wtloginrspbuff_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_wtloginrspbuff();
}
const ::micromsg::SKBuiltinBuffer_t& AuthSectResp::wtloginrspbuff() const {
  // @@protoc_insertion_point(field_get:micromsg.AuthSectResp.WTLoginRspBuff)
  return wtloginrspbuff_ != NULL ? *wtloginrspbuff_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* AuthSectResp::mutable_wtloginrspbuff() {
  set_has_wtloginrspbuff();
  if (wtloginrspbuff_ == NULL) {
    wtloginrspbuff_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AuthSectResp.WTLoginRspBuff)
  return wtloginrspbuff_;
}
::micromsg::SKBuiltinBuffer_t* AuthSectResp::release_wtloginrspbuff() {
  // @@protoc_insertion_point(field_release:micromsg.AuthSectResp.WTLoginRspBuff)
  clear_has_wtloginrspbuff();
  ::micromsg::SKBuiltinBuffer_t* temp = wtloginrspbuff_;
  wtloginrspbuff_ = NULL;
  return temp;
}
void AuthSectResp::set_allocated_wtloginrspbuff(::micromsg::SKBuiltinBuffer_t* wtloginrspbuff) {
  delete wtloginrspbuff_;
  wtloginrspbuff_ = wtloginrspbuff;
  if (wtloginrspbuff) {
    set_has_wtloginrspbuff();
  } else {
    clear_has_wtloginrspbuff();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AuthSectResp.WTLoginRspBuff)
}

// optional .micromsg.WTLoginImgRespInfo WTLoginImgRespInfo = 7;
bool AuthSectResp::has_wtloginimgrespinfo() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void AuthSectResp::set_has_wtloginimgrespinfo() {
  _has_bits_[0] |= 0x00000100u;
}
void AuthSectResp::clear_has_wtloginimgrespinfo() {
  _has_bits_[0] &= ~0x00000100u;
}
void AuthSectResp::clear_wtloginimgrespinfo() {
  if (wtloginimgrespinfo_ != NULL) wtloginimgrespinfo_->::micromsg::WTLoginImgRespInfo::Clear();
  clear_has_wtloginimgrespinfo();
}
const ::micromsg::WTLoginImgRespInfo& AuthSectResp::wtloginimgrespinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.AuthSectResp.WTLoginImgRespInfo)
  return wtloginimgrespinfo_ != NULL ? *wtloginimgrespinfo_
                         : *::micromsg::WTLoginImgRespInfo::internal_default_instance();
}
::micromsg::WTLoginImgRespInfo* AuthSectResp::mutable_wtloginimgrespinfo() {
  set_has_wtloginimgrespinfo();
  if (wtloginimgrespinfo_ == NULL) {
    wtloginimgrespinfo_ = new ::micromsg::WTLoginImgRespInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AuthSectResp.WTLoginImgRespInfo)
  return wtloginimgrespinfo_;
}
::micromsg::WTLoginImgRespInfo* AuthSectResp::release_wtloginimgrespinfo() {
  // @@protoc_insertion_point(field_release:micromsg.AuthSectResp.WTLoginImgRespInfo)
  clear_has_wtloginimgrespinfo();
  ::micromsg::WTLoginImgRespInfo* temp = wtloginimgrespinfo_;
  wtloginimgrespinfo_ = NULL;
  return temp;
}
void AuthSectResp::set_allocated_wtloginimgrespinfo(::micromsg::WTLoginImgRespInfo* wtloginimgrespinfo) {
  delete wtloginimgrespinfo_;
  wtloginimgrespinfo_ = wtloginimgrespinfo;
  if (wtloginimgrespinfo) {
    set_has_wtloginimgrespinfo();
  } else {
    clear_has_wtloginimgrespinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AuthSectResp.WTLoginImgRespInfo)
}

// optional .micromsg.WxVerifyCodeRespInfo WxVerifyCodeRespInfo = 8;
bool AuthSectResp::has_wxverifycoderespinfo() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void AuthSectResp::set_has_wxverifycoderespinfo() {
  _has_bits_[0] |= 0x00000200u;
}
void AuthSectResp::clear_has_wxverifycoderespinfo() {
  _has_bits_[0] &= ~0x00000200u;
}
void AuthSectResp::clear_wxverifycoderespinfo() {
  if (wxverifycoderespinfo_ != NULL) wxverifycoderespinfo_->::micromsg::WxVerifyCodeRespInfo::Clear();
  clear_has_wxverifycoderespinfo();
}
const ::micromsg::WxVerifyCodeRespInfo& AuthSectResp::wxverifycoderespinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.AuthSectResp.WxVerifyCodeRespInfo)
  return wxverifycoderespinfo_ != NULL ? *wxverifycoderespinfo_
                         : *::micromsg::WxVerifyCodeRespInfo::internal_default_instance();
}
::micromsg::WxVerifyCodeRespInfo* AuthSectResp::mutable_wxverifycoderespinfo() {
  set_has_wxverifycoderespinfo();
  if (wxverifycoderespinfo_ == NULL) {
    wxverifycoderespinfo_ = new ::micromsg::WxVerifyCodeRespInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AuthSectResp.WxVerifyCodeRespInfo)
  return wxverifycoderespinfo_;
}
::micromsg::WxVerifyCodeRespInfo* AuthSectResp::release_wxverifycoderespinfo() {
  // @@protoc_insertion_point(field_release:micromsg.AuthSectResp.WxVerifyCodeRespInfo)
  clear_has_wxverifycoderespinfo();
  ::micromsg::WxVerifyCodeRespInfo* temp = wxverifycoderespinfo_;
  wxverifycoderespinfo_ = NULL;
  return temp;
}
void AuthSectResp::set_allocated_wxverifycoderespinfo(::micromsg::WxVerifyCodeRespInfo* wxverifycoderespinfo) {
  delete wxverifycoderespinfo_;
  wxverifycoderespinfo_ = wxverifycoderespinfo;
  if (wxverifycoderespinfo) {
    set_has_wxverifycoderespinfo();
  } else {
    clear_has_wxverifycoderespinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AuthSectResp.WxVerifyCodeRespInfo)
}

// optional .micromsg.SKBuiltinBuffer_t CliDBEncryptKey = 9;
bool AuthSectResp::has_clidbencryptkey() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void AuthSectResp::set_has_clidbencryptkey() {
  _has_bits_[0] |= 0x00000400u;
}
void AuthSectResp::clear_has_clidbencryptkey() {
  _has_bits_[0] &= ~0x00000400u;
}
void AuthSectResp::clear_clidbencryptkey() {
  if (clidbencryptkey_ != NULL) clidbencryptkey_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_clidbencryptkey();
}
const ::micromsg::SKBuiltinBuffer_t& AuthSectResp::clidbencryptkey() const {
  // @@protoc_insertion_point(field_get:micromsg.AuthSectResp.CliDBEncryptKey)
  return clidbencryptkey_ != NULL ? *clidbencryptkey_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* AuthSectResp::mutable_clidbencryptkey() {
  set_has_clidbencryptkey();
  if (clidbencryptkey_ == NULL) {
    clidbencryptkey_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AuthSectResp.CliDBEncryptKey)
  return clidbencryptkey_;
}
::micromsg::SKBuiltinBuffer_t* AuthSectResp::release_clidbencryptkey() {
  // @@protoc_insertion_point(field_release:micromsg.AuthSectResp.CliDBEncryptKey)
  clear_has_clidbencryptkey();
  ::micromsg::SKBuiltinBuffer_t* temp = clidbencryptkey_;
  clidbencryptkey_ = NULL;
  return temp;
}
void AuthSectResp::set_allocated_clidbencryptkey(::micromsg::SKBuiltinBuffer_t* clidbencryptkey) {
  delete clidbencryptkey_;
  clidbencryptkey_ = clidbencryptkey;
  if (clidbencryptkey) {
    set_has_clidbencryptkey();
  } else {
    clear_has_clidbencryptkey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AuthSectResp.CliDBEncryptKey)
}

// optional .micromsg.SKBuiltinBuffer_t CliDBEncryptInfo = 10;
bool AuthSectResp::has_clidbencryptinfo() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void AuthSectResp::set_has_clidbencryptinfo() {
  _has_bits_[0] |= 0x00000800u;
}
void AuthSectResp::clear_has_clidbencryptinfo() {
  _has_bits_[0] &= ~0x00000800u;
}
void AuthSectResp::clear_clidbencryptinfo() {
  if (clidbencryptinfo_ != NULL) clidbencryptinfo_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_clidbencryptinfo();
}
const ::micromsg::SKBuiltinBuffer_t& AuthSectResp::clidbencryptinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.AuthSectResp.CliDBEncryptInfo)
  return clidbencryptinfo_ != NULL ? *clidbencryptinfo_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* AuthSectResp::mutable_clidbencryptinfo() {
  set_has_clidbencryptinfo();
  if (clidbencryptinfo_ == NULL) {
    clidbencryptinfo_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AuthSectResp.CliDBEncryptInfo)
  return clidbencryptinfo_;
}
::micromsg::SKBuiltinBuffer_t* AuthSectResp::release_clidbencryptinfo() {
  // @@protoc_insertion_point(field_release:micromsg.AuthSectResp.CliDBEncryptInfo)
  clear_has_clidbencryptinfo();
  ::micromsg::SKBuiltinBuffer_t* temp = clidbencryptinfo_;
  clidbencryptinfo_ = NULL;
  return temp;
}
void AuthSectResp::set_allocated_clidbencryptinfo(::micromsg::SKBuiltinBuffer_t* clidbencryptinfo) {
  delete clidbencryptinfo_;
  clidbencryptinfo_ = clidbencryptinfo;
  if (clidbencryptinfo) {
    set_has_clidbencryptinfo();
  } else {
    clear_has_clidbencryptinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AuthSectResp.CliDBEncryptInfo)
}

// optional string AuthKey = 11;
bool AuthSectResp::has_authkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AuthSectResp::set_has_authkey() {
  _has_bits_[0] |= 0x00000001u;
}
void AuthSectResp::clear_has_authkey() {
  _has_bits_[0] &= ~0x00000001u;
}
void AuthSectResp::clear_authkey() {
  authkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_authkey();
}
const ::std::string& AuthSectResp::authkey() const {
  // @@protoc_insertion_point(field_get:micromsg.AuthSectResp.AuthKey)
  return authkey_.GetNoArena();
}
void AuthSectResp::set_authkey(const ::std::string& value) {
  set_has_authkey();
  authkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AuthSectResp.AuthKey)
}
#if LANG_CXX11
void AuthSectResp::set_authkey(::std::string&& value) {
  set_has_authkey();
  authkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AuthSectResp.AuthKey)
}
#endif
void AuthSectResp::set_authkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_authkey();
  authkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AuthSectResp.AuthKey)
}
void AuthSectResp::set_authkey(const char* value, size_t size) {
  set_has_authkey();
  authkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AuthSectResp.AuthKey)
}
::std::string* AuthSectResp::mutable_authkey() {
  set_has_authkey();
  // @@protoc_insertion_point(field_mutable:micromsg.AuthSectResp.AuthKey)
  return authkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthSectResp::release_authkey() {
  // @@protoc_insertion_point(field_release:micromsg.AuthSectResp.AuthKey)
  clear_has_authkey();
  return authkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthSectResp::set_allocated_authkey(::std::string* authkey) {
  if (authkey != NULL) {
    set_has_authkey();
  } else {
    clear_has_authkey();
  }
  authkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), authkey);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AuthSectResp.AuthKey)
}

// optional .micromsg.SKBuiltinBuffer_t A2Key = 12;
bool AuthSectResp::has_a2key() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void AuthSectResp::set_has_a2key() {
  _has_bits_[0] |= 0x00001000u;
}
void AuthSectResp::clear_has_a2key() {
  _has_bits_[0] &= ~0x00001000u;
}
void AuthSectResp::clear_a2key() {
  if (a2key_ != NULL) a2key_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_a2key();
}
const ::micromsg::SKBuiltinBuffer_t& AuthSectResp::a2key() const {
  // @@protoc_insertion_point(field_get:micromsg.AuthSectResp.A2Key)
  return a2key_ != NULL ? *a2key_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* AuthSectResp::mutable_a2key() {
  set_has_a2key();
  if (a2key_ == NULL) {
    a2key_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AuthSectResp.A2Key)
  return a2key_;
}
::micromsg::SKBuiltinBuffer_t* AuthSectResp::release_a2key() {
  // @@protoc_insertion_point(field_release:micromsg.AuthSectResp.A2Key)
  clear_has_a2key();
  ::micromsg::SKBuiltinBuffer_t* temp = a2key_;
  a2key_ = NULL;
  return temp;
}
void AuthSectResp::set_allocated_a2key(::micromsg::SKBuiltinBuffer_t* a2key) {
  delete a2key_;
  a2key_ = a2key;
  if (a2key) {
    set_has_a2key();
  } else {
    clear_has_a2key();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AuthSectResp.A2Key)
}

// optional string ApplyBetaUrl = 14;
bool AuthSectResp::has_applybetaurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AuthSectResp::set_has_applybetaurl() {
  _has_bits_[0] |= 0x00000002u;
}
void AuthSectResp::clear_has_applybetaurl() {
  _has_bits_[0] &= ~0x00000002u;
}
void AuthSectResp::clear_applybetaurl() {
  applybetaurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_applybetaurl();
}
const ::std::string& AuthSectResp::applybetaurl() const {
  // @@protoc_insertion_point(field_get:micromsg.AuthSectResp.ApplyBetaUrl)
  return applybetaurl_.GetNoArena();
}
void AuthSectResp::set_applybetaurl(const ::std::string& value) {
  set_has_applybetaurl();
  applybetaurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AuthSectResp.ApplyBetaUrl)
}
#if LANG_CXX11
void AuthSectResp::set_applybetaurl(::std::string&& value) {
  set_has_applybetaurl();
  applybetaurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AuthSectResp.ApplyBetaUrl)
}
#endif
void AuthSectResp::set_applybetaurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_applybetaurl();
  applybetaurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AuthSectResp.ApplyBetaUrl)
}
void AuthSectResp::set_applybetaurl(const char* value, size_t size) {
  set_has_applybetaurl();
  applybetaurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AuthSectResp.ApplyBetaUrl)
}
::std::string* AuthSectResp::mutable_applybetaurl() {
  set_has_applybetaurl();
  // @@protoc_insertion_point(field_mutable:micromsg.AuthSectResp.ApplyBetaUrl)
  return applybetaurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthSectResp::release_applybetaurl() {
  // @@protoc_insertion_point(field_release:micromsg.AuthSectResp.ApplyBetaUrl)
  clear_has_applybetaurl();
  return applybetaurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthSectResp::set_allocated_applybetaurl(::std::string* applybetaurl) {
  if (applybetaurl != NULL) {
    set_has_applybetaurl();
  } else {
    clear_has_applybetaurl();
  }
  applybetaurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), applybetaurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AuthSectResp.ApplyBetaUrl)
}

// optional .micromsg.ShowStyleKey ShowStyle = 15;
bool AuthSectResp::has_showstyle() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void AuthSectResp::set_has_showstyle() {
  _has_bits_[0] |= 0x00002000u;
}
void AuthSectResp::clear_has_showstyle() {
  _has_bits_[0] &= ~0x00002000u;
}
void AuthSectResp::clear_showstyle() {
  if (showstyle_ != NULL) showstyle_->::micromsg::ShowStyleKey::Clear();
  clear_has_showstyle();
}
const ::micromsg::ShowStyleKey& AuthSectResp::showstyle() const {
  // @@protoc_insertion_point(field_get:micromsg.AuthSectResp.ShowStyle)
  return showstyle_ != NULL ? *showstyle_
                         : *::micromsg::ShowStyleKey::internal_default_instance();
}
::micromsg::ShowStyleKey* AuthSectResp::mutable_showstyle() {
  set_has_showstyle();
  if (showstyle_ == NULL) {
    showstyle_ = new ::micromsg::ShowStyleKey;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AuthSectResp.ShowStyle)
  return showstyle_;
}
::micromsg::ShowStyleKey* AuthSectResp::release_showstyle() {
  // @@protoc_insertion_point(field_release:micromsg.AuthSectResp.ShowStyle)
  clear_has_showstyle();
  ::micromsg::ShowStyleKey* temp = showstyle_;
  showstyle_ = NULL;
  return temp;
}
void AuthSectResp::set_allocated_showstyle(::micromsg::ShowStyleKey* showstyle) {
  delete showstyle_;
  showstyle_ = showstyle;
  if (showstyle) {
    set_has_showstyle();
  } else {
    clear_has_showstyle();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AuthSectResp.ShowStyle)
}

// optional string AuthTicket = 16;
bool AuthSectResp::has_authticket() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AuthSectResp::set_has_authticket() {
  _has_bits_[0] |= 0x00000004u;
}
void AuthSectResp::clear_has_authticket() {
  _has_bits_[0] &= ~0x00000004u;
}
void AuthSectResp::clear_authticket() {
  authticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_authticket();
}
const ::std::string& AuthSectResp::authticket() const {
  // @@protoc_insertion_point(field_get:micromsg.AuthSectResp.AuthTicket)
  return authticket_.GetNoArena();
}
void AuthSectResp::set_authticket(const ::std::string& value) {
  set_has_authticket();
  authticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AuthSectResp.AuthTicket)
}
#if LANG_CXX11
void AuthSectResp::set_authticket(::std::string&& value) {
  set_has_authticket();
  authticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AuthSectResp.AuthTicket)
}
#endif
void AuthSectResp::set_authticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_authticket();
  authticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AuthSectResp.AuthTicket)
}
void AuthSectResp::set_authticket(const char* value, size_t size) {
  set_has_authticket();
  authticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AuthSectResp.AuthTicket)
}
::std::string* AuthSectResp::mutable_authticket() {
  set_has_authticket();
  // @@protoc_insertion_point(field_mutable:micromsg.AuthSectResp.AuthTicket)
  return authticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthSectResp::release_authticket() {
  // @@protoc_insertion_point(field_release:micromsg.AuthSectResp.AuthTicket)
  clear_has_authticket();
  return authticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthSectResp::set_allocated_authticket(::std::string* authticket) {
  if (authticket != NULL) {
    set_has_authticket();
  } else {
    clear_has_authticket();
  }
  authticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), authticket);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AuthSectResp.AuthTicket)
}

// optional uint32 NewVersion = 17;
bool AuthSectResp::has_newversion() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void AuthSectResp::set_has_newversion() {
  _has_bits_[0] |= 0x00010000u;
}
void AuthSectResp::clear_has_newversion() {
  _has_bits_[0] &= ~0x00010000u;
}
void AuthSectResp::clear_newversion() {
  newversion_ = 0u;
  clear_has_newversion();
}
::google::protobuf::uint32 AuthSectResp::newversion() const {
  // @@protoc_insertion_point(field_get:micromsg.AuthSectResp.NewVersion)
  return newversion_;
}
void AuthSectResp::set_newversion(::google::protobuf::uint32 value) {
  set_has_newversion();
  newversion_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AuthSectResp.NewVersion)
}

// optional uint32 UpdateFlag = 18;
bool AuthSectResp::has_updateflag() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void AuthSectResp::set_has_updateflag() {
  _has_bits_[0] |= 0x00020000u;
}
void AuthSectResp::clear_has_updateflag() {
  _has_bits_[0] &= ~0x00020000u;
}
void AuthSectResp::clear_updateflag() {
  updateflag_ = 0u;
  clear_has_updateflag();
}
::google::protobuf::uint32 AuthSectResp::updateflag() const {
  // @@protoc_insertion_point(field_get:micromsg.AuthSectResp.UpdateFlag)
  return updateflag_;
}
void AuthSectResp::set_updateflag(::google::protobuf::uint32 value) {
  set_has_updateflag();
  updateflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AuthSectResp.UpdateFlag)
}

// optional uint32 AuthResultFlag = 19;
bool AuthSectResp::has_authresultflag() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void AuthSectResp::set_has_authresultflag() {
  _has_bits_[0] |= 0x00040000u;
}
void AuthSectResp::clear_has_authresultflag() {
  _has_bits_[0] &= ~0x00040000u;
}
void AuthSectResp::clear_authresultflag() {
  authresultflag_ = 0u;
  clear_has_authresultflag();
}
::google::protobuf::uint32 AuthSectResp::authresultflag() const {
  // @@protoc_insertion_point(field_get:micromsg.AuthSectResp.AuthResultFlag)
  return authresultflag_;
}
void AuthSectResp::set_authresultflag(::google::protobuf::uint32 value) {
  set_has_authresultflag();
  authresultflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AuthSectResp.AuthResultFlag)
}

// optional string FSURL = 20;
bool AuthSectResp::has_fsurl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AuthSectResp::set_has_fsurl() {
  _has_bits_[0] |= 0x00000008u;
}
void AuthSectResp::clear_has_fsurl() {
  _has_bits_[0] &= ~0x00000008u;
}
void AuthSectResp::clear_fsurl() {
  fsurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fsurl();
}
const ::std::string& AuthSectResp::fsurl() const {
  // @@protoc_insertion_point(field_get:micromsg.AuthSectResp.FSURL)
  return fsurl_.GetNoArena();
}
void AuthSectResp::set_fsurl(const ::std::string& value) {
  set_has_fsurl();
  fsurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AuthSectResp.FSURL)
}
#if LANG_CXX11
void AuthSectResp::set_fsurl(::std::string&& value) {
  set_has_fsurl();
  fsurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AuthSectResp.FSURL)
}
#endif
void AuthSectResp::set_fsurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fsurl();
  fsurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AuthSectResp.FSURL)
}
void AuthSectResp::set_fsurl(const char* value, size_t size) {
  set_has_fsurl();
  fsurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AuthSectResp.FSURL)
}
::std::string* AuthSectResp::mutable_fsurl() {
  set_has_fsurl();
  // @@protoc_insertion_point(field_mutable:micromsg.AuthSectResp.FSURL)
  return fsurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthSectResp::release_fsurl() {
  // @@protoc_insertion_point(field_release:micromsg.AuthSectResp.FSURL)
  clear_has_fsurl();
  return fsurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthSectResp::set_allocated_fsurl(::std::string* fsurl) {
  if (fsurl != NULL) {
    set_has_fsurl();
  } else {
    clear_has_fsurl();
  }
  fsurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fsurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AuthSectResp.FSURL)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcctSectResp::kUserNameFieldNumber;
const int AcctSectResp::kNickNameFieldNumber;
const int AcctSectResp::kBindUinFieldNumber;
const int AcctSectResp::kBindEmailFieldNumber;
const int AcctSectResp::kBindMobileFieldNumber;
const int AcctSectResp::kAliasFieldNumber;
const int AcctSectResp::kStatusFieldNumber;
const int AcctSectResp::kPluginFlagFieldNumber;
const int AcctSectResp::kRegTypeFieldNumber;
const int AcctSectResp::kDeviceInfoXmlFieldNumber;
const int AcctSectResp::kSafeDeviceFieldNumber;
const int AcctSectResp::kOfficialUserNameFieldNumber;
const int AcctSectResp::kOfficialNickNameFieldNumber;
const int AcctSectResp::kPushMailStatusFieldNumber;
const int AcctSectResp::kFSURLFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcctSectResp::AcctSectResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.AcctSectResp)
}
AcctSectResp::AcctSectResp(const AcctSectResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nickname()) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  bindemail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bindemail()) {
    bindemail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bindemail_);
  }
  bindmobile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bindmobile()) {
    bindmobile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bindmobile_);
  }
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_alias()) {
    alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
  }
  deviceinfoxml_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_deviceinfoxml()) {
    deviceinfoxml_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceinfoxml_);
  }
  officialusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_officialusername()) {
    officialusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.officialusername_);
  }
  officialnickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_officialnickname()) {
    officialnickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.officialnickname_);
  }
  fsurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fsurl()) {
    fsurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fsurl_);
  }
  ::memcpy(&binduin_, &from.binduin_,
    reinterpret_cast<char*>(&pushmailstatus_) -
    reinterpret_cast<char*>(&binduin_) + sizeof(pushmailstatus_));
  // @@protoc_insertion_point(copy_constructor:micromsg.AcctSectResp)
}

void AcctSectResp::SharedCtor() {
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bindemail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bindmobile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deviceinfoxml_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  officialusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  officialnickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fsurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&binduin_, 0, reinterpret_cast<char*>(&pushmailstatus_) -
    reinterpret_cast<char*>(&binduin_) + sizeof(pushmailstatus_));
}

AcctSectResp::~AcctSectResp() {
  // @@protoc_insertion_point(destructor:micromsg.AcctSectResp)
  SharedDtor();
}

void AcctSectResp::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bindemail_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bindmobile_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alias_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deviceinfoxml_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  officialusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  officialnickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fsurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AcctSectResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcctSectResp::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AcctSectResp& AcctSectResp::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

AcctSectResp* AcctSectResp::New(::google::protobuf::Arena* arena) const {
  AcctSectResp* n = new AcctSectResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AcctSectResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.AcctSectResp)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_username()) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
    if (has_nickname()) {
      GOOGLE_DCHECK(!nickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*nickname_.UnsafeRawStringPointer())->clear();
    }
    if (has_bindemail()) {
      GOOGLE_DCHECK(!bindemail_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bindemail_.UnsafeRawStringPointer())->clear();
    }
    if (has_bindmobile()) {
      GOOGLE_DCHECK(!bindmobile_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bindmobile_.UnsafeRawStringPointer())->clear();
    }
    if (has_alias()) {
      GOOGLE_DCHECK(!alias_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*alias_.UnsafeRawStringPointer())->clear();
    }
    if (has_deviceinfoxml()) {
      GOOGLE_DCHECK(!deviceinfoxml_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*deviceinfoxml_.UnsafeRawStringPointer())->clear();
    }
    if (has_officialusername()) {
      GOOGLE_DCHECK(!officialusername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*officialusername_.UnsafeRawStringPointer())->clear();
    }
    if (has_officialnickname()) {
      GOOGLE_DCHECK(!officialnickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*officialnickname_.UnsafeRawStringPointer())->clear();
    }
  }
  if (has_fsurl()) {
    GOOGLE_DCHECK(!fsurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*fsurl_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[8 / 32] & 32256u) {
    ::memset(&binduin_, 0, reinterpret_cast<char*>(&pushmailstatus_) -
      reinterpret_cast<char*>(&binduin_) + sizeof(pushmailstatus_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AcctSectResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.AcctSectResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string UserName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.AcctSectResp.UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string NickName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.AcctSectResp.NickName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 BindUin = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_binduin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &binduin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string BindEmail = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bindemail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bindemail().data(), this->bindemail().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.AcctSectResp.BindEmail");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string BindMobile = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bindmobile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bindmobile().data(), this->bindmobile().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.AcctSectResp.BindMobile");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Alias = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alias()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->alias().data(), this->alias().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.AcctSectResp.Alias");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Status = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 PluginFlag = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_pluginflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pluginflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 RegType = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_regtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &regtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string DeviceInfoXml = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceinfoxml()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deviceinfoxml().data(), this->deviceinfoxml().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.AcctSectResp.DeviceInfoXml");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 SafeDevice = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_safedevice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &safedevice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string OfficialUserName = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_officialusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->officialusername().data(), this->officialusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.AcctSectResp.OfficialUserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string OfficialNickName = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_officialnickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->officialnickname().data(), this->officialnickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.AcctSectResp.OfficialNickName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 PushMailStatus = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_pushmailstatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pushmailstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FSURL = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fsurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fsurl().data(), this->fsurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.AcctSectResp.FSURL");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.AcctSectResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.AcctSectResp)
  return false;
#undef DO_
}

void AcctSectResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.AcctSectResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string UserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AcctSectResp.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // optional string NickName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AcctSectResp.NickName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // required uint32 BindUin = 3;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->binduin(), output);
  }

  // optional string BindEmail = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bindemail().data(), this->bindemail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AcctSectResp.BindEmail");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->bindemail(), output);
  }

  // optional string BindMobile = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bindmobile().data(), this->bindmobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AcctSectResp.BindMobile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->bindmobile(), output);
  }

  // optional string Alias = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AcctSectResp.Alias");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->alias(), output);
  }

  // required uint32 Status = 8;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->status(), output);
  }

  // optional uint32 PluginFlag = 9;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->pluginflag(), output);
  }

  // optional uint32 RegType = 10;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->regtype(), output);
  }

  // optional string DeviceInfoXml = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deviceinfoxml().data(), this->deviceinfoxml().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AcctSectResp.DeviceInfoXml");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->deviceinfoxml(), output);
  }

  // optional uint32 SafeDevice = 12;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->safedevice(), output);
  }

  // optional string OfficialUserName = 13;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->officialusername().data(), this->officialusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AcctSectResp.OfficialUserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->officialusername(), output);
  }

  // optional string OfficialNickName = 14;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->officialnickname().data(), this->officialnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AcctSectResp.OfficialNickName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->officialnickname(), output);
  }

  // optional uint32 PushMailStatus = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->pushmailstatus(), output);
  }

  // optional string FSURL = 16;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fsurl().data(), this->fsurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AcctSectResp.FSURL");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->fsurl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.AcctSectResp)
}

::google::protobuf::uint8* AcctSectResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.AcctSectResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string UserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AcctSectResp.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // optional string NickName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AcctSectResp.NickName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // required uint32 BindUin = 3;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->binduin(), target);
  }

  // optional string BindEmail = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bindemail().data(), this->bindemail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AcctSectResp.BindEmail");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->bindemail(), target);
  }

  // optional string BindMobile = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bindmobile().data(), this->bindmobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AcctSectResp.BindMobile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->bindmobile(), target);
  }

  // optional string Alias = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AcctSectResp.Alias");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->alias(), target);
  }

  // required uint32 Status = 8;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->status(), target);
  }

  // optional uint32 PluginFlag = 9;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->pluginflag(), target);
  }

  // optional uint32 RegType = 10;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->regtype(), target);
  }

  // optional string DeviceInfoXml = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deviceinfoxml().data(), this->deviceinfoxml().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AcctSectResp.DeviceInfoXml");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->deviceinfoxml(), target);
  }

  // optional uint32 SafeDevice = 12;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->safedevice(), target);
  }

  // optional string OfficialUserName = 13;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->officialusername().data(), this->officialusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AcctSectResp.OfficialUserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->officialusername(), target);
  }

  // optional string OfficialNickName = 14;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->officialnickname().data(), this->officialnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AcctSectResp.OfficialNickName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->officialnickname(), target);
  }

  // optional uint32 PushMailStatus = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->pushmailstatus(), target);
  }

  // optional string FSURL = 16;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fsurl().data(), this->fsurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AcctSectResp.FSURL");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->fsurl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.AcctSectResp)
  return target;
}

size_t AcctSectResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.AcctSectResp)
  size_t total_size = 0;

  if (has_binduin()) {
    // required uint32 BindUin = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->binduin());
  }

  if (has_status()) {
    // required uint32 Status = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  return total_size;
}
size_t AcctSectResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.AcctSectResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000600) ^ 0x00000600) == 0) {  // All required fields are present.
    // required uint32 BindUin = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->binduin());

    // required uint32 Status = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string UserName = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string NickName = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string BindEmail = 4;
    if (has_bindemail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bindemail());
    }

    // optional string BindMobile = 5;
    if (has_bindmobile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bindmobile());
    }

    // optional string Alias = 6;
    if (has_alias()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alias());
    }

    // optional string DeviceInfoXml = 11;
    if (has_deviceinfoxml()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceinfoxml());
    }

    // optional string OfficialUserName = 13;
    if (has_officialusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->officialusername());
    }

    // optional string OfficialNickName = 14;
    if (has_officialnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->officialnickname());
    }

  }
  // optional string FSURL = 16;
  if (has_fsurl()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fsurl());
  }

  if (_has_bits_[8 / 32] & 30720u) {
    // optional uint32 PluginFlag = 9;
    if (has_pluginflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pluginflag());
    }

    // optional uint32 RegType = 10;
    if (has_regtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->regtype());
    }

    // optional uint32 SafeDevice = 12;
    if (has_safedevice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->safedevice());
    }

    // optional uint32 PushMailStatus = 15;
    if (has_pushmailstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pushmailstatus());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcctSectResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.AcctSectResp)
  GOOGLE_DCHECK_NE(&from, this);
  const AcctSectResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AcctSectResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.AcctSectResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.AcctSectResp)
    MergeFrom(*source);
  }
}

void AcctSectResp::MergeFrom(const AcctSectResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.AcctSectResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_bindemail();
      bindemail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bindemail_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_bindmobile();
      bindmobile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bindmobile_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_alias();
      alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_deviceinfoxml();
      deviceinfoxml_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceinfoxml_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_officialusername();
      officialusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.officialusername_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_officialnickname();
      officialnickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.officialnickname_);
    }
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_fsurl();
      fsurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fsurl_);
    }
    if (cached_has_bits & 0x00000200u) {
      binduin_ = from.binduin_;
    }
    if (cached_has_bits & 0x00000400u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000800u) {
      pluginflag_ = from.pluginflag_;
    }
    if (cached_has_bits & 0x00001000u) {
      regtype_ = from.regtype_;
    }
    if (cached_has_bits & 0x00002000u) {
      safedevice_ = from.safedevice_;
    }
    if (cached_has_bits & 0x00004000u) {
      pushmailstatus_ = from.pushmailstatus_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AcctSectResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.AcctSectResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcctSectResp::CopyFrom(const AcctSectResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.AcctSectResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcctSectResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000600) != 0x00000600) return false;
  return true;
}

void AcctSectResp::Swap(AcctSectResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AcctSectResp::InternalSwap(AcctSectResp* other) {
  username_.Swap(&other->username_);
  nickname_.Swap(&other->nickname_);
  bindemail_.Swap(&other->bindemail_);
  bindmobile_.Swap(&other->bindmobile_);
  alias_.Swap(&other->alias_);
  deviceinfoxml_.Swap(&other->deviceinfoxml_);
  officialusername_.Swap(&other->officialusername_);
  officialnickname_.Swap(&other->officialnickname_);
  fsurl_.Swap(&other->fsurl_);
  std::swap(binduin_, other->binduin_);
  std::swap(status_, other->status_);
  std::swap(pluginflag_, other->pluginflag_);
  std::swap(regtype_, other->regtype_);
  std::swap(safedevice_, other->safedevice_);
  std::swap(pushmailstatus_, other->pushmailstatus_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AcctSectResp::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AcctSectResp

// optional string UserName = 1;
bool AcctSectResp::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AcctSectResp::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void AcctSectResp::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void AcctSectResp::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& AcctSectResp::username() const {
  // @@protoc_insertion_point(field_get:micromsg.AcctSectResp.UserName)
  return username_.GetNoArena();
}
void AcctSectResp::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AcctSectResp.UserName)
}
#if LANG_CXX11
void AcctSectResp::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AcctSectResp.UserName)
}
#endif
void AcctSectResp::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AcctSectResp.UserName)
}
void AcctSectResp::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AcctSectResp.UserName)
}
::std::string* AcctSectResp::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.AcctSectResp.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AcctSectResp::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.AcctSectResp.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AcctSectResp::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AcctSectResp.UserName)
}

// optional string NickName = 2;
bool AcctSectResp::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AcctSectResp::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
void AcctSectResp::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
void AcctSectResp::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
const ::std::string& AcctSectResp::nickname() const {
  // @@protoc_insertion_point(field_get:micromsg.AcctSectResp.NickName)
  return nickname_.GetNoArena();
}
void AcctSectResp::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AcctSectResp.NickName)
}
#if LANG_CXX11
void AcctSectResp::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AcctSectResp.NickName)
}
#endif
void AcctSectResp::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AcctSectResp.NickName)
}
void AcctSectResp::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AcctSectResp.NickName)
}
::std::string* AcctSectResp::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:micromsg.AcctSectResp.NickName)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AcctSectResp::release_nickname() {
  // @@protoc_insertion_point(field_release:micromsg.AcctSectResp.NickName)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AcctSectResp::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AcctSectResp.NickName)
}

// required uint32 BindUin = 3;
bool AcctSectResp::has_binduin() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void AcctSectResp::set_has_binduin() {
  _has_bits_[0] |= 0x00000200u;
}
void AcctSectResp::clear_has_binduin() {
  _has_bits_[0] &= ~0x00000200u;
}
void AcctSectResp::clear_binduin() {
  binduin_ = 0u;
  clear_has_binduin();
}
::google::protobuf::uint32 AcctSectResp::binduin() const {
  // @@protoc_insertion_point(field_get:micromsg.AcctSectResp.BindUin)
  return binduin_;
}
void AcctSectResp::set_binduin(::google::protobuf::uint32 value) {
  set_has_binduin();
  binduin_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AcctSectResp.BindUin)
}

// optional string BindEmail = 4;
bool AcctSectResp::has_bindemail() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AcctSectResp::set_has_bindemail() {
  _has_bits_[0] |= 0x00000004u;
}
void AcctSectResp::clear_has_bindemail() {
  _has_bits_[0] &= ~0x00000004u;
}
void AcctSectResp::clear_bindemail() {
  bindemail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bindemail();
}
const ::std::string& AcctSectResp::bindemail() const {
  // @@protoc_insertion_point(field_get:micromsg.AcctSectResp.BindEmail)
  return bindemail_.GetNoArena();
}
void AcctSectResp::set_bindemail(const ::std::string& value) {
  set_has_bindemail();
  bindemail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AcctSectResp.BindEmail)
}
#if LANG_CXX11
void AcctSectResp::set_bindemail(::std::string&& value) {
  set_has_bindemail();
  bindemail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AcctSectResp.BindEmail)
}
#endif
void AcctSectResp::set_bindemail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bindemail();
  bindemail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AcctSectResp.BindEmail)
}
void AcctSectResp::set_bindemail(const char* value, size_t size) {
  set_has_bindemail();
  bindemail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AcctSectResp.BindEmail)
}
::std::string* AcctSectResp::mutable_bindemail() {
  set_has_bindemail();
  // @@protoc_insertion_point(field_mutable:micromsg.AcctSectResp.BindEmail)
  return bindemail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AcctSectResp::release_bindemail() {
  // @@protoc_insertion_point(field_release:micromsg.AcctSectResp.BindEmail)
  clear_has_bindemail();
  return bindemail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AcctSectResp::set_allocated_bindemail(::std::string* bindemail) {
  if (bindemail != NULL) {
    set_has_bindemail();
  } else {
    clear_has_bindemail();
  }
  bindemail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bindemail);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AcctSectResp.BindEmail)
}

// optional string BindMobile = 5;
bool AcctSectResp::has_bindmobile() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AcctSectResp::set_has_bindmobile() {
  _has_bits_[0] |= 0x00000008u;
}
void AcctSectResp::clear_has_bindmobile() {
  _has_bits_[0] &= ~0x00000008u;
}
void AcctSectResp::clear_bindmobile() {
  bindmobile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bindmobile();
}
const ::std::string& AcctSectResp::bindmobile() const {
  // @@protoc_insertion_point(field_get:micromsg.AcctSectResp.BindMobile)
  return bindmobile_.GetNoArena();
}
void AcctSectResp::set_bindmobile(const ::std::string& value) {
  set_has_bindmobile();
  bindmobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AcctSectResp.BindMobile)
}
#if LANG_CXX11
void AcctSectResp::set_bindmobile(::std::string&& value) {
  set_has_bindmobile();
  bindmobile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AcctSectResp.BindMobile)
}
#endif
void AcctSectResp::set_bindmobile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bindmobile();
  bindmobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AcctSectResp.BindMobile)
}
void AcctSectResp::set_bindmobile(const char* value, size_t size) {
  set_has_bindmobile();
  bindmobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AcctSectResp.BindMobile)
}
::std::string* AcctSectResp::mutable_bindmobile() {
  set_has_bindmobile();
  // @@protoc_insertion_point(field_mutable:micromsg.AcctSectResp.BindMobile)
  return bindmobile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AcctSectResp::release_bindmobile() {
  // @@protoc_insertion_point(field_release:micromsg.AcctSectResp.BindMobile)
  clear_has_bindmobile();
  return bindmobile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AcctSectResp::set_allocated_bindmobile(::std::string* bindmobile) {
  if (bindmobile != NULL) {
    set_has_bindmobile();
  } else {
    clear_has_bindmobile();
  }
  bindmobile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bindmobile);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AcctSectResp.BindMobile)
}

// optional string Alias = 6;
bool AcctSectResp::has_alias() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AcctSectResp::set_has_alias() {
  _has_bits_[0] |= 0x00000010u;
}
void AcctSectResp::clear_has_alias() {
  _has_bits_[0] &= ~0x00000010u;
}
void AcctSectResp::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_alias();
}
const ::std::string& AcctSectResp::alias() const {
  // @@protoc_insertion_point(field_get:micromsg.AcctSectResp.Alias)
  return alias_.GetNoArena();
}
void AcctSectResp::set_alias(const ::std::string& value) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AcctSectResp.Alias)
}
#if LANG_CXX11
void AcctSectResp::set_alias(::std::string&& value) {
  set_has_alias();
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AcctSectResp.Alias)
}
#endif
void AcctSectResp::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AcctSectResp.Alias)
}
void AcctSectResp::set_alias(const char* value, size_t size) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AcctSectResp.Alias)
}
::std::string* AcctSectResp::mutable_alias() {
  set_has_alias();
  // @@protoc_insertion_point(field_mutable:micromsg.AcctSectResp.Alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AcctSectResp::release_alias() {
  // @@protoc_insertion_point(field_release:micromsg.AcctSectResp.Alias)
  clear_has_alias();
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AcctSectResp::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    set_has_alias();
  } else {
    clear_has_alias();
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AcctSectResp.Alias)
}

// required uint32 Status = 8;
bool AcctSectResp::has_status() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void AcctSectResp::set_has_status() {
  _has_bits_[0] |= 0x00000400u;
}
void AcctSectResp::clear_has_status() {
  _has_bits_[0] &= ~0x00000400u;
}
void AcctSectResp::clear_status() {
  status_ = 0u;
  clear_has_status();
}
::google::protobuf::uint32 AcctSectResp::status() const {
  // @@protoc_insertion_point(field_get:micromsg.AcctSectResp.Status)
  return status_;
}
void AcctSectResp::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AcctSectResp.Status)
}

// optional uint32 PluginFlag = 9;
bool AcctSectResp::has_pluginflag() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void AcctSectResp::set_has_pluginflag() {
  _has_bits_[0] |= 0x00000800u;
}
void AcctSectResp::clear_has_pluginflag() {
  _has_bits_[0] &= ~0x00000800u;
}
void AcctSectResp::clear_pluginflag() {
  pluginflag_ = 0u;
  clear_has_pluginflag();
}
::google::protobuf::uint32 AcctSectResp::pluginflag() const {
  // @@protoc_insertion_point(field_get:micromsg.AcctSectResp.PluginFlag)
  return pluginflag_;
}
void AcctSectResp::set_pluginflag(::google::protobuf::uint32 value) {
  set_has_pluginflag();
  pluginflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AcctSectResp.PluginFlag)
}

// optional uint32 RegType = 10;
bool AcctSectResp::has_regtype() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void AcctSectResp::set_has_regtype() {
  _has_bits_[0] |= 0x00001000u;
}
void AcctSectResp::clear_has_regtype() {
  _has_bits_[0] &= ~0x00001000u;
}
void AcctSectResp::clear_regtype() {
  regtype_ = 0u;
  clear_has_regtype();
}
::google::protobuf::uint32 AcctSectResp::regtype() const {
  // @@protoc_insertion_point(field_get:micromsg.AcctSectResp.RegType)
  return regtype_;
}
void AcctSectResp::set_regtype(::google::protobuf::uint32 value) {
  set_has_regtype();
  regtype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AcctSectResp.RegType)
}

// optional string DeviceInfoXml = 11;
bool AcctSectResp::has_deviceinfoxml() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void AcctSectResp::set_has_deviceinfoxml() {
  _has_bits_[0] |= 0x00000020u;
}
void AcctSectResp::clear_has_deviceinfoxml() {
  _has_bits_[0] &= ~0x00000020u;
}
void AcctSectResp::clear_deviceinfoxml() {
  deviceinfoxml_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deviceinfoxml();
}
const ::std::string& AcctSectResp::deviceinfoxml() const {
  // @@protoc_insertion_point(field_get:micromsg.AcctSectResp.DeviceInfoXml)
  return deviceinfoxml_.GetNoArena();
}
void AcctSectResp::set_deviceinfoxml(const ::std::string& value) {
  set_has_deviceinfoxml();
  deviceinfoxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AcctSectResp.DeviceInfoXml)
}
#if LANG_CXX11
void AcctSectResp::set_deviceinfoxml(::std::string&& value) {
  set_has_deviceinfoxml();
  deviceinfoxml_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AcctSectResp.DeviceInfoXml)
}
#endif
void AcctSectResp::set_deviceinfoxml(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_deviceinfoxml();
  deviceinfoxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AcctSectResp.DeviceInfoXml)
}
void AcctSectResp::set_deviceinfoxml(const char* value, size_t size) {
  set_has_deviceinfoxml();
  deviceinfoxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AcctSectResp.DeviceInfoXml)
}
::std::string* AcctSectResp::mutable_deviceinfoxml() {
  set_has_deviceinfoxml();
  // @@protoc_insertion_point(field_mutable:micromsg.AcctSectResp.DeviceInfoXml)
  return deviceinfoxml_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AcctSectResp::release_deviceinfoxml() {
  // @@protoc_insertion_point(field_release:micromsg.AcctSectResp.DeviceInfoXml)
  clear_has_deviceinfoxml();
  return deviceinfoxml_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AcctSectResp::set_allocated_deviceinfoxml(::std::string* deviceinfoxml) {
  if (deviceinfoxml != NULL) {
    set_has_deviceinfoxml();
  } else {
    clear_has_deviceinfoxml();
  }
  deviceinfoxml_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceinfoxml);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AcctSectResp.DeviceInfoXml)
}

// optional uint32 SafeDevice = 12;
bool AcctSectResp::has_safedevice() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void AcctSectResp::set_has_safedevice() {
  _has_bits_[0] |= 0x00002000u;
}
void AcctSectResp::clear_has_safedevice() {
  _has_bits_[0] &= ~0x00002000u;
}
void AcctSectResp::clear_safedevice() {
  safedevice_ = 0u;
  clear_has_safedevice();
}
::google::protobuf::uint32 AcctSectResp::safedevice() const {
  // @@protoc_insertion_point(field_get:micromsg.AcctSectResp.SafeDevice)
  return safedevice_;
}
void AcctSectResp::set_safedevice(::google::protobuf::uint32 value) {
  set_has_safedevice();
  safedevice_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AcctSectResp.SafeDevice)
}

// optional string OfficialUserName = 13;
bool AcctSectResp::has_officialusername() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void AcctSectResp::set_has_officialusername() {
  _has_bits_[0] |= 0x00000040u;
}
void AcctSectResp::clear_has_officialusername() {
  _has_bits_[0] &= ~0x00000040u;
}
void AcctSectResp::clear_officialusername() {
  officialusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_officialusername();
}
const ::std::string& AcctSectResp::officialusername() const {
  // @@protoc_insertion_point(field_get:micromsg.AcctSectResp.OfficialUserName)
  return officialusername_.GetNoArena();
}
void AcctSectResp::set_officialusername(const ::std::string& value) {
  set_has_officialusername();
  officialusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AcctSectResp.OfficialUserName)
}
#if LANG_CXX11
void AcctSectResp::set_officialusername(::std::string&& value) {
  set_has_officialusername();
  officialusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AcctSectResp.OfficialUserName)
}
#endif
void AcctSectResp::set_officialusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_officialusername();
  officialusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AcctSectResp.OfficialUserName)
}
void AcctSectResp::set_officialusername(const char* value, size_t size) {
  set_has_officialusername();
  officialusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AcctSectResp.OfficialUserName)
}
::std::string* AcctSectResp::mutable_officialusername() {
  set_has_officialusername();
  // @@protoc_insertion_point(field_mutable:micromsg.AcctSectResp.OfficialUserName)
  return officialusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AcctSectResp::release_officialusername() {
  // @@protoc_insertion_point(field_release:micromsg.AcctSectResp.OfficialUserName)
  clear_has_officialusername();
  return officialusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AcctSectResp::set_allocated_officialusername(::std::string* officialusername) {
  if (officialusername != NULL) {
    set_has_officialusername();
  } else {
    clear_has_officialusername();
  }
  officialusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), officialusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AcctSectResp.OfficialUserName)
}

// optional string OfficialNickName = 14;
bool AcctSectResp::has_officialnickname() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void AcctSectResp::set_has_officialnickname() {
  _has_bits_[0] |= 0x00000080u;
}
void AcctSectResp::clear_has_officialnickname() {
  _has_bits_[0] &= ~0x00000080u;
}
void AcctSectResp::clear_officialnickname() {
  officialnickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_officialnickname();
}
const ::std::string& AcctSectResp::officialnickname() const {
  // @@protoc_insertion_point(field_get:micromsg.AcctSectResp.OfficialNickName)
  return officialnickname_.GetNoArena();
}
void AcctSectResp::set_officialnickname(const ::std::string& value) {
  set_has_officialnickname();
  officialnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AcctSectResp.OfficialNickName)
}
#if LANG_CXX11
void AcctSectResp::set_officialnickname(::std::string&& value) {
  set_has_officialnickname();
  officialnickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AcctSectResp.OfficialNickName)
}
#endif
void AcctSectResp::set_officialnickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_officialnickname();
  officialnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AcctSectResp.OfficialNickName)
}
void AcctSectResp::set_officialnickname(const char* value, size_t size) {
  set_has_officialnickname();
  officialnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AcctSectResp.OfficialNickName)
}
::std::string* AcctSectResp::mutable_officialnickname() {
  set_has_officialnickname();
  // @@protoc_insertion_point(field_mutable:micromsg.AcctSectResp.OfficialNickName)
  return officialnickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AcctSectResp::release_officialnickname() {
  // @@protoc_insertion_point(field_release:micromsg.AcctSectResp.OfficialNickName)
  clear_has_officialnickname();
  return officialnickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AcctSectResp::set_allocated_officialnickname(::std::string* officialnickname) {
  if (officialnickname != NULL) {
    set_has_officialnickname();
  } else {
    clear_has_officialnickname();
  }
  officialnickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), officialnickname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AcctSectResp.OfficialNickName)
}

// optional uint32 PushMailStatus = 15;
bool AcctSectResp::has_pushmailstatus() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void AcctSectResp::set_has_pushmailstatus() {
  _has_bits_[0] |= 0x00004000u;
}
void AcctSectResp::clear_has_pushmailstatus() {
  _has_bits_[0] &= ~0x00004000u;
}
void AcctSectResp::clear_pushmailstatus() {
  pushmailstatus_ = 0u;
  clear_has_pushmailstatus();
}
::google::protobuf::uint32 AcctSectResp::pushmailstatus() const {
  // @@protoc_insertion_point(field_get:micromsg.AcctSectResp.PushMailStatus)
  return pushmailstatus_;
}
void AcctSectResp::set_pushmailstatus(::google::protobuf::uint32 value) {
  set_has_pushmailstatus();
  pushmailstatus_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AcctSectResp.PushMailStatus)
}

// optional string FSURL = 16;
bool AcctSectResp::has_fsurl() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void AcctSectResp::set_has_fsurl() {
  _has_bits_[0] |= 0x00000100u;
}
void AcctSectResp::clear_has_fsurl() {
  _has_bits_[0] &= ~0x00000100u;
}
void AcctSectResp::clear_fsurl() {
  fsurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fsurl();
}
const ::std::string& AcctSectResp::fsurl() const {
  // @@protoc_insertion_point(field_get:micromsg.AcctSectResp.FSURL)
  return fsurl_.GetNoArena();
}
void AcctSectResp::set_fsurl(const ::std::string& value) {
  set_has_fsurl();
  fsurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AcctSectResp.FSURL)
}
#if LANG_CXX11
void AcctSectResp::set_fsurl(::std::string&& value) {
  set_has_fsurl();
  fsurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AcctSectResp.FSURL)
}
#endif
void AcctSectResp::set_fsurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fsurl();
  fsurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AcctSectResp.FSURL)
}
void AcctSectResp::set_fsurl(const char* value, size_t size) {
  set_has_fsurl();
  fsurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AcctSectResp.FSURL)
}
::std::string* AcctSectResp::mutable_fsurl() {
  set_has_fsurl();
  // @@protoc_insertion_point(field_mutable:micromsg.AcctSectResp.FSURL)
  return fsurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AcctSectResp::release_fsurl() {
  // @@protoc_insertion_point(field_release:micromsg.AcctSectResp.FSURL)
  clear_has_fsurl();
  return fsurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AcctSectResp::set_allocated_fsurl(::std::string* fsurl) {
  if (fsurl != NULL) {
    set_has_fsurl();
  } else {
    clear_has_fsurl();
  }
  fsurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fsurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AcctSectResp.FSURL)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnifyAuthResponse::kBaseResponseFieldNumber;
const int UnifyAuthResponse::kUnifyAuthSectFlagFieldNumber;
const int UnifyAuthResponse::kAuthSectRespFieldNumber;
const int UnifyAuthResponse::kAcctSectRespFieldNumber;
const int UnifyAuthResponse::kNetworkSectRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnifyAuthResponse::UnifyAuthResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmlogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.UnifyAuthResponse)
}
UnifyAuthResponse::UnifyAuthResponse(const UnifyAuthResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_authsectresp()) {
    authsectresp_ = new ::micromsg::AuthSectResp(*from.authsectresp_);
  } else {
    authsectresp_ = NULL;
  }
  if (from.has_acctsectresp()) {
    acctsectresp_ = new ::micromsg::AcctSectResp(*from.acctsectresp_);
  } else {
    acctsectresp_ = NULL;
  }
  if (from.has_networksectresp()) {
    networksectresp_ = new ::micromsg::NetworkSectResp(*from.networksectresp_);
  } else {
    networksectresp_ = NULL;
  }
  unifyauthsectflag_ = from.unifyauthsectflag_;
  // @@protoc_insertion_point(copy_constructor:micromsg.UnifyAuthResponse)
}

void UnifyAuthResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&unifyauthsectflag_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(unifyauthsectflag_));
}

UnifyAuthResponse::~UnifyAuthResponse() {
  // @@protoc_insertion_point(destructor:micromsg.UnifyAuthResponse)
  SharedDtor();
}

void UnifyAuthResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete authsectresp_;
  }
  if (this != internal_default_instance()) {
    delete acctsectresp_;
  }
  if (this != internal_default_instance()) {
    delete networksectresp_;
  }
}

void UnifyAuthResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnifyAuthResponse::descriptor() {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UnifyAuthResponse& UnifyAuthResponse::default_instance() {
  protobuf_mmlogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

UnifyAuthResponse* UnifyAuthResponse::New(::google::protobuf::Arena* arena) const {
  UnifyAuthResponse* n = new UnifyAuthResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnifyAuthResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.UnifyAuthResponse)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_authsectresp()) {
      GOOGLE_DCHECK(authsectresp_ != NULL);
      authsectresp_->::micromsg::AuthSectResp::Clear();
    }
    if (has_acctsectresp()) {
      GOOGLE_DCHECK(acctsectresp_ != NULL);
      acctsectresp_->::micromsg::AcctSectResp::Clear();
    }
    if (has_networksectresp()) {
      GOOGLE_DCHECK(networksectresp_ != NULL);
      networksectresp_->::micromsg::NetworkSectResp::Clear();
    }
  }
  unifyauthsectflag_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UnifyAuthResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.UnifyAuthResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 UnifyAuthSectFlag = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_unifyauthsectflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unifyauthsectflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.AuthSectResp AuthSectResp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_authsectresp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.AcctSectResp AcctSectResp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acctsectresp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.NetworkSectResp NetworkSectResp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_networksectresp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.UnifyAuthResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.UnifyAuthResponse)
  return false;
#undef DO_
}

void UnifyAuthResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.UnifyAuthResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional uint32 UnifyAuthSectFlag = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->unifyauthsectflag(), output);
  }

  // optional .micromsg.AuthSectResp AuthSectResp = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->authsectresp_, output);
  }

  // optional .micromsg.AcctSectResp AcctSectResp = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->acctsectresp_, output);
  }

  // optional .micromsg.NetworkSectResp NetworkSectResp = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->networksectresp_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.UnifyAuthResponse)
}

::google::protobuf::uint8* UnifyAuthResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.UnifyAuthResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional uint32 UnifyAuthSectFlag = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->unifyauthsectflag(), target);
  }

  // optional .micromsg.AuthSectResp AuthSectResp = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->authsectresp_, deterministic, target);
  }

  // optional .micromsg.AcctSectResp AcctSectResp = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->acctsectresp_, deterministic, target);
  }

  // optional .micromsg.NetworkSectResp NetworkSectResp = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->networksectresp_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.UnifyAuthResponse)
  return target;
}

size_t UnifyAuthResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.UnifyAuthResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  if (_has_bits_[0 / 32] & 30u) {
    // optional .micromsg.AuthSectResp AuthSectResp = 3;
    if (has_authsectresp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->authsectresp_);
    }

    // optional .micromsg.AcctSectResp AcctSectResp = 4;
    if (has_acctsectresp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->acctsectresp_);
    }

    // optional .micromsg.NetworkSectResp NetworkSectResp = 5;
    if (has_networksectresp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->networksectresp_);
    }

    // optional uint32 UnifyAuthSectFlag = 2;
    if (has_unifyauthsectflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unifyauthsectflag());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnifyAuthResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.UnifyAuthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UnifyAuthResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnifyAuthResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.UnifyAuthResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.UnifyAuthResponse)
    MergeFrom(*source);
  }
}

void UnifyAuthResponse::MergeFrom(const UnifyAuthResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.UnifyAuthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_authsectresp()->::micromsg::AuthSectResp::MergeFrom(from.authsectresp());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_acctsectresp()->::micromsg::AcctSectResp::MergeFrom(from.acctsectresp());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_networksectresp()->::micromsg::NetworkSectResp::MergeFrom(from.networksectresp());
    }
    if (cached_has_bits & 0x00000010u) {
      unifyauthsectflag_ = from.unifyauthsectflag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UnifyAuthResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.UnifyAuthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnifyAuthResponse::CopyFrom(const UnifyAuthResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.UnifyAuthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnifyAuthResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_authsectresp()) {
    if (!this->authsectresp_->IsInitialized()) return false;
  }
  if (has_acctsectresp()) {
    if (!this->acctsectresp_->IsInitialized()) return false;
  }
  if (has_networksectresp()) {
    if (!this->networksectresp_->IsInitialized()) return false;
  }
  return true;
}

void UnifyAuthResponse::Swap(UnifyAuthResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnifyAuthResponse::InternalSwap(UnifyAuthResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(authsectresp_, other->authsectresp_);
  std::swap(acctsectresp_, other->acctsectresp_);
  std::swap(networksectresp_, other->networksectresp_);
  std::swap(unifyauthsectflag_, other->unifyauthsectflag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnifyAuthResponse::GetMetadata() const {
  protobuf_mmlogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmlogin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnifyAuthResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool UnifyAuthResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UnifyAuthResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void UnifyAuthResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void UnifyAuthResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& UnifyAuthResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.UnifyAuthResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* UnifyAuthResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UnifyAuthResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* UnifyAuthResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.UnifyAuthResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void UnifyAuthResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UnifyAuthResponse.BaseResponse)
}

// optional uint32 UnifyAuthSectFlag = 2;
bool UnifyAuthResponse::has_unifyauthsectflag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UnifyAuthResponse::set_has_unifyauthsectflag() {
  _has_bits_[0] |= 0x00000010u;
}
void UnifyAuthResponse::clear_has_unifyauthsectflag() {
  _has_bits_[0] &= ~0x00000010u;
}
void UnifyAuthResponse::clear_unifyauthsectflag() {
  unifyauthsectflag_ = 0u;
  clear_has_unifyauthsectflag();
}
::google::protobuf::uint32 UnifyAuthResponse::unifyauthsectflag() const {
  // @@protoc_insertion_point(field_get:micromsg.UnifyAuthResponse.UnifyAuthSectFlag)
  return unifyauthsectflag_;
}
void UnifyAuthResponse::set_unifyauthsectflag(::google::protobuf::uint32 value) {
  set_has_unifyauthsectflag();
  unifyauthsectflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UnifyAuthResponse.UnifyAuthSectFlag)
}

// optional .micromsg.AuthSectResp AuthSectResp = 3;
bool UnifyAuthResponse::has_authsectresp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UnifyAuthResponse::set_has_authsectresp() {
  _has_bits_[0] |= 0x00000002u;
}
void UnifyAuthResponse::clear_has_authsectresp() {
  _has_bits_[0] &= ~0x00000002u;
}
void UnifyAuthResponse::clear_authsectresp() {
  if (authsectresp_ != NULL) authsectresp_->::micromsg::AuthSectResp::Clear();
  clear_has_authsectresp();
}
const ::micromsg::AuthSectResp& UnifyAuthResponse::authsectresp() const {
  // @@protoc_insertion_point(field_get:micromsg.UnifyAuthResponse.AuthSectResp)
  return authsectresp_ != NULL ? *authsectresp_
                         : *::micromsg::AuthSectResp::internal_default_instance();
}
::micromsg::AuthSectResp* UnifyAuthResponse::mutable_authsectresp() {
  set_has_authsectresp();
  if (authsectresp_ == NULL) {
    authsectresp_ = new ::micromsg::AuthSectResp;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UnifyAuthResponse.AuthSectResp)
  return authsectresp_;
}
::micromsg::AuthSectResp* UnifyAuthResponse::release_authsectresp() {
  // @@protoc_insertion_point(field_release:micromsg.UnifyAuthResponse.AuthSectResp)
  clear_has_authsectresp();
  ::micromsg::AuthSectResp* temp = authsectresp_;
  authsectresp_ = NULL;
  return temp;
}
void UnifyAuthResponse::set_allocated_authsectresp(::micromsg::AuthSectResp* authsectresp) {
  delete authsectresp_;
  authsectresp_ = authsectresp;
  if (authsectresp) {
    set_has_authsectresp();
  } else {
    clear_has_authsectresp();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UnifyAuthResponse.AuthSectResp)
}

// optional .micromsg.AcctSectResp AcctSectResp = 4;
bool UnifyAuthResponse::has_acctsectresp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UnifyAuthResponse::set_has_acctsectresp() {
  _has_bits_[0] |= 0x00000004u;
}
void UnifyAuthResponse::clear_has_acctsectresp() {
  _has_bits_[0] &= ~0x00000004u;
}
void UnifyAuthResponse::clear_acctsectresp() {
  if (acctsectresp_ != NULL) acctsectresp_->::micromsg::AcctSectResp::Clear();
  clear_has_acctsectresp();
}
const ::micromsg::AcctSectResp& UnifyAuthResponse::acctsectresp() const {
  // @@protoc_insertion_point(field_get:micromsg.UnifyAuthResponse.AcctSectResp)
  return acctsectresp_ != NULL ? *acctsectresp_
                         : *::micromsg::AcctSectResp::internal_default_instance();
}
::micromsg::AcctSectResp* UnifyAuthResponse::mutable_acctsectresp() {
  set_has_acctsectresp();
  if (acctsectresp_ == NULL) {
    acctsectresp_ = new ::micromsg::AcctSectResp;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UnifyAuthResponse.AcctSectResp)
  return acctsectresp_;
}
::micromsg::AcctSectResp* UnifyAuthResponse::release_acctsectresp() {
  // @@protoc_insertion_point(field_release:micromsg.UnifyAuthResponse.AcctSectResp)
  clear_has_acctsectresp();
  ::micromsg::AcctSectResp* temp = acctsectresp_;
  acctsectresp_ = NULL;
  return temp;
}
void UnifyAuthResponse::set_allocated_acctsectresp(::micromsg::AcctSectResp* acctsectresp) {
  delete acctsectresp_;
  acctsectresp_ = acctsectresp;
  if (acctsectresp) {
    set_has_acctsectresp();
  } else {
    clear_has_acctsectresp();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UnifyAuthResponse.AcctSectResp)
}

// optional .micromsg.NetworkSectResp NetworkSectResp = 5;
bool UnifyAuthResponse::has_networksectresp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UnifyAuthResponse::set_has_networksectresp() {
  _has_bits_[0] |= 0x00000008u;
}
void UnifyAuthResponse::clear_has_networksectresp() {
  _has_bits_[0] &= ~0x00000008u;
}
void UnifyAuthResponse::clear_networksectresp() {
  if (networksectresp_ != NULL) networksectresp_->::micromsg::NetworkSectResp::Clear();
  clear_has_networksectresp();
}
const ::micromsg::NetworkSectResp& UnifyAuthResponse::networksectresp() const {
  // @@protoc_insertion_point(field_get:micromsg.UnifyAuthResponse.NetworkSectResp)
  return networksectresp_ != NULL ? *networksectresp_
                         : *::micromsg::NetworkSectResp::internal_default_instance();
}
::micromsg::NetworkSectResp* UnifyAuthResponse::mutable_networksectresp() {
  set_has_networksectresp();
  if (networksectresp_ == NULL) {
    networksectresp_ = new ::micromsg::NetworkSectResp;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UnifyAuthResponse.NetworkSectResp)
  return networksectresp_;
}
::micromsg::NetworkSectResp* UnifyAuthResponse::release_networksectresp() {
  // @@protoc_insertion_point(field_release:micromsg.UnifyAuthResponse.NetworkSectResp)
  clear_has_networksectresp();
  ::micromsg::NetworkSectResp* temp = networksectresp_;
  networksectresp_ = NULL;
  return temp;
}
void UnifyAuthResponse::set_allocated_networksectresp(::micromsg::NetworkSectResp* networksectresp) {
  delete networksectresp_;
  networksectresp_ = networksectresp;
  if (networksectresp) {
    set_has_networksectresp();
  } else {
    clear_has_networksectresp();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UnifyAuthResponse.NetworkSectResp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace micromsg

// @@protoc_insertion_point(global_scope)
