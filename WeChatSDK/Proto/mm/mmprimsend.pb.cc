// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmprimsend.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mmprimsend.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace micromsg {
class MicroMsgRequestNewDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MicroMsgRequestNew> {
} _MicroMsgRequestNew_default_instance_;
class SendMsgRequestNewDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SendMsgRequestNew> {
} _SendMsgRequestNew_default_instance_;
class MicroMsgResponseNewDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MicroMsgResponseNew> {
} _MicroMsgResponseNew_default_instance_;
class SendMsgResponseNewDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SendMsgResponseNew> {
} _SendMsgResponseNew_default_instance_;

namespace protobuf_mmprimsend_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MicroMsgRequestNew, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MicroMsgRequestNew, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MicroMsgRequestNew, tousername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MicroMsgRequestNew, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MicroMsgRequestNew, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MicroMsgRequestNew, createtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MicroMsgRequestNew, clientmsgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MicroMsgRequestNew, msgsource_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MicroMsgRequestNew, ctrlbit_),
  2,
  0,
  3,
  4,
  5,
  1,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMsgRequestNew, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMsgRequestNew, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMsgRequestNew, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMsgRequestNew, list_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MicroMsgResponseNew, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MicroMsgResponseNew, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MicroMsgResponseNew, ret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MicroMsgResponseNew, tousername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MicroMsgResponseNew, msgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MicroMsgResponseNew, clientmsgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MicroMsgResponseNew, createtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MicroMsgResponseNew, servertime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MicroMsgResponseNew, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MicroMsgResponseNew, newmsgid_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMsgResponseNew, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMsgResponseNew, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMsgResponseNew, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMsgResponseNew, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMsgResponseNew, list_),
  0,
  1,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 12, sizeof(MicroMsgRequestNew)},
  { 19, 26, sizeof(SendMsgRequestNew)},
  { 28, 41, sizeof(MicroMsgResponseNew)},
  { 49, 57, sizeof(SendMsgResponseNew)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_MicroMsgRequestNew_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SendMsgRequestNew_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MicroMsgResponseNew_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SendMsgResponseNew_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "mmprimsend.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _MicroMsgRequestNew_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _SendMsgRequestNew_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _MicroMsgResponseNew_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _SendMsgResponseNew_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::micromsg::protobuf_mmbuiltintype_2eproto::InitDefaults();
  ::micromsg::protobuf_mmbase_2eproto::InitDefaults();
  _MicroMsgRequestNew_default_instance_.DefaultConstruct();
  _SendMsgRequestNew_default_instance_.DefaultConstruct();
  _MicroMsgResponseNew_default_instance_.DefaultConstruct();
  _SendMsgResponseNew_default_instance_.DefaultConstruct();
  _MicroMsgRequestNew_default_instance_.get_mutable()->tousername_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _MicroMsgResponseNew_default_instance_.get_mutable()->tousername_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _SendMsgResponseNew_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\020mmprimsend.proto\022\010micromsg\032\023mmbuiltint"
      "ype.proto\032\014mmbase.proto\"\261\001\n\022MicroMsgRequ"
      "estNew\022/\n\nToUserName\030\001 \002(\0132\033.micromsg.SK"
      "BuiltinString_t\022\017\n\007Content\030\002 \001(\t\022\014\n\004Type"
      "\030\003 \002(\r\022\022\n\nCreateTime\030\004 \002(\r\022\023\n\013ClientMsgI"
      "d\030\005 \002(\r\022\021\n\tMsgSource\030\006 \001(\t\022\017\n\007CtrlBit\030\007 "
      "\001(\r\"N\n\021SendMsgRequestNew\022\r\n\005Count\030\001 \002(\r\022"
      "*\n\004List\030\002 \003(\0132\034.micromsg.MicroMsgRequest"
      "New\"\277\001\n\023MicroMsgResponseNew\022\013\n\003Ret\030\001 \002(\005"
      "\022/\n\nToUserName\030\002 \002(\0132\033.micromsg.SKBuilti"
      "nString_t\022\r\n\005MsgId\030\003 \002(\r\022\023\n\013ClientMsgId\030"
      "\004 \002(\r\022\022\n\nCreateTime\030\005 \002(\r\022\022\n\nServerTime\030"
      "\006 \002(\r\022\014\n\004Type\030\007 \002(\r\022\020\n\010NewMsgId\030\010 \001(\004\"~\n"
      "\022SendMsgResponseNew\022,\n\014BaseResponse\030\001 \002("
      "\0132\026.micromsg.BaseResponse\022\r\n\005Count\030\002 \002(\r"
      "\022+\n\004List\030\003 \003(\0132\035.micromsg.MicroMsgRespon"
      "seNew"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 645);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mmprimsend.proto", &protobuf_RegisterTypes);
  ::micromsg::protobuf_mmbuiltintype_2eproto::AddDescriptors();
  ::micromsg::protobuf_mmbase_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_mmprimsend_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MicroMsgRequestNew::kToUserNameFieldNumber;
const int MicroMsgRequestNew::kContentFieldNumber;
const int MicroMsgRequestNew::kTypeFieldNumber;
const int MicroMsgRequestNew::kCreateTimeFieldNumber;
const int MicroMsgRequestNew::kClientMsgIdFieldNumber;
const int MicroMsgRequestNew::kMsgSourceFieldNumber;
const int MicroMsgRequestNew::kCtrlBitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MicroMsgRequestNew::MicroMsgRequestNew()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmprimsend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.MicroMsgRequestNew)
}
MicroMsgRequestNew::MicroMsgRequestNew(const MicroMsgRequestNew& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  msgsource_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msgsource()) {
    msgsource_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msgsource_);
  }
  if (from.has_tousername()) {
    tousername_ = new ::micromsg::SKBuiltinString_t(*from.tousername_);
  } else {
    tousername_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&ctrlbit_) -
    reinterpret_cast<char*>(&type_) + sizeof(ctrlbit_));
  // @@protoc_insertion_point(copy_constructor:micromsg.MicroMsgRequestNew)
}

void MicroMsgRequestNew::SharedCtor() {
  _cached_size_ = 0;
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgsource_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tousername_, 0, reinterpret_cast<char*>(&ctrlbit_) -
    reinterpret_cast<char*>(&tousername_) + sizeof(ctrlbit_));
}

MicroMsgRequestNew::~MicroMsgRequestNew() {
  // @@protoc_insertion_point(destructor:micromsg.MicroMsgRequestNew)
  SharedDtor();
}

void MicroMsgRequestNew::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgsource_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete tousername_;
  }
}

void MicroMsgRequestNew::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MicroMsgRequestNew::descriptor() {
  protobuf_mmprimsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmprimsend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MicroMsgRequestNew& MicroMsgRequestNew::default_instance() {
  protobuf_mmprimsend_2eproto::InitDefaults();
  return *internal_default_instance();
}

MicroMsgRequestNew* MicroMsgRequestNew::New(::google::protobuf::Arena* arena) const {
  MicroMsgRequestNew* n = new MicroMsgRequestNew;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MicroMsgRequestNew::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.MicroMsgRequestNew)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_content()) {
      GOOGLE_DCHECK(!content_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*content_.UnsafeRawStringPointer())->clear();
    }
    if (has_msgsource()) {
      GOOGLE_DCHECK(!msgsource_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*msgsource_.UnsafeRawStringPointer())->clear();
    }
    if (has_tousername()) {
      GOOGLE_DCHECK(tousername_ != NULL);
      tousername_->::micromsg::SKBuiltinString_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 120u) {
    ::memset(&type_, 0, reinterpret_cast<char*>(&ctrlbit_) -
      reinterpret_cast<char*>(&type_) + sizeof(ctrlbit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MicroMsgRequestNew::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.MicroMsgRequestNew)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.SKBuiltinString_t ToUserName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tousername()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Content = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.MicroMsgRequestNew.Content");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 CreateTime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_createtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ClientMsgId = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_clientmsgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientmsgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string MsgSource = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgsource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msgsource().data(), this->msgsource().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.MicroMsgRequestNew.MsgSource");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 CtrlBit = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_ctrlbit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ctrlbit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.MicroMsgRequestNew)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.MicroMsgRequestNew)
  return false;
#undef DO_
}

void MicroMsgRequestNew::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.MicroMsgRequestNew)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t ToUserName = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->tousername_, output);
  }

  // optional string Content = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.MicroMsgRequestNew.Content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->content(), output);
  }

  // required uint32 Type = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // required uint32 CreateTime = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->createtime(), output);
  }

  // required uint32 ClientMsgId = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->clientmsgid(), output);
  }

  // optional string MsgSource = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgsource().data(), this->msgsource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.MicroMsgRequestNew.MsgSource");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->msgsource(), output);
  }

  // optional uint32 CtrlBit = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->ctrlbit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.MicroMsgRequestNew)
}

::google::protobuf::uint8* MicroMsgRequestNew::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.MicroMsgRequestNew)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t ToUserName = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->tousername_, deterministic, target);
  }

  // optional string Content = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.MicroMsgRequestNew.Content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  // required uint32 Type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // required uint32 CreateTime = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->createtime(), target);
  }

  // required uint32 ClientMsgId = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->clientmsgid(), target);
  }

  // optional string MsgSource = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgsource().data(), this->msgsource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.MicroMsgRequestNew.MsgSource");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->msgsource(), target);
  }

  // optional uint32 CtrlBit = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->ctrlbit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.MicroMsgRequestNew)
  return target;
}

size_t MicroMsgRequestNew::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.MicroMsgRequestNew)
  size_t total_size = 0;

  if (has_tousername()) {
    // required .micromsg.SKBuiltinString_t ToUserName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tousername_);
  }

  if (has_type()) {
    // required uint32 Type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_createtime()) {
    // required uint32 CreateTime = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->createtime());
  }

  if (has_clientmsgid()) {
    // required uint32 ClientMsgId = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->clientmsgid());
  }

  return total_size;
}
size_t MicroMsgRequestNew::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.MicroMsgRequestNew)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003c) ^ 0x0000003c) == 0) {  // All required fields are present.
    // required .micromsg.SKBuiltinString_t ToUserName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tousername_);

    // required uint32 Type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required uint32 CreateTime = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->createtime());

    // required uint32 ClientMsgId = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->clientmsgid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string Content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional string MsgSource = 6;
    if (has_msgsource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgsource());
    }

  }
  // optional uint32 CtrlBit = 7;
  if (has_ctrlbit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ctrlbit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MicroMsgRequestNew::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.MicroMsgRequestNew)
  GOOGLE_DCHECK_NE(&from, this);
  const MicroMsgRequestNew* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MicroMsgRequestNew>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.MicroMsgRequestNew)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.MicroMsgRequestNew)
    MergeFrom(*source);
  }
}

void MicroMsgRequestNew::MergeFrom(const MicroMsgRequestNew& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.MicroMsgRequestNew)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_msgsource();
      msgsource_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msgsource_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_tousername()->::micromsg::SKBuiltinString_t::MergeFrom(from.tousername());
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      createtime_ = from.createtime_;
    }
    if (cached_has_bits & 0x00000020u) {
      clientmsgid_ = from.clientmsgid_;
    }
    if (cached_has_bits & 0x00000040u) {
      ctrlbit_ = from.ctrlbit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MicroMsgRequestNew::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.MicroMsgRequestNew)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MicroMsgRequestNew::CopyFrom(const MicroMsgRequestNew& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.MicroMsgRequestNew)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MicroMsgRequestNew::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003c) != 0x0000003c) return false;
  return true;
}

void MicroMsgRequestNew::Swap(MicroMsgRequestNew* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MicroMsgRequestNew::InternalSwap(MicroMsgRequestNew* other) {
  content_.Swap(&other->content_);
  msgsource_.Swap(&other->msgsource_);
  std::swap(tousername_, other->tousername_);
  std::swap(type_, other->type_);
  std::swap(createtime_, other->createtime_);
  std::swap(clientmsgid_, other->clientmsgid_);
  std::swap(ctrlbit_, other->ctrlbit_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MicroMsgRequestNew::GetMetadata() const {
  protobuf_mmprimsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmprimsend_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MicroMsgRequestNew

// required .micromsg.SKBuiltinString_t ToUserName = 1;
bool MicroMsgRequestNew::has_tousername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MicroMsgRequestNew::set_has_tousername() {
  _has_bits_[0] |= 0x00000004u;
}
void MicroMsgRequestNew::clear_has_tousername() {
  _has_bits_[0] &= ~0x00000004u;
}
void MicroMsgRequestNew::clear_tousername() {
  if (tousername_ != NULL) tousername_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_tousername();
}
const ::micromsg::SKBuiltinString_t& MicroMsgRequestNew::tousername() const {
  // @@protoc_insertion_point(field_get:micromsg.MicroMsgRequestNew.ToUserName)
  return tousername_ != NULL ? *tousername_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* MicroMsgRequestNew::mutable_tousername() {
  set_has_tousername();
  if (tousername_ == NULL) {
    tousername_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.MicroMsgRequestNew.ToUserName)
  return tousername_;
}
::micromsg::SKBuiltinString_t* MicroMsgRequestNew::release_tousername() {
  // @@protoc_insertion_point(field_release:micromsg.MicroMsgRequestNew.ToUserName)
  clear_has_tousername();
  ::micromsg::SKBuiltinString_t* temp = tousername_;
  tousername_ = NULL;
  return temp;
}
void MicroMsgRequestNew::set_allocated_tousername(::micromsg::SKBuiltinString_t* tousername) {
  delete tousername_;
  tousername_ = tousername;
  if (tousername) {
    set_has_tousername();
  } else {
    clear_has_tousername();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.MicroMsgRequestNew.ToUserName)
}

// optional string Content = 2;
bool MicroMsgRequestNew::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MicroMsgRequestNew::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
void MicroMsgRequestNew::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
void MicroMsgRequestNew::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
const ::std::string& MicroMsgRequestNew::content() const {
  // @@protoc_insertion_point(field_get:micromsg.MicroMsgRequestNew.Content)
  return content_.GetNoArena();
}
void MicroMsgRequestNew::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.MicroMsgRequestNew.Content)
}
#if LANG_CXX11
void MicroMsgRequestNew::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.MicroMsgRequestNew.Content)
}
#endif
void MicroMsgRequestNew::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.MicroMsgRequestNew.Content)
}
void MicroMsgRequestNew::set_content(const char* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.MicroMsgRequestNew.Content)
}
::std::string* MicroMsgRequestNew::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:micromsg.MicroMsgRequestNew.Content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MicroMsgRequestNew::release_content() {
  // @@protoc_insertion_point(field_release:micromsg.MicroMsgRequestNew.Content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MicroMsgRequestNew::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:micromsg.MicroMsgRequestNew.Content)
}

// required uint32 Type = 3;
bool MicroMsgRequestNew::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MicroMsgRequestNew::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void MicroMsgRequestNew::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void MicroMsgRequestNew::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 MicroMsgRequestNew::type() const {
  // @@protoc_insertion_point(field_get:micromsg.MicroMsgRequestNew.Type)
  return type_;
}
void MicroMsgRequestNew::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.MicroMsgRequestNew.Type)
}

// required uint32 CreateTime = 4;
bool MicroMsgRequestNew::has_createtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MicroMsgRequestNew::set_has_createtime() {
  _has_bits_[0] |= 0x00000010u;
}
void MicroMsgRequestNew::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000010u;
}
void MicroMsgRequestNew::clear_createtime() {
  createtime_ = 0u;
  clear_has_createtime();
}
::google::protobuf::uint32 MicroMsgRequestNew::createtime() const {
  // @@protoc_insertion_point(field_get:micromsg.MicroMsgRequestNew.CreateTime)
  return createtime_;
}
void MicroMsgRequestNew::set_createtime(::google::protobuf::uint32 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.MicroMsgRequestNew.CreateTime)
}

// required uint32 ClientMsgId = 5;
bool MicroMsgRequestNew::has_clientmsgid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MicroMsgRequestNew::set_has_clientmsgid() {
  _has_bits_[0] |= 0x00000020u;
}
void MicroMsgRequestNew::clear_has_clientmsgid() {
  _has_bits_[0] &= ~0x00000020u;
}
void MicroMsgRequestNew::clear_clientmsgid() {
  clientmsgid_ = 0u;
  clear_has_clientmsgid();
}
::google::protobuf::uint32 MicroMsgRequestNew::clientmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.MicroMsgRequestNew.ClientMsgId)
  return clientmsgid_;
}
void MicroMsgRequestNew::set_clientmsgid(::google::protobuf::uint32 value) {
  set_has_clientmsgid();
  clientmsgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.MicroMsgRequestNew.ClientMsgId)
}

// optional string MsgSource = 6;
bool MicroMsgRequestNew::has_msgsource() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MicroMsgRequestNew::set_has_msgsource() {
  _has_bits_[0] |= 0x00000002u;
}
void MicroMsgRequestNew::clear_has_msgsource() {
  _has_bits_[0] &= ~0x00000002u;
}
void MicroMsgRequestNew::clear_msgsource() {
  msgsource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msgsource();
}
const ::std::string& MicroMsgRequestNew::msgsource() const {
  // @@protoc_insertion_point(field_get:micromsg.MicroMsgRequestNew.MsgSource)
  return msgsource_.GetNoArena();
}
void MicroMsgRequestNew::set_msgsource(const ::std::string& value) {
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.MicroMsgRequestNew.MsgSource)
}
#if LANG_CXX11
void MicroMsgRequestNew::set_msgsource(::std::string&& value) {
  set_has_msgsource();
  msgsource_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.MicroMsgRequestNew.MsgSource)
}
#endif
void MicroMsgRequestNew::set_msgsource(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.MicroMsgRequestNew.MsgSource)
}
void MicroMsgRequestNew::set_msgsource(const char* value, size_t size) {
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.MicroMsgRequestNew.MsgSource)
}
::std::string* MicroMsgRequestNew::mutable_msgsource() {
  set_has_msgsource();
  // @@protoc_insertion_point(field_mutable:micromsg.MicroMsgRequestNew.MsgSource)
  return msgsource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MicroMsgRequestNew::release_msgsource() {
  // @@protoc_insertion_point(field_release:micromsg.MicroMsgRequestNew.MsgSource)
  clear_has_msgsource();
  return msgsource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MicroMsgRequestNew::set_allocated_msgsource(::std::string* msgsource) {
  if (msgsource != NULL) {
    set_has_msgsource();
  } else {
    clear_has_msgsource();
  }
  msgsource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgsource);
  // @@protoc_insertion_point(field_set_allocated:micromsg.MicroMsgRequestNew.MsgSource)
}

// optional uint32 CtrlBit = 7;
bool MicroMsgRequestNew::has_ctrlbit() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void MicroMsgRequestNew::set_has_ctrlbit() {
  _has_bits_[0] |= 0x00000040u;
}
void MicroMsgRequestNew::clear_has_ctrlbit() {
  _has_bits_[0] &= ~0x00000040u;
}
void MicroMsgRequestNew::clear_ctrlbit() {
  ctrlbit_ = 0u;
  clear_has_ctrlbit();
}
::google::protobuf::uint32 MicroMsgRequestNew::ctrlbit() const {
  // @@protoc_insertion_point(field_get:micromsg.MicroMsgRequestNew.CtrlBit)
  return ctrlbit_;
}
void MicroMsgRequestNew::set_ctrlbit(::google::protobuf::uint32 value) {
  set_has_ctrlbit();
  ctrlbit_ = value;
  // @@protoc_insertion_point(field_set:micromsg.MicroMsgRequestNew.CtrlBit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendMsgRequestNew::kCountFieldNumber;
const int SendMsgRequestNew::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendMsgRequestNew::SendMsgRequestNew()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmprimsend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SendMsgRequestNew)
}
SendMsgRequestNew::SendMsgRequestNew(const SendMsgRequestNew& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:micromsg.SendMsgRequestNew)
}

void SendMsgRequestNew::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0u;
}

SendMsgRequestNew::~SendMsgRequestNew() {
  // @@protoc_insertion_point(destructor:micromsg.SendMsgRequestNew)
  SharedDtor();
}

void SendMsgRequestNew::SharedDtor() {
}

void SendMsgRequestNew::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendMsgRequestNew::descriptor() {
  protobuf_mmprimsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmprimsend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SendMsgRequestNew& SendMsgRequestNew::default_instance() {
  protobuf_mmprimsend_2eproto::InitDefaults();
  return *internal_default_instance();
}

SendMsgRequestNew* SendMsgRequestNew::New(::google::protobuf::Arena* arena) const {
  SendMsgRequestNew* n = new SendMsgRequestNew;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SendMsgRequestNew::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SendMsgRequestNew)
  list_.Clear();
  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SendMsgRequestNew::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SendMsgRequestNew)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.MicroMsgRequestNew List = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SendMsgRequestNew)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SendMsgRequestNew)
  return false;
#undef DO_
}

void SendMsgRequestNew::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SendMsgRequestNew)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  // repeated .micromsg.MicroMsgRequestNew List = 2;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SendMsgRequestNew)
}

::google::protobuf::uint8* SendMsgRequestNew::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SendMsgRequestNew)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }

  // repeated .micromsg.MicroMsgRequestNew List = 2;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->list(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SendMsgRequestNew)
  return target;
}

size_t SendMsgRequestNew::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SendMsgRequestNew)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 Count = 1;
  if (has_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }
  // repeated .micromsg.MicroMsgRequestNew List = 2;
  {
    unsigned int count = this->list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendMsgRequestNew::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SendMsgRequestNew)
  GOOGLE_DCHECK_NE(&from, this);
  const SendMsgRequestNew* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SendMsgRequestNew>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SendMsgRequestNew)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SendMsgRequestNew)
    MergeFrom(*source);
  }
}

void SendMsgRequestNew::MergeFrom(const SendMsgRequestNew& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SendMsgRequestNew)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  if (from.has_count()) {
    set_count(from.count());
  }
}

void SendMsgRequestNew::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SendMsgRequestNew)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendMsgRequestNew::CopyFrom(const SendMsgRequestNew& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SendMsgRequestNew)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMsgRequestNew::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void SendMsgRequestNew::Swap(SendMsgRequestNew* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendMsgRequestNew::InternalSwap(SendMsgRequestNew* other) {
  list_.InternalSwap(&other->list_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SendMsgRequestNew::GetMetadata() const {
  protobuf_mmprimsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmprimsend_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SendMsgRequestNew

// required uint32 Count = 1;
bool SendMsgRequestNew::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SendMsgRequestNew::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
void SendMsgRequestNew::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void SendMsgRequestNew::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 SendMsgRequestNew::count() const {
  // @@protoc_insertion_point(field_get:micromsg.SendMsgRequestNew.Count)
  return count_;
}
void SendMsgRequestNew::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SendMsgRequestNew.Count)
}

// repeated .micromsg.MicroMsgRequestNew List = 2;
int SendMsgRequestNew::list_size() const {
  return list_.size();
}
void SendMsgRequestNew::clear_list() {
  list_.Clear();
}
const ::micromsg::MicroMsgRequestNew& SendMsgRequestNew::list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.SendMsgRequestNew.List)
  return list_.Get(index);
}
::micromsg::MicroMsgRequestNew* SendMsgRequestNew::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.SendMsgRequestNew.List)
  return list_.Mutable(index);
}
::micromsg::MicroMsgRequestNew* SendMsgRequestNew::add_list() {
  // @@protoc_insertion_point(field_add:micromsg.SendMsgRequestNew.List)
  return list_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::MicroMsgRequestNew >*
SendMsgRequestNew::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.SendMsgRequestNew.List)
  return &list_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::MicroMsgRequestNew >&
SendMsgRequestNew::list() const {
  // @@protoc_insertion_point(field_list:micromsg.SendMsgRequestNew.List)
  return list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MicroMsgResponseNew::kRetFieldNumber;
const int MicroMsgResponseNew::kToUserNameFieldNumber;
const int MicroMsgResponseNew::kMsgIdFieldNumber;
const int MicroMsgResponseNew::kClientMsgIdFieldNumber;
const int MicroMsgResponseNew::kCreateTimeFieldNumber;
const int MicroMsgResponseNew::kServerTimeFieldNumber;
const int MicroMsgResponseNew::kTypeFieldNumber;
const int MicroMsgResponseNew::kNewMsgIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MicroMsgResponseNew::MicroMsgResponseNew()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmprimsend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.MicroMsgResponseNew)
}
MicroMsgResponseNew::MicroMsgResponseNew(const MicroMsgResponseNew& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tousername()) {
    tousername_ = new ::micromsg::SKBuiltinString_t(*from.tousername_);
  } else {
    tousername_ = NULL;
  }
  ::memcpy(&ret_, &from.ret_,
    reinterpret_cast<char*>(&newmsgid_) -
    reinterpret_cast<char*>(&ret_) + sizeof(newmsgid_));
  // @@protoc_insertion_point(copy_constructor:micromsg.MicroMsgResponseNew)
}

void MicroMsgResponseNew::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&tousername_, 0, reinterpret_cast<char*>(&newmsgid_) -
    reinterpret_cast<char*>(&tousername_) + sizeof(newmsgid_));
}

MicroMsgResponseNew::~MicroMsgResponseNew() {
  // @@protoc_insertion_point(destructor:micromsg.MicroMsgResponseNew)
  SharedDtor();
}

void MicroMsgResponseNew::SharedDtor() {
  if (this != internal_default_instance()) {
    delete tousername_;
  }
}

void MicroMsgResponseNew::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MicroMsgResponseNew::descriptor() {
  protobuf_mmprimsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmprimsend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MicroMsgResponseNew& MicroMsgResponseNew::default_instance() {
  protobuf_mmprimsend_2eproto::InitDefaults();
  return *internal_default_instance();
}

MicroMsgResponseNew* MicroMsgResponseNew::New(::google::protobuf::Arena* arena) const {
  MicroMsgResponseNew* n = new MicroMsgResponseNew;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MicroMsgResponseNew::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.MicroMsgResponseNew)
  if (has_tousername()) {
    GOOGLE_DCHECK(tousername_ != NULL);
    tousername_->::micromsg::SKBuiltinString_t::Clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&ret_, 0, reinterpret_cast<char*>(&newmsgid_) -
      reinterpret_cast<char*>(&ret_) + sizeof(newmsgid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MicroMsgResponseNew::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.MicroMsgResponseNew)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Ret = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t ToUserName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tousername()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 MsgId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_msgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ClientMsgId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_clientmsgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientmsgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 CreateTime = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_createtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ServerTime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_servertime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &servertime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 NewMsgId = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_newmsgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &newmsgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.MicroMsgResponseNew)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.MicroMsgResponseNew)
  return false;
#undef DO_
}

void MicroMsgResponseNew::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.MicroMsgResponseNew)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Ret = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // required .micromsg.SKBuiltinString_t ToUserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->tousername_, output);
  }

  // required uint32 MsgId = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->msgid(), output);
  }

  // required uint32 ClientMsgId = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->clientmsgid(), output);
  }

  // required uint32 CreateTime = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->createtime(), output);
  }

  // required uint32 ServerTime = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->servertime(), output);
  }

  // required uint32 Type = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->type(), output);
  }

  // optional uint64 NewMsgId = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->newmsgid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.MicroMsgResponseNew)
}

::google::protobuf::uint8* MicroMsgResponseNew::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.MicroMsgResponseNew)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Ret = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // required .micromsg.SKBuiltinString_t ToUserName = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->tousername_, deterministic, target);
  }

  // required uint32 MsgId = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->msgid(), target);
  }

  // required uint32 ClientMsgId = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->clientmsgid(), target);
  }

  // required uint32 CreateTime = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->createtime(), target);
  }

  // required uint32 ServerTime = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->servertime(), target);
  }

  // required uint32 Type = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->type(), target);
  }

  // optional uint64 NewMsgId = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->newmsgid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.MicroMsgResponseNew)
  return target;
}

size_t MicroMsgResponseNew::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.MicroMsgResponseNew)
  size_t total_size = 0;

  if (has_tousername()) {
    // required .micromsg.SKBuiltinString_t ToUserName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tousername_);
  }

  if (has_ret()) {
    // required int32 Ret = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  if (has_msgid()) {
    // required uint32 MsgId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msgid());
  }

  if (has_clientmsgid()) {
    // required uint32 ClientMsgId = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->clientmsgid());
  }

  if (has_createtime()) {
    // required uint32 CreateTime = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->createtime());
  }

  if (has_servertime()) {
    // required uint32 ServerTime = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->servertime());
  }

  if (has_type()) {
    // required uint32 Type = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  return total_size;
}
size_t MicroMsgResponseNew::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.MicroMsgResponseNew)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required .micromsg.SKBuiltinString_t ToUserName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tousername_);

    // required int32 Ret = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());

    // required uint32 MsgId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msgid());

    // required uint32 ClientMsgId = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->clientmsgid());

    // required uint32 CreateTime = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->createtime());

    // required uint32 ServerTime = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->servertime());

    // required uint32 Type = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint64 NewMsgId = 8;
  if (has_newmsgid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->newmsgid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MicroMsgResponseNew::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.MicroMsgResponseNew)
  GOOGLE_DCHECK_NE(&from, this);
  const MicroMsgResponseNew* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MicroMsgResponseNew>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.MicroMsgResponseNew)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.MicroMsgResponseNew)
    MergeFrom(*source);
  }
}

void MicroMsgResponseNew::MergeFrom(const MicroMsgResponseNew& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.MicroMsgResponseNew)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_tousername()->::micromsg::SKBuiltinString_t::MergeFrom(from.tousername());
    }
    if (cached_has_bits & 0x00000002u) {
      ret_ = from.ret_;
    }
    if (cached_has_bits & 0x00000004u) {
      msgid_ = from.msgid_;
    }
    if (cached_has_bits & 0x00000008u) {
      clientmsgid_ = from.clientmsgid_;
    }
    if (cached_has_bits & 0x00000010u) {
      createtime_ = from.createtime_;
    }
    if (cached_has_bits & 0x00000020u) {
      servertime_ = from.servertime_;
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000080u) {
      newmsgid_ = from.newmsgid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MicroMsgResponseNew::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.MicroMsgResponseNew)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MicroMsgResponseNew::CopyFrom(const MicroMsgResponseNew& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.MicroMsgResponseNew)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MicroMsgResponseNew::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  return true;
}

void MicroMsgResponseNew::Swap(MicroMsgResponseNew* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MicroMsgResponseNew::InternalSwap(MicroMsgResponseNew* other) {
  std::swap(tousername_, other->tousername_);
  std::swap(ret_, other->ret_);
  std::swap(msgid_, other->msgid_);
  std::swap(clientmsgid_, other->clientmsgid_);
  std::swap(createtime_, other->createtime_);
  std::swap(servertime_, other->servertime_);
  std::swap(type_, other->type_);
  std::swap(newmsgid_, other->newmsgid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MicroMsgResponseNew::GetMetadata() const {
  protobuf_mmprimsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmprimsend_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MicroMsgResponseNew

// required int32 Ret = 1;
bool MicroMsgResponseNew::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MicroMsgResponseNew::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void MicroMsgResponseNew::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void MicroMsgResponseNew::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
::google::protobuf::int32 MicroMsgResponseNew::ret() const {
  // @@protoc_insertion_point(field_get:micromsg.MicroMsgResponseNew.Ret)
  return ret_;
}
void MicroMsgResponseNew::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:micromsg.MicroMsgResponseNew.Ret)
}

// required .micromsg.SKBuiltinString_t ToUserName = 2;
bool MicroMsgResponseNew::has_tousername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MicroMsgResponseNew::set_has_tousername() {
  _has_bits_[0] |= 0x00000001u;
}
void MicroMsgResponseNew::clear_has_tousername() {
  _has_bits_[0] &= ~0x00000001u;
}
void MicroMsgResponseNew::clear_tousername() {
  if (tousername_ != NULL) tousername_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_tousername();
}
const ::micromsg::SKBuiltinString_t& MicroMsgResponseNew::tousername() const {
  // @@protoc_insertion_point(field_get:micromsg.MicroMsgResponseNew.ToUserName)
  return tousername_ != NULL ? *tousername_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* MicroMsgResponseNew::mutable_tousername() {
  set_has_tousername();
  if (tousername_ == NULL) {
    tousername_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.MicroMsgResponseNew.ToUserName)
  return tousername_;
}
::micromsg::SKBuiltinString_t* MicroMsgResponseNew::release_tousername() {
  // @@protoc_insertion_point(field_release:micromsg.MicroMsgResponseNew.ToUserName)
  clear_has_tousername();
  ::micromsg::SKBuiltinString_t* temp = tousername_;
  tousername_ = NULL;
  return temp;
}
void MicroMsgResponseNew::set_allocated_tousername(::micromsg::SKBuiltinString_t* tousername) {
  delete tousername_;
  tousername_ = tousername;
  if (tousername) {
    set_has_tousername();
  } else {
    clear_has_tousername();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.MicroMsgResponseNew.ToUserName)
}

// required uint32 MsgId = 3;
bool MicroMsgResponseNew::has_msgid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MicroMsgResponseNew::set_has_msgid() {
  _has_bits_[0] |= 0x00000004u;
}
void MicroMsgResponseNew::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000004u;
}
void MicroMsgResponseNew::clear_msgid() {
  msgid_ = 0u;
  clear_has_msgid();
}
::google::protobuf::uint32 MicroMsgResponseNew::msgid() const {
  // @@protoc_insertion_point(field_get:micromsg.MicroMsgResponseNew.MsgId)
  return msgid_;
}
void MicroMsgResponseNew::set_msgid(::google::protobuf::uint32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.MicroMsgResponseNew.MsgId)
}

// required uint32 ClientMsgId = 4;
bool MicroMsgResponseNew::has_clientmsgid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MicroMsgResponseNew::set_has_clientmsgid() {
  _has_bits_[0] |= 0x00000008u;
}
void MicroMsgResponseNew::clear_has_clientmsgid() {
  _has_bits_[0] &= ~0x00000008u;
}
void MicroMsgResponseNew::clear_clientmsgid() {
  clientmsgid_ = 0u;
  clear_has_clientmsgid();
}
::google::protobuf::uint32 MicroMsgResponseNew::clientmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.MicroMsgResponseNew.ClientMsgId)
  return clientmsgid_;
}
void MicroMsgResponseNew::set_clientmsgid(::google::protobuf::uint32 value) {
  set_has_clientmsgid();
  clientmsgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.MicroMsgResponseNew.ClientMsgId)
}

// required uint32 CreateTime = 5;
bool MicroMsgResponseNew::has_createtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MicroMsgResponseNew::set_has_createtime() {
  _has_bits_[0] |= 0x00000010u;
}
void MicroMsgResponseNew::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000010u;
}
void MicroMsgResponseNew::clear_createtime() {
  createtime_ = 0u;
  clear_has_createtime();
}
::google::protobuf::uint32 MicroMsgResponseNew::createtime() const {
  // @@protoc_insertion_point(field_get:micromsg.MicroMsgResponseNew.CreateTime)
  return createtime_;
}
void MicroMsgResponseNew::set_createtime(::google::protobuf::uint32 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.MicroMsgResponseNew.CreateTime)
}

// required uint32 ServerTime = 6;
bool MicroMsgResponseNew::has_servertime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MicroMsgResponseNew::set_has_servertime() {
  _has_bits_[0] |= 0x00000020u;
}
void MicroMsgResponseNew::clear_has_servertime() {
  _has_bits_[0] &= ~0x00000020u;
}
void MicroMsgResponseNew::clear_servertime() {
  servertime_ = 0u;
  clear_has_servertime();
}
::google::protobuf::uint32 MicroMsgResponseNew::servertime() const {
  // @@protoc_insertion_point(field_get:micromsg.MicroMsgResponseNew.ServerTime)
  return servertime_;
}
void MicroMsgResponseNew::set_servertime(::google::protobuf::uint32 value) {
  set_has_servertime();
  servertime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.MicroMsgResponseNew.ServerTime)
}

// required uint32 Type = 7;
bool MicroMsgResponseNew::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void MicroMsgResponseNew::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
void MicroMsgResponseNew::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
void MicroMsgResponseNew::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 MicroMsgResponseNew::type() const {
  // @@protoc_insertion_point(field_get:micromsg.MicroMsgResponseNew.Type)
  return type_;
}
void MicroMsgResponseNew::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.MicroMsgResponseNew.Type)
}

// optional uint64 NewMsgId = 8;
bool MicroMsgResponseNew::has_newmsgid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void MicroMsgResponseNew::set_has_newmsgid() {
  _has_bits_[0] |= 0x00000080u;
}
void MicroMsgResponseNew::clear_has_newmsgid() {
  _has_bits_[0] &= ~0x00000080u;
}
void MicroMsgResponseNew::clear_newmsgid() {
  newmsgid_ = GOOGLE_ULONGLONG(0);
  clear_has_newmsgid();
}
::google::protobuf::uint64 MicroMsgResponseNew::newmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.MicroMsgResponseNew.NewMsgId)
  return newmsgid_;
}
void MicroMsgResponseNew::set_newmsgid(::google::protobuf::uint64 value) {
  set_has_newmsgid();
  newmsgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.MicroMsgResponseNew.NewMsgId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendMsgResponseNew::kBaseResponseFieldNumber;
const int SendMsgResponseNew::kCountFieldNumber;
const int SendMsgResponseNew::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendMsgResponseNew::SendMsgResponseNew()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmprimsend_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SendMsgResponseNew)
}
SendMsgResponseNew::SendMsgResponseNew(const SendMsgResponseNew& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:micromsg.SendMsgResponseNew)
}

void SendMsgResponseNew::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(count_));
}

SendMsgResponseNew::~SendMsgResponseNew() {
  // @@protoc_insertion_point(destructor:micromsg.SendMsgResponseNew)
  SharedDtor();
}

void SendMsgResponseNew::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void SendMsgResponseNew::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendMsgResponseNew::descriptor() {
  protobuf_mmprimsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmprimsend_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SendMsgResponseNew& SendMsgResponseNew::default_instance() {
  protobuf_mmprimsend_2eproto::InitDefaults();
  return *internal_default_instance();
}

SendMsgResponseNew* SendMsgResponseNew::New(::google::protobuf::Arena* arena) const {
  SendMsgResponseNew* n = new SendMsgResponseNew;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SendMsgResponseNew::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SendMsgResponseNew)
  list_.Clear();
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SendMsgResponseNew::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SendMsgResponseNew)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.MicroMsgResponseNew List = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SendMsgResponseNew)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SendMsgResponseNew)
  return false;
#undef DO_
}

void SendMsgResponseNew::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SendMsgResponseNew)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // repeated .micromsg.MicroMsgResponseNew List = 3;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SendMsgResponseNew)
}

::google::protobuf::uint8* SendMsgResponseNew::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SendMsgResponseNew)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // repeated .micromsg.MicroMsgResponseNew List = 3;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->list(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SendMsgResponseNew)
  return target;
}

size_t SendMsgResponseNew::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SendMsgResponseNew)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_count()) {
    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  return total_size;
}
size_t SendMsgResponseNew::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SendMsgResponseNew)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.MicroMsgResponseNew List = 3;
  {
    unsigned int count = this->list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendMsgResponseNew::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SendMsgResponseNew)
  GOOGLE_DCHECK_NE(&from, this);
  const SendMsgResponseNew* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SendMsgResponseNew>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SendMsgResponseNew)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SendMsgResponseNew)
    MergeFrom(*source);
  }
}

void SendMsgResponseNew::MergeFrom(const SendMsgResponseNew& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SendMsgResponseNew)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SendMsgResponseNew::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SendMsgResponseNew)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendMsgResponseNew::CopyFrom(const SendMsgResponseNew& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SendMsgResponseNew)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMsgResponseNew::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void SendMsgResponseNew::Swap(SendMsgResponseNew* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendMsgResponseNew::InternalSwap(SendMsgResponseNew* other) {
  list_.InternalSwap(&other->list_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SendMsgResponseNew::GetMetadata() const {
  protobuf_mmprimsend_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmprimsend_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SendMsgResponseNew

// required .micromsg.BaseResponse BaseResponse = 1;
bool SendMsgResponseNew::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SendMsgResponseNew::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void SendMsgResponseNew::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void SendMsgResponseNew::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& SendMsgResponseNew::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.SendMsgResponseNew.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* SendMsgResponseNew::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SendMsgResponseNew.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* SendMsgResponseNew::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.SendMsgResponseNew.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void SendMsgResponseNew::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SendMsgResponseNew.BaseResponse)
}

// required uint32 Count = 2;
bool SendMsgResponseNew::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SendMsgResponseNew::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void SendMsgResponseNew::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void SendMsgResponseNew::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 SendMsgResponseNew::count() const {
  // @@protoc_insertion_point(field_get:micromsg.SendMsgResponseNew.Count)
  return count_;
}
void SendMsgResponseNew::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SendMsgResponseNew.Count)
}

// repeated .micromsg.MicroMsgResponseNew List = 3;
int SendMsgResponseNew::list_size() const {
  return list_.size();
}
void SendMsgResponseNew::clear_list() {
  list_.Clear();
}
const ::micromsg::MicroMsgResponseNew& SendMsgResponseNew::list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.SendMsgResponseNew.List)
  return list_.Get(index);
}
::micromsg::MicroMsgResponseNew* SendMsgResponseNew::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.SendMsgResponseNew.List)
  return list_.Mutable(index);
}
::micromsg::MicroMsgResponseNew* SendMsgResponseNew::add_list() {
  // @@protoc_insertion_point(field_add:micromsg.SendMsgResponseNew.List)
  return list_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::MicroMsgResponseNew >*
SendMsgResponseNew::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.SendMsgResponseNew.List)
  return &list_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::MicroMsgResponseNew >&
SendMsgResponseNew::list() const {
  // @@protoc_insertion_point(field_list:micromsg.SendMsgResponseNew.List)
  return list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace micromsg

// @@protoc_insertion_point(global_scope)
