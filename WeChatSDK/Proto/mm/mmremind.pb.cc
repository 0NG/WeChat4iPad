// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmremind.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mmremind.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace micromsg {
class RemindSyncRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RemindSyncRequest> {
} _RemindSyncRequest_default_instance_;
class RemindSyncResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RemindSyncResponse> {
} _RemindSyncResponse_default_instance_;
class ModRemindCmdDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ModRemindCmd> {
} _ModRemindCmd_default_instance_;
class RemindMemberDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RemindMember> {
} _RemindMember_default_instance_;
class RemindItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RemindItem> {
} _RemindItem_default_instance_;
class BatchGetRemindInfoRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BatchGetRemindInfoRequest> {
} _BatchGetRemindInfoRequest_default_instance_;
class BatchGetRemindInfoResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BatchGetRemindInfoResponse> {
} _BatchGetRemindInfoResponse_default_instance_;
class AddRemindRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AddRemindRequest> {
} _AddRemindRequest_default_instance_;
class AddRemindResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AddRemindResponse> {
} _AddRemindResponse_default_instance_;
class DelRemindRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DelRemindRequest> {
} _DelRemindRequest_default_instance_;
class DelRemindResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DelRemindResponse> {
} _DelRemindResponse_default_instance_;

namespace protobuf_mmremind_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[11];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemindSyncRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemindSyncRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemindSyncRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemindSyncRequest, selector_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemindSyncRequest, keybuff_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemindSyncResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemindSyncResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemindSyncResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemindSyncResponse, cmdlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemindSyncResponse, keybuff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemindSyncResponse, continueflag_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModRemindCmd, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModRemindCmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModRemindCmd, remindid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModRemindCmd, remindtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModRemindCmd, flag_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemindMember, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemindMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemindMember, username_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemindItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemindItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemindItem, remindid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemindItem, createtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemindItem, remindtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemindItem, fromuser_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemindItem, tousercount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemindItem, touserlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemindItem, flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemindItem, content_),
  2,
  3,
  4,
  0,
  5,
  ~0u,
  6,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetRemindInfoRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetRemindInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetRemindInfoRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetRemindInfoRequest, remindidcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetRemindInfoRequest, remindidlist_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetRemindInfoResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetRemindInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetRemindInfoResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetRemindInfoResponse, remindinfocount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetRemindInfoResponse, remindinfolist_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRemindRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRemindRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRemindRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRemindRequest, clientid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRemindRequest, remindtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRemindRequest, tousercount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRemindRequest, touserlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRemindRequest, content_),
  2,
  0,
  3,
  4,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRemindResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRemindResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRemindResponse, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelRemindRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelRemindRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelRemindRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelRemindRequest, remindid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelRemindResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelRemindResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelRemindResponse, baseresponse_),
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(RemindSyncRequest)},
  { 11, 20, sizeof(RemindSyncResponse)},
  { 24, 32, sizeof(ModRemindCmd)},
  { 35, 41, sizeof(RemindMember)},
  { 42, 55, sizeof(RemindItem)},
  { 63, 71, sizeof(BatchGetRemindInfoRequest)},
  { 74, 82, sizeof(BatchGetRemindInfoResponse)},
  { 85, 96, sizeof(AddRemindRequest)},
  { 102, 108, sizeof(AddRemindResponse)},
  { 109, 116, sizeof(DelRemindRequest)},
  { 118, 124, sizeof(DelRemindResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_RemindSyncRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RemindSyncResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ModRemindCmd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RemindMember_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RemindItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BatchGetRemindInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BatchGetRemindInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AddRemindRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AddRemindResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DelRemindRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DelRemindResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "mmremind.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 11);
}

}  // namespace

void TableStruct::Shutdown() {
  _RemindSyncRequest_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _RemindSyncResponse_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ModRemindCmd_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _RemindMember_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _RemindItem_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _BatchGetRemindInfoRequest_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _BatchGetRemindInfoResponse_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _AddRemindRequest_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _AddRemindResponse_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _DelRemindRequest_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _DelRemindResponse_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::micromsg::protobuf_mmbuiltintype_2eproto::InitDefaults();
  ::micromsg::protobuf_mmbase_2eproto::InitDefaults();
  _RemindSyncRequest_default_instance_.DefaultConstruct();
  _RemindSyncResponse_default_instance_.DefaultConstruct();
  _ModRemindCmd_default_instance_.DefaultConstruct();
  _RemindMember_default_instance_.DefaultConstruct();
  _RemindItem_default_instance_.DefaultConstruct();
  _BatchGetRemindInfoRequest_default_instance_.DefaultConstruct();
  _BatchGetRemindInfoResponse_default_instance_.DefaultConstruct();
  _AddRemindRequest_default_instance_.DefaultConstruct();
  _AddRemindResponse_default_instance_.DefaultConstruct();
  _DelRemindRequest_default_instance_.DefaultConstruct();
  _DelRemindResponse_default_instance_.DefaultConstruct();
  _RemindSyncRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _RemindSyncRequest_default_instance_.get_mutable()->keybuff_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _RemindSyncResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _RemindSyncResponse_default_instance_.get_mutable()->cmdlist_ = const_cast< ::micromsg::CmdList*>(
      ::micromsg::CmdList::internal_default_instance());
  _RemindSyncResponse_default_instance_.get_mutable()->keybuff_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _BatchGetRemindInfoRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _BatchGetRemindInfoResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _AddRemindRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _AddRemindResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _DelRemindRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _DelRemindResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\016mmremind.proto\022\010micromsg\032\023mmbuiltintyp"
      "e.proto\032\014mmbase.proto\"\177\n\021RemindSyncReque"
      "st\022*\n\013BaseRequest\030\001 \002(\0132\025.micromsg.BaseR"
      "equest\022\020\n\010Selector\030\002 \002(\r\022,\n\007KeyBuff\030\003 \002("
      "\0132\033.micromsg.SKBuiltinBuffer_t\"\252\001\n\022Remin"
      "dSyncResponse\022,\n\014BaseResponse\030\001 \002(\0132\026.mi"
      "cromsg.BaseResponse\022\"\n\007CmdList\030\002 \002(\0132\021.m"
      "icromsg.CmdList\022,\n\007KeyBuff\030\003 \002(\0132\033.micro"
      "msg.SKBuiltinBuffer_t\022\024\n\014ContinueFlag\030\004 "
      "\002(\r\"B\n\014ModRemindCmd\022\020\n\010RemindID\030\001 \002(\r\022\022\n"
      "\nRemindTime\030\002 \002(\004\022\014\n\004Flag\030\003 \002(\r\" \n\014Remin"
      "dMember\022\020\n\010UserName\030\001 \001(\t\"\270\001\n\nRemindItem"
      "\022\020\n\010RemindID\030\001 \002(\r\022\022\n\nCreateTime\030\002 \002(\r\022\022"
      "\n\nRemindTime\030\003 \002(\004\022\020\n\010FromUser\030\004 \001(\t\022\023\n\013"
      "ToUserCount\030\005 \002(\r\022*\n\nToUserList\030\006 \003(\0132\026."
      "micromsg.RemindMember\022\014\n\004Flag\030\007 \002(\r\022\017\n\007C"
      "ontent\030\010 \001(\t\"x\n\031BatchGetRemindInfoReques"
      "t\022*\n\013BaseRequest\030\001 \002(\0132\025.micromsg.BaseRe"
      "quest\022\025\n\rRemindIDCount\030\002 \002(\r\022\030\n\014RemindID"
      "List\030\003 \003(\rB\002\020\001\"\221\001\n\032BatchGetRemindInfoRes"
      "ponse\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg.B"
      "aseResponse\022\027\n\017RemindInfoCount\030\002 \002(\r\022,\n\016"
      "RemindInfoList\030\003 \003(\0132\024.micromsg.RemindIt"
      "em\"\266\001\n\020AddRemindRequest\022*\n\013BaseRequest\030\001"
      " \002(\0132\025.micromsg.BaseRequest\022\020\n\010ClientID\030"
      "\002 \001(\t\022\022\n\nRemindTime\030\003 \002(\004\022\023\n\013ToUserCount"
      "\030\004 \002(\r\022*\n\nToUserList\030\005 \003(\0132\026.micromsg.Re"
      "mindMember\022\017\n\007Content\030\006 \001(\t\"A\n\021AddRemind"
      "Response\022,\n\014BaseResponse\030\001 \002(\0132\026.microms"
      "g.BaseResponse\"P\n\020DelRemindRequest\022*\n\013Ba"
      "seRequest\030\001 \002(\0132\025.micromsg.BaseRequest\022\020"
      "\n\010RemindID\030\002 \002(\r\"A\n\021DelRemindResponse\022,\n"
      "\014BaseResponse\030\001 \002(\0132\026.micromsg.BaseRespo"
      "nse"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1323);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mmremind.proto", &protobuf_RegisterTypes);
  ::micromsg::protobuf_mmbuiltintype_2eproto::AddDescriptors();
  ::micromsg::protobuf_mmbase_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_mmremind_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemindSyncRequest::kBaseRequestFieldNumber;
const int RemindSyncRequest::kSelectorFieldNumber;
const int RemindSyncRequest::kKeyBuffFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemindSyncRequest::RemindSyncRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmremind_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.RemindSyncRequest)
}
RemindSyncRequest::RemindSyncRequest(const RemindSyncRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_keybuff()) {
    keybuff_ = new ::micromsg::SKBuiltinBuffer_t(*from.keybuff_);
  } else {
    keybuff_ = NULL;
  }
  selector_ = from.selector_;
  // @@protoc_insertion_point(copy_constructor:micromsg.RemindSyncRequest)
}

void RemindSyncRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&selector_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(selector_));
}

RemindSyncRequest::~RemindSyncRequest() {
  // @@protoc_insertion_point(destructor:micromsg.RemindSyncRequest)
  SharedDtor();
}

void RemindSyncRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete keybuff_;
  }
}

void RemindSyncRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemindSyncRequest::descriptor() {
  protobuf_mmremind_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmremind_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RemindSyncRequest& RemindSyncRequest::default_instance() {
  protobuf_mmremind_2eproto::InitDefaults();
  return *internal_default_instance();
}

RemindSyncRequest* RemindSyncRequest::New(::google::protobuf::Arena* arena) const {
  RemindSyncRequest* n = new RemindSyncRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RemindSyncRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.RemindSyncRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_keybuff()) {
      GOOGLE_DCHECK(keybuff_ != NULL);
      keybuff_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  selector_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RemindSyncRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.RemindSyncRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Selector = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_selector();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selector_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t KeyBuff = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keybuff()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.RemindSyncRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.RemindSyncRequest)
  return false;
#undef DO_
}

void RemindSyncRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.RemindSyncRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 Selector = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->selector(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t KeyBuff = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->keybuff_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.RemindSyncRequest)
}

::google::protobuf::uint8* RemindSyncRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.RemindSyncRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 Selector = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->selector(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t KeyBuff = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->keybuff_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.RemindSyncRequest)
  return target;
}

size_t RemindSyncRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.RemindSyncRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_keybuff()) {
    // required .micromsg.SKBuiltinBuffer_t KeyBuff = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->keybuff_);
  }

  if (has_selector()) {
    // required uint32 Selector = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->selector());
  }

  return total_size;
}
size_t RemindSyncRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.RemindSyncRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.SKBuiltinBuffer_t KeyBuff = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->keybuff_);

    // required uint32 Selector = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->selector());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemindSyncRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.RemindSyncRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RemindSyncRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RemindSyncRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.RemindSyncRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.RemindSyncRequest)
    MergeFrom(*source);
  }
}

void RemindSyncRequest::MergeFrom(const RemindSyncRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.RemindSyncRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_keybuff()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.keybuff());
    }
    if (cached_has_bits & 0x00000004u) {
      selector_ = from.selector_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RemindSyncRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.RemindSyncRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemindSyncRequest::CopyFrom(const RemindSyncRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.RemindSyncRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemindSyncRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_keybuff()) {
    if (!this->keybuff_->IsInitialized()) return false;
  }
  return true;
}

void RemindSyncRequest::Swap(RemindSyncRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemindSyncRequest::InternalSwap(RemindSyncRequest* other) {
  std::swap(baserequest_, other->baserequest_);
  std::swap(keybuff_, other->keybuff_);
  std::swap(selector_, other->selector_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RemindSyncRequest::GetMetadata() const {
  protobuf_mmremind_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmremind_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RemindSyncRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool RemindSyncRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RemindSyncRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void RemindSyncRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void RemindSyncRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& RemindSyncRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.RemindSyncRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* RemindSyncRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.RemindSyncRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* RemindSyncRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.RemindSyncRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void RemindSyncRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.RemindSyncRequest.BaseRequest)
}

// required uint32 Selector = 2;
bool RemindSyncRequest::has_selector() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RemindSyncRequest::set_has_selector() {
  _has_bits_[0] |= 0x00000004u;
}
void RemindSyncRequest::clear_has_selector() {
  _has_bits_[0] &= ~0x00000004u;
}
void RemindSyncRequest::clear_selector() {
  selector_ = 0u;
  clear_has_selector();
}
::google::protobuf::uint32 RemindSyncRequest::selector() const {
  // @@protoc_insertion_point(field_get:micromsg.RemindSyncRequest.Selector)
  return selector_;
}
void RemindSyncRequest::set_selector(::google::protobuf::uint32 value) {
  set_has_selector();
  selector_ = value;
  // @@protoc_insertion_point(field_set:micromsg.RemindSyncRequest.Selector)
}

// required .micromsg.SKBuiltinBuffer_t KeyBuff = 3;
bool RemindSyncRequest::has_keybuff() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RemindSyncRequest::set_has_keybuff() {
  _has_bits_[0] |= 0x00000002u;
}
void RemindSyncRequest::clear_has_keybuff() {
  _has_bits_[0] &= ~0x00000002u;
}
void RemindSyncRequest::clear_keybuff() {
  if (keybuff_ != NULL) keybuff_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_keybuff();
}
const ::micromsg::SKBuiltinBuffer_t& RemindSyncRequest::keybuff() const {
  // @@protoc_insertion_point(field_get:micromsg.RemindSyncRequest.KeyBuff)
  return keybuff_ != NULL ? *keybuff_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* RemindSyncRequest::mutable_keybuff() {
  set_has_keybuff();
  if (keybuff_ == NULL) {
    keybuff_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.RemindSyncRequest.KeyBuff)
  return keybuff_;
}
::micromsg::SKBuiltinBuffer_t* RemindSyncRequest::release_keybuff() {
  // @@protoc_insertion_point(field_release:micromsg.RemindSyncRequest.KeyBuff)
  clear_has_keybuff();
  ::micromsg::SKBuiltinBuffer_t* temp = keybuff_;
  keybuff_ = NULL;
  return temp;
}
void RemindSyncRequest::set_allocated_keybuff(::micromsg::SKBuiltinBuffer_t* keybuff) {
  delete keybuff_;
  keybuff_ = keybuff;
  if (keybuff) {
    set_has_keybuff();
  } else {
    clear_has_keybuff();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.RemindSyncRequest.KeyBuff)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemindSyncResponse::kBaseResponseFieldNumber;
const int RemindSyncResponse::kCmdListFieldNumber;
const int RemindSyncResponse::kKeyBuffFieldNumber;
const int RemindSyncResponse::kContinueFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemindSyncResponse::RemindSyncResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmremind_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.RemindSyncResponse)
}
RemindSyncResponse::RemindSyncResponse(const RemindSyncResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_cmdlist()) {
    cmdlist_ = new ::micromsg::CmdList(*from.cmdlist_);
  } else {
    cmdlist_ = NULL;
  }
  if (from.has_keybuff()) {
    keybuff_ = new ::micromsg::SKBuiltinBuffer_t(*from.keybuff_);
  } else {
    keybuff_ = NULL;
  }
  continueflag_ = from.continueflag_;
  // @@protoc_insertion_point(copy_constructor:micromsg.RemindSyncResponse)
}

void RemindSyncResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&continueflag_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(continueflag_));
}

RemindSyncResponse::~RemindSyncResponse() {
  // @@protoc_insertion_point(destructor:micromsg.RemindSyncResponse)
  SharedDtor();
}

void RemindSyncResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete cmdlist_;
  }
  if (this != internal_default_instance()) {
    delete keybuff_;
  }
}

void RemindSyncResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemindSyncResponse::descriptor() {
  protobuf_mmremind_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmremind_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RemindSyncResponse& RemindSyncResponse::default_instance() {
  protobuf_mmremind_2eproto::InitDefaults();
  return *internal_default_instance();
}

RemindSyncResponse* RemindSyncResponse::New(::google::protobuf::Arena* arena) const {
  RemindSyncResponse* n = new RemindSyncResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RemindSyncResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.RemindSyncResponse)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_cmdlist()) {
      GOOGLE_DCHECK(cmdlist_ != NULL);
      cmdlist_->::micromsg::CmdList::Clear();
    }
    if (has_keybuff()) {
      GOOGLE_DCHECK(keybuff_ != NULL);
      keybuff_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  continueflag_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RemindSyncResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.RemindSyncResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.CmdList CmdList = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmdlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t KeyBuff = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keybuff()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ContinueFlag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_continueflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &continueflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.RemindSyncResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.RemindSyncResponse)
  return false;
#undef DO_
}

void RemindSyncResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.RemindSyncResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required .micromsg.CmdList CmdList = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->cmdlist_, output);
  }

  // required .micromsg.SKBuiltinBuffer_t KeyBuff = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->keybuff_, output);
  }

  // required uint32 ContinueFlag = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->continueflag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.RemindSyncResponse)
}

::google::protobuf::uint8* RemindSyncResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.RemindSyncResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required .micromsg.CmdList CmdList = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->cmdlist_, deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t KeyBuff = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->keybuff_, deterministic, target);
  }

  // required uint32 ContinueFlag = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->continueflag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.RemindSyncResponse)
  return target;
}

size_t RemindSyncResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.RemindSyncResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_cmdlist()) {
    // required .micromsg.CmdList CmdList = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cmdlist_);
  }

  if (has_keybuff()) {
    // required .micromsg.SKBuiltinBuffer_t KeyBuff = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->keybuff_);
  }

  if (has_continueflag()) {
    // required uint32 ContinueFlag = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->continueflag());
  }

  return total_size;
}
size_t RemindSyncResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.RemindSyncResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required .micromsg.CmdList CmdList = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cmdlist_);

    // required .micromsg.SKBuiltinBuffer_t KeyBuff = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->keybuff_);

    // required uint32 ContinueFlag = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->continueflag());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemindSyncResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.RemindSyncResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RemindSyncResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RemindSyncResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.RemindSyncResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.RemindSyncResponse)
    MergeFrom(*source);
  }
}

void RemindSyncResponse::MergeFrom(const RemindSyncResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.RemindSyncResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_cmdlist()->::micromsg::CmdList::MergeFrom(from.cmdlist());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_keybuff()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.keybuff());
    }
    if (cached_has_bits & 0x00000008u) {
      continueflag_ = from.continueflag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RemindSyncResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.RemindSyncResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemindSyncResponse::CopyFrom(const RemindSyncResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.RemindSyncResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemindSyncResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_cmdlist()) {
    if (!this->cmdlist_->IsInitialized()) return false;
  }
  if (has_keybuff()) {
    if (!this->keybuff_->IsInitialized()) return false;
  }
  return true;
}

void RemindSyncResponse::Swap(RemindSyncResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemindSyncResponse::InternalSwap(RemindSyncResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(cmdlist_, other->cmdlist_);
  std::swap(keybuff_, other->keybuff_);
  std::swap(continueflag_, other->continueflag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RemindSyncResponse::GetMetadata() const {
  protobuf_mmremind_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmremind_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RemindSyncResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool RemindSyncResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RemindSyncResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void RemindSyncResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void RemindSyncResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& RemindSyncResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.RemindSyncResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* RemindSyncResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.RemindSyncResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* RemindSyncResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.RemindSyncResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void RemindSyncResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.RemindSyncResponse.BaseResponse)
}

// required .micromsg.CmdList CmdList = 2;
bool RemindSyncResponse::has_cmdlist() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RemindSyncResponse::set_has_cmdlist() {
  _has_bits_[0] |= 0x00000002u;
}
void RemindSyncResponse::clear_has_cmdlist() {
  _has_bits_[0] &= ~0x00000002u;
}
void RemindSyncResponse::clear_cmdlist() {
  if (cmdlist_ != NULL) cmdlist_->::micromsg::CmdList::Clear();
  clear_has_cmdlist();
}
const ::micromsg::CmdList& RemindSyncResponse::cmdlist() const {
  // @@protoc_insertion_point(field_get:micromsg.RemindSyncResponse.CmdList)
  return cmdlist_ != NULL ? *cmdlist_
                         : *::micromsg::CmdList::internal_default_instance();
}
::micromsg::CmdList* RemindSyncResponse::mutable_cmdlist() {
  set_has_cmdlist();
  if (cmdlist_ == NULL) {
    cmdlist_ = new ::micromsg::CmdList;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.RemindSyncResponse.CmdList)
  return cmdlist_;
}
::micromsg::CmdList* RemindSyncResponse::release_cmdlist() {
  // @@protoc_insertion_point(field_release:micromsg.RemindSyncResponse.CmdList)
  clear_has_cmdlist();
  ::micromsg::CmdList* temp = cmdlist_;
  cmdlist_ = NULL;
  return temp;
}
void RemindSyncResponse::set_allocated_cmdlist(::micromsg::CmdList* cmdlist) {
  delete cmdlist_;
  cmdlist_ = cmdlist;
  if (cmdlist) {
    set_has_cmdlist();
  } else {
    clear_has_cmdlist();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.RemindSyncResponse.CmdList)
}

// required .micromsg.SKBuiltinBuffer_t KeyBuff = 3;
bool RemindSyncResponse::has_keybuff() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RemindSyncResponse::set_has_keybuff() {
  _has_bits_[0] |= 0x00000004u;
}
void RemindSyncResponse::clear_has_keybuff() {
  _has_bits_[0] &= ~0x00000004u;
}
void RemindSyncResponse::clear_keybuff() {
  if (keybuff_ != NULL) keybuff_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_keybuff();
}
const ::micromsg::SKBuiltinBuffer_t& RemindSyncResponse::keybuff() const {
  // @@protoc_insertion_point(field_get:micromsg.RemindSyncResponse.KeyBuff)
  return keybuff_ != NULL ? *keybuff_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* RemindSyncResponse::mutable_keybuff() {
  set_has_keybuff();
  if (keybuff_ == NULL) {
    keybuff_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.RemindSyncResponse.KeyBuff)
  return keybuff_;
}
::micromsg::SKBuiltinBuffer_t* RemindSyncResponse::release_keybuff() {
  // @@protoc_insertion_point(field_release:micromsg.RemindSyncResponse.KeyBuff)
  clear_has_keybuff();
  ::micromsg::SKBuiltinBuffer_t* temp = keybuff_;
  keybuff_ = NULL;
  return temp;
}
void RemindSyncResponse::set_allocated_keybuff(::micromsg::SKBuiltinBuffer_t* keybuff) {
  delete keybuff_;
  keybuff_ = keybuff;
  if (keybuff) {
    set_has_keybuff();
  } else {
    clear_has_keybuff();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.RemindSyncResponse.KeyBuff)
}

// required uint32 ContinueFlag = 4;
bool RemindSyncResponse::has_continueflag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RemindSyncResponse::set_has_continueflag() {
  _has_bits_[0] |= 0x00000008u;
}
void RemindSyncResponse::clear_has_continueflag() {
  _has_bits_[0] &= ~0x00000008u;
}
void RemindSyncResponse::clear_continueflag() {
  continueflag_ = 0u;
  clear_has_continueflag();
}
::google::protobuf::uint32 RemindSyncResponse::continueflag() const {
  // @@protoc_insertion_point(field_get:micromsg.RemindSyncResponse.ContinueFlag)
  return continueflag_;
}
void RemindSyncResponse::set_continueflag(::google::protobuf::uint32 value) {
  set_has_continueflag();
  continueflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.RemindSyncResponse.ContinueFlag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModRemindCmd::kRemindIDFieldNumber;
const int ModRemindCmd::kRemindTimeFieldNumber;
const int ModRemindCmd::kFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModRemindCmd::ModRemindCmd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmremind_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ModRemindCmd)
}
ModRemindCmd::ModRemindCmd(const ModRemindCmd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&remindtime_, &from.remindtime_,
    reinterpret_cast<char*>(&flag_) -
    reinterpret_cast<char*>(&remindtime_) + sizeof(flag_));
  // @@protoc_insertion_point(copy_constructor:micromsg.ModRemindCmd)
}

void ModRemindCmd::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&remindtime_, 0, reinterpret_cast<char*>(&flag_) -
    reinterpret_cast<char*>(&remindtime_) + sizeof(flag_));
}

ModRemindCmd::~ModRemindCmd() {
  // @@protoc_insertion_point(destructor:micromsg.ModRemindCmd)
  SharedDtor();
}

void ModRemindCmd::SharedDtor() {
}

void ModRemindCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModRemindCmd::descriptor() {
  protobuf_mmremind_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmremind_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModRemindCmd& ModRemindCmd::default_instance() {
  protobuf_mmremind_2eproto::InitDefaults();
  return *internal_default_instance();
}

ModRemindCmd* ModRemindCmd::New(::google::protobuf::Arena* arena) const {
  ModRemindCmd* n = new ModRemindCmd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModRemindCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ModRemindCmd)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&remindtime_, 0, reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&remindtime_) + sizeof(flag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ModRemindCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ModRemindCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 RemindID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_remindid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remindid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 RemindTime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_remindtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &remindtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Flag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ModRemindCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ModRemindCmd)
  return false;
#undef DO_
}

void ModRemindCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ModRemindCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 RemindID = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->remindid(), output);
  }

  // required uint64 RemindTime = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->remindtime(), output);
  }

  // required uint32 Flag = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ModRemindCmd)
}

::google::protobuf::uint8* ModRemindCmd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ModRemindCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 RemindID = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->remindid(), target);
  }

  // required uint64 RemindTime = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->remindtime(), target);
  }

  // required uint32 Flag = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ModRemindCmd)
  return target;
}

size_t ModRemindCmd::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.ModRemindCmd)
  size_t total_size = 0;

  if (has_remindtime()) {
    // required uint64 RemindTime = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->remindtime());
  }

  if (has_remindid()) {
    // required uint32 RemindID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->remindid());
  }

  if (has_flag()) {
    // required uint32 Flag = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flag());
  }

  return total_size;
}
size_t ModRemindCmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ModRemindCmd)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint64 RemindTime = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->remindtime());

    // required uint32 RemindID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->remindid());

    // required uint32 Flag = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flag());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModRemindCmd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ModRemindCmd)
  GOOGLE_DCHECK_NE(&from, this);
  const ModRemindCmd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModRemindCmd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ModRemindCmd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ModRemindCmd)
    MergeFrom(*source);
  }
}

void ModRemindCmd::MergeFrom(const ModRemindCmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ModRemindCmd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      remindtime_ = from.remindtime_;
    }
    if (cached_has_bits & 0x00000002u) {
      remindid_ = from.remindid_;
    }
    if (cached_has_bits & 0x00000004u) {
      flag_ = from.flag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ModRemindCmd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ModRemindCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModRemindCmd::CopyFrom(const ModRemindCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ModRemindCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModRemindCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void ModRemindCmd::Swap(ModRemindCmd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModRemindCmd::InternalSwap(ModRemindCmd* other) {
  std::swap(remindtime_, other->remindtime_);
  std::swap(remindid_, other->remindid_);
  std::swap(flag_, other->flag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModRemindCmd::GetMetadata() const {
  protobuf_mmremind_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmremind_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModRemindCmd

// required uint32 RemindID = 1;
bool ModRemindCmd::has_remindid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ModRemindCmd::set_has_remindid() {
  _has_bits_[0] |= 0x00000002u;
}
void ModRemindCmd::clear_has_remindid() {
  _has_bits_[0] &= ~0x00000002u;
}
void ModRemindCmd::clear_remindid() {
  remindid_ = 0u;
  clear_has_remindid();
}
::google::protobuf::uint32 ModRemindCmd::remindid() const {
  // @@protoc_insertion_point(field_get:micromsg.ModRemindCmd.RemindID)
  return remindid_;
}
void ModRemindCmd::set_remindid(::google::protobuf::uint32 value) {
  set_has_remindid();
  remindid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModRemindCmd.RemindID)
}

// required uint64 RemindTime = 2;
bool ModRemindCmd::has_remindtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModRemindCmd::set_has_remindtime() {
  _has_bits_[0] |= 0x00000001u;
}
void ModRemindCmd::clear_has_remindtime() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModRemindCmd::clear_remindtime() {
  remindtime_ = GOOGLE_ULONGLONG(0);
  clear_has_remindtime();
}
::google::protobuf::uint64 ModRemindCmd::remindtime() const {
  // @@protoc_insertion_point(field_get:micromsg.ModRemindCmd.RemindTime)
  return remindtime_;
}
void ModRemindCmd::set_remindtime(::google::protobuf::uint64 value) {
  set_has_remindtime();
  remindtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModRemindCmd.RemindTime)
}

// required uint32 Flag = 3;
bool ModRemindCmd::has_flag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ModRemindCmd::set_has_flag() {
  _has_bits_[0] |= 0x00000004u;
}
void ModRemindCmd::clear_has_flag() {
  _has_bits_[0] &= ~0x00000004u;
}
void ModRemindCmd::clear_flag() {
  flag_ = 0u;
  clear_has_flag();
}
::google::protobuf::uint32 ModRemindCmd::flag() const {
  // @@protoc_insertion_point(field_get:micromsg.ModRemindCmd.Flag)
  return flag_;
}
void ModRemindCmd::set_flag(::google::protobuf::uint32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModRemindCmd.Flag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemindMember::kUserNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemindMember::RemindMember()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmremind_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.RemindMember)
}
RemindMember::RemindMember(const RemindMember& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.RemindMember)
}

void RemindMember::SharedCtor() {
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RemindMember::~RemindMember() {
  // @@protoc_insertion_point(destructor:micromsg.RemindMember)
  SharedDtor();
}

void RemindMember::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RemindMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemindMember::descriptor() {
  protobuf_mmremind_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmremind_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RemindMember& RemindMember::default_instance() {
  protobuf_mmremind_2eproto::InitDefaults();
  return *internal_default_instance();
}

RemindMember* RemindMember::New(::google::protobuf::Arena* arena) const {
  RemindMember* n = new RemindMember;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RemindMember::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.RemindMember)
  if (has_username()) {
    GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*username_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RemindMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.RemindMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string UserName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.RemindMember.UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.RemindMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.RemindMember)
  return false;
#undef DO_
}

void RemindMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.RemindMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string UserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RemindMember.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.RemindMember)
}

::google::protobuf::uint8* RemindMember::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.RemindMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string UserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RemindMember.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.RemindMember)
  return target;
}

size_t RemindMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.RemindMember)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string UserName = 1;
  if (has_username()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemindMember::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.RemindMember)
  GOOGLE_DCHECK_NE(&from, this);
  const RemindMember* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RemindMember>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.RemindMember)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.RemindMember)
    MergeFrom(*source);
  }
}

void RemindMember::MergeFrom(const RemindMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.RemindMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_username()) {
    set_has_username();
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
}

void RemindMember::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.RemindMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemindMember::CopyFrom(const RemindMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.RemindMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemindMember::IsInitialized() const {
  return true;
}

void RemindMember::Swap(RemindMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemindMember::InternalSwap(RemindMember* other) {
  username_.Swap(&other->username_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RemindMember::GetMetadata() const {
  protobuf_mmremind_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmremind_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RemindMember

// optional string UserName = 1;
bool RemindMember::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RemindMember::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void RemindMember::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void RemindMember::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& RemindMember::username() const {
  // @@protoc_insertion_point(field_get:micromsg.RemindMember.UserName)
  return username_.GetNoArena();
}
void RemindMember::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.RemindMember.UserName)
}
#if LANG_CXX11
void RemindMember::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.RemindMember.UserName)
}
#endif
void RemindMember::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.RemindMember.UserName)
}
void RemindMember::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.RemindMember.UserName)
}
::std::string* RemindMember::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.RemindMember.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RemindMember::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.RemindMember.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RemindMember::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.RemindMember.UserName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemindItem::kRemindIDFieldNumber;
const int RemindItem::kCreateTimeFieldNumber;
const int RemindItem::kRemindTimeFieldNumber;
const int RemindItem::kFromUserFieldNumber;
const int RemindItem::kToUserCountFieldNumber;
const int RemindItem::kToUserListFieldNumber;
const int RemindItem::kFlagFieldNumber;
const int RemindItem::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemindItem::RemindItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmremind_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.RemindItem)
}
RemindItem::RemindItem(const RemindItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      touserlist_(from.touserlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fromuser_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fromuser()) {
    fromuser_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromuser_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  ::memcpy(&remindid_, &from.remindid_,
    reinterpret_cast<char*>(&flag_) -
    reinterpret_cast<char*>(&remindid_) + sizeof(flag_));
  // @@protoc_insertion_point(copy_constructor:micromsg.RemindItem)
}

void RemindItem::SharedCtor() {
  _cached_size_ = 0;
  fromuser_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&remindid_, 0, reinterpret_cast<char*>(&flag_) -
    reinterpret_cast<char*>(&remindid_) + sizeof(flag_));
}

RemindItem::~RemindItem() {
  // @@protoc_insertion_point(destructor:micromsg.RemindItem)
  SharedDtor();
}

void RemindItem::SharedDtor() {
  fromuser_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RemindItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemindItem::descriptor() {
  protobuf_mmremind_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmremind_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RemindItem& RemindItem::default_instance() {
  protobuf_mmremind_2eproto::InitDefaults();
  return *internal_default_instance();
}

RemindItem* RemindItem::New(::google::protobuf::Arena* arena) const {
  RemindItem* n = new RemindItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RemindItem::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.RemindItem)
  touserlist_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_fromuser()) {
      GOOGLE_DCHECK(!fromuser_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fromuser_.UnsafeRawStringPointer())->clear();
    }
    if (has_content()) {
      GOOGLE_DCHECK(!content_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*content_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 124u) {
    ::memset(&remindid_, 0, reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&remindid_) + sizeof(flag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RemindItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.RemindItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 RemindID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_remindid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remindid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 CreateTime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_createtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 RemindTime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_remindtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &remindtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FromUser = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromuser()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fromuser().data(), this->fromuser().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.RemindItem.FromUser");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ToUserCount = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_tousercount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tousercount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.RemindMember ToUserList = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_touserlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Flag = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Content = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.RemindItem.Content");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.RemindItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.RemindItem)
  return false;
#undef DO_
}

void RemindItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.RemindItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 RemindID = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->remindid(), output);
  }

  // required uint32 CreateTime = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->createtime(), output);
  }

  // required uint64 RemindTime = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->remindtime(), output);
  }

  // optional string FromUser = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromuser().data(), this->fromuser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RemindItem.FromUser");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->fromuser(), output);
  }

  // required uint32 ToUserCount = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tousercount(), output);
  }

  // repeated .micromsg.RemindMember ToUserList = 6;
  for (unsigned int i = 0, n = this->touserlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->touserlist(i), output);
  }

  // required uint32 Flag = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->flag(), output);
  }

  // optional string Content = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RemindItem.Content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->content(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.RemindItem)
}

::google::protobuf::uint8* RemindItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.RemindItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 RemindID = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->remindid(), target);
  }

  // required uint32 CreateTime = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->createtime(), target);
  }

  // required uint64 RemindTime = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->remindtime(), target);
  }

  // optional string FromUser = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromuser().data(), this->fromuser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RemindItem.FromUser");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->fromuser(), target);
  }

  // required uint32 ToUserCount = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tousercount(), target);
  }

  // repeated .micromsg.RemindMember ToUserList = 6;
  for (unsigned int i = 0, n = this->touserlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->touserlist(i), deterministic, target);
  }

  // required uint32 Flag = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->flag(), target);
  }

  // optional string Content = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.RemindItem.Content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->content(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.RemindItem)
  return target;
}

size_t RemindItem::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.RemindItem)
  size_t total_size = 0;

  if (has_remindid()) {
    // required uint32 RemindID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->remindid());
  }

  if (has_createtime()) {
    // required uint32 CreateTime = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->createtime());
  }

  if (has_remindtime()) {
    // required uint64 RemindTime = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->remindtime());
  }

  if (has_tousercount()) {
    // required uint32 ToUserCount = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tousercount());
  }

  if (has_flag()) {
    // required uint32 Flag = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flag());
  }

  return total_size;
}
size_t RemindItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.RemindItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007c) ^ 0x0000007c) == 0) {  // All required fields are present.
    // required uint32 RemindID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->remindid());

    // required uint32 CreateTime = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->createtime());

    // required uint64 RemindTime = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->remindtime());

    // required uint32 ToUserCount = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tousercount());

    // required uint32 Flag = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flag());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.RemindMember ToUserList = 6;
  {
    unsigned int count = this->touserlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->touserlist(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string FromUser = 4;
    if (has_fromuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromuser());
    }

    // optional string Content = 8;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemindItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.RemindItem)
  GOOGLE_DCHECK_NE(&from, this);
  const RemindItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RemindItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.RemindItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.RemindItem)
    MergeFrom(*source);
  }
}

void RemindItem::MergeFrom(const RemindItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.RemindItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  touserlist_.MergeFrom(from.touserlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_fromuser();
      fromuser_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromuser_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000004u) {
      remindid_ = from.remindid_;
    }
    if (cached_has_bits & 0x00000008u) {
      createtime_ = from.createtime_;
    }
    if (cached_has_bits & 0x00000010u) {
      remindtime_ = from.remindtime_;
    }
    if (cached_has_bits & 0x00000020u) {
      tousercount_ = from.tousercount_;
    }
    if (cached_has_bits & 0x00000040u) {
      flag_ = from.flag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RemindItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.RemindItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemindItem::CopyFrom(const RemindItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.RemindItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemindItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007c) != 0x0000007c) return false;
  return true;
}

void RemindItem::Swap(RemindItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemindItem::InternalSwap(RemindItem* other) {
  touserlist_.InternalSwap(&other->touserlist_);
  fromuser_.Swap(&other->fromuser_);
  content_.Swap(&other->content_);
  std::swap(remindid_, other->remindid_);
  std::swap(createtime_, other->createtime_);
  std::swap(remindtime_, other->remindtime_);
  std::swap(tousercount_, other->tousercount_);
  std::swap(flag_, other->flag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RemindItem::GetMetadata() const {
  protobuf_mmremind_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmremind_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RemindItem

// required uint32 RemindID = 1;
bool RemindItem::has_remindid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RemindItem::set_has_remindid() {
  _has_bits_[0] |= 0x00000004u;
}
void RemindItem::clear_has_remindid() {
  _has_bits_[0] &= ~0x00000004u;
}
void RemindItem::clear_remindid() {
  remindid_ = 0u;
  clear_has_remindid();
}
::google::protobuf::uint32 RemindItem::remindid() const {
  // @@protoc_insertion_point(field_get:micromsg.RemindItem.RemindID)
  return remindid_;
}
void RemindItem::set_remindid(::google::protobuf::uint32 value) {
  set_has_remindid();
  remindid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.RemindItem.RemindID)
}

// required uint32 CreateTime = 2;
bool RemindItem::has_createtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RemindItem::set_has_createtime() {
  _has_bits_[0] |= 0x00000008u;
}
void RemindItem::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000008u;
}
void RemindItem::clear_createtime() {
  createtime_ = 0u;
  clear_has_createtime();
}
::google::protobuf::uint32 RemindItem::createtime() const {
  // @@protoc_insertion_point(field_get:micromsg.RemindItem.CreateTime)
  return createtime_;
}
void RemindItem::set_createtime(::google::protobuf::uint32 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.RemindItem.CreateTime)
}

// required uint64 RemindTime = 3;
bool RemindItem::has_remindtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RemindItem::set_has_remindtime() {
  _has_bits_[0] |= 0x00000010u;
}
void RemindItem::clear_has_remindtime() {
  _has_bits_[0] &= ~0x00000010u;
}
void RemindItem::clear_remindtime() {
  remindtime_ = GOOGLE_ULONGLONG(0);
  clear_has_remindtime();
}
::google::protobuf::uint64 RemindItem::remindtime() const {
  // @@protoc_insertion_point(field_get:micromsg.RemindItem.RemindTime)
  return remindtime_;
}
void RemindItem::set_remindtime(::google::protobuf::uint64 value) {
  set_has_remindtime();
  remindtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.RemindItem.RemindTime)
}

// optional string FromUser = 4;
bool RemindItem::has_fromuser() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RemindItem::set_has_fromuser() {
  _has_bits_[0] |= 0x00000001u;
}
void RemindItem::clear_has_fromuser() {
  _has_bits_[0] &= ~0x00000001u;
}
void RemindItem::clear_fromuser() {
  fromuser_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fromuser();
}
const ::std::string& RemindItem::fromuser() const {
  // @@protoc_insertion_point(field_get:micromsg.RemindItem.FromUser)
  return fromuser_.GetNoArena();
}
void RemindItem::set_fromuser(const ::std::string& value) {
  set_has_fromuser();
  fromuser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.RemindItem.FromUser)
}
#if LANG_CXX11
void RemindItem::set_fromuser(::std::string&& value) {
  set_has_fromuser();
  fromuser_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.RemindItem.FromUser)
}
#endif
void RemindItem::set_fromuser(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fromuser();
  fromuser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.RemindItem.FromUser)
}
void RemindItem::set_fromuser(const char* value, size_t size) {
  set_has_fromuser();
  fromuser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.RemindItem.FromUser)
}
::std::string* RemindItem::mutable_fromuser() {
  set_has_fromuser();
  // @@protoc_insertion_point(field_mutable:micromsg.RemindItem.FromUser)
  return fromuser_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RemindItem::release_fromuser() {
  // @@protoc_insertion_point(field_release:micromsg.RemindItem.FromUser)
  clear_has_fromuser();
  return fromuser_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RemindItem::set_allocated_fromuser(::std::string* fromuser) {
  if (fromuser != NULL) {
    set_has_fromuser();
  } else {
    clear_has_fromuser();
  }
  fromuser_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromuser);
  // @@protoc_insertion_point(field_set_allocated:micromsg.RemindItem.FromUser)
}

// required uint32 ToUserCount = 5;
bool RemindItem::has_tousercount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RemindItem::set_has_tousercount() {
  _has_bits_[0] |= 0x00000020u;
}
void RemindItem::clear_has_tousercount() {
  _has_bits_[0] &= ~0x00000020u;
}
void RemindItem::clear_tousercount() {
  tousercount_ = 0u;
  clear_has_tousercount();
}
::google::protobuf::uint32 RemindItem::tousercount() const {
  // @@protoc_insertion_point(field_get:micromsg.RemindItem.ToUserCount)
  return tousercount_;
}
void RemindItem::set_tousercount(::google::protobuf::uint32 value) {
  set_has_tousercount();
  tousercount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.RemindItem.ToUserCount)
}

// repeated .micromsg.RemindMember ToUserList = 6;
int RemindItem::touserlist_size() const {
  return touserlist_.size();
}
void RemindItem::clear_touserlist() {
  touserlist_.Clear();
}
const ::micromsg::RemindMember& RemindItem::touserlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.RemindItem.ToUserList)
  return touserlist_.Get(index);
}
::micromsg::RemindMember* RemindItem::mutable_touserlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.RemindItem.ToUserList)
  return touserlist_.Mutable(index);
}
::micromsg::RemindMember* RemindItem::add_touserlist() {
  // @@protoc_insertion_point(field_add:micromsg.RemindItem.ToUserList)
  return touserlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::RemindMember >*
RemindItem::mutable_touserlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.RemindItem.ToUserList)
  return &touserlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::RemindMember >&
RemindItem::touserlist() const {
  // @@protoc_insertion_point(field_list:micromsg.RemindItem.ToUserList)
  return touserlist_;
}

// required uint32 Flag = 7;
bool RemindItem::has_flag() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RemindItem::set_has_flag() {
  _has_bits_[0] |= 0x00000040u;
}
void RemindItem::clear_has_flag() {
  _has_bits_[0] &= ~0x00000040u;
}
void RemindItem::clear_flag() {
  flag_ = 0u;
  clear_has_flag();
}
::google::protobuf::uint32 RemindItem::flag() const {
  // @@protoc_insertion_point(field_get:micromsg.RemindItem.Flag)
  return flag_;
}
void RemindItem::set_flag(::google::protobuf::uint32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.RemindItem.Flag)
}

// optional string Content = 8;
bool RemindItem::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RemindItem::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
void RemindItem::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
void RemindItem::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
const ::std::string& RemindItem::content() const {
  // @@protoc_insertion_point(field_get:micromsg.RemindItem.Content)
  return content_.GetNoArena();
}
void RemindItem::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.RemindItem.Content)
}
#if LANG_CXX11
void RemindItem::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.RemindItem.Content)
}
#endif
void RemindItem::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.RemindItem.Content)
}
void RemindItem::set_content(const char* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.RemindItem.Content)
}
::std::string* RemindItem::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:micromsg.RemindItem.Content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RemindItem::release_content() {
  // @@protoc_insertion_point(field_release:micromsg.RemindItem.Content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RemindItem::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:micromsg.RemindItem.Content)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchGetRemindInfoRequest::kBaseRequestFieldNumber;
const int BatchGetRemindInfoRequest::kRemindIDCountFieldNumber;
const int BatchGetRemindInfoRequest::kRemindIDListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchGetRemindInfoRequest::BatchGetRemindInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmremind_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BatchGetRemindInfoRequest)
}
BatchGetRemindInfoRequest::BatchGetRemindInfoRequest(const BatchGetRemindInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      remindidlist_(from.remindidlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  remindidcount_ = from.remindidcount_;
  // @@protoc_insertion_point(copy_constructor:micromsg.BatchGetRemindInfoRequest)
}

void BatchGetRemindInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&remindidcount_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(remindidcount_));
}

BatchGetRemindInfoRequest::~BatchGetRemindInfoRequest() {
  // @@protoc_insertion_point(destructor:micromsg.BatchGetRemindInfoRequest)
  SharedDtor();
}

void BatchGetRemindInfoRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void BatchGetRemindInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchGetRemindInfoRequest::descriptor() {
  protobuf_mmremind_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmremind_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatchGetRemindInfoRequest& BatchGetRemindInfoRequest::default_instance() {
  protobuf_mmremind_2eproto::InitDefaults();
  return *internal_default_instance();
}

BatchGetRemindInfoRequest* BatchGetRemindInfoRequest::New(::google::protobuf::Arena* arena) const {
  BatchGetRemindInfoRequest* n = new BatchGetRemindInfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchGetRemindInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BatchGetRemindInfoRequest)
  remindidlist_.Clear();
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  remindidcount_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BatchGetRemindInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BatchGetRemindInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 RemindIDCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_remindidcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remindidcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 RemindIDList = 3 [packed = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_remindidlist())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_remindidlist())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BatchGetRemindInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BatchGetRemindInfoRequest)
  return false;
#undef DO_
}

void BatchGetRemindInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BatchGetRemindInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 RemindIDCount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->remindidcount(), output);
  }

  // repeated uint32 RemindIDList = 3 [packed = true];
  if (this->remindidlist_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_remindidlist_cached_byte_size_);
  }
  for (int i = 0, n = this->remindidlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->remindidlist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BatchGetRemindInfoRequest)
}

::google::protobuf::uint8* BatchGetRemindInfoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BatchGetRemindInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 RemindIDCount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->remindidcount(), target);
  }

  // repeated uint32 RemindIDList = 3 [packed = true];
  if (this->remindidlist_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _remindidlist_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->remindidlist_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BatchGetRemindInfoRequest)
  return target;
}

size_t BatchGetRemindInfoRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.BatchGetRemindInfoRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_remindidcount()) {
    // required uint32 RemindIDCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->remindidcount());
  }

  return total_size;
}
size_t BatchGetRemindInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BatchGetRemindInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 RemindIDCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->remindidcount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated uint32 RemindIDList = 3 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->remindidlist_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _remindidlist_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchGetRemindInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BatchGetRemindInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchGetRemindInfoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchGetRemindInfoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BatchGetRemindInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BatchGetRemindInfoRequest)
    MergeFrom(*source);
  }
}

void BatchGetRemindInfoRequest::MergeFrom(const BatchGetRemindInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BatchGetRemindInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  remindidlist_.MergeFrom(from.remindidlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      remindidcount_ = from.remindidcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BatchGetRemindInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BatchGetRemindInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchGetRemindInfoRequest::CopyFrom(const BatchGetRemindInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BatchGetRemindInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchGetRemindInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void BatchGetRemindInfoRequest::Swap(BatchGetRemindInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchGetRemindInfoRequest::InternalSwap(BatchGetRemindInfoRequest* other) {
  remindidlist_.InternalSwap(&other->remindidlist_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(remindidcount_, other->remindidcount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchGetRemindInfoRequest::GetMetadata() const {
  protobuf_mmremind_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmremind_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchGetRemindInfoRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool BatchGetRemindInfoRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BatchGetRemindInfoRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void BatchGetRemindInfoRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void BatchGetRemindInfoRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& BatchGetRemindInfoRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchGetRemindInfoRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* BatchGetRemindInfoRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BatchGetRemindInfoRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* BatchGetRemindInfoRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.BatchGetRemindInfoRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void BatchGetRemindInfoRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BatchGetRemindInfoRequest.BaseRequest)
}

// required uint32 RemindIDCount = 2;
bool BatchGetRemindInfoRequest::has_remindidcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BatchGetRemindInfoRequest::set_has_remindidcount() {
  _has_bits_[0] |= 0x00000002u;
}
void BatchGetRemindInfoRequest::clear_has_remindidcount() {
  _has_bits_[0] &= ~0x00000002u;
}
void BatchGetRemindInfoRequest::clear_remindidcount() {
  remindidcount_ = 0u;
  clear_has_remindidcount();
}
::google::protobuf::uint32 BatchGetRemindInfoRequest::remindidcount() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchGetRemindInfoRequest.RemindIDCount)
  return remindidcount_;
}
void BatchGetRemindInfoRequest::set_remindidcount(::google::protobuf::uint32 value) {
  set_has_remindidcount();
  remindidcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BatchGetRemindInfoRequest.RemindIDCount)
}

// repeated uint32 RemindIDList = 3 [packed = true];
int BatchGetRemindInfoRequest::remindidlist_size() const {
  return remindidlist_.size();
}
void BatchGetRemindInfoRequest::clear_remindidlist() {
  remindidlist_.Clear();
}
::google::protobuf::uint32 BatchGetRemindInfoRequest::remindidlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.BatchGetRemindInfoRequest.RemindIDList)
  return remindidlist_.Get(index);
}
void BatchGetRemindInfoRequest::set_remindidlist(int index, ::google::protobuf::uint32 value) {
  remindidlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:micromsg.BatchGetRemindInfoRequest.RemindIDList)
}
void BatchGetRemindInfoRequest::add_remindidlist(::google::protobuf::uint32 value) {
  remindidlist_.Add(value);
  // @@protoc_insertion_point(field_add:micromsg.BatchGetRemindInfoRequest.RemindIDList)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BatchGetRemindInfoRequest::remindidlist() const {
  // @@protoc_insertion_point(field_list:micromsg.BatchGetRemindInfoRequest.RemindIDList)
  return remindidlist_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BatchGetRemindInfoRequest::mutable_remindidlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.BatchGetRemindInfoRequest.RemindIDList)
  return &remindidlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchGetRemindInfoResponse::kBaseResponseFieldNumber;
const int BatchGetRemindInfoResponse::kRemindInfoCountFieldNumber;
const int BatchGetRemindInfoResponse::kRemindInfoListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchGetRemindInfoResponse::BatchGetRemindInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmremind_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BatchGetRemindInfoResponse)
}
BatchGetRemindInfoResponse::BatchGetRemindInfoResponse(const BatchGetRemindInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      remindinfolist_(from.remindinfolist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  remindinfocount_ = from.remindinfocount_;
  // @@protoc_insertion_point(copy_constructor:micromsg.BatchGetRemindInfoResponse)
}

void BatchGetRemindInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&remindinfocount_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(remindinfocount_));
}

BatchGetRemindInfoResponse::~BatchGetRemindInfoResponse() {
  // @@protoc_insertion_point(destructor:micromsg.BatchGetRemindInfoResponse)
  SharedDtor();
}

void BatchGetRemindInfoResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void BatchGetRemindInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchGetRemindInfoResponse::descriptor() {
  protobuf_mmremind_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmremind_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatchGetRemindInfoResponse& BatchGetRemindInfoResponse::default_instance() {
  protobuf_mmremind_2eproto::InitDefaults();
  return *internal_default_instance();
}

BatchGetRemindInfoResponse* BatchGetRemindInfoResponse::New(::google::protobuf::Arena* arena) const {
  BatchGetRemindInfoResponse* n = new BatchGetRemindInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchGetRemindInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BatchGetRemindInfoResponse)
  remindinfolist_.Clear();
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  remindinfocount_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BatchGetRemindInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BatchGetRemindInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 RemindInfoCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_remindinfocount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remindinfocount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.RemindItem RemindInfoList = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_remindinfolist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BatchGetRemindInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BatchGetRemindInfoResponse)
  return false;
#undef DO_
}

void BatchGetRemindInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BatchGetRemindInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 RemindInfoCount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->remindinfocount(), output);
  }

  // repeated .micromsg.RemindItem RemindInfoList = 3;
  for (unsigned int i = 0, n = this->remindinfolist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->remindinfolist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BatchGetRemindInfoResponse)
}

::google::protobuf::uint8* BatchGetRemindInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BatchGetRemindInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 RemindInfoCount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->remindinfocount(), target);
  }

  // repeated .micromsg.RemindItem RemindInfoList = 3;
  for (unsigned int i = 0, n = this->remindinfolist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->remindinfolist(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BatchGetRemindInfoResponse)
  return target;
}

size_t BatchGetRemindInfoResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.BatchGetRemindInfoResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_remindinfocount()) {
    // required uint32 RemindInfoCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->remindinfocount());
  }

  return total_size;
}
size_t BatchGetRemindInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BatchGetRemindInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 RemindInfoCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->remindinfocount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.RemindItem RemindInfoList = 3;
  {
    unsigned int count = this->remindinfolist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->remindinfolist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchGetRemindInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BatchGetRemindInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchGetRemindInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchGetRemindInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BatchGetRemindInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BatchGetRemindInfoResponse)
    MergeFrom(*source);
  }
}

void BatchGetRemindInfoResponse::MergeFrom(const BatchGetRemindInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BatchGetRemindInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  remindinfolist_.MergeFrom(from.remindinfolist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      remindinfocount_ = from.remindinfocount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BatchGetRemindInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BatchGetRemindInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchGetRemindInfoResponse::CopyFrom(const BatchGetRemindInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BatchGetRemindInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchGetRemindInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->remindinfolist())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void BatchGetRemindInfoResponse::Swap(BatchGetRemindInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchGetRemindInfoResponse::InternalSwap(BatchGetRemindInfoResponse* other) {
  remindinfolist_.InternalSwap(&other->remindinfolist_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(remindinfocount_, other->remindinfocount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchGetRemindInfoResponse::GetMetadata() const {
  protobuf_mmremind_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmremind_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchGetRemindInfoResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool BatchGetRemindInfoResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BatchGetRemindInfoResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void BatchGetRemindInfoResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void BatchGetRemindInfoResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& BatchGetRemindInfoResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchGetRemindInfoResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* BatchGetRemindInfoResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BatchGetRemindInfoResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* BatchGetRemindInfoResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.BatchGetRemindInfoResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void BatchGetRemindInfoResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BatchGetRemindInfoResponse.BaseResponse)
}

// required uint32 RemindInfoCount = 2;
bool BatchGetRemindInfoResponse::has_remindinfocount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BatchGetRemindInfoResponse::set_has_remindinfocount() {
  _has_bits_[0] |= 0x00000002u;
}
void BatchGetRemindInfoResponse::clear_has_remindinfocount() {
  _has_bits_[0] &= ~0x00000002u;
}
void BatchGetRemindInfoResponse::clear_remindinfocount() {
  remindinfocount_ = 0u;
  clear_has_remindinfocount();
}
::google::protobuf::uint32 BatchGetRemindInfoResponse::remindinfocount() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchGetRemindInfoResponse.RemindInfoCount)
  return remindinfocount_;
}
void BatchGetRemindInfoResponse::set_remindinfocount(::google::protobuf::uint32 value) {
  set_has_remindinfocount();
  remindinfocount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BatchGetRemindInfoResponse.RemindInfoCount)
}

// repeated .micromsg.RemindItem RemindInfoList = 3;
int BatchGetRemindInfoResponse::remindinfolist_size() const {
  return remindinfolist_.size();
}
void BatchGetRemindInfoResponse::clear_remindinfolist() {
  remindinfolist_.Clear();
}
const ::micromsg::RemindItem& BatchGetRemindInfoResponse::remindinfolist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.BatchGetRemindInfoResponse.RemindInfoList)
  return remindinfolist_.Get(index);
}
::micromsg::RemindItem* BatchGetRemindInfoResponse::mutable_remindinfolist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.BatchGetRemindInfoResponse.RemindInfoList)
  return remindinfolist_.Mutable(index);
}
::micromsg::RemindItem* BatchGetRemindInfoResponse::add_remindinfolist() {
  // @@protoc_insertion_point(field_add:micromsg.BatchGetRemindInfoResponse.RemindInfoList)
  return remindinfolist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::RemindItem >*
BatchGetRemindInfoResponse::mutable_remindinfolist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.BatchGetRemindInfoResponse.RemindInfoList)
  return &remindinfolist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::RemindItem >&
BatchGetRemindInfoResponse::remindinfolist() const {
  // @@protoc_insertion_point(field_list:micromsg.BatchGetRemindInfoResponse.RemindInfoList)
  return remindinfolist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddRemindRequest::kBaseRequestFieldNumber;
const int AddRemindRequest::kClientIDFieldNumber;
const int AddRemindRequest::kRemindTimeFieldNumber;
const int AddRemindRequest::kToUserCountFieldNumber;
const int AddRemindRequest::kToUserListFieldNumber;
const int AddRemindRequest::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddRemindRequest::AddRemindRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmremind_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.AddRemindRequest)
}
AddRemindRequest::AddRemindRequest(const AddRemindRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      touserlist_(from.touserlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientid()) {
    clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&remindtime_, &from.remindtime_,
    reinterpret_cast<char*>(&tousercount_) -
    reinterpret_cast<char*>(&remindtime_) + sizeof(tousercount_));
  // @@protoc_insertion_point(copy_constructor:micromsg.AddRemindRequest)
}

void AddRemindRequest::SharedCtor() {
  _cached_size_ = 0;
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&tousercount_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(tousercount_));
}

AddRemindRequest::~AddRemindRequest() {
  // @@protoc_insertion_point(destructor:micromsg.AddRemindRequest)
  SharedDtor();
}

void AddRemindRequest::SharedDtor() {
  clientid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void AddRemindRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddRemindRequest::descriptor() {
  protobuf_mmremind_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmremind_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddRemindRequest& AddRemindRequest::default_instance() {
  protobuf_mmremind_2eproto::InitDefaults();
  return *internal_default_instance();
}

AddRemindRequest* AddRemindRequest::New(::google::protobuf::Arena* arena) const {
  AddRemindRequest* n = new AddRemindRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddRemindRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.AddRemindRequest)
  touserlist_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_clientid()) {
      GOOGLE_DCHECK(!clientid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*clientid_.UnsafeRawStringPointer())->clear();
    }
    if (has_content()) {
      GOOGLE_DCHECK(!content_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*content_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&remindtime_, 0, reinterpret_cast<char*>(&tousercount_) -
      reinterpret_cast<char*>(&remindtime_) + sizeof(tousercount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AddRemindRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.AddRemindRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ClientID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientid().data(), this->clientid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.AddRemindRequest.ClientID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 RemindTime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_remindtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &remindtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ToUserCount = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_tousercount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tousercount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.RemindMember ToUserList = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_touserlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Content = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.AddRemindRequest.Content");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.AddRemindRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.AddRemindRequest)
  return false;
#undef DO_
}

void AddRemindRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.AddRemindRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string ClientID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AddRemindRequest.ClientID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->clientid(), output);
  }

  // required uint64 RemindTime = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->remindtime(), output);
  }

  // required uint32 ToUserCount = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tousercount(), output);
  }

  // repeated .micromsg.RemindMember ToUserList = 5;
  for (unsigned int i = 0, n = this->touserlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->touserlist(i), output);
  }

  // optional string Content = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AddRemindRequest.Content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->content(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.AddRemindRequest)
}

::google::protobuf::uint8* AddRemindRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.AddRemindRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string ClientID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AddRemindRequest.ClientID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->clientid(), target);
  }

  // required uint64 RemindTime = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->remindtime(), target);
  }

  // required uint32 ToUserCount = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tousercount(), target);
  }

  // repeated .micromsg.RemindMember ToUserList = 5;
  for (unsigned int i = 0, n = this->touserlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->touserlist(i), deterministic, target);
  }

  // optional string Content = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AddRemindRequest.Content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->content(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.AddRemindRequest)
  return target;
}

size_t AddRemindRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.AddRemindRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_remindtime()) {
    // required uint64 RemindTime = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->remindtime());
  }

  if (has_tousercount()) {
    // required uint32 ToUserCount = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tousercount());
  }

  return total_size;
}
size_t AddRemindRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.AddRemindRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001c) ^ 0x0000001c) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint64 RemindTime = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->remindtime());

    // required uint32 ToUserCount = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tousercount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.RemindMember ToUserList = 5;
  {
    unsigned int count = this->touserlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->touserlist(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string ClientID = 2;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientid());
    }

    // optional string Content = 6;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddRemindRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.AddRemindRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddRemindRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddRemindRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.AddRemindRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.AddRemindRequest)
    MergeFrom(*source);
  }
}

void AddRemindRequest::MergeFrom(const AddRemindRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.AddRemindRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  touserlist_.MergeFrom(from.touserlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_clientid();
      clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000008u) {
      remindtime_ = from.remindtime_;
    }
    if (cached_has_bits & 0x00000010u) {
      tousercount_ = from.tousercount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AddRemindRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.AddRemindRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddRemindRequest::CopyFrom(const AddRemindRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.AddRemindRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRemindRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001c) != 0x0000001c) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void AddRemindRequest::Swap(AddRemindRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddRemindRequest::InternalSwap(AddRemindRequest* other) {
  touserlist_.InternalSwap(&other->touserlist_);
  clientid_.Swap(&other->clientid_);
  content_.Swap(&other->content_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(remindtime_, other->remindtime_);
  std::swap(tousercount_, other->tousercount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddRemindRequest::GetMetadata() const {
  protobuf_mmremind_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmremind_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddRemindRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool AddRemindRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AddRemindRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
void AddRemindRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
void AddRemindRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& AddRemindRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.AddRemindRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* AddRemindRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AddRemindRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* AddRemindRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.AddRemindRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void AddRemindRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AddRemindRequest.BaseRequest)
}

// optional string ClientID = 2;
bool AddRemindRequest::has_clientid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AddRemindRequest::set_has_clientid() {
  _has_bits_[0] |= 0x00000001u;
}
void AddRemindRequest::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000001u;
}
void AddRemindRequest::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientid();
}
const ::std::string& AddRemindRequest::clientid() const {
  // @@protoc_insertion_point(field_get:micromsg.AddRemindRequest.ClientID)
  return clientid_.GetNoArena();
}
void AddRemindRequest::set_clientid(const ::std::string& value) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AddRemindRequest.ClientID)
}
#if LANG_CXX11
void AddRemindRequest::set_clientid(::std::string&& value) {
  set_has_clientid();
  clientid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AddRemindRequest.ClientID)
}
#endif
void AddRemindRequest::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AddRemindRequest.ClientID)
}
void AddRemindRequest::set_clientid(const char* value, size_t size) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AddRemindRequest.ClientID)
}
::std::string* AddRemindRequest::mutable_clientid() {
  set_has_clientid();
  // @@protoc_insertion_point(field_mutable:micromsg.AddRemindRequest.ClientID)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddRemindRequest::release_clientid() {
  // @@protoc_insertion_point(field_release:micromsg.AddRemindRequest.ClientID)
  clear_has_clientid();
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddRemindRequest::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    set_has_clientid();
  } else {
    clear_has_clientid();
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AddRemindRequest.ClientID)
}

// required uint64 RemindTime = 3;
bool AddRemindRequest::has_remindtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AddRemindRequest::set_has_remindtime() {
  _has_bits_[0] |= 0x00000008u;
}
void AddRemindRequest::clear_has_remindtime() {
  _has_bits_[0] &= ~0x00000008u;
}
void AddRemindRequest::clear_remindtime() {
  remindtime_ = GOOGLE_ULONGLONG(0);
  clear_has_remindtime();
}
::google::protobuf::uint64 AddRemindRequest::remindtime() const {
  // @@protoc_insertion_point(field_get:micromsg.AddRemindRequest.RemindTime)
  return remindtime_;
}
void AddRemindRequest::set_remindtime(::google::protobuf::uint64 value) {
  set_has_remindtime();
  remindtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AddRemindRequest.RemindTime)
}

// required uint32 ToUserCount = 4;
bool AddRemindRequest::has_tousercount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AddRemindRequest::set_has_tousercount() {
  _has_bits_[0] |= 0x00000010u;
}
void AddRemindRequest::clear_has_tousercount() {
  _has_bits_[0] &= ~0x00000010u;
}
void AddRemindRequest::clear_tousercount() {
  tousercount_ = 0u;
  clear_has_tousercount();
}
::google::protobuf::uint32 AddRemindRequest::tousercount() const {
  // @@protoc_insertion_point(field_get:micromsg.AddRemindRequest.ToUserCount)
  return tousercount_;
}
void AddRemindRequest::set_tousercount(::google::protobuf::uint32 value) {
  set_has_tousercount();
  tousercount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AddRemindRequest.ToUserCount)
}

// repeated .micromsg.RemindMember ToUserList = 5;
int AddRemindRequest::touserlist_size() const {
  return touserlist_.size();
}
void AddRemindRequest::clear_touserlist() {
  touserlist_.Clear();
}
const ::micromsg::RemindMember& AddRemindRequest::touserlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.AddRemindRequest.ToUserList)
  return touserlist_.Get(index);
}
::micromsg::RemindMember* AddRemindRequest::mutable_touserlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.AddRemindRequest.ToUserList)
  return touserlist_.Mutable(index);
}
::micromsg::RemindMember* AddRemindRequest::add_touserlist() {
  // @@protoc_insertion_point(field_add:micromsg.AddRemindRequest.ToUserList)
  return touserlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::RemindMember >*
AddRemindRequest::mutable_touserlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.AddRemindRequest.ToUserList)
  return &touserlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::RemindMember >&
AddRemindRequest::touserlist() const {
  // @@protoc_insertion_point(field_list:micromsg.AddRemindRequest.ToUserList)
  return touserlist_;
}

// optional string Content = 6;
bool AddRemindRequest::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AddRemindRequest::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
void AddRemindRequest::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
void AddRemindRequest::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
const ::std::string& AddRemindRequest::content() const {
  // @@protoc_insertion_point(field_get:micromsg.AddRemindRequest.Content)
  return content_.GetNoArena();
}
void AddRemindRequest::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AddRemindRequest.Content)
}
#if LANG_CXX11
void AddRemindRequest::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AddRemindRequest.Content)
}
#endif
void AddRemindRequest::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AddRemindRequest.Content)
}
void AddRemindRequest::set_content(const char* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AddRemindRequest.Content)
}
::std::string* AddRemindRequest::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:micromsg.AddRemindRequest.Content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddRemindRequest::release_content() {
  // @@protoc_insertion_point(field_release:micromsg.AddRemindRequest.Content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddRemindRequest::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AddRemindRequest.Content)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddRemindResponse::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddRemindResponse::AddRemindResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmremind_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.AddRemindResponse)
}
AddRemindResponse::AddRemindResponse(const AddRemindResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.AddRemindResponse)
}

void AddRemindResponse::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

AddRemindResponse::~AddRemindResponse() {
  // @@protoc_insertion_point(destructor:micromsg.AddRemindResponse)
  SharedDtor();
}

void AddRemindResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void AddRemindResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddRemindResponse::descriptor() {
  protobuf_mmremind_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmremind_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddRemindResponse& AddRemindResponse::default_instance() {
  protobuf_mmremind_2eproto::InitDefaults();
  return *internal_default_instance();
}

AddRemindResponse* AddRemindResponse::New(::google::protobuf::Arena* arena) const {
  AddRemindResponse* n = new AddRemindResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddRemindResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.AddRemindResponse)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AddRemindResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.AddRemindResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.AddRemindResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.AddRemindResponse)
  return false;
#undef DO_
}

void AddRemindResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.AddRemindResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.AddRemindResponse)
}

::google::protobuf::uint8* AddRemindResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.AddRemindResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.AddRemindResponse)
  return target;
}

size_t AddRemindResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.AddRemindResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddRemindResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.AddRemindResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddRemindResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddRemindResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.AddRemindResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.AddRemindResponse)
    MergeFrom(*source);
  }
}

void AddRemindResponse::MergeFrom(const AddRemindResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.AddRemindResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void AddRemindResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.AddRemindResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddRemindResponse::CopyFrom(const AddRemindResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.AddRemindResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRemindResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void AddRemindResponse::Swap(AddRemindResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddRemindResponse::InternalSwap(AddRemindResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddRemindResponse::GetMetadata() const {
  protobuf_mmremind_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmremind_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddRemindResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool AddRemindResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AddRemindResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void AddRemindResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void AddRemindResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& AddRemindResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.AddRemindResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* AddRemindResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AddRemindResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* AddRemindResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.AddRemindResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void AddRemindResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AddRemindResponse.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelRemindRequest::kBaseRequestFieldNumber;
const int DelRemindRequest::kRemindIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelRemindRequest::DelRemindRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmremind_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.DelRemindRequest)
}
DelRemindRequest::DelRemindRequest(const DelRemindRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  remindid_ = from.remindid_;
  // @@protoc_insertion_point(copy_constructor:micromsg.DelRemindRequest)
}

void DelRemindRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&remindid_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(remindid_));
}

DelRemindRequest::~DelRemindRequest() {
  // @@protoc_insertion_point(destructor:micromsg.DelRemindRequest)
  SharedDtor();
}

void DelRemindRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void DelRemindRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelRemindRequest::descriptor() {
  protobuf_mmremind_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmremind_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DelRemindRequest& DelRemindRequest::default_instance() {
  protobuf_mmremind_2eproto::InitDefaults();
  return *internal_default_instance();
}

DelRemindRequest* DelRemindRequest::New(::google::protobuf::Arena* arena) const {
  DelRemindRequest* n = new DelRemindRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DelRemindRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.DelRemindRequest)
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  remindid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DelRemindRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.DelRemindRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 RemindID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_remindid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remindid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.DelRemindRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.DelRemindRequest)
  return false;
#undef DO_
}

void DelRemindRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.DelRemindRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 RemindID = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->remindid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.DelRemindRequest)
}

::google::protobuf::uint8* DelRemindRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.DelRemindRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 RemindID = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->remindid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.DelRemindRequest)
  return target;
}

size_t DelRemindRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.DelRemindRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_remindid()) {
    // required uint32 RemindID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->remindid());
  }

  return total_size;
}
size_t DelRemindRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.DelRemindRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 RemindID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->remindid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelRemindRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.DelRemindRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DelRemindRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DelRemindRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.DelRemindRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.DelRemindRequest)
    MergeFrom(*source);
  }
}

void DelRemindRequest::MergeFrom(const DelRemindRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.DelRemindRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      remindid_ = from.remindid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DelRemindRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.DelRemindRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelRemindRequest::CopyFrom(const DelRemindRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.DelRemindRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelRemindRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void DelRemindRequest::Swap(DelRemindRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelRemindRequest::InternalSwap(DelRemindRequest* other) {
  std::swap(baserequest_, other->baserequest_);
  std::swap(remindid_, other->remindid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DelRemindRequest::GetMetadata() const {
  protobuf_mmremind_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmremind_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DelRemindRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool DelRemindRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DelRemindRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void DelRemindRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void DelRemindRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& DelRemindRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.DelRemindRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* DelRemindRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DelRemindRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* DelRemindRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.DelRemindRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void DelRemindRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DelRemindRequest.BaseRequest)
}

// required uint32 RemindID = 2;
bool DelRemindRequest::has_remindid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DelRemindRequest::set_has_remindid() {
  _has_bits_[0] |= 0x00000002u;
}
void DelRemindRequest::clear_has_remindid() {
  _has_bits_[0] &= ~0x00000002u;
}
void DelRemindRequest::clear_remindid() {
  remindid_ = 0u;
  clear_has_remindid();
}
::google::protobuf::uint32 DelRemindRequest::remindid() const {
  // @@protoc_insertion_point(field_get:micromsg.DelRemindRequest.RemindID)
  return remindid_;
}
void DelRemindRequest::set_remindid(::google::protobuf::uint32 value) {
  set_has_remindid();
  remindid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DelRemindRequest.RemindID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelRemindResponse::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelRemindResponse::DelRemindResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmremind_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.DelRemindResponse)
}
DelRemindResponse::DelRemindResponse(const DelRemindResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.DelRemindResponse)
}

void DelRemindResponse::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

DelRemindResponse::~DelRemindResponse() {
  // @@protoc_insertion_point(destructor:micromsg.DelRemindResponse)
  SharedDtor();
}

void DelRemindResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void DelRemindResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelRemindResponse::descriptor() {
  protobuf_mmremind_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmremind_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DelRemindResponse& DelRemindResponse::default_instance() {
  protobuf_mmremind_2eproto::InitDefaults();
  return *internal_default_instance();
}

DelRemindResponse* DelRemindResponse::New(::google::protobuf::Arena* arena) const {
  DelRemindResponse* n = new DelRemindResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DelRemindResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.DelRemindResponse)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DelRemindResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.DelRemindResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.DelRemindResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.DelRemindResponse)
  return false;
#undef DO_
}

void DelRemindResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.DelRemindResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.DelRemindResponse)
}

::google::protobuf::uint8* DelRemindResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.DelRemindResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.DelRemindResponse)
  return target;
}

size_t DelRemindResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.DelRemindResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelRemindResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.DelRemindResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DelRemindResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DelRemindResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.DelRemindResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.DelRemindResponse)
    MergeFrom(*source);
  }
}

void DelRemindResponse::MergeFrom(const DelRemindResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.DelRemindResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void DelRemindResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.DelRemindResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelRemindResponse::CopyFrom(const DelRemindResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.DelRemindResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelRemindResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void DelRemindResponse::Swap(DelRemindResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelRemindResponse::InternalSwap(DelRemindResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DelRemindResponse::GetMetadata() const {
  protobuf_mmremind_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmremind_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DelRemindResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool DelRemindResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DelRemindResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void DelRemindResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void DelRemindResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& DelRemindResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.DelRemindResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* DelRemindResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DelRemindResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* DelRemindResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.DelRemindResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void DelRemindResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DelRemindResponse.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace micromsg

// @@protoc_insertion_point(global_scope)
