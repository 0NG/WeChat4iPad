// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmsns.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mmsns.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace micromsg {
class TwitterInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TwitterInfo> {
} _TwitterInfo_default_instance_;
class SnsBufferUrlDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnsBufferUrl> {
} _SnsBufferUrl_default_instance_;
class SnsUploadRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnsUploadRequest> {
} _SnsUploadRequest_default_instance_;
class SnsUploadResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnsUploadResponse> {
} _SnsUploadResponse_default_instance_;
class SnsDownloadRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnsDownloadRequest> {
} _SnsDownloadRequest_default_instance_;
class SnsDownloadResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnsDownloadResponse> {
} _SnsDownloadResponse_default_instance_;
class SnsCommentInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnsCommentInfo> {
} _SnsCommentInfo_default_instance_;
class SnsGroupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnsGroup> {
} _SnsGroup_default_instance_;
class SnsObjectDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnsObject> {
} _SnsObject_default_instance_;
class SnsADObjectDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnsADObject> {
} _SnsADObject_default_instance_;
class AdvertiseObjectDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AdvertiseObject> {
} _AdvertiseObject_default_instance_;
class SnsPostCtocUploadInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnsPostCtocUploadInfo> {
} _SnsPostCtocUploadInfo_default_instance_;
class SnsPostRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnsPostRequest> {
} _SnsPostRequest_default_instance_;
class SnsPostResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnsPostResponse> {
} _SnsPostResponse_default_instance_;
class SnsObjectDetailRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnsObjectDetailRequest> {
} _SnsObjectDetailRequest_default_instance_;
class SnsObjectDetailResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnsObjectDetailResponse> {
} _SnsObjectDetailResponse_default_instance_;
class SnsADObjectDetailRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnsADObjectDetailRequest> {
} _SnsADObjectDetailRequest_default_instance_;
class SnsADObjectDetailResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnsADObjectDetailResponse> {
} _SnsADObjectDetailResponse_default_instance_;
class SnsServerConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnsServerConfig> {
} _SnsServerConfig_default_instance_;
class SnsTimeLineRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnsTimeLineRequest> {
} _SnsTimeLineRequest_default_instance_;
class SnsTimeLineResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnsTimeLineResponse> {
} _SnsTimeLineResponse_default_instance_;
class SnsTimeLineWithTypeRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnsTimeLineWithTypeRequest> {
} _SnsTimeLineWithTypeRequest_default_instance_;
class SnsTimeLineWithTypeResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnsTimeLineWithTypeResponse> {
} _SnsTimeLineWithTypeResponse_default_instance_;
class SnsUserPageRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnsUserPageRequest> {
} _SnsUserPageRequest_default_instance_;
class SnsUserPageResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnsUserPageResponse> {
} _SnsUserPageResponse_default_instance_;
class SnsActionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnsAction> {
} _SnsAction_default_instance_;
class SnsActionGroupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnsActionGroup> {
} _SnsActionGroup_default_instance_;
class SnsCommentRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnsCommentRequest> {
} _SnsCommentRequest_default_instance_;
class SnsCommentResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnsCommentResponse> {
} _SnsCommentResponse_default_instance_;
class SnsADCommentRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnsADCommentRequest> {
} _SnsADCommentRequest_default_instance_;
class SnsADCommentResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnsADCommentResponse> {
} _SnsADCommentResponse_default_instance_;
class SnsSyncRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnsSyncRequest> {
} _SnsSyncRequest_default_instance_;
class SnsSyncResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnsSyncResponse> {
} _SnsSyncResponse_default_instance_;
class SnsObjectOpDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnsObjectOp> {
} _SnsObjectOp_default_instance_;
class SnsObjectOpDeleteCommentDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnsObjectOpDeleteComment> {
} _SnsObjectOpDeleteComment_default_instance_;
class SnsADObjectOpDeleteCommentDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnsADObjectOpDeleteComment> {
} _SnsADObjectOpDeleteComment_default_instance_;
class SnsObjectOpRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnsObjectOpRequest> {
} _SnsObjectOpRequest_default_instance_;
class SnsObjectOpResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnsObjectOpResponse> {
} _SnsObjectOpResponse_default_instance_;
class SnsLbsRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnsLbsRequest> {
} _SnsLbsRequest_default_instance_;
class SnsLbsContactInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnsLbsContactInfo> {
} _SnsLbsContactInfo_default_instance_;
class SnsLbsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnsLbsResponse> {
} _SnsLbsResponse_default_instance_;
class SnsGetCityRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnsGetCityRequest> {
} _SnsGetCityRequest_default_instance_;
class SnsGetCityResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnsGetCityResponse> {
} _SnsGetCityResponse_default_instance_;
class SnsClassifyTimeLineRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnsClassifyTimeLineRequest> {
} _SnsClassifyTimeLineRequest_default_instance_;
class SnsClassifyTimeLineResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnsClassifyTimeLineResponse> {
} _SnsClassifyTimeLineResponse_default_instance_;
class Whatsnew61DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Whatsnew61> {
} _Whatsnew61_default_instance_;
class SnsWhatsnewRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnsWhatsnewRequest> {
} _SnsWhatsnewRequest_default_instance_;
class SnsWhatsnewResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnsWhatsnewResponse> {
} _SnsWhatsnewResponse_default_instance_;

namespace protobuf_mmsns_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[48];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TwitterInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TwitterInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TwitterInfo, oauth_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TwitterInfo, oauth_token_secret_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsBufferUrl, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsBufferUrl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsBufferUrl, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsBufferUrl, type_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUploadRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUploadRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUploadRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUploadRequest, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUploadRequest, startpos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUploadRequest, totallen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUploadRequest, buffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUploadRequest, clientid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUploadRequest, filterstype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUploadRequest, syncflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUploadRequest, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUploadRequest, photofrom_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUploadRequest, nettype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUploadRequest, twitterinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUploadRequest, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUploadRequest, extflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUploadRequest, md5_),
  4,
  7,
  8,
  9,
  5,
  0,
  10,
  11,
  1,
  12,
  13,
  6,
  2,
  14,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUploadResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUploadResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUploadResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUploadResponse, startpos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUploadResponse, totallen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUploadResponse, clientid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUploadResponse, bufferurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUploadResponse, thumburlcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUploadResponse, thumburls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUploadResponse, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUploadResponse, type_),
  1,
  3,
  4,
  0,
  2,
  5,
  ~0u,
  7,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsDownloadRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsDownloadRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsDownloadRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsDownloadRequest, startpos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsDownloadRequest, totallen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsDownloadRequest, bufferid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsDownloadRequest, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsDownloadRequest, downbuflen_),
  1,
  2,
  3,
  0,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsDownloadResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsDownloadResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsDownloadResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsDownloadResponse, startpos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsDownloadResponse, totallen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsDownloadResponse, buffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsDownloadResponse, bufferid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsDownloadResponse, type_),
  1,
  3,
  4,
  2,
  0,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsCommentInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsCommentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsCommentInfo, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsCommentInfo, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsCommentInfo, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsCommentInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsCommentInfo, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsCommentInfo, createtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsCommentInfo, commentid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsCommentInfo, replycommentid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsCommentInfo, replyusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsCommentInfo, isnotrichtext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsCommentInfo, replycommentid2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsCommentInfo, commentid2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsCommentInfo, deleteflag_),
  0,
  1,
  4,
  5,
  2,
  6,
  7,
  8,
  3,
  9,
  10,
  11,
  12,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsGroup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsGroup, groupid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObject, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObject, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObject, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObject, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObject, createtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObject, objectdesc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObject, likeflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObject, likecount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObject, likeuserlistcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObject, likeuserlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObject, commentcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObject, commentuserlistcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObject, commentuserlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObject, withusercount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObject, withuserlistcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObject, withuserlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObject, extflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObject, nochange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObject, groupcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObject, grouplist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObject, isnotrichtext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObject, referusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObject, referid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObject, blacklistcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObject, blacklist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObject, deleteflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObject, groupusercount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObject, groupuser_),
  4,
  0,
  1,
  5,
  3,
  6,
  7,
  8,
  ~0u,
  9,
  10,
  ~0u,
  11,
  12,
  ~0u,
  13,
  14,
  15,
  ~0u,
  16,
  2,
  17,
  18,
  ~0u,
  19,
  20,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsADObject, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsADObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsADObject, snsobject_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsADObject, adxml_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvertiseObject, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvertiseObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvertiseObject, snsadobject_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvertiseObject, adinfo_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsPostCtocUploadInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsPostCtocUploadInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsPostCtocUploadInfo, flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsPostCtocUploadInfo, photocount_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsPostRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsPostRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsPostRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsPostRequest, objectdesc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsPostRequest, withuserlistcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsPostRequest, withuserlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsPostRequest, privacy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsPostRequest, syncflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsPostRequest, clientid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsPostRequest, postbgimgtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsPostRequest, groupcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsPostRequest, groupids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsPostRequest, objectsource_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsPostRequest, referid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsPostRequest, blacklistcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsPostRequest, blacklist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsPostRequest, twitterinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsPostRequest, groupusercount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsPostRequest, groupuser_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsPostRequest, ctocuploadinfo_),
  1,
  2,
  5,
  ~0u,
  6,
  7,
  0,
  8,
  9,
  ~0u,
  10,
  11,
  12,
  ~0u,
  3,
  13,
  ~0u,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsPostResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsPostResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsPostResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsPostResponse, snsobject_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObjectDetailRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObjectDetailRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObjectDetailRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObjectDetailRequest, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObjectDetailRequest, groupdetail_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObjectDetailResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObjectDetailResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObjectDetailResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObjectDetailResponse, object_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsADObjectDetailRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsADObjectDetailRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsADObjectDetailRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsADObjectDetailRequest, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsADObjectDetailRequest, scene_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsADObjectDetailRequest, session_),
  0,
  2,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsADObjectDetailResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsADObjectDetailResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsADObjectDetailResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsADObjectDetailResponse, object_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsADObjectDetailResponse, session_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsServerConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsServerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsServerConfig, postmentionlimit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsServerConfig, copyandpastewordlimit_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsTimeLineRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsTimeLineRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsTimeLineRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsTimeLineRequest, firstpagemd5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsTimeLineRequest, maxid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsTimeLineRequest, minfilterid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsTimeLineRequest, lastrequesttime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsTimeLineRequest, clientlatestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsTimeLineRequest, session_),
  1,
  0,
  3,
  4,
  6,
  5,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsTimeLineResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsTimeLineResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsTimeLineResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsTimeLineResponse, firstpagemd5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsTimeLineResponse, objectcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsTimeLineResponse, objectlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsTimeLineResponse, newrequesttime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsTimeLineResponse, objectcountforsamemd5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsTimeLineResponse, controlflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsTimeLineResponse, serverconfig_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsTimeLineResponse, advertisecount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsTimeLineResponse, advertiselist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsTimeLineResponse, session_),
  1,
  0,
  4,
  ~0u,
  5,
  6,
  7,
  2,
  8,
  ~0u,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsTimeLineWithTypeRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsTimeLineWithTypeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsTimeLineWithTypeRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsTimeLineWithTypeRequest, selecttype_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsTimeLineWithTypeResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsTimeLineWithTypeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsTimeLineWithTypeResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsTimeLineWithTypeResponse, objectcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsTimeLineWithTypeResponse, objectlist_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUserPageRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUserPageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUserPageRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUserPageRequest, firstpagemd5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUserPageRequest, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUserPageRequest, maxid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUserPageRequest, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUserPageRequest, minfilterid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUserPageRequest, lastrequesttime_),
  2,
  0,
  1,
  3,
  5,
  4,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUserPageResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUserPageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUserPageResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUserPageResponse, firstpagemd5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUserPageResponse, objectcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUserPageResponse, objectlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUserPageResponse, objecttotalcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUserPageResponse, snsuserinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUserPageResponse, newrequesttime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUserPageResponse, objectcountforsamemd5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUserPageResponse, serverconfig_),
  1,
  0,
  4,
  ~0u,
  5,
  2,
  6,
  7,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsAction, fromusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsAction, tousername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsAction, fromnickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsAction, tonickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsAction, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsAction, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsAction, createtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsAction, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsAction, replycommentid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsAction, commentid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsAction, isnotrichtext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsAction, replycommentid2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsAction, commentid2_),
  0,
  1,
  2,
  3,
  5,
  6,
  7,
  4,
  8,
  9,
  10,
  11,
  12,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsActionGroup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsActionGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsActionGroup, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsActionGroup, parentid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsActionGroup, currentaction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsActionGroup, referaction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsActionGroup, clientid_),
  3,
  4,
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsCommentRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsCommentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsCommentRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsCommentRequest, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsCommentRequest, clientid_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsCommentResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsCommentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsCommentResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsCommentResponse, snsobject_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsADCommentRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsADCommentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsADCommentRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsADCommentRequest, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsADCommentRequest, clientid_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsADCommentResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsADCommentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsADCommentResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsADCommentResponse, snsadobject_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsSyncRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsSyncRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsSyncRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsSyncRequest, selector_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsSyncRequest, keybuf_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsSyncResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsSyncResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsSyncResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsSyncResponse, cmdlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsSyncResponse, continueflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsSyncResponse, keybuf_),
  0,
  1,
  3,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObjectOp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObjectOp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObjectOp, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObjectOp, optype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObjectOp, ext_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObjectOpDeleteComment, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObjectOpDeleteComment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObjectOpDeleteComment, commentid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsADObjectOpDeleteComment, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsADObjectOpDeleteComment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsADObjectOpDeleteComment, commentid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObjectOpRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObjectOpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObjectOpRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObjectOpRequest, opcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObjectOpRequest, oplist_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObjectOpResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObjectOpResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObjectOpResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObjectOpResponse, opcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsObjectOpResponse, opretlist_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsLbsRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsLbsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsLbsRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsLbsRequest, opcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsLbsRequest, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsLbsRequest, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsLbsRequest, precision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsLbsRequest, macaddr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsLbsRequest, cellid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsLbsRequest, gpssource_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsLbsRequest, sbtime_),
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsLbsContactInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsLbsContactInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsLbsContactInfo, username_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsLbsResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsLbsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsLbsResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsLbsResponse, contactcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsLbsResponse, contactlist_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsGetCityRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsGetCityRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsGetCityRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsGetCityRequest, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsGetCityRequest, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsGetCityRequest, precision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsGetCityRequest, macaddr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsGetCityRequest, cellid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsGetCityRequest, gpssource_),
  2,
  3,
  4,
  5,
  0,
  1,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsGetCityResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsGetCityResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsGetCityResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsGetCityResponse, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsGetCityResponse, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsGetCityResponse, country_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsGetCityResponse, city_),
  2,
  3,
  4,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsClassifyTimeLineRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsClassifyTimeLineRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsClassifyTimeLineRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsClassifyTimeLineRequest, firstpagemd5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsClassifyTimeLineRequest, maxid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsClassifyTimeLineRequest, classifyid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsClassifyTimeLineRequest, classifytype_),
  2,
  0,
  3,
  1,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsClassifyTimeLineResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsClassifyTimeLineResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsClassifyTimeLineResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsClassifyTimeLineResponse, firstpagemd5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsClassifyTimeLineResponse, objectcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsClassifyTimeLineResponse, objectlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsClassifyTimeLineResponse, objectcountforsamemd5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsClassifyTimeLineResponse, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsClassifyTimeLineResponse, controlflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsClassifyTimeLineResponse, serverconfig_),
  2,
  0,
  4,
  ~0u,
  5,
  1,
  6,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Whatsnew61, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Whatsnew61, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Whatsnew61, like_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Whatsnew61, liked_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsWhatsnewRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsWhatsnewRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsWhatsnewRequest, baserequest_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsWhatsnewResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsWhatsnewResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsWhatsnewResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsWhatsnewResponse, whatsnew61_),
  0,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(TwitterInfo)},
  { 9, 16, sizeof(SnsBufferUrl)},
  { 18, 38, sizeof(SnsUploadRequest)},
  { 53, 67, sizeof(SnsUploadResponse)},
  { 76, 87, sizeof(SnsDownloadRequest)},
  { 93, 104, sizeof(SnsDownloadResponse)},
  { 110, 128, sizeof(SnsCommentInfo)},
  { 141, 147, sizeof(SnsGroup)},
  { 148, 180, sizeof(SnsObject)},
  { 207, 214, sizeof(SnsADObject)},
  { 216, 223, sizeof(AdvertiseObject)},
  { 225, 232, sizeof(SnsPostCtocUploadInfo)},
  { 234, 257, sizeof(SnsPostRequest)},
  { 275, 282, sizeof(SnsPostResponse)},
  { 284, 292, sizeof(SnsObjectDetailRequest)},
  { 295, 302, sizeof(SnsObjectDetailResponse)},
  { 304, 313, sizeof(SnsADObjectDetailRequest)},
  { 317, 325, sizeof(SnsADObjectDetailResponse)},
  { 328, 335, sizeof(SnsServerConfig)},
  { 337, 349, sizeof(SnsTimeLineRequest)},
  { 356, 372, sizeof(SnsTimeLineResponse)},
  { 383, 390, sizeof(SnsTimeLineWithTypeRequest)},
  { 392, 400, sizeof(SnsTimeLineWithTypeResponse)},
  { 403, 415, sizeof(SnsUserPageRequest)},
  { 422, 436, sizeof(SnsUserPageResponse)},
  { 445, 463, sizeof(SnsAction)},
  { 476, 486, sizeof(SnsActionGroup)},
  { 491, 499, sizeof(SnsCommentRequest)},
  { 502, 509, sizeof(SnsCommentResponse)},
  { 511, 519, sizeof(SnsADCommentRequest)},
  { 522, 529, sizeof(SnsADCommentResponse)},
  { 531, 539, sizeof(SnsSyncRequest)},
  { 542, 551, sizeof(SnsSyncResponse)},
  { 555, 563, sizeof(SnsObjectOp)},
  { 566, 572, sizeof(SnsObjectOpDeleteComment)},
  { 573, 579, sizeof(SnsADObjectOpDeleteComment)},
  { 580, 588, sizeof(SnsObjectOpRequest)},
  { 591, 599, sizeof(SnsObjectOpResponse)},
  { 602, 616, sizeof(SnsLbsRequest)},
  { 625, 631, sizeof(SnsLbsContactInfo)},
  { 632, 640, sizeof(SnsLbsResponse)},
  { 643, 655, sizeof(SnsGetCityRequest)},
  { 662, 672, sizeof(SnsGetCityResponse)},
  { 677, 687, sizeof(SnsClassifyTimeLineRequest)},
  { 692, 705, sizeof(SnsClassifyTimeLineResponse)},
  { 713, 720, sizeof(Whatsnew61)},
  { 722, 728, sizeof(SnsWhatsnewRequest)},
  { 729, 736, sizeof(SnsWhatsnewResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TwitterInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnsBufferUrl_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnsUploadRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnsUploadResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnsDownloadRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnsDownloadResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnsCommentInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnsGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnsObject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnsADObject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AdvertiseObject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnsPostCtocUploadInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnsPostRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnsPostResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnsObjectDetailRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnsObjectDetailResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnsADObjectDetailRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnsADObjectDetailResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnsServerConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnsTimeLineRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnsTimeLineResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnsTimeLineWithTypeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnsTimeLineWithTypeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnsUserPageRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnsUserPageResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnsAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnsActionGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnsCommentRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnsCommentResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnsADCommentRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnsADCommentResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnsSyncRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnsSyncResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnsObjectOp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnsObjectOpDeleteComment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnsADObjectOpDeleteComment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnsObjectOpRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnsObjectOpResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnsLbsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnsLbsContactInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnsLbsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnsGetCityRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnsGetCityResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnsClassifyTimeLineRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnsClassifyTimeLineResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Whatsnew61_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnsWhatsnewRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnsWhatsnewResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "mmsns.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 48);
}

}  // namespace

void TableStruct::Shutdown() {
  _TwitterInfo_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _SnsBufferUrl_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _SnsUploadRequest_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _SnsUploadResponse_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _SnsDownloadRequest_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _SnsDownloadResponse_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _SnsCommentInfo_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _SnsGroup_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _SnsObject_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _SnsADObject_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _AdvertiseObject_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _SnsPostCtocUploadInfo_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _SnsPostRequest_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _SnsPostResponse_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _SnsObjectDetailRequest_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _SnsObjectDetailResponse_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _SnsADObjectDetailRequest_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _SnsADObjectDetailResponse_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _SnsServerConfig_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _SnsTimeLineRequest_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _SnsTimeLineResponse_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _SnsTimeLineWithTypeRequest_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _SnsTimeLineWithTypeResponse_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _SnsUserPageRequest_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _SnsUserPageResponse_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _SnsAction_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _SnsActionGroup_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _SnsCommentRequest_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _SnsCommentResponse_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _SnsADCommentRequest_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _SnsADCommentResponse_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _SnsSyncRequest_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _SnsSyncResponse_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _SnsObjectOp_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _SnsObjectOpDeleteComment_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
  _SnsADObjectOpDeleteComment_default_instance_.Shutdown();
  delete file_level_metadata[35].reflection;
  _SnsObjectOpRequest_default_instance_.Shutdown();
  delete file_level_metadata[36].reflection;
  _SnsObjectOpResponse_default_instance_.Shutdown();
  delete file_level_metadata[37].reflection;
  _SnsLbsRequest_default_instance_.Shutdown();
  delete file_level_metadata[38].reflection;
  _SnsLbsContactInfo_default_instance_.Shutdown();
  delete file_level_metadata[39].reflection;
  _SnsLbsResponse_default_instance_.Shutdown();
  delete file_level_metadata[40].reflection;
  _SnsGetCityRequest_default_instance_.Shutdown();
  delete file_level_metadata[41].reflection;
  _SnsGetCityResponse_default_instance_.Shutdown();
  delete file_level_metadata[42].reflection;
  _SnsClassifyTimeLineRequest_default_instance_.Shutdown();
  delete file_level_metadata[43].reflection;
  _SnsClassifyTimeLineResponse_default_instance_.Shutdown();
  delete file_level_metadata[44].reflection;
  _Whatsnew61_default_instance_.Shutdown();
  delete file_level_metadata[45].reflection;
  _SnsWhatsnewRequest_default_instance_.Shutdown();
  delete file_level_metadata[46].reflection;
  _SnsWhatsnewResponse_default_instance_.Shutdown();
  delete file_level_metadata[47].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::micromsg::protobuf_mmbuiltintype_2eproto::InitDefaults();
  ::micromsg::protobuf_mmbase_2eproto::InitDefaults();
  _TwitterInfo_default_instance_.DefaultConstruct();
  _SnsBufferUrl_default_instance_.DefaultConstruct();
  _SnsUploadRequest_default_instance_.DefaultConstruct();
  _SnsUploadResponse_default_instance_.DefaultConstruct();
  _SnsDownloadRequest_default_instance_.DefaultConstruct();
  _SnsDownloadResponse_default_instance_.DefaultConstruct();
  _SnsCommentInfo_default_instance_.DefaultConstruct();
  _SnsGroup_default_instance_.DefaultConstruct();
  _SnsObject_default_instance_.DefaultConstruct();
  _SnsADObject_default_instance_.DefaultConstruct();
  _AdvertiseObject_default_instance_.DefaultConstruct();
  _SnsPostCtocUploadInfo_default_instance_.DefaultConstruct();
  _SnsPostRequest_default_instance_.DefaultConstruct();
  _SnsPostResponse_default_instance_.DefaultConstruct();
  _SnsObjectDetailRequest_default_instance_.DefaultConstruct();
  _SnsObjectDetailResponse_default_instance_.DefaultConstruct();
  _SnsADObjectDetailRequest_default_instance_.DefaultConstruct();
  _SnsADObjectDetailResponse_default_instance_.DefaultConstruct();
  _SnsServerConfig_default_instance_.DefaultConstruct();
  _SnsTimeLineRequest_default_instance_.DefaultConstruct();
  _SnsTimeLineResponse_default_instance_.DefaultConstruct();
  _SnsTimeLineWithTypeRequest_default_instance_.DefaultConstruct();
  _SnsTimeLineWithTypeResponse_default_instance_.DefaultConstruct();
  _SnsUserPageRequest_default_instance_.DefaultConstruct();
  _SnsUserPageResponse_default_instance_.DefaultConstruct();
  _SnsAction_default_instance_.DefaultConstruct();
  _SnsActionGroup_default_instance_.DefaultConstruct();
  _SnsCommentRequest_default_instance_.DefaultConstruct();
  _SnsCommentResponse_default_instance_.DefaultConstruct();
  _SnsADCommentRequest_default_instance_.DefaultConstruct();
  _SnsADCommentResponse_default_instance_.DefaultConstruct();
  _SnsSyncRequest_default_instance_.DefaultConstruct();
  _SnsSyncResponse_default_instance_.DefaultConstruct();
  _SnsObjectOp_default_instance_.DefaultConstruct();
  _SnsObjectOpDeleteComment_default_instance_.DefaultConstruct();
  _SnsADObjectOpDeleteComment_default_instance_.DefaultConstruct();
  _SnsObjectOpRequest_default_instance_.DefaultConstruct();
  _SnsObjectOpResponse_default_instance_.DefaultConstruct();
  _SnsLbsRequest_default_instance_.DefaultConstruct();
  _SnsLbsContactInfo_default_instance_.DefaultConstruct();
  _SnsLbsResponse_default_instance_.DefaultConstruct();
  _SnsGetCityRequest_default_instance_.DefaultConstruct();
  _SnsGetCityResponse_default_instance_.DefaultConstruct();
  _SnsClassifyTimeLineRequest_default_instance_.DefaultConstruct();
  _SnsClassifyTimeLineResponse_default_instance_.DefaultConstruct();
  _Whatsnew61_default_instance_.DefaultConstruct();
  _SnsWhatsnewRequest_default_instance_.DefaultConstruct();
  _SnsWhatsnewResponse_default_instance_.DefaultConstruct();
  _SnsUploadRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _SnsUploadRequest_default_instance_.get_mutable()->buffer_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _SnsUploadRequest_default_instance_.get_mutable()->twitterinfo_ = const_cast< ::micromsg::TwitterInfo*>(
      ::micromsg::TwitterInfo::internal_default_instance());
  _SnsUploadResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _SnsUploadResponse_default_instance_.get_mutable()->bufferurl_ = const_cast< ::micromsg::SnsBufferUrl*>(
      ::micromsg::SnsBufferUrl::internal_default_instance());
  _SnsDownloadRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _SnsDownloadResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _SnsDownloadResponse_default_instance_.get_mutable()->buffer_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _SnsObject_default_instance_.get_mutable()->objectdesc_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _SnsADObject_default_instance_.get_mutable()->snsobject_ = const_cast< ::micromsg::SnsObject*>(
      ::micromsg::SnsObject::internal_default_instance());
  _SnsADObject_default_instance_.get_mutable()->adxml_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _AdvertiseObject_default_instance_.get_mutable()->snsadobject_ = const_cast< ::micromsg::SnsADObject*>(
      ::micromsg::SnsADObject::internal_default_instance());
  _AdvertiseObject_default_instance_.get_mutable()->adinfo_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _SnsPostRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _SnsPostRequest_default_instance_.get_mutable()->objectdesc_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _SnsPostRequest_default_instance_.get_mutable()->twitterinfo_ = const_cast< ::micromsg::TwitterInfo*>(
      ::micromsg::TwitterInfo::internal_default_instance());
  _SnsPostRequest_default_instance_.get_mutable()->ctocuploadinfo_ = const_cast< ::micromsg::SnsPostCtocUploadInfo*>(
      ::micromsg::SnsPostCtocUploadInfo::internal_default_instance());
  _SnsPostResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _SnsPostResponse_default_instance_.get_mutable()->snsobject_ = const_cast< ::micromsg::SnsObject*>(
      ::micromsg::SnsObject::internal_default_instance());
  _SnsObjectDetailRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _SnsObjectDetailResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _SnsObjectDetailResponse_default_instance_.get_mutable()->object_ = const_cast< ::micromsg::SnsObject*>(
      ::micromsg::SnsObject::internal_default_instance());
  _SnsADObjectDetailRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _SnsADObjectDetailRequest_default_instance_.get_mutable()->session_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _SnsADObjectDetailResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _SnsADObjectDetailResponse_default_instance_.get_mutable()->object_ = const_cast< ::micromsg::SnsADObject*>(
      ::micromsg::SnsADObject::internal_default_instance());
  _SnsADObjectDetailResponse_default_instance_.get_mutable()->session_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _SnsTimeLineRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _SnsTimeLineRequest_default_instance_.get_mutable()->session_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _SnsTimeLineResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _SnsTimeLineResponse_default_instance_.get_mutable()->serverconfig_ = const_cast< ::micromsg::SnsServerConfig*>(
      ::micromsg::SnsServerConfig::internal_default_instance());
  _SnsTimeLineResponse_default_instance_.get_mutable()->session_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _SnsTimeLineWithTypeRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _SnsTimeLineWithTypeResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _SnsUserPageRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _SnsUserPageResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _SnsUserPageResponse_default_instance_.get_mutable()->snsuserinfo_ = const_cast< ::micromsg::SnsUserInfo*>(
      ::micromsg::SnsUserInfo::internal_default_instance());
  _SnsUserPageResponse_default_instance_.get_mutable()->serverconfig_ = const_cast< ::micromsg::SnsServerConfig*>(
      ::micromsg::SnsServerConfig::internal_default_instance());
  _SnsActionGroup_default_instance_.get_mutable()->currentaction_ = const_cast< ::micromsg::SnsAction*>(
      ::micromsg::SnsAction::internal_default_instance());
  _SnsActionGroup_default_instance_.get_mutable()->referaction_ = const_cast< ::micromsg::SnsAction*>(
      ::micromsg::SnsAction::internal_default_instance());
  _SnsCommentRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _SnsCommentRequest_default_instance_.get_mutable()->action_ = const_cast< ::micromsg::SnsActionGroup*>(
      ::micromsg::SnsActionGroup::internal_default_instance());
  _SnsCommentResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _SnsCommentResponse_default_instance_.get_mutable()->snsobject_ = const_cast< ::micromsg::SnsObject*>(
      ::micromsg::SnsObject::internal_default_instance());
  _SnsADCommentRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _SnsADCommentRequest_default_instance_.get_mutable()->action_ = const_cast< ::micromsg::SnsActionGroup*>(
      ::micromsg::SnsActionGroup::internal_default_instance());
  _SnsADCommentResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _SnsADCommentResponse_default_instance_.get_mutable()->snsadobject_ = const_cast< ::micromsg::SnsADObject*>(
      ::micromsg::SnsADObject::internal_default_instance());
  _SnsSyncRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _SnsSyncRequest_default_instance_.get_mutable()->keybuf_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _SnsSyncResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _SnsSyncResponse_default_instance_.get_mutable()->cmdlist_ = const_cast< ::micromsg::CmdList*>(
      ::micromsg::CmdList::internal_default_instance());
  _SnsSyncResponse_default_instance_.get_mutable()->keybuf_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _SnsObjectOp_default_instance_.get_mutable()->ext_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _SnsObjectOpRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _SnsObjectOpResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _SnsLbsRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _SnsLbsResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _SnsGetCityRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _SnsGetCityResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _SnsClassifyTimeLineRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _SnsClassifyTimeLineResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _SnsClassifyTimeLineResponse_default_instance_.get_mutable()->serverconfig_ = const_cast< ::micromsg::SnsServerConfig*>(
      ::micromsg::SnsServerConfig::internal_default_instance());
  _SnsWhatsnewRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _SnsWhatsnewResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _SnsWhatsnewResponse_default_instance_.get_mutable()->whatsnew61_ = const_cast< ::micromsg::Whatsnew61*>(
      ::micromsg::Whatsnew61::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\013mmsns.proto\022\010micromsg\032\023mmbuiltintype.p"
      "roto\032\014mmbase.proto\">\n\013TwitterInfo\022\023\n\013Oau"
      "th_Token\030\001 \001(\t\022\032\n\022Oauth_Token_Secret\030\002 \001"
      "(\t\")\n\014SnsBufferUrl\022\013\n\003Url\030\001 \001(\t\022\014\n\004Type\030"
      "\002 \002(\r\"\350\002\n\020SnsUploadRequest\022*\n\013BaseReques"
      "t\030\001 \002(\0132\025.micromsg.BaseRequest\022\014\n\004Type\030\002"
      " \002(\r\022\020\n\010StartPos\030\003 \002(\r\022\020\n\010TotalLen\030\004 \002(\r"
      "\022+\n\006Buffer\030\005 \002(\0132\033.micromsg.SKBuiltinBuf"
      "fer_t\022\020\n\010ClientId\030\006 \001(\t\022\023\n\013FilterStype\030\007"
      " \001(\r\022\020\n\010SyncFlag\030\010 \001(\r\022\023\n\013Description\030\t "
      "\001(\t\022\021\n\tPhotoFrom\030\n \001(\005\022\017\n\007NetType\030\013 \001(\005\022"
      "*\n\013TwitterInfo\030\014 \001(\0132\025.micromsg.TwitterI"
      "nfo\022\r\n\005AppId\030\r \001(\t\022\017\n\007ExtFlag\030\016 \001(\r\022\013\n\003M"
      "D5\030\017 \001(\t\"\376\001\n\021SnsUploadResponse\022,\n\014BaseRe"
      "sponse\030\001 \002(\0132\026.micromsg.BaseResponse\022\020\n\010"
      "StartPos\030\002 \002(\r\022\020\n\010TotalLen\030\003 \002(\r\022\020\n\010Clie"
      "ntId\030\004 \001(\t\022)\n\tBufferUrl\030\005 \002(\0132\026.micromsg"
      ".SnsBufferUrl\022\025\n\rThumbUrlCount\030\006 \002(\r\022)\n\t"
      "ThumbUrls\030\007 \003(\0132\026.micromsg.SnsBufferUrl\022"
      "\n\n\002Id\030\010 \002(\004\022\014\n\004Type\030\t \002(\r\"\230\001\n\022SnsDownloa"
      "dRequest\022*\n\013BaseRequest\030\001 \002(\0132\025.micromsg"
      ".BaseRequest\022\020\n\010StartPos\030\002 \002(\005\022\020\n\010TotalL"
      "en\030\003 \001(\005\022\020\n\010BufferId\030\004 \001(\t\022\014\n\004Type\030\005 \002(\r"
      "\022\022\n\nDownBufLen\030\006 \002(\r\"\264\001\n\023SnsDownloadResp"
      "onse\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg.Ba"
      "seResponse\022\020\n\010StartPos\030\002 \002(\005\022\020\n\010TotalLen"
      "\030\003 \002(\005\022+\n\006Buffer\030\004 \002(\0132\033.micromsg.SKBuil"
      "tinBuffer_t\022\020\n\010BufferId\030\005 \001(\t\022\014\n\004Type\030\006 "
      "\002(\r\"\221\002\n\016SnsCommentInfo\022\020\n\010Username\030\001 \001(\t"
      "\022\020\n\010Nickname\030\002 \001(\t\022\016\n\006Source\030\003 \002(\r\022\014\n\004Ty"
      "pe\030\004 \002(\r\022\017\n\007Content\030\005 \001(\t\022\022\n\nCreateTime\030"
      "\006 \002(\r\022\021\n\tCommentId\030\007 \001(\005\022\026\n\016ReplyComment"
      "Id\030\010 \001(\005\022\025\n\rReplyUsername\030\t \001(\t\022\025\n\rIsNot"
      "RichText\030\n \001(\r\022\027\n\017ReplyCommentId2\030\013 \001(\004\022"
      "\022\n\nCommentId2\030\014 \001(\004\022\022\n\nDeleteFlag\030\r \001(\r\""
      "\033\n\010SnsGroup\022\017\n\007GroupId\030\001 \002(\004\"\372\005\n\tSnsObje"
      "ct\022\n\n\002Id\030\001 \002(\004\022\020\n\010Username\030\002 \001(\t\022\020\n\010Nick"
      "name\030\003 \001(\t\022\022\n\nCreateTime\030\004 \002(\r\022/\n\nObject"
      "Desc\030\005 \002(\0132\033.micromsg.SKBuiltinBuffer_t\022"
      "\020\n\010LikeFlag\030\006 \002(\r\022\021\n\tLikeCount\030\007 \002(\r\022\031\n\021"
      "LikeUserListCount\030\010 \002(\r\022.\n\014LikeUserList\030"
      "\t \003(\0132\030.micromsg.SnsCommentInfo\022\024\n\014Comme"
      "ntCount\030\n \002(\r\022\034\n\024CommentUserListCount\030\013 "
      "\002(\r\0221\n\017CommentUserList\030\014 \003(\0132\030.micromsg."
      "SnsCommentInfo\022\025\n\rWithUserCount\030\r \002(\r\022\031\n"
      "\021WithUserListCount\030\016 \002(\r\022.\n\014WithUserList"
      "\030\017 \003(\0132\030.micromsg.SnsCommentInfo\022\017\n\007ExtF"
      "lag\030\020 \001(\r\022\020\n\010NoChange\030\021 \001(\r\022\022\n\nGroupCoun"
      "t\030\022 \001(\r\022%\n\tGroupList\030\023 \003(\0132\022.micromsg.Sn"
      "sGroup\022\025\n\rIsNotRichText\030\024 \001(\r\022\025\n\rReferUs"
      "ername\030\025 \001(\t\022\017\n\007ReferId\030\026 \001(\004\022\026\n\016BlackLi"
      "stCount\030\027 \001(\r\022.\n\tBlackList\030\030 \003(\0132\033.micro"
      "msg.SKBuiltinString_t\022\022\n\nDeleteFlag\030\031 \001("
      "\r\022\026\n\016GroupUserCount\030\032 \001(\r\022.\n\tGroupUser\030\033"
      " \003(\0132\033.micromsg.SKBuiltinString_t\"a\n\013Sns"
      "ADObject\022&\n\tSnsObject\030\001 \002(\0132\023.micromsg.S"
      "nsObject\022*\n\005ADXML\030\002 \001(\0132\033.micromsg.SKBui"
      "ltinString_t\"j\n\017AdvertiseObject\022*\n\013SnsAD"
      "Object\030\001 \002(\0132\025.micromsg.SnsADObject\022+\n\006A"
      "DInfo\030\002 \001(\0132\033.micromsg.SKBuiltinString_t"
      "\"9\n\025SnsPostCtocUploadInfo\022\014\n\004Flag\030\001 \002(\r\022"
      "\022\n\nPhotoCount\030\002 \002(\r\"\335\004\n\016SnsPostRequest\022*"
      "\n\013BaseRequest\030\001 \002(\0132\025.micromsg.BaseReque"
      "st\022/\n\nObjectDesc\030\002 \002(\0132\033.micromsg.SKBuil"
      "tinBuffer_t\022\031\n\021WithUserListCount\030\003 \001(\r\0221"
      "\n\014WithUserList\030\004 \003(\0132\033.micromsg.SKBuilti"
      "nString_t\022\017\n\007Privacy\030\005 \001(\r\022\020\n\010SyncFlag\030\006"
      " \001(\r\022\020\n\010ClientId\030\007 \001(\t\022\025\n\rPostBGImgType\030"
      "\010 \001(\r\022\022\n\nGroupCount\030\t \001(\r\022$\n\010GroupIds\030\n "
      "\003(\0132\022.micromsg.SnsGroup\022\024\n\014ObjectSource\030"
      "\013 \001(\r\022\017\n\007ReferId\030\014 \001(\004\022\026\n\016BlackListCount"
      "\030\r \001(\r\022.\n\tBlackList\030\016 \003(\0132\033.micromsg.SKB"
      "uiltinString_t\022*\n\013TwitterInfo\030\017 \001(\0132\025.mi"
      "cromsg.TwitterInfo\022\026\n\016GroupUserCount\030\020 \001"
      "(\r\022.\n\tGroupUser\030\021 \003(\0132\033.micromsg.SKBuilt"
      "inString_t\0227\n\016CtocUploadInfo\030\022 \001(\0132\037.mic"
      "romsg.SnsPostCtocUploadInfo\"g\n\017SnsPostRe"
      "sponse\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg."
      "BaseResponse\022&\n\tSnsObject\030\002 \002(\0132\023.microm"
      "sg.SnsObject\"e\n\026SnsObjectDetailRequest\022*"
      "\n\013BaseRequest\030\001 \002(\0132\025.micromsg.BaseReque"
      "st\022\n\n\002Id\030\002 \002(\004\022\023\n\013GroupDetail\030\003 \001(\r\"l\n\027S"
      "nsObjectDetailResponse\022,\n\014BaseResponse\030\001"
      " \002(\0132\026.micromsg.BaseResponse\022#\n\006Object\030\002"
      " \002(\0132\023.micromsg.SnsObject\"\217\001\n\030SnsADObjec"
      "tDetailRequest\022*\n\013BaseRequest\030\001 \002(\0132\025.mi"
      "cromsg.BaseRequest\022\n\n\002Id\030\002 \002(\004\022\r\n\005Scene\030"
      "\003 \001(\r\022,\n\007Session\030\004 \001(\0132\033.micromsg.SKBuil"
      "tinBuffer_t\"\236\001\n\031SnsADObjectDetailRespons"
      "e\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg.BaseR"
      "esponse\022%\n\006Object\030\002 \002(\0132\025.micromsg.SnsAD"
      "Object\022,\n\007Session\030\003 \001(\0132\033.micromsg.SKBui"
      "ltinBuffer_t\"J\n\017SnsServerConfig\022\030\n\020PostM"
      "entionLimit\030\001 \001(\005\022\035\n\025CopyAndPasteWordLim"
      "it\030\002 \001(\005\"\331\001\n\022SnsTimeLineRequest\022*\n\013BaseR"
      "equest\030\001 \002(\0132\025.micromsg.BaseRequest\022\024\n\014F"
      "irstPageMd5\030\002 \001(\t\022\r\n\005MaxId\030\003 \002(\004\022\023\n\013MinF"
      "ilterId\030\004 \001(\004\022\027\n\017LastRequestTime\030\005 \001(\r\022\026"
      "\n\016ClientLatestId\030\006 \001(\004\022,\n\007Session\030\007 \001(\0132"
      "\033.micromsg.SKBuiltinBuffer_t\"\214\003\n\023SnsTime"
      "LineResponse\022,\n\014BaseResponse\030\001 \002(\0132\026.mic"
      "romsg.BaseResponse\022\024\n\014FirstPageMd5\030\002 \001(\t"
      "\022\023\n\013ObjectCount\030\003 \002(\r\022\'\n\nObjectList\030\004 \003("
      "\0132\023.micromsg.SnsObject\022\026\n\016NewRequestTime"
      "\030\005 \001(\r\022\035\n\025ObjectCountForSameMd5\030\006 \001(\r\022\023\n"
      "\013ControlFlag\030\007 \001(\r\022/\n\014ServerConfig\030\010 \001(\013"
      "2\031.micromsg.SnsServerConfig\022\026\n\016Advertise"
      "Count\030\t \001(\r\0220\n\rAdvertiseList\030\n \003(\0132\031.mic"
      "romsg.AdvertiseObject\022,\n\007Session\030\013 \001(\0132\033"
      ".micromsg.SKBuiltinBuffer_t\"\\\n\032SnsTimeLi"
      "neWithTypeRequest\022*\n\013BaseRequest\030\001 \002(\0132\025"
      ".micromsg.BaseRequest\022\022\n\nSelectType\030\002 \001("
      "\004\"\211\001\n\033SnsTimeLineWithTypeResponse\022,\n\014Bas"
      "eResponse\030\001 \002(\0132\026.micromsg.BaseResponse\022"
      "\023\n\013ObjectCount\030\002 \002(\r\022\'\n\nObjectList\030\003 \003(\013"
      "2\023.micromsg.SnsObject\"\265\001\n\022SnsUserPageReq"
      "uest\022*\n\013BaseRequest\030\001 \002(\0132\025.micromsg.Bas"
      "eRequest\022\024\n\014FirstPageMd5\030\002 \001(\t\022\020\n\010Userna"
      "me\030\003 \001(\t\022\r\n\005MaxId\030\004 \002(\004\022\016\n\006Source\030\005 \001(\r\022"
      "\023\n\013MinFilterId\030\006 \001(\004\022\027\n\017LastRequestTime\030"
      "\007 \001(\r\"\305\002\n\023SnsUserPageResponse\022,\n\014BaseRes"
      "ponse\030\001 \002(\0132\026.micromsg.BaseResponse\022\024\n\014F"
      "irstPageMd5\030\002 \001(\t\022\023\n\013ObjectCount\030\003 \002(\r\022\'"
      "\n\nObjectList\030\004 \003(\0132\023.micromsg.SnsObject\022"
      "\030\n\020ObjectTotalCount\030\005 \002(\r\022*\n\013SnsUserInfo"
      "\030\006 \001(\0132\025.micromsg.SnsUserInfo\022\026\n\016NewRequ"
      "estTime\030\007 \001(\r\022\035\n\025ObjectCountForSameMd5\030\010"
      " \001(\r\022/\n\014ServerConfig\030\t \001(\0132\031.micromsg.Sn"
      "sServerConfig\"\221\002\n\tSnsAction\022\024\n\014FromUsern"
      "ame\030\001 \001(\t\022\022\n\nToUsername\030\002 \001(\t\022\024\n\014FromNic"
      "kname\030\003 \001(\t\022\022\n\nToNickname\030\004 \001(\t\022\014\n\004Type\030"
      "\005 \002(\r\022\016\n\006Source\030\006 \002(\r\022\022\n\nCreateTime\030\007 \001("
      "\r\022\017\n\007Content\030\010 \001(\t\022\026\n\016ReplyCommentId\030\t \001"
      "(\005\022\021\n\tCommentId\030\n \001(\005\022\025\n\rIsNotRichText\030\013"
      " \001(\r\022\027\n\017ReplyCommentId2\030\014 \001(\004\022\022\n\nComment"
      "Id2\030\r \001(\004\"\226\001\n\016SnsActionGroup\022\n\n\002Id\030\001 \002(\004"
      "\022\020\n\010ParentId\030\002 \001(\004\022*\n\rCurrentAction\030\003 \002("
      "\0132\023.micromsg.SnsAction\022(\n\013ReferAction\030\004 "
      "\001(\0132\023.micromsg.SnsAction\022\020\n\010ClientId\030\005 \001"
      "(\t\"{\n\021SnsCommentRequest\022*\n\013BaseRequest\030\001"
      " \002(\0132\025.micromsg.BaseRequest\022(\n\006Action\030\002 "
      "\002(\0132\030.micromsg.SnsActionGroup\022\020\n\010ClientI"
      "d\030\003 \001(\t\"j\n\022SnsCommentResponse\022,\n\014BaseRes"
      "ponse\030\001 \002(\0132\026.micromsg.BaseResponse\022&\n\tS"
      "nsObject\030\002 \002(\0132\023.micromsg.SnsObject\"}\n\023S"
      "nsADCommentRequest\022*\n\013BaseRequest\030\001 \002(\0132"
      "\025.micromsg.BaseRequest\022(\n\006Action\030\002 \002(\0132\030"
      ".micromsg.SnsActionGroup\022\020\n\010ClientId\030\003 \001"
      "(\t\"p\n\024SnsADCommentResponse\022,\n\014BaseRespon"
      "se\030\001 \002(\0132\026.micromsg.BaseResponse\022*\n\013SnsA"
      "DObject\030\002 \002(\0132\025.micromsg.SnsADObject\"{\n\016"
      "SnsSyncRequest\022*\n\013BaseRequest\030\001 \002(\0132\025.mi"
      "cromsg.BaseRequest\022\020\n\010Selector\030\002 \002(\r\022+\n\006"
      "KeyBuf\030\003 \002(\0132\033.micromsg.SKBuiltinBuffer_"
      "t\"\246\001\n\017SnsSyncResponse\022,\n\014BaseResponse\030\001 "
      "\002(\0132\026.micromsg.BaseResponse\022\"\n\007CmdList\030\002"
      " \002(\0132\021.micromsg.CmdList\022\024\n\014ContinueFlag\030"
      "\003 \002(\r\022+\n\006KeyBuf\030\004 \002(\0132\033.micromsg.SKBuilt"
      "inBuffer_t\"S\n\013SnsObjectOp\022\n\n\002Id\030\001 \002(\004\022\016\n"
      "\006OpType\030\002 \002(\r\022(\n\003Ext\030\003 \001(\0132\033.micromsg.SK"
      "BuiltinBuffer_t\"-\n\030SnsObjectOpDeleteComm"
      "ent\022\021\n\tCommentId\030\001 \002(\005\"/\n\032SnsADObjectOpD"
      "eleteComment\022\021\n\tCommentId\030\001 \002(\004\"x\n\022SnsOb"
      "jectOpRequest\022*\n\013BaseRequest\030\001 \002(\0132\025.mic"
      "romsg.BaseRequest\022\017\n\007OpCount\030\002 \002(\r\022%\n\006Op"
      "List\030\003 \003(\0132\025.micromsg.SnsObjectOp\"k\n\023Sns"
      "ObjectOpResponse\022,\n\014BaseResponse\030\001 \002(\0132\026"
      ".micromsg.BaseResponse\022\017\n\007OpCount\030\002 \002(\r\022"
      "\025\n\tOpRetList\030\003 \003(\005B\002\020\001\"\307\001\n\rSnsLbsRequest"
      "\022*\n\013BaseRequest\030\001 \002(\0132\025.micromsg.BaseReq"
      "uest\022\016\n\006OpCode\030\002 \002(\r\022\021\n\tLongitude\030\003 \002(\002\022"
      "\020\n\010Latitude\030\004 \002(\002\022\021\n\tPrecision\030\005 \002(\005\022\017\n\007"
      "MacAddr\030\006 \001(\t\022\016\n\006CellId\030\007 \001(\t\022\021\n\tGPSSour"
      "ce\030\010 \002(\005\022\016\n\006SBTime\030\t \002(\r\"%\n\021SnsLbsContac"
      "tInfo\022\020\n\010UserName\030\001 \001(\t\"\206\001\n\016SnsLbsRespon"
      "se\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg.Base"
      "Response\022\024\n\014ContactCount\030\002 \002(\r\0220\n\013Contac"
      "tList\030\003 \003(\0132\033.micromsg.SnsLbsContactInfo"
      "\"\253\001\n\021SnsGetCityRequest\022*\n\013BaseRequest\030\001 "
      "\002(\0132\025.micromsg.BaseRequest\022\021\n\tLongitude\030"
      "\003 \002(\005\022\020\n\010Latitude\030\004 \002(\005\022\021\n\tPrecision\030\005 \002"
      "(\005\022\017\n\007MacAddr\030\006 \001(\t\022\016\n\006CellId\030\007 \001(\t\022\021\n\tG"
      "PSSource\030\010 \002(\005\"\206\001\n\022SnsGetCityResponse\022,\n"
      "\014BaseResponse\030\001 \002(\0132\026.micromsg.BaseRespo"
      "nse\022\021\n\tLongitude\030\002 \002(\005\022\020\n\010Latitude\030\003 \002(\005"
      "\022\017\n\007Country\030\004 \001(\t\022\014\n\004City\030\005 \001(\t\"\227\001\n\032SnsC"
      "lassifyTimeLineRequest\022*\n\013BaseRequest\030\001 "
      "\002(\0132\025.micromsg.BaseRequest\022\024\n\014FirstPageM"
      "d5\030\002 \001(\t\022\r\n\005MaxId\030\003 \002(\004\022\022\n\nClassifyId\030\004 "
      "\001(\t\022\024\n\014ClassifyType\030\005 \002(\r\"\231\002\n\033SnsClassif"
      "yTimeLineResponse\022,\n\014BaseResponse\030\001 \002(\0132"
      "\026.micromsg.BaseResponse\022\024\n\014FirstPageMd5\030"
      "\002 \001(\t\022\023\n\013ObjectCount\030\003 \002(\r\022\'\n\nObjectList"
      "\030\004 \003(\0132\023.micromsg.SnsObject\022\035\n\025ObjectCou"
      "ntForSameMd5\030\005 \002(\r\022\023\n\013Description\030\006 \001(\t\022"
      "\023\n\013ControlFlag\030\007 \002(\r\022/\n\014ServerConfig\030\010 \002"
      "(\0132\031.micromsg.SnsServerConfig\")\n\nWhatsne"
      "w61\022\014\n\004like\030\001 \001(\r\022\r\n\005liked\030\002 \001(\r\"@\n\022SnsW"
      "hatsnewRequest\022*\n\013BaseRequest\030\001 \002(\0132\025.mi"
      "cromsg.BaseRequest\"m\n\023SnsWhatsnewRespons"
      "e\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg.BaseR"
      "esponse\022(\n\nWhatsnew61\030\002 \001(\0132\024.micromsg.W"
      "hatsnew61"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 8089);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mmsns.proto", &protobuf_RegisterTypes);
  ::micromsg::protobuf_mmbuiltintype_2eproto::AddDescriptors();
  ::micromsg::protobuf_mmbase_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_mmsns_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TwitterInfo::kOauthTokenFieldNumber;
const int TwitterInfo::kOauthTokenSecretFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TwitterInfo::TwitterInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsns_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.TwitterInfo)
}
TwitterInfo::TwitterInfo(const TwitterInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  oauth_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_oauth_token()) {
    oauth_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.oauth_token_);
  }
  oauth_token_secret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_oauth_token_secret()) {
    oauth_token_secret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.oauth_token_secret_);
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.TwitterInfo)
}

void TwitterInfo::SharedCtor() {
  _cached_size_ = 0;
  oauth_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  oauth_token_secret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TwitterInfo::~TwitterInfo() {
  // @@protoc_insertion_point(destructor:micromsg.TwitterInfo)
  SharedDtor();
}

void TwitterInfo::SharedDtor() {
  oauth_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  oauth_token_secret_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TwitterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TwitterInfo::descriptor() {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TwitterInfo& TwitterInfo::default_instance() {
  protobuf_mmsns_2eproto::InitDefaults();
  return *internal_default_instance();
}

TwitterInfo* TwitterInfo::New(::google::protobuf::Arena* arena) const {
  TwitterInfo* n = new TwitterInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TwitterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.TwitterInfo)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_oauth_token()) {
      GOOGLE_DCHECK(!oauth_token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*oauth_token_.UnsafeRawStringPointer())->clear();
    }
    if (has_oauth_token_secret()) {
      GOOGLE_DCHECK(!oauth_token_secret_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*oauth_token_secret_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TwitterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.TwitterInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Oauth_Token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oauth_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->oauth_token().data(), this->oauth_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.TwitterInfo.Oauth_Token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Oauth_Token_Secret = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oauth_token_secret()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->oauth_token_secret().data(), this->oauth_token_secret().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.TwitterInfo.Oauth_Token_Secret");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.TwitterInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.TwitterInfo)
  return false;
#undef DO_
}

void TwitterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.TwitterInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Oauth_Token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oauth_token().data(), this->oauth_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.TwitterInfo.Oauth_Token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->oauth_token(), output);
  }

  // optional string Oauth_Token_Secret = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oauth_token_secret().data(), this->oauth_token_secret().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.TwitterInfo.Oauth_Token_Secret");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->oauth_token_secret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.TwitterInfo)
}

::google::protobuf::uint8* TwitterInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.TwitterInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Oauth_Token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oauth_token().data(), this->oauth_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.TwitterInfo.Oauth_Token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->oauth_token(), target);
  }

  // optional string Oauth_Token_Secret = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oauth_token_secret().data(), this->oauth_token_secret().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.TwitterInfo.Oauth_Token_Secret");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->oauth_token_secret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.TwitterInfo)
  return target;
}

size_t TwitterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.TwitterInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string Oauth_Token = 1;
    if (has_oauth_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oauth_token());
    }

    // optional string Oauth_Token_Secret = 2;
    if (has_oauth_token_secret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oauth_token_secret());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TwitterInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.TwitterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TwitterInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TwitterInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.TwitterInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.TwitterInfo)
    MergeFrom(*source);
  }
}

void TwitterInfo::MergeFrom(const TwitterInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.TwitterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_oauth_token();
      oauth_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.oauth_token_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_oauth_token_secret();
      oauth_token_secret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.oauth_token_secret_);
    }
  }
}

void TwitterInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.TwitterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TwitterInfo::CopyFrom(const TwitterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.TwitterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TwitterInfo::IsInitialized() const {
  return true;
}

void TwitterInfo::Swap(TwitterInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TwitterInfo::InternalSwap(TwitterInfo* other) {
  oauth_token_.Swap(&other->oauth_token_);
  oauth_token_secret_.Swap(&other->oauth_token_secret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TwitterInfo::GetMetadata() const {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TwitterInfo

// optional string Oauth_Token = 1;
bool TwitterInfo::has_oauth_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TwitterInfo::set_has_oauth_token() {
  _has_bits_[0] |= 0x00000001u;
}
void TwitterInfo::clear_has_oauth_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void TwitterInfo::clear_oauth_token() {
  oauth_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_oauth_token();
}
const ::std::string& TwitterInfo::oauth_token() const {
  // @@protoc_insertion_point(field_get:micromsg.TwitterInfo.Oauth_Token)
  return oauth_token_.GetNoArena();
}
void TwitterInfo::set_oauth_token(const ::std::string& value) {
  set_has_oauth_token();
  oauth_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.TwitterInfo.Oauth_Token)
}
#if LANG_CXX11
void TwitterInfo::set_oauth_token(::std::string&& value) {
  set_has_oauth_token();
  oauth_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.TwitterInfo.Oauth_Token)
}
#endif
void TwitterInfo::set_oauth_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_oauth_token();
  oauth_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.TwitterInfo.Oauth_Token)
}
void TwitterInfo::set_oauth_token(const char* value, size_t size) {
  set_has_oauth_token();
  oauth_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.TwitterInfo.Oauth_Token)
}
::std::string* TwitterInfo::mutable_oauth_token() {
  set_has_oauth_token();
  // @@protoc_insertion_point(field_mutable:micromsg.TwitterInfo.Oauth_Token)
  return oauth_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TwitterInfo::release_oauth_token() {
  // @@protoc_insertion_point(field_release:micromsg.TwitterInfo.Oauth_Token)
  clear_has_oauth_token();
  return oauth_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TwitterInfo::set_allocated_oauth_token(::std::string* oauth_token) {
  if (oauth_token != NULL) {
    set_has_oauth_token();
  } else {
    clear_has_oauth_token();
  }
  oauth_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), oauth_token);
  // @@protoc_insertion_point(field_set_allocated:micromsg.TwitterInfo.Oauth_Token)
}

// optional string Oauth_Token_Secret = 2;
bool TwitterInfo::has_oauth_token_secret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TwitterInfo::set_has_oauth_token_secret() {
  _has_bits_[0] |= 0x00000002u;
}
void TwitterInfo::clear_has_oauth_token_secret() {
  _has_bits_[0] &= ~0x00000002u;
}
void TwitterInfo::clear_oauth_token_secret() {
  oauth_token_secret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_oauth_token_secret();
}
const ::std::string& TwitterInfo::oauth_token_secret() const {
  // @@protoc_insertion_point(field_get:micromsg.TwitterInfo.Oauth_Token_Secret)
  return oauth_token_secret_.GetNoArena();
}
void TwitterInfo::set_oauth_token_secret(const ::std::string& value) {
  set_has_oauth_token_secret();
  oauth_token_secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.TwitterInfo.Oauth_Token_Secret)
}
#if LANG_CXX11
void TwitterInfo::set_oauth_token_secret(::std::string&& value) {
  set_has_oauth_token_secret();
  oauth_token_secret_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.TwitterInfo.Oauth_Token_Secret)
}
#endif
void TwitterInfo::set_oauth_token_secret(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_oauth_token_secret();
  oauth_token_secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.TwitterInfo.Oauth_Token_Secret)
}
void TwitterInfo::set_oauth_token_secret(const char* value, size_t size) {
  set_has_oauth_token_secret();
  oauth_token_secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.TwitterInfo.Oauth_Token_Secret)
}
::std::string* TwitterInfo::mutable_oauth_token_secret() {
  set_has_oauth_token_secret();
  // @@protoc_insertion_point(field_mutable:micromsg.TwitterInfo.Oauth_Token_Secret)
  return oauth_token_secret_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TwitterInfo::release_oauth_token_secret() {
  // @@protoc_insertion_point(field_release:micromsg.TwitterInfo.Oauth_Token_Secret)
  clear_has_oauth_token_secret();
  return oauth_token_secret_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TwitterInfo::set_allocated_oauth_token_secret(::std::string* oauth_token_secret) {
  if (oauth_token_secret != NULL) {
    set_has_oauth_token_secret();
  } else {
    clear_has_oauth_token_secret();
  }
  oauth_token_secret_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), oauth_token_secret);
  // @@protoc_insertion_point(field_set_allocated:micromsg.TwitterInfo.Oauth_Token_Secret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnsBufferUrl::kUrlFieldNumber;
const int SnsBufferUrl::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnsBufferUrl::SnsBufferUrl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsns_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SnsBufferUrl)
}
SnsBufferUrl::SnsBufferUrl(const SnsBufferUrl& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:micromsg.SnsBufferUrl)
}

void SnsBufferUrl::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
}

SnsBufferUrl::~SnsBufferUrl() {
  // @@protoc_insertion_point(destructor:micromsg.SnsBufferUrl)
  SharedDtor();
}

void SnsBufferUrl::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SnsBufferUrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnsBufferUrl::descriptor() {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnsBufferUrl& SnsBufferUrl::default_instance() {
  protobuf_mmsns_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnsBufferUrl* SnsBufferUrl::New(::google::protobuf::Arena* arena) const {
  SnsBufferUrl* n = new SnsBufferUrl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnsBufferUrl::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SnsBufferUrl)
  if (has_url()) {
    GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*url_.UnsafeRawStringPointer())->clear();
  }
  type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnsBufferUrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SnsBufferUrl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SnsBufferUrl.Url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SnsBufferUrl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SnsBufferUrl)
  return false;
#undef DO_
}

void SnsBufferUrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SnsBufferUrl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsBufferUrl.Url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // required uint32 Type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SnsBufferUrl)
}

::google::protobuf::uint8* SnsBufferUrl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SnsBufferUrl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsBufferUrl.Url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // required uint32 Type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SnsBufferUrl)
  return target;
}

size_t SnsBufferUrl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SnsBufferUrl)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 Type = 2;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }
  // optional string Url = 1;
  if (has_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnsBufferUrl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SnsBufferUrl)
  GOOGLE_DCHECK_NE(&from, this);
  const SnsBufferUrl* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnsBufferUrl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SnsBufferUrl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SnsBufferUrl)
    MergeFrom(*source);
  }
}

void SnsBufferUrl::MergeFrom(const SnsBufferUrl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SnsBufferUrl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SnsBufferUrl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SnsBufferUrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnsBufferUrl::CopyFrom(const SnsBufferUrl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SnsBufferUrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsBufferUrl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void SnsBufferUrl::Swap(SnsBufferUrl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnsBufferUrl::InternalSwap(SnsBufferUrl* other) {
  url_.Swap(&other->url_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnsBufferUrl::GetMetadata() const {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnsBufferUrl

// optional string Url = 1;
bool SnsBufferUrl::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnsBufferUrl::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void SnsBufferUrl::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnsBufferUrl::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& SnsBufferUrl::url() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsBufferUrl.Url)
  return url_.GetNoArena();
}
void SnsBufferUrl::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SnsBufferUrl.Url)
}
#if LANG_CXX11
void SnsBufferUrl::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SnsBufferUrl.Url)
}
#endif
void SnsBufferUrl::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SnsBufferUrl.Url)
}
void SnsBufferUrl::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SnsBufferUrl.Url)
}
::std::string* SnsBufferUrl::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:micromsg.SnsBufferUrl.Url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnsBufferUrl::release_url() {
  // @@protoc_insertion_point(field_release:micromsg.SnsBufferUrl.Url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnsBufferUrl::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsBufferUrl.Url)
}

// required uint32 Type = 2;
bool SnsBufferUrl::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SnsBufferUrl::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void SnsBufferUrl::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void SnsBufferUrl::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 SnsBufferUrl::type() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsBufferUrl.Type)
  return type_;
}
void SnsBufferUrl::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsBufferUrl.Type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnsUploadRequest::kBaseRequestFieldNumber;
const int SnsUploadRequest::kTypeFieldNumber;
const int SnsUploadRequest::kStartPosFieldNumber;
const int SnsUploadRequest::kTotalLenFieldNumber;
const int SnsUploadRequest::kBufferFieldNumber;
const int SnsUploadRequest::kClientIdFieldNumber;
const int SnsUploadRequest::kFilterStypeFieldNumber;
const int SnsUploadRequest::kSyncFlagFieldNumber;
const int SnsUploadRequest::kDescriptionFieldNumber;
const int SnsUploadRequest::kPhotoFromFieldNumber;
const int SnsUploadRequest::kNetTypeFieldNumber;
const int SnsUploadRequest::kTwitterInfoFieldNumber;
const int SnsUploadRequest::kAppIdFieldNumber;
const int SnsUploadRequest::kExtFlagFieldNumber;
const int SnsUploadRequest::kMD5FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnsUploadRequest::SnsUploadRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsns_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SnsUploadRequest)
}
SnsUploadRequest::SnsUploadRequest(const SnsUploadRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientid()) {
    clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  appid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_appid()) {
    appid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appid_);
  }
  md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_md5()) {
    md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_buffer()) {
    buffer_ = new ::micromsg::SKBuiltinBuffer_t(*from.buffer_);
  } else {
    buffer_ = NULL;
  }
  if (from.has_twitterinfo()) {
    twitterinfo_ = new ::micromsg::TwitterInfo(*from.twitterinfo_);
  } else {
    twitterinfo_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&extflag_) -
    reinterpret_cast<char*>(&type_) + sizeof(extflag_));
  // @@protoc_insertion_point(copy_constructor:micromsg.SnsUploadRequest)
}

void SnsUploadRequest::SharedCtor() {
  _cached_size_ = 0;
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&extflag_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(extflag_));
}

SnsUploadRequest::~SnsUploadRequest() {
  // @@protoc_insertion_point(destructor:micromsg.SnsUploadRequest)
  SharedDtor();
}

void SnsUploadRequest::SharedDtor() {
  clientid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  md5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete buffer_;
  }
  if (this != internal_default_instance()) {
    delete twitterinfo_;
  }
}

void SnsUploadRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnsUploadRequest::descriptor() {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnsUploadRequest& SnsUploadRequest::default_instance() {
  protobuf_mmsns_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnsUploadRequest* SnsUploadRequest::New(::google::protobuf::Arena* arena) const {
  SnsUploadRequest* n = new SnsUploadRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnsUploadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SnsUploadRequest)
  if (_has_bits_[0 / 32] & 127u) {
    if (has_clientid()) {
      GOOGLE_DCHECK(!clientid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*clientid_.UnsafeRawStringPointer())->clear();
    }
    if (has_description()) {
      GOOGLE_DCHECK(!description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*description_.UnsafeRawStringPointer())->clear();
    }
    if (has_appid()) {
      GOOGLE_DCHECK(!appid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*appid_.UnsafeRawStringPointer())->clear();
    }
    if (has_md5()) {
      GOOGLE_DCHECK(!md5_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*md5_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_buffer()) {
      GOOGLE_DCHECK(buffer_ != NULL);
      buffer_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_twitterinfo()) {
      GOOGLE_DCHECK(twitterinfo_ != NULL);
      twitterinfo_->::micromsg::TwitterInfo::Clear();
    }
  }
  type_ = 0u;
  if (_has_bits_[8 / 32] & 32512u) {
    ::memset(&startpos_, 0, reinterpret_cast<char*>(&extflag_) -
      reinterpret_cast<char*>(&startpos_) + sizeof(extflag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnsUploadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SnsUploadRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 StartPos = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_startpos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startpos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 TotalLen = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_totallen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totallen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t Buffer = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ClientId = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientid().data(), this->clientid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SnsUploadRequest.ClientId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 FilterStype = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_filterstype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filterstype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 SyncFlag = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_syncflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &syncflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Description = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SnsUploadRequest.Description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 PhotoFrom = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_photofrom();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &photofrom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 NetType = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_nettype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nettype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.TwitterInfo TwitterInfo = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_twitterinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AppId = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->appid().data(), this->appid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SnsUploadRequest.AppId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ExtFlag = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_extflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string MD5 = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->md5().data(), this->md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SnsUploadRequest.MD5");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SnsUploadRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SnsUploadRequest)
  return false;
#undef DO_
}

void SnsUploadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SnsUploadRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 Type = 2;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required uint32 StartPos = 3;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->startpos(), output);
  }

  // required uint32 TotalLen = 4;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->totallen(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t Buffer = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->buffer_, output);
  }

  // optional string ClientId = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsUploadRequest.ClientId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->clientid(), output);
  }

  // optional uint32 FilterStype = 7;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->filterstype(), output);
  }

  // optional uint32 SyncFlag = 8;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->syncflag(), output);
  }

  // optional string Description = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsUploadRequest.Description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->description(), output);
  }

  // optional int32 PhotoFrom = 10;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->photofrom(), output);
  }

  // optional int32 NetType = 11;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->nettype(), output);
  }

  // optional .micromsg.TwitterInfo TwitterInfo = 12;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->twitterinfo_, output);
  }

  // optional string AppId = 13;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsUploadRequest.AppId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->appid(), output);
  }

  // optional uint32 ExtFlag = 14;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->extflag(), output);
  }

  // optional string MD5 = 15;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsUploadRequest.MD5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->md5(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SnsUploadRequest)
}

::google::protobuf::uint8* SnsUploadRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SnsUploadRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 Type = 2;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required uint32 StartPos = 3;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->startpos(), target);
  }

  // required uint32 TotalLen = 4;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->totallen(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t Buffer = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->buffer_, deterministic, target);
  }

  // optional string ClientId = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsUploadRequest.ClientId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->clientid(), target);
  }

  // optional uint32 FilterStype = 7;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->filterstype(), target);
  }

  // optional uint32 SyncFlag = 8;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->syncflag(), target);
  }

  // optional string Description = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsUploadRequest.Description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->description(), target);
  }

  // optional int32 PhotoFrom = 10;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->photofrom(), target);
  }

  // optional int32 NetType = 11;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->nettype(), target);
  }

  // optional .micromsg.TwitterInfo TwitterInfo = 12;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->twitterinfo_, deterministic, target);
  }

  // optional string AppId = 13;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsUploadRequest.AppId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->appid(), target);
  }

  // optional uint32 ExtFlag = 14;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->extflag(), target);
  }

  // optional string MD5 = 15;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsUploadRequest.MD5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->md5(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SnsUploadRequest)
  return target;
}

size_t SnsUploadRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SnsUploadRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_buffer()) {
    // required .micromsg.SKBuiltinBuffer_t Buffer = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->buffer_);
  }

  if (has_type()) {
    // required uint32 Type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_startpos()) {
    // required uint32 StartPos = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startpos());
  }

  if (has_totallen()) {
    // required uint32 TotalLen = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totallen());
  }

  return total_size;
}
size_t SnsUploadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SnsUploadRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000003b0) ^ 0x000003b0) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.SKBuiltinBuffer_t Buffer = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->buffer_);

    // required uint32 Type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required uint32 StartPos = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startpos());

    // required uint32 TotalLen = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totallen());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string ClientId = 6;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientid());
    }

    // optional string Description = 9;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string AppId = 13;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appid());
    }

    // optional string MD5 = 15;
    if (has_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->md5());
    }

  }
  // optional .micromsg.TwitterInfo TwitterInfo = 12;
  if (has_twitterinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->twitterinfo_);
  }

  if (_has_bits_[8 / 32] & 31744u) {
    // optional uint32 FilterStype = 7;
    if (has_filterstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filterstype());
    }

    // optional uint32 SyncFlag = 8;
    if (has_syncflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->syncflag());
    }

    // optional int32 PhotoFrom = 10;
    if (has_photofrom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->photofrom());
    }

    // optional int32 NetType = 11;
    if (has_nettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nettype());
    }

    // optional uint32 ExtFlag = 14;
    if (has_extflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extflag());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnsUploadRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SnsUploadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SnsUploadRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnsUploadRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SnsUploadRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SnsUploadRequest)
    MergeFrom(*source);
  }
}

void SnsUploadRequest::MergeFrom(const SnsUploadRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SnsUploadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_clientid();
      clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_appid();
      appid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appid_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_md5();
      md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5_);
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_buffer()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.buffer());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_twitterinfo()->::micromsg::TwitterInfo::MergeFrom(from.twitterinfo());
    }
    if (cached_has_bits & 0x00000080u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      startpos_ = from.startpos_;
    }
    if (cached_has_bits & 0x00000200u) {
      totallen_ = from.totallen_;
    }
    if (cached_has_bits & 0x00000400u) {
      filterstype_ = from.filterstype_;
    }
    if (cached_has_bits & 0x00000800u) {
      syncflag_ = from.syncflag_;
    }
    if (cached_has_bits & 0x00001000u) {
      photofrom_ = from.photofrom_;
    }
    if (cached_has_bits & 0x00002000u) {
      nettype_ = from.nettype_;
    }
    if (cached_has_bits & 0x00004000u) {
      extflag_ = from.extflag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SnsUploadRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SnsUploadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnsUploadRequest::CopyFrom(const SnsUploadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SnsUploadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsUploadRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003b0) != 0x000003b0) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_buffer()) {
    if (!this->buffer_->IsInitialized()) return false;
  }
  return true;
}

void SnsUploadRequest::Swap(SnsUploadRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnsUploadRequest::InternalSwap(SnsUploadRequest* other) {
  clientid_.Swap(&other->clientid_);
  description_.Swap(&other->description_);
  appid_.Swap(&other->appid_);
  md5_.Swap(&other->md5_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(buffer_, other->buffer_);
  std::swap(twitterinfo_, other->twitterinfo_);
  std::swap(type_, other->type_);
  std::swap(startpos_, other->startpos_);
  std::swap(totallen_, other->totallen_);
  std::swap(filterstype_, other->filterstype_);
  std::swap(syncflag_, other->syncflag_);
  std::swap(photofrom_, other->photofrom_);
  std::swap(nettype_, other->nettype_);
  std::swap(extflag_, other->extflag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnsUploadRequest::GetMetadata() const {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnsUploadRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool SnsUploadRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SnsUploadRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000010u;
}
void SnsUploadRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000010u;
}
void SnsUploadRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& SnsUploadRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsUploadRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* SnsUploadRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsUploadRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* SnsUploadRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.SnsUploadRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void SnsUploadRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsUploadRequest.BaseRequest)
}

// required uint32 Type = 2;
bool SnsUploadRequest::has_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SnsUploadRequest::set_has_type() {
  _has_bits_[0] |= 0x00000080u;
}
void SnsUploadRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void SnsUploadRequest::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 SnsUploadRequest::type() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsUploadRequest.Type)
  return type_;
}
void SnsUploadRequest::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsUploadRequest.Type)
}

// required uint32 StartPos = 3;
bool SnsUploadRequest::has_startpos() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SnsUploadRequest::set_has_startpos() {
  _has_bits_[0] |= 0x00000100u;
}
void SnsUploadRequest::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000100u;
}
void SnsUploadRequest::clear_startpos() {
  startpos_ = 0u;
  clear_has_startpos();
}
::google::protobuf::uint32 SnsUploadRequest::startpos() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsUploadRequest.StartPos)
  return startpos_;
}
void SnsUploadRequest::set_startpos(::google::protobuf::uint32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsUploadRequest.StartPos)
}

// required uint32 TotalLen = 4;
bool SnsUploadRequest::has_totallen() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SnsUploadRequest::set_has_totallen() {
  _has_bits_[0] |= 0x00000200u;
}
void SnsUploadRequest::clear_has_totallen() {
  _has_bits_[0] &= ~0x00000200u;
}
void SnsUploadRequest::clear_totallen() {
  totallen_ = 0u;
  clear_has_totallen();
}
::google::protobuf::uint32 SnsUploadRequest::totallen() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsUploadRequest.TotalLen)
  return totallen_;
}
void SnsUploadRequest::set_totallen(::google::protobuf::uint32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsUploadRequest.TotalLen)
}

// required .micromsg.SKBuiltinBuffer_t Buffer = 5;
bool SnsUploadRequest::has_buffer() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SnsUploadRequest::set_has_buffer() {
  _has_bits_[0] |= 0x00000020u;
}
void SnsUploadRequest::clear_has_buffer() {
  _has_bits_[0] &= ~0x00000020u;
}
void SnsUploadRequest::clear_buffer() {
  if (buffer_ != NULL) buffer_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_buffer();
}
const ::micromsg::SKBuiltinBuffer_t& SnsUploadRequest::buffer() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsUploadRequest.Buffer)
  return buffer_ != NULL ? *buffer_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* SnsUploadRequest::mutable_buffer() {
  set_has_buffer();
  if (buffer_ == NULL) {
    buffer_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsUploadRequest.Buffer)
  return buffer_;
}
::micromsg::SKBuiltinBuffer_t* SnsUploadRequest::release_buffer() {
  // @@protoc_insertion_point(field_release:micromsg.SnsUploadRequest.Buffer)
  clear_has_buffer();
  ::micromsg::SKBuiltinBuffer_t* temp = buffer_;
  buffer_ = NULL;
  return temp;
}
void SnsUploadRequest::set_allocated_buffer(::micromsg::SKBuiltinBuffer_t* buffer) {
  delete buffer_;
  buffer_ = buffer;
  if (buffer) {
    set_has_buffer();
  } else {
    clear_has_buffer();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsUploadRequest.Buffer)
}

// optional string ClientId = 6;
bool SnsUploadRequest::has_clientid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnsUploadRequest::set_has_clientid() {
  _has_bits_[0] |= 0x00000001u;
}
void SnsUploadRequest::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnsUploadRequest::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientid();
}
const ::std::string& SnsUploadRequest::clientid() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsUploadRequest.ClientId)
  return clientid_.GetNoArena();
}
void SnsUploadRequest::set_clientid(const ::std::string& value) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SnsUploadRequest.ClientId)
}
#if LANG_CXX11
void SnsUploadRequest::set_clientid(::std::string&& value) {
  set_has_clientid();
  clientid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SnsUploadRequest.ClientId)
}
#endif
void SnsUploadRequest::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SnsUploadRequest.ClientId)
}
void SnsUploadRequest::set_clientid(const char* value, size_t size) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SnsUploadRequest.ClientId)
}
::std::string* SnsUploadRequest::mutable_clientid() {
  set_has_clientid();
  // @@protoc_insertion_point(field_mutable:micromsg.SnsUploadRequest.ClientId)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnsUploadRequest::release_clientid() {
  // @@protoc_insertion_point(field_release:micromsg.SnsUploadRequest.ClientId)
  clear_has_clientid();
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnsUploadRequest::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    set_has_clientid();
  } else {
    clear_has_clientid();
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsUploadRequest.ClientId)
}

// optional uint32 FilterStype = 7;
bool SnsUploadRequest::has_filterstype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SnsUploadRequest::set_has_filterstype() {
  _has_bits_[0] |= 0x00000400u;
}
void SnsUploadRequest::clear_has_filterstype() {
  _has_bits_[0] &= ~0x00000400u;
}
void SnsUploadRequest::clear_filterstype() {
  filterstype_ = 0u;
  clear_has_filterstype();
}
::google::protobuf::uint32 SnsUploadRequest::filterstype() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsUploadRequest.FilterStype)
  return filterstype_;
}
void SnsUploadRequest::set_filterstype(::google::protobuf::uint32 value) {
  set_has_filterstype();
  filterstype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsUploadRequest.FilterStype)
}

// optional uint32 SyncFlag = 8;
bool SnsUploadRequest::has_syncflag() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SnsUploadRequest::set_has_syncflag() {
  _has_bits_[0] |= 0x00000800u;
}
void SnsUploadRequest::clear_has_syncflag() {
  _has_bits_[0] &= ~0x00000800u;
}
void SnsUploadRequest::clear_syncflag() {
  syncflag_ = 0u;
  clear_has_syncflag();
}
::google::protobuf::uint32 SnsUploadRequest::syncflag() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsUploadRequest.SyncFlag)
  return syncflag_;
}
void SnsUploadRequest::set_syncflag(::google::protobuf::uint32 value) {
  set_has_syncflag();
  syncflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsUploadRequest.SyncFlag)
}

// optional string Description = 9;
bool SnsUploadRequest::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SnsUploadRequest::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
void SnsUploadRequest::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
void SnsUploadRequest::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
const ::std::string& SnsUploadRequest::description() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsUploadRequest.Description)
  return description_.GetNoArena();
}
void SnsUploadRequest::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SnsUploadRequest.Description)
}
#if LANG_CXX11
void SnsUploadRequest::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SnsUploadRequest.Description)
}
#endif
void SnsUploadRequest::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SnsUploadRequest.Description)
}
void SnsUploadRequest::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SnsUploadRequest.Description)
}
::std::string* SnsUploadRequest::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:micromsg.SnsUploadRequest.Description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnsUploadRequest::release_description() {
  // @@protoc_insertion_point(field_release:micromsg.SnsUploadRequest.Description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnsUploadRequest::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsUploadRequest.Description)
}

// optional int32 PhotoFrom = 10;
bool SnsUploadRequest::has_photofrom() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SnsUploadRequest::set_has_photofrom() {
  _has_bits_[0] |= 0x00001000u;
}
void SnsUploadRequest::clear_has_photofrom() {
  _has_bits_[0] &= ~0x00001000u;
}
void SnsUploadRequest::clear_photofrom() {
  photofrom_ = 0;
  clear_has_photofrom();
}
::google::protobuf::int32 SnsUploadRequest::photofrom() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsUploadRequest.PhotoFrom)
  return photofrom_;
}
void SnsUploadRequest::set_photofrom(::google::protobuf::int32 value) {
  set_has_photofrom();
  photofrom_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsUploadRequest.PhotoFrom)
}

// optional int32 NetType = 11;
bool SnsUploadRequest::has_nettype() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void SnsUploadRequest::set_has_nettype() {
  _has_bits_[0] |= 0x00002000u;
}
void SnsUploadRequest::clear_has_nettype() {
  _has_bits_[0] &= ~0x00002000u;
}
void SnsUploadRequest::clear_nettype() {
  nettype_ = 0;
  clear_has_nettype();
}
::google::protobuf::int32 SnsUploadRequest::nettype() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsUploadRequest.NetType)
  return nettype_;
}
void SnsUploadRequest::set_nettype(::google::protobuf::int32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsUploadRequest.NetType)
}

// optional .micromsg.TwitterInfo TwitterInfo = 12;
bool SnsUploadRequest::has_twitterinfo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SnsUploadRequest::set_has_twitterinfo() {
  _has_bits_[0] |= 0x00000040u;
}
void SnsUploadRequest::clear_has_twitterinfo() {
  _has_bits_[0] &= ~0x00000040u;
}
void SnsUploadRequest::clear_twitterinfo() {
  if (twitterinfo_ != NULL) twitterinfo_->::micromsg::TwitterInfo::Clear();
  clear_has_twitterinfo();
}
const ::micromsg::TwitterInfo& SnsUploadRequest::twitterinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsUploadRequest.TwitterInfo)
  return twitterinfo_ != NULL ? *twitterinfo_
                         : *::micromsg::TwitterInfo::internal_default_instance();
}
::micromsg::TwitterInfo* SnsUploadRequest::mutable_twitterinfo() {
  set_has_twitterinfo();
  if (twitterinfo_ == NULL) {
    twitterinfo_ = new ::micromsg::TwitterInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsUploadRequest.TwitterInfo)
  return twitterinfo_;
}
::micromsg::TwitterInfo* SnsUploadRequest::release_twitterinfo() {
  // @@protoc_insertion_point(field_release:micromsg.SnsUploadRequest.TwitterInfo)
  clear_has_twitterinfo();
  ::micromsg::TwitterInfo* temp = twitterinfo_;
  twitterinfo_ = NULL;
  return temp;
}
void SnsUploadRequest::set_allocated_twitterinfo(::micromsg::TwitterInfo* twitterinfo) {
  delete twitterinfo_;
  twitterinfo_ = twitterinfo;
  if (twitterinfo) {
    set_has_twitterinfo();
  } else {
    clear_has_twitterinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsUploadRequest.TwitterInfo)
}

// optional string AppId = 13;
bool SnsUploadRequest::has_appid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SnsUploadRequest::set_has_appid() {
  _has_bits_[0] |= 0x00000004u;
}
void SnsUploadRequest::clear_has_appid() {
  _has_bits_[0] &= ~0x00000004u;
}
void SnsUploadRequest::clear_appid() {
  appid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_appid();
}
const ::std::string& SnsUploadRequest::appid() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsUploadRequest.AppId)
  return appid_.GetNoArena();
}
void SnsUploadRequest::set_appid(const ::std::string& value) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SnsUploadRequest.AppId)
}
#if LANG_CXX11
void SnsUploadRequest::set_appid(::std::string&& value) {
  set_has_appid();
  appid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SnsUploadRequest.AppId)
}
#endif
void SnsUploadRequest::set_appid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SnsUploadRequest.AppId)
}
void SnsUploadRequest::set_appid(const char* value, size_t size) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SnsUploadRequest.AppId)
}
::std::string* SnsUploadRequest::mutable_appid() {
  set_has_appid();
  // @@protoc_insertion_point(field_mutable:micromsg.SnsUploadRequest.AppId)
  return appid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnsUploadRequest::release_appid() {
  // @@protoc_insertion_point(field_release:micromsg.SnsUploadRequest.AppId)
  clear_has_appid();
  return appid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnsUploadRequest::set_allocated_appid(::std::string* appid) {
  if (appid != NULL) {
    set_has_appid();
  } else {
    clear_has_appid();
  }
  appid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsUploadRequest.AppId)
}

// optional uint32 ExtFlag = 14;
bool SnsUploadRequest::has_extflag() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void SnsUploadRequest::set_has_extflag() {
  _has_bits_[0] |= 0x00004000u;
}
void SnsUploadRequest::clear_has_extflag() {
  _has_bits_[0] &= ~0x00004000u;
}
void SnsUploadRequest::clear_extflag() {
  extflag_ = 0u;
  clear_has_extflag();
}
::google::protobuf::uint32 SnsUploadRequest::extflag() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsUploadRequest.ExtFlag)
  return extflag_;
}
void SnsUploadRequest::set_extflag(::google::protobuf::uint32 value) {
  set_has_extflag();
  extflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsUploadRequest.ExtFlag)
}

// optional string MD5 = 15;
bool SnsUploadRequest::has_md5() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SnsUploadRequest::set_has_md5() {
  _has_bits_[0] |= 0x00000008u;
}
void SnsUploadRequest::clear_has_md5() {
  _has_bits_[0] &= ~0x00000008u;
}
void SnsUploadRequest::clear_md5() {
  md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_md5();
}
const ::std::string& SnsUploadRequest::md5() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsUploadRequest.MD5)
  return md5_.GetNoArena();
}
void SnsUploadRequest::set_md5(const ::std::string& value) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SnsUploadRequest.MD5)
}
#if LANG_CXX11
void SnsUploadRequest::set_md5(::std::string&& value) {
  set_has_md5();
  md5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SnsUploadRequest.MD5)
}
#endif
void SnsUploadRequest::set_md5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SnsUploadRequest.MD5)
}
void SnsUploadRequest::set_md5(const char* value, size_t size) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SnsUploadRequest.MD5)
}
::std::string* SnsUploadRequest::mutable_md5() {
  set_has_md5();
  // @@protoc_insertion_point(field_mutable:micromsg.SnsUploadRequest.MD5)
  return md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnsUploadRequest::release_md5() {
  // @@protoc_insertion_point(field_release:micromsg.SnsUploadRequest.MD5)
  clear_has_md5();
  return md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnsUploadRequest::set_allocated_md5(::std::string* md5) {
  if (md5 != NULL) {
    set_has_md5();
  } else {
    clear_has_md5();
  }
  md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsUploadRequest.MD5)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnsUploadResponse::kBaseResponseFieldNumber;
const int SnsUploadResponse::kStartPosFieldNumber;
const int SnsUploadResponse::kTotalLenFieldNumber;
const int SnsUploadResponse::kClientIdFieldNumber;
const int SnsUploadResponse::kBufferUrlFieldNumber;
const int SnsUploadResponse::kThumbUrlCountFieldNumber;
const int SnsUploadResponse::kThumbUrlsFieldNumber;
const int SnsUploadResponse::kIdFieldNumber;
const int SnsUploadResponse::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnsUploadResponse::SnsUploadResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsns_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SnsUploadResponse)
}
SnsUploadResponse::SnsUploadResponse(const SnsUploadResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      thumburls_(from.thumburls_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientid()) {
    clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_bufferurl()) {
    bufferurl_ = new ::micromsg::SnsBufferUrl(*from.bufferurl_);
  } else {
    bufferurl_ = NULL;
  }
  ::memcpy(&startpos_, &from.startpos_,
    reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&startpos_) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:micromsg.SnsUploadResponse)
}

void SnsUploadResponse::SharedCtor() {
  _cached_size_ = 0;
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(id_));
}

SnsUploadResponse::~SnsUploadResponse() {
  // @@protoc_insertion_point(destructor:micromsg.SnsUploadResponse)
  SharedDtor();
}

void SnsUploadResponse::SharedDtor() {
  clientid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete bufferurl_;
  }
}

void SnsUploadResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnsUploadResponse::descriptor() {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnsUploadResponse& SnsUploadResponse::default_instance() {
  protobuf_mmsns_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnsUploadResponse* SnsUploadResponse::New(::google::protobuf::Arena* arena) const {
  SnsUploadResponse* n = new SnsUploadResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnsUploadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SnsUploadResponse)
  thumburls_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_clientid()) {
      GOOGLE_DCHECK(!clientid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*clientid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_bufferurl()) {
      GOOGLE_DCHECK(bufferurl_ != NULL);
      bufferurl_->::micromsg::SnsBufferUrl::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&startpos_, 0, reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&startpos_) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnsUploadResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SnsUploadResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 StartPos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_startpos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startpos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 TotalLen = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_totallen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totallen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ClientId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientid().data(), this->clientid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SnsUploadResponse.ClientId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SnsBufferUrl BufferUrl = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bufferurl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ThumbUrlCount = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_thumburlcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thumburlcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.SnsBufferUrl ThumbUrls = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_thumburls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 Id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SnsUploadResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SnsUploadResponse)
  return false;
#undef DO_
}

void SnsUploadResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SnsUploadResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 StartPos = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->startpos(), output);
  }

  // required uint32 TotalLen = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->totallen(), output);
  }

  // optional string ClientId = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsUploadResponse.ClientId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->clientid(), output);
  }

  // required .micromsg.SnsBufferUrl BufferUrl = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->bufferurl_, output);
  }

  // required uint32 ThumbUrlCount = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->thumburlcount(), output);
  }

  // repeated .micromsg.SnsBufferUrl ThumbUrls = 7;
  for (unsigned int i = 0, n = this->thumburls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->thumburls(i), output);
  }

  // required uint64 Id = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->id(), output);
  }

  // required uint32 Type = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SnsUploadResponse)
}

::google::protobuf::uint8* SnsUploadResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SnsUploadResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 StartPos = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->startpos(), target);
  }

  // required uint32 TotalLen = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->totallen(), target);
  }

  // optional string ClientId = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsUploadResponse.ClientId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->clientid(), target);
  }

  // required .micromsg.SnsBufferUrl BufferUrl = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->bufferurl_, deterministic, target);
  }

  // required uint32 ThumbUrlCount = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->thumburlcount(), target);
  }

  // repeated .micromsg.SnsBufferUrl ThumbUrls = 7;
  for (unsigned int i = 0, n = this->thumburls_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->thumburls(i), deterministic, target);
  }

  // required uint64 Id = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->id(), target);
  }

  // required uint32 Type = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SnsUploadResponse)
  return target;
}

size_t SnsUploadResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SnsUploadResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_bufferurl()) {
    // required .micromsg.SnsBufferUrl BufferUrl = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bufferurl_);
  }

  if (has_startpos()) {
    // required uint32 StartPos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startpos());
  }

  if (has_totallen()) {
    // required uint32 TotalLen = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totallen());
  }

  if (has_thumburlcount()) {
    // required uint32 ThumbUrlCount = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->thumburlcount());
  }

  if (has_type()) {
    // required uint32 Type = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_id()) {
    // required uint64 Id = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  return total_size;
}
size_t SnsUploadResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SnsUploadResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000fe) ^ 0x000000fe) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required .micromsg.SnsBufferUrl BufferUrl = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bufferurl_);

    // required uint32 StartPos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startpos());

    // required uint32 TotalLen = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totallen());

    // required uint32 ThumbUrlCount = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->thumburlcount());

    // required uint32 Type = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required uint64 Id = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.SnsBufferUrl ThumbUrls = 7;
  {
    unsigned int count = this->thumburls_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->thumburls(i));
    }
  }

  // optional string ClientId = 4;
  if (has_clientid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnsUploadResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SnsUploadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SnsUploadResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnsUploadResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SnsUploadResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SnsUploadResponse)
    MergeFrom(*source);
  }
}

void SnsUploadResponse::MergeFrom(const SnsUploadResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SnsUploadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  thumburls_.MergeFrom(from.thumburls_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_clientid();
      clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_bufferurl()->::micromsg::SnsBufferUrl::MergeFrom(from.bufferurl());
    }
    if (cached_has_bits & 0x00000008u) {
      startpos_ = from.startpos_;
    }
    if (cached_has_bits & 0x00000010u) {
      totallen_ = from.totallen_;
    }
    if (cached_has_bits & 0x00000020u) {
      thumburlcount_ = from.thumburlcount_;
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000080u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SnsUploadResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SnsUploadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnsUploadResponse::CopyFrom(const SnsUploadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SnsUploadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsUploadResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000fe) != 0x000000fe) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->thumburls())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_bufferurl()) {
    if (!this->bufferurl_->IsInitialized()) return false;
  }
  return true;
}

void SnsUploadResponse::Swap(SnsUploadResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnsUploadResponse::InternalSwap(SnsUploadResponse* other) {
  thumburls_.InternalSwap(&other->thumburls_);
  clientid_.Swap(&other->clientid_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(bufferurl_, other->bufferurl_);
  std::swap(startpos_, other->startpos_);
  std::swap(totallen_, other->totallen_);
  std::swap(thumburlcount_, other->thumburlcount_);
  std::swap(type_, other->type_);
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnsUploadResponse::GetMetadata() const {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnsUploadResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool SnsUploadResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SnsUploadResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
void SnsUploadResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
void SnsUploadResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& SnsUploadResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsUploadResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* SnsUploadResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsUploadResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* SnsUploadResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.SnsUploadResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void SnsUploadResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsUploadResponse.BaseResponse)
}

// required uint32 StartPos = 2;
bool SnsUploadResponse::has_startpos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SnsUploadResponse::set_has_startpos() {
  _has_bits_[0] |= 0x00000008u;
}
void SnsUploadResponse::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000008u;
}
void SnsUploadResponse::clear_startpos() {
  startpos_ = 0u;
  clear_has_startpos();
}
::google::protobuf::uint32 SnsUploadResponse::startpos() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsUploadResponse.StartPos)
  return startpos_;
}
void SnsUploadResponse::set_startpos(::google::protobuf::uint32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsUploadResponse.StartPos)
}

// required uint32 TotalLen = 3;
bool SnsUploadResponse::has_totallen() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SnsUploadResponse::set_has_totallen() {
  _has_bits_[0] |= 0x00000010u;
}
void SnsUploadResponse::clear_has_totallen() {
  _has_bits_[0] &= ~0x00000010u;
}
void SnsUploadResponse::clear_totallen() {
  totallen_ = 0u;
  clear_has_totallen();
}
::google::protobuf::uint32 SnsUploadResponse::totallen() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsUploadResponse.TotalLen)
  return totallen_;
}
void SnsUploadResponse::set_totallen(::google::protobuf::uint32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsUploadResponse.TotalLen)
}

// optional string ClientId = 4;
bool SnsUploadResponse::has_clientid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnsUploadResponse::set_has_clientid() {
  _has_bits_[0] |= 0x00000001u;
}
void SnsUploadResponse::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnsUploadResponse::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientid();
}
const ::std::string& SnsUploadResponse::clientid() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsUploadResponse.ClientId)
  return clientid_.GetNoArena();
}
void SnsUploadResponse::set_clientid(const ::std::string& value) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SnsUploadResponse.ClientId)
}
#if LANG_CXX11
void SnsUploadResponse::set_clientid(::std::string&& value) {
  set_has_clientid();
  clientid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SnsUploadResponse.ClientId)
}
#endif
void SnsUploadResponse::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SnsUploadResponse.ClientId)
}
void SnsUploadResponse::set_clientid(const char* value, size_t size) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SnsUploadResponse.ClientId)
}
::std::string* SnsUploadResponse::mutable_clientid() {
  set_has_clientid();
  // @@protoc_insertion_point(field_mutable:micromsg.SnsUploadResponse.ClientId)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnsUploadResponse::release_clientid() {
  // @@protoc_insertion_point(field_release:micromsg.SnsUploadResponse.ClientId)
  clear_has_clientid();
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnsUploadResponse::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    set_has_clientid();
  } else {
    clear_has_clientid();
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsUploadResponse.ClientId)
}

// required .micromsg.SnsBufferUrl BufferUrl = 5;
bool SnsUploadResponse::has_bufferurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SnsUploadResponse::set_has_bufferurl() {
  _has_bits_[0] |= 0x00000004u;
}
void SnsUploadResponse::clear_has_bufferurl() {
  _has_bits_[0] &= ~0x00000004u;
}
void SnsUploadResponse::clear_bufferurl() {
  if (bufferurl_ != NULL) bufferurl_->::micromsg::SnsBufferUrl::Clear();
  clear_has_bufferurl();
}
const ::micromsg::SnsBufferUrl& SnsUploadResponse::bufferurl() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsUploadResponse.BufferUrl)
  return bufferurl_ != NULL ? *bufferurl_
                         : *::micromsg::SnsBufferUrl::internal_default_instance();
}
::micromsg::SnsBufferUrl* SnsUploadResponse::mutable_bufferurl() {
  set_has_bufferurl();
  if (bufferurl_ == NULL) {
    bufferurl_ = new ::micromsg::SnsBufferUrl;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsUploadResponse.BufferUrl)
  return bufferurl_;
}
::micromsg::SnsBufferUrl* SnsUploadResponse::release_bufferurl() {
  // @@protoc_insertion_point(field_release:micromsg.SnsUploadResponse.BufferUrl)
  clear_has_bufferurl();
  ::micromsg::SnsBufferUrl* temp = bufferurl_;
  bufferurl_ = NULL;
  return temp;
}
void SnsUploadResponse::set_allocated_bufferurl(::micromsg::SnsBufferUrl* bufferurl) {
  delete bufferurl_;
  bufferurl_ = bufferurl;
  if (bufferurl) {
    set_has_bufferurl();
  } else {
    clear_has_bufferurl();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsUploadResponse.BufferUrl)
}

// required uint32 ThumbUrlCount = 6;
bool SnsUploadResponse::has_thumburlcount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SnsUploadResponse::set_has_thumburlcount() {
  _has_bits_[0] |= 0x00000020u;
}
void SnsUploadResponse::clear_has_thumburlcount() {
  _has_bits_[0] &= ~0x00000020u;
}
void SnsUploadResponse::clear_thumburlcount() {
  thumburlcount_ = 0u;
  clear_has_thumburlcount();
}
::google::protobuf::uint32 SnsUploadResponse::thumburlcount() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsUploadResponse.ThumbUrlCount)
  return thumburlcount_;
}
void SnsUploadResponse::set_thumburlcount(::google::protobuf::uint32 value) {
  set_has_thumburlcount();
  thumburlcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsUploadResponse.ThumbUrlCount)
}

// repeated .micromsg.SnsBufferUrl ThumbUrls = 7;
int SnsUploadResponse::thumburls_size() const {
  return thumburls_.size();
}
void SnsUploadResponse::clear_thumburls() {
  thumburls_.Clear();
}
const ::micromsg::SnsBufferUrl& SnsUploadResponse::thumburls(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.SnsUploadResponse.ThumbUrls)
  return thumburls_.Get(index);
}
::micromsg::SnsBufferUrl* SnsUploadResponse::mutable_thumburls(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.SnsUploadResponse.ThumbUrls)
  return thumburls_.Mutable(index);
}
::micromsg::SnsBufferUrl* SnsUploadResponse::add_thumburls() {
  // @@protoc_insertion_point(field_add:micromsg.SnsUploadResponse.ThumbUrls)
  return thumburls_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::SnsBufferUrl >*
SnsUploadResponse::mutable_thumburls() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.SnsUploadResponse.ThumbUrls)
  return &thumburls_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::SnsBufferUrl >&
SnsUploadResponse::thumburls() const {
  // @@protoc_insertion_point(field_list:micromsg.SnsUploadResponse.ThumbUrls)
  return thumburls_;
}

// required uint64 Id = 8;
bool SnsUploadResponse::has_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SnsUploadResponse::set_has_id() {
  _has_bits_[0] |= 0x00000080u;
}
void SnsUploadResponse::clear_has_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void SnsUploadResponse::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
::google::protobuf::uint64 SnsUploadResponse::id() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsUploadResponse.Id)
  return id_;
}
void SnsUploadResponse::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsUploadResponse.Id)
}

// required uint32 Type = 9;
bool SnsUploadResponse::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SnsUploadResponse::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
void SnsUploadResponse::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
void SnsUploadResponse::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 SnsUploadResponse::type() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsUploadResponse.Type)
  return type_;
}
void SnsUploadResponse::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsUploadResponse.Type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnsDownloadRequest::kBaseRequestFieldNumber;
const int SnsDownloadRequest::kStartPosFieldNumber;
const int SnsDownloadRequest::kTotalLenFieldNumber;
const int SnsDownloadRequest::kBufferIdFieldNumber;
const int SnsDownloadRequest::kTypeFieldNumber;
const int SnsDownloadRequest::kDownBufLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnsDownloadRequest::SnsDownloadRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsns_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SnsDownloadRequest)
}
SnsDownloadRequest::SnsDownloadRequest(const SnsDownloadRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bufferid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bufferid()) {
    bufferid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bufferid_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&startpos_, &from.startpos_,
    reinterpret_cast<char*>(&downbuflen_) -
    reinterpret_cast<char*>(&startpos_) + sizeof(downbuflen_));
  // @@protoc_insertion_point(copy_constructor:micromsg.SnsDownloadRequest)
}

void SnsDownloadRequest::SharedCtor() {
  _cached_size_ = 0;
  bufferid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&downbuflen_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(downbuflen_));
}

SnsDownloadRequest::~SnsDownloadRequest() {
  // @@protoc_insertion_point(destructor:micromsg.SnsDownloadRequest)
  SharedDtor();
}

void SnsDownloadRequest::SharedDtor() {
  bufferid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void SnsDownloadRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnsDownloadRequest::descriptor() {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnsDownloadRequest& SnsDownloadRequest::default_instance() {
  protobuf_mmsns_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnsDownloadRequest* SnsDownloadRequest::New(::google::protobuf::Arena* arena) const {
  SnsDownloadRequest* n = new SnsDownloadRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnsDownloadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SnsDownloadRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_bufferid()) {
      GOOGLE_DCHECK(!bufferid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bufferid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 60u) {
    ::memset(&startpos_, 0, reinterpret_cast<char*>(&downbuflen_) -
      reinterpret_cast<char*>(&startpos_) + sizeof(downbuflen_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnsDownloadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SnsDownloadRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 StartPos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_startpos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startpos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 TotalLen = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_totallen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totallen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string BufferId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bufferid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bufferid().data(), this->bufferid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SnsDownloadRequest.BufferId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 DownBufLen = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_downbuflen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &downbuflen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SnsDownloadRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SnsDownloadRequest)
  return false;
#undef DO_
}

void SnsDownloadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SnsDownloadRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required int32 StartPos = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->startpos(), output);
  }

  // optional int32 TotalLen = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->totallen(), output);
  }

  // optional string BufferId = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bufferid().data(), this->bufferid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsDownloadRequest.BufferId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->bufferid(), output);
  }

  // required uint32 Type = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->type(), output);
  }

  // required uint32 DownBufLen = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->downbuflen(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SnsDownloadRequest)
}

::google::protobuf::uint8* SnsDownloadRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SnsDownloadRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required int32 StartPos = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->startpos(), target);
  }

  // optional int32 TotalLen = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->totallen(), target);
  }

  // optional string BufferId = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bufferid().data(), this->bufferid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsDownloadRequest.BufferId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->bufferid(), target);
  }

  // required uint32 Type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->type(), target);
  }

  // required uint32 DownBufLen = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->downbuflen(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SnsDownloadRequest)
  return target;
}

size_t SnsDownloadRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SnsDownloadRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_startpos()) {
    // required int32 StartPos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->startpos());
  }

  if (has_type()) {
    // required uint32 Type = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_downbuflen()) {
    // required uint32 DownBufLen = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->downbuflen());
  }

  return total_size;
}
size_t SnsDownloadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SnsDownloadRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000036) ^ 0x00000036) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required int32 StartPos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->startpos());

    // required uint32 Type = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required uint32 DownBufLen = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->downbuflen());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string BufferId = 4;
  if (has_bufferid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bufferid());
  }

  // optional int32 TotalLen = 3;
  if (has_totallen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->totallen());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnsDownloadRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SnsDownloadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SnsDownloadRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnsDownloadRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SnsDownloadRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SnsDownloadRequest)
    MergeFrom(*source);
  }
}

void SnsDownloadRequest::MergeFrom(const SnsDownloadRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SnsDownloadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_bufferid();
      bufferid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bufferid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000004u) {
      startpos_ = from.startpos_;
    }
    if (cached_has_bits & 0x00000008u) {
      totallen_ = from.totallen_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      downbuflen_ = from.downbuflen_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SnsDownloadRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SnsDownloadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnsDownloadRequest::CopyFrom(const SnsDownloadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SnsDownloadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsDownloadRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000036) != 0x00000036) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void SnsDownloadRequest::Swap(SnsDownloadRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnsDownloadRequest::InternalSwap(SnsDownloadRequest* other) {
  bufferid_.Swap(&other->bufferid_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(startpos_, other->startpos_);
  std::swap(totallen_, other->totallen_);
  std::swap(type_, other->type_);
  std::swap(downbuflen_, other->downbuflen_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnsDownloadRequest::GetMetadata() const {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnsDownloadRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool SnsDownloadRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SnsDownloadRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void SnsDownloadRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void SnsDownloadRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& SnsDownloadRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsDownloadRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* SnsDownloadRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsDownloadRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* SnsDownloadRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.SnsDownloadRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void SnsDownloadRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsDownloadRequest.BaseRequest)
}

// required int32 StartPos = 2;
bool SnsDownloadRequest::has_startpos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SnsDownloadRequest::set_has_startpos() {
  _has_bits_[0] |= 0x00000004u;
}
void SnsDownloadRequest::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000004u;
}
void SnsDownloadRequest::clear_startpos() {
  startpos_ = 0;
  clear_has_startpos();
}
::google::protobuf::int32 SnsDownloadRequest::startpos() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsDownloadRequest.StartPos)
  return startpos_;
}
void SnsDownloadRequest::set_startpos(::google::protobuf::int32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsDownloadRequest.StartPos)
}

// optional int32 TotalLen = 3;
bool SnsDownloadRequest::has_totallen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SnsDownloadRequest::set_has_totallen() {
  _has_bits_[0] |= 0x00000008u;
}
void SnsDownloadRequest::clear_has_totallen() {
  _has_bits_[0] &= ~0x00000008u;
}
void SnsDownloadRequest::clear_totallen() {
  totallen_ = 0;
  clear_has_totallen();
}
::google::protobuf::int32 SnsDownloadRequest::totallen() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsDownloadRequest.TotalLen)
  return totallen_;
}
void SnsDownloadRequest::set_totallen(::google::protobuf::int32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsDownloadRequest.TotalLen)
}

// optional string BufferId = 4;
bool SnsDownloadRequest::has_bufferid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnsDownloadRequest::set_has_bufferid() {
  _has_bits_[0] |= 0x00000001u;
}
void SnsDownloadRequest::clear_has_bufferid() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnsDownloadRequest::clear_bufferid() {
  bufferid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bufferid();
}
const ::std::string& SnsDownloadRequest::bufferid() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsDownloadRequest.BufferId)
  return bufferid_.GetNoArena();
}
void SnsDownloadRequest::set_bufferid(const ::std::string& value) {
  set_has_bufferid();
  bufferid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SnsDownloadRequest.BufferId)
}
#if LANG_CXX11
void SnsDownloadRequest::set_bufferid(::std::string&& value) {
  set_has_bufferid();
  bufferid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SnsDownloadRequest.BufferId)
}
#endif
void SnsDownloadRequest::set_bufferid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bufferid();
  bufferid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SnsDownloadRequest.BufferId)
}
void SnsDownloadRequest::set_bufferid(const char* value, size_t size) {
  set_has_bufferid();
  bufferid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SnsDownloadRequest.BufferId)
}
::std::string* SnsDownloadRequest::mutable_bufferid() {
  set_has_bufferid();
  // @@protoc_insertion_point(field_mutable:micromsg.SnsDownloadRequest.BufferId)
  return bufferid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnsDownloadRequest::release_bufferid() {
  // @@protoc_insertion_point(field_release:micromsg.SnsDownloadRequest.BufferId)
  clear_has_bufferid();
  return bufferid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnsDownloadRequest::set_allocated_bufferid(::std::string* bufferid) {
  if (bufferid != NULL) {
    set_has_bufferid();
  } else {
    clear_has_bufferid();
  }
  bufferid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bufferid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsDownloadRequest.BufferId)
}

// required uint32 Type = 5;
bool SnsDownloadRequest::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SnsDownloadRequest::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
void SnsDownloadRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void SnsDownloadRequest::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 SnsDownloadRequest::type() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsDownloadRequest.Type)
  return type_;
}
void SnsDownloadRequest::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsDownloadRequest.Type)
}

// required uint32 DownBufLen = 6;
bool SnsDownloadRequest::has_downbuflen() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SnsDownloadRequest::set_has_downbuflen() {
  _has_bits_[0] |= 0x00000020u;
}
void SnsDownloadRequest::clear_has_downbuflen() {
  _has_bits_[0] &= ~0x00000020u;
}
void SnsDownloadRequest::clear_downbuflen() {
  downbuflen_ = 0u;
  clear_has_downbuflen();
}
::google::protobuf::uint32 SnsDownloadRequest::downbuflen() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsDownloadRequest.DownBufLen)
  return downbuflen_;
}
void SnsDownloadRequest::set_downbuflen(::google::protobuf::uint32 value) {
  set_has_downbuflen();
  downbuflen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsDownloadRequest.DownBufLen)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnsDownloadResponse::kBaseResponseFieldNumber;
const int SnsDownloadResponse::kStartPosFieldNumber;
const int SnsDownloadResponse::kTotalLenFieldNumber;
const int SnsDownloadResponse::kBufferFieldNumber;
const int SnsDownloadResponse::kBufferIdFieldNumber;
const int SnsDownloadResponse::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnsDownloadResponse::SnsDownloadResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsns_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SnsDownloadResponse)
}
SnsDownloadResponse::SnsDownloadResponse(const SnsDownloadResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bufferid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bufferid()) {
    bufferid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bufferid_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_buffer()) {
    buffer_ = new ::micromsg::SKBuiltinBuffer_t(*from.buffer_);
  } else {
    buffer_ = NULL;
  }
  ::memcpy(&startpos_, &from.startpos_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&startpos_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:micromsg.SnsDownloadResponse)
}

void SnsDownloadResponse::SharedCtor() {
  _cached_size_ = 0;
  bufferid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(type_));
}

SnsDownloadResponse::~SnsDownloadResponse() {
  // @@protoc_insertion_point(destructor:micromsg.SnsDownloadResponse)
  SharedDtor();
}

void SnsDownloadResponse::SharedDtor() {
  bufferid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete buffer_;
  }
}

void SnsDownloadResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnsDownloadResponse::descriptor() {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnsDownloadResponse& SnsDownloadResponse::default_instance() {
  protobuf_mmsns_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnsDownloadResponse* SnsDownloadResponse::New(::google::protobuf::Arena* arena) const {
  SnsDownloadResponse* n = new SnsDownloadResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnsDownloadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SnsDownloadResponse)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_bufferid()) {
      GOOGLE_DCHECK(!bufferid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bufferid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_buffer()) {
      GOOGLE_DCHECK(buffer_ != NULL);
      buffer_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 56u) {
    ::memset(&startpos_, 0, reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&startpos_) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnsDownloadResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SnsDownloadResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 StartPos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_startpos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startpos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 TotalLen = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_totallen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totallen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t Buffer = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string BufferId = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bufferid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bufferid().data(), this->bufferid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SnsDownloadResponse.BufferId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SnsDownloadResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SnsDownloadResponse)
  return false;
#undef DO_
}

void SnsDownloadResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SnsDownloadResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required int32 StartPos = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->startpos(), output);
  }

  // required int32 TotalLen = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->totallen(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t Buffer = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->buffer_, output);
  }

  // optional string BufferId = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bufferid().data(), this->bufferid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsDownloadResponse.BufferId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->bufferid(), output);
  }

  // required uint32 Type = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SnsDownloadResponse)
}

::google::protobuf::uint8* SnsDownloadResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SnsDownloadResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required int32 StartPos = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->startpos(), target);
  }

  // required int32 TotalLen = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->totallen(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t Buffer = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->buffer_, deterministic, target);
  }

  // optional string BufferId = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bufferid().data(), this->bufferid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsDownloadResponse.BufferId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->bufferid(), target);
  }

  // required uint32 Type = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SnsDownloadResponse)
  return target;
}

size_t SnsDownloadResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SnsDownloadResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_buffer()) {
    // required .micromsg.SKBuiltinBuffer_t Buffer = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->buffer_);
  }

  if (has_startpos()) {
    // required int32 StartPos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->startpos());
  }

  if (has_totallen()) {
    // required int32 TotalLen = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->totallen());
  }

  if (has_type()) {
    // required uint32 Type = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  return total_size;
}
size_t SnsDownloadResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SnsDownloadResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003e) ^ 0x0000003e) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required .micromsg.SKBuiltinBuffer_t Buffer = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->buffer_);

    // required int32 StartPos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->startpos());

    // required int32 TotalLen = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->totallen());

    // required uint32 Type = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string BufferId = 5;
  if (has_bufferid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bufferid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnsDownloadResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SnsDownloadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SnsDownloadResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnsDownloadResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SnsDownloadResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SnsDownloadResponse)
    MergeFrom(*source);
  }
}

void SnsDownloadResponse::MergeFrom(const SnsDownloadResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SnsDownloadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_bufferid();
      bufferid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bufferid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_buffer()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.buffer());
    }
    if (cached_has_bits & 0x00000008u) {
      startpos_ = from.startpos_;
    }
    if (cached_has_bits & 0x00000010u) {
      totallen_ = from.totallen_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SnsDownloadResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SnsDownloadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnsDownloadResponse::CopyFrom(const SnsDownloadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SnsDownloadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsDownloadResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003e) != 0x0000003e) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_buffer()) {
    if (!this->buffer_->IsInitialized()) return false;
  }
  return true;
}

void SnsDownloadResponse::Swap(SnsDownloadResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnsDownloadResponse::InternalSwap(SnsDownloadResponse* other) {
  bufferid_.Swap(&other->bufferid_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(buffer_, other->buffer_);
  std::swap(startpos_, other->startpos_);
  std::swap(totallen_, other->totallen_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnsDownloadResponse::GetMetadata() const {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnsDownloadResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool SnsDownloadResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SnsDownloadResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
void SnsDownloadResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
void SnsDownloadResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& SnsDownloadResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsDownloadResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* SnsDownloadResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsDownloadResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* SnsDownloadResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.SnsDownloadResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void SnsDownloadResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsDownloadResponse.BaseResponse)
}

// required int32 StartPos = 2;
bool SnsDownloadResponse::has_startpos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SnsDownloadResponse::set_has_startpos() {
  _has_bits_[0] |= 0x00000008u;
}
void SnsDownloadResponse::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000008u;
}
void SnsDownloadResponse::clear_startpos() {
  startpos_ = 0;
  clear_has_startpos();
}
::google::protobuf::int32 SnsDownloadResponse::startpos() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsDownloadResponse.StartPos)
  return startpos_;
}
void SnsDownloadResponse::set_startpos(::google::protobuf::int32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsDownloadResponse.StartPos)
}

// required int32 TotalLen = 3;
bool SnsDownloadResponse::has_totallen() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SnsDownloadResponse::set_has_totallen() {
  _has_bits_[0] |= 0x00000010u;
}
void SnsDownloadResponse::clear_has_totallen() {
  _has_bits_[0] &= ~0x00000010u;
}
void SnsDownloadResponse::clear_totallen() {
  totallen_ = 0;
  clear_has_totallen();
}
::google::protobuf::int32 SnsDownloadResponse::totallen() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsDownloadResponse.TotalLen)
  return totallen_;
}
void SnsDownloadResponse::set_totallen(::google::protobuf::int32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsDownloadResponse.TotalLen)
}

// required .micromsg.SKBuiltinBuffer_t Buffer = 4;
bool SnsDownloadResponse::has_buffer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SnsDownloadResponse::set_has_buffer() {
  _has_bits_[0] |= 0x00000004u;
}
void SnsDownloadResponse::clear_has_buffer() {
  _has_bits_[0] &= ~0x00000004u;
}
void SnsDownloadResponse::clear_buffer() {
  if (buffer_ != NULL) buffer_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_buffer();
}
const ::micromsg::SKBuiltinBuffer_t& SnsDownloadResponse::buffer() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsDownloadResponse.Buffer)
  return buffer_ != NULL ? *buffer_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* SnsDownloadResponse::mutable_buffer() {
  set_has_buffer();
  if (buffer_ == NULL) {
    buffer_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsDownloadResponse.Buffer)
  return buffer_;
}
::micromsg::SKBuiltinBuffer_t* SnsDownloadResponse::release_buffer() {
  // @@protoc_insertion_point(field_release:micromsg.SnsDownloadResponse.Buffer)
  clear_has_buffer();
  ::micromsg::SKBuiltinBuffer_t* temp = buffer_;
  buffer_ = NULL;
  return temp;
}
void SnsDownloadResponse::set_allocated_buffer(::micromsg::SKBuiltinBuffer_t* buffer) {
  delete buffer_;
  buffer_ = buffer;
  if (buffer) {
    set_has_buffer();
  } else {
    clear_has_buffer();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsDownloadResponse.Buffer)
}

// optional string BufferId = 5;
bool SnsDownloadResponse::has_bufferid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnsDownloadResponse::set_has_bufferid() {
  _has_bits_[0] |= 0x00000001u;
}
void SnsDownloadResponse::clear_has_bufferid() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnsDownloadResponse::clear_bufferid() {
  bufferid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bufferid();
}
const ::std::string& SnsDownloadResponse::bufferid() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsDownloadResponse.BufferId)
  return bufferid_.GetNoArena();
}
void SnsDownloadResponse::set_bufferid(const ::std::string& value) {
  set_has_bufferid();
  bufferid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SnsDownloadResponse.BufferId)
}
#if LANG_CXX11
void SnsDownloadResponse::set_bufferid(::std::string&& value) {
  set_has_bufferid();
  bufferid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SnsDownloadResponse.BufferId)
}
#endif
void SnsDownloadResponse::set_bufferid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bufferid();
  bufferid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SnsDownloadResponse.BufferId)
}
void SnsDownloadResponse::set_bufferid(const char* value, size_t size) {
  set_has_bufferid();
  bufferid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SnsDownloadResponse.BufferId)
}
::std::string* SnsDownloadResponse::mutable_bufferid() {
  set_has_bufferid();
  // @@protoc_insertion_point(field_mutable:micromsg.SnsDownloadResponse.BufferId)
  return bufferid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnsDownloadResponse::release_bufferid() {
  // @@protoc_insertion_point(field_release:micromsg.SnsDownloadResponse.BufferId)
  clear_has_bufferid();
  return bufferid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnsDownloadResponse::set_allocated_bufferid(::std::string* bufferid) {
  if (bufferid != NULL) {
    set_has_bufferid();
  } else {
    clear_has_bufferid();
  }
  bufferid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bufferid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsDownloadResponse.BufferId)
}

// required uint32 Type = 6;
bool SnsDownloadResponse::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SnsDownloadResponse::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
void SnsDownloadResponse::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void SnsDownloadResponse::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 SnsDownloadResponse::type() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsDownloadResponse.Type)
  return type_;
}
void SnsDownloadResponse::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsDownloadResponse.Type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnsCommentInfo::kUsernameFieldNumber;
const int SnsCommentInfo::kNicknameFieldNumber;
const int SnsCommentInfo::kSourceFieldNumber;
const int SnsCommentInfo::kTypeFieldNumber;
const int SnsCommentInfo::kContentFieldNumber;
const int SnsCommentInfo::kCreateTimeFieldNumber;
const int SnsCommentInfo::kCommentIdFieldNumber;
const int SnsCommentInfo::kReplyCommentIdFieldNumber;
const int SnsCommentInfo::kReplyUsernameFieldNumber;
const int SnsCommentInfo::kIsNotRichTextFieldNumber;
const int SnsCommentInfo::kReplyCommentId2FieldNumber;
const int SnsCommentInfo::kCommentId2FieldNumber;
const int SnsCommentInfo::kDeleteFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnsCommentInfo::SnsCommentInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsns_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SnsCommentInfo)
}
SnsCommentInfo::SnsCommentInfo(const SnsCommentInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nickname()) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  replyusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_replyusername()) {
    replyusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.replyusername_);
  }
  ::memcpy(&source_, &from.source_,
    reinterpret_cast<char*>(&deleteflag_) -
    reinterpret_cast<char*>(&source_) + sizeof(deleteflag_));
  // @@protoc_insertion_point(copy_constructor:micromsg.SnsCommentInfo)
}

void SnsCommentInfo::SharedCtor() {
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  replyusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&source_, 0, reinterpret_cast<char*>(&deleteflag_) -
    reinterpret_cast<char*>(&source_) + sizeof(deleteflag_));
}

SnsCommentInfo::~SnsCommentInfo() {
  // @@protoc_insertion_point(destructor:micromsg.SnsCommentInfo)
  SharedDtor();
}

void SnsCommentInfo::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  replyusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SnsCommentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnsCommentInfo::descriptor() {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnsCommentInfo& SnsCommentInfo::default_instance() {
  protobuf_mmsns_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnsCommentInfo* SnsCommentInfo::New(::google::protobuf::Arena* arena) const {
  SnsCommentInfo* n = new SnsCommentInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnsCommentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SnsCommentInfo)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_username()) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
    if (has_nickname()) {
      GOOGLE_DCHECK(!nickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*nickname_.UnsafeRawStringPointer())->clear();
    }
    if (has_content()) {
      GOOGLE_DCHECK(!content_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*content_.UnsafeRawStringPointer())->clear();
    }
    if (has_replyusername()) {
      GOOGLE_DCHECK(!replyusername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*replyusername_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&source_, 0, reinterpret_cast<char*>(&commentid_) -
      reinterpret_cast<char*>(&source_) + sizeof(commentid_));
  }
  if (_has_bits_[8 / 32] & 7936u) {
    ::memset(&replycommentid_, 0, reinterpret_cast<char*>(&deleteflag_) -
      reinterpret_cast<char*>(&replycommentid_) + sizeof(deleteflag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnsCommentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SnsCommentInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Username = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SnsCommentInfo.Username");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Nickname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SnsCommentInfo.Nickname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Source = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Content = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SnsCommentInfo.Content");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 CreateTime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_createtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 CommentId = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_commentid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &commentid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ReplyCommentId = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_replycommentid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replycommentid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ReplyUsername = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_replyusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->replyusername().data(), this->replyusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SnsCommentInfo.ReplyUsername");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 IsNotRichText = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_isnotrichtext();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isnotrichtext_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ReplyCommentId2 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_replycommentid2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &replycommentid2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 CommentId2 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_commentid2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commentid2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 DeleteFlag = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_deleteflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deleteflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SnsCommentInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SnsCommentInfo)
  return false;
#undef DO_
}

void SnsCommentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SnsCommentInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Username = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsCommentInfo.Username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // optional string Nickname = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsCommentInfo.Nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // required uint32 Source = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->source(), output);
  }

  // required uint32 Type = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->type(), output);
  }

  // optional string Content = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsCommentInfo.Content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->content(), output);
  }

  // required uint32 CreateTime = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->createtime(), output);
  }

  // optional int32 CommentId = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->commentid(), output);
  }

  // optional int32 ReplyCommentId = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->replycommentid(), output);
  }

  // optional string ReplyUsername = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->replyusername().data(), this->replyusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsCommentInfo.ReplyUsername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->replyusername(), output);
  }

  // optional uint32 IsNotRichText = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->isnotrichtext(), output);
  }

  // optional uint64 ReplyCommentId2 = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->replycommentid2(), output);
  }

  // optional uint64 CommentId2 = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->commentid2(), output);
  }

  // optional uint32 DeleteFlag = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->deleteflag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SnsCommentInfo)
}

::google::protobuf::uint8* SnsCommentInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SnsCommentInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Username = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsCommentInfo.Username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // optional string Nickname = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsCommentInfo.Nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // required uint32 Source = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->source(), target);
  }

  // required uint32 Type = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->type(), target);
  }

  // optional string Content = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsCommentInfo.Content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->content(), target);
  }

  // required uint32 CreateTime = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->createtime(), target);
  }

  // optional int32 CommentId = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->commentid(), target);
  }

  // optional int32 ReplyCommentId = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->replycommentid(), target);
  }

  // optional string ReplyUsername = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->replyusername().data(), this->replyusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsCommentInfo.ReplyUsername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->replyusername(), target);
  }

  // optional uint32 IsNotRichText = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->isnotrichtext(), target);
  }

  // optional uint64 ReplyCommentId2 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->replycommentid2(), target);
  }

  // optional uint64 CommentId2 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->commentid2(), target);
  }

  // optional uint32 DeleteFlag = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->deleteflag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SnsCommentInfo)
  return target;
}

size_t SnsCommentInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SnsCommentInfo)
  size_t total_size = 0;

  if (has_source()) {
    // required uint32 Source = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->source());
  }

  if (has_type()) {
    // required uint32 Type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_createtime()) {
    // required uint32 CreateTime = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->createtime());
  }

  return total_size;
}
size_t SnsCommentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SnsCommentInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000070) ^ 0x00000070) == 0) {  // All required fields are present.
    // required uint32 Source = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->source());

    // required uint32 Type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required uint32 CreateTime = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->createtime());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string Username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string Nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string Content = 5;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional string ReplyUsername = 9;
    if (has_replyusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->replyusername());
    }

  }
  // optional int32 CommentId = 7;
  if (has_commentid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->commentid());
  }

  if (_has_bits_[8 / 32] & 7936u) {
    // optional int32 ReplyCommentId = 8;
    if (has_replycommentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->replycommentid());
    }

    // optional uint32 IsNotRichText = 10;
    if (has_isnotrichtext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isnotrichtext());
    }

    // optional uint64 ReplyCommentId2 = 11;
    if (has_replycommentid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->replycommentid2());
    }

    // optional uint64 CommentId2 = 12;
    if (has_commentid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->commentid2());
    }

    // optional uint32 DeleteFlag = 13;
    if (has_deleteflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deleteflag());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnsCommentInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SnsCommentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SnsCommentInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnsCommentInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SnsCommentInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SnsCommentInfo)
    MergeFrom(*source);
  }
}

void SnsCommentInfo::MergeFrom(const SnsCommentInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SnsCommentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_replyusername();
      replyusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.replyusername_);
    }
    if (cached_has_bits & 0x00000010u) {
      source_ = from.source_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000040u) {
      createtime_ = from.createtime_;
    }
    if (cached_has_bits & 0x00000080u) {
      commentid_ = from.commentid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      replycommentid_ = from.replycommentid_;
    }
    if (cached_has_bits & 0x00000200u) {
      isnotrichtext_ = from.isnotrichtext_;
    }
    if (cached_has_bits & 0x00000400u) {
      replycommentid2_ = from.replycommentid2_;
    }
    if (cached_has_bits & 0x00000800u) {
      commentid2_ = from.commentid2_;
    }
    if (cached_has_bits & 0x00001000u) {
      deleteflag_ = from.deleteflag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SnsCommentInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SnsCommentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnsCommentInfo::CopyFrom(const SnsCommentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SnsCommentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsCommentInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000070) != 0x00000070) return false;
  return true;
}

void SnsCommentInfo::Swap(SnsCommentInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnsCommentInfo::InternalSwap(SnsCommentInfo* other) {
  username_.Swap(&other->username_);
  nickname_.Swap(&other->nickname_);
  content_.Swap(&other->content_);
  replyusername_.Swap(&other->replyusername_);
  std::swap(source_, other->source_);
  std::swap(type_, other->type_);
  std::swap(createtime_, other->createtime_);
  std::swap(commentid_, other->commentid_);
  std::swap(replycommentid_, other->replycommentid_);
  std::swap(isnotrichtext_, other->isnotrichtext_);
  std::swap(replycommentid2_, other->replycommentid2_);
  std::swap(commentid2_, other->commentid2_);
  std::swap(deleteflag_, other->deleteflag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnsCommentInfo::GetMetadata() const {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnsCommentInfo

// optional string Username = 1;
bool SnsCommentInfo::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnsCommentInfo::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void SnsCommentInfo::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnsCommentInfo::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& SnsCommentInfo::username() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsCommentInfo.Username)
  return username_.GetNoArena();
}
void SnsCommentInfo::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SnsCommentInfo.Username)
}
#if LANG_CXX11
void SnsCommentInfo::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SnsCommentInfo.Username)
}
#endif
void SnsCommentInfo::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SnsCommentInfo.Username)
}
void SnsCommentInfo::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SnsCommentInfo.Username)
}
::std::string* SnsCommentInfo::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.SnsCommentInfo.Username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnsCommentInfo::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.SnsCommentInfo.Username)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnsCommentInfo::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsCommentInfo.Username)
}

// optional string Nickname = 2;
bool SnsCommentInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SnsCommentInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
void SnsCommentInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
void SnsCommentInfo::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
const ::std::string& SnsCommentInfo::nickname() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsCommentInfo.Nickname)
  return nickname_.GetNoArena();
}
void SnsCommentInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SnsCommentInfo.Nickname)
}
#if LANG_CXX11
void SnsCommentInfo::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SnsCommentInfo.Nickname)
}
#endif
void SnsCommentInfo::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SnsCommentInfo.Nickname)
}
void SnsCommentInfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SnsCommentInfo.Nickname)
}
::std::string* SnsCommentInfo::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:micromsg.SnsCommentInfo.Nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnsCommentInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:micromsg.SnsCommentInfo.Nickname)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnsCommentInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsCommentInfo.Nickname)
}

// required uint32 Source = 3;
bool SnsCommentInfo::has_source() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SnsCommentInfo::set_has_source() {
  _has_bits_[0] |= 0x00000010u;
}
void SnsCommentInfo::clear_has_source() {
  _has_bits_[0] &= ~0x00000010u;
}
void SnsCommentInfo::clear_source() {
  source_ = 0u;
  clear_has_source();
}
::google::protobuf::uint32 SnsCommentInfo::source() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsCommentInfo.Source)
  return source_;
}
void SnsCommentInfo::set_source(::google::protobuf::uint32 value) {
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsCommentInfo.Source)
}

// required uint32 Type = 4;
bool SnsCommentInfo::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SnsCommentInfo::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
void SnsCommentInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void SnsCommentInfo::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 SnsCommentInfo::type() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsCommentInfo.Type)
  return type_;
}
void SnsCommentInfo::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsCommentInfo.Type)
}

// optional string Content = 5;
bool SnsCommentInfo::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SnsCommentInfo::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
void SnsCommentInfo::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
void SnsCommentInfo::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
const ::std::string& SnsCommentInfo::content() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsCommentInfo.Content)
  return content_.GetNoArena();
}
void SnsCommentInfo::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SnsCommentInfo.Content)
}
#if LANG_CXX11
void SnsCommentInfo::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SnsCommentInfo.Content)
}
#endif
void SnsCommentInfo::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SnsCommentInfo.Content)
}
void SnsCommentInfo::set_content(const char* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SnsCommentInfo.Content)
}
::std::string* SnsCommentInfo::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:micromsg.SnsCommentInfo.Content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnsCommentInfo::release_content() {
  // @@protoc_insertion_point(field_release:micromsg.SnsCommentInfo.Content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnsCommentInfo::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsCommentInfo.Content)
}

// required uint32 CreateTime = 6;
bool SnsCommentInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SnsCommentInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000040u;
}
void SnsCommentInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000040u;
}
void SnsCommentInfo::clear_createtime() {
  createtime_ = 0u;
  clear_has_createtime();
}
::google::protobuf::uint32 SnsCommentInfo::createtime() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsCommentInfo.CreateTime)
  return createtime_;
}
void SnsCommentInfo::set_createtime(::google::protobuf::uint32 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsCommentInfo.CreateTime)
}

// optional int32 CommentId = 7;
bool SnsCommentInfo::has_commentid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SnsCommentInfo::set_has_commentid() {
  _has_bits_[0] |= 0x00000080u;
}
void SnsCommentInfo::clear_has_commentid() {
  _has_bits_[0] &= ~0x00000080u;
}
void SnsCommentInfo::clear_commentid() {
  commentid_ = 0;
  clear_has_commentid();
}
::google::protobuf::int32 SnsCommentInfo::commentid() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsCommentInfo.CommentId)
  return commentid_;
}
void SnsCommentInfo::set_commentid(::google::protobuf::int32 value) {
  set_has_commentid();
  commentid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsCommentInfo.CommentId)
}

// optional int32 ReplyCommentId = 8;
bool SnsCommentInfo::has_replycommentid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SnsCommentInfo::set_has_replycommentid() {
  _has_bits_[0] |= 0x00000100u;
}
void SnsCommentInfo::clear_has_replycommentid() {
  _has_bits_[0] &= ~0x00000100u;
}
void SnsCommentInfo::clear_replycommentid() {
  replycommentid_ = 0;
  clear_has_replycommentid();
}
::google::protobuf::int32 SnsCommentInfo::replycommentid() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsCommentInfo.ReplyCommentId)
  return replycommentid_;
}
void SnsCommentInfo::set_replycommentid(::google::protobuf::int32 value) {
  set_has_replycommentid();
  replycommentid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsCommentInfo.ReplyCommentId)
}

// optional string ReplyUsername = 9;
bool SnsCommentInfo::has_replyusername() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SnsCommentInfo::set_has_replyusername() {
  _has_bits_[0] |= 0x00000008u;
}
void SnsCommentInfo::clear_has_replyusername() {
  _has_bits_[0] &= ~0x00000008u;
}
void SnsCommentInfo::clear_replyusername() {
  replyusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_replyusername();
}
const ::std::string& SnsCommentInfo::replyusername() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsCommentInfo.ReplyUsername)
  return replyusername_.GetNoArena();
}
void SnsCommentInfo::set_replyusername(const ::std::string& value) {
  set_has_replyusername();
  replyusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SnsCommentInfo.ReplyUsername)
}
#if LANG_CXX11
void SnsCommentInfo::set_replyusername(::std::string&& value) {
  set_has_replyusername();
  replyusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SnsCommentInfo.ReplyUsername)
}
#endif
void SnsCommentInfo::set_replyusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_replyusername();
  replyusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SnsCommentInfo.ReplyUsername)
}
void SnsCommentInfo::set_replyusername(const char* value, size_t size) {
  set_has_replyusername();
  replyusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SnsCommentInfo.ReplyUsername)
}
::std::string* SnsCommentInfo::mutable_replyusername() {
  set_has_replyusername();
  // @@protoc_insertion_point(field_mutable:micromsg.SnsCommentInfo.ReplyUsername)
  return replyusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnsCommentInfo::release_replyusername() {
  // @@protoc_insertion_point(field_release:micromsg.SnsCommentInfo.ReplyUsername)
  clear_has_replyusername();
  return replyusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnsCommentInfo::set_allocated_replyusername(::std::string* replyusername) {
  if (replyusername != NULL) {
    set_has_replyusername();
  } else {
    clear_has_replyusername();
  }
  replyusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), replyusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsCommentInfo.ReplyUsername)
}

// optional uint32 IsNotRichText = 10;
bool SnsCommentInfo::has_isnotrichtext() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SnsCommentInfo::set_has_isnotrichtext() {
  _has_bits_[0] |= 0x00000200u;
}
void SnsCommentInfo::clear_has_isnotrichtext() {
  _has_bits_[0] &= ~0x00000200u;
}
void SnsCommentInfo::clear_isnotrichtext() {
  isnotrichtext_ = 0u;
  clear_has_isnotrichtext();
}
::google::protobuf::uint32 SnsCommentInfo::isnotrichtext() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsCommentInfo.IsNotRichText)
  return isnotrichtext_;
}
void SnsCommentInfo::set_isnotrichtext(::google::protobuf::uint32 value) {
  set_has_isnotrichtext();
  isnotrichtext_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsCommentInfo.IsNotRichText)
}

// optional uint64 ReplyCommentId2 = 11;
bool SnsCommentInfo::has_replycommentid2() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SnsCommentInfo::set_has_replycommentid2() {
  _has_bits_[0] |= 0x00000400u;
}
void SnsCommentInfo::clear_has_replycommentid2() {
  _has_bits_[0] &= ~0x00000400u;
}
void SnsCommentInfo::clear_replycommentid2() {
  replycommentid2_ = GOOGLE_ULONGLONG(0);
  clear_has_replycommentid2();
}
::google::protobuf::uint64 SnsCommentInfo::replycommentid2() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsCommentInfo.ReplyCommentId2)
  return replycommentid2_;
}
void SnsCommentInfo::set_replycommentid2(::google::protobuf::uint64 value) {
  set_has_replycommentid2();
  replycommentid2_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsCommentInfo.ReplyCommentId2)
}

// optional uint64 CommentId2 = 12;
bool SnsCommentInfo::has_commentid2() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SnsCommentInfo::set_has_commentid2() {
  _has_bits_[0] |= 0x00000800u;
}
void SnsCommentInfo::clear_has_commentid2() {
  _has_bits_[0] &= ~0x00000800u;
}
void SnsCommentInfo::clear_commentid2() {
  commentid2_ = GOOGLE_ULONGLONG(0);
  clear_has_commentid2();
}
::google::protobuf::uint64 SnsCommentInfo::commentid2() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsCommentInfo.CommentId2)
  return commentid2_;
}
void SnsCommentInfo::set_commentid2(::google::protobuf::uint64 value) {
  set_has_commentid2();
  commentid2_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsCommentInfo.CommentId2)
}

// optional uint32 DeleteFlag = 13;
bool SnsCommentInfo::has_deleteflag() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SnsCommentInfo::set_has_deleteflag() {
  _has_bits_[0] |= 0x00001000u;
}
void SnsCommentInfo::clear_has_deleteflag() {
  _has_bits_[0] &= ~0x00001000u;
}
void SnsCommentInfo::clear_deleteflag() {
  deleteflag_ = 0u;
  clear_has_deleteflag();
}
::google::protobuf::uint32 SnsCommentInfo::deleteflag() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsCommentInfo.DeleteFlag)
  return deleteflag_;
}
void SnsCommentInfo::set_deleteflag(::google::protobuf::uint32 value) {
  set_has_deleteflag();
  deleteflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsCommentInfo.DeleteFlag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnsGroup::kGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnsGroup::SnsGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsns_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SnsGroup)
}
SnsGroup::SnsGroup(const SnsGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  groupid_ = from.groupid_;
  // @@protoc_insertion_point(copy_constructor:micromsg.SnsGroup)
}

void SnsGroup::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
}

SnsGroup::~SnsGroup() {
  // @@protoc_insertion_point(destructor:micromsg.SnsGroup)
  SharedDtor();
}

void SnsGroup::SharedDtor() {
}

void SnsGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnsGroup::descriptor() {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnsGroup& SnsGroup::default_instance() {
  protobuf_mmsns_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnsGroup* SnsGroup::New(::google::protobuf::Arena* arena) const {
  SnsGroup* n = new SnsGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnsGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SnsGroup)
  groupid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnsGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SnsGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 GroupId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_groupid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SnsGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SnsGroup)
  return false;
#undef DO_
}

void SnsGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SnsGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 GroupId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SnsGroup)
}

::google::protobuf::uint8* SnsGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SnsGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 GroupId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SnsGroup)
  return target;
}

size_t SnsGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SnsGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint64 GroupId = 1;
  if (has_groupid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->groupid());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnsGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SnsGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const SnsGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnsGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SnsGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SnsGroup)
    MergeFrom(*source);
  }
}

void SnsGroup::MergeFrom(const SnsGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SnsGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_groupid()) {
    set_groupid(from.groupid());
  }
}

void SnsGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SnsGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnsGroup::CopyFrom(const SnsGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SnsGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SnsGroup::Swap(SnsGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnsGroup::InternalSwap(SnsGroup* other) {
  std::swap(groupid_, other->groupid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnsGroup::GetMetadata() const {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnsGroup

// required uint64 GroupId = 1;
bool SnsGroup::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnsGroup::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
void SnsGroup::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnsGroup::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
::google::protobuf::uint64 SnsGroup::groupid() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsGroup.GroupId)
  return groupid_;
}
void SnsGroup::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsGroup.GroupId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnsObject::kIdFieldNumber;
const int SnsObject::kUsernameFieldNumber;
const int SnsObject::kNicknameFieldNumber;
const int SnsObject::kCreateTimeFieldNumber;
const int SnsObject::kObjectDescFieldNumber;
const int SnsObject::kLikeFlagFieldNumber;
const int SnsObject::kLikeCountFieldNumber;
const int SnsObject::kLikeUserListCountFieldNumber;
const int SnsObject::kLikeUserListFieldNumber;
const int SnsObject::kCommentCountFieldNumber;
const int SnsObject::kCommentUserListCountFieldNumber;
const int SnsObject::kCommentUserListFieldNumber;
const int SnsObject::kWithUserCountFieldNumber;
const int SnsObject::kWithUserListCountFieldNumber;
const int SnsObject::kWithUserListFieldNumber;
const int SnsObject::kExtFlagFieldNumber;
const int SnsObject::kNoChangeFieldNumber;
const int SnsObject::kGroupCountFieldNumber;
const int SnsObject::kGroupListFieldNumber;
const int SnsObject::kIsNotRichTextFieldNumber;
const int SnsObject::kReferUsernameFieldNumber;
const int SnsObject::kReferIdFieldNumber;
const int SnsObject::kBlackListCountFieldNumber;
const int SnsObject::kBlackListFieldNumber;
const int SnsObject::kDeleteFlagFieldNumber;
const int SnsObject::kGroupUserCountFieldNumber;
const int SnsObject::kGroupUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnsObject::SnsObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsns_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SnsObject)
}
SnsObject::SnsObject(const SnsObject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      likeuserlist_(from.likeuserlist_),
      commentuserlist_(from.commentuserlist_),
      withuserlist_(from.withuserlist_),
      grouplist_(from.grouplist_),
      blacklist_(from.blacklist_),
      groupuser_(from.groupuser_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nickname()) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  referusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_referusername()) {
    referusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.referusername_);
  }
  if (from.has_objectdesc()) {
    objectdesc_ = new ::micromsg::SKBuiltinBuffer_t(*from.objectdesc_);
  } else {
    objectdesc_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&groupusercount_) -
    reinterpret_cast<char*>(&id_) + sizeof(groupusercount_));
  // @@protoc_insertion_point(copy_constructor:micromsg.SnsObject)
}

void SnsObject::SharedCtor() {
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  referusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&objectdesc_, 0, reinterpret_cast<char*>(&groupusercount_) -
    reinterpret_cast<char*>(&objectdesc_) + sizeof(groupusercount_));
}

SnsObject::~SnsObject() {
  // @@protoc_insertion_point(destructor:micromsg.SnsObject)
  SharedDtor();
}

void SnsObject::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  referusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete objectdesc_;
  }
}

void SnsObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnsObject::descriptor() {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnsObject& SnsObject::default_instance() {
  protobuf_mmsns_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnsObject* SnsObject::New(::google::protobuf::Arena* arena) const {
  SnsObject* n = new SnsObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnsObject::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SnsObject)
  likeuserlist_.Clear();
  commentuserlist_.Clear();
  withuserlist_.Clear();
  grouplist_.Clear();
  blacklist_.Clear();
  groupuser_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    if (has_username()) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
    if (has_nickname()) {
      GOOGLE_DCHECK(!nickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*nickname_.UnsafeRawStringPointer())->clear();
    }
    if (has_referusername()) {
      GOOGLE_DCHECK(!referusername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*referusername_.UnsafeRawStringPointer())->clear();
    }
    if (has_objectdesc()) {
      GOOGLE_DCHECK(objectdesc_ != NULL);
      objectdesc_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&likecount_) -
      reinterpret_cast<char*>(&id_) + sizeof(likecount_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&likeuserlistcount_, 0, reinterpret_cast<char*>(&groupcount_) -
      reinterpret_cast<char*>(&likeuserlistcount_) + sizeof(groupcount_));
  }
  if (_has_bits_[16 / 32] & 2031616u) {
    ::memset(&isnotrichtext_, 0, reinterpret_cast<char*>(&groupusercount_) -
      reinterpret_cast<char*>(&isnotrichtext_) + sizeof(groupusercount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnsObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SnsObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 Id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Username = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SnsObject.Username");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Nickname = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SnsObject.Nickname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 CreateTime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_createtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t ObjectDesc = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_objectdesc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 LikeFlag = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_likeflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &likeflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 LikeCount = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_likecount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &likecount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 LikeUserListCount = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_likeuserlistcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &likeuserlistcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.SnsCommentInfo LikeUserList = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_likeuserlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 CommentCount = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_commentcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &commentcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 CommentUserListCount = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_commentuserlistcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &commentuserlistcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.SnsCommentInfo CommentUserList = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_commentuserlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 WithUserCount = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_withusercount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &withusercount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 WithUserListCount = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_withuserlistcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &withuserlistcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.SnsCommentInfo WithUserList = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_withuserlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ExtFlag = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_extflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 NoChange = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_nochange();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nochange_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 GroupCount = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_groupcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.SnsGroup GroupList = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_grouplist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 IsNotRichText = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_isnotrichtext();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isnotrichtext_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ReferUsername = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_referusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->referusername().data(), this->referusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SnsObject.ReferUsername");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ReferId = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_referid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &referid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 BlackListCount = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          set_has_blacklistcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blacklistcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.SKBuiltinString_t BlackList = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blacklist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 DeleteFlag = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u)) {
          set_has_deleteflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deleteflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 GroupUserCount = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u)) {
          set_has_groupusercount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupusercount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.SKBuiltinString_t GroupUser = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_groupuser()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SnsObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SnsObject)
  return false;
#undef DO_
}

void SnsObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SnsObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 Id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string Username = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsObject.Username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // optional string Nickname = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsObject.Nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nickname(), output);
  }

  // required uint32 CreateTime = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->createtime(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t ObjectDesc = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->objectdesc_, output);
  }

  // required uint32 LikeFlag = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->likeflag(), output);
  }

  // required uint32 LikeCount = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->likecount(), output);
  }

  // required uint32 LikeUserListCount = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->likeuserlistcount(), output);
  }

  // repeated .micromsg.SnsCommentInfo LikeUserList = 9;
  for (unsigned int i = 0, n = this->likeuserlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->likeuserlist(i), output);
  }

  // required uint32 CommentCount = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->commentcount(), output);
  }

  // required uint32 CommentUserListCount = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->commentuserlistcount(), output);
  }

  // repeated .micromsg.SnsCommentInfo CommentUserList = 12;
  for (unsigned int i = 0, n = this->commentuserlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->commentuserlist(i), output);
  }

  // required uint32 WithUserCount = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->withusercount(), output);
  }

  // required uint32 WithUserListCount = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->withuserlistcount(), output);
  }

  // repeated .micromsg.SnsCommentInfo WithUserList = 15;
  for (unsigned int i = 0, n = this->withuserlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->withuserlist(i), output);
  }

  // optional uint32 ExtFlag = 16;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->extflag(), output);
  }

  // optional uint32 NoChange = 17;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->nochange(), output);
  }

  // optional uint32 GroupCount = 18;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->groupcount(), output);
  }

  // repeated .micromsg.SnsGroup GroupList = 19;
  for (unsigned int i = 0, n = this->grouplist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->grouplist(i), output);
  }

  // optional uint32 IsNotRichText = 20;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->isnotrichtext(), output);
  }

  // optional string ReferUsername = 21;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->referusername().data(), this->referusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsObject.ReferUsername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->referusername(), output);
  }

  // optional uint64 ReferId = 22;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(22, this->referid(), output);
  }

  // optional uint32 BlackListCount = 23;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->blacklistcount(), output);
  }

  // repeated .micromsg.SKBuiltinString_t BlackList = 24;
  for (unsigned int i = 0, n = this->blacklist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->blacklist(i), output);
  }

  // optional uint32 DeleteFlag = 25;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->deleteflag(), output);
  }

  // optional uint32 GroupUserCount = 26;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->groupusercount(), output);
  }

  // repeated .micromsg.SKBuiltinString_t GroupUser = 27;
  for (unsigned int i = 0, n = this->groupuser_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->groupuser(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SnsObject)
}

::google::protobuf::uint8* SnsObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SnsObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 Id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional string Username = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsObject.Username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // optional string Nickname = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsObject.Nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  // required uint32 CreateTime = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->createtime(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t ObjectDesc = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->objectdesc_, deterministic, target);
  }

  // required uint32 LikeFlag = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->likeflag(), target);
  }

  // required uint32 LikeCount = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->likecount(), target);
  }

  // required uint32 LikeUserListCount = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->likeuserlistcount(), target);
  }

  // repeated .micromsg.SnsCommentInfo LikeUserList = 9;
  for (unsigned int i = 0, n = this->likeuserlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->likeuserlist(i), deterministic, target);
  }

  // required uint32 CommentCount = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->commentcount(), target);
  }

  // required uint32 CommentUserListCount = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->commentuserlistcount(), target);
  }

  // repeated .micromsg.SnsCommentInfo CommentUserList = 12;
  for (unsigned int i = 0, n = this->commentuserlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->commentuserlist(i), deterministic, target);
  }

  // required uint32 WithUserCount = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->withusercount(), target);
  }

  // required uint32 WithUserListCount = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->withuserlistcount(), target);
  }

  // repeated .micromsg.SnsCommentInfo WithUserList = 15;
  for (unsigned int i = 0, n = this->withuserlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, this->withuserlist(i), deterministic, target);
  }

  // optional uint32 ExtFlag = 16;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->extflag(), target);
  }

  // optional uint32 NoChange = 17;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->nochange(), target);
  }

  // optional uint32 GroupCount = 18;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->groupcount(), target);
  }

  // repeated .micromsg.SnsGroup GroupList = 19;
  for (unsigned int i = 0, n = this->grouplist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, this->grouplist(i), deterministic, target);
  }

  // optional uint32 IsNotRichText = 20;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->isnotrichtext(), target);
  }

  // optional string ReferUsername = 21;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->referusername().data(), this->referusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsObject.ReferUsername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->referusername(), target);
  }

  // optional uint64 ReferId = 22;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(22, this->referid(), target);
  }

  // optional uint32 BlackListCount = 23;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->blacklistcount(), target);
  }

  // repeated .micromsg.SKBuiltinString_t BlackList = 24;
  for (unsigned int i = 0, n = this->blacklist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, this->blacklist(i), deterministic, target);
  }

  // optional uint32 DeleteFlag = 25;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->deleteflag(), target);
  }

  // optional uint32 GroupUserCount = 26;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->groupusercount(), target);
  }

  // repeated .micromsg.SKBuiltinString_t GroupUser = 27;
  for (unsigned int i = 0, n = this->groupuser_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        27, this->groupuser(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SnsObject)
  return target;
}

size_t SnsObject::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SnsObject)
  size_t total_size = 0;

  if (has_objectdesc()) {
    // required .micromsg.SKBuiltinBuffer_t ObjectDesc = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->objectdesc_);
  }

  if (has_id()) {
    // required uint64 Id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  if (has_createtime()) {
    // required uint32 CreateTime = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->createtime());
  }

  if (has_likeflag()) {
    // required uint32 LikeFlag = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->likeflag());
  }

  if (has_likecount()) {
    // required uint32 LikeCount = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->likecount());
  }

  if (has_likeuserlistcount()) {
    // required uint32 LikeUserListCount = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->likeuserlistcount());
  }

  if (has_commentcount()) {
    // required uint32 CommentCount = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->commentcount());
  }

  if (has_commentuserlistcount()) {
    // required uint32 CommentUserListCount = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->commentuserlistcount());
  }

  if (has_withusercount()) {
    // required uint32 WithUserCount = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->withusercount());
  }

  if (has_withuserlistcount()) {
    // required uint32 WithUserListCount = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->withuserlistcount());
  }

  return total_size;
}
size_t SnsObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SnsObject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00001ff8) ^ 0x00001ff8) == 0) {  // All required fields are present.
    // required .micromsg.SKBuiltinBuffer_t ObjectDesc = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->objectdesc_);

    // required uint64 Id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());

    // required uint32 CreateTime = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->createtime());

    // required uint32 LikeFlag = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->likeflag());

    // required uint32 LikeCount = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->likecount());

    // required uint32 LikeUserListCount = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->likeuserlistcount());

    // required uint32 CommentCount = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->commentcount());

    // required uint32 CommentUserListCount = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->commentuserlistcount());

    // required uint32 WithUserCount = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->withusercount());

    // required uint32 WithUserListCount = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->withuserlistcount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.SnsCommentInfo LikeUserList = 9;
  {
    unsigned int count = this->likeuserlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->likeuserlist(i));
    }
  }

  // repeated .micromsg.SnsCommentInfo CommentUserList = 12;
  {
    unsigned int count = this->commentuserlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commentuserlist(i));
    }
  }

  // repeated .micromsg.SnsCommentInfo WithUserList = 15;
  {
    unsigned int count = this->withuserlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->withuserlist(i));
    }
  }

  // repeated .micromsg.SnsGroup GroupList = 19;
  {
    unsigned int count = this->grouplist_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->grouplist(i));
    }
  }

  // repeated .micromsg.SKBuiltinString_t BlackList = 24;
  {
    unsigned int count = this->blacklist_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blacklist(i));
    }
  }

  // repeated .micromsg.SKBuiltinString_t GroupUser = 27;
  {
    unsigned int count = this->groupuser_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->groupuser(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string Username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string Nickname = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string ReferUsername = 21;
    if (has_referusername()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->referusername());
    }

  }
  if (_has_bits_[8 / 32] & 57344u) {
    // optional uint32 ExtFlag = 16;
    if (has_extflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extflag());
    }

    // optional uint32 NoChange = 17;
    if (has_nochange()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nochange());
    }

    // optional uint32 GroupCount = 18;
    if (has_groupcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupcount());
    }

  }
  if (_has_bits_[16 / 32] & 2031616u) {
    // optional uint32 IsNotRichText = 20;
    if (has_isnotrichtext()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isnotrichtext());
    }

    // optional uint64 ReferId = 22;
    if (has_referid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->referid());
    }

    // optional uint32 BlackListCount = 23;
    if (has_blacklistcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blacklistcount());
    }

    // optional uint32 DeleteFlag = 25;
    if (has_deleteflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deleteflag());
    }

    // optional uint32 GroupUserCount = 26;
    if (has_groupusercount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupusercount());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnsObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SnsObject)
  GOOGLE_DCHECK_NE(&from, this);
  const SnsObject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnsObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SnsObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SnsObject)
    MergeFrom(*source);
  }
}

void SnsObject::MergeFrom(const SnsObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SnsObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  likeuserlist_.MergeFrom(from.likeuserlist_);
  commentuserlist_.MergeFrom(from.commentuserlist_);
  withuserlist_.MergeFrom(from.withuserlist_);
  grouplist_.MergeFrom(from.grouplist_);
  blacklist_.MergeFrom(from.blacklist_);
  groupuser_.MergeFrom(from.groupuser_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_referusername();
      referusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.referusername_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_objectdesc()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.objectdesc());
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      createtime_ = from.createtime_;
    }
    if (cached_has_bits & 0x00000040u) {
      likeflag_ = from.likeflag_;
    }
    if (cached_has_bits & 0x00000080u) {
      likecount_ = from.likecount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      likeuserlistcount_ = from.likeuserlistcount_;
    }
    if (cached_has_bits & 0x00000200u) {
      commentcount_ = from.commentcount_;
    }
    if (cached_has_bits & 0x00000400u) {
      commentuserlistcount_ = from.commentuserlistcount_;
    }
    if (cached_has_bits & 0x00000800u) {
      withusercount_ = from.withusercount_;
    }
    if (cached_has_bits & 0x00001000u) {
      withuserlistcount_ = from.withuserlistcount_;
    }
    if (cached_has_bits & 0x00002000u) {
      extflag_ = from.extflag_;
    }
    if (cached_has_bits & 0x00004000u) {
      nochange_ = from.nochange_;
    }
    if (cached_has_bits & 0x00008000u) {
      groupcount_ = from.groupcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 2031616u) {
    if (cached_has_bits & 0x00010000u) {
      isnotrichtext_ = from.isnotrichtext_;
    }
    if (cached_has_bits & 0x00020000u) {
      referid_ = from.referid_;
    }
    if (cached_has_bits & 0x00040000u) {
      blacklistcount_ = from.blacklistcount_;
    }
    if (cached_has_bits & 0x00080000u) {
      deleteflag_ = from.deleteflag_;
    }
    if (cached_has_bits & 0x00100000u) {
      groupusercount_ = from.groupusercount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SnsObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SnsObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnsObject::CopyFrom(const SnsObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SnsObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001ff8) != 0x00001ff8) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->likeuserlist())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->commentuserlist())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->withuserlist())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->grouplist())) return false;
  if (has_objectdesc()) {
    if (!this->objectdesc_->IsInitialized()) return false;
  }
  return true;
}

void SnsObject::Swap(SnsObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnsObject::InternalSwap(SnsObject* other) {
  likeuserlist_.InternalSwap(&other->likeuserlist_);
  commentuserlist_.InternalSwap(&other->commentuserlist_);
  withuserlist_.InternalSwap(&other->withuserlist_);
  grouplist_.InternalSwap(&other->grouplist_);
  blacklist_.InternalSwap(&other->blacklist_);
  groupuser_.InternalSwap(&other->groupuser_);
  username_.Swap(&other->username_);
  nickname_.Swap(&other->nickname_);
  referusername_.Swap(&other->referusername_);
  std::swap(objectdesc_, other->objectdesc_);
  std::swap(id_, other->id_);
  std::swap(createtime_, other->createtime_);
  std::swap(likeflag_, other->likeflag_);
  std::swap(likecount_, other->likecount_);
  std::swap(likeuserlistcount_, other->likeuserlistcount_);
  std::swap(commentcount_, other->commentcount_);
  std::swap(commentuserlistcount_, other->commentuserlistcount_);
  std::swap(withusercount_, other->withusercount_);
  std::swap(withuserlistcount_, other->withuserlistcount_);
  std::swap(extflag_, other->extflag_);
  std::swap(nochange_, other->nochange_);
  std::swap(groupcount_, other->groupcount_);
  std::swap(isnotrichtext_, other->isnotrichtext_);
  std::swap(referid_, other->referid_);
  std::swap(blacklistcount_, other->blacklistcount_);
  std::swap(deleteflag_, other->deleteflag_);
  std::swap(groupusercount_, other->groupusercount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnsObject::GetMetadata() const {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnsObject

// required uint64 Id = 1;
bool SnsObject::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SnsObject::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
void SnsObject::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void SnsObject::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
::google::protobuf::uint64 SnsObject::id() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsObject.Id)
  return id_;
}
void SnsObject::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsObject.Id)
}

// optional string Username = 2;
bool SnsObject::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnsObject::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void SnsObject::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnsObject::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& SnsObject::username() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsObject.Username)
  return username_.GetNoArena();
}
void SnsObject::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SnsObject.Username)
}
#if LANG_CXX11
void SnsObject::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SnsObject.Username)
}
#endif
void SnsObject::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SnsObject.Username)
}
void SnsObject::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SnsObject.Username)
}
::std::string* SnsObject::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.SnsObject.Username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnsObject::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.SnsObject.Username)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnsObject::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsObject.Username)
}

// optional string Nickname = 3;
bool SnsObject::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SnsObject::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
void SnsObject::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
void SnsObject::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
const ::std::string& SnsObject::nickname() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsObject.Nickname)
  return nickname_.GetNoArena();
}
void SnsObject::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SnsObject.Nickname)
}
#if LANG_CXX11
void SnsObject::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SnsObject.Nickname)
}
#endif
void SnsObject::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SnsObject.Nickname)
}
void SnsObject::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SnsObject.Nickname)
}
::std::string* SnsObject::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:micromsg.SnsObject.Nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnsObject::release_nickname() {
  // @@protoc_insertion_point(field_release:micromsg.SnsObject.Nickname)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnsObject::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsObject.Nickname)
}

// required uint32 CreateTime = 4;
bool SnsObject::has_createtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SnsObject::set_has_createtime() {
  _has_bits_[0] |= 0x00000020u;
}
void SnsObject::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000020u;
}
void SnsObject::clear_createtime() {
  createtime_ = 0u;
  clear_has_createtime();
}
::google::protobuf::uint32 SnsObject::createtime() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsObject.CreateTime)
  return createtime_;
}
void SnsObject::set_createtime(::google::protobuf::uint32 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsObject.CreateTime)
}

// required .micromsg.SKBuiltinBuffer_t ObjectDesc = 5;
bool SnsObject::has_objectdesc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SnsObject::set_has_objectdesc() {
  _has_bits_[0] |= 0x00000008u;
}
void SnsObject::clear_has_objectdesc() {
  _has_bits_[0] &= ~0x00000008u;
}
void SnsObject::clear_objectdesc() {
  if (objectdesc_ != NULL) objectdesc_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_objectdesc();
}
const ::micromsg::SKBuiltinBuffer_t& SnsObject::objectdesc() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsObject.ObjectDesc)
  return objectdesc_ != NULL ? *objectdesc_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* SnsObject::mutable_objectdesc() {
  set_has_objectdesc();
  if (objectdesc_ == NULL) {
    objectdesc_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsObject.ObjectDesc)
  return objectdesc_;
}
::micromsg::SKBuiltinBuffer_t* SnsObject::release_objectdesc() {
  // @@protoc_insertion_point(field_release:micromsg.SnsObject.ObjectDesc)
  clear_has_objectdesc();
  ::micromsg::SKBuiltinBuffer_t* temp = objectdesc_;
  objectdesc_ = NULL;
  return temp;
}
void SnsObject::set_allocated_objectdesc(::micromsg::SKBuiltinBuffer_t* objectdesc) {
  delete objectdesc_;
  objectdesc_ = objectdesc;
  if (objectdesc) {
    set_has_objectdesc();
  } else {
    clear_has_objectdesc();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsObject.ObjectDesc)
}

// required uint32 LikeFlag = 6;
bool SnsObject::has_likeflag() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SnsObject::set_has_likeflag() {
  _has_bits_[0] |= 0x00000040u;
}
void SnsObject::clear_has_likeflag() {
  _has_bits_[0] &= ~0x00000040u;
}
void SnsObject::clear_likeflag() {
  likeflag_ = 0u;
  clear_has_likeflag();
}
::google::protobuf::uint32 SnsObject::likeflag() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsObject.LikeFlag)
  return likeflag_;
}
void SnsObject::set_likeflag(::google::protobuf::uint32 value) {
  set_has_likeflag();
  likeflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsObject.LikeFlag)
}

// required uint32 LikeCount = 7;
bool SnsObject::has_likecount() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SnsObject::set_has_likecount() {
  _has_bits_[0] |= 0x00000080u;
}
void SnsObject::clear_has_likecount() {
  _has_bits_[0] &= ~0x00000080u;
}
void SnsObject::clear_likecount() {
  likecount_ = 0u;
  clear_has_likecount();
}
::google::protobuf::uint32 SnsObject::likecount() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsObject.LikeCount)
  return likecount_;
}
void SnsObject::set_likecount(::google::protobuf::uint32 value) {
  set_has_likecount();
  likecount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsObject.LikeCount)
}

// required uint32 LikeUserListCount = 8;
bool SnsObject::has_likeuserlistcount() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SnsObject::set_has_likeuserlistcount() {
  _has_bits_[0] |= 0x00000100u;
}
void SnsObject::clear_has_likeuserlistcount() {
  _has_bits_[0] &= ~0x00000100u;
}
void SnsObject::clear_likeuserlistcount() {
  likeuserlistcount_ = 0u;
  clear_has_likeuserlistcount();
}
::google::protobuf::uint32 SnsObject::likeuserlistcount() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsObject.LikeUserListCount)
  return likeuserlistcount_;
}
void SnsObject::set_likeuserlistcount(::google::protobuf::uint32 value) {
  set_has_likeuserlistcount();
  likeuserlistcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsObject.LikeUserListCount)
}

// repeated .micromsg.SnsCommentInfo LikeUserList = 9;
int SnsObject::likeuserlist_size() const {
  return likeuserlist_.size();
}
void SnsObject::clear_likeuserlist() {
  likeuserlist_.Clear();
}
const ::micromsg::SnsCommentInfo& SnsObject::likeuserlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.SnsObject.LikeUserList)
  return likeuserlist_.Get(index);
}
::micromsg::SnsCommentInfo* SnsObject::mutable_likeuserlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.SnsObject.LikeUserList)
  return likeuserlist_.Mutable(index);
}
::micromsg::SnsCommentInfo* SnsObject::add_likeuserlist() {
  // @@protoc_insertion_point(field_add:micromsg.SnsObject.LikeUserList)
  return likeuserlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::SnsCommentInfo >*
SnsObject::mutable_likeuserlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.SnsObject.LikeUserList)
  return &likeuserlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::SnsCommentInfo >&
SnsObject::likeuserlist() const {
  // @@protoc_insertion_point(field_list:micromsg.SnsObject.LikeUserList)
  return likeuserlist_;
}

// required uint32 CommentCount = 10;
bool SnsObject::has_commentcount() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SnsObject::set_has_commentcount() {
  _has_bits_[0] |= 0x00000200u;
}
void SnsObject::clear_has_commentcount() {
  _has_bits_[0] &= ~0x00000200u;
}
void SnsObject::clear_commentcount() {
  commentcount_ = 0u;
  clear_has_commentcount();
}
::google::protobuf::uint32 SnsObject::commentcount() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsObject.CommentCount)
  return commentcount_;
}
void SnsObject::set_commentcount(::google::protobuf::uint32 value) {
  set_has_commentcount();
  commentcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsObject.CommentCount)
}

// required uint32 CommentUserListCount = 11;
bool SnsObject::has_commentuserlistcount() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SnsObject::set_has_commentuserlistcount() {
  _has_bits_[0] |= 0x00000400u;
}
void SnsObject::clear_has_commentuserlistcount() {
  _has_bits_[0] &= ~0x00000400u;
}
void SnsObject::clear_commentuserlistcount() {
  commentuserlistcount_ = 0u;
  clear_has_commentuserlistcount();
}
::google::protobuf::uint32 SnsObject::commentuserlistcount() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsObject.CommentUserListCount)
  return commentuserlistcount_;
}
void SnsObject::set_commentuserlistcount(::google::protobuf::uint32 value) {
  set_has_commentuserlistcount();
  commentuserlistcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsObject.CommentUserListCount)
}

// repeated .micromsg.SnsCommentInfo CommentUserList = 12;
int SnsObject::commentuserlist_size() const {
  return commentuserlist_.size();
}
void SnsObject::clear_commentuserlist() {
  commentuserlist_.Clear();
}
const ::micromsg::SnsCommentInfo& SnsObject::commentuserlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.SnsObject.CommentUserList)
  return commentuserlist_.Get(index);
}
::micromsg::SnsCommentInfo* SnsObject::mutable_commentuserlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.SnsObject.CommentUserList)
  return commentuserlist_.Mutable(index);
}
::micromsg::SnsCommentInfo* SnsObject::add_commentuserlist() {
  // @@protoc_insertion_point(field_add:micromsg.SnsObject.CommentUserList)
  return commentuserlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::SnsCommentInfo >*
SnsObject::mutable_commentuserlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.SnsObject.CommentUserList)
  return &commentuserlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::SnsCommentInfo >&
SnsObject::commentuserlist() const {
  // @@protoc_insertion_point(field_list:micromsg.SnsObject.CommentUserList)
  return commentuserlist_;
}

// required uint32 WithUserCount = 13;
bool SnsObject::has_withusercount() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SnsObject::set_has_withusercount() {
  _has_bits_[0] |= 0x00000800u;
}
void SnsObject::clear_has_withusercount() {
  _has_bits_[0] &= ~0x00000800u;
}
void SnsObject::clear_withusercount() {
  withusercount_ = 0u;
  clear_has_withusercount();
}
::google::protobuf::uint32 SnsObject::withusercount() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsObject.WithUserCount)
  return withusercount_;
}
void SnsObject::set_withusercount(::google::protobuf::uint32 value) {
  set_has_withusercount();
  withusercount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsObject.WithUserCount)
}

// required uint32 WithUserListCount = 14;
bool SnsObject::has_withuserlistcount() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SnsObject::set_has_withuserlistcount() {
  _has_bits_[0] |= 0x00001000u;
}
void SnsObject::clear_has_withuserlistcount() {
  _has_bits_[0] &= ~0x00001000u;
}
void SnsObject::clear_withuserlistcount() {
  withuserlistcount_ = 0u;
  clear_has_withuserlistcount();
}
::google::protobuf::uint32 SnsObject::withuserlistcount() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsObject.WithUserListCount)
  return withuserlistcount_;
}
void SnsObject::set_withuserlistcount(::google::protobuf::uint32 value) {
  set_has_withuserlistcount();
  withuserlistcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsObject.WithUserListCount)
}

// repeated .micromsg.SnsCommentInfo WithUserList = 15;
int SnsObject::withuserlist_size() const {
  return withuserlist_.size();
}
void SnsObject::clear_withuserlist() {
  withuserlist_.Clear();
}
const ::micromsg::SnsCommentInfo& SnsObject::withuserlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.SnsObject.WithUserList)
  return withuserlist_.Get(index);
}
::micromsg::SnsCommentInfo* SnsObject::mutable_withuserlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.SnsObject.WithUserList)
  return withuserlist_.Mutable(index);
}
::micromsg::SnsCommentInfo* SnsObject::add_withuserlist() {
  // @@protoc_insertion_point(field_add:micromsg.SnsObject.WithUserList)
  return withuserlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::SnsCommentInfo >*
SnsObject::mutable_withuserlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.SnsObject.WithUserList)
  return &withuserlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::SnsCommentInfo >&
SnsObject::withuserlist() const {
  // @@protoc_insertion_point(field_list:micromsg.SnsObject.WithUserList)
  return withuserlist_;
}

// optional uint32 ExtFlag = 16;
bool SnsObject::has_extflag() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void SnsObject::set_has_extflag() {
  _has_bits_[0] |= 0x00002000u;
}
void SnsObject::clear_has_extflag() {
  _has_bits_[0] &= ~0x00002000u;
}
void SnsObject::clear_extflag() {
  extflag_ = 0u;
  clear_has_extflag();
}
::google::protobuf::uint32 SnsObject::extflag() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsObject.ExtFlag)
  return extflag_;
}
void SnsObject::set_extflag(::google::protobuf::uint32 value) {
  set_has_extflag();
  extflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsObject.ExtFlag)
}

// optional uint32 NoChange = 17;
bool SnsObject::has_nochange() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void SnsObject::set_has_nochange() {
  _has_bits_[0] |= 0x00004000u;
}
void SnsObject::clear_has_nochange() {
  _has_bits_[0] &= ~0x00004000u;
}
void SnsObject::clear_nochange() {
  nochange_ = 0u;
  clear_has_nochange();
}
::google::protobuf::uint32 SnsObject::nochange() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsObject.NoChange)
  return nochange_;
}
void SnsObject::set_nochange(::google::protobuf::uint32 value) {
  set_has_nochange();
  nochange_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsObject.NoChange)
}

// optional uint32 GroupCount = 18;
bool SnsObject::has_groupcount() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void SnsObject::set_has_groupcount() {
  _has_bits_[0] |= 0x00008000u;
}
void SnsObject::clear_has_groupcount() {
  _has_bits_[0] &= ~0x00008000u;
}
void SnsObject::clear_groupcount() {
  groupcount_ = 0u;
  clear_has_groupcount();
}
::google::protobuf::uint32 SnsObject::groupcount() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsObject.GroupCount)
  return groupcount_;
}
void SnsObject::set_groupcount(::google::protobuf::uint32 value) {
  set_has_groupcount();
  groupcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsObject.GroupCount)
}

// repeated .micromsg.SnsGroup GroupList = 19;
int SnsObject::grouplist_size() const {
  return grouplist_.size();
}
void SnsObject::clear_grouplist() {
  grouplist_.Clear();
}
const ::micromsg::SnsGroup& SnsObject::grouplist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.SnsObject.GroupList)
  return grouplist_.Get(index);
}
::micromsg::SnsGroup* SnsObject::mutable_grouplist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.SnsObject.GroupList)
  return grouplist_.Mutable(index);
}
::micromsg::SnsGroup* SnsObject::add_grouplist() {
  // @@protoc_insertion_point(field_add:micromsg.SnsObject.GroupList)
  return grouplist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::SnsGroup >*
SnsObject::mutable_grouplist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.SnsObject.GroupList)
  return &grouplist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::SnsGroup >&
SnsObject::grouplist() const {
  // @@protoc_insertion_point(field_list:micromsg.SnsObject.GroupList)
  return grouplist_;
}

// optional uint32 IsNotRichText = 20;
bool SnsObject::has_isnotrichtext() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void SnsObject::set_has_isnotrichtext() {
  _has_bits_[0] |= 0x00010000u;
}
void SnsObject::clear_has_isnotrichtext() {
  _has_bits_[0] &= ~0x00010000u;
}
void SnsObject::clear_isnotrichtext() {
  isnotrichtext_ = 0u;
  clear_has_isnotrichtext();
}
::google::protobuf::uint32 SnsObject::isnotrichtext() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsObject.IsNotRichText)
  return isnotrichtext_;
}
void SnsObject::set_isnotrichtext(::google::protobuf::uint32 value) {
  set_has_isnotrichtext();
  isnotrichtext_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsObject.IsNotRichText)
}

// optional string ReferUsername = 21;
bool SnsObject::has_referusername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SnsObject::set_has_referusername() {
  _has_bits_[0] |= 0x00000004u;
}
void SnsObject::clear_has_referusername() {
  _has_bits_[0] &= ~0x00000004u;
}
void SnsObject::clear_referusername() {
  referusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_referusername();
}
const ::std::string& SnsObject::referusername() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsObject.ReferUsername)
  return referusername_.GetNoArena();
}
void SnsObject::set_referusername(const ::std::string& value) {
  set_has_referusername();
  referusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SnsObject.ReferUsername)
}
#if LANG_CXX11
void SnsObject::set_referusername(::std::string&& value) {
  set_has_referusername();
  referusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SnsObject.ReferUsername)
}
#endif
void SnsObject::set_referusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_referusername();
  referusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SnsObject.ReferUsername)
}
void SnsObject::set_referusername(const char* value, size_t size) {
  set_has_referusername();
  referusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SnsObject.ReferUsername)
}
::std::string* SnsObject::mutable_referusername() {
  set_has_referusername();
  // @@protoc_insertion_point(field_mutable:micromsg.SnsObject.ReferUsername)
  return referusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnsObject::release_referusername() {
  // @@protoc_insertion_point(field_release:micromsg.SnsObject.ReferUsername)
  clear_has_referusername();
  return referusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnsObject::set_allocated_referusername(::std::string* referusername) {
  if (referusername != NULL) {
    set_has_referusername();
  } else {
    clear_has_referusername();
  }
  referusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), referusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsObject.ReferUsername)
}

// optional uint64 ReferId = 22;
bool SnsObject::has_referid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void SnsObject::set_has_referid() {
  _has_bits_[0] |= 0x00020000u;
}
void SnsObject::clear_has_referid() {
  _has_bits_[0] &= ~0x00020000u;
}
void SnsObject::clear_referid() {
  referid_ = GOOGLE_ULONGLONG(0);
  clear_has_referid();
}
::google::protobuf::uint64 SnsObject::referid() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsObject.ReferId)
  return referid_;
}
void SnsObject::set_referid(::google::protobuf::uint64 value) {
  set_has_referid();
  referid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsObject.ReferId)
}

// optional uint32 BlackListCount = 23;
bool SnsObject::has_blacklistcount() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void SnsObject::set_has_blacklistcount() {
  _has_bits_[0] |= 0x00040000u;
}
void SnsObject::clear_has_blacklistcount() {
  _has_bits_[0] &= ~0x00040000u;
}
void SnsObject::clear_blacklistcount() {
  blacklistcount_ = 0u;
  clear_has_blacklistcount();
}
::google::protobuf::uint32 SnsObject::blacklistcount() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsObject.BlackListCount)
  return blacklistcount_;
}
void SnsObject::set_blacklistcount(::google::protobuf::uint32 value) {
  set_has_blacklistcount();
  blacklistcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsObject.BlackListCount)
}

// repeated .micromsg.SKBuiltinString_t BlackList = 24;
int SnsObject::blacklist_size() const {
  return blacklist_.size();
}
void SnsObject::clear_blacklist() {
  blacklist_.Clear();
}
const ::micromsg::SKBuiltinString_t& SnsObject::blacklist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.SnsObject.BlackList)
  return blacklist_.Get(index);
}
::micromsg::SKBuiltinString_t* SnsObject::mutable_blacklist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.SnsObject.BlackList)
  return blacklist_.Mutable(index);
}
::micromsg::SKBuiltinString_t* SnsObject::add_blacklist() {
  // @@protoc_insertion_point(field_add:micromsg.SnsObject.BlackList)
  return blacklist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >*
SnsObject::mutable_blacklist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.SnsObject.BlackList)
  return &blacklist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >&
SnsObject::blacklist() const {
  // @@protoc_insertion_point(field_list:micromsg.SnsObject.BlackList)
  return blacklist_;
}

// optional uint32 DeleteFlag = 25;
bool SnsObject::has_deleteflag() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void SnsObject::set_has_deleteflag() {
  _has_bits_[0] |= 0x00080000u;
}
void SnsObject::clear_has_deleteflag() {
  _has_bits_[0] &= ~0x00080000u;
}
void SnsObject::clear_deleteflag() {
  deleteflag_ = 0u;
  clear_has_deleteflag();
}
::google::protobuf::uint32 SnsObject::deleteflag() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsObject.DeleteFlag)
  return deleteflag_;
}
void SnsObject::set_deleteflag(::google::protobuf::uint32 value) {
  set_has_deleteflag();
  deleteflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsObject.DeleteFlag)
}

// optional uint32 GroupUserCount = 26;
bool SnsObject::has_groupusercount() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void SnsObject::set_has_groupusercount() {
  _has_bits_[0] |= 0x00100000u;
}
void SnsObject::clear_has_groupusercount() {
  _has_bits_[0] &= ~0x00100000u;
}
void SnsObject::clear_groupusercount() {
  groupusercount_ = 0u;
  clear_has_groupusercount();
}
::google::protobuf::uint32 SnsObject::groupusercount() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsObject.GroupUserCount)
  return groupusercount_;
}
void SnsObject::set_groupusercount(::google::protobuf::uint32 value) {
  set_has_groupusercount();
  groupusercount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsObject.GroupUserCount)
}

// repeated .micromsg.SKBuiltinString_t GroupUser = 27;
int SnsObject::groupuser_size() const {
  return groupuser_.size();
}
void SnsObject::clear_groupuser() {
  groupuser_.Clear();
}
const ::micromsg::SKBuiltinString_t& SnsObject::groupuser(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.SnsObject.GroupUser)
  return groupuser_.Get(index);
}
::micromsg::SKBuiltinString_t* SnsObject::mutable_groupuser(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.SnsObject.GroupUser)
  return groupuser_.Mutable(index);
}
::micromsg::SKBuiltinString_t* SnsObject::add_groupuser() {
  // @@protoc_insertion_point(field_add:micromsg.SnsObject.GroupUser)
  return groupuser_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >*
SnsObject::mutable_groupuser() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.SnsObject.GroupUser)
  return &groupuser_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >&
SnsObject::groupuser() const {
  // @@protoc_insertion_point(field_list:micromsg.SnsObject.GroupUser)
  return groupuser_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnsADObject::kSnsObjectFieldNumber;
const int SnsADObject::kADXMLFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnsADObject::SnsADObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsns_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SnsADObject)
}
SnsADObject::SnsADObject(const SnsADObject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_snsobject()) {
    snsobject_ = new ::micromsg::SnsObject(*from.snsobject_);
  } else {
    snsobject_ = NULL;
  }
  if (from.has_adxml()) {
    adxml_ = new ::micromsg::SKBuiltinString_t(*from.adxml_);
  } else {
    adxml_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.SnsADObject)
}

void SnsADObject::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&snsobject_, 0, reinterpret_cast<char*>(&adxml_) -
    reinterpret_cast<char*>(&snsobject_) + sizeof(adxml_));
}

SnsADObject::~SnsADObject() {
  // @@protoc_insertion_point(destructor:micromsg.SnsADObject)
  SharedDtor();
}

void SnsADObject::SharedDtor() {
  if (this != internal_default_instance()) {
    delete snsobject_;
  }
  if (this != internal_default_instance()) {
    delete adxml_;
  }
}

void SnsADObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnsADObject::descriptor() {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnsADObject& SnsADObject::default_instance() {
  protobuf_mmsns_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnsADObject* SnsADObject::New(::google::protobuf::Arena* arena) const {
  SnsADObject* n = new SnsADObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnsADObject::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SnsADObject)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_snsobject()) {
      GOOGLE_DCHECK(snsobject_ != NULL);
      snsobject_->::micromsg::SnsObject::Clear();
    }
    if (has_adxml()) {
      GOOGLE_DCHECK(adxml_ != NULL);
      adxml_->::micromsg::SKBuiltinString_t::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnsADObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SnsADObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.SnsObject SnsObject = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_snsobject()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinString_t ADXML = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adxml()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SnsADObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SnsADObject)
  return false;
#undef DO_
}

void SnsADObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SnsADObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SnsObject SnsObject = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->snsobject_, output);
  }

  // optional .micromsg.SKBuiltinString_t ADXML = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->adxml_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SnsADObject)
}

::google::protobuf::uint8* SnsADObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SnsADObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SnsObject SnsObject = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->snsobject_, deterministic, target);
  }

  // optional .micromsg.SKBuiltinString_t ADXML = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->adxml_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SnsADObject)
  return target;
}

size_t SnsADObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SnsADObject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.SnsObject SnsObject = 1;
  if (has_snsobject()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->snsobject_);
  }
  // optional .micromsg.SKBuiltinString_t ADXML = 2;
  if (has_adxml()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->adxml_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnsADObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SnsADObject)
  GOOGLE_DCHECK_NE(&from, this);
  const SnsADObject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnsADObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SnsADObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SnsADObject)
    MergeFrom(*source);
  }
}

void SnsADObject::MergeFrom(const SnsADObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SnsADObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_snsobject()->::micromsg::SnsObject::MergeFrom(from.snsobject());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_adxml()->::micromsg::SKBuiltinString_t::MergeFrom(from.adxml());
    }
  }
}

void SnsADObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SnsADObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnsADObject::CopyFrom(const SnsADObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SnsADObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsADObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_snsobject()) {
    if (!this->snsobject_->IsInitialized()) return false;
  }
  return true;
}

void SnsADObject::Swap(SnsADObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnsADObject::InternalSwap(SnsADObject* other) {
  std::swap(snsobject_, other->snsobject_);
  std::swap(adxml_, other->adxml_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnsADObject::GetMetadata() const {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnsADObject

// required .micromsg.SnsObject SnsObject = 1;
bool SnsADObject::has_snsobject() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnsADObject::set_has_snsobject() {
  _has_bits_[0] |= 0x00000001u;
}
void SnsADObject::clear_has_snsobject() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnsADObject::clear_snsobject() {
  if (snsobject_ != NULL) snsobject_->::micromsg::SnsObject::Clear();
  clear_has_snsobject();
}
const ::micromsg::SnsObject& SnsADObject::snsobject() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsADObject.SnsObject)
  return snsobject_ != NULL ? *snsobject_
                         : *::micromsg::SnsObject::internal_default_instance();
}
::micromsg::SnsObject* SnsADObject::mutable_snsobject() {
  set_has_snsobject();
  if (snsobject_ == NULL) {
    snsobject_ = new ::micromsg::SnsObject;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsADObject.SnsObject)
  return snsobject_;
}
::micromsg::SnsObject* SnsADObject::release_snsobject() {
  // @@protoc_insertion_point(field_release:micromsg.SnsADObject.SnsObject)
  clear_has_snsobject();
  ::micromsg::SnsObject* temp = snsobject_;
  snsobject_ = NULL;
  return temp;
}
void SnsADObject::set_allocated_snsobject(::micromsg::SnsObject* snsobject) {
  delete snsobject_;
  snsobject_ = snsobject;
  if (snsobject) {
    set_has_snsobject();
  } else {
    clear_has_snsobject();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsADObject.SnsObject)
}

// optional .micromsg.SKBuiltinString_t ADXML = 2;
bool SnsADObject::has_adxml() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SnsADObject::set_has_adxml() {
  _has_bits_[0] |= 0x00000002u;
}
void SnsADObject::clear_has_adxml() {
  _has_bits_[0] &= ~0x00000002u;
}
void SnsADObject::clear_adxml() {
  if (adxml_ != NULL) adxml_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_adxml();
}
const ::micromsg::SKBuiltinString_t& SnsADObject::adxml() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsADObject.ADXML)
  return adxml_ != NULL ? *adxml_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* SnsADObject::mutable_adxml() {
  set_has_adxml();
  if (adxml_ == NULL) {
    adxml_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsADObject.ADXML)
  return adxml_;
}
::micromsg::SKBuiltinString_t* SnsADObject::release_adxml() {
  // @@protoc_insertion_point(field_release:micromsg.SnsADObject.ADXML)
  clear_has_adxml();
  ::micromsg::SKBuiltinString_t* temp = adxml_;
  adxml_ = NULL;
  return temp;
}
void SnsADObject::set_allocated_adxml(::micromsg::SKBuiltinString_t* adxml) {
  delete adxml_;
  adxml_ = adxml;
  if (adxml) {
    set_has_adxml();
  } else {
    clear_has_adxml();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsADObject.ADXML)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdvertiseObject::kSnsADObjectFieldNumber;
const int AdvertiseObject::kADInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdvertiseObject::AdvertiseObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsns_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.AdvertiseObject)
}
AdvertiseObject::AdvertiseObject(const AdvertiseObject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_snsadobject()) {
    snsadobject_ = new ::micromsg::SnsADObject(*from.snsadobject_);
  } else {
    snsadobject_ = NULL;
  }
  if (from.has_adinfo()) {
    adinfo_ = new ::micromsg::SKBuiltinString_t(*from.adinfo_);
  } else {
    adinfo_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.AdvertiseObject)
}

void AdvertiseObject::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&snsadobject_, 0, reinterpret_cast<char*>(&adinfo_) -
    reinterpret_cast<char*>(&snsadobject_) + sizeof(adinfo_));
}

AdvertiseObject::~AdvertiseObject() {
  // @@protoc_insertion_point(destructor:micromsg.AdvertiseObject)
  SharedDtor();
}

void AdvertiseObject::SharedDtor() {
  if (this != internal_default_instance()) {
    delete snsadobject_;
  }
  if (this != internal_default_instance()) {
    delete adinfo_;
  }
}

void AdvertiseObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdvertiseObject::descriptor() {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AdvertiseObject& AdvertiseObject::default_instance() {
  protobuf_mmsns_2eproto::InitDefaults();
  return *internal_default_instance();
}

AdvertiseObject* AdvertiseObject::New(::google::protobuf::Arena* arena) const {
  AdvertiseObject* n = new AdvertiseObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdvertiseObject::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.AdvertiseObject)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_snsadobject()) {
      GOOGLE_DCHECK(snsadobject_ != NULL);
      snsadobject_->::micromsg::SnsADObject::Clear();
    }
    if (has_adinfo()) {
      GOOGLE_DCHECK(adinfo_ != NULL);
      adinfo_->::micromsg::SKBuiltinString_t::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AdvertiseObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.AdvertiseObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.SnsADObject SnsADObject = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_snsadobject()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinString_t ADInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.AdvertiseObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.AdvertiseObject)
  return false;
#undef DO_
}

void AdvertiseObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.AdvertiseObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SnsADObject SnsADObject = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->snsadobject_, output);
  }

  // optional .micromsg.SKBuiltinString_t ADInfo = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->adinfo_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.AdvertiseObject)
}

::google::protobuf::uint8* AdvertiseObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.AdvertiseObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SnsADObject SnsADObject = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->snsadobject_, deterministic, target);
  }

  // optional .micromsg.SKBuiltinString_t ADInfo = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->adinfo_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.AdvertiseObject)
  return target;
}

size_t AdvertiseObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.AdvertiseObject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.SnsADObject SnsADObject = 1;
  if (has_snsadobject()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->snsadobject_);
  }
  // optional .micromsg.SKBuiltinString_t ADInfo = 2;
  if (has_adinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->adinfo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdvertiseObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.AdvertiseObject)
  GOOGLE_DCHECK_NE(&from, this);
  const AdvertiseObject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AdvertiseObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.AdvertiseObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.AdvertiseObject)
    MergeFrom(*source);
  }
}

void AdvertiseObject::MergeFrom(const AdvertiseObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.AdvertiseObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_snsadobject()->::micromsg::SnsADObject::MergeFrom(from.snsadobject());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_adinfo()->::micromsg::SKBuiltinString_t::MergeFrom(from.adinfo());
    }
  }
}

void AdvertiseObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.AdvertiseObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdvertiseObject::CopyFrom(const AdvertiseObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.AdvertiseObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdvertiseObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_snsadobject()) {
    if (!this->snsadobject_->IsInitialized()) return false;
  }
  return true;
}

void AdvertiseObject::Swap(AdvertiseObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdvertiseObject::InternalSwap(AdvertiseObject* other) {
  std::swap(snsadobject_, other->snsadobject_);
  std::swap(adinfo_, other->adinfo_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AdvertiseObject::GetMetadata() const {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdvertiseObject

// required .micromsg.SnsADObject SnsADObject = 1;
bool AdvertiseObject::has_snsadobject() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AdvertiseObject::set_has_snsadobject() {
  _has_bits_[0] |= 0x00000001u;
}
void AdvertiseObject::clear_has_snsadobject() {
  _has_bits_[0] &= ~0x00000001u;
}
void AdvertiseObject::clear_snsadobject() {
  if (snsadobject_ != NULL) snsadobject_->::micromsg::SnsADObject::Clear();
  clear_has_snsadobject();
}
const ::micromsg::SnsADObject& AdvertiseObject::snsadobject() const {
  // @@protoc_insertion_point(field_get:micromsg.AdvertiseObject.SnsADObject)
  return snsadobject_ != NULL ? *snsadobject_
                         : *::micromsg::SnsADObject::internal_default_instance();
}
::micromsg::SnsADObject* AdvertiseObject::mutable_snsadobject() {
  set_has_snsadobject();
  if (snsadobject_ == NULL) {
    snsadobject_ = new ::micromsg::SnsADObject;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AdvertiseObject.SnsADObject)
  return snsadobject_;
}
::micromsg::SnsADObject* AdvertiseObject::release_snsadobject() {
  // @@protoc_insertion_point(field_release:micromsg.AdvertiseObject.SnsADObject)
  clear_has_snsadobject();
  ::micromsg::SnsADObject* temp = snsadobject_;
  snsadobject_ = NULL;
  return temp;
}
void AdvertiseObject::set_allocated_snsadobject(::micromsg::SnsADObject* snsadobject) {
  delete snsadobject_;
  snsadobject_ = snsadobject;
  if (snsadobject) {
    set_has_snsadobject();
  } else {
    clear_has_snsadobject();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AdvertiseObject.SnsADObject)
}

// optional .micromsg.SKBuiltinString_t ADInfo = 2;
bool AdvertiseObject::has_adinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AdvertiseObject::set_has_adinfo() {
  _has_bits_[0] |= 0x00000002u;
}
void AdvertiseObject::clear_has_adinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
void AdvertiseObject::clear_adinfo() {
  if (adinfo_ != NULL) adinfo_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_adinfo();
}
const ::micromsg::SKBuiltinString_t& AdvertiseObject::adinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.AdvertiseObject.ADInfo)
  return adinfo_ != NULL ? *adinfo_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* AdvertiseObject::mutable_adinfo() {
  set_has_adinfo();
  if (adinfo_ == NULL) {
    adinfo_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AdvertiseObject.ADInfo)
  return adinfo_;
}
::micromsg::SKBuiltinString_t* AdvertiseObject::release_adinfo() {
  // @@protoc_insertion_point(field_release:micromsg.AdvertiseObject.ADInfo)
  clear_has_adinfo();
  ::micromsg::SKBuiltinString_t* temp = adinfo_;
  adinfo_ = NULL;
  return temp;
}
void AdvertiseObject::set_allocated_adinfo(::micromsg::SKBuiltinString_t* adinfo) {
  delete adinfo_;
  adinfo_ = adinfo;
  if (adinfo) {
    set_has_adinfo();
  } else {
    clear_has_adinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AdvertiseObject.ADInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnsPostCtocUploadInfo::kFlagFieldNumber;
const int SnsPostCtocUploadInfo::kPhotoCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnsPostCtocUploadInfo::SnsPostCtocUploadInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsns_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SnsPostCtocUploadInfo)
}
SnsPostCtocUploadInfo::SnsPostCtocUploadInfo(const SnsPostCtocUploadInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&flag_, &from.flag_,
    reinterpret_cast<char*>(&photocount_) -
    reinterpret_cast<char*>(&flag_) + sizeof(photocount_));
  // @@protoc_insertion_point(copy_constructor:micromsg.SnsPostCtocUploadInfo)
}

void SnsPostCtocUploadInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&flag_, 0, reinterpret_cast<char*>(&photocount_) -
    reinterpret_cast<char*>(&flag_) + sizeof(photocount_));
}

SnsPostCtocUploadInfo::~SnsPostCtocUploadInfo() {
  // @@protoc_insertion_point(destructor:micromsg.SnsPostCtocUploadInfo)
  SharedDtor();
}

void SnsPostCtocUploadInfo::SharedDtor() {
}

void SnsPostCtocUploadInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnsPostCtocUploadInfo::descriptor() {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnsPostCtocUploadInfo& SnsPostCtocUploadInfo::default_instance() {
  protobuf_mmsns_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnsPostCtocUploadInfo* SnsPostCtocUploadInfo::New(::google::protobuf::Arena* arena) const {
  SnsPostCtocUploadInfo* n = new SnsPostCtocUploadInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnsPostCtocUploadInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SnsPostCtocUploadInfo)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&flag_, 0, reinterpret_cast<char*>(&photocount_) -
      reinterpret_cast<char*>(&flag_) + sizeof(photocount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnsPostCtocUploadInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SnsPostCtocUploadInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Flag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 PhotoCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_photocount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photocount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SnsPostCtocUploadInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SnsPostCtocUploadInfo)
  return false;
#undef DO_
}

void SnsPostCtocUploadInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SnsPostCtocUploadInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Flag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->flag(), output);
  }

  // required uint32 PhotoCount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->photocount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SnsPostCtocUploadInfo)
}

::google::protobuf::uint8* SnsPostCtocUploadInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SnsPostCtocUploadInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Flag = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->flag(), target);
  }

  // required uint32 PhotoCount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->photocount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SnsPostCtocUploadInfo)
  return target;
}

size_t SnsPostCtocUploadInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SnsPostCtocUploadInfo)
  size_t total_size = 0;

  if (has_flag()) {
    // required uint32 Flag = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flag());
  }

  if (has_photocount()) {
    // required uint32 PhotoCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->photocount());
  }

  return total_size;
}
size_t SnsPostCtocUploadInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SnsPostCtocUploadInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 Flag = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flag());

    // required uint32 PhotoCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->photocount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnsPostCtocUploadInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SnsPostCtocUploadInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SnsPostCtocUploadInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnsPostCtocUploadInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SnsPostCtocUploadInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SnsPostCtocUploadInfo)
    MergeFrom(*source);
  }
}

void SnsPostCtocUploadInfo::MergeFrom(const SnsPostCtocUploadInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SnsPostCtocUploadInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      flag_ = from.flag_;
    }
    if (cached_has_bits & 0x00000002u) {
      photocount_ = from.photocount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SnsPostCtocUploadInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SnsPostCtocUploadInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnsPostCtocUploadInfo::CopyFrom(const SnsPostCtocUploadInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SnsPostCtocUploadInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsPostCtocUploadInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SnsPostCtocUploadInfo::Swap(SnsPostCtocUploadInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnsPostCtocUploadInfo::InternalSwap(SnsPostCtocUploadInfo* other) {
  std::swap(flag_, other->flag_);
  std::swap(photocount_, other->photocount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnsPostCtocUploadInfo::GetMetadata() const {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnsPostCtocUploadInfo

// required uint32 Flag = 1;
bool SnsPostCtocUploadInfo::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnsPostCtocUploadInfo::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
void SnsPostCtocUploadInfo::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnsPostCtocUploadInfo::clear_flag() {
  flag_ = 0u;
  clear_has_flag();
}
::google::protobuf::uint32 SnsPostCtocUploadInfo::flag() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsPostCtocUploadInfo.Flag)
  return flag_;
}
void SnsPostCtocUploadInfo::set_flag(::google::protobuf::uint32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsPostCtocUploadInfo.Flag)
}

// required uint32 PhotoCount = 2;
bool SnsPostCtocUploadInfo::has_photocount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SnsPostCtocUploadInfo::set_has_photocount() {
  _has_bits_[0] |= 0x00000002u;
}
void SnsPostCtocUploadInfo::clear_has_photocount() {
  _has_bits_[0] &= ~0x00000002u;
}
void SnsPostCtocUploadInfo::clear_photocount() {
  photocount_ = 0u;
  clear_has_photocount();
}
::google::protobuf::uint32 SnsPostCtocUploadInfo::photocount() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsPostCtocUploadInfo.PhotoCount)
  return photocount_;
}
void SnsPostCtocUploadInfo::set_photocount(::google::protobuf::uint32 value) {
  set_has_photocount();
  photocount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsPostCtocUploadInfo.PhotoCount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnsPostRequest::kBaseRequestFieldNumber;
const int SnsPostRequest::kObjectDescFieldNumber;
const int SnsPostRequest::kWithUserListCountFieldNumber;
const int SnsPostRequest::kWithUserListFieldNumber;
const int SnsPostRequest::kPrivacyFieldNumber;
const int SnsPostRequest::kSyncFlagFieldNumber;
const int SnsPostRequest::kClientIdFieldNumber;
const int SnsPostRequest::kPostBGImgTypeFieldNumber;
const int SnsPostRequest::kGroupCountFieldNumber;
const int SnsPostRequest::kGroupIdsFieldNumber;
const int SnsPostRequest::kObjectSourceFieldNumber;
const int SnsPostRequest::kReferIdFieldNumber;
const int SnsPostRequest::kBlackListCountFieldNumber;
const int SnsPostRequest::kBlackListFieldNumber;
const int SnsPostRequest::kTwitterInfoFieldNumber;
const int SnsPostRequest::kGroupUserCountFieldNumber;
const int SnsPostRequest::kGroupUserFieldNumber;
const int SnsPostRequest::kCtocUploadInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnsPostRequest::SnsPostRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsns_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SnsPostRequest)
}
SnsPostRequest::SnsPostRequest(const SnsPostRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      withuserlist_(from.withuserlist_),
      groupids_(from.groupids_),
      blacklist_(from.blacklist_),
      groupuser_(from.groupuser_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientid()) {
    clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_objectdesc()) {
    objectdesc_ = new ::micromsg::SKBuiltinBuffer_t(*from.objectdesc_);
  } else {
    objectdesc_ = NULL;
  }
  if (from.has_twitterinfo()) {
    twitterinfo_ = new ::micromsg::TwitterInfo(*from.twitterinfo_);
  } else {
    twitterinfo_ = NULL;
  }
  if (from.has_ctocuploadinfo()) {
    ctocuploadinfo_ = new ::micromsg::SnsPostCtocUploadInfo(*from.ctocuploadinfo_);
  } else {
    ctocuploadinfo_ = NULL;
  }
  ::memcpy(&withuserlistcount_, &from.withuserlistcount_,
    reinterpret_cast<char*>(&groupusercount_) -
    reinterpret_cast<char*>(&withuserlistcount_) + sizeof(groupusercount_));
  // @@protoc_insertion_point(copy_constructor:micromsg.SnsPostRequest)
}

void SnsPostRequest::SharedCtor() {
  _cached_size_ = 0;
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&groupusercount_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(groupusercount_));
}

SnsPostRequest::~SnsPostRequest() {
  // @@protoc_insertion_point(destructor:micromsg.SnsPostRequest)
  SharedDtor();
}

void SnsPostRequest::SharedDtor() {
  clientid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete objectdesc_;
  }
  if (this != internal_default_instance()) {
    delete twitterinfo_;
  }
  if (this != internal_default_instance()) {
    delete ctocuploadinfo_;
  }
}

void SnsPostRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnsPostRequest::descriptor() {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnsPostRequest& SnsPostRequest::default_instance() {
  protobuf_mmsns_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnsPostRequest* SnsPostRequest::New(::google::protobuf::Arena* arena) const {
  SnsPostRequest* n = new SnsPostRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnsPostRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SnsPostRequest)
  withuserlist_.Clear();
  groupids_.Clear();
  blacklist_.Clear();
  groupuser_.Clear();
  if (_has_bits_[0 / 32] & 31u) {
    if (has_clientid()) {
      GOOGLE_DCHECK(!clientid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*clientid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_objectdesc()) {
      GOOGLE_DCHECK(objectdesc_ != NULL);
      objectdesc_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_twitterinfo()) {
      GOOGLE_DCHECK(twitterinfo_ != NULL);
      twitterinfo_->::micromsg::TwitterInfo::Clear();
    }
    if (has_ctocuploadinfo()) {
      GOOGLE_DCHECK(ctocuploadinfo_ != NULL);
      ctocuploadinfo_->::micromsg::SnsPostCtocUploadInfo::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 224u) {
    ::memset(&withuserlistcount_, 0, reinterpret_cast<char*>(&syncflag_) -
      reinterpret_cast<char*>(&withuserlistcount_) + sizeof(syncflag_));
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ::memset(&postbgimgtype_, 0, reinterpret_cast<char*>(&groupusercount_) -
      reinterpret_cast<char*>(&postbgimgtype_) + sizeof(groupusercount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnsPostRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SnsPostRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t ObjectDesc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_objectdesc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 WithUserListCount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_withuserlistcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &withuserlistcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.SKBuiltinString_t WithUserList = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_withuserlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Privacy = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_privacy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &privacy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 SyncFlag = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_syncflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &syncflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ClientId = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientid().data(), this->clientid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SnsPostRequest.ClientId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 PostBGImgType = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_postbgimgtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &postbgimgtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 GroupCount = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_groupcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.SnsGroup GroupIds = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_groupids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ObjectSource = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_objectsource();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &objectsource_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ReferId = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_referid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &referid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 BlackListCount = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_blacklistcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blacklistcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.SKBuiltinString_t BlackList = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blacklist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.TwitterInfo TwitterInfo = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_twitterinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 GroupUserCount = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_groupusercount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupusercount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.SKBuiltinString_t GroupUser = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_groupuser()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SnsPostCtocUploadInfo CtocUploadInfo = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ctocuploadinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SnsPostRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SnsPostRequest)
  return false;
#undef DO_
}

void SnsPostRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SnsPostRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required .micromsg.SKBuiltinBuffer_t ObjectDesc = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->objectdesc_, output);
  }

  // optional uint32 WithUserListCount = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->withuserlistcount(), output);
  }

  // repeated .micromsg.SKBuiltinString_t WithUserList = 4;
  for (unsigned int i = 0, n = this->withuserlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->withuserlist(i), output);
  }

  // optional uint32 Privacy = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->privacy(), output);
  }

  // optional uint32 SyncFlag = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->syncflag(), output);
  }

  // optional string ClientId = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsPostRequest.ClientId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->clientid(), output);
  }

  // optional uint32 PostBGImgType = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->postbgimgtype(), output);
  }

  // optional uint32 GroupCount = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->groupcount(), output);
  }

  // repeated .micromsg.SnsGroup GroupIds = 10;
  for (unsigned int i = 0, n = this->groupids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->groupids(i), output);
  }

  // optional uint32 ObjectSource = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->objectsource(), output);
  }

  // optional uint64 ReferId = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->referid(), output);
  }

  // optional uint32 BlackListCount = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->blacklistcount(), output);
  }

  // repeated .micromsg.SKBuiltinString_t BlackList = 14;
  for (unsigned int i = 0, n = this->blacklist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->blacklist(i), output);
  }

  // optional .micromsg.TwitterInfo TwitterInfo = 15;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->twitterinfo_, output);
  }

  // optional uint32 GroupUserCount = 16;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->groupusercount(), output);
  }

  // repeated .micromsg.SKBuiltinString_t GroupUser = 17;
  for (unsigned int i = 0, n = this->groupuser_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->groupuser(i), output);
  }

  // optional .micromsg.SnsPostCtocUploadInfo CtocUploadInfo = 18;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->ctocuploadinfo_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SnsPostRequest)
}

::google::protobuf::uint8* SnsPostRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SnsPostRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t ObjectDesc = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->objectdesc_, deterministic, target);
  }

  // optional uint32 WithUserListCount = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->withuserlistcount(), target);
  }

  // repeated .micromsg.SKBuiltinString_t WithUserList = 4;
  for (unsigned int i = 0, n = this->withuserlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->withuserlist(i), deterministic, target);
  }

  // optional uint32 Privacy = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->privacy(), target);
  }

  // optional uint32 SyncFlag = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->syncflag(), target);
  }

  // optional string ClientId = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsPostRequest.ClientId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->clientid(), target);
  }

  // optional uint32 PostBGImgType = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->postbgimgtype(), target);
  }

  // optional uint32 GroupCount = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->groupcount(), target);
  }

  // repeated .micromsg.SnsGroup GroupIds = 10;
  for (unsigned int i = 0, n = this->groupids_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->groupids(i), deterministic, target);
  }

  // optional uint32 ObjectSource = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->objectsource(), target);
  }

  // optional uint64 ReferId = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->referid(), target);
  }

  // optional uint32 BlackListCount = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->blacklistcount(), target);
  }

  // repeated .micromsg.SKBuiltinString_t BlackList = 14;
  for (unsigned int i = 0, n = this->blacklist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, this->blacklist(i), deterministic, target);
  }

  // optional .micromsg.TwitterInfo TwitterInfo = 15;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->twitterinfo_, deterministic, target);
  }

  // optional uint32 GroupUserCount = 16;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->groupusercount(), target);
  }

  // repeated .micromsg.SKBuiltinString_t GroupUser = 17;
  for (unsigned int i = 0, n = this->groupuser_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, this->groupuser(i), deterministic, target);
  }

  // optional .micromsg.SnsPostCtocUploadInfo CtocUploadInfo = 18;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->ctocuploadinfo_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SnsPostRequest)
  return target;
}

size_t SnsPostRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SnsPostRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_objectdesc()) {
    // required .micromsg.SKBuiltinBuffer_t ObjectDesc = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->objectdesc_);
  }

  return total_size;
}
size_t SnsPostRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SnsPostRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.SKBuiltinBuffer_t ObjectDesc = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->objectdesc_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.SKBuiltinString_t WithUserList = 4;
  {
    unsigned int count = this->withuserlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->withuserlist(i));
    }
  }

  // repeated .micromsg.SnsGroup GroupIds = 10;
  {
    unsigned int count = this->groupids_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->groupids(i));
    }
  }

  // repeated .micromsg.SKBuiltinString_t BlackList = 14;
  {
    unsigned int count = this->blacklist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blacklist(i));
    }
  }

  // repeated .micromsg.SKBuiltinString_t GroupUser = 17;
  {
    unsigned int count = this->groupuser_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->groupuser(i));
    }
  }

  // optional string ClientId = 7;
  if (has_clientid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientid());
  }

  if (_has_bits_[0 / 32] & 248u) {
    // optional .micromsg.TwitterInfo TwitterInfo = 15;
    if (has_twitterinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->twitterinfo_);
    }

    // optional .micromsg.SnsPostCtocUploadInfo CtocUploadInfo = 18;
    if (has_ctocuploadinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ctocuploadinfo_);
    }

    // optional uint32 WithUserListCount = 3;
    if (has_withuserlistcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->withuserlistcount());
    }

    // optional uint32 Privacy = 5;
    if (has_privacy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->privacy());
    }

    // optional uint32 SyncFlag = 6;
    if (has_syncflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->syncflag());
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional uint32 PostBGImgType = 8;
    if (has_postbgimgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->postbgimgtype());
    }

    // optional uint32 GroupCount = 9;
    if (has_groupcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupcount());
    }

    // optional uint32 ObjectSource = 11;
    if (has_objectsource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->objectsource());
    }

    // optional uint64 ReferId = 12;
    if (has_referid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->referid());
    }

    // optional uint32 BlackListCount = 13;
    if (has_blacklistcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blacklistcount());
    }

    // optional uint32 GroupUserCount = 16;
    if (has_groupusercount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupusercount());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnsPostRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SnsPostRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SnsPostRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnsPostRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SnsPostRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SnsPostRequest)
    MergeFrom(*source);
  }
}

void SnsPostRequest::MergeFrom(const SnsPostRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SnsPostRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  withuserlist_.MergeFrom(from.withuserlist_);
  groupids_.MergeFrom(from.groupids_);
  blacklist_.MergeFrom(from.blacklist_);
  groupuser_.MergeFrom(from.groupuser_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_clientid();
      clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_objectdesc()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.objectdesc());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_twitterinfo()->::micromsg::TwitterInfo::MergeFrom(from.twitterinfo());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_ctocuploadinfo()->::micromsg::SnsPostCtocUploadInfo::MergeFrom(from.ctocuploadinfo());
    }
    if (cached_has_bits & 0x00000020u) {
      withuserlistcount_ = from.withuserlistcount_;
    }
    if (cached_has_bits & 0x00000040u) {
      privacy_ = from.privacy_;
    }
    if (cached_has_bits & 0x00000080u) {
      syncflag_ = from.syncflag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      postbgimgtype_ = from.postbgimgtype_;
    }
    if (cached_has_bits & 0x00000200u) {
      groupcount_ = from.groupcount_;
    }
    if (cached_has_bits & 0x00000400u) {
      objectsource_ = from.objectsource_;
    }
    if (cached_has_bits & 0x00000800u) {
      referid_ = from.referid_;
    }
    if (cached_has_bits & 0x00001000u) {
      blacklistcount_ = from.blacklistcount_;
    }
    if (cached_has_bits & 0x00002000u) {
      groupusercount_ = from.groupusercount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SnsPostRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SnsPostRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnsPostRequest::CopyFrom(const SnsPostRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SnsPostRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsPostRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->groupids())) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_objectdesc()) {
    if (!this->objectdesc_->IsInitialized()) return false;
  }
  if (has_ctocuploadinfo()) {
    if (!this->ctocuploadinfo_->IsInitialized()) return false;
  }
  return true;
}

void SnsPostRequest::Swap(SnsPostRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnsPostRequest::InternalSwap(SnsPostRequest* other) {
  withuserlist_.InternalSwap(&other->withuserlist_);
  groupids_.InternalSwap(&other->groupids_);
  blacklist_.InternalSwap(&other->blacklist_);
  groupuser_.InternalSwap(&other->groupuser_);
  clientid_.Swap(&other->clientid_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(objectdesc_, other->objectdesc_);
  std::swap(twitterinfo_, other->twitterinfo_);
  std::swap(ctocuploadinfo_, other->ctocuploadinfo_);
  std::swap(withuserlistcount_, other->withuserlistcount_);
  std::swap(privacy_, other->privacy_);
  std::swap(syncflag_, other->syncflag_);
  std::swap(postbgimgtype_, other->postbgimgtype_);
  std::swap(groupcount_, other->groupcount_);
  std::swap(objectsource_, other->objectsource_);
  std::swap(referid_, other->referid_);
  std::swap(blacklistcount_, other->blacklistcount_);
  std::swap(groupusercount_, other->groupusercount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnsPostRequest::GetMetadata() const {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnsPostRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool SnsPostRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SnsPostRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void SnsPostRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void SnsPostRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& SnsPostRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsPostRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* SnsPostRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsPostRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* SnsPostRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.SnsPostRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void SnsPostRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsPostRequest.BaseRequest)
}

// required .micromsg.SKBuiltinBuffer_t ObjectDesc = 2;
bool SnsPostRequest::has_objectdesc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SnsPostRequest::set_has_objectdesc() {
  _has_bits_[0] |= 0x00000004u;
}
void SnsPostRequest::clear_has_objectdesc() {
  _has_bits_[0] &= ~0x00000004u;
}
void SnsPostRequest::clear_objectdesc() {
  if (objectdesc_ != NULL) objectdesc_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_objectdesc();
}
const ::micromsg::SKBuiltinBuffer_t& SnsPostRequest::objectdesc() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsPostRequest.ObjectDesc)
  return objectdesc_ != NULL ? *objectdesc_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* SnsPostRequest::mutable_objectdesc() {
  set_has_objectdesc();
  if (objectdesc_ == NULL) {
    objectdesc_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsPostRequest.ObjectDesc)
  return objectdesc_;
}
::micromsg::SKBuiltinBuffer_t* SnsPostRequest::release_objectdesc() {
  // @@protoc_insertion_point(field_release:micromsg.SnsPostRequest.ObjectDesc)
  clear_has_objectdesc();
  ::micromsg::SKBuiltinBuffer_t* temp = objectdesc_;
  objectdesc_ = NULL;
  return temp;
}
void SnsPostRequest::set_allocated_objectdesc(::micromsg::SKBuiltinBuffer_t* objectdesc) {
  delete objectdesc_;
  objectdesc_ = objectdesc;
  if (objectdesc) {
    set_has_objectdesc();
  } else {
    clear_has_objectdesc();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsPostRequest.ObjectDesc)
}

// optional uint32 WithUserListCount = 3;
bool SnsPostRequest::has_withuserlistcount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SnsPostRequest::set_has_withuserlistcount() {
  _has_bits_[0] |= 0x00000020u;
}
void SnsPostRequest::clear_has_withuserlistcount() {
  _has_bits_[0] &= ~0x00000020u;
}
void SnsPostRequest::clear_withuserlistcount() {
  withuserlistcount_ = 0u;
  clear_has_withuserlistcount();
}
::google::protobuf::uint32 SnsPostRequest::withuserlistcount() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsPostRequest.WithUserListCount)
  return withuserlistcount_;
}
void SnsPostRequest::set_withuserlistcount(::google::protobuf::uint32 value) {
  set_has_withuserlistcount();
  withuserlistcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsPostRequest.WithUserListCount)
}

// repeated .micromsg.SKBuiltinString_t WithUserList = 4;
int SnsPostRequest::withuserlist_size() const {
  return withuserlist_.size();
}
void SnsPostRequest::clear_withuserlist() {
  withuserlist_.Clear();
}
const ::micromsg::SKBuiltinString_t& SnsPostRequest::withuserlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.SnsPostRequest.WithUserList)
  return withuserlist_.Get(index);
}
::micromsg::SKBuiltinString_t* SnsPostRequest::mutable_withuserlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.SnsPostRequest.WithUserList)
  return withuserlist_.Mutable(index);
}
::micromsg::SKBuiltinString_t* SnsPostRequest::add_withuserlist() {
  // @@protoc_insertion_point(field_add:micromsg.SnsPostRequest.WithUserList)
  return withuserlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >*
SnsPostRequest::mutable_withuserlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.SnsPostRequest.WithUserList)
  return &withuserlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >&
SnsPostRequest::withuserlist() const {
  // @@protoc_insertion_point(field_list:micromsg.SnsPostRequest.WithUserList)
  return withuserlist_;
}

// optional uint32 Privacy = 5;
bool SnsPostRequest::has_privacy() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SnsPostRequest::set_has_privacy() {
  _has_bits_[0] |= 0x00000040u;
}
void SnsPostRequest::clear_has_privacy() {
  _has_bits_[0] &= ~0x00000040u;
}
void SnsPostRequest::clear_privacy() {
  privacy_ = 0u;
  clear_has_privacy();
}
::google::protobuf::uint32 SnsPostRequest::privacy() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsPostRequest.Privacy)
  return privacy_;
}
void SnsPostRequest::set_privacy(::google::protobuf::uint32 value) {
  set_has_privacy();
  privacy_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsPostRequest.Privacy)
}

// optional uint32 SyncFlag = 6;
bool SnsPostRequest::has_syncflag() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SnsPostRequest::set_has_syncflag() {
  _has_bits_[0] |= 0x00000080u;
}
void SnsPostRequest::clear_has_syncflag() {
  _has_bits_[0] &= ~0x00000080u;
}
void SnsPostRequest::clear_syncflag() {
  syncflag_ = 0u;
  clear_has_syncflag();
}
::google::protobuf::uint32 SnsPostRequest::syncflag() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsPostRequest.SyncFlag)
  return syncflag_;
}
void SnsPostRequest::set_syncflag(::google::protobuf::uint32 value) {
  set_has_syncflag();
  syncflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsPostRequest.SyncFlag)
}

// optional string ClientId = 7;
bool SnsPostRequest::has_clientid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnsPostRequest::set_has_clientid() {
  _has_bits_[0] |= 0x00000001u;
}
void SnsPostRequest::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnsPostRequest::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientid();
}
const ::std::string& SnsPostRequest::clientid() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsPostRequest.ClientId)
  return clientid_.GetNoArena();
}
void SnsPostRequest::set_clientid(const ::std::string& value) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SnsPostRequest.ClientId)
}
#if LANG_CXX11
void SnsPostRequest::set_clientid(::std::string&& value) {
  set_has_clientid();
  clientid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SnsPostRequest.ClientId)
}
#endif
void SnsPostRequest::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SnsPostRequest.ClientId)
}
void SnsPostRequest::set_clientid(const char* value, size_t size) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SnsPostRequest.ClientId)
}
::std::string* SnsPostRequest::mutable_clientid() {
  set_has_clientid();
  // @@protoc_insertion_point(field_mutable:micromsg.SnsPostRequest.ClientId)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnsPostRequest::release_clientid() {
  // @@protoc_insertion_point(field_release:micromsg.SnsPostRequest.ClientId)
  clear_has_clientid();
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnsPostRequest::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    set_has_clientid();
  } else {
    clear_has_clientid();
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsPostRequest.ClientId)
}

// optional uint32 PostBGImgType = 8;
bool SnsPostRequest::has_postbgimgtype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SnsPostRequest::set_has_postbgimgtype() {
  _has_bits_[0] |= 0x00000100u;
}
void SnsPostRequest::clear_has_postbgimgtype() {
  _has_bits_[0] &= ~0x00000100u;
}
void SnsPostRequest::clear_postbgimgtype() {
  postbgimgtype_ = 0u;
  clear_has_postbgimgtype();
}
::google::protobuf::uint32 SnsPostRequest::postbgimgtype() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsPostRequest.PostBGImgType)
  return postbgimgtype_;
}
void SnsPostRequest::set_postbgimgtype(::google::protobuf::uint32 value) {
  set_has_postbgimgtype();
  postbgimgtype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsPostRequest.PostBGImgType)
}

// optional uint32 GroupCount = 9;
bool SnsPostRequest::has_groupcount() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SnsPostRequest::set_has_groupcount() {
  _has_bits_[0] |= 0x00000200u;
}
void SnsPostRequest::clear_has_groupcount() {
  _has_bits_[0] &= ~0x00000200u;
}
void SnsPostRequest::clear_groupcount() {
  groupcount_ = 0u;
  clear_has_groupcount();
}
::google::protobuf::uint32 SnsPostRequest::groupcount() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsPostRequest.GroupCount)
  return groupcount_;
}
void SnsPostRequest::set_groupcount(::google::protobuf::uint32 value) {
  set_has_groupcount();
  groupcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsPostRequest.GroupCount)
}

// repeated .micromsg.SnsGroup GroupIds = 10;
int SnsPostRequest::groupids_size() const {
  return groupids_.size();
}
void SnsPostRequest::clear_groupids() {
  groupids_.Clear();
}
const ::micromsg::SnsGroup& SnsPostRequest::groupids(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.SnsPostRequest.GroupIds)
  return groupids_.Get(index);
}
::micromsg::SnsGroup* SnsPostRequest::mutable_groupids(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.SnsPostRequest.GroupIds)
  return groupids_.Mutable(index);
}
::micromsg::SnsGroup* SnsPostRequest::add_groupids() {
  // @@protoc_insertion_point(field_add:micromsg.SnsPostRequest.GroupIds)
  return groupids_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::SnsGroup >*
SnsPostRequest::mutable_groupids() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.SnsPostRequest.GroupIds)
  return &groupids_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::SnsGroup >&
SnsPostRequest::groupids() const {
  // @@protoc_insertion_point(field_list:micromsg.SnsPostRequest.GroupIds)
  return groupids_;
}

// optional uint32 ObjectSource = 11;
bool SnsPostRequest::has_objectsource() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SnsPostRequest::set_has_objectsource() {
  _has_bits_[0] |= 0x00000400u;
}
void SnsPostRequest::clear_has_objectsource() {
  _has_bits_[0] &= ~0x00000400u;
}
void SnsPostRequest::clear_objectsource() {
  objectsource_ = 0u;
  clear_has_objectsource();
}
::google::protobuf::uint32 SnsPostRequest::objectsource() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsPostRequest.ObjectSource)
  return objectsource_;
}
void SnsPostRequest::set_objectsource(::google::protobuf::uint32 value) {
  set_has_objectsource();
  objectsource_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsPostRequest.ObjectSource)
}

// optional uint64 ReferId = 12;
bool SnsPostRequest::has_referid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SnsPostRequest::set_has_referid() {
  _has_bits_[0] |= 0x00000800u;
}
void SnsPostRequest::clear_has_referid() {
  _has_bits_[0] &= ~0x00000800u;
}
void SnsPostRequest::clear_referid() {
  referid_ = GOOGLE_ULONGLONG(0);
  clear_has_referid();
}
::google::protobuf::uint64 SnsPostRequest::referid() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsPostRequest.ReferId)
  return referid_;
}
void SnsPostRequest::set_referid(::google::protobuf::uint64 value) {
  set_has_referid();
  referid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsPostRequest.ReferId)
}

// optional uint32 BlackListCount = 13;
bool SnsPostRequest::has_blacklistcount() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SnsPostRequest::set_has_blacklistcount() {
  _has_bits_[0] |= 0x00001000u;
}
void SnsPostRequest::clear_has_blacklistcount() {
  _has_bits_[0] &= ~0x00001000u;
}
void SnsPostRequest::clear_blacklistcount() {
  blacklistcount_ = 0u;
  clear_has_blacklistcount();
}
::google::protobuf::uint32 SnsPostRequest::blacklistcount() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsPostRequest.BlackListCount)
  return blacklistcount_;
}
void SnsPostRequest::set_blacklistcount(::google::protobuf::uint32 value) {
  set_has_blacklistcount();
  blacklistcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsPostRequest.BlackListCount)
}

// repeated .micromsg.SKBuiltinString_t BlackList = 14;
int SnsPostRequest::blacklist_size() const {
  return blacklist_.size();
}
void SnsPostRequest::clear_blacklist() {
  blacklist_.Clear();
}
const ::micromsg::SKBuiltinString_t& SnsPostRequest::blacklist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.SnsPostRequest.BlackList)
  return blacklist_.Get(index);
}
::micromsg::SKBuiltinString_t* SnsPostRequest::mutable_blacklist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.SnsPostRequest.BlackList)
  return blacklist_.Mutable(index);
}
::micromsg::SKBuiltinString_t* SnsPostRequest::add_blacklist() {
  // @@protoc_insertion_point(field_add:micromsg.SnsPostRequest.BlackList)
  return blacklist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >*
SnsPostRequest::mutable_blacklist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.SnsPostRequest.BlackList)
  return &blacklist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >&
SnsPostRequest::blacklist() const {
  // @@protoc_insertion_point(field_list:micromsg.SnsPostRequest.BlackList)
  return blacklist_;
}

// optional .micromsg.TwitterInfo TwitterInfo = 15;
bool SnsPostRequest::has_twitterinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SnsPostRequest::set_has_twitterinfo() {
  _has_bits_[0] |= 0x00000008u;
}
void SnsPostRequest::clear_has_twitterinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
void SnsPostRequest::clear_twitterinfo() {
  if (twitterinfo_ != NULL) twitterinfo_->::micromsg::TwitterInfo::Clear();
  clear_has_twitterinfo();
}
const ::micromsg::TwitterInfo& SnsPostRequest::twitterinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsPostRequest.TwitterInfo)
  return twitterinfo_ != NULL ? *twitterinfo_
                         : *::micromsg::TwitterInfo::internal_default_instance();
}
::micromsg::TwitterInfo* SnsPostRequest::mutable_twitterinfo() {
  set_has_twitterinfo();
  if (twitterinfo_ == NULL) {
    twitterinfo_ = new ::micromsg::TwitterInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsPostRequest.TwitterInfo)
  return twitterinfo_;
}
::micromsg::TwitterInfo* SnsPostRequest::release_twitterinfo() {
  // @@protoc_insertion_point(field_release:micromsg.SnsPostRequest.TwitterInfo)
  clear_has_twitterinfo();
  ::micromsg::TwitterInfo* temp = twitterinfo_;
  twitterinfo_ = NULL;
  return temp;
}
void SnsPostRequest::set_allocated_twitterinfo(::micromsg::TwitterInfo* twitterinfo) {
  delete twitterinfo_;
  twitterinfo_ = twitterinfo;
  if (twitterinfo) {
    set_has_twitterinfo();
  } else {
    clear_has_twitterinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsPostRequest.TwitterInfo)
}

// optional uint32 GroupUserCount = 16;
bool SnsPostRequest::has_groupusercount() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void SnsPostRequest::set_has_groupusercount() {
  _has_bits_[0] |= 0x00002000u;
}
void SnsPostRequest::clear_has_groupusercount() {
  _has_bits_[0] &= ~0x00002000u;
}
void SnsPostRequest::clear_groupusercount() {
  groupusercount_ = 0u;
  clear_has_groupusercount();
}
::google::protobuf::uint32 SnsPostRequest::groupusercount() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsPostRequest.GroupUserCount)
  return groupusercount_;
}
void SnsPostRequest::set_groupusercount(::google::protobuf::uint32 value) {
  set_has_groupusercount();
  groupusercount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsPostRequest.GroupUserCount)
}

// repeated .micromsg.SKBuiltinString_t GroupUser = 17;
int SnsPostRequest::groupuser_size() const {
  return groupuser_.size();
}
void SnsPostRequest::clear_groupuser() {
  groupuser_.Clear();
}
const ::micromsg::SKBuiltinString_t& SnsPostRequest::groupuser(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.SnsPostRequest.GroupUser)
  return groupuser_.Get(index);
}
::micromsg::SKBuiltinString_t* SnsPostRequest::mutable_groupuser(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.SnsPostRequest.GroupUser)
  return groupuser_.Mutable(index);
}
::micromsg::SKBuiltinString_t* SnsPostRequest::add_groupuser() {
  // @@protoc_insertion_point(field_add:micromsg.SnsPostRequest.GroupUser)
  return groupuser_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >*
SnsPostRequest::mutable_groupuser() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.SnsPostRequest.GroupUser)
  return &groupuser_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >&
SnsPostRequest::groupuser() const {
  // @@protoc_insertion_point(field_list:micromsg.SnsPostRequest.GroupUser)
  return groupuser_;
}

// optional .micromsg.SnsPostCtocUploadInfo CtocUploadInfo = 18;
bool SnsPostRequest::has_ctocuploadinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SnsPostRequest::set_has_ctocuploadinfo() {
  _has_bits_[0] |= 0x00000010u;
}
void SnsPostRequest::clear_has_ctocuploadinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
void SnsPostRequest::clear_ctocuploadinfo() {
  if (ctocuploadinfo_ != NULL) ctocuploadinfo_->::micromsg::SnsPostCtocUploadInfo::Clear();
  clear_has_ctocuploadinfo();
}
const ::micromsg::SnsPostCtocUploadInfo& SnsPostRequest::ctocuploadinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsPostRequest.CtocUploadInfo)
  return ctocuploadinfo_ != NULL ? *ctocuploadinfo_
                         : *::micromsg::SnsPostCtocUploadInfo::internal_default_instance();
}
::micromsg::SnsPostCtocUploadInfo* SnsPostRequest::mutable_ctocuploadinfo() {
  set_has_ctocuploadinfo();
  if (ctocuploadinfo_ == NULL) {
    ctocuploadinfo_ = new ::micromsg::SnsPostCtocUploadInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsPostRequest.CtocUploadInfo)
  return ctocuploadinfo_;
}
::micromsg::SnsPostCtocUploadInfo* SnsPostRequest::release_ctocuploadinfo() {
  // @@protoc_insertion_point(field_release:micromsg.SnsPostRequest.CtocUploadInfo)
  clear_has_ctocuploadinfo();
  ::micromsg::SnsPostCtocUploadInfo* temp = ctocuploadinfo_;
  ctocuploadinfo_ = NULL;
  return temp;
}
void SnsPostRequest::set_allocated_ctocuploadinfo(::micromsg::SnsPostCtocUploadInfo* ctocuploadinfo) {
  delete ctocuploadinfo_;
  ctocuploadinfo_ = ctocuploadinfo;
  if (ctocuploadinfo) {
    set_has_ctocuploadinfo();
  } else {
    clear_has_ctocuploadinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsPostRequest.CtocUploadInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnsPostResponse::kBaseResponseFieldNumber;
const int SnsPostResponse::kSnsObjectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnsPostResponse::SnsPostResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsns_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SnsPostResponse)
}
SnsPostResponse::SnsPostResponse(const SnsPostResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_snsobject()) {
    snsobject_ = new ::micromsg::SnsObject(*from.snsobject_);
  } else {
    snsobject_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.SnsPostResponse)
}

void SnsPostResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&snsobject_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(snsobject_));
}

SnsPostResponse::~SnsPostResponse() {
  // @@protoc_insertion_point(destructor:micromsg.SnsPostResponse)
  SharedDtor();
}

void SnsPostResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete snsobject_;
  }
}

void SnsPostResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnsPostResponse::descriptor() {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnsPostResponse& SnsPostResponse::default_instance() {
  protobuf_mmsns_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnsPostResponse* SnsPostResponse::New(::google::protobuf::Arena* arena) const {
  SnsPostResponse* n = new SnsPostResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnsPostResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SnsPostResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_snsobject()) {
      GOOGLE_DCHECK(snsobject_ != NULL);
      snsobject_->::micromsg::SnsObject::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnsPostResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SnsPostResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SnsObject SnsObject = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_snsobject()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SnsPostResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SnsPostResponse)
  return false;
#undef DO_
}

void SnsPostResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SnsPostResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required .micromsg.SnsObject SnsObject = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->snsobject_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SnsPostResponse)
}

::google::protobuf::uint8* SnsPostResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SnsPostResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required .micromsg.SnsObject SnsObject = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->snsobject_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SnsPostResponse)
  return target;
}

size_t SnsPostResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SnsPostResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_snsobject()) {
    // required .micromsg.SnsObject SnsObject = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->snsobject_);
  }

  return total_size;
}
size_t SnsPostResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SnsPostResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required .micromsg.SnsObject SnsObject = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->snsobject_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnsPostResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SnsPostResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SnsPostResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnsPostResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SnsPostResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SnsPostResponse)
    MergeFrom(*source);
  }
}

void SnsPostResponse::MergeFrom(const SnsPostResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SnsPostResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_snsobject()->::micromsg::SnsObject::MergeFrom(from.snsobject());
    }
  }
}

void SnsPostResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SnsPostResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnsPostResponse::CopyFrom(const SnsPostResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SnsPostResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsPostResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_snsobject()) {
    if (!this->snsobject_->IsInitialized()) return false;
  }
  return true;
}

void SnsPostResponse::Swap(SnsPostResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnsPostResponse::InternalSwap(SnsPostResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(snsobject_, other->snsobject_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnsPostResponse::GetMetadata() const {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnsPostResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool SnsPostResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnsPostResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void SnsPostResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnsPostResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& SnsPostResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsPostResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* SnsPostResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsPostResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* SnsPostResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.SnsPostResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void SnsPostResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsPostResponse.BaseResponse)
}

// required .micromsg.SnsObject SnsObject = 2;
bool SnsPostResponse::has_snsobject() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SnsPostResponse::set_has_snsobject() {
  _has_bits_[0] |= 0x00000002u;
}
void SnsPostResponse::clear_has_snsobject() {
  _has_bits_[0] &= ~0x00000002u;
}
void SnsPostResponse::clear_snsobject() {
  if (snsobject_ != NULL) snsobject_->::micromsg::SnsObject::Clear();
  clear_has_snsobject();
}
const ::micromsg::SnsObject& SnsPostResponse::snsobject() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsPostResponse.SnsObject)
  return snsobject_ != NULL ? *snsobject_
                         : *::micromsg::SnsObject::internal_default_instance();
}
::micromsg::SnsObject* SnsPostResponse::mutable_snsobject() {
  set_has_snsobject();
  if (snsobject_ == NULL) {
    snsobject_ = new ::micromsg::SnsObject;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsPostResponse.SnsObject)
  return snsobject_;
}
::micromsg::SnsObject* SnsPostResponse::release_snsobject() {
  // @@protoc_insertion_point(field_release:micromsg.SnsPostResponse.SnsObject)
  clear_has_snsobject();
  ::micromsg::SnsObject* temp = snsobject_;
  snsobject_ = NULL;
  return temp;
}
void SnsPostResponse::set_allocated_snsobject(::micromsg::SnsObject* snsobject) {
  delete snsobject_;
  snsobject_ = snsobject;
  if (snsobject) {
    set_has_snsobject();
  } else {
    clear_has_snsobject();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsPostResponse.SnsObject)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnsObjectDetailRequest::kBaseRequestFieldNumber;
const int SnsObjectDetailRequest::kIdFieldNumber;
const int SnsObjectDetailRequest::kGroupDetailFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnsObjectDetailRequest::SnsObjectDetailRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsns_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SnsObjectDetailRequest)
}
SnsObjectDetailRequest::SnsObjectDetailRequest(const SnsObjectDetailRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&groupdetail_) -
    reinterpret_cast<char*>(&id_) + sizeof(groupdetail_));
  // @@protoc_insertion_point(copy_constructor:micromsg.SnsObjectDetailRequest)
}

void SnsObjectDetailRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&groupdetail_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(groupdetail_));
}

SnsObjectDetailRequest::~SnsObjectDetailRequest() {
  // @@protoc_insertion_point(destructor:micromsg.SnsObjectDetailRequest)
  SharedDtor();
}

void SnsObjectDetailRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void SnsObjectDetailRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnsObjectDetailRequest::descriptor() {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnsObjectDetailRequest& SnsObjectDetailRequest::default_instance() {
  protobuf_mmsns_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnsObjectDetailRequest* SnsObjectDetailRequest::New(::google::protobuf::Arena* arena) const {
  SnsObjectDetailRequest* n = new SnsObjectDetailRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnsObjectDetailRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SnsObjectDetailRequest)
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&groupdetail_) -
      reinterpret_cast<char*>(&id_) + sizeof(groupdetail_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnsObjectDetailRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SnsObjectDetailRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 Id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 GroupDetail = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_groupdetail();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupdetail_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SnsObjectDetailRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SnsObjectDetailRequest)
  return false;
#undef DO_
}

void SnsObjectDetailRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SnsObjectDetailRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint64 Id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // optional uint32 GroupDetail = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->groupdetail(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SnsObjectDetailRequest)
}

::google::protobuf::uint8* SnsObjectDetailRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SnsObjectDetailRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint64 Id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // optional uint32 GroupDetail = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->groupdetail(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SnsObjectDetailRequest)
  return target;
}

size_t SnsObjectDetailRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SnsObjectDetailRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_id()) {
    // required uint64 Id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  return total_size;
}
size_t SnsObjectDetailRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SnsObjectDetailRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint64 Id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint32 GroupDetail = 3;
  if (has_groupdetail()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->groupdetail());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnsObjectDetailRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SnsObjectDetailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SnsObjectDetailRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnsObjectDetailRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SnsObjectDetailRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SnsObjectDetailRequest)
    MergeFrom(*source);
  }
}

void SnsObjectDetailRequest::MergeFrom(const SnsObjectDetailRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SnsObjectDetailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      groupdetail_ = from.groupdetail_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SnsObjectDetailRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SnsObjectDetailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnsObjectDetailRequest::CopyFrom(const SnsObjectDetailRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SnsObjectDetailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsObjectDetailRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void SnsObjectDetailRequest::Swap(SnsObjectDetailRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnsObjectDetailRequest::InternalSwap(SnsObjectDetailRequest* other) {
  std::swap(baserequest_, other->baserequest_);
  std::swap(id_, other->id_);
  std::swap(groupdetail_, other->groupdetail_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnsObjectDetailRequest::GetMetadata() const {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnsObjectDetailRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool SnsObjectDetailRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnsObjectDetailRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void SnsObjectDetailRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnsObjectDetailRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& SnsObjectDetailRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsObjectDetailRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* SnsObjectDetailRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsObjectDetailRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* SnsObjectDetailRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.SnsObjectDetailRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void SnsObjectDetailRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsObjectDetailRequest.BaseRequest)
}

// required uint64 Id = 2;
bool SnsObjectDetailRequest::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SnsObjectDetailRequest::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void SnsObjectDetailRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void SnsObjectDetailRequest::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
::google::protobuf::uint64 SnsObjectDetailRequest::id() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsObjectDetailRequest.Id)
  return id_;
}
void SnsObjectDetailRequest::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsObjectDetailRequest.Id)
}

// optional uint32 GroupDetail = 3;
bool SnsObjectDetailRequest::has_groupdetail() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SnsObjectDetailRequest::set_has_groupdetail() {
  _has_bits_[0] |= 0x00000004u;
}
void SnsObjectDetailRequest::clear_has_groupdetail() {
  _has_bits_[0] &= ~0x00000004u;
}
void SnsObjectDetailRequest::clear_groupdetail() {
  groupdetail_ = 0u;
  clear_has_groupdetail();
}
::google::protobuf::uint32 SnsObjectDetailRequest::groupdetail() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsObjectDetailRequest.GroupDetail)
  return groupdetail_;
}
void SnsObjectDetailRequest::set_groupdetail(::google::protobuf::uint32 value) {
  set_has_groupdetail();
  groupdetail_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsObjectDetailRequest.GroupDetail)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnsObjectDetailResponse::kBaseResponseFieldNumber;
const int SnsObjectDetailResponse::kObjectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnsObjectDetailResponse::SnsObjectDetailResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsns_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SnsObjectDetailResponse)
}
SnsObjectDetailResponse::SnsObjectDetailResponse(const SnsObjectDetailResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_object()) {
    object_ = new ::micromsg::SnsObject(*from.object_);
  } else {
    object_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.SnsObjectDetailResponse)
}

void SnsObjectDetailResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&object_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(object_));
}

SnsObjectDetailResponse::~SnsObjectDetailResponse() {
  // @@protoc_insertion_point(destructor:micromsg.SnsObjectDetailResponse)
  SharedDtor();
}

void SnsObjectDetailResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete object_;
  }
}

void SnsObjectDetailResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnsObjectDetailResponse::descriptor() {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnsObjectDetailResponse& SnsObjectDetailResponse::default_instance() {
  protobuf_mmsns_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnsObjectDetailResponse* SnsObjectDetailResponse::New(::google::protobuf::Arena* arena) const {
  SnsObjectDetailResponse* n = new SnsObjectDetailResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnsObjectDetailResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SnsObjectDetailResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_object()) {
      GOOGLE_DCHECK(object_ != NULL);
      object_->::micromsg::SnsObject::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnsObjectDetailResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SnsObjectDetailResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SnsObject Object = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_object()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SnsObjectDetailResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SnsObjectDetailResponse)
  return false;
#undef DO_
}

void SnsObjectDetailResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SnsObjectDetailResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required .micromsg.SnsObject Object = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->object_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SnsObjectDetailResponse)
}

::google::protobuf::uint8* SnsObjectDetailResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SnsObjectDetailResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required .micromsg.SnsObject Object = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->object_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SnsObjectDetailResponse)
  return target;
}

size_t SnsObjectDetailResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SnsObjectDetailResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_object()) {
    // required .micromsg.SnsObject Object = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->object_);
  }

  return total_size;
}
size_t SnsObjectDetailResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SnsObjectDetailResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required .micromsg.SnsObject Object = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->object_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnsObjectDetailResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SnsObjectDetailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SnsObjectDetailResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnsObjectDetailResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SnsObjectDetailResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SnsObjectDetailResponse)
    MergeFrom(*source);
  }
}

void SnsObjectDetailResponse::MergeFrom(const SnsObjectDetailResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SnsObjectDetailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_object()->::micromsg::SnsObject::MergeFrom(from.object());
    }
  }
}

void SnsObjectDetailResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SnsObjectDetailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnsObjectDetailResponse::CopyFrom(const SnsObjectDetailResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SnsObjectDetailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsObjectDetailResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_object()) {
    if (!this->object_->IsInitialized()) return false;
  }
  return true;
}

void SnsObjectDetailResponse::Swap(SnsObjectDetailResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnsObjectDetailResponse::InternalSwap(SnsObjectDetailResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(object_, other->object_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnsObjectDetailResponse::GetMetadata() const {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnsObjectDetailResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool SnsObjectDetailResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnsObjectDetailResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void SnsObjectDetailResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnsObjectDetailResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& SnsObjectDetailResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsObjectDetailResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* SnsObjectDetailResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsObjectDetailResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* SnsObjectDetailResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.SnsObjectDetailResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void SnsObjectDetailResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsObjectDetailResponse.BaseResponse)
}

// required .micromsg.SnsObject Object = 2;
bool SnsObjectDetailResponse::has_object() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SnsObjectDetailResponse::set_has_object() {
  _has_bits_[0] |= 0x00000002u;
}
void SnsObjectDetailResponse::clear_has_object() {
  _has_bits_[0] &= ~0x00000002u;
}
void SnsObjectDetailResponse::clear_object() {
  if (object_ != NULL) object_->::micromsg::SnsObject::Clear();
  clear_has_object();
}
const ::micromsg::SnsObject& SnsObjectDetailResponse::object() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsObjectDetailResponse.Object)
  return object_ != NULL ? *object_
                         : *::micromsg::SnsObject::internal_default_instance();
}
::micromsg::SnsObject* SnsObjectDetailResponse::mutable_object() {
  set_has_object();
  if (object_ == NULL) {
    object_ = new ::micromsg::SnsObject;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsObjectDetailResponse.Object)
  return object_;
}
::micromsg::SnsObject* SnsObjectDetailResponse::release_object() {
  // @@protoc_insertion_point(field_release:micromsg.SnsObjectDetailResponse.Object)
  clear_has_object();
  ::micromsg::SnsObject* temp = object_;
  object_ = NULL;
  return temp;
}
void SnsObjectDetailResponse::set_allocated_object(::micromsg::SnsObject* object) {
  delete object_;
  object_ = object;
  if (object) {
    set_has_object();
  } else {
    clear_has_object();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsObjectDetailResponse.Object)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnsADObjectDetailRequest::kBaseRequestFieldNumber;
const int SnsADObjectDetailRequest::kIdFieldNumber;
const int SnsADObjectDetailRequest::kSceneFieldNumber;
const int SnsADObjectDetailRequest::kSessionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnsADObjectDetailRequest::SnsADObjectDetailRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsns_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SnsADObjectDetailRequest)
}
SnsADObjectDetailRequest::SnsADObjectDetailRequest(const SnsADObjectDetailRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_session()) {
    session_ = new ::micromsg::SKBuiltinBuffer_t(*from.session_);
  } else {
    session_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&scene_) -
    reinterpret_cast<char*>(&id_) + sizeof(scene_));
  // @@protoc_insertion_point(copy_constructor:micromsg.SnsADObjectDetailRequest)
}

void SnsADObjectDetailRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&scene_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(scene_));
}

SnsADObjectDetailRequest::~SnsADObjectDetailRequest() {
  // @@protoc_insertion_point(destructor:micromsg.SnsADObjectDetailRequest)
  SharedDtor();
}

void SnsADObjectDetailRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete session_;
  }
}

void SnsADObjectDetailRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnsADObjectDetailRequest::descriptor() {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnsADObjectDetailRequest& SnsADObjectDetailRequest::default_instance() {
  protobuf_mmsns_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnsADObjectDetailRequest* SnsADObjectDetailRequest::New(::google::protobuf::Arena* arena) const {
  SnsADObjectDetailRequest* n = new SnsADObjectDetailRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnsADObjectDetailRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SnsADObjectDetailRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_session()) {
      GOOGLE_DCHECK(session_ != NULL);
      session_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&scene_) -
      reinterpret_cast<char*>(&id_) + sizeof(scene_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnsADObjectDetailRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SnsADObjectDetailRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 Id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Scene = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_scene();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t Session = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SnsADObjectDetailRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SnsADObjectDetailRequest)
  return false;
#undef DO_
}

void SnsADObjectDetailRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SnsADObjectDetailRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint64 Id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // optional uint32 Scene = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->scene(), output);
  }

  // optional .micromsg.SKBuiltinBuffer_t Session = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->session_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SnsADObjectDetailRequest)
}

::google::protobuf::uint8* SnsADObjectDetailRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SnsADObjectDetailRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint64 Id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // optional uint32 Scene = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->scene(), target);
  }

  // optional .micromsg.SKBuiltinBuffer_t Session = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->session_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SnsADObjectDetailRequest)
  return target;
}

size_t SnsADObjectDetailRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SnsADObjectDetailRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_id()) {
    // required uint64 Id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  return total_size;
}
size_t SnsADObjectDetailRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SnsADObjectDetailRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint64 Id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .micromsg.SKBuiltinBuffer_t Session = 4;
  if (has_session()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->session_);
  }

  // optional uint32 Scene = 3;
  if (has_scene()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnsADObjectDetailRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SnsADObjectDetailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SnsADObjectDetailRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnsADObjectDetailRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SnsADObjectDetailRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SnsADObjectDetailRequest)
    MergeFrom(*source);
  }
}

void SnsADObjectDetailRequest::MergeFrom(const SnsADObjectDetailRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SnsADObjectDetailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_session()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.session());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      scene_ = from.scene_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SnsADObjectDetailRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SnsADObjectDetailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnsADObjectDetailRequest::CopyFrom(const SnsADObjectDetailRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SnsADObjectDetailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsADObjectDetailRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_session()) {
    if (!this->session_->IsInitialized()) return false;
  }
  return true;
}

void SnsADObjectDetailRequest::Swap(SnsADObjectDetailRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnsADObjectDetailRequest::InternalSwap(SnsADObjectDetailRequest* other) {
  std::swap(baserequest_, other->baserequest_);
  std::swap(session_, other->session_);
  std::swap(id_, other->id_);
  std::swap(scene_, other->scene_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnsADObjectDetailRequest::GetMetadata() const {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnsADObjectDetailRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool SnsADObjectDetailRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnsADObjectDetailRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void SnsADObjectDetailRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnsADObjectDetailRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& SnsADObjectDetailRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsADObjectDetailRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* SnsADObjectDetailRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsADObjectDetailRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* SnsADObjectDetailRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.SnsADObjectDetailRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void SnsADObjectDetailRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsADObjectDetailRequest.BaseRequest)
}

// required uint64 Id = 2;
bool SnsADObjectDetailRequest::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SnsADObjectDetailRequest::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
void SnsADObjectDetailRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void SnsADObjectDetailRequest::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
::google::protobuf::uint64 SnsADObjectDetailRequest::id() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsADObjectDetailRequest.Id)
  return id_;
}
void SnsADObjectDetailRequest::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsADObjectDetailRequest.Id)
}

// optional uint32 Scene = 3;
bool SnsADObjectDetailRequest::has_scene() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SnsADObjectDetailRequest::set_has_scene() {
  _has_bits_[0] |= 0x00000008u;
}
void SnsADObjectDetailRequest::clear_has_scene() {
  _has_bits_[0] &= ~0x00000008u;
}
void SnsADObjectDetailRequest::clear_scene() {
  scene_ = 0u;
  clear_has_scene();
}
::google::protobuf::uint32 SnsADObjectDetailRequest::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsADObjectDetailRequest.Scene)
  return scene_;
}
void SnsADObjectDetailRequest::set_scene(::google::protobuf::uint32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsADObjectDetailRequest.Scene)
}

// optional .micromsg.SKBuiltinBuffer_t Session = 4;
bool SnsADObjectDetailRequest::has_session() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SnsADObjectDetailRequest::set_has_session() {
  _has_bits_[0] |= 0x00000002u;
}
void SnsADObjectDetailRequest::clear_has_session() {
  _has_bits_[0] &= ~0x00000002u;
}
void SnsADObjectDetailRequest::clear_session() {
  if (session_ != NULL) session_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_session();
}
const ::micromsg::SKBuiltinBuffer_t& SnsADObjectDetailRequest::session() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsADObjectDetailRequest.Session)
  return session_ != NULL ? *session_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* SnsADObjectDetailRequest::mutable_session() {
  set_has_session();
  if (session_ == NULL) {
    session_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsADObjectDetailRequest.Session)
  return session_;
}
::micromsg::SKBuiltinBuffer_t* SnsADObjectDetailRequest::release_session() {
  // @@protoc_insertion_point(field_release:micromsg.SnsADObjectDetailRequest.Session)
  clear_has_session();
  ::micromsg::SKBuiltinBuffer_t* temp = session_;
  session_ = NULL;
  return temp;
}
void SnsADObjectDetailRequest::set_allocated_session(::micromsg::SKBuiltinBuffer_t* session) {
  delete session_;
  session_ = session;
  if (session) {
    set_has_session();
  } else {
    clear_has_session();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsADObjectDetailRequest.Session)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnsADObjectDetailResponse::kBaseResponseFieldNumber;
const int SnsADObjectDetailResponse::kObjectFieldNumber;
const int SnsADObjectDetailResponse::kSessionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnsADObjectDetailResponse::SnsADObjectDetailResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsns_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SnsADObjectDetailResponse)
}
SnsADObjectDetailResponse::SnsADObjectDetailResponse(const SnsADObjectDetailResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_object()) {
    object_ = new ::micromsg::SnsADObject(*from.object_);
  } else {
    object_ = NULL;
  }
  if (from.has_session()) {
    session_ = new ::micromsg::SKBuiltinBuffer_t(*from.session_);
  } else {
    session_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.SnsADObjectDetailResponse)
}

void SnsADObjectDetailResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&session_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(session_));
}

SnsADObjectDetailResponse::~SnsADObjectDetailResponse() {
  // @@protoc_insertion_point(destructor:micromsg.SnsADObjectDetailResponse)
  SharedDtor();
}

void SnsADObjectDetailResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete object_;
  }
  if (this != internal_default_instance()) {
    delete session_;
  }
}

void SnsADObjectDetailResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnsADObjectDetailResponse::descriptor() {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnsADObjectDetailResponse& SnsADObjectDetailResponse::default_instance() {
  protobuf_mmsns_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnsADObjectDetailResponse* SnsADObjectDetailResponse::New(::google::protobuf::Arena* arena) const {
  SnsADObjectDetailResponse* n = new SnsADObjectDetailResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnsADObjectDetailResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SnsADObjectDetailResponse)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_object()) {
      GOOGLE_DCHECK(object_ != NULL);
      object_->::micromsg::SnsADObject::Clear();
    }
    if (has_session()) {
      GOOGLE_DCHECK(session_ != NULL);
      session_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnsADObjectDetailResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SnsADObjectDetailResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SnsADObject Object = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_object()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t Session = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SnsADObjectDetailResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SnsADObjectDetailResponse)
  return false;
#undef DO_
}

void SnsADObjectDetailResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SnsADObjectDetailResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required .micromsg.SnsADObject Object = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->object_, output);
  }

  // optional .micromsg.SKBuiltinBuffer_t Session = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->session_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SnsADObjectDetailResponse)
}

::google::protobuf::uint8* SnsADObjectDetailResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SnsADObjectDetailResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required .micromsg.SnsADObject Object = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->object_, deterministic, target);
  }

  // optional .micromsg.SKBuiltinBuffer_t Session = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->session_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SnsADObjectDetailResponse)
  return target;
}

size_t SnsADObjectDetailResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SnsADObjectDetailResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_object()) {
    // required .micromsg.SnsADObject Object = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->object_);
  }

  return total_size;
}
size_t SnsADObjectDetailResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SnsADObjectDetailResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required .micromsg.SnsADObject Object = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->object_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .micromsg.SKBuiltinBuffer_t Session = 3;
  if (has_session()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->session_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnsADObjectDetailResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SnsADObjectDetailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SnsADObjectDetailResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnsADObjectDetailResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SnsADObjectDetailResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SnsADObjectDetailResponse)
    MergeFrom(*source);
  }
}

void SnsADObjectDetailResponse::MergeFrom(const SnsADObjectDetailResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SnsADObjectDetailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_object()->::micromsg::SnsADObject::MergeFrom(from.object());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_session()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.session());
    }
  }
}

void SnsADObjectDetailResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SnsADObjectDetailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnsADObjectDetailResponse::CopyFrom(const SnsADObjectDetailResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SnsADObjectDetailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsADObjectDetailResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_object()) {
    if (!this->object_->IsInitialized()) return false;
  }
  if (has_session()) {
    if (!this->session_->IsInitialized()) return false;
  }
  return true;
}

void SnsADObjectDetailResponse::Swap(SnsADObjectDetailResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnsADObjectDetailResponse::InternalSwap(SnsADObjectDetailResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(object_, other->object_);
  std::swap(session_, other->session_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnsADObjectDetailResponse::GetMetadata() const {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnsADObjectDetailResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool SnsADObjectDetailResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnsADObjectDetailResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void SnsADObjectDetailResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnsADObjectDetailResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& SnsADObjectDetailResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsADObjectDetailResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* SnsADObjectDetailResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsADObjectDetailResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* SnsADObjectDetailResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.SnsADObjectDetailResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void SnsADObjectDetailResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsADObjectDetailResponse.BaseResponse)
}

// required .micromsg.SnsADObject Object = 2;
bool SnsADObjectDetailResponse::has_object() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SnsADObjectDetailResponse::set_has_object() {
  _has_bits_[0] |= 0x00000002u;
}
void SnsADObjectDetailResponse::clear_has_object() {
  _has_bits_[0] &= ~0x00000002u;
}
void SnsADObjectDetailResponse::clear_object() {
  if (object_ != NULL) object_->::micromsg::SnsADObject::Clear();
  clear_has_object();
}
const ::micromsg::SnsADObject& SnsADObjectDetailResponse::object() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsADObjectDetailResponse.Object)
  return object_ != NULL ? *object_
                         : *::micromsg::SnsADObject::internal_default_instance();
}
::micromsg::SnsADObject* SnsADObjectDetailResponse::mutable_object() {
  set_has_object();
  if (object_ == NULL) {
    object_ = new ::micromsg::SnsADObject;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsADObjectDetailResponse.Object)
  return object_;
}
::micromsg::SnsADObject* SnsADObjectDetailResponse::release_object() {
  // @@protoc_insertion_point(field_release:micromsg.SnsADObjectDetailResponse.Object)
  clear_has_object();
  ::micromsg::SnsADObject* temp = object_;
  object_ = NULL;
  return temp;
}
void SnsADObjectDetailResponse::set_allocated_object(::micromsg::SnsADObject* object) {
  delete object_;
  object_ = object;
  if (object) {
    set_has_object();
  } else {
    clear_has_object();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsADObjectDetailResponse.Object)
}

// optional .micromsg.SKBuiltinBuffer_t Session = 3;
bool SnsADObjectDetailResponse::has_session() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SnsADObjectDetailResponse::set_has_session() {
  _has_bits_[0] |= 0x00000004u;
}
void SnsADObjectDetailResponse::clear_has_session() {
  _has_bits_[0] &= ~0x00000004u;
}
void SnsADObjectDetailResponse::clear_session() {
  if (session_ != NULL) session_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_session();
}
const ::micromsg::SKBuiltinBuffer_t& SnsADObjectDetailResponse::session() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsADObjectDetailResponse.Session)
  return session_ != NULL ? *session_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* SnsADObjectDetailResponse::mutable_session() {
  set_has_session();
  if (session_ == NULL) {
    session_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsADObjectDetailResponse.Session)
  return session_;
}
::micromsg::SKBuiltinBuffer_t* SnsADObjectDetailResponse::release_session() {
  // @@protoc_insertion_point(field_release:micromsg.SnsADObjectDetailResponse.Session)
  clear_has_session();
  ::micromsg::SKBuiltinBuffer_t* temp = session_;
  session_ = NULL;
  return temp;
}
void SnsADObjectDetailResponse::set_allocated_session(::micromsg::SKBuiltinBuffer_t* session) {
  delete session_;
  session_ = session;
  if (session) {
    set_has_session();
  } else {
    clear_has_session();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsADObjectDetailResponse.Session)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnsServerConfig::kPostMentionLimitFieldNumber;
const int SnsServerConfig::kCopyAndPasteWordLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnsServerConfig::SnsServerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsns_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SnsServerConfig)
}
SnsServerConfig::SnsServerConfig(const SnsServerConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&postmentionlimit_, &from.postmentionlimit_,
    reinterpret_cast<char*>(&copyandpastewordlimit_) -
    reinterpret_cast<char*>(&postmentionlimit_) + sizeof(copyandpastewordlimit_));
  // @@protoc_insertion_point(copy_constructor:micromsg.SnsServerConfig)
}

void SnsServerConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&postmentionlimit_, 0, reinterpret_cast<char*>(&copyandpastewordlimit_) -
    reinterpret_cast<char*>(&postmentionlimit_) + sizeof(copyandpastewordlimit_));
}

SnsServerConfig::~SnsServerConfig() {
  // @@protoc_insertion_point(destructor:micromsg.SnsServerConfig)
  SharedDtor();
}

void SnsServerConfig::SharedDtor() {
}

void SnsServerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnsServerConfig::descriptor() {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnsServerConfig& SnsServerConfig::default_instance() {
  protobuf_mmsns_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnsServerConfig* SnsServerConfig::New(::google::protobuf::Arena* arena) const {
  SnsServerConfig* n = new SnsServerConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnsServerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SnsServerConfig)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&postmentionlimit_, 0, reinterpret_cast<char*>(&copyandpastewordlimit_) -
      reinterpret_cast<char*>(&postmentionlimit_) + sizeof(copyandpastewordlimit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnsServerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SnsServerConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 PostMentionLimit = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_postmentionlimit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &postmentionlimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 CopyAndPasteWordLimit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_copyandpastewordlimit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &copyandpastewordlimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SnsServerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SnsServerConfig)
  return false;
#undef DO_
}

void SnsServerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SnsServerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 PostMentionLimit = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->postmentionlimit(), output);
  }

  // optional int32 CopyAndPasteWordLimit = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->copyandpastewordlimit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SnsServerConfig)
}

::google::protobuf::uint8* SnsServerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SnsServerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 PostMentionLimit = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->postmentionlimit(), target);
  }

  // optional int32 CopyAndPasteWordLimit = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->copyandpastewordlimit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SnsServerConfig)
  return target;
}

size_t SnsServerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SnsServerConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 PostMentionLimit = 1;
    if (has_postmentionlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->postmentionlimit());
    }

    // optional int32 CopyAndPasteWordLimit = 2;
    if (has_copyandpastewordlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->copyandpastewordlimit());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnsServerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SnsServerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SnsServerConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnsServerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SnsServerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SnsServerConfig)
    MergeFrom(*source);
  }
}

void SnsServerConfig::MergeFrom(const SnsServerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SnsServerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      postmentionlimit_ = from.postmentionlimit_;
    }
    if (cached_has_bits & 0x00000002u) {
      copyandpastewordlimit_ = from.copyandpastewordlimit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SnsServerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SnsServerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnsServerConfig::CopyFrom(const SnsServerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SnsServerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsServerConfig::IsInitialized() const {
  return true;
}

void SnsServerConfig::Swap(SnsServerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnsServerConfig::InternalSwap(SnsServerConfig* other) {
  std::swap(postmentionlimit_, other->postmentionlimit_);
  std::swap(copyandpastewordlimit_, other->copyandpastewordlimit_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnsServerConfig::GetMetadata() const {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnsServerConfig

// optional int32 PostMentionLimit = 1;
bool SnsServerConfig::has_postmentionlimit() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnsServerConfig::set_has_postmentionlimit() {
  _has_bits_[0] |= 0x00000001u;
}
void SnsServerConfig::clear_has_postmentionlimit() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnsServerConfig::clear_postmentionlimit() {
  postmentionlimit_ = 0;
  clear_has_postmentionlimit();
}
::google::protobuf::int32 SnsServerConfig::postmentionlimit() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsServerConfig.PostMentionLimit)
  return postmentionlimit_;
}
void SnsServerConfig::set_postmentionlimit(::google::protobuf::int32 value) {
  set_has_postmentionlimit();
  postmentionlimit_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsServerConfig.PostMentionLimit)
}

// optional int32 CopyAndPasteWordLimit = 2;
bool SnsServerConfig::has_copyandpastewordlimit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SnsServerConfig::set_has_copyandpastewordlimit() {
  _has_bits_[0] |= 0x00000002u;
}
void SnsServerConfig::clear_has_copyandpastewordlimit() {
  _has_bits_[0] &= ~0x00000002u;
}
void SnsServerConfig::clear_copyandpastewordlimit() {
  copyandpastewordlimit_ = 0;
  clear_has_copyandpastewordlimit();
}
::google::protobuf::int32 SnsServerConfig::copyandpastewordlimit() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsServerConfig.CopyAndPasteWordLimit)
  return copyandpastewordlimit_;
}
void SnsServerConfig::set_copyandpastewordlimit(::google::protobuf::int32 value) {
  set_has_copyandpastewordlimit();
  copyandpastewordlimit_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsServerConfig.CopyAndPasteWordLimit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnsTimeLineRequest::kBaseRequestFieldNumber;
const int SnsTimeLineRequest::kFirstPageMd5FieldNumber;
const int SnsTimeLineRequest::kMaxIdFieldNumber;
const int SnsTimeLineRequest::kMinFilterIdFieldNumber;
const int SnsTimeLineRequest::kLastRequestTimeFieldNumber;
const int SnsTimeLineRequest::kClientLatestIdFieldNumber;
const int SnsTimeLineRequest::kSessionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnsTimeLineRequest::SnsTimeLineRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsns_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SnsTimeLineRequest)
}
SnsTimeLineRequest::SnsTimeLineRequest(const SnsTimeLineRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  firstpagemd5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_firstpagemd5()) {
    firstpagemd5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firstpagemd5_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_session()) {
    session_ = new ::micromsg::SKBuiltinBuffer_t(*from.session_);
  } else {
    session_ = NULL;
  }
  ::memcpy(&maxid_, &from.maxid_,
    reinterpret_cast<char*>(&lastrequesttime_) -
    reinterpret_cast<char*>(&maxid_) + sizeof(lastrequesttime_));
  // @@protoc_insertion_point(copy_constructor:micromsg.SnsTimeLineRequest)
}

void SnsTimeLineRequest::SharedCtor() {
  _cached_size_ = 0;
  firstpagemd5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&lastrequesttime_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(lastrequesttime_));
}

SnsTimeLineRequest::~SnsTimeLineRequest() {
  // @@protoc_insertion_point(destructor:micromsg.SnsTimeLineRequest)
  SharedDtor();
}

void SnsTimeLineRequest::SharedDtor() {
  firstpagemd5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete session_;
  }
}

void SnsTimeLineRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnsTimeLineRequest::descriptor() {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnsTimeLineRequest& SnsTimeLineRequest::default_instance() {
  protobuf_mmsns_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnsTimeLineRequest* SnsTimeLineRequest::New(::google::protobuf::Arena* arena) const {
  SnsTimeLineRequest* n = new SnsTimeLineRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnsTimeLineRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SnsTimeLineRequest)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_firstpagemd5()) {
      GOOGLE_DCHECK(!firstpagemd5_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*firstpagemd5_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_session()) {
      GOOGLE_DCHECK(session_ != NULL);
      session_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 120u) {
    ::memset(&maxid_, 0, reinterpret_cast<char*>(&lastrequesttime_) -
      reinterpret_cast<char*>(&maxid_) + sizeof(lastrequesttime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnsTimeLineRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SnsTimeLineRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FirstPageMd5 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firstpagemd5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->firstpagemd5().data(), this->firstpagemd5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SnsTimeLineRequest.FirstPageMd5");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 MaxId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_maxid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 MinFilterId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_minfilterid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &minfilterid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 LastRequestTime = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_lastrequesttime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastrequesttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ClientLatestId = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_clientlatestid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clientlatestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t Session = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SnsTimeLineRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SnsTimeLineRequest)
  return false;
#undef DO_
}

void SnsTimeLineRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SnsTimeLineRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string FirstPageMd5 = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firstpagemd5().data(), this->firstpagemd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsTimeLineRequest.FirstPageMd5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->firstpagemd5(), output);
  }

  // required uint64 MaxId = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->maxid(), output);
  }

  // optional uint64 MinFilterId = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->minfilterid(), output);
  }

  // optional uint32 LastRequestTime = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lastrequesttime(), output);
  }

  // optional uint64 ClientLatestId = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->clientlatestid(), output);
  }

  // optional .micromsg.SKBuiltinBuffer_t Session = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->session_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SnsTimeLineRequest)
}

::google::protobuf::uint8* SnsTimeLineRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SnsTimeLineRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string FirstPageMd5 = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firstpagemd5().data(), this->firstpagemd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsTimeLineRequest.FirstPageMd5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->firstpagemd5(), target);
  }

  // required uint64 MaxId = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->maxid(), target);
  }

  // optional uint64 MinFilterId = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->minfilterid(), target);
  }

  // optional uint32 LastRequestTime = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->lastrequesttime(), target);
  }

  // optional uint64 ClientLatestId = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->clientlatestid(), target);
  }

  // optional .micromsg.SKBuiltinBuffer_t Session = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->session_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SnsTimeLineRequest)
  return target;
}

size_t SnsTimeLineRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SnsTimeLineRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_maxid()) {
    // required uint64 MaxId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->maxid());
  }

  return total_size;
}
size_t SnsTimeLineRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SnsTimeLineRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000a) ^ 0x0000000a) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint64 MaxId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->maxid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string FirstPageMd5 = 2;
  if (has_firstpagemd5()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->firstpagemd5());
  }

  // optional .micromsg.SKBuiltinBuffer_t Session = 7;
  if (has_session()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->session_);
  }

  if (_has_bits_[0 / 32] & 112u) {
    // optional uint64 MinFilterId = 4;
    if (has_minfilterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->minfilterid());
    }

    // optional uint64 ClientLatestId = 6;
    if (has_clientlatestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clientlatestid());
    }

    // optional uint32 LastRequestTime = 5;
    if (has_lastrequesttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastrequesttime());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnsTimeLineRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SnsTimeLineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SnsTimeLineRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnsTimeLineRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SnsTimeLineRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SnsTimeLineRequest)
    MergeFrom(*source);
  }
}

void SnsTimeLineRequest::MergeFrom(const SnsTimeLineRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SnsTimeLineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_firstpagemd5();
      firstpagemd5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firstpagemd5_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_session()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.session());
    }
    if (cached_has_bits & 0x00000008u) {
      maxid_ = from.maxid_;
    }
    if (cached_has_bits & 0x00000010u) {
      minfilterid_ = from.minfilterid_;
    }
    if (cached_has_bits & 0x00000020u) {
      clientlatestid_ = from.clientlatestid_;
    }
    if (cached_has_bits & 0x00000040u) {
      lastrequesttime_ = from.lastrequesttime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SnsTimeLineRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SnsTimeLineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnsTimeLineRequest::CopyFrom(const SnsTimeLineRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SnsTimeLineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsTimeLineRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000a) != 0x0000000a) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_session()) {
    if (!this->session_->IsInitialized()) return false;
  }
  return true;
}

void SnsTimeLineRequest::Swap(SnsTimeLineRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnsTimeLineRequest::InternalSwap(SnsTimeLineRequest* other) {
  firstpagemd5_.Swap(&other->firstpagemd5_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(session_, other->session_);
  std::swap(maxid_, other->maxid_);
  std::swap(minfilterid_, other->minfilterid_);
  std::swap(clientlatestid_, other->clientlatestid_);
  std::swap(lastrequesttime_, other->lastrequesttime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnsTimeLineRequest::GetMetadata() const {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnsTimeLineRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool SnsTimeLineRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SnsTimeLineRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void SnsTimeLineRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void SnsTimeLineRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& SnsTimeLineRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsTimeLineRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* SnsTimeLineRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsTimeLineRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* SnsTimeLineRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.SnsTimeLineRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void SnsTimeLineRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsTimeLineRequest.BaseRequest)
}

// optional string FirstPageMd5 = 2;
bool SnsTimeLineRequest::has_firstpagemd5() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnsTimeLineRequest::set_has_firstpagemd5() {
  _has_bits_[0] |= 0x00000001u;
}
void SnsTimeLineRequest::clear_has_firstpagemd5() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnsTimeLineRequest::clear_firstpagemd5() {
  firstpagemd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_firstpagemd5();
}
const ::std::string& SnsTimeLineRequest::firstpagemd5() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsTimeLineRequest.FirstPageMd5)
  return firstpagemd5_.GetNoArena();
}
void SnsTimeLineRequest::set_firstpagemd5(const ::std::string& value) {
  set_has_firstpagemd5();
  firstpagemd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SnsTimeLineRequest.FirstPageMd5)
}
#if LANG_CXX11
void SnsTimeLineRequest::set_firstpagemd5(::std::string&& value) {
  set_has_firstpagemd5();
  firstpagemd5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SnsTimeLineRequest.FirstPageMd5)
}
#endif
void SnsTimeLineRequest::set_firstpagemd5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_firstpagemd5();
  firstpagemd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SnsTimeLineRequest.FirstPageMd5)
}
void SnsTimeLineRequest::set_firstpagemd5(const char* value, size_t size) {
  set_has_firstpagemd5();
  firstpagemd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SnsTimeLineRequest.FirstPageMd5)
}
::std::string* SnsTimeLineRequest::mutable_firstpagemd5() {
  set_has_firstpagemd5();
  // @@protoc_insertion_point(field_mutable:micromsg.SnsTimeLineRequest.FirstPageMd5)
  return firstpagemd5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnsTimeLineRequest::release_firstpagemd5() {
  // @@protoc_insertion_point(field_release:micromsg.SnsTimeLineRequest.FirstPageMd5)
  clear_has_firstpagemd5();
  return firstpagemd5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnsTimeLineRequest::set_allocated_firstpagemd5(::std::string* firstpagemd5) {
  if (firstpagemd5 != NULL) {
    set_has_firstpagemd5();
  } else {
    clear_has_firstpagemd5();
  }
  firstpagemd5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), firstpagemd5);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsTimeLineRequest.FirstPageMd5)
}

// required uint64 MaxId = 3;
bool SnsTimeLineRequest::has_maxid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SnsTimeLineRequest::set_has_maxid() {
  _has_bits_[0] |= 0x00000008u;
}
void SnsTimeLineRequest::clear_has_maxid() {
  _has_bits_[0] &= ~0x00000008u;
}
void SnsTimeLineRequest::clear_maxid() {
  maxid_ = GOOGLE_ULONGLONG(0);
  clear_has_maxid();
}
::google::protobuf::uint64 SnsTimeLineRequest::maxid() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsTimeLineRequest.MaxId)
  return maxid_;
}
void SnsTimeLineRequest::set_maxid(::google::protobuf::uint64 value) {
  set_has_maxid();
  maxid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsTimeLineRequest.MaxId)
}

// optional uint64 MinFilterId = 4;
bool SnsTimeLineRequest::has_minfilterid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SnsTimeLineRequest::set_has_minfilterid() {
  _has_bits_[0] |= 0x00000010u;
}
void SnsTimeLineRequest::clear_has_minfilterid() {
  _has_bits_[0] &= ~0x00000010u;
}
void SnsTimeLineRequest::clear_minfilterid() {
  minfilterid_ = GOOGLE_ULONGLONG(0);
  clear_has_minfilterid();
}
::google::protobuf::uint64 SnsTimeLineRequest::minfilterid() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsTimeLineRequest.MinFilterId)
  return minfilterid_;
}
void SnsTimeLineRequest::set_minfilterid(::google::protobuf::uint64 value) {
  set_has_minfilterid();
  minfilterid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsTimeLineRequest.MinFilterId)
}

// optional uint32 LastRequestTime = 5;
bool SnsTimeLineRequest::has_lastrequesttime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SnsTimeLineRequest::set_has_lastrequesttime() {
  _has_bits_[0] |= 0x00000040u;
}
void SnsTimeLineRequest::clear_has_lastrequesttime() {
  _has_bits_[0] &= ~0x00000040u;
}
void SnsTimeLineRequest::clear_lastrequesttime() {
  lastrequesttime_ = 0u;
  clear_has_lastrequesttime();
}
::google::protobuf::uint32 SnsTimeLineRequest::lastrequesttime() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsTimeLineRequest.LastRequestTime)
  return lastrequesttime_;
}
void SnsTimeLineRequest::set_lastrequesttime(::google::protobuf::uint32 value) {
  set_has_lastrequesttime();
  lastrequesttime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsTimeLineRequest.LastRequestTime)
}

// optional uint64 ClientLatestId = 6;
bool SnsTimeLineRequest::has_clientlatestid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SnsTimeLineRequest::set_has_clientlatestid() {
  _has_bits_[0] |= 0x00000020u;
}
void SnsTimeLineRequest::clear_has_clientlatestid() {
  _has_bits_[0] &= ~0x00000020u;
}
void SnsTimeLineRequest::clear_clientlatestid() {
  clientlatestid_ = GOOGLE_ULONGLONG(0);
  clear_has_clientlatestid();
}
::google::protobuf::uint64 SnsTimeLineRequest::clientlatestid() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsTimeLineRequest.ClientLatestId)
  return clientlatestid_;
}
void SnsTimeLineRequest::set_clientlatestid(::google::protobuf::uint64 value) {
  set_has_clientlatestid();
  clientlatestid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsTimeLineRequest.ClientLatestId)
}

// optional .micromsg.SKBuiltinBuffer_t Session = 7;
bool SnsTimeLineRequest::has_session() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SnsTimeLineRequest::set_has_session() {
  _has_bits_[0] |= 0x00000004u;
}
void SnsTimeLineRequest::clear_has_session() {
  _has_bits_[0] &= ~0x00000004u;
}
void SnsTimeLineRequest::clear_session() {
  if (session_ != NULL) session_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_session();
}
const ::micromsg::SKBuiltinBuffer_t& SnsTimeLineRequest::session() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsTimeLineRequest.Session)
  return session_ != NULL ? *session_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* SnsTimeLineRequest::mutable_session() {
  set_has_session();
  if (session_ == NULL) {
    session_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsTimeLineRequest.Session)
  return session_;
}
::micromsg::SKBuiltinBuffer_t* SnsTimeLineRequest::release_session() {
  // @@protoc_insertion_point(field_release:micromsg.SnsTimeLineRequest.Session)
  clear_has_session();
  ::micromsg::SKBuiltinBuffer_t* temp = session_;
  session_ = NULL;
  return temp;
}
void SnsTimeLineRequest::set_allocated_session(::micromsg::SKBuiltinBuffer_t* session) {
  delete session_;
  session_ = session;
  if (session) {
    set_has_session();
  } else {
    clear_has_session();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsTimeLineRequest.Session)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnsTimeLineResponse::kBaseResponseFieldNumber;
const int SnsTimeLineResponse::kFirstPageMd5FieldNumber;
const int SnsTimeLineResponse::kObjectCountFieldNumber;
const int SnsTimeLineResponse::kObjectListFieldNumber;
const int SnsTimeLineResponse::kNewRequestTimeFieldNumber;
const int SnsTimeLineResponse::kObjectCountForSameMd5FieldNumber;
const int SnsTimeLineResponse::kControlFlagFieldNumber;
const int SnsTimeLineResponse::kServerConfigFieldNumber;
const int SnsTimeLineResponse::kAdvertiseCountFieldNumber;
const int SnsTimeLineResponse::kAdvertiseListFieldNumber;
const int SnsTimeLineResponse::kSessionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnsTimeLineResponse::SnsTimeLineResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsns_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SnsTimeLineResponse)
}
SnsTimeLineResponse::SnsTimeLineResponse(const SnsTimeLineResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      objectlist_(from.objectlist_),
      advertiselist_(from.advertiselist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  firstpagemd5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_firstpagemd5()) {
    firstpagemd5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firstpagemd5_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_serverconfig()) {
    serverconfig_ = new ::micromsg::SnsServerConfig(*from.serverconfig_);
  } else {
    serverconfig_ = NULL;
  }
  if (from.has_session()) {
    session_ = new ::micromsg::SKBuiltinBuffer_t(*from.session_);
  } else {
    session_ = NULL;
  }
  ::memcpy(&objectcount_, &from.objectcount_,
    reinterpret_cast<char*>(&advertisecount_) -
    reinterpret_cast<char*>(&objectcount_) + sizeof(advertisecount_));
  // @@protoc_insertion_point(copy_constructor:micromsg.SnsTimeLineResponse)
}

void SnsTimeLineResponse::SharedCtor() {
  _cached_size_ = 0;
  firstpagemd5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&advertisecount_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(advertisecount_));
}

SnsTimeLineResponse::~SnsTimeLineResponse() {
  // @@protoc_insertion_point(destructor:micromsg.SnsTimeLineResponse)
  SharedDtor();
}

void SnsTimeLineResponse::SharedDtor() {
  firstpagemd5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete serverconfig_;
  }
  if (this != internal_default_instance()) {
    delete session_;
  }
}

void SnsTimeLineResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnsTimeLineResponse::descriptor() {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnsTimeLineResponse& SnsTimeLineResponse::default_instance() {
  protobuf_mmsns_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnsTimeLineResponse* SnsTimeLineResponse::New(::google::protobuf::Arena* arena) const {
  SnsTimeLineResponse* n = new SnsTimeLineResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnsTimeLineResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SnsTimeLineResponse)
  objectlist_.Clear();
  advertiselist_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    if (has_firstpagemd5()) {
      GOOGLE_DCHECK(!firstpagemd5_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*firstpagemd5_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_serverconfig()) {
      GOOGLE_DCHECK(serverconfig_ != NULL);
      serverconfig_->::micromsg::SnsServerConfig::Clear();
    }
    if (has_session()) {
      GOOGLE_DCHECK(session_ != NULL);
      session_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&objectcount_, 0, reinterpret_cast<char*>(&controlflag_) -
      reinterpret_cast<char*>(&objectcount_) + sizeof(controlflag_));
  }
  advertisecount_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnsTimeLineResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SnsTimeLineResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FirstPageMd5 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firstpagemd5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->firstpagemd5().data(), this->firstpagemd5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SnsTimeLineResponse.FirstPageMd5");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ObjectCount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_objectcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &objectcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.SnsObject ObjectList = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objectlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 NewRequestTime = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_newrequesttime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newrequesttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ObjectCountForSameMd5 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_objectcountforsamemd5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &objectcountforsamemd5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ControlFlag = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_controlflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &controlflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SnsServerConfig ServerConfig = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_serverconfig()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 AdvertiseCount = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_advertisecount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &advertisecount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.AdvertiseObject AdvertiseList = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_advertiselist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t Session = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SnsTimeLineResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SnsTimeLineResponse)
  return false;
#undef DO_
}

void SnsTimeLineResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SnsTimeLineResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional string FirstPageMd5 = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firstpagemd5().data(), this->firstpagemd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsTimeLineResponse.FirstPageMd5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->firstpagemd5(), output);
  }

  // required uint32 ObjectCount = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->objectcount(), output);
  }

  // repeated .micromsg.SnsObject ObjectList = 4;
  for (unsigned int i = 0, n = this->objectlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->objectlist(i), output);
  }

  // optional uint32 NewRequestTime = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->newrequesttime(), output);
  }

  // optional uint32 ObjectCountForSameMd5 = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->objectcountforsamemd5(), output);
  }

  // optional uint32 ControlFlag = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->controlflag(), output);
  }

  // optional .micromsg.SnsServerConfig ServerConfig = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->serverconfig_, output);
  }

  // optional uint32 AdvertiseCount = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->advertisecount(), output);
  }

  // repeated .micromsg.AdvertiseObject AdvertiseList = 10;
  for (unsigned int i = 0, n = this->advertiselist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->advertiselist(i), output);
  }

  // optional .micromsg.SKBuiltinBuffer_t Session = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->session_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SnsTimeLineResponse)
}

::google::protobuf::uint8* SnsTimeLineResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SnsTimeLineResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional string FirstPageMd5 = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firstpagemd5().data(), this->firstpagemd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsTimeLineResponse.FirstPageMd5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->firstpagemd5(), target);
  }

  // required uint32 ObjectCount = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->objectcount(), target);
  }

  // repeated .micromsg.SnsObject ObjectList = 4;
  for (unsigned int i = 0, n = this->objectlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->objectlist(i), deterministic, target);
  }

  // optional uint32 NewRequestTime = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->newrequesttime(), target);
  }

  // optional uint32 ObjectCountForSameMd5 = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->objectcountforsamemd5(), target);
  }

  // optional uint32 ControlFlag = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->controlflag(), target);
  }

  // optional .micromsg.SnsServerConfig ServerConfig = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->serverconfig_, deterministic, target);
  }

  // optional uint32 AdvertiseCount = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->advertisecount(), target);
  }

  // repeated .micromsg.AdvertiseObject AdvertiseList = 10;
  for (unsigned int i = 0, n = this->advertiselist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->advertiselist(i), deterministic, target);
  }

  // optional .micromsg.SKBuiltinBuffer_t Session = 11;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->session_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SnsTimeLineResponse)
  return target;
}

size_t SnsTimeLineResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SnsTimeLineResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_objectcount()) {
    // required uint32 ObjectCount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->objectcount());
  }

  return total_size;
}
size_t SnsTimeLineResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SnsTimeLineResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000012) ^ 0x00000012) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 ObjectCount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->objectcount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.SnsObject ObjectList = 4;
  {
    unsigned int count = this->objectlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->objectlist(i));
    }
  }

  // repeated .micromsg.AdvertiseObject AdvertiseList = 10;
  {
    unsigned int count = this->advertiselist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->advertiselist(i));
    }
  }

  // optional string FirstPageMd5 = 2;
  if (has_firstpagemd5()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->firstpagemd5());
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional .micromsg.SnsServerConfig ServerConfig = 8;
    if (has_serverconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->serverconfig_);
    }

    // optional .micromsg.SKBuiltinBuffer_t Session = 11;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->session_);
    }

  }
  if (_has_bits_[0 / 32] & 224u) {
    // optional uint32 NewRequestTime = 5;
    if (has_newrequesttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newrequesttime());
    }

    // optional uint32 ObjectCountForSameMd5 = 6;
    if (has_objectcountforsamemd5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->objectcountforsamemd5());
    }

    // optional uint32 ControlFlag = 7;
    if (has_controlflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->controlflag());
    }

  }
  // optional uint32 AdvertiseCount = 9;
  if (has_advertisecount()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->advertisecount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnsTimeLineResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SnsTimeLineResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SnsTimeLineResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnsTimeLineResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SnsTimeLineResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SnsTimeLineResponse)
    MergeFrom(*source);
  }
}

void SnsTimeLineResponse::MergeFrom(const SnsTimeLineResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SnsTimeLineResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objectlist_.MergeFrom(from.objectlist_);
  advertiselist_.MergeFrom(from.advertiselist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_firstpagemd5();
      firstpagemd5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firstpagemd5_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_serverconfig()->::micromsg::SnsServerConfig::MergeFrom(from.serverconfig());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_session()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.session());
    }
    if (cached_has_bits & 0x00000010u) {
      objectcount_ = from.objectcount_;
    }
    if (cached_has_bits & 0x00000020u) {
      newrequesttime_ = from.newrequesttime_;
    }
    if (cached_has_bits & 0x00000040u) {
      objectcountforsamemd5_ = from.objectcountforsamemd5_;
    }
    if (cached_has_bits & 0x00000080u) {
      controlflag_ = from.controlflag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_advertisecount(from.advertisecount());
  }
}

void SnsTimeLineResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SnsTimeLineResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnsTimeLineResponse::CopyFrom(const SnsTimeLineResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SnsTimeLineResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsTimeLineResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000012) != 0x00000012) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->objectlist())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->advertiselist())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_session()) {
    if (!this->session_->IsInitialized()) return false;
  }
  return true;
}

void SnsTimeLineResponse::Swap(SnsTimeLineResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnsTimeLineResponse::InternalSwap(SnsTimeLineResponse* other) {
  objectlist_.InternalSwap(&other->objectlist_);
  advertiselist_.InternalSwap(&other->advertiselist_);
  firstpagemd5_.Swap(&other->firstpagemd5_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(serverconfig_, other->serverconfig_);
  std::swap(session_, other->session_);
  std::swap(objectcount_, other->objectcount_);
  std::swap(newrequesttime_, other->newrequesttime_);
  std::swap(objectcountforsamemd5_, other->objectcountforsamemd5_);
  std::swap(controlflag_, other->controlflag_);
  std::swap(advertisecount_, other->advertisecount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnsTimeLineResponse::GetMetadata() const {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnsTimeLineResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool SnsTimeLineResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SnsTimeLineResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
void SnsTimeLineResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
void SnsTimeLineResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& SnsTimeLineResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsTimeLineResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* SnsTimeLineResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsTimeLineResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* SnsTimeLineResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.SnsTimeLineResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void SnsTimeLineResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsTimeLineResponse.BaseResponse)
}

// optional string FirstPageMd5 = 2;
bool SnsTimeLineResponse::has_firstpagemd5() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnsTimeLineResponse::set_has_firstpagemd5() {
  _has_bits_[0] |= 0x00000001u;
}
void SnsTimeLineResponse::clear_has_firstpagemd5() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnsTimeLineResponse::clear_firstpagemd5() {
  firstpagemd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_firstpagemd5();
}
const ::std::string& SnsTimeLineResponse::firstpagemd5() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsTimeLineResponse.FirstPageMd5)
  return firstpagemd5_.GetNoArena();
}
void SnsTimeLineResponse::set_firstpagemd5(const ::std::string& value) {
  set_has_firstpagemd5();
  firstpagemd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SnsTimeLineResponse.FirstPageMd5)
}
#if LANG_CXX11
void SnsTimeLineResponse::set_firstpagemd5(::std::string&& value) {
  set_has_firstpagemd5();
  firstpagemd5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SnsTimeLineResponse.FirstPageMd5)
}
#endif
void SnsTimeLineResponse::set_firstpagemd5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_firstpagemd5();
  firstpagemd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SnsTimeLineResponse.FirstPageMd5)
}
void SnsTimeLineResponse::set_firstpagemd5(const char* value, size_t size) {
  set_has_firstpagemd5();
  firstpagemd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SnsTimeLineResponse.FirstPageMd5)
}
::std::string* SnsTimeLineResponse::mutable_firstpagemd5() {
  set_has_firstpagemd5();
  // @@protoc_insertion_point(field_mutable:micromsg.SnsTimeLineResponse.FirstPageMd5)
  return firstpagemd5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnsTimeLineResponse::release_firstpagemd5() {
  // @@protoc_insertion_point(field_release:micromsg.SnsTimeLineResponse.FirstPageMd5)
  clear_has_firstpagemd5();
  return firstpagemd5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnsTimeLineResponse::set_allocated_firstpagemd5(::std::string* firstpagemd5) {
  if (firstpagemd5 != NULL) {
    set_has_firstpagemd5();
  } else {
    clear_has_firstpagemd5();
  }
  firstpagemd5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), firstpagemd5);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsTimeLineResponse.FirstPageMd5)
}

// required uint32 ObjectCount = 3;
bool SnsTimeLineResponse::has_objectcount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SnsTimeLineResponse::set_has_objectcount() {
  _has_bits_[0] |= 0x00000010u;
}
void SnsTimeLineResponse::clear_has_objectcount() {
  _has_bits_[0] &= ~0x00000010u;
}
void SnsTimeLineResponse::clear_objectcount() {
  objectcount_ = 0u;
  clear_has_objectcount();
}
::google::protobuf::uint32 SnsTimeLineResponse::objectcount() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsTimeLineResponse.ObjectCount)
  return objectcount_;
}
void SnsTimeLineResponse::set_objectcount(::google::protobuf::uint32 value) {
  set_has_objectcount();
  objectcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsTimeLineResponse.ObjectCount)
}

// repeated .micromsg.SnsObject ObjectList = 4;
int SnsTimeLineResponse::objectlist_size() const {
  return objectlist_.size();
}
void SnsTimeLineResponse::clear_objectlist() {
  objectlist_.Clear();
}
const ::micromsg::SnsObject& SnsTimeLineResponse::objectlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.SnsTimeLineResponse.ObjectList)
  return objectlist_.Get(index);
}
::micromsg::SnsObject* SnsTimeLineResponse::mutable_objectlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.SnsTimeLineResponse.ObjectList)
  return objectlist_.Mutable(index);
}
::micromsg::SnsObject* SnsTimeLineResponse::add_objectlist() {
  // @@protoc_insertion_point(field_add:micromsg.SnsTimeLineResponse.ObjectList)
  return objectlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::SnsObject >*
SnsTimeLineResponse::mutable_objectlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.SnsTimeLineResponse.ObjectList)
  return &objectlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::SnsObject >&
SnsTimeLineResponse::objectlist() const {
  // @@protoc_insertion_point(field_list:micromsg.SnsTimeLineResponse.ObjectList)
  return objectlist_;
}

// optional uint32 NewRequestTime = 5;
bool SnsTimeLineResponse::has_newrequesttime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SnsTimeLineResponse::set_has_newrequesttime() {
  _has_bits_[0] |= 0x00000020u;
}
void SnsTimeLineResponse::clear_has_newrequesttime() {
  _has_bits_[0] &= ~0x00000020u;
}
void SnsTimeLineResponse::clear_newrequesttime() {
  newrequesttime_ = 0u;
  clear_has_newrequesttime();
}
::google::protobuf::uint32 SnsTimeLineResponse::newrequesttime() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsTimeLineResponse.NewRequestTime)
  return newrequesttime_;
}
void SnsTimeLineResponse::set_newrequesttime(::google::protobuf::uint32 value) {
  set_has_newrequesttime();
  newrequesttime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsTimeLineResponse.NewRequestTime)
}

// optional uint32 ObjectCountForSameMd5 = 6;
bool SnsTimeLineResponse::has_objectcountforsamemd5() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SnsTimeLineResponse::set_has_objectcountforsamemd5() {
  _has_bits_[0] |= 0x00000040u;
}
void SnsTimeLineResponse::clear_has_objectcountforsamemd5() {
  _has_bits_[0] &= ~0x00000040u;
}
void SnsTimeLineResponse::clear_objectcountforsamemd5() {
  objectcountforsamemd5_ = 0u;
  clear_has_objectcountforsamemd5();
}
::google::protobuf::uint32 SnsTimeLineResponse::objectcountforsamemd5() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsTimeLineResponse.ObjectCountForSameMd5)
  return objectcountforsamemd5_;
}
void SnsTimeLineResponse::set_objectcountforsamemd5(::google::protobuf::uint32 value) {
  set_has_objectcountforsamemd5();
  objectcountforsamemd5_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsTimeLineResponse.ObjectCountForSameMd5)
}

// optional uint32 ControlFlag = 7;
bool SnsTimeLineResponse::has_controlflag() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SnsTimeLineResponse::set_has_controlflag() {
  _has_bits_[0] |= 0x00000080u;
}
void SnsTimeLineResponse::clear_has_controlflag() {
  _has_bits_[0] &= ~0x00000080u;
}
void SnsTimeLineResponse::clear_controlflag() {
  controlflag_ = 0u;
  clear_has_controlflag();
}
::google::protobuf::uint32 SnsTimeLineResponse::controlflag() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsTimeLineResponse.ControlFlag)
  return controlflag_;
}
void SnsTimeLineResponse::set_controlflag(::google::protobuf::uint32 value) {
  set_has_controlflag();
  controlflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsTimeLineResponse.ControlFlag)
}

// optional .micromsg.SnsServerConfig ServerConfig = 8;
bool SnsTimeLineResponse::has_serverconfig() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SnsTimeLineResponse::set_has_serverconfig() {
  _has_bits_[0] |= 0x00000004u;
}
void SnsTimeLineResponse::clear_has_serverconfig() {
  _has_bits_[0] &= ~0x00000004u;
}
void SnsTimeLineResponse::clear_serverconfig() {
  if (serverconfig_ != NULL) serverconfig_->::micromsg::SnsServerConfig::Clear();
  clear_has_serverconfig();
}
const ::micromsg::SnsServerConfig& SnsTimeLineResponse::serverconfig() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsTimeLineResponse.ServerConfig)
  return serverconfig_ != NULL ? *serverconfig_
                         : *::micromsg::SnsServerConfig::internal_default_instance();
}
::micromsg::SnsServerConfig* SnsTimeLineResponse::mutable_serverconfig() {
  set_has_serverconfig();
  if (serverconfig_ == NULL) {
    serverconfig_ = new ::micromsg::SnsServerConfig;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsTimeLineResponse.ServerConfig)
  return serverconfig_;
}
::micromsg::SnsServerConfig* SnsTimeLineResponse::release_serverconfig() {
  // @@protoc_insertion_point(field_release:micromsg.SnsTimeLineResponse.ServerConfig)
  clear_has_serverconfig();
  ::micromsg::SnsServerConfig* temp = serverconfig_;
  serverconfig_ = NULL;
  return temp;
}
void SnsTimeLineResponse::set_allocated_serverconfig(::micromsg::SnsServerConfig* serverconfig) {
  delete serverconfig_;
  serverconfig_ = serverconfig;
  if (serverconfig) {
    set_has_serverconfig();
  } else {
    clear_has_serverconfig();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsTimeLineResponse.ServerConfig)
}

// optional uint32 AdvertiseCount = 9;
bool SnsTimeLineResponse::has_advertisecount() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SnsTimeLineResponse::set_has_advertisecount() {
  _has_bits_[0] |= 0x00000100u;
}
void SnsTimeLineResponse::clear_has_advertisecount() {
  _has_bits_[0] &= ~0x00000100u;
}
void SnsTimeLineResponse::clear_advertisecount() {
  advertisecount_ = 0u;
  clear_has_advertisecount();
}
::google::protobuf::uint32 SnsTimeLineResponse::advertisecount() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsTimeLineResponse.AdvertiseCount)
  return advertisecount_;
}
void SnsTimeLineResponse::set_advertisecount(::google::protobuf::uint32 value) {
  set_has_advertisecount();
  advertisecount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsTimeLineResponse.AdvertiseCount)
}

// repeated .micromsg.AdvertiseObject AdvertiseList = 10;
int SnsTimeLineResponse::advertiselist_size() const {
  return advertiselist_.size();
}
void SnsTimeLineResponse::clear_advertiselist() {
  advertiselist_.Clear();
}
const ::micromsg::AdvertiseObject& SnsTimeLineResponse::advertiselist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.SnsTimeLineResponse.AdvertiseList)
  return advertiselist_.Get(index);
}
::micromsg::AdvertiseObject* SnsTimeLineResponse::mutable_advertiselist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.SnsTimeLineResponse.AdvertiseList)
  return advertiselist_.Mutable(index);
}
::micromsg::AdvertiseObject* SnsTimeLineResponse::add_advertiselist() {
  // @@protoc_insertion_point(field_add:micromsg.SnsTimeLineResponse.AdvertiseList)
  return advertiselist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::AdvertiseObject >*
SnsTimeLineResponse::mutable_advertiselist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.SnsTimeLineResponse.AdvertiseList)
  return &advertiselist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::AdvertiseObject >&
SnsTimeLineResponse::advertiselist() const {
  // @@protoc_insertion_point(field_list:micromsg.SnsTimeLineResponse.AdvertiseList)
  return advertiselist_;
}

// optional .micromsg.SKBuiltinBuffer_t Session = 11;
bool SnsTimeLineResponse::has_session() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SnsTimeLineResponse::set_has_session() {
  _has_bits_[0] |= 0x00000008u;
}
void SnsTimeLineResponse::clear_has_session() {
  _has_bits_[0] &= ~0x00000008u;
}
void SnsTimeLineResponse::clear_session() {
  if (session_ != NULL) session_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_session();
}
const ::micromsg::SKBuiltinBuffer_t& SnsTimeLineResponse::session() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsTimeLineResponse.Session)
  return session_ != NULL ? *session_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* SnsTimeLineResponse::mutable_session() {
  set_has_session();
  if (session_ == NULL) {
    session_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsTimeLineResponse.Session)
  return session_;
}
::micromsg::SKBuiltinBuffer_t* SnsTimeLineResponse::release_session() {
  // @@protoc_insertion_point(field_release:micromsg.SnsTimeLineResponse.Session)
  clear_has_session();
  ::micromsg::SKBuiltinBuffer_t* temp = session_;
  session_ = NULL;
  return temp;
}
void SnsTimeLineResponse::set_allocated_session(::micromsg::SKBuiltinBuffer_t* session) {
  delete session_;
  session_ = session;
  if (session) {
    set_has_session();
  } else {
    clear_has_session();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsTimeLineResponse.Session)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnsTimeLineWithTypeRequest::kBaseRequestFieldNumber;
const int SnsTimeLineWithTypeRequest::kSelectTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnsTimeLineWithTypeRequest::SnsTimeLineWithTypeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsns_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SnsTimeLineWithTypeRequest)
}
SnsTimeLineWithTypeRequest::SnsTimeLineWithTypeRequest(const SnsTimeLineWithTypeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  selecttype_ = from.selecttype_;
  // @@protoc_insertion_point(copy_constructor:micromsg.SnsTimeLineWithTypeRequest)
}

void SnsTimeLineWithTypeRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&selecttype_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(selecttype_));
}

SnsTimeLineWithTypeRequest::~SnsTimeLineWithTypeRequest() {
  // @@protoc_insertion_point(destructor:micromsg.SnsTimeLineWithTypeRequest)
  SharedDtor();
}

void SnsTimeLineWithTypeRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void SnsTimeLineWithTypeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnsTimeLineWithTypeRequest::descriptor() {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnsTimeLineWithTypeRequest& SnsTimeLineWithTypeRequest::default_instance() {
  protobuf_mmsns_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnsTimeLineWithTypeRequest* SnsTimeLineWithTypeRequest::New(::google::protobuf::Arena* arena) const {
  SnsTimeLineWithTypeRequest* n = new SnsTimeLineWithTypeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnsTimeLineWithTypeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SnsTimeLineWithTypeRequest)
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  selecttype_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnsTimeLineWithTypeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SnsTimeLineWithTypeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 SelectType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_selecttype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &selecttype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SnsTimeLineWithTypeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SnsTimeLineWithTypeRequest)
  return false;
#undef DO_
}

void SnsTimeLineWithTypeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SnsTimeLineWithTypeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional uint64 SelectType = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->selecttype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SnsTimeLineWithTypeRequest)
}

::google::protobuf::uint8* SnsTimeLineWithTypeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SnsTimeLineWithTypeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional uint64 SelectType = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->selecttype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SnsTimeLineWithTypeRequest)
  return target;
}

size_t SnsTimeLineWithTypeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SnsTimeLineWithTypeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  // optional uint64 SelectType = 2;
  if (has_selecttype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->selecttype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnsTimeLineWithTypeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SnsTimeLineWithTypeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SnsTimeLineWithTypeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnsTimeLineWithTypeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SnsTimeLineWithTypeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SnsTimeLineWithTypeRequest)
    MergeFrom(*source);
  }
}

void SnsTimeLineWithTypeRequest::MergeFrom(const SnsTimeLineWithTypeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SnsTimeLineWithTypeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      selecttype_ = from.selecttype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SnsTimeLineWithTypeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SnsTimeLineWithTypeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnsTimeLineWithTypeRequest::CopyFrom(const SnsTimeLineWithTypeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SnsTimeLineWithTypeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsTimeLineWithTypeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void SnsTimeLineWithTypeRequest::Swap(SnsTimeLineWithTypeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnsTimeLineWithTypeRequest::InternalSwap(SnsTimeLineWithTypeRequest* other) {
  std::swap(baserequest_, other->baserequest_);
  std::swap(selecttype_, other->selecttype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnsTimeLineWithTypeRequest::GetMetadata() const {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnsTimeLineWithTypeRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool SnsTimeLineWithTypeRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnsTimeLineWithTypeRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void SnsTimeLineWithTypeRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnsTimeLineWithTypeRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& SnsTimeLineWithTypeRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsTimeLineWithTypeRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* SnsTimeLineWithTypeRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsTimeLineWithTypeRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* SnsTimeLineWithTypeRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.SnsTimeLineWithTypeRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void SnsTimeLineWithTypeRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsTimeLineWithTypeRequest.BaseRequest)
}

// optional uint64 SelectType = 2;
bool SnsTimeLineWithTypeRequest::has_selecttype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SnsTimeLineWithTypeRequest::set_has_selecttype() {
  _has_bits_[0] |= 0x00000002u;
}
void SnsTimeLineWithTypeRequest::clear_has_selecttype() {
  _has_bits_[0] &= ~0x00000002u;
}
void SnsTimeLineWithTypeRequest::clear_selecttype() {
  selecttype_ = GOOGLE_ULONGLONG(0);
  clear_has_selecttype();
}
::google::protobuf::uint64 SnsTimeLineWithTypeRequest::selecttype() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsTimeLineWithTypeRequest.SelectType)
  return selecttype_;
}
void SnsTimeLineWithTypeRequest::set_selecttype(::google::protobuf::uint64 value) {
  set_has_selecttype();
  selecttype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsTimeLineWithTypeRequest.SelectType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnsTimeLineWithTypeResponse::kBaseResponseFieldNumber;
const int SnsTimeLineWithTypeResponse::kObjectCountFieldNumber;
const int SnsTimeLineWithTypeResponse::kObjectListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnsTimeLineWithTypeResponse::SnsTimeLineWithTypeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsns_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SnsTimeLineWithTypeResponse)
}
SnsTimeLineWithTypeResponse::SnsTimeLineWithTypeResponse(const SnsTimeLineWithTypeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      objectlist_(from.objectlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  objectcount_ = from.objectcount_;
  // @@protoc_insertion_point(copy_constructor:micromsg.SnsTimeLineWithTypeResponse)
}

void SnsTimeLineWithTypeResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&objectcount_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(objectcount_));
}

SnsTimeLineWithTypeResponse::~SnsTimeLineWithTypeResponse() {
  // @@protoc_insertion_point(destructor:micromsg.SnsTimeLineWithTypeResponse)
  SharedDtor();
}

void SnsTimeLineWithTypeResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void SnsTimeLineWithTypeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnsTimeLineWithTypeResponse::descriptor() {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnsTimeLineWithTypeResponse& SnsTimeLineWithTypeResponse::default_instance() {
  protobuf_mmsns_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnsTimeLineWithTypeResponse* SnsTimeLineWithTypeResponse::New(::google::protobuf::Arena* arena) const {
  SnsTimeLineWithTypeResponse* n = new SnsTimeLineWithTypeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnsTimeLineWithTypeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SnsTimeLineWithTypeResponse)
  objectlist_.Clear();
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  objectcount_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnsTimeLineWithTypeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SnsTimeLineWithTypeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ObjectCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_objectcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &objectcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.SnsObject ObjectList = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objectlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SnsTimeLineWithTypeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SnsTimeLineWithTypeResponse)
  return false;
#undef DO_
}

void SnsTimeLineWithTypeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SnsTimeLineWithTypeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 ObjectCount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->objectcount(), output);
  }

  // repeated .micromsg.SnsObject ObjectList = 3;
  for (unsigned int i = 0, n = this->objectlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->objectlist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SnsTimeLineWithTypeResponse)
}

::google::protobuf::uint8* SnsTimeLineWithTypeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SnsTimeLineWithTypeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 ObjectCount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->objectcount(), target);
  }

  // repeated .micromsg.SnsObject ObjectList = 3;
  for (unsigned int i = 0, n = this->objectlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->objectlist(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SnsTimeLineWithTypeResponse)
  return target;
}

size_t SnsTimeLineWithTypeResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SnsTimeLineWithTypeResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_objectcount()) {
    // required uint32 ObjectCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->objectcount());
  }

  return total_size;
}
size_t SnsTimeLineWithTypeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SnsTimeLineWithTypeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 ObjectCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->objectcount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.SnsObject ObjectList = 3;
  {
    unsigned int count = this->objectlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->objectlist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnsTimeLineWithTypeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SnsTimeLineWithTypeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SnsTimeLineWithTypeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnsTimeLineWithTypeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SnsTimeLineWithTypeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SnsTimeLineWithTypeResponse)
    MergeFrom(*source);
  }
}

void SnsTimeLineWithTypeResponse::MergeFrom(const SnsTimeLineWithTypeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SnsTimeLineWithTypeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objectlist_.MergeFrom(from.objectlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      objectcount_ = from.objectcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SnsTimeLineWithTypeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SnsTimeLineWithTypeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnsTimeLineWithTypeResponse::CopyFrom(const SnsTimeLineWithTypeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SnsTimeLineWithTypeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsTimeLineWithTypeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->objectlist())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void SnsTimeLineWithTypeResponse::Swap(SnsTimeLineWithTypeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnsTimeLineWithTypeResponse::InternalSwap(SnsTimeLineWithTypeResponse* other) {
  objectlist_.InternalSwap(&other->objectlist_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(objectcount_, other->objectcount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnsTimeLineWithTypeResponse::GetMetadata() const {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnsTimeLineWithTypeResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool SnsTimeLineWithTypeResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnsTimeLineWithTypeResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void SnsTimeLineWithTypeResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnsTimeLineWithTypeResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& SnsTimeLineWithTypeResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsTimeLineWithTypeResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* SnsTimeLineWithTypeResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsTimeLineWithTypeResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* SnsTimeLineWithTypeResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.SnsTimeLineWithTypeResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void SnsTimeLineWithTypeResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsTimeLineWithTypeResponse.BaseResponse)
}

// required uint32 ObjectCount = 2;
bool SnsTimeLineWithTypeResponse::has_objectcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SnsTimeLineWithTypeResponse::set_has_objectcount() {
  _has_bits_[0] |= 0x00000002u;
}
void SnsTimeLineWithTypeResponse::clear_has_objectcount() {
  _has_bits_[0] &= ~0x00000002u;
}
void SnsTimeLineWithTypeResponse::clear_objectcount() {
  objectcount_ = 0u;
  clear_has_objectcount();
}
::google::protobuf::uint32 SnsTimeLineWithTypeResponse::objectcount() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsTimeLineWithTypeResponse.ObjectCount)
  return objectcount_;
}
void SnsTimeLineWithTypeResponse::set_objectcount(::google::protobuf::uint32 value) {
  set_has_objectcount();
  objectcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsTimeLineWithTypeResponse.ObjectCount)
}

// repeated .micromsg.SnsObject ObjectList = 3;
int SnsTimeLineWithTypeResponse::objectlist_size() const {
  return objectlist_.size();
}
void SnsTimeLineWithTypeResponse::clear_objectlist() {
  objectlist_.Clear();
}
const ::micromsg::SnsObject& SnsTimeLineWithTypeResponse::objectlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.SnsTimeLineWithTypeResponse.ObjectList)
  return objectlist_.Get(index);
}
::micromsg::SnsObject* SnsTimeLineWithTypeResponse::mutable_objectlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.SnsTimeLineWithTypeResponse.ObjectList)
  return objectlist_.Mutable(index);
}
::micromsg::SnsObject* SnsTimeLineWithTypeResponse::add_objectlist() {
  // @@protoc_insertion_point(field_add:micromsg.SnsTimeLineWithTypeResponse.ObjectList)
  return objectlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::SnsObject >*
SnsTimeLineWithTypeResponse::mutable_objectlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.SnsTimeLineWithTypeResponse.ObjectList)
  return &objectlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::SnsObject >&
SnsTimeLineWithTypeResponse::objectlist() const {
  // @@protoc_insertion_point(field_list:micromsg.SnsTimeLineWithTypeResponse.ObjectList)
  return objectlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnsUserPageRequest::kBaseRequestFieldNumber;
const int SnsUserPageRequest::kFirstPageMd5FieldNumber;
const int SnsUserPageRequest::kUsernameFieldNumber;
const int SnsUserPageRequest::kMaxIdFieldNumber;
const int SnsUserPageRequest::kSourceFieldNumber;
const int SnsUserPageRequest::kMinFilterIdFieldNumber;
const int SnsUserPageRequest::kLastRequestTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnsUserPageRequest::SnsUserPageRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsns_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SnsUserPageRequest)
}
SnsUserPageRequest::SnsUserPageRequest(const SnsUserPageRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  firstpagemd5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_firstpagemd5()) {
    firstpagemd5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firstpagemd5_);
  }
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&maxid_, &from.maxid_,
    reinterpret_cast<char*>(&lastrequesttime_) -
    reinterpret_cast<char*>(&maxid_) + sizeof(lastrequesttime_));
  // @@protoc_insertion_point(copy_constructor:micromsg.SnsUserPageRequest)
}

void SnsUserPageRequest::SharedCtor() {
  _cached_size_ = 0;
  firstpagemd5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&lastrequesttime_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(lastrequesttime_));
}

SnsUserPageRequest::~SnsUserPageRequest() {
  // @@protoc_insertion_point(destructor:micromsg.SnsUserPageRequest)
  SharedDtor();
}

void SnsUserPageRequest::SharedDtor() {
  firstpagemd5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void SnsUserPageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnsUserPageRequest::descriptor() {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnsUserPageRequest& SnsUserPageRequest::default_instance() {
  protobuf_mmsns_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnsUserPageRequest* SnsUserPageRequest::New(::google::protobuf::Arena* arena) const {
  SnsUserPageRequest* n = new SnsUserPageRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnsUserPageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SnsUserPageRequest)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_firstpagemd5()) {
      GOOGLE_DCHECK(!firstpagemd5_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*firstpagemd5_.UnsafeRawStringPointer())->clear();
    }
    if (has_username()) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 120u) {
    ::memset(&maxid_, 0, reinterpret_cast<char*>(&lastrequesttime_) -
      reinterpret_cast<char*>(&maxid_) + sizeof(lastrequesttime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnsUserPageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SnsUserPageRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FirstPageMd5 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firstpagemd5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->firstpagemd5().data(), this->firstpagemd5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SnsUserPageRequest.FirstPageMd5");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Username = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SnsUserPageRequest.Username");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 MaxId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_maxid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Source = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 MinFilterId = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_minfilterid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &minfilterid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 LastRequestTime = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_lastrequesttime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastrequesttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SnsUserPageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SnsUserPageRequest)
  return false;
#undef DO_
}

void SnsUserPageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SnsUserPageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string FirstPageMd5 = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firstpagemd5().data(), this->firstpagemd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsUserPageRequest.FirstPageMd5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->firstpagemd5(), output);
  }

  // optional string Username = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsUserPageRequest.Username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->username(), output);
  }

  // required uint64 MaxId = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->maxid(), output);
  }

  // optional uint32 Source = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->source(), output);
  }

  // optional uint64 MinFilterId = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->minfilterid(), output);
  }

  // optional uint32 LastRequestTime = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->lastrequesttime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SnsUserPageRequest)
}

::google::protobuf::uint8* SnsUserPageRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SnsUserPageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string FirstPageMd5 = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firstpagemd5().data(), this->firstpagemd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsUserPageRequest.FirstPageMd5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->firstpagemd5(), target);
  }

  // optional string Username = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsUserPageRequest.Username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }

  // required uint64 MaxId = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->maxid(), target);
  }

  // optional uint32 Source = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->source(), target);
  }

  // optional uint64 MinFilterId = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->minfilterid(), target);
  }

  // optional uint32 LastRequestTime = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->lastrequesttime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SnsUserPageRequest)
  return target;
}

size_t SnsUserPageRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SnsUserPageRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_maxid()) {
    // required uint64 MaxId = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->maxid());
  }

  return total_size;
}
size_t SnsUserPageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SnsUserPageRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint64 MaxId = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->maxid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string FirstPageMd5 = 2;
    if (has_firstpagemd5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->firstpagemd5());
    }

    // optional string Username = 3;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

  }
  if (_has_bits_[0 / 32] & 112u) {
    // optional uint64 MinFilterId = 6;
    if (has_minfilterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->minfilterid());
    }

    // optional uint32 Source = 5;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source());
    }

    // optional uint32 LastRequestTime = 7;
    if (has_lastrequesttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastrequesttime());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnsUserPageRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SnsUserPageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SnsUserPageRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnsUserPageRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SnsUserPageRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SnsUserPageRequest)
    MergeFrom(*source);
  }
}

void SnsUserPageRequest::MergeFrom(const SnsUserPageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SnsUserPageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_firstpagemd5();
      firstpagemd5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firstpagemd5_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000008u) {
      maxid_ = from.maxid_;
    }
    if (cached_has_bits & 0x00000010u) {
      minfilterid_ = from.minfilterid_;
    }
    if (cached_has_bits & 0x00000020u) {
      source_ = from.source_;
    }
    if (cached_has_bits & 0x00000040u) {
      lastrequesttime_ = from.lastrequesttime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SnsUserPageRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SnsUserPageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnsUserPageRequest::CopyFrom(const SnsUserPageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SnsUserPageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsUserPageRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void SnsUserPageRequest::Swap(SnsUserPageRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnsUserPageRequest::InternalSwap(SnsUserPageRequest* other) {
  firstpagemd5_.Swap(&other->firstpagemd5_);
  username_.Swap(&other->username_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(maxid_, other->maxid_);
  std::swap(minfilterid_, other->minfilterid_);
  std::swap(source_, other->source_);
  std::swap(lastrequesttime_, other->lastrequesttime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnsUserPageRequest::GetMetadata() const {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnsUserPageRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool SnsUserPageRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SnsUserPageRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
void SnsUserPageRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
void SnsUserPageRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& SnsUserPageRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsUserPageRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* SnsUserPageRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsUserPageRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* SnsUserPageRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.SnsUserPageRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void SnsUserPageRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsUserPageRequest.BaseRequest)
}

// optional string FirstPageMd5 = 2;
bool SnsUserPageRequest::has_firstpagemd5() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnsUserPageRequest::set_has_firstpagemd5() {
  _has_bits_[0] |= 0x00000001u;
}
void SnsUserPageRequest::clear_has_firstpagemd5() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnsUserPageRequest::clear_firstpagemd5() {
  firstpagemd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_firstpagemd5();
}
const ::std::string& SnsUserPageRequest::firstpagemd5() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsUserPageRequest.FirstPageMd5)
  return firstpagemd5_.GetNoArena();
}
void SnsUserPageRequest::set_firstpagemd5(const ::std::string& value) {
  set_has_firstpagemd5();
  firstpagemd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SnsUserPageRequest.FirstPageMd5)
}
#if LANG_CXX11
void SnsUserPageRequest::set_firstpagemd5(::std::string&& value) {
  set_has_firstpagemd5();
  firstpagemd5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SnsUserPageRequest.FirstPageMd5)
}
#endif
void SnsUserPageRequest::set_firstpagemd5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_firstpagemd5();
  firstpagemd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SnsUserPageRequest.FirstPageMd5)
}
void SnsUserPageRequest::set_firstpagemd5(const char* value, size_t size) {
  set_has_firstpagemd5();
  firstpagemd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SnsUserPageRequest.FirstPageMd5)
}
::std::string* SnsUserPageRequest::mutable_firstpagemd5() {
  set_has_firstpagemd5();
  // @@protoc_insertion_point(field_mutable:micromsg.SnsUserPageRequest.FirstPageMd5)
  return firstpagemd5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnsUserPageRequest::release_firstpagemd5() {
  // @@protoc_insertion_point(field_release:micromsg.SnsUserPageRequest.FirstPageMd5)
  clear_has_firstpagemd5();
  return firstpagemd5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnsUserPageRequest::set_allocated_firstpagemd5(::std::string* firstpagemd5) {
  if (firstpagemd5 != NULL) {
    set_has_firstpagemd5();
  } else {
    clear_has_firstpagemd5();
  }
  firstpagemd5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), firstpagemd5);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsUserPageRequest.FirstPageMd5)
}

// optional string Username = 3;
bool SnsUserPageRequest::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SnsUserPageRequest::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
void SnsUserPageRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
void SnsUserPageRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& SnsUserPageRequest::username() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsUserPageRequest.Username)
  return username_.GetNoArena();
}
void SnsUserPageRequest::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SnsUserPageRequest.Username)
}
#if LANG_CXX11
void SnsUserPageRequest::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SnsUserPageRequest.Username)
}
#endif
void SnsUserPageRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SnsUserPageRequest.Username)
}
void SnsUserPageRequest::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SnsUserPageRequest.Username)
}
::std::string* SnsUserPageRequest::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.SnsUserPageRequest.Username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnsUserPageRequest::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.SnsUserPageRequest.Username)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnsUserPageRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsUserPageRequest.Username)
}

// required uint64 MaxId = 4;
bool SnsUserPageRequest::has_maxid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SnsUserPageRequest::set_has_maxid() {
  _has_bits_[0] |= 0x00000008u;
}
void SnsUserPageRequest::clear_has_maxid() {
  _has_bits_[0] &= ~0x00000008u;
}
void SnsUserPageRequest::clear_maxid() {
  maxid_ = GOOGLE_ULONGLONG(0);
  clear_has_maxid();
}
::google::protobuf::uint64 SnsUserPageRequest::maxid() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsUserPageRequest.MaxId)
  return maxid_;
}
void SnsUserPageRequest::set_maxid(::google::protobuf::uint64 value) {
  set_has_maxid();
  maxid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsUserPageRequest.MaxId)
}

// optional uint32 Source = 5;
bool SnsUserPageRequest::has_source() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SnsUserPageRequest::set_has_source() {
  _has_bits_[0] |= 0x00000020u;
}
void SnsUserPageRequest::clear_has_source() {
  _has_bits_[0] &= ~0x00000020u;
}
void SnsUserPageRequest::clear_source() {
  source_ = 0u;
  clear_has_source();
}
::google::protobuf::uint32 SnsUserPageRequest::source() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsUserPageRequest.Source)
  return source_;
}
void SnsUserPageRequest::set_source(::google::protobuf::uint32 value) {
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsUserPageRequest.Source)
}

// optional uint64 MinFilterId = 6;
bool SnsUserPageRequest::has_minfilterid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SnsUserPageRequest::set_has_minfilterid() {
  _has_bits_[0] |= 0x00000010u;
}
void SnsUserPageRequest::clear_has_minfilterid() {
  _has_bits_[0] &= ~0x00000010u;
}
void SnsUserPageRequest::clear_minfilterid() {
  minfilterid_ = GOOGLE_ULONGLONG(0);
  clear_has_minfilterid();
}
::google::protobuf::uint64 SnsUserPageRequest::minfilterid() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsUserPageRequest.MinFilterId)
  return minfilterid_;
}
void SnsUserPageRequest::set_minfilterid(::google::protobuf::uint64 value) {
  set_has_minfilterid();
  minfilterid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsUserPageRequest.MinFilterId)
}

// optional uint32 LastRequestTime = 7;
bool SnsUserPageRequest::has_lastrequesttime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SnsUserPageRequest::set_has_lastrequesttime() {
  _has_bits_[0] |= 0x00000040u;
}
void SnsUserPageRequest::clear_has_lastrequesttime() {
  _has_bits_[0] &= ~0x00000040u;
}
void SnsUserPageRequest::clear_lastrequesttime() {
  lastrequesttime_ = 0u;
  clear_has_lastrequesttime();
}
::google::protobuf::uint32 SnsUserPageRequest::lastrequesttime() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsUserPageRequest.LastRequestTime)
  return lastrequesttime_;
}
void SnsUserPageRequest::set_lastrequesttime(::google::protobuf::uint32 value) {
  set_has_lastrequesttime();
  lastrequesttime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsUserPageRequest.LastRequestTime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnsUserPageResponse::kBaseResponseFieldNumber;
const int SnsUserPageResponse::kFirstPageMd5FieldNumber;
const int SnsUserPageResponse::kObjectCountFieldNumber;
const int SnsUserPageResponse::kObjectListFieldNumber;
const int SnsUserPageResponse::kObjectTotalCountFieldNumber;
const int SnsUserPageResponse::kSnsUserInfoFieldNumber;
const int SnsUserPageResponse::kNewRequestTimeFieldNumber;
const int SnsUserPageResponse::kObjectCountForSameMd5FieldNumber;
const int SnsUserPageResponse::kServerConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnsUserPageResponse::SnsUserPageResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsns_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SnsUserPageResponse)
}
SnsUserPageResponse::SnsUserPageResponse(const SnsUserPageResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      objectlist_(from.objectlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  firstpagemd5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_firstpagemd5()) {
    firstpagemd5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firstpagemd5_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_snsuserinfo()) {
    snsuserinfo_ = new ::micromsg::SnsUserInfo(*from.snsuserinfo_);
  } else {
    snsuserinfo_ = NULL;
  }
  if (from.has_serverconfig()) {
    serverconfig_ = new ::micromsg::SnsServerConfig(*from.serverconfig_);
  } else {
    serverconfig_ = NULL;
  }
  ::memcpy(&objectcount_, &from.objectcount_,
    reinterpret_cast<char*>(&objectcountforsamemd5_) -
    reinterpret_cast<char*>(&objectcount_) + sizeof(objectcountforsamemd5_));
  // @@protoc_insertion_point(copy_constructor:micromsg.SnsUserPageResponse)
}

void SnsUserPageResponse::SharedCtor() {
  _cached_size_ = 0;
  firstpagemd5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&objectcountforsamemd5_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(objectcountforsamemd5_));
}

SnsUserPageResponse::~SnsUserPageResponse() {
  // @@protoc_insertion_point(destructor:micromsg.SnsUserPageResponse)
  SharedDtor();
}

void SnsUserPageResponse::SharedDtor() {
  firstpagemd5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete snsuserinfo_;
  }
  if (this != internal_default_instance()) {
    delete serverconfig_;
  }
}

void SnsUserPageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnsUserPageResponse::descriptor() {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnsUserPageResponse& SnsUserPageResponse::default_instance() {
  protobuf_mmsns_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnsUserPageResponse* SnsUserPageResponse::New(::google::protobuf::Arena* arena) const {
  SnsUserPageResponse* n = new SnsUserPageResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnsUserPageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SnsUserPageResponse)
  objectlist_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    if (has_firstpagemd5()) {
      GOOGLE_DCHECK(!firstpagemd5_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*firstpagemd5_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_snsuserinfo()) {
      GOOGLE_DCHECK(snsuserinfo_ != NULL);
      snsuserinfo_->::micromsg::SnsUserInfo::Clear();
    }
    if (has_serverconfig()) {
      GOOGLE_DCHECK(serverconfig_ != NULL);
      serverconfig_->::micromsg::SnsServerConfig::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&objectcount_, 0, reinterpret_cast<char*>(&objectcountforsamemd5_) -
      reinterpret_cast<char*>(&objectcount_) + sizeof(objectcountforsamemd5_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnsUserPageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SnsUserPageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FirstPageMd5 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firstpagemd5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->firstpagemd5().data(), this->firstpagemd5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SnsUserPageResponse.FirstPageMd5");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ObjectCount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_objectcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &objectcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.SnsObject ObjectList = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objectlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ObjectTotalCount = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_objecttotalcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &objecttotalcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SnsUserInfo SnsUserInfo = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_snsuserinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 NewRequestTime = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_newrequesttime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newrequesttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ObjectCountForSameMd5 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_objectcountforsamemd5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &objectcountforsamemd5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SnsServerConfig ServerConfig = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_serverconfig()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SnsUserPageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SnsUserPageResponse)
  return false;
#undef DO_
}

void SnsUserPageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SnsUserPageResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional string FirstPageMd5 = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firstpagemd5().data(), this->firstpagemd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsUserPageResponse.FirstPageMd5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->firstpagemd5(), output);
  }

  // required uint32 ObjectCount = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->objectcount(), output);
  }

  // repeated .micromsg.SnsObject ObjectList = 4;
  for (unsigned int i = 0, n = this->objectlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->objectlist(i), output);
  }

  // required uint32 ObjectTotalCount = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->objecttotalcount(), output);
  }

  // optional .micromsg.SnsUserInfo SnsUserInfo = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->snsuserinfo_, output);
  }

  // optional uint32 NewRequestTime = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->newrequesttime(), output);
  }

  // optional uint32 ObjectCountForSameMd5 = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->objectcountforsamemd5(), output);
  }

  // optional .micromsg.SnsServerConfig ServerConfig = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->serverconfig_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SnsUserPageResponse)
}

::google::protobuf::uint8* SnsUserPageResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SnsUserPageResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional string FirstPageMd5 = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firstpagemd5().data(), this->firstpagemd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsUserPageResponse.FirstPageMd5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->firstpagemd5(), target);
  }

  // required uint32 ObjectCount = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->objectcount(), target);
  }

  // repeated .micromsg.SnsObject ObjectList = 4;
  for (unsigned int i = 0, n = this->objectlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->objectlist(i), deterministic, target);
  }

  // required uint32 ObjectTotalCount = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->objecttotalcount(), target);
  }

  // optional .micromsg.SnsUserInfo SnsUserInfo = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->snsuserinfo_, deterministic, target);
  }

  // optional uint32 NewRequestTime = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->newrequesttime(), target);
  }

  // optional uint32 ObjectCountForSameMd5 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->objectcountforsamemd5(), target);
  }

  // optional .micromsg.SnsServerConfig ServerConfig = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->serverconfig_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SnsUserPageResponse)
  return target;
}

size_t SnsUserPageResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SnsUserPageResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_objectcount()) {
    // required uint32 ObjectCount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->objectcount());
  }

  if (has_objecttotalcount()) {
    // required uint32 ObjectTotalCount = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->objecttotalcount());
  }

  return total_size;
}
size_t SnsUserPageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SnsUserPageResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000032) ^ 0x00000032) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 ObjectCount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->objectcount());

    // required uint32 ObjectTotalCount = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->objecttotalcount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.SnsObject ObjectList = 4;
  {
    unsigned int count = this->objectlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->objectlist(i));
    }
  }

  // optional string FirstPageMd5 = 2;
  if (has_firstpagemd5()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->firstpagemd5());
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional .micromsg.SnsUserInfo SnsUserInfo = 6;
    if (has_snsuserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->snsuserinfo_);
    }

    // optional .micromsg.SnsServerConfig ServerConfig = 9;
    if (has_serverconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->serverconfig_);
    }

  }
  if (_has_bits_[0 / 32] & 192u) {
    // optional uint32 NewRequestTime = 7;
    if (has_newrequesttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newrequesttime());
    }

    // optional uint32 ObjectCountForSameMd5 = 8;
    if (has_objectcountforsamemd5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->objectcountforsamemd5());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnsUserPageResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SnsUserPageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SnsUserPageResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnsUserPageResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SnsUserPageResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SnsUserPageResponse)
    MergeFrom(*source);
  }
}

void SnsUserPageResponse::MergeFrom(const SnsUserPageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SnsUserPageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objectlist_.MergeFrom(from.objectlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_firstpagemd5();
      firstpagemd5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firstpagemd5_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_snsuserinfo()->::micromsg::SnsUserInfo::MergeFrom(from.snsuserinfo());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_serverconfig()->::micromsg::SnsServerConfig::MergeFrom(from.serverconfig());
    }
    if (cached_has_bits & 0x00000010u) {
      objectcount_ = from.objectcount_;
    }
    if (cached_has_bits & 0x00000020u) {
      objecttotalcount_ = from.objecttotalcount_;
    }
    if (cached_has_bits & 0x00000040u) {
      newrequesttime_ = from.newrequesttime_;
    }
    if (cached_has_bits & 0x00000080u) {
      objectcountforsamemd5_ = from.objectcountforsamemd5_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SnsUserPageResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SnsUserPageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnsUserPageResponse::CopyFrom(const SnsUserPageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SnsUserPageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsUserPageResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000032) != 0x00000032) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->objectlist())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_snsuserinfo()) {
    if (!this->snsuserinfo_->IsInitialized()) return false;
  }
  return true;
}

void SnsUserPageResponse::Swap(SnsUserPageResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnsUserPageResponse::InternalSwap(SnsUserPageResponse* other) {
  objectlist_.InternalSwap(&other->objectlist_);
  firstpagemd5_.Swap(&other->firstpagemd5_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(snsuserinfo_, other->snsuserinfo_);
  std::swap(serverconfig_, other->serverconfig_);
  std::swap(objectcount_, other->objectcount_);
  std::swap(objecttotalcount_, other->objecttotalcount_);
  std::swap(newrequesttime_, other->newrequesttime_);
  std::swap(objectcountforsamemd5_, other->objectcountforsamemd5_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnsUserPageResponse::GetMetadata() const {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnsUserPageResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool SnsUserPageResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SnsUserPageResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
void SnsUserPageResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
void SnsUserPageResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& SnsUserPageResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsUserPageResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* SnsUserPageResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsUserPageResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* SnsUserPageResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.SnsUserPageResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void SnsUserPageResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsUserPageResponse.BaseResponse)
}

// optional string FirstPageMd5 = 2;
bool SnsUserPageResponse::has_firstpagemd5() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnsUserPageResponse::set_has_firstpagemd5() {
  _has_bits_[0] |= 0x00000001u;
}
void SnsUserPageResponse::clear_has_firstpagemd5() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnsUserPageResponse::clear_firstpagemd5() {
  firstpagemd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_firstpagemd5();
}
const ::std::string& SnsUserPageResponse::firstpagemd5() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsUserPageResponse.FirstPageMd5)
  return firstpagemd5_.GetNoArena();
}
void SnsUserPageResponse::set_firstpagemd5(const ::std::string& value) {
  set_has_firstpagemd5();
  firstpagemd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SnsUserPageResponse.FirstPageMd5)
}
#if LANG_CXX11
void SnsUserPageResponse::set_firstpagemd5(::std::string&& value) {
  set_has_firstpagemd5();
  firstpagemd5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SnsUserPageResponse.FirstPageMd5)
}
#endif
void SnsUserPageResponse::set_firstpagemd5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_firstpagemd5();
  firstpagemd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SnsUserPageResponse.FirstPageMd5)
}
void SnsUserPageResponse::set_firstpagemd5(const char* value, size_t size) {
  set_has_firstpagemd5();
  firstpagemd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SnsUserPageResponse.FirstPageMd5)
}
::std::string* SnsUserPageResponse::mutable_firstpagemd5() {
  set_has_firstpagemd5();
  // @@protoc_insertion_point(field_mutable:micromsg.SnsUserPageResponse.FirstPageMd5)
  return firstpagemd5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnsUserPageResponse::release_firstpagemd5() {
  // @@protoc_insertion_point(field_release:micromsg.SnsUserPageResponse.FirstPageMd5)
  clear_has_firstpagemd5();
  return firstpagemd5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnsUserPageResponse::set_allocated_firstpagemd5(::std::string* firstpagemd5) {
  if (firstpagemd5 != NULL) {
    set_has_firstpagemd5();
  } else {
    clear_has_firstpagemd5();
  }
  firstpagemd5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), firstpagemd5);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsUserPageResponse.FirstPageMd5)
}

// required uint32 ObjectCount = 3;
bool SnsUserPageResponse::has_objectcount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SnsUserPageResponse::set_has_objectcount() {
  _has_bits_[0] |= 0x00000010u;
}
void SnsUserPageResponse::clear_has_objectcount() {
  _has_bits_[0] &= ~0x00000010u;
}
void SnsUserPageResponse::clear_objectcount() {
  objectcount_ = 0u;
  clear_has_objectcount();
}
::google::protobuf::uint32 SnsUserPageResponse::objectcount() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsUserPageResponse.ObjectCount)
  return objectcount_;
}
void SnsUserPageResponse::set_objectcount(::google::protobuf::uint32 value) {
  set_has_objectcount();
  objectcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsUserPageResponse.ObjectCount)
}

// repeated .micromsg.SnsObject ObjectList = 4;
int SnsUserPageResponse::objectlist_size() const {
  return objectlist_.size();
}
void SnsUserPageResponse::clear_objectlist() {
  objectlist_.Clear();
}
const ::micromsg::SnsObject& SnsUserPageResponse::objectlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.SnsUserPageResponse.ObjectList)
  return objectlist_.Get(index);
}
::micromsg::SnsObject* SnsUserPageResponse::mutable_objectlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.SnsUserPageResponse.ObjectList)
  return objectlist_.Mutable(index);
}
::micromsg::SnsObject* SnsUserPageResponse::add_objectlist() {
  // @@protoc_insertion_point(field_add:micromsg.SnsUserPageResponse.ObjectList)
  return objectlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::SnsObject >*
SnsUserPageResponse::mutable_objectlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.SnsUserPageResponse.ObjectList)
  return &objectlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::SnsObject >&
SnsUserPageResponse::objectlist() const {
  // @@protoc_insertion_point(field_list:micromsg.SnsUserPageResponse.ObjectList)
  return objectlist_;
}

// required uint32 ObjectTotalCount = 5;
bool SnsUserPageResponse::has_objecttotalcount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SnsUserPageResponse::set_has_objecttotalcount() {
  _has_bits_[0] |= 0x00000020u;
}
void SnsUserPageResponse::clear_has_objecttotalcount() {
  _has_bits_[0] &= ~0x00000020u;
}
void SnsUserPageResponse::clear_objecttotalcount() {
  objecttotalcount_ = 0u;
  clear_has_objecttotalcount();
}
::google::protobuf::uint32 SnsUserPageResponse::objecttotalcount() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsUserPageResponse.ObjectTotalCount)
  return objecttotalcount_;
}
void SnsUserPageResponse::set_objecttotalcount(::google::protobuf::uint32 value) {
  set_has_objecttotalcount();
  objecttotalcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsUserPageResponse.ObjectTotalCount)
}

// optional .micromsg.SnsUserInfo SnsUserInfo = 6;
bool SnsUserPageResponse::has_snsuserinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SnsUserPageResponse::set_has_snsuserinfo() {
  _has_bits_[0] |= 0x00000004u;
}
void SnsUserPageResponse::clear_has_snsuserinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
void SnsUserPageResponse::clear_snsuserinfo() {
  if (snsuserinfo_ != NULL) snsuserinfo_->::micromsg::SnsUserInfo::Clear();
  clear_has_snsuserinfo();
}
const ::micromsg::SnsUserInfo& SnsUserPageResponse::snsuserinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsUserPageResponse.SnsUserInfo)
  return snsuserinfo_ != NULL ? *snsuserinfo_
                         : *::micromsg::SnsUserInfo::internal_default_instance();
}
::micromsg::SnsUserInfo* SnsUserPageResponse::mutable_snsuserinfo() {
  set_has_snsuserinfo();
  if (snsuserinfo_ == NULL) {
    snsuserinfo_ = new ::micromsg::SnsUserInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsUserPageResponse.SnsUserInfo)
  return snsuserinfo_;
}
::micromsg::SnsUserInfo* SnsUserPageResponse::release_snsuserinfo() {
  // @@protoc_insertion_point(field_release:micromsg.SnsUserPageResponse.SnsUserInfo)
  clear_has_snsuserinfo();
  ::micromsg::SnsUserInfo* temp = snsuserinfo_;
  snsuserinfo_ = NULL;
  return temp;
}
void SnsUserPageResponse::set_allocated_snsuserinfo(::micromsg::SnsUserInfo* snsuserinfo) {
  delete snsuserinfo_;
  snsuserinfo_ = snsuserinfo;
  if (snsuserinfo) {
    set_has_snsuserinfo();
  } else {
    clear_has_snsuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsUserPageResponse.SnsUserInfo)
}

// optional uint32 NewRequestTime = 7;
bool SnsUserPageResponse::has_newrequesttime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SnsUserPageResponse::set_has_newrequesttime() {
  _has_bits_[0] |= 0x00000040u;
}
void SnsUserPageResponse::clear_has_newrequesttime() {
  _has_bits_[0] &= ~0x00000040u;
}
void SnsUserPageResponse::clear_newrequesttime() {
  newrequesttime_ = 0u;
  clear_has_newrequesttime();
}
::google::protobuf::uint32 SnsUserPageResponse::newrequesttime() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsUserPageResponse.NewRequestTime)
  return newrequesttime_;
}
void SnsUserPageResponse::set_newrequesttime(::google::protobuf::uint32 value) {
  set_has_newrequesttime();
  newrequesttime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsUserPageResponse.NewRequestTime)
}

// optional uint32 ObjectCountForSameMd5 = 8;
bool SnsUserPageResponse::has_objectcountforsamemd5() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SnsUserPageResponse::set_has_objectcountforsamemd5() {
  _has_bits_[0] |= 0x00000080u;
}
void SnsUserPageResponse::clear_has_objectcountforsamemd5() {
  _has_bits_[0] &= ~0x00000080u;
}
void SnsUserPageResponse::clear_objectcountforsamemd5() {
  objectcountforsamemd5_ = 0u;
  clear_has_objectcountforsamemd5();
}
::google::protobuf::uint32 SnsUserPageResponse::objectcountforsamemd5() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsUserPageResponse.ObjectCountForSameMd5)
  return objectcountforsamemd5_;
}
void SnsUserPageResponse::set_objectcountforsamemd5(::google::protobuf::uint32 value) {
  set_has_objectcountforsamemd5();
  objectcountforsamemd5_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsUserPageResponse.ObjectCountForSameMd5)
}

// optional .micromsg.SnsServerConfig ServerConfig = 9;
bool SnsUserPageResponse::has_serverconfig() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SnsUserPageResponse::set_has_serverconfig() {
  _has_bits_[0] |= 0x00000008u;
}
void SnsUserPageResponse::clear_has_serverconfig() {
  _has_bits_[0] &= ~0x00000008u;
}
void SnsUserPageResponse::clear_serverconfig() {
  if (serverconfig_ != NULL) serverconfig_->::micromsg::SnsServerConfig::Clear();
  clear_has_serverconfig();
}
const ::micromsg::SnsServerConfig& SnsUserPageResponse::serverconfig() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsUserPageResponse.ServerConfig)
  return serverconfig_ != NULL ? *serverconfig_
                         : *::micromsg::SnsServerConfig::internal_default_instance();
}
::micromsg::SnsServerConfig* SnsUserPageResponse::mutable_serverconfig() {
  set_has_serverconfig();
  if (serverconfig_ == NULL) {
    serverconfig_ = new ::micromsg::SnsServerConfig;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsUserPageResponse.ServerConfig)
  return serverconfig_;
}
::micromsg::SnsServerConfig* SnsUserPageResponse::release_serverconfig() {
  // @@protoc_insertion_point(field_release:micromsg.SnsUserPageResponse.ServerConfig)
  clear_has_serverconfig();
  ::micromsg::SnsServerConfig* temp = serverconfig_;
  serverconfig_ = NULL;
  return temp;
}
void SnsUserPageResponse::set_allocated_serverconfig(::micromsg::SnsServerConfig* serverconfig) {
  delete serverconfig_;
  serverconfig_ = serverconfig;
  if (serverconfig) {
    set_has_serverconfig();
  } else {
    clear_has_serverconfig();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsUserPageResponse.ServerConfig)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnsAction::kFromUsernameFieldNumber;
const int SnsAction::kToUsernameFieldNumber;
const int SnsAction::kFromNicknameFieldNumber;
const int SnsAction::kToNicknameFieldNumber;
const int SnsAction::kTypeFieldNumber;
const int SnsAction::kSourceFieldNumber;
const int SnsAction::kCreateTimeFieldNumber;
const int SnsAction::kContentFieldNumber;
const int SnsAction::kReplyCommentIdFieldNumber;
const int SnsAction::kCommentIdFieldNumber;
const int SnsAction::kIsNotRichTextFieldNumber;
const int SnsAction::kReplyCommentId2FieldNumber;
const int SnsAction::kCommentId2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnsAction::SnsAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsns_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SnsAction)
}
SnsAction::SnsAction(const SnsAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fromusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fromusername()) {
    fromusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromusername_);
  }
  tousername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tousername()) {
    tousername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tousername_);
  }
  fromnickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fromnickname()) {
    fromnickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromnickname_);
  }
  tonickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tonickname()) {
    tonickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tonickname_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&commentid2_) -
    reinterpret_cast<char*>(&type_) + sizeof(commentid2_));
  // @@protoc_insertion_point(copy_constructor:micromsg.SnsAction)
}

void SnsAction::SharedCtor() {
  _cached_size_ = 0;
  fromusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tousername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fromnickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tonickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, reinterpret_cast<char*>(&commentid2_) -
    reinterpret_cast<char*>(&type_) + sizeof(commentid2_));
}

SnsAction::~SnsAction() {
  // @@protoc_insertion_point(destructor:micromsg.SnsAction)
  SharedDtor();
}

void SnsAction::SharedDtor() {
  fromusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tousername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fromnickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tonickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SnsAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnsAction::descriptor() {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnsAction& SnsAction::default_instance() {
  protobuf_mmsns_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnsAction* SnsAction::New(::google::protobuf::Arena* arena) const {
  SnsAction* n = new SnsAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnsAction::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SnsAction)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_fromusername()) {
      GOOGLE_DCHECK(!fromusername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fromusername_.UnsafeRawStringPointer())->clear();
    }
    if (has_tousername()) {
      GOOGLE_DCHECK(!tousername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tousername_.UnsafeRawStringPointer())->clear();
    }
    if (has_fromnickname()) {
      GOOGLE_DCHECK(!fromnickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fromnickname_.UnsafeRawStringPointer())->clear();
    }
    if (has_tonickname()) {
      GOOGLE_DCHECK(!tonickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tonickname_.UnsafeRawStringPointer())->clear();
    }
    if (has_content()) {
      GOOGLE_DCHECK(!content_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*content_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 224u) {
    ::memset(&type_, 0, reinterpret_cast<char*>(&createtime_) -
      reinterpret_cast<char*>(&type_) + sizeof(createtime_));
  }
  if (_has_bits_[8 / 32] & 7936u) {
    ::memset(&replycommentid_, 0, reinterpret_cast<char*>(&commentid2_) -
      reinterpret_cast<char*>(&replycommentid_) + sizeof(commentid2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnsAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SnsAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string FromUsername = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fromusername().data(), this->fromusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SnsAction.FromUsername");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ToUsername = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tousername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tousername().data(), this->tousername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SnsAction.ToUsername");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FromNickname = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromnickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fromnickname().data(), this->fromnickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SnsAction.FromNickname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ToNickname = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tonickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tonickname().data(), this->tonickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SnsAction.ToNickname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Source = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 CreateTime = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_createtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Content = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SnsAction.Content");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ReplyCommentId = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_replycommentid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replycommentid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 CommentId = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_commentid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &commentid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 IsNotRichText = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_isnotrichtext();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isnotrichtext_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ReplyCommentId2 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_replycommentid2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &replycommentid2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 CommentId2 = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_commentid2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commentid2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SnsAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SnsAction)
  return false;
#undef DO_
}

void SnsAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SnsAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string FromUsername = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromusername().data(), this->fromusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsAction.FromUsername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->fromusername(), output);
  }

  // optional string ToUsername = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tousername().data(), this->tousername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsAction.ToUsername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tousername(), output);
  }

  // optional string FromNickname = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromnickname().data(), this->fromnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsAction.FromNickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->fromnickname(), output);
  }

  // optional string ToNickname = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tonickname().data(), this->tonickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsAction.ToNickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->tonickname(), output);
  }

  // required uint32 Type = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->type(), output);
  }

  // required uint32 Source = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->source(), output);
  }

  // optional uint32 CreateTime = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->createtime(), output);
  }

  // optional string Content = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsAction.Content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->content(), output);
  }

  // optional int32 ReplyCommentId = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->replycommentid(), output);
  }

  // optional int32 CommentId = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->commentid(), output);
  }

  // optional uint32 IsNotRichText = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->isnotrichtext(), output);
  }

  // optional uint64 ReplyCommentId2 = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->replycommentid2(), output);
  }

  // optional uint64 CommentId2 = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->commentid2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SnsAction)
}

::google::protobuf::uint8* SnsAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SnsAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string FromUsername = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromusername().data(), this->fromusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsAction.FromUsername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fromusername(), target);
  }

  // optional string ToUsername = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tousername().data(), this->tousername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsAction.ToUsername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tousername(), target);
  }

  // optional string FromNickname = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromnickname().data(), this->fromnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsAction.FromNickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fromnickname(), target);
  }

  // optional string ToNickname = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tonickname().data(), this->tonickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsAction.ToNickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->tonickname(), target);
  }

  // required uint32 Type = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->type(), target);
  }

  // required uint32 Source = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->source(), target);
  }

  // optional uint32 CreateTime = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->createtime(), target);
  }

  // optional string Content = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsAction.Content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->content(), target);
  }

  // optional int32 ReplyCommentId = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->replycommentid(), target);
  }

  // optional int32 CommentId = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->commentid(), target);
  }

  // optional uint32 IsNotRichText = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->isnotrichtext(), target);
  }

  // optional uint64 ReplyCommentId2 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->replycommentid2(), target);
  }

  // optional uint64 CommentId2 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->commentid2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SnsAction)
  return target;
}

size_t SnsAction::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SnsAction)
  size_t total_size = 0;

  if (has_type()) {
    // required uint32 Type = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_source()) {
    // required uint32 Source = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->source());
  }

  return total_size;
}
size_t SnsAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SnsAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000060) ^ 0x00000060) == 0) {  // All required fields are present.
    // required uint32 Type = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required uint32 Source = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->source());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string FromUsername = 1;
    if (has_fromusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromusername());
    }

    // optional string ToUsername = 2;
    if (has_tousername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tousername());
    }

    // optional string FromNickname = 3;
    if (has_fromnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromnickname());
    }

    // optional string ToNickname = 4;
    if (has_tonickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tonickname());
    }

    // optional string Content = 8;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  // optional uint32 CreateTime = 7;
  if (has_createtime()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->createtime());
  }

  if (_has_bits_[8 / 32] & 7936u) {
    // optional int32 ReplyCommentId = 9;
    if (has_replycommentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->replycommentid());
    }

    // optional int32 CommentId = 10;
    if (has_commentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->commentid());
    }

    // optional uint32 IsNotRichText = 11;
    if (has_isnotrichtext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isnotrichtext());
    }

    // optional uint64 ReplyCommentId2 = 12;
    if (has_replycommentid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->replycommentid2());
    }

    // optional uint64 CommentId2 = 13;
    if (has_commentid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->commentid2());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnsAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SnsAction)
  GOOGLE_DCHECK_NE(&from, this);
  const SnsAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnsAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SnsAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SnsAction)
    MergeFrom(*source);
  }
}

void SnsAction::MergeFrom(const SnsAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SnsAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_fromusername();
      fromusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromusername_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_tousername();
      tousername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tousername_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_fromnickname();
      fromnickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromnickname_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_tonickname();
      tonickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tonickname_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000040u) {
      source_ = from.source_;
    }
    if (cached_has_bits & 0x00000080u) {
      createtime_ = from.createtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      replycommentid_ = from.replycommentid_;
    }
    if (cached_has_bits & 0x00000200u) {
      commentid_ = from.commentid_;
    }
    if (cached_has_bits & 0x00000400u) {
      isnotrichtext_ = from.isnotrichtext_;
    }
    if (cached_has_bits & 0x00000800u) {
      replycommentid2_ = from.replycommentid2_;
    }
    if (cached_has_bits & 0x00001000u) {
      commentid2_ = from.commentid2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SnsAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SnsAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnsAction::CopyFrom(const SnsAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SnsAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000060) != 0x00000060) return false;
  return true;
}

void SnsAction::Swap(SnsAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnsAction::InternalSwap(SnsAction* other) {
  fromusername_.Swap(&other->fromusername_);
  tousername_.Swap(&other->tousername_);
  fromnickname_.Swap(&other->fromnickname_);
  tonickname_.Swap(&other->tonickname_);
  content_.Swap(&other->content_);
  std::swap(type_, other->type_);
  std::swap(source_, other->source_);
  std::swap(createtime_, other->createtime_);
  std::swap(replycommentid_, other->replycommentid_);
  std::swap(commentid_, other->commentid_);
  std::swap(isnotrichtext_, other->isnotrichtext_);
  std::swap(replycommentid2_, other->replycommentid2_);
  std::swap(commentid2_, other->commentid2_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnsAction::GetMetadata() const {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnsAction

// optional string FromUsername = 1;
bool SnsAction::has_fromusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnsAction::set_has_fromusername() {
  _has_bits_[0] |= 0x00000001u;
}
void SnsAction::clear_has_fromusername() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnsAction::clear_fromusername() {
  fromusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fromusername();
}
const ::std::string& SnsAction::fromusername() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsAction.FromUsername)
  return fromusername_.GetNoArena();
}
void SnsAction::set_fromusername(const ::std::string& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SnsAction.FromUsername)
}
#if LANG_CXX11
void SnsAction::set_fromusername(::std::string&& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SnsAction.FromUsername)
}
#endif
void SnsAction::set_fromusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SnsAction.FromUsername)
}
void SnsAction::set_fromusername(const char* value, size_t size) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SnsAction.FromUsername)
}
::std::string* SnsAction::mutable_fromusername() {
  set_has_fromusername();
  // @@protoc_insertion_point(field_mutable:micromsg.SnsAction.FromUsername)
  return fromusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnsAction::release_fromusername() {
  // @@protoc_insertion_point(field_release:micromsg.SnsAction.FromUsername)
  clear_has_fromusername();
  return fromusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnsAction::set_allocated_fromusername(::std::string* fromusername) {
  if (fromusername != NULL) {
    set_has_fromusername();
  } else {
    clear_has_fromusername();
  }
  fromusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsAction.FromUsername)
}

// optional string ToUsername = 2;
bool SnsAction::has_tousername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SnsAction::set_has_tousername() {
  _has_bits_[0] |= 0x00000002u;
}
void SnsAction::clear_has_tousername() {
  _has_bits_[0] &= ~0x00000002u;
}
void SnsAction::clear_tousername() {
  tousername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tousername();
}
const ::std::string& SnsAction::tousername() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsAction.ToUsername)
  return tousername_.GetNoArena();
}
void SnsAction::set_tousername(const ::std::string& value) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SnsAction.ToUsername)
}
#if LANG_CXX11
void SnsAction::set_tousername(::std::string&& value) {
  set_has_tousername();
  tousername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SnsAction.ToUsername)
}
#endif
void SnsAction::set_tousername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SnsAction.ToUsername)
}
void SnsAction::set_tousername(const char* value, size_t size) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SnsAction.ToUsername)
}
::std::string* SnsAction::mutable_tousername() {
  set_has_tousername();
  // @@protoc_insertion_point(field_mutable:micromsg.SnsAction.ToUsername)
  return tousername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnsAction::release_tousername() {
  // @@protoc_insertion_point(field_release:micromsg.SnsAction.ToUsername)
  clear_has_tousername();
  return tousername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnsAction::set_allocated_tousername(::std::string* tousername) {
  if (tousername != NULL) {
    set_has_tousername();
  } else {
    clear_has_tousername();
  }
  tousername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tousername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsAction.ToUsername)
}

// optional string FromNickname = 3;
bool SnsAction::has_fromnickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SnsAction::set_has_fromnickname() {
  _has_bits_[0] |= 0x00000004u;
}
void SnsAction::clear_has_fromnickname() {
  _has_bits_[0] &= ~0x00000004u;
}
void SnsAction::clear_fromnickname() {
  fromnickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fromnickname();
}
const ::std::string& SnsAction::fromnickname() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsAction.FromNickname)
  return fromnickname_.GetNoArena();
}
void SnsAction::set_fromnickname(const ::std::string& value) {
  set_has_fromnickname();
  fromnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SnsAction.FromNickname)
}
#if LANG_CXX11
void SnsAction::set_fromnickname(::std::string&& value) {
  set_has_fromnickname();
  fromnickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SnsAction.FromNickname)
}
#endif
void SnsAction::set_fromnickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fromnickname();
  fromnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SnsAction.FromNickname)
}
void SnsAction::set_fromnickname(const char* value, size_t size) {
  set_has_fromnickname();
  fromnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SnsAction.FromNickname)
}
::std::string* SnsAction::mutable_fromnickname() {
  set_has_fromnickname();
  // @@protoc_insertion_point(field_mutable:micromsg.SnsAction.FromNickname)
  return fromnickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnsAction::release_fromnickname() {
  // @@protoc_insertion_point(field_release:micromsg.SnsAction.FromNickname)
  clear_has_fromnickname();
  return fromnickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnsAction::set_allocated_fromnickname(::std::string* fromnickname) {
  if (fromnickname != NULL) {
    set_has_fromnickname();
  } else {
    clear_has_fromnickname();
  }
  fromnickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromnickname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsAction.FromNickname)
}

// optional string ToNickname = 4;
bool SnsAction::has_tonickname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SnsAction::set_has_tonickname() {
  _has_bits_[0] |= 0x00000008u;
}
void SnsAction::clear_has_tonickname() {
  _has_bits_[0] &= ~0x00000008u;
}
void SnsAction::clear_tonickname() {
  tonickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tonickname();
}
const ::std::string& SnsAction::tonickname() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsAction.ToNickname)
  return tonickname_.GetNoArena();
}
void SnsAction::set_tonickname(const ::std::string& value) {
  set_has_tonickname();
  tonickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SnsAction.ToNickname)
}
#if LANG_CXX11
void SnsAction::set_tonickname(::std::string&& value) {
  set_has_tonickname();
  tonickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SnsAction.ToNickname)
}
#endif
void SnsAction::set_tonickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tonickname();
  tonickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SnsAction.ToNickname)
}
void SnsAction::set_tonickname(const char* value, size_t size) {
  set_has_tonickname();
  tonickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SnsAction.ToNickname)
}
::std::string* SnsAction::mutable_tonickname() {
  set_has_tonickname();
  // @@protoc_insertion_point(field_mutable:micromsg.SnsAction.ToNickname)
  return tonickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnsAction::release_tonickname() {
  // @@protoc_insertion_point(field_release:micromsg.SnsAction.ToNickname)
  clear_has_tonickname();
  return tonickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnsAction::set_allocated_tonickname(::std::string* tonickname) {
  if (tonickname != NULL) {
    set_has_tonickname();
  } else {
    clear_has_tonickname();
  }
  tonickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tonickname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsAction.ToNickname)
}

// required uint32 Type = 5;
bool SnsAction::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SnsAction::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
void SnsAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void SnsAction::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 SnsAction::type() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsAction.Type)
  return type_;
}
void SnsAction::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsAction.Type)
}

// required uint32 Source = 6;
bool SnsAction::has_source() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SnsAction::set_has_source() {
  _has_bits_[0] |= 0x00000040u;
}
void SnsAction::clear_has_source() {
  _has_bits_[0] &= ~0x00000040u;
}
void SnsAction::clear_source() {
  source_ = 0u;
  clear_has_source();
}
::google::protobuf::uint32 SnsAction::source() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsAction.Source)
  return source_;
}
void SnsAction::set_source(::google::protobuf::uint32 value) {
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsAction.Source)
}

// optional uint32 CreateTime = 7;
bool SnsAction::has_createtime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SnsAction::set_has_createtime() {
  _has_bits_[0] |= 0x00000080u;
}
void SnsAction::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000080u;
}
void SnsAction::clear_createtime() {
  createtime_ = 0u;
  clear_has_createtime();
}
::google::protobuf::uint32 SnsAction::createtime() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsAction.CreateTime)
  return createtime_;
}
void SnsAction::set_createtime(::google::protobuf::uint32 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsAction.CreateTime)
}

// optional string Content = 8;
bool SnsAction::has_content() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SnsAction::set_has_content() {
  _has_bits_[0] |= 0x00000010u;
}
void SnsAction::clear_has_content() {
  _has_bits_[0] &= ~0x00000010u;
}
void SnsAction::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
const ::std::string& SnsAction::content() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsAction.Content)
  return content_.GetNoArena();
}
void SnsAction::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SnsAction.Content)
}
#if LANG_CXX11
void SnsAction::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SnsAction.Content)
}
#endif
void SnsAction::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SnsAction.Content)
}
void SnsAction::set_content(const char* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SnsAction.Content)
}
::std::string* SnsAction::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:micromsg.SnsAction.Content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnsAction::release_content() {
  // @@protoc_insertion_point(field_release:micromsg.SnsAction.Content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnsAction::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsAction.Content)
}

// optional int32 ReplyCommentId = 9;
bool SnsAction::has_replycommentid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SnsAction::set_has_replycommentid() {
  _has_bits_[0] |= 0x00000100u;
}
void SnsAction::clear_has_replycommentid() {
  _has_bits_[0] &= ~0x00000100u;
}
void SnsAction::clear_replycommentid() {
  replycommentid_ = 0;
  clear_has_replycommentid();
}
::google::protobuf::int32 SnsAction::replycommentid() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsAction.ReplyCommentId)
  return replycommentid_;
}
void SnsAction::set_replycommentid(::google::protobuf::int32 value) {
  set_has_replycommentid();
  replycommentid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsAction.ReplyCommentId)
}

// optional int32 CommentId = 10;
bool SnsAction::has_commentid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SnsAction::set_has_commentid() {
  _has_bits_[0] |= 0x00000200u;
}
void SnsAction::clear_has_commentid() {
  _has_bits_[0] &= ~0x00000200u;
}
void SnsAction::clear_commentid() {
  commentid_ = 0;
  clear_has_commentid();
}
::google::protobuf::int32 SnsAction::commentid() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsAction.CommentId)
  return commentid_;
}
void SnsAction::set_commentid(::google::protobuf::int32 value) {
  set_has_commentid();
  commentid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsAction.CommentId)
}

// optional uint32 IsNotRichText = 11;
bool SnsAction::has_isnotrichtext() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SnsAction::set_has_isnotrichtext() {
  _has_bits_[0] |= 0x00000400u;
}
void SnsAction::clear_has_isnotrichtext() {
  _has_bits_[0] &= ~0x00000400u;
}
void SnsAction::clear_isnotrichtext() {
  isnotrichtext_ = 0u;
  clear_has_isnotrichtext();
}
::google::protobuf::uint32 SnsAction::isnotrichtext() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsAction.IsNotRichText)
  return isnotrichtext_;
}
void SnsAction::set_isnotrichtext(::google::protobuf::uint32 value) {
  set_has_isnotrichtext();
  isnotrichtext_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsAction.IsNotRichText)
}

// optional uint64 ReplyCommentId2 = 12;
bool SnsAction::has_replycommentid2() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SnsAction::set_has_replycommentid2() {
  _has_bits_[0] |= 0x00000800u;
}
void SnsAction::clear_has_replycommentid2() {
  _has_bits_[0] &= ~0x00000800u;
}
void SnsAction::clear_replycommentid2() {
  replycommentid2_ = GOOGLE_ULONGLONG(0);
  clear_has_replycommentid2();
}
::google::protobuf::uint64 SnsAction::replycommentid2() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsAction.ReplyCommentId2)
  return replycommentid2_;
}
void SnsAction::set_replycommentid2(::google::protobuf::uint64 value) {
  set_has_replycommentid2();
  replycommentid2_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsAction.ReplyCommentId2)
}

// optional uint64 CommentId2 = 13;
bool SnsAction::has_commentid2() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SnsAction::set_has_commentid2() {
  _has_bits_[0] |= 0x00001000u;
}
void SnsAction::clear_has_commentid2() {
  _has_bits_[0] &= ~0x00001000u;
}
void SnsAction::clear_commentid2() {
  commentid2_ = GOOGLE_ULONGLONG(0);
  clear_has_commentid2();
}
::google::protobuf::uint64 SnsAction::commentid2() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsAction.CommentId2)
  return commentid2_;
}
void SnsAction::set_commentid2(::google::protobuf::uint64 value) {
  set_has_commentid2();
  commentid2_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsAction.CommentId2)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnsActionGroup::kIdFieldNumber;
const int SnsActionGroup::kParentIdFieldNumber;
const int SnsActionGroup::kCurrentActionFieldNumber;
const int SnsActionGroup::kReferActionFieldNumber;
const int SnsActionGroup::kClientIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnsActionGroup::SnsActionGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsns_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SnsActionGroup)
}
SnsActionGroup::SnsActionGroup(const SnsActionGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientid()) {
    clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
  }
  if (from.has_currentaction()) {
    currentaction_ = new ::micromsg::SnsAction(*from.currentaction_);
  } else {
    currentaction_ = NULL;
  }
  if (from.has_referaction()) {
    referaction_ = new ::micromsg::SnsAction(*from.referaction_);
  } else {
    referaction_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&parentid_) -
    reinterpret_cast<char*>(&id_) + sizeof(parentid_));
  // @@protoc_insertion_point(copy_constructor:micromsg.SnsActionGroup)
}

void SnsActionGroup::SharedCtor() {
  _cached_size_ = 0;
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&currentaction_, 0, reinterpret_cast<char*>(&parentid_) -
    reinterpret_cast<char*>(&currentaction_) + sizeof(parentid_));
}

SnsActionGroup::~SnsActionGroup() {
  // @@protoc_insertion_point(destructor:micromsg.SnsActionGroup)
  SharedDtor();
}

void SnsActionGroup::SharedDtor() {
  clientid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete currentaction_;
  }
  if (this != internal_default_instance()) {
    delete referaction_;
  }
}

void SnsActionGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnsActionGroup::descriptor() {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnsActionGroup& SnsActionGroup::default_instance() {
  protobuf_mmsns_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnsActionGroup* SnsActionGroup::New(::google::protobuf::Arena* arena) const {
  SnsActionGroup* n = new SnsActionGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnsActionGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SnsActionGroup)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_clientid()) {
      GOOGLE_DCHECK(!clientid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*clientid_.UnsafeRawStringPointer())->clear();
    }
    if (has_currentaction()) {
      GOOGLE_DCHECK(currentaction_ != NULL);
      currentaction_->::micromsg::SnsAction::Clear();
    }
    if (has_referaction()) {
      GOOGLE_DCHECK(referaction_ != NULL);
      referaction_->::micromsg::SnsAction::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&parentid_) -
      reinterpret_cast<char*>(&id_) + sizeof(parentid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnsActionGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SnsActionGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 Id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ParentId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_parentid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &parentid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SnsAction CurrentAction = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_currentaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SnsAction ReferAction = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_referaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ClientId = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientid().data(), this->clientid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SnsActionGroup.ClientId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SnsActionGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SnsActionGroup)
  return false;
#undef DO_
}

void SnsActionGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SnsActionGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 Id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint64 ParentId = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->parentid(), output);
  }

  // required .micromsg.SnsAction CurrentAction = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->currentaction_, output);
  }

  // optional .micromsg.SnsAction ReferAction = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->referaction_, output);
  }

  // optional string ClientId = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsActionGroup.ClientId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->clientid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SnsActionGroup)
}

::google::protobuf::uint8* SnsActionGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SnsActionGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 Id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint64 ParentId = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->parentid(), target);
  }

  // required .micromsg.SnsAction CurrentAction = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->currentaction_, deterministic, target);
  }

  // optional .micromsg.SnsAction ReferAction = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->referaction_, deterministic, target);
  }

  // optional string ClientId = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsActionGroup.ClientId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->clientid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SnsActionGroup)
  return target;
}

size_t SnsActionGroup::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SnsActionGroup)
  size_t total_size = 0;

  if (has_currentaction()) {
    // required .micromsg.SnsAction CurrentAction = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->currentaction_);
  }

  if (has_id()) {
    // required uint64 Id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  return total_size;
}
size_t SnsActionGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SnsActionGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000a) ^ 0x0000000a) == 0) {  // All required fields are present.
    // required .micromsg.SnsAction CurrentAction = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->currentaction_);

    // required uint64 Id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string ClientId = 5;
  if (has_clientid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientid());
  }

  // optional .micromsg.SnsAction ReferAction = 4;
  if (has_referaction()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->referaction_);
  }

  // optional uint64 ParentId = 2;
  if (has_parentid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->parentid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnsActionGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SnsActionGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const SnsActionGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnsActionGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SnsActionGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SnsActionGroup)
    MergeFrom(*source);
  }
}

void SnsActionGroup::MergeFrom(const SnsActionGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SnsActionGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_clientid();
      clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_currentaction()->::micromsg::SnsAction::MergeFrom(from.currentaction());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_referaction()->::micromsg::SnsAction::MergeFrom(from.referaction());
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      parentid_ = from.parentid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SnsActionGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SnsActionGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnsActionGroup::CopyFrom(const SnsActionGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SnsActionGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsActionGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000a) != 0x0000000a) return false;
  if (has_currentaction()) {
    if (!this->currentaction_->IsInitialized()) return false;
  }
  if (has_referaction()) {
    if (!this->referaction_->IsInitialized()) return false;
  }
  return true;
}

void SnsActionGroup::Swap(SnsActionGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnsActionGroup::InternalSwap(SnsActionGroup* other) {
  clientid_.Swap(&other->clientid_);
  std::swap(currentaction_, other->currentaction_);
  std::swap(referaction_, other->referaction_);
  std::swap(id_, other->id_);
  std::swap(parentid_, other->parentid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnsActionGroup::GetMetadata() const {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnsActionGroup

// required uint64 Id = 1;
bool SnsActionGroup::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SnsActionGroup::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
void SnsActionGroup::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void SnsActionGroup::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
::google::protobuf::uint64 SnsActionGroup::id() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsActionGroup.Id)
  return id_;
}
void SnsActionGroup::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsActionGroup.Id)
}

// optional uint64 ParentId = 2;
bool SnsActionGroup::has_parentid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SnsActionGroup::set_has_parentid() {
  _has_bits_[0] |= 0x00000010u;
}
void SnsActionGroup::clear_has_parentid() {
  _has_bits_[0] &= ~0x00000010u;
}
void SnsActionGroup::clear_parentid() {
  parentid_ = GOOGLE_ULONGLONG(0);
  clear_has_parentid();
}
::google::protobuf::uint64 SnsActionGroup::parentid() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsActionGroup.ParentId)
  return parentid_;
}
void SnsActionGroup::set_parentid(::google::protobuf::uint64 value) {
  set_has_parentid();
  parentid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsActionGroup.ParentId)
}

// required .micromsg.SnsAction CurrentAction = 3;
bool SnsActionGroup::has_currentaction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SnsActionGroup::set_has_currentaction() {
  _has_bits_[0] |= 0x00000002u;
}
void SnsActionGroup::clear_has_currentaction() {
  _has_bits_[0] &= ~0x00000002u;
}
void SnsActionGroup::clear_currentaction() {
  if (currentaction_ != NULL) currentaction_->::micromsg::SnsAction::Clear();
  clear_has_currentaction();
}
const ::micromsg::SnsAction& SnsActionGroup::currentaction() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsActionGroup.CurrentAction)
  return currentaction_ != NULL ? *currentaction_
                         : *::micromsg::SnsAction::internal_default_instance();
}
::micromsg::SnsAction* SnsActionGroup::mutable_currentaction() {
  set_has_currentaction();
  if (currentaction_ == NULL) {
    currentaction_ = new ::micromsg::SnsAction;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsActionGroup.CurrentAction)
  return currentaction_;
}
::micromsg::SnsAction* SnsActionGroup::release_currentaction() {
  // @@protoc_insertion_point(field_release:micromsg.SnsActionGroup.CurrentAction)
  clear_has_currentaction();
  ::micromsg::SnsAction* temp = currentaction_;
  currentaction_ = NULL;
  return temp;
}
void SnsActionGroup::set_allocated_currentaction(::micromsg::SnsAction* currentaction) {
  delete currentaction_;
  currentaction_ = currentaction;
  if (currentaction) {
    set_has_currentaction();
  } else {
    clear_has_currentaction();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsActionGroup.CurrentAction)
}

// optional .micromsg.SnsAction ReferAction = 4;
bool SnsActionGroup::has_referaction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SnsActionGroup::set_has_referaction() {
  _has_bits_[0] |= 0x00000004u;
}
void SnsActionGroup::clear_has_referaction() {
  _has_bits_[0] &= ~0x00000004u;
}
void SnsActionGroup::clear_referaction() {
  if (referaction_ != NULL) referaction_->::micromsg::SnsAction::Clear();
  clear_has_referaction();
}
const ::micromsg::SnsAction& SnsActionGroup::referaction() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsActionGroup.ReferAction)
  return referaction_ != NULL ? *referaction_
                         : *::micromsg::SnsAction::internal_default_instance();
}
::micromsg::SnsAction* SnsActionGroup::mutable_referaction() {
  set_has_referaction();
  if (referaction_ == NULL) {
    referaction_ = new ::micromsg::SnsAction;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsActionGroup.ReferAction)
  return referaction_;
}
::micromsg::SnsAction* SnsActionGroup::release_referaction() {
  // @@protoc_insertion_point(field_release:micromsg.SnsActionGroup.ReferAction)
  clear_has_referaction();
  ::micromsg::SnsAction* temp = referaction_;
  referaction_ = NULL;
  return temp;
}
void SnsActionGroup::set_allocated_referaction(::micromsg::SnsAction* referaction) {
  delete referaction_;
  referaction_ = referaction;
  if (referaction) {
    set_has_referaction();
  } else {
    clear_has_referaction();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsActionGroup.ReferAction)
}

// optional string ClientId = 5;
bool SnsActionGroup::has_clientid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnsActionGroup::set_has_clientid() {
  _has_bits_[0] |= 0x00000001u;
}
void SnsActionGroup::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnsActionGroup::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientid();
}
const ::std::string& SnsActionGroup::clientid() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsActionGroup.ClientId)
  return clientid_.GetNoArena();
}
void SnsActionGroup::set_clientid(const ::std::string& value) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SnsActionGroup.ClientId)
}
#if LANG_CXX11
void SnsActionGroup::set_clientid(::std::string&& value) {
  set_has_clientid();
  clientid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SnsActionGroup.ClientId)
}
#endif
void SnsActionGroup::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SnsActionGroup.ClientId)
}
void SnsActionGroup::set_clientid(const char* value, size_t size) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SnsActionGroup.ClientId)
}
::std::string* SnsActionGroup::mutable_clientid() {
  set_has_clientid();
  // @@protoc_insertion_point(field_mutable:micromsg.SnsActionGroup.ClientId)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnsActionGroup::release_clientid() {
  // @@protoc_insertion_point(field_release:micromsg.SnsActionGroup.ClientId)
  clear_has_clientid();
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnsActionGroup::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    set_has_clientid();
  } else {
    clear_has_clientid();
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsActionGroup.ClientId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnsCommentRequest::kBaseRequestFieldNumber;
const int SnsCommentRequest::kActionFieldNumber;
const int SnsCommentRequest::kClientIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnsCommentRequest::SnsCommentRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsns_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SnsCommentRequest)
}
SnsCommentRequest::SnsCommentRequest(const SnsCommentRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientid()) {
    clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_action()) {
    action_ = new ::micromsg::SnsActionGroup(*from.action_);
  } else {
    action_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.SnsCommentRequest)
}

void SnsCommentRequest::SharedCtor() {
  _cached_size_ = 0;
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(action_));
}

SnsCommentRequest::~SnsCommentRequest() {
  // @@protoc_insertion_point(destructor:micromsg.SnsCommentRequest)
  SharedDtor();
}

void SnsCommentRequest::SharedDtor() {
  clientid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete action_;
  }
}

void SnsCommentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnsCommentRequest::descriptor() {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnsCommentRequest& SnsCommentRequest::default_instance() {
  protobuf_mmsns_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnsCommentRequest* SnsCommentRequest::New(::google::protobuf::Arena* arena) const {
  SnsCommentRequest* n = new SnsCommentRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnsCommentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SnsCommentRequest)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_clientid()) {
      GOOGLE_DCHECK(!clientid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*clientid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_action()) {
      GOOGLE_DCHECK(action_ != NULL);
      action_->::micromsg::SnsActionGroup::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnsCommentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SnsCommentRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SnsActionGroup Action = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ClientId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientid().data(), this->clientid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SnsCommentRequest.ClientId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SnsCommentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SnsCommentRequest)
  return false;
#undef DO_
}

void SnsCommentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SnsCommentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required .micromsg.SnsActionGroup Action = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->action_, output);
  }

  // optional string ClientId = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsCommentRequest.ClientId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->clientid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SnsCommentRequest)
}

::google::protobuf::uint8* SnsCommentRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SnsCommentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required .micromsg.SnsActionGroup Action = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->action_, deterministic, target);
  }

  // optional string ClientId = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsCommentRequest.ClientId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->clientid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SnsCommentRequest)
  return target;
}

size_t SnsCommentRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SnsCommentRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_action()) {
    // required .micromsg.SnsActionGroup Action = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->action_);
  }

  return total_size;
}
size_t SnsCommentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SnsCommentRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.SnsActionGroup Action = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->action_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string ClientId = 3;
  if (has_clientid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnsCommentRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SnsCommentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SnsCommentRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnsCommentRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SnsCommentRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SnsCommentRequest)
    MergeFrom(*source);
  }
}

void SnsCommentRequest::MergeFrom(const SnsCommentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SnsCommentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_clientid();
      clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_action()->::micromsg::SnsActionGroup::MergeFrom(from.action());
    }
  }
}

void SnsCommentRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SnsCommentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnsCommentRequest::CopyFrom(const SnsCommentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SnsCommentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsCommentRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_action()) {
    if (!this->action_->IsInitialized()) return false;
  }
  return true;
}

void SnsCommentRequest::Swap(SnsCommentRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnsCommentRequest::InternalSwap(SnsCommentRequest* other) {
  clientid_.Swap(&other->clientid_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(action_, other->action_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnsCommentRequest::GetMetadata() const {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnsCommentRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool SnsCommentRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SnsCommentRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void SnsCommentRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void SnsCommentRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& SnsCommentRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsCommentRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* SnsCommentRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsCommentRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* SnsCommentRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.SnsCommentRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void SnsCommentRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsCommentRequest.BaseRequest)
}

// required .micromsg.SnsActionGroup Action = 2;
bool SnsCommentRequest::has_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SnsCommentRequest::set_has_action() {
  _has_bits_[0] |= 0x00000004u;
}
void SnsCommentRequest::clear_has_action() {
  _has_bits_[0] &= ~0x00000004u;
}
void SnsCommentRequest::clear_action() {
  if (action_ != NULL) action_->::micromsg::SnsActionGroup::Clear();
  clear_has_action();
}
const ::micromsg::SnsActionGroup& SnsCommentRequest::action() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsCommentRequest.Action)
  return action_ != NULL ? *action_
                         : *::micromsg::SnsActionGroup::internal_default_instance();
}
::micromsg::SnsActionGroup* SnsCommentRequest::mutable_action() {
  set_has_action();
  if (action_ == NULL) {
    action_ = new ::micromsg::SnsActionGroup;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsCommentRequest.Action)
  return action_;
}
::micromsg::SnsActionGroup* SnsCommentRequest::release_action() {
  // @@protoc_insertion_point(field_release:micromsg.SnsCommentRequest.Action)
  clear_has_action();
  ::micromsg::SnsActionGroup* temp = action_;
  action_ = NULL;
  return temp;
}
void SnsCommentRequest::set_allocated_action(::micromsg::SnsActionGroup* action) {
  delete action_;
  action_ = action;
  if (action) {
    set_has_action();
  } else {
    clear_has_action();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsCommentRequest.Action)
}

// optional string ClientId = 3;
bool SnsCommentRequest::has_clientid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnsCommentRequest::set_has_clientid() {
  _has_bits_[0] |= 0x00000001u;
}
void SnsCommentRequest::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnsCommentRequest::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientid();
}
const ::std::string& SnsCommentRequest::clientid() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsCommentRequest.ClientId)
  return clientid_.GetNoArena();
}
void SnsCommentRequest::set_clientid(const ::std::string& value) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SnsCommentRequest.ClientId)
}
#if LANG_CXX11
void SnsCommentRequest::set_clientid(::std::string&& value) {
  set_has_clientid();
  clientid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SnsCommentRequest.ClientId)
}
#endif
void SnsCommentRequest::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SnsCommentRequest.ClientId)
}
void SnsCommentRequest::set_clientid(const char* value, size_t size) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SnsCommentRequest.ClientId)
}
::std::string* SnsCommentRequest::mutable_clientid() {
  set_has_clientid();
  // @@protoc_insertion_point(field_mutable:micromsg.SnsCommentRequest.ClientId)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnsCommentRequest::release_clientid() {
  // @@protoc_insertion_point(field_release:micromsg.SnsCommentRequest.ClientId)
  clear_has_clientid();
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnsCommentRequest::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    set_has_clientid();
  } else {
    clear_has_clientid();
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsCommentRequest.ClientId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnsCommentResponse::kBaseResponseFieldNumber;
const int SnsCommentResponse::kSnsObjectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnsCommentResponse::SnsCommentResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsns_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SnsCommentResponse)
}
SnsCommentResponse::SnsCommentResponse(const SnsCommentResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_snsobject()) {
    snsobject_ = new ::micromsg::SnsObject(*from.snsobject_);
  } else {
    snsobject_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.SnsCommentResponse)
}

void SnsCommentResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&snsobject_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(snsobject_));
}

SnsCommentResponse::~SnsCommentResponse() {
  // @@protoc_insertion_point(destructor:micromsg.SnsCommentResponse)
  SharedDtor();
}

void SnsCommentResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete snsobject_;
  }
}

void SnsCommentResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnsCommentResponse::descriptor() {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnsCommentResponse& SnsCommentResponse::default_instance() {
  protobuf_mmsns_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnsCommentResponse* SnsCommentResponse::New(::google::protobuf::Arena* arena) const {
  SnsCommentResponse* n = new SnsCommentResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnsCommentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SnsCommentResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_snsobject()) {
      GOOGLE_DCHECK(snsobject_ != NULL);
      snsobject_->::micromsg::SnsObject::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnsCommentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SnsCommentResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SnsObject SnsObject = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_snsobject()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SnsCommentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SnsCommentResponse)
  return false;
#undef DO_
}

void SnsCommentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SnsCommentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required .micromsg.SnsObject SnsObject = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->snsobject_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SnsCommentResponse)
}

::google::protobuf::uint8* SnsCommentResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SnsCommentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required .micromsg.SnsObject SnsObject = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->snsobject_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SnsCommentResponse)
  return target;
}

size_t SnsCommentResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SnsCommentResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_snsobject()) {
    // required .micromsg.SnsObject SnsObject = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->snsobject_);
  }

  return total_size;
}
size_t SnsCommentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SnsCommentResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required .micromsg.SnsObject SnsObject = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->snsobject_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnsCommentResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SnsCommentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SnsCommentResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnsCommentResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SnsCommentResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SnsCommentResponse)
    MergeFrom(*source);
  }
}

void SnsCommentResponse::MergeFrom(const SnsCommentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SnsCommentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_snsobject()->::micromsg::SnsObject::MergeFrom(from.snsobject());
    }
  }
}

void SnsCommentResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SnsCommentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnsCommentResponse::CopyFrom(const SnsCommentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SnsCommentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsCommentResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_snsobject()) {
    if (!this->snsobject_->IsInitialized()) return false;
  }
  return true;
}

void SnsCommentResponse::Swap(SnsCommentResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnsCommentResponse::InternalSwap(SnsCommentResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(snsobject_, other->snsobject_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnsCommentResponse::GetMetadata() const {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnsCommentResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool SnsCommentResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnsCommentResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void SnsCommentResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnsCommentResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& SnsCommentResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsCommentResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* SnsCommentResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsCommentResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* SnsCommentResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.SnsCommentResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void SnsCommentResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsCommentResponse.BaseResponse)
}

// required .micromsg.SnsObject SnsObject = 2;
bool SnsCommentResponse::has_snsobject() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SnsCommentResponse::set_has_snsobject() {
  _has_bits_[0] |= 0x00000002u;
}
void SnsCommentResponse::clear_has_snsobject() {
  _has_bits_[0] &= ~0x00000002u;
}
void SnsCommentResponse::clear_snsobject() {
  if (snsobject_ != NULL) snsobject_->::micromsg::SnsObject::Clear();
  clear_has_snsobject();
}
const ::micromsg::SnsObject& SnsCommentResponse::snsobject() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsCommentResponse.SnsObject)
  return snsobject_ != NULL ? *snsobject_
                         : *::micromsg::SnsObject::internal_default_instance();
}
::micromsg::SnsObject* SnsCommentResponse::mutable_snsobject() {
  set_has_snsobject();
  if (snsobject_ == NULL) {
    snsobject_ = new ::micromsg::SnsObject;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsCommentResponse.SnsObject)
  return snsobject_;
}
::micromsg::SnsObject* SnsCommentResponse::release_snsobject() {
  // @@protoc_insertion_point(field_release:micromsg.SnsCommentResponse.SnsObject)
  clear_has_snsobject();
  ::micromsg::SnsObject* temp = snsobject_;
  snsobject_ = NULL;
  return temp;
}
void SnsCommentResponse::set_allocated_snsobject(::micromsg::SnsObject* snsobject) {
  delete snsobject_;
  snsobject_ = snsobject;
  if (snsobject) {
    set_has_snsobject();
  } else {
    clear_has_snsobject();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsCommentResponse.SnsObject)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnsADCommentRequest::kBaseRequestFieldNumber;
const int SnsADCommentRequest::kActionFieldNumber;
const int SnsADCommentRequest::kClientIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnsADCommentRequest::SnsADCommentRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsns_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SnsADCommentRequest)
}
SnsADCommentRequest::SnsADCommentRequest(const SnsADCommentRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientid()) {
    clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_action()) {
    action_ = new ::micromsg::SnsActionGroup(*from.action_);
  } else {
    action_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.SnsADCommentRequest)
}

void SnsADCommentRequest::SharedCtor() {
  _cached_size_ = 0;
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(action_));
}

SnsADCommentRequest::~SnsADCommentRequest() {
  // @@protoc_insertion_point(destructor:micromsg.SnsADCommentRequest)
  SharedDtor();
}

void SnsADCommentRequest::SharedDtor() {
  clientid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete action_;
  }
}

void SnsADCommentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnsADCommentRequest::descriptor() {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnsADCommentRequest& SnsADCommentRequest::default_instance() {
  protobuf_mmsns_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnsADCommentRequest* SnsADCommentRequest::New(::google::protobuf::Arena* arena) const {
  SnsADCommentRequest* n = new SnsADCommentRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnsADCommentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SnsADCommentRequest)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_clientid()) {
      GOOGLE_DCHECK(!clientid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*clientid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_action()) {
      GOOGLE_DCHECK(action_ != NULL);
      action_->::micromsg::SnsActionGroup::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnsADCommentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SnsADCommentRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SnsActionGroup Action = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ClientId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientid().data(), this->clientid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SnsADCommentRequest.ClientId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SnsADCommentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SnsADCommentRequest)
  return false;
#undef DO_
}

void SnsADCommentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SnsADCommentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required .micromsg.SnsActionGroup Action = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->action_, output);
  }

  // optional string ClientId = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsADCommentRequest.ClientId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->clientid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SnsADCommentRequest)
}

::google::protobuf::uint8* SnsADCommentRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SnsADCommentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required .micromsg.SnsActionGroup Action = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->action_, deterministic, target);
  }

  // optional string ClientId = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsADCommentRequest.ClientId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->clientid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SnsADCommentRequest)
  return target;
}

size_t SnsADCommentRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SnsADCommentRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_action()) {
    // required .micromsg.SnsActionGroup Action = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->action_);
  }

  return total_size;
}
size_t SnsADCommentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SnsADCommentRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.SnsActionGroup Action = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->action_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string ClientId = 3;
  if (has_clientid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnsADCommentRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SnsADCommentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SnsADCommentRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnsADCommentRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SnsADCommentRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SnsADCommentRequest)
    MergeFrom(*source);
  }
}

void SnsADCommentRequest::MergeFrom(const SnsADCommentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SnsADCommentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_clientid();
      clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_action()->::micromsg::SnsActionGroup::MergeFrom(from.action());
    }
  }
}

void SnsADCommentRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SnsADCommentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnsADCommentRequest::CopyFrom(const SnsADCommentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SnsADCommentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsADCommentRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_action()) {
    if (!this->action_->IsInitialized()) return false;
  }
  return true;
}

void SnsADCommentRequest::Swap(SnsADCommentRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnsADCommentRequest::InternalSwap(SnsADCommentRequest* other) {
  clientid_.Swap(&other->clientid_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(action_, other->action_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnsADCommentRequest::GetMetadata() const {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnsADCommentRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool SnsADCommentRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SnsADCommentRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void SnsADCommentRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void SnsADCommentRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& SnsADCommentRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsADCommentRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* SnsADCommentRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsADCommentRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* SnsADCommentRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.SnsADCommentRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void SnsADCommentRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsADCommentRequest.BaseRequest)
}

// required .micromsg.SnsActionGroup Action = 2;
bool SnsADCommentRequest::has_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SnsADCommentRequest::set_has_action() {
  _has_bits_[0] |= 0x00000004u;
}
void SnsADCommentRequest::clear_has_action() {
  _has_bits_[0] &= ~0x00000004u;
}
void SnsADCommentRequest::clear_action() {
  if (action_ != NULL) action_->::micromsg::SnsActionGroup::Clear();
  clear_has_action();
}
const ::micromsg::SnsActionGroup& SnsADCommentRequest::action() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsADCommentRequest.Action)
  return action_ != NULL ? *action_
                         : *::micromsg::SnsActionGroup::internal_default_instance();
}
::micromsg::SnsActionGroup* SnsADCommentRequest::mutable_action() {
  set_has_action();
  if (action_ == NULL) {
    action_ = new ::micromsg::SnsActionGroup;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsADCommentRequest.Action)
  return action_;
}
::micromsg::SnsActionGroup* SnsADCommentRequest::release_action() {
  // @@protoc_insertion_point(field_release:micromsg.SnsADCommentRequest.Action)
  clear_has_action();
  ::micromsg::SnsActionGroup* temp = action_;
  action_ = NULL;
  return temp;
}
void SnsADCommentRequest::set_allocated_action(::micromsg::SnsActionGroup* action) {
  delete action_;
  action_ = action;
  if (action) {
    set_has_action();
  } else {
    clear_has_action();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsADCommentRequest.Action)
}

// optional string ClientId = 3;
bool SnsADCommentRequest::has_clientid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnsADCommentRequest::set_has_clientid() {
  _has_bits_[0] |= 0x00000001u;
}
void SnsADCommentRequest::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnsADCommentRequest::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientid();
}
const ::std::string& SnsADCommentRequest::clientid() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsADCommentRequest.ClientId)
  return clientid_.GetNoArena();
}
void SnsADCommentRequest::set_clientid(const ::std::string& value) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SnsADCommentRequest.ClientId)
}
#if LANG_CXX11
void SnsADCommentRequest::set_clientid(::std::string&& value) {
  set_has_clientid();
  clientid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SnsADCommentRequest.ClientId)
}
#endif
void SnsADCommentRequest::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SnsADCommentRequest.ClientId)
}
void SnsADCommentRequest::set_clientid(const char* value, size_t size) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SnsADCommentRequest.ClientId)
}
::std::string* SnsADCommentRequest::mutable_clientid() {
  set_has_clientid();
  // @@protoc_insertion_point(field_mutable:micromsg.SnsADCommentRequest.ClientId)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnsADCommentRequest::release_clientid() {
  // @@protoc_insertion_point(field_release:micromsg.SnsADCommentRequest.ClientId)
  clear_has_clientid();
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnsADCommentRequest::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    set_has_clientid();
  } else {
    clear_has_clientid();
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsADCommentRequest.ClientId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnsADCommentResponse::kBaseResponseFieldNumber;
const int SnsADCommentResponse::kSnsADObjectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnsADCommentResponse::SnsADCommentResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsns_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SnsADCommentResponse)
}
SnsADCommentResponse::SnsADCommentResponse(const SnsADCommentResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_snsadobject()) {
    snsadobject_ = new ::micromsg::SnsADObject(*from.snsadobject_);
  } else {
    snsadobject_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.SnsADCommentResponse)
}

void SnsADCommentResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&snsadobject_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(snsadobject_));
}

SnsADCommentResponse::~SnsADCommentResponse() {
  // @@protoc_insertion_point(destructor:micromsg.SnsADCommentResponse)
  SharedDtor();
}

void SnsADCommentResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete snsadobject_;
  }
}

void SnsADCommentResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnsADCommentResponse::descriptor() {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnsADCommentResponse& SnsADCommentResponse::default_instance() {
  protobuf_mmsns_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnsADCommentResponse* SnsADCommentResponse::New(::google::protobuf::Arena* arena) const {
  SnsADCommentResponse* n = new SnsADCommentResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnsADCommentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SnsADCommentResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_snsadobject()) {
      GOOGLE_DCHECK(snsadobject_ != NULL);
      snsadobject_->::micromsg::SnsADObject::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnsADCommentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SnsADCommentResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SnsADObject SnsADObject = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_snsadobject()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SnsADCommentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SnsADCommentResponse)
  return false;
#undef DO_
}

void SnsADCommentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SnsADCommentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required .micromsg.SnsADObject SnsADObject = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->snsadobject_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SnsADCommentResponse)
}

::google::protobuf::uint8* SnsADCommentResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SnsADCommentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required .micromsg.SnsADObject SnsADObject = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->snsadobject_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SnsADCommentResponse)
  return target;
}

size_t SnsADCommentResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SnsADCommentResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_snsadobject()) {
    // required .micromsg.SnsADObject SnsADObject = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->snsadobject_);
  }

  return total_size;
}
size_t SnsADCommentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SnsADCommentResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required .micromsg.SnsADObject SnsADObject = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->snsadobject_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnsADCommentResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SnsADCommentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SnsADCommentResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnsADCommentResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SnsADCommentResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SnsADCommentResponse)
    MergeFrom(*source);
  }
}

void SnsADCommentResponse::MergeFrom(const SnsADCommentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SnsADCommentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_snsadobject()->::micromsg::SnsADObject::MergeFrom(from.snsadobject());
    }
  }
}

void SnsADCommentResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SnsADCommentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnsADCommentResponse::CopyFrom(const SnsADCommentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SnsADCommentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsADCommentResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_snsadobject()) {
    if (!this->snsadobject_->IsInitialized()) return false;
  }
  return true;
}

void SnsADCommentResponse::Swap(SnsADCommentResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnsADCommentResponse::InternalSwap(SnsADCommentResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(snsadobject_, other->snsadobject_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnsADCommentResponse::GetMetadata() const {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnsADCommentResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool SnsADCommentResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnsADCommentResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void SnsADCommentResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnsADCommentResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& SnsADCommentResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsADCommentResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* SnsADCommentResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsADCommentResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* SnsADCommentResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.SnsADCommentResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void SnsADCommentResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsADCommentResponse.BaseResponse)
}

// required .micromsg.SnsADObject SnsADObject = 2;
bool SnsADCommentResponse::has_snsadobject() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SnsADCommentResponse::set_has_snsadobject() {
  _has_bits_[0] |= 0x00000002u;
}
void SnsADCommentResponse::clear_has_snsadobject() {
  _has_bits_[0] &= ~0x00000002u;
}
void SnsADCommentResponse::clear_snsadobject() {
  if (snsadobject_ != NULL) snsadobject_->::micromsg::SnsADObject::Clear();
  clear_has_snsadobject();
}
const ::micromsg::SnsADObject& SnsADCommentResponse::snsadobject() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsADCommentResponse.SnsADObject)
  return snsadobject_ != NULL ? *snsadobject_
                         : *::micromsg::SnsADObject::internal_default_instance();
}
::micromsg::SnsADObject* SnsADCommentResponse::mutable_snsadobject() {
  set_has_snsadobject();
  if (snsadobject_ == NULL) {
    snsadobject_ = new ::micromsg::SnsADObject;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsADCommentResponse.SnsADObject)
  return snsadobject_;
}
::micromsg::SnsADObject* SnsADCommentResponse::release_snsadobject() {
  // @@protoc_insertion_point(field_release:micromsg.SnsADCommentResponse.SnsADObject)
  clear_has_snsadobject();
  ::micromsg::SnsADObject* temp = snsadobject_;
  snsadobject_ = NULL;
  return temp;
}
void SnsADCommentResponse::set_allocated_snsadobject(::micromsg::SnsADObject* snsadobject) {
  delete snsadobject_;
  snsadobject_ = snsadobject;
  if (snsadobject) {
    set_has_snsadobject();
  } else {
    clear_has_snsadobject();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsADCommentResponse.SnsADObject)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnsSyncRequest::kBaseRequestFieldNumber;
const int SnsSyncRequest::kSelectorFieldNumber;
const int SnsSyncRequest::kKeyBufFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnsSyncRequest::SnsSyncRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsns_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SnsSyncRequest)
}
SnsSyncRequest::SnsSyncRequest(const SnsSyncRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_keybuf()) {
    keybuf_ = new ::micromsg::SKBuiltinBuffer_t(*from.keybuf_);
  } else {
    keybuf_ = NULL;
  }
  selector_ = from.selector_;
  // @@protoc_insertion_point(copy_constructor:micromsg.SnsSyncRequest)
}

void SnsSyncRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&selector_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(selector_));
}

SnsSyncRequest::~SnsSyncRequest() {
  // @@protoc_insertion_point(destructor:micromsg.SnsSyncRequest)
  SharedDtor();
}

void SnsSyncRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete keybuf_;
  }
}

void SnsSyncRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnsSyncRequest::descriptor() {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnsSyncRequest& SnsSyncRequest::default_instance() {
  protobuf_mmsns_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnsSyncRequest* SnsSyncRequest::New(::google::protobuf::Arena* arena) const {
  SnsSyncRequest* n = new SnsSyncRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnsSyncRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SnsSyncRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_keybuf()) {
      GOOGLE_DCHECK(keybuf_ != NULL);
      keybuf_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  selector_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnsSyncRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SnsSyncRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Selector = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_selector();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selector_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keybuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SnsSyncRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SnsSyncRequest)
  return false;
#undef DO_
}

void SnsSyncRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SnsSyncRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 Selector = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->selector(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->keybuf_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SnsSyncRequest)
}

::google::protobuf::uint8* SnsSyncRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SnsSyncRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 Selector = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->selector(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->keybuf_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SnsSyncRequest)
  return target;
}

size_t SnsSyncRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SnsSyncRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_keybuf()) {
    // required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->keybuf_);
  }

  if (has_selector()) {
    // required uint32 Selector = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->selector());
  }

  return total_size;
}
size_t SnsSyncRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SnsSyncRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->keybuf_);

    // required uint32 Selector = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->selector());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnsSyncRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SnsSyncRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SnsSyncRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnsSyncRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SnsSyncRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SnsSyncRequest)
    MergeFrom(*source);
  }
}

void SnsSyncRequest::MergeFrom(const SnsSyncRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SnsSyncRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_keybuf()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.keybuf());
    }
    if (cached_has_bits & 0x00000004u) {
      selector_ = from.selector_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SnsSyncRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SnsSyncRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnsSyncRequest::CopyFrom(const SnsSyncRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SnsSyncRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsSyncRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_keybuf()) {
    if (!this->keybuf_->IsInitialized()) return false;
  }
  return true;
}

void SnsSyncRequest::Swap(SnsSyncRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnsSyncRequest::InternalSwap(SnsSyncRequest* other) {
  std::swap(baserequest_, other->baserequest_);
  std::swap(keybuf_, other->keybuf_);
  std::swap(selector_, other->selector_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnsSyncRequest::GetMetadata() const {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnsSyncRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool SnsSyncRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnsSyncRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void SnsSyncRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnsSyncRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& SnsSyncRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsSyncRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* SnsSyncRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsSyncRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* SnsSyncRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.SnsSyncRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void SnsSyncRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsSyncRequest.BaseRequest)
}

// required uint32 Selector = 2;
bool SnsSyncRequest::has_selector() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SnsSyncRequest::set_has_selector() {
  _has_bits_[0] |= 0x00000004u;
}
void SnsSyncRequest::clear_has_selector() {
  _has_bits_[0] &= ~0x00000004u;
}
void SnsSyncRequest::clear_selector() {
  selector_ = 0u;
  clear_has_selector();
}
::google::protobuf::uint32 SnsSyncRequest::selector() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsSyncRequest.Selector)
  return selector_;
}
void SnsSyncRequest::set_selector(::google::protobuf::uint32 value) {
  set_has_selector();
  selector_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsSyncRequest.Selector)
}

// required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
bool SnsSyncRequest::has_keybuf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SnsSyncRequest::set_has_keybuf() {
  _has_bits_[0] |= 0x00000002u;
}
void SnsSyncRequest::clear_has_keybuf() {
  _has_bits_[0] &= ~0x00000002u;
}
void SnsSyncRequest::clear_keybuf() {
  if (keybuf_ != NULL) keybuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_keybuf();
}
const ::micromsg::SKBuiltinBuffer_t& SnsSyncRequest::keybuf() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsSyncRequest.KeyBuf)
  return keybuf_ != NULL ? *keybuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* SnsSyncRequest::mutable_keybuf() {
  set_has_keybuf();
  if (keybuf_ == NULL) {
    keybuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsSyncRequest.KeyBuf)
  return keybuf_;
}
::micromsg::SKBuiltinBuffer_t* SnsSyncRequest::release_keybuf() {
  // @@protoc_insertion_point(field_release:micromsg.SnsSyncRequest.KeyBuf)
  clear_has_keybuf();
  ::micromsg::SKBuiltinBuffer_t* temp = keybuf_;
  keybuf_ = NULL;
  return temp;
}
void SnsSyncRequest::set_allocated_keybuf(::micromsg::SKBuiltinBuffer_t* keybuf) {
  delete keybuf_;
  keybuf_ = keybuf;
  if (keybuf) {
    set_has_keybuf();
  } else {
    clear_has_keybuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsSyncRequest.KeyBuf)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnsSyncResponse::kBaseResponseFieldNumber;
const int SnsSyncResponse::kCmdListFieldNumber;
const int SnsSyncResponse::kContinueFlagFieldNumber;
const int SnsSyncResponse::kKeyBufFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnsSyncResponse::SnsSyncResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsns_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SnsSyncResponse)
}
SnsSyncResponse::SnsSyncResponse(const SnsSyncResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_cmdlist()) {
    cmdlist_ = new ::micromsg::CmdList(*from.cmdlist_);
  } else {
    cmdlist_ = NULL;
  }
  if (from.has_keybuf()) {
    keybuf_ = new ::micromsg::SKBuiltinBuffer_t(*from.keybuf_);
  } else {
    keybuf_ = NULL;
  }
  continueflag_ = from.continueflag_;
  // @@protoc_insertion_point(copy_constructor:micromsg.SnsSyncResponse)
}

void SnsSyncResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&continueflag_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(continueflag_));
}

SnsSyncResponse::~SnsSyncResponse() {
  // @@protoc_insertion_point(destructor:micromsg.SnsSyncResponse)
  SharedDtor();
}

void SnsSyncResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete cmdlist_;
  }
  if (this != internal_default_instance()) {
    delete keybuf_;
  }
}

void SnsSyncResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnsSyncResponse::descriptor() {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnsSyncResponse& SnsSyncResponse::default_instance() {
  protobuf_mmsns_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnsSyncResponse* SnsSyncResponse::New(::google::protobuf::Arena* arena) const {
  SnsSyncResponse* n = new SnsSyncResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnsSyncResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SnsSyncResponse)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_cmdlist()) {
      GOOGLE_DCHECK(cmdlist_ != NULL);
      cmdlist_->::micromsg::CmdList::Clear();
    }
    if (has_keybuf()) {
      GOOGLE_DCHECK(keybuf_ != NULL);
      keybuf_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  continueflag_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnsSyncResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SnsSyncResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.CmdList CmdList = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmdlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ContinueFlag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_continueflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &continueflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t KeyBuf = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keybuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SnsSyncResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SnsSyncResponse)
  return false;
#undef DO_
}

void SnsSyncResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SnsSyncResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required .micromsg.CmdList CmdList = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->cmdlist_, output);
  }

  // required uint32 ContinueFlag = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->continueflag(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t KeyBuf = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->keybuf_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SnsSyncResponse)
}

::google::protobuf::uint8* SnsSyncResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SnsSyncResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required .micromsg.CmdList CmdList = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->cmdlist_, deterministic, target);
  }

  // required uint32 ContinueFlag = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->continueflag(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t KeyBuf = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->keybuf_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SnsSyncResponse)
  return target;
}

size_t SnsSyncResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SnsSyncResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_cmdlist()) {
    // required .micromsg.CmdList CmdList = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cmdlist_);
  }

  if (has_keybuf()) {
    // required .micromsg.SKBuiltinBuffer_t KeyBuf = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->keybuf_);
  }

  if (has_continueflag()) {
    // required uint32 ContinueFlag = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->continueflag());
  }

  return total_size;
}
size_t SnsSyncResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SnsSyncResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required .micromsg.CmdList CmdList = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cmdlist_);

    // required .micromsg.SKBuiltinBuffer_t KeyBuf = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->keybuf_);

    // required uint32 ContinueFlag = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->continueflag());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnsSyncResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SnsSyncResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SnsSyncResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnsSyncResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SnsSyncResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SnsSyncResponse)
    MergeFrom(*source);
  }
}

void SnsSyncResponse::MergeFrom(const SnsSyncResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SnsSyncResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_cmdlist()->::micromsg::CmdList::MergeFrom(from.cmdlist());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_keybuf()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.keybuf());
    }
    if (cached_has_bits & 0x00000008u) {
      continueflag_ = from.continueflag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SnsSyncResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SnsSyncResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnsSyncResponse::CopyFrom(const SnsSyncResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SnsSyncResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsSyncResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_cmdlist()) {
    if (!this->cmdlist_->IsInitialized()) return false;
  }
  if (has_keybuf()) {
    if (!this->keybuf_->IsInitialized()) return false;
  }
  return true;
}

void SnsSyncResponse::Swap(SnsSyncResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnsSyncResponse::InternalSwap(SnsSyncResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(cmdlist_, other->cmdlist_);
  std::swap(keybuf_, other->keybuf_);
  std::swap(continueflag_, other->continueflag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnsSyncResponse::GetMetadata() const {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnsSyncResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool SnsSyncResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnsSyncResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void SnsSyncResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnsSyncResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& SnsSyncResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsSyncResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* SnsSyncResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsSyncResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* SnsSyncResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.SnsSyncResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void SnsSyncResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsSyncResponse.BaseResponse)
}

// required .micromsg.CmdList CmdList = 2;
bool SnsSyncResponse::has_cmdlist() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SnsSyncResponse::set_has_cmdlist() {
  _has_bits_[0] |= 0x00000002u;
}
void SnsSyncResponse::clear_has_cmdlist() {
  _has_bits_[0] &= ~0x00000002u;
}
void SnsSyncResponse::clear_cmdlist() {
  if (cmdlist_ != NULL) cmdlist_->::micromsg::CmdList::Clear();
  clear_has_cmdlist();
}
const ::micromsg::CmdList& SnsSyncResponse::cmdlist() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsSyncResponse.CmdList)
  return cmdlist_ != NULL ? *cmdlist_
                         : *::micromsg::CmdList::internal_default_instance();
}
::micromsg::CmdList* SnsSyncResponse::mutable_cmdlist() {
  set_has_cmdlist();
  if (cmdlist_ == NULL) {
    cmdlist_ = new ::micromsg::CmdList;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsSyncResponse.CmdList)
  return cmdlist_;
}
::micromsg::CmdList* SnsSyncResponse::release_cmdlist() {
  // @@protoc_insertion_point(field_release:micromsg.SnsSyncResponse.CmdList)
  clear_has_cmdlist();
  ::micromsg::CmdList* temp = cmdlist_;
  cmdlist_ = NULL;
  return temp;
}
void SnsSyncResponse::set_allocated_cmdlist(::micromsg::CmdList* cmdlist) {
  delete cmdlist_;
  cmdlist_ = cmdlist;
  if (cmdlist) {
    set_has_cmdlist();
  } else {
    clear_has_cmdlist();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsSyncResponse.CmdList)
}

// required uint32 ContinueFlag = 3;
bool SnsSyncResponse::has_continueflag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SnsSyncResponse::set_has_continueflag() {
  _has_bits_[0] |= 0x00000008u;
}
void SnsSyncResponse::clear_has_continueflag() {
  _has_bits_[0] &= ~0x00000008u;
}
void SnsSyncResponse::clear_continueflag() {
  continueflag_ = 0u;
  clear_has_continueflag();
}
::google::protobuf::uint32 SnsSyncResponse::continueflag() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsSyncResponse.ContinueFlag)
  return continueflag_;
}
void SnsSyncResponse::set_continueflag(::google::protobuf::uint32 value) {
  set_has_continueflag();
  continueflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsSyncResponse.ContinueFlag)
}

// required .micromsg.SKBuiltinBuffer_t KeyBuf = 4;
bool SnsSyncResponse::has_keybuf() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SnsSyncResponse::set_has_keybuf() {
  _has_bits_[0] |= 0x00000004u;
}
void SnsSyncResponse::clear_has_keybuf() {
  _has_bits_[0] &= ~0x00000004u;
}
void SnsSyncResponse::clear_keybuf() {
  if (keybuf_ != NULL) keybuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_keybuf();
}
const ::micromsg::SKBuiltinBuffer_t& SnsSyncResponse::keybuf() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsSyncResponse.KeyBuf)
  return keybuf_ != NULL ? *keybuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* SnsSyncResponse::mutable_keybuf() {
  set_has_keybuf();
  if (keybuf_ == NULL) {
    keybuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsSyncResponse.KeyBuf)
  return keybuf_;
}
::micromsg::SKBuiltinBuffer_t* SnsSyncResponse::release_keybuf() {
  // @@protoc_insertion_point(field_release:micromsg.SnsSyncResponse.KeyBuf)
  clear_has_keybuf();
  ::micromsg::SKBuiltinBuffer_t* temp = keybuf_;
  keybuf_ = NULL;
  return temp;
}
void SnsSyncResponse::set_allocated_keybuf(::micromsg::SKBuiltinBuffer_t* keybuf) {
  delete keybuf_;
  keybuf_ = keybuf;
  if (keybuf) {
    set_has_keybuf();
  } else {
    clear_has_keybuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsSyncResponse.KeyBuf)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnsObjectOp::kIdFieldNumber;
const int SnsObjectOp::kOpTypeFieldNumber;
const int SnsObjectOp::kExtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnsObjectOp::SnsObjectOp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsns_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SnsObjectOp)
}
SnsObjectOp::SnsObjectOp(const SnsObjectOp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ext()) {
    ext_ = new ::micromsg::SKBuiltinBuffer_t(*from.ext_);
  } else {
    ext_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&optype_) -
    reinterpret_cast<char*>(&id_) + sizeof(optype_));
  // @@protoc_insertion_point(copy_constructor:micromsg.SnsObjectOp)
}

void SnsObjectOp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ext_, 0, reinterpret_cast<char*>(&optype_) -
    reinterpret_cast<char*>(&ext_) + sizeof(optype_));
}

SnsObjectOp::~SnsObjectOp() {
  // @@protoc_insertion_point(destructor:micromsg.SnsObjectOp)
  SharedDtor();
}

void SnsObjectOp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete ext_;
  }
}

void SnsObjectOp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnsObjectOp::descriptor() {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnsObjectOp& SnsObjectOp::default_instance() {
  protobuf_mmsns_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnsObjectOp* SnsObjectOp::New(::google::protobuf::Arena* arena) const {
  SnsObjectOp* n = new SnsObjectOp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnsObjectOp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SnsObjectOp)
  if (has_ext()) {
    GOOGLE_DCHECK(ext_ != NULL);
    ext_->::micromsg::SKBuiltinBuffer_t::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&optype_) -
      reinterpret_cast<char*>(&id_) + sizeof(optype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnsObjectOp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SnsObjectOp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 Id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 OpType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_optype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &optype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t Ext = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ext()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SnsObjectOp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SnsObjectOp)
  return false;
#undef DO_
}

void SnsObjectOp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SnsObjectOp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 Id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required uint32 OpType = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->optype(), output);
  }

  // optional .micromsg.SKBuiltinBuffer_t Ext = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->ext_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SnsObjectOp)
}

::google::protobuf::uint8* SnsObjectOp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SnsObjectOp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 Id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required uint32 OpType = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->optype(), target);
  }

  // optional .micromsg.SKBuiltinBuffer_t Ext = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->ext_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SnsObjectOp)
  return target;
}

size_t SnsObjectOp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SnsObjectOp)
  size_t total_size = 0;

  if (has_id()) {
    // required uint64 Id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  if (has_optype()) {
    // required uint32 OpType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->optype());
  }

  return total_size;
}
size_t SnsObjectOp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SnsObjectOp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint64 Id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());

    // required uint32 OpType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->optype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .micromsg.SKBuiltinBuffer_t Ext = 3;
  if (has_ext()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ext_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnsObjectOp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SnsObjectOp)
  GOOGLE_DCHECK_NE(&from, this);
  const SnsObjectOp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnsObjectOp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SnsObjectOp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SnsObjectOp)
    MergeFrom(*source);
  }
}

void SnsObjectOp::MergeFrom(const SnsObjectOp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SnsObjectOp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_ext()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.ext());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      optype_ = from.optype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SnsObjectOp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SnsObjectOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnsObjectOp::CopyFrom(const SnsObjectOp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SnsObjectOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsObjectOp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (has_ext()) {
    if (!this->ext_->IsInitialized()) return false;
  }
  return true;
}

void SnsObjectOp::Swap(SnsObjectOp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnsObjectOp::InternalSwap(SnsObjectOp* other) {
  std::swap(ext_, other->ext_);
  std::swap(id_, other->id_);
  std::swap(optype_, other->optype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnsObjectOp::GetMetadata() const {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnsObjectOp

// required uint64 Id = 1;
bool SnsObjectOp::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SnsObjectOp::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void SnsObjectOp::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void SnsObjectOp::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
::google::protobuf::uint64 SnsObjectOp::id() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsObjectOp.Id)
  return id_;
}
void SnsObjectOp::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsObjectOp.Id)
}

// required uint32 OpType = 2;
bool SnsObjectOp::has_optype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SnsObjectOp::set_has_optype() {
  _has_bits_[0] |= 0x00000004u;
}
void SnsObjectOp::clear_has_optype() {
  _has_bits_[0] &= ~0x00000004u;
}
void SnsObjectOp::clear_optype() {
  optype_ = 0u;
  clear_has_optype();
}
::google::protobuf::uint32 SnsObjectOp::optype() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsObjectOp.OpType)
  return optype_;
}
void SnsObjectOp::set_optype(::google::protobuf::uint32 value) {
  set_has_optype();
  optype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsObjectOp.OpType)
}

// optional .micromsg.SKBuiltinBuffer_t Ext = 3;
bool SnsObjectOp::has_ext() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnsObjectOp::set_has_ext() {
  _has_bits_[0] |= 0x00000001u;
}
void SnsObjectOp::clear_has_ext() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnsObjectOp::clear_ext() {
  if (ext_ != NULL) ext_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_ext();
}
const ::micromsg::SKBuiltinBuffer_t& SnsObjectOp::ext() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsObjectOp.Ext)
  return ext_ != NULL ? *ext_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* SnsObjectOp::mutable_ext() {
  set_has_ext();
  if (ext_ == NULL) {
    ext_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsObjectOp.Ext)
  return ext_;
}
::micromsg::SKBuiltinBuffer_t* SnsObjectOp::release_ext() {
  // @@protoc_insertion_point(field_release:micromsg.SnsObjectOp.Ext)
  clear_has_ext();
  ::micromsg::SKBuiltinBuffer_t* temp = ext_;
  ext_ = NULL;
  return temp;
}
void SnsObjectOp::set_allocated_ext(::micromsg::SKBuiltinBuffer_t* ext) {
  delete ext_;
  ext_ = ext;
  if (ext) {
    set_has_ext();
  } else {
    clear_has_ext();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsObjectOp.Ext)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnsObjectOpDeleteComment::kCommentIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnsObjectOpDeleteComment::SnsObjectOpDeleteComment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsns_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SnsObjectOpDeleteComment)
}
SnsObjectOpDeleteComment::SnsObjectOpDeleteComment(const SnsObjectOpDeleteComment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  commentid_ = from.commentid_;
  // @@protoc_insertion_point(copy_constructor:micromsg.SnsObjectOpDeleteComment)
}

void SnsObjectOpDeleteComment::SharedCtor() {
  _cached_size_ = 0;
  commentid_ = 0;
}

SnsObjectOpDeleteComment::~SnsObjectOpDeleteComment() {
  // @@protoc_insertion_point(destructor:micromsg.SnsObjectOpDeleteComment)
  SharedDtor();
}

void SnsObjectOpDeleteComment::SharedDtor() {
}

void SnsObjectOpDeleteComment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnsObjectOpDeleteComment::descriptor() {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnsObjectOpDeleteComment& SnsObjectOpDeleteComment::default_instance() {
  protobuf_mmsns_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnsObjectOpDeleteComment* SnsObjectOpDeleteComment::New(::google::protobuf::Arena* arena) const {
  SnsObjectOpDeleteComment* n = new SnsObjectOpDeleteComment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnsObjectOpDeleteComment::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SnsObjectOpDeleteComment)
  commentid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnsObjectOpDeleteComment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SnsObjectOpDeleteComment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CommentId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_commentid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &commentid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SnsObjectOpDeleteComment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SnsObjectOpDeleteComment)
  return false;
#undef DO_
}

void SnsObjectOpDeleteComment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SnsObjectOpDeleteComment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 CommentId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->commentid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SnsObjectOpDeleteComment)
}

::google::protobuf::uint8* SnsObjectOpDeleteComment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SnsObjectOpDeleteComment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 CommentId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->commentid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SnsObjectOpDeleteComment)
  return target;
}

size_t SnsObjectOpDeleteComment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SnsObjectOpDeleteComment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required int32 CommentId = 1;
  if (has_commentid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->commentid());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnsObjectOpDeleteComment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SnsObjectOpDeleteComment)
  GOOGLE_DCHECK_NE(&from, this);
  const SnsObjectOpDeleteComment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnsObjectOpDeleteComment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SnsObjectOpDeleteComment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SnsObjectOpDeleteComment)
    MergeFrom(*source);
  }
}

void SnsObjectOpDeleteComment::MergeFrom(const SnsObjectOpDeleteComment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SnsObjectOpDeleteComment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_commentid()) {
    set_commentid(from.commentid());
  }
}

void SnsObjectOpDeleteComment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SnsObjectOpDeleteComment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnsObjectOpDeleteComment::CopyFrom(const SnsObjectOpDeleteComment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SnsObjectOpDeleteComment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsObjectOpDeleteComment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SnsObjectOpDeleteComment::Swap(SnsObjectOpDeleteComment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnsObjectOpDeleteComment::InternalSwap(SnsObjectOpDeleteComment* other) {
  std::swap(commentid_, other->commentid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnsObjectOpDeleteComment::GetMetadata() const {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnsObjectOpDeleteComment

// required int32 CommentId = 1;
bool SnsObjectOpDeleteComment::has_commentid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnsObjectOpDeleteComment::set_has_commentid() {
  _has_bits_[0] |= 0x00000001u;
}
void SnsObjectOpDeleteComment::clear_has_commentid() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnsObjectOpDeleteComment::clear_commentid() {
  commentid_ = 0;
  clear_has_commentid();
}
::google::protobuf::int32 SnsObjectOpDeleteComment::commentid() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsObjectOpDeleteComment.CommentId)
  return commentid_;
}
void SnsObjectOpDeleteComment::set_commentid(::google::protobuf::int32 value) {
  set_has_commentid();
  commentid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsObjectOpDeleteComment.CommentId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnsADObjectOpDeleteComment::kCommentIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnsADObjectOpDeleteComment::SnsADObjectOpDeleteComment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsns_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SnsADObjectOpDeleteComment)
}
SnsADObjectOpDeleteComment::SnsADObjectOpDeleteComment(const SnsADObjectOpDeleteComment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  commentid_ = from.commentid_;
  // @@protoc_insertion_point(copy_constructor:micromsg.SnsADObjectOpDeleteComment)
}

void SnsADObjectOpDeleteComment::SharedCtor() {
  _cached_size_ = 0;
  commentid_ = GOOGLE_ULONGLONG(0);
}

SnsADObjectOpDeleteComment::~SnsADObjectOpDeleteComment() {
  // @@protoc_insertion_point(destructor:micromsg.SnsADObjectOpDeleteComment)
  SharedDtor();
}

void SnsADObjectOpDeleteComment::SharedDtor() {
}

void SnsADObjectOpDeleteComment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnsADObjectOpDeleteComment::descriptor() {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnsADObjectOpDeleteComment& SnsADObjectOpDeleteComment::default_instance() {
  protobuf_mmsns_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnsADObjectOpDeleteComment* SnsADObjectOpDeleteComment::New(::google::protobuf::Arena* arena) const {
  SnsADObjectOpDeleteComment* n = new SnsADObjectOpDeleteComment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnsADObjectOpDeleteComment::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SnsADObjectOpDeleteComment)
  commentid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnsADObjectOpDeleteComment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SnsADObjectOpDeleteComment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 CommentId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_commentid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commentid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SnsADObjectOpDeleteComment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SnsADObjectOpDeleteComment)
  return false;
#undef DO_
}

void SnsADObjectOpDeleteComment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SnsADObjectOpDeleteComment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 CommentId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->commentid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SnsADObjectOpDeleteComment)
}

::google::protobuf::uint8* SnsADObjectOpDeleteComment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SnsADObjectOpDeleteComment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 CommentId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->commentid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SnsADObjectOpDeleteComment)
  return target;
}

size_t SnsADObjectOpDeleteComment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SnsADObjectOpDeleteComment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint64 CommentId = 1;
  if (has_commentid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->commentid());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnsADObjectOpDeleteComment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SnsADObjectOpDeleteComment)
  GOOGLE_DCHECK_NE(&from, this);
  const SnsADObjectOpDeleteComment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnsADObjectOpDeleteComment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SnsADObjectOpDeleteComment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SnsADObjectOpDeleteComment)
    MergeFrom(*source);
  }
}

void SnsADObjectOpDeleteComment::MergeFrom(const SnsADObjectOpDeleteComment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SnsADObjectOpDeleteComment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_commentid()) {
    set_commentid(from.commentid());
  }
}

void SnsADObjectOpDeleteComment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SnsADObjectOpDeleteComment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnsADObjectOpDeleteComment::CopyFrom(const SnsADObjectOpDeleteComment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SnsADObjectOpDeleteComment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsADObjectOpDeleteComment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SnsADObjectOpDeleteComment::Swap(SnsADObjectOpDeleteComment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnsADObjectOpDeleteComment::InternalSwap(SnsADObjectOpDeleteComment* other) {
  std::swap(commentid_, other->commentid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnsADObjectOpDeleteComment::GetMetadata() const {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnsADObjectOpDeleteComment

// required uint64 CommentId = 1;
bool SnsADObjectOpDeleteComment::has_commentid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnsADObjectOpDeleteComment::set_has_commentid() {
  _has_bits_[0] |= 0x00000001u;
}
void SnsADObjectOpDeleteComment::clear_has_commentid() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnsADObjectOpDeleteComment::clear_commentid() {
  commentid_ = GOOGLE_ULONGLONG(0);
  clear_has_commentid();
}
::google::protobuf::uint64 SnsADObjectOpDeleteComment::commentid() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsADObjectOpDeleteComment.CommentId)
  return commentid_;
}
void SnsADObjectOpDeleteComment::set_commentid(::google::protobuf::uint64 value) {
  set_has_commentid();
  commentid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsADObjectOpDeleteComment.CommentId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnsObjectOpRequest::kBaseRequestFieldNumber;
const int SnsObjectOpRequest::kOpCountFieldNumber;
const int SnsObjectOpRequest::kOpListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnsObjectOpRequest::SnsObjectOpRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsns_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SnsObjectOpRequest)
}
SnsObjectOpRequest::SnsObjectOpRequest(const SnsObjectOpRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      oplist_(from.oplist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  opcount_ = from.opcount_;
  // @@protoc_insertion_point(copy_constructor:micromsg.SnsObjectOpRequest)
}

void SnsObjectOpRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&opcount_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(opcount_));
}

SnsObjectOpRequest::~SnsObjectOpRequest() {
  // @@protoc_insertion_point(destructor:micromsg.SnsObjectOpRequest)
  SharedDtor();
}

void SnsObjectOpRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void SnsObjectOpRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnsObjectOpRequest::descriptor() {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnsObjectOpRequest& SnsObjectOpRequest::default_instance() {
  protobuf_mmsns_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnsObjectOpRequest* SnsObjectOpRequest::New(::google::protobuf::Arena* arena) const {
  SnsObjectOpRequest* n = new SnsObjectOpRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnsObjectOpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SnsObjectOpRequest)
  oplist_.Clear();
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  opcount_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnsObjectOpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SnsObjectOpRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 OpCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_opcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.SnsObjectOp OpList = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_oplist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SnsObjectOpRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SnsObjectOpRequest)
  return false;
#undef DO_
}

void SnsObjectOpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SnsObjectOpRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 OpCount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->opcount(), output);
  }

  // repeated .micromsg.SnsObjectOp OpList = 3;
  for (unsigned int i = 0, n = this->oplist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->oplist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SnsObjectOpRequest)
}

::google::protobuf::uint8* SnsObjectOpRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SnsObjectOpRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 OpCount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->opcount(), target);
  }

  // repeated .micromsg.SnsObjectOp OpList = 3;
  for (unsigned int i = 0, n = this->oplist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->oplist(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SnsObjectOpRequest)
  return target;
}

size_t SnsObjectOpRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SnsObjectOpRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_opcount()) {
    // required uint32 OpCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcount());
  }

  return total_size;
}
size_t SnsObjectOpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SnsObjectOpRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 OpCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.SnsObjectOp OpList = 3;
  {
    unsigned int count = this->oplist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oplist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnsObjectOpRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SnsObjectOpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SnsObjectOpRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnsObjectOpRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SnsObjectOpRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SnsObjectOpRequest)
    MergeFrom(*source);
  }
}

void SnsObjectOpRequest::MergeFrom(const SnsObjectOpRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SnsObjectOpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  oplist_.MergeFrom(from.oplist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      opcount_ = from.opcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SnsObjectOpRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SnsObjectOpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnsObjectOpRequest::CopyFrom(const SnsObjectOpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SnsObjectOpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsObjectOpRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->oplist())) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void SnsObjectOpRequest::Swap(SnsObjectOpRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnsObjectOpRequest::InternalSwap(SnsObjectOpRequest* other) {
  oplist_.InternalSwap(&other->oplist_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(opcount_, other->opcount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnsObjectOpRequest::GetMetadata() const {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnsObjectOpRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool SnsObjectOpRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnsObjectOpRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void SnsObjectOpRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnsObjectOpRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& SnsObjectOpRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsObjectOpRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* SnsObjectOpRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsObjectOpRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* SnsObjectOpRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.SnsObjectOpRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void SnsObjectOpRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsObjectOpRequest.BaseRequest)
}

// required uint32 OpCount = 2;
bool SnsObjectOpRequest::has_opcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SnsObjectOpRequest::set_has_opcount() {
  _has_bits_[0] |= 0x00000002u;
}
void SnsObjectOpRequest::clear_has_opcount() {
  _has_bits_[0] &= ~0x00000002u;
}
void SnsObjectOpRequest::clear_opcount() {
  opcount_ = 0u;
  clear_has_opcount();
}
::google::protobuf::uint32 SnsObjectOpRequest::opcount() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsObjectOpRequest.OpCount)
  return opcount_;
}
void SnsObjectOpRequest::set_opcount(::google::protobuf::uint32 value) {
  set_has_opcount();
  opcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsObjectOpRequest.OpCount)
}

// repeated .micromsg.SnsObjectOp OpList = 3;
int SnsObjectOpRequest::oplist_size() const {
  return oplist_.size();
}
void SnsObjectOpRequest::clear_oplist() {
  oplist_.Clear();
}
const ::micromsg::SnsObjectOp& SnsObjectOpRequest::oplist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.SnsObjectOpRequest.OpList)
  return oplist_.Get(index);
}
::micromsg::SnsObjectOp* SnsObjectOpRequest::mutable_oplist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.SnsObjectOpRequest.OpList)
  return oplist_.Mutable(index);
}
::micromsg::SnsObjectOp* SnsObjectOpRequest::add_oplist() {
  // @@protoc_insertion_point(field_add:micromsg.SnsObjectOpRequest.OpList)
  return oplist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::SnsObjectOp >*
SnsObjectOpRequest::mutable_oplist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.SnsObjectOpRequest.OpList)
  return &oplist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::SnsObjectOp >&
SnsObjectOpRequest::oplist() const {
  // @@protoc_insertion_point(field_list:micromsg.SnsObjectOpRequest.OpList)
  return oplist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnsObjectOpResponse::kBaseResponseFieldNumber;
const int SnsObjectOpResponse::kOpCountFieldNumber;
const int SnsObjectOpResponse::kOpRetListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnsObjectOpResponse::SnsObjectOpResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsns_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SnsObjectOpResponse)
}
SnsObjectOpResponse::SnsObjectOpResponse(const SnsObjectOpResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      opretlist_(from.opretlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  opcount_ = from.opcount_;
  // @@protoc_insertion_point(copy_constructor:micromsg.SnsObjectOpResponse)
}

void SnsObjectOpResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&opcount_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(opcount_));
}

SnsObjectOpResponse::~SnsObjectOpResponse() {
  // @@protoc_insertion_point(destructor:micromsg.SnsObjectOpResponse)
  SharedDtor();
}

void SnsObjectOpResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void SnsObjectOpResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnsObjectOpResponse::descriptor() {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnsObjectOpResponse& SnsObjectOpResponse::default_instance() {
  protobuf_mmsns_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnsObjectOpResponse* SnsObjectOpResponse::New(::google::protobuf::Arena* arena) const {
  SnsObjectOpResponse* n = new SnsObjectOpResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnsObjectOpResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SnsObjectOpResponse)
  opretlist_.Clear();
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  opcount_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnsObjectOpResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SnsObjectOpResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 OpCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_opcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 OpRetList = 3 [packed = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_opretlist())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_opretlist())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SnsObjectOpResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SnsObjectOpResponse)
  return false;
#undef DO_
}

void SnsObjectOpResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SnsObjectOpResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 OpCount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->opcount(), output);
  }

  // repeated int32 OpRetList = 3 [packed = true];
  if (this->opretlist_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_opretlist_cached_byte_size_);
  }
  for (int i = 0, n = this->opretlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->opretlist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SnsObjectOpResponse)
}

::google::protobuf::uint8* SnsObjectOpResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SnsObjectOpResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 OpCount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->opcount(), target);
  }

  // repeated int32 OpRetList = 3 [packed = true];
  if (this->opretlist_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _opretlist_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->opretlist_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SnsObjectOpResponse)
  return target;
}

size_t SnsObjectOpResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SnsObjectOpResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_opcount()) {
    // required uint32 OpCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcount());
  }

  return total_size;
}
size_t SnsObjectOpResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SnsObjectOpResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 OpCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 OpRetList = 3 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->opretlist_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _opretlist_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnsObjectOpResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SnsObjectOpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SnsObjectOpResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnsObjectOpResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SnsObjectOpResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SnsObjectOpResponse)
    MergeFrom(*source);
  }
}

void SnsObjectOpResponse::MergeFrom(const SnsObjectOpResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SnsObjectOpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  opretlist_.MergeFrom(from.opretlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      opcount_ = from.opcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SnsObjectOpResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SnsObjectOpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnsObjectOpResponse::CopyFrom(const SnsObjectOpResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SnsObjectOpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsObjectOpResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void SnsObjectOpResponse::Swap(SnsObjectOpResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnsObjectOpResponse::InternalSwap(SnsObjectOpResponse* other) {
  opretlist_.InternalSwap(&other->opretlist_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(opcount_, other->opcount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnsObjectOpResponse::GetMetadata() const {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnsObjectOpResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool SnsObjectOpResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnsObjectOpResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void SnsObjectOpResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnsObjectOpResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& SnsObjectOpResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsObjectOpResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* SnsObjectOpResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsObjectOpResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* SnsObjectOpResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.SnsObjectOpResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void SnsObjectOpResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsObjectOpResponse.BaseResponse)
}

// required uint32 OpCount = 2;
bool SnsObjectOpResponse::has_opcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SnsObjectOpResponse::set_has_opcount() {
  _has_bits_[0] |= 0x00000002u;
}
void SnsObjectOpResponse::clear_has_opcount() {
  _has_bits_[0] &= ~0x00000002u;
}
void SnsObjectOpResponse::clear_opcount() {
  opcount_ = 0u;
  clear_has_opcount();
}
::google::protobuf::uint32 SnsObjectOpResponse::opcount() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsObjectOpResponse.OpCount)
  return opcount_;
}
void SnsObjectOpResponse::set_opcount(::google::protobuf::uint32 value) {
  set_has_opcount();
  opcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsObjectOpResponse.OpCount)
}

// repeated int32 OpRetList = 3 [packed = true];
int SnsObjectOpResponse::opretlist_size() const {
  return opretlist_.size();
}
void SnsObjectOpResponse::clear_opretlist() {
  opretlist_.Clear();
}
::google::protobuf::int32 SnsObjectOpResponse::opretlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.SnsObjectOpResponse.OpRetList)
  return opretlist_.Get(index);
}
void SnsObjectOpResponse::set_opretlist(int index, ::google::protobuf::int32 value) {
  opretlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:micromsg.SnsObjectOpResponse.OpRetList)
}
void SnsObjectOpResponse::add_opretlist(::google::protobuf::int32 value) {
  opretlist_.Add(value);
  // @@protoc_insertion_point(field_add:micromsg.SnsObjectOpResponse.OpRetList)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SnsObjectOpResponse::opretlist() const {
  // @@protoc_insertion_point(field_list:micromsg.SnsObjectOpResponse.OpRetList)
  return opretlist_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SnsObjectOpResponse::mutable_opretlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.SnsObjectOpResponse.OpRetList)
  return &opretlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnsLbsRequest::kBaseRequestFieldNumber;
const int SnsLbsRequest::kOpCodeFieldNumber;
const int SnsLbsRequest::kLongitudeFieldNumber;
const int SnsLbsRequest::kLatitudeFieldNumber;
const int SnsLbsRequest::kPrecisionFieldNumber;
const int SnsLbsRequest::kMacAddrFieldNumber;
const int SnsLbsRequest::kCellIdFieldNumber;
const int SnsLbsRequest::kGPSSourceFieldNumber;
const int SnsLbsRequest::kSBTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnsLbsRequest::SnsLbsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsns_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SnsLbsRequest)
}
SnsLbsRequest::SnsLbsRequest(const SnsLbsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  macaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_macaddr()) {
    macaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.macaddr_);
  }
  cellid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cellid()) {
    cellid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cellid_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&opcode_, &from.opcode_,
    reinterpret_cast<char*>(&sbtime_) -
    reinterpret_cast<char*>(&opcode_) + sizeof(sbtime_));
  // @@protoc_insertion_point(copy_constructor:micromsg.SnsLbsRequest)
}

void SnsLbsRequest::SharedCtor() {
  _cached_size_ = 0;
  macaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cellid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&sbtime_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(sbtime_));
}

SnsLbsRequest::~SnsLbsRequest() {
  // @@protoc_insertion_point(destructor:micromsg.SnsLbsRequest)
  SharedDtor();
}

void SnsLbsRequest::SharedDtor() {
  macaddr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cellid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void SnsLbsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnsLbsRequest::descriptor() {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnsLbsRequest& SnsLbsRequest::default_instance() {
  protobuf_mmsns_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnsLbsRequest* SnsLbsRequest::New(::google::protobuf::Arena* arena) const {
  SnsLbsRequest* n = new SnsLbsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnsLbsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SnsLbsRequest)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_macaddr()) {
      GOOGLE_DCHECK(!macaddr_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*macaddr_.UnsafeRawStringPointer())->clear();
    }
    if (has_cellid()) {
      GOOGLE_DCHECK(!cellid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*cellid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&opcode_, 0, reinterpret_cast<char*>(&gpssource_) -
      reinterpret_cast<char*>(&opcode_) + sizeof(gpssource_));
  }
  sbtime_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnsLbsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SnsLbsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 OpCode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_opcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float Longitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float Latitude = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Precision = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_precision();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &precision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string MacAddr = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_macaddr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->macaddr().data(), this->macaddr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SnsLbsRequest.MacAddr");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string CellId = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cellid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cellid().data(), this->cellid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SnsLbsRequest.CellId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 GPSSource = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_gpssource();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gpssource_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 SBTime = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_sbtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sbtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SnsLbsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SnsLbsRequest)
  return false;
#undef DO_
}

void SnsLbsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SnsLbsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 OpCode = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->opcode(), output);
  }

  // required float Longitude = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->longitude(), output);
  }

  // required float Latitude = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->latitude(), output);
  }

  // required int32 Precision = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->precision(), output);
  }

  // optional string MacAddr = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->macaddr().data(), this->macaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsLbsRequest.MacAddr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->macaddr(), output);
  }

  // optional string CellId = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cellid().data(), this->cellid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsLbsRequest.CellId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->cellid(), output);
  }

  // required int32 GPSSource = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->gpssource(), output);
  }

  // required uint32 SBTime = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->sbtime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SnsLbsRequest)
}

::google::protobuf::uint8* SnsLbsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SnsLbsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 OpCode = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->opcode(), target);
  }

  // required float Longitude = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->longitude(), target);
  }

  // required float Latitude = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->latitude(), target);
  }

  // required int32 Precision = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->precision(), target);
  }

  // optional string MacAddr = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->macaddr().data(), this->macaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsLbsRequest.MacAddr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->macaddr(), target);
  }

  // optional string CellId = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cellid().data(), this->cellid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsLbsRequest.CellId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->cellid(), target);
  }

  // required int32 GPSSource = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->gpssource(), target);
  }

  // required uint32 SBTime = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->sbtime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SnsLbsRequest)
  return target;
}

size_t SnsLbsRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SnsLbsRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_opcode()) {
    // required uint32 OpCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());
  }

  if (has_longitude()) {
    // required float Longitude = 3;
    total_size += 1 + 4;
  }

  if (has_latitude()) {
    // required float Latitude = 4;
    total_size += 1 + 4;
  }

  if (has_precision()) {
    // required int32 Precision = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->precision());
  }

  if (has_gpssource()) {
    // required int32 GPSSource = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gpssource());
  }

  if (has_sbtime()) {
    // required uint32 SBTime = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sbtime());
  }

  return total_size;
}
size_t SnsLbsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SnsLbsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000001fc) ^ 0x000001fc) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 OpCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());

    // required float Longitude = 3;
    total_size += 1 + 4;

    // required float Latitude = 4;
    total_size += 1 + 4;

    // required int32 Precision = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->precision());

    // required int32 GPSSource = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gpssource());

    // required uint32 SBTime = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sbtime());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string MacAddr = 6;
    if (has_macaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->macaddr());
    }

    // optional string CellId = 7;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cellid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnsLbsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SnsLbsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SnsLbsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnsLbsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SnsLbsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SnsLbsRequest)
    MergeFrom(*source);
  }
}

void SnsLbsRequest::MergeFrom(const SnsLbsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SnsLbsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_macaddr();
      macaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.macaddr_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_cellid();
      cellid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cellid_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000008u) {
      opcode_ = from.opcode_;
    }
    if (cached_has_bits & 0x00000010u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000020u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000040u) {
      precision_ = from.precision_;
    }
    if (cached_has_bits & 0x00000080u) {
      gpssource_ = from.gpssource_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_sbtime(from.sbtime());
  }
}

void SnsLbsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SnsLbsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnsLbsRequest::CopyFrom(const SnsLbsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SnsLbsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsLbsRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001fc) != 0x000001fc) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void SnsLbsRequest::Swap(SnsLbsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnsLbsRequest::InternalSwap(SnsLbsRequest* other) {
  macaddr_.Swap(&other->macaddr_);
  cellid_.Swap(&other->cellid_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(opcode_, other->opcode_);
  std::swap(longitude_, other->longitude_);
  std::swap(latitude_, other->latitude_);
  std::swap(precision_, other->precision_);
  std::swap(gpssource_, other->gpssource_);
  std::swap(sbtime_, other->sbtime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnsLbsRequest::GetMetadata() const {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnsLbsRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool SnsLbsRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SnsLbsRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
void SnsLbsRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
void SnsLbsRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& SnsLbsRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsLbsRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* SnsLbsRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsLbsRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* SnsLbsRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.SnsLbsRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void SnsLbsRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsLbsRequest.BaseRequest)
}

// required uint32 OpCode = 2;
bool SnsLbsRequest::has_opcode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SnsLbsRequest::set_has_opcode() {
  _has_bits_[0] |= 0x00000008u;
}
void SnsLbsRequest::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000008u;
}
void SnsLbsRequest::clear_opcode() {
  opcode_ = 0u;
  clear_has_opcode();
}
::google::protobuf::uint32 SnsLbsRequest::opcode() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsLbsRequest.OpCode)
  return opcode_;
}
void SnsLbsRequest::set_opcode(::google::protobuf::uint32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsLbsRequest.OpCode)
}

// required float Longitude = 3;
bool SnsLbsRequest::has_longitude() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SnsLbsRequest::set_has_longitude() {
  _has_bits_[0] |= 0x00000010u;
}
void SnsLbsRequest::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000010u;
}
void SnsLbsRequest::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
float SnsLbsRequest::longitude() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsLbsRequest.Longitude)
  return longitude_;
}
void SnsLbsRequest::set_longitude(float value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsLbsRequest.Longitude)
}

// required float Latitude = 4;
bool SnsLbsRequest::has_latitude() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SnsLbsRequest::set_has_latitude() {
  _has_bits_[0] |= 0x00000020u;
}
void SnsLbsRequest::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000020u;
}
void SnsLbsRequest::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
float SnsLbsRequest::latitude() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsLbsRequest.Latitude)
  return latitude_;
}
void SnsLbsRequest::set_latitude(float value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsLbsRequest.Latitude)
}

// required int32 Precision = 5;
bool SnsLbsRequest::has_precision() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SnsLbsRequest::set_has_precision() {
  _has_bits_[0] |= 0x00000040u;
}
void SnsLbsRequest::clear_has_precision() {
  _has_bits_[0] &= ~0x00000040u;
}
void SnsLbsRequest::clear_precision() {
  precision_ = 0;
  clear_has_precision();
}
::google::protobuf::int32 SnsLbsRequest::precision() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsLbsRequest.Precision)
  return precision_;
}
void SnsLbsRequest::set_precision(::google::protobuf::int32 value) {
  set_has_precision();
  precision_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsLbsRequest.Precision)
}

// optional string MacAddr = 6;
bool SnsLbsRequest::has_macaddr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnsLbsRequest::set_has_macaddr() {
  _has_bits_[0] |= 0x00000001u;
}
void SnsLbsRequest::clear_has_macaddr() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnsLbsRequest::clear_macaddr() {
  macaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_macaddr();
}
const ::std::string& SnsLbsRequest::macaddr() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsLbsRequest.MacAddr)
  return macaddr_.GetNoArena();
}
void SnsLbsRequest::set_macaddr(const ::std::string& value) {
  set_has_macaddr();
  macaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SnsLbsRequest.MacAddr)
}
#if LANG_CXX11
void SnsLbsRequest::set_macaddr(::std::string&& value) {
  set_has_macaddr();
  macaddr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SnsLbsRequest.MacAddr)
}
#endif
void SnsLbsRequest::set_macaddr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_macaddr();
  macaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SnsLbsRequest.MacAddr)
}
void SnsLbsRequest::set_macaddr(const char* value, size_t size) {
  set_has_macaddr();
  macaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SnsLbsRequest.MacAddr)
}
::std::string* SnsLbsRequest::mutable_macaddr() {
  set_has_macaddr();
  // @@protoc_insertion_point(field_mutable:micromsg.SnsLbsRequest.MacAddr)
  return macaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnsLbsRequest::release_macaddr() {
  // @@protoc_insertion_point(field_release:micromsg.SnsLbsRequest.MacAddr)
  clear_has_macaddr();
  return macaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnsLbsRequest::set_allocated_macaddr(::std::string* macaddr) {
  if (macaddr != NULL) {
    set_has_macaddr();
  } else {
    clear_has_macaddr();
  }
  macaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), macaddr);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsLbsRequest.MacAddr)
}

// optional string CellId = 7;
bool SnsLbsRequest::has_cellid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SnsLbsRequest::set_has_cellid() {
  _has_bits_[0] |= 0x00000002u;
}
void SnsLbsRequest::clear_has_cellid() {
  _has_bits_[0] &= ~0x00000002u;
}
void SnsLbsRequest::clear_cellid() {
  cellid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cellid();
}
const ::std::string& SnsLbsRequest::cellid() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsLbsRequest.CellId)
  return cellid_.GetNoArena();
}
void SnsLbsRequest::set_cellid(const ::std::string& value) {
  set_has_cellid();
  cellid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SnsLbsRequest.CellId)
}
#if LANG_CXX11
void SnsLbsRequest::set_cellid(::std::string&& value) {
  set_has_cellid();
  cellid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SnsLbsRequest.CellId)
}
#endif
void SnsLbsRequest::set_cellid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cellid();
  cellid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SnsLbsRequest.CellId)
}
void SnsLbsRequest::set_cellid(const char* value, size_t size) {
  set_has_cellid();
  cellid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SnsLbsRequest.CellId)
}
::std::string* SnsLbsRequest::mutable_cellid() {
  set_has_cellid();
  // @@protoc_insertion_point(field_mutable:micromsg.SnsLbsRequest.CellId)
  return cellid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnsLbsRequest::release_cellid() {
  // @@protoc_insertion_point(field_release:micromsg.SnsLbsRequest.CellId)
  clear_has_cellid();
  return cellid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnsLbsRequest::set_allocated_cellid(::std::string* cellid) {
  if (cellid != NULL) {
    set_has_cellid();
  } else {
    clear_has_cellid();
  }
  cellid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cellid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsLbsRequest.CellId)
}

// required int32 GPSSource = 8;
bool SnsLbsRequest::has_gpssource() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SnsLbsRequest::set_has_gpssource() {
  _has_bits_[0] |= 0x00000080u;
}
void SnsLbsRequest::clear_has_gpssource() {
  _has_bits_[0] &= ~0x00000080u;
}
void SnsLbsRequest::clear_gpssource() {
  gpssource_ = 0;
  clear_has_gpssource();
}
::google::protobuf::int32 SnsLbsRequest::gpssource() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsLbsRequest.GPSSource)
  return gpssource_;
}
void SnsLbsRequest::set_gpssource(::google::protobuf::int32 value) {
  set_has_gpssource();
  gpssource_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsLbsRequest.GPSSource)
}

// required uint32 SBTime = 9;
bool SnsLbsRequest::has_sbtime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SnsLbsRequest::set_has_sbtime() {
  _has_bits_[0] |= 0x00000100u;
}
void SnsLbsRequest::clear_has_sbtime() {
  _has_bits_[0] &= ~0x00000100u;
}
void SnsLbsRequest::clear_sbtime() {
  sbtime_ = 0u;
  clear_has_sbtime();
}
::google::protobuf::uint32 SnsLbsRequest::sbtime() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsLbsRequest.SBTime)
  return sbtime_;
}
void SnsLbsRequest::set_sbtime(::google::protobuf::uint32 value) {
  set_has_sbtime();
  sbtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsLbsRequest.SBTime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnsLbsContactInfo::kUserNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnsLbsContactInfo::SnsLbsContactInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsns_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SnsLbsContactInfo)
}
SnsLbsContactInfo::SnsLbsContactInfo(const SnsLbsContactInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.SnsLbsContactInfo)
}

void SnsLbsContactInfo::SharedCtor() {
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SnsLbsContactInfo::~SnsLbsContactInfo() {
  // @@protoc_insertion_point(destructor:micromsg.SnsLbsContactInfo)
  SharedDtor();
}

void SnsLbsContactInfo::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SnsLbsContactInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnsLbsContactInfo::descriptor() {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnsLbsContactInfo& SnsLbsContactInfo::default_instance() {
  protobuf_mmsns_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnsLbsContactInfo* SnsLbsContactInfo::New(::google::protobuf::Arena* arena) const {
  SnsLbsContactInfo* n = new SnsLbsContactInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnsLbsContactInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SnsLbsContactInfo)
  if (has_username()) {
    GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*username_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnsLbsContactInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SnsLbsContactInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string UserName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SnsLbsContactInfo.UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SnsLbsContactInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SnsLbsContactInfo)
  return false;
#undef DO_
}

void SnsLbsContactInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SnsLbsContactInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string UserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsLbsContactInfo.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SnsLbsContactInfo)
}

::google::protobuf::uint8* SnsLbsContactInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SnsLbsContactInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string UserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsLbsContactInfo.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SnsLbsContactInfo)
  return target;
}

size_t SnsLbsContactInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SnsLbsContactInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string UserName = 1;
  if (has_username()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnsLbsContactInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SnsLbsContactInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SnsLbsContactInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnsLbsContactInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SnsLbsContactInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SnsLbsContactInfo)
    MergeFrom(*source);
  }
}

void SnsLbsContactInfo::MergeFrom(const SnsLbsContactInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SnsLbsContactInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_username()) {
    set_has_username();
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
}

void SnsLbsContactInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SnsLbsContactInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnsLbsContactInfo::CopyFrom(const SnsLbsContactInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SnsLbsContactInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsLbsContactInfo::IsInitialized() const {
  return true;
}

void SnsLbsContactInfo::Swap(SnsLbsContactInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnsLbsContactInfo::InternalSwap(SnsLbsContactInfo* other) {
  username_.Swap(&other->username_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnsLbsContactInfo::GetMetadata() const {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnsLbsContactInfo

// optional string UserName = 1;
bool SnsLbsContactInfo::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnsLbsContactInfo::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void SnsLbsContactInfo::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnsLbsContactInfo::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& SnsLbsContactInfo::username() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsLbsContactInfo.UserName)
  return username_.GetNoArena();
}
void SnsLbsContactInfo::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SnsLbsContactInfo.UserName)
}
#if LANG_CXX11
void SnsLbsContactInfo::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SnsLbsContactInfo.UserName)
}
#endif
void SnsLbsContactInfo::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SnsLbsContactInfo.UserName)
}
void SnsLbsContactInfo::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SnsLbsContactInfo.UserName)
}
::std::string* SnsLbsContactInfo::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.SnsLbsContactInfo.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnsLbsContactInfo::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.SnsLbsContactInfo.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnsLbsContactInfo::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsLbsContactInfo.UserName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnsLbsResponse::kBaseResponseFieldNumber;
const int SnsLbsResponse::kContactCountFieldNumber;
const int SnsLbsResponse::kContactListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnsLbsResponse::SnsLbsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsns_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SnsLbsResponse)
}
SnsLbsResponse::SnsLbsResponse(const SnsLbsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      contactlist_(from.contactlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  contactcount_ = from.contactcount_;
  // @@protoc_insertion_point(copy_constructor:micromsg.SnsLbsResponse)
}

void SnsLbsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&contactcount_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(contactcount_));
}

SnsLbsResponse::~SnsLbsResponse() {
  // @@protoc_insertion_point(destructor:micromsg.SnsLbsResponse)
  SharedDtor();
}

void SnsLbsResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void SnsLbsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnsLbsResponse::descriptor() {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnsLbsResponse& SnsLbsResponse::default_instance() {
  protobuf_mmsns_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnsLbsResponse* SnsLbsResponse::New(::google::protobuf::Arena* arena) const {
  SnsLbsResponse* n = new SnsLbsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnsLbsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SnsLbsResponse)
  contactlist_.Clear();
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  contactcount_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnsLbsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SnsLbsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ContactCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_contactcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contactcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.SnsLbsContactInfo ContactList = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contactlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SnsLbsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SnsLbsResponse)
  return false;
#undef DO_
}

void SnsLbsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SnsLbsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 ContactCount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->contactcount(), output);
  }

  // repeated .micromsg.SnsLbsContactInfo ContactList = 3;
  for (unsigned int i = 0, n = this->contactlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->contactlist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SnsLbsResponse)
}

::google::protobuf::uint8* SnsLbsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SnsLbsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 ContactCount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->contactcount(), target);
  }

  // repeated .micromsg.SnsLbsContactInfo ContactList = 3;
  for (unsigned int i = 0, n = this->contactlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->contactlist(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SnsLbsResponse)
  return target;
}

size_t SnsLbsResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SnsLbsResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_contactcount()) {
    // required uint32 ContactCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->contactcount());
  }

  return total_size;
}
size_t SnsLbsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SnsLbsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 ContactCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->contactcount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.SnsLbsContactInfo ContactList = 3;
  {
    unsigned int count = this->contactlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->contactlist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnsLbsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SnsLbsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SnsLbsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnsLbsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SnsLbsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SnsLbsResponse)
    MergeFrom(*source);
  }
}

void SnsLbsResponse::MergeFrom(const SnsLbsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SnsLbsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  contactlist_.MergeFrom(from.contactlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      contactcount_ = from.contactcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SnsLbsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SnsLbsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnsLbsResponse::CopyFrom(const SnsLbsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SnsLbsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsLbsResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void SnsLbsResponse::Swap(SnsLbsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnsLbsResponse::InternalSwap(SnsLbsResponse* other) {
  contactlist_.InternalSwap(&other->contactlist_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(contactcount_, other->contactcount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnsLbsResponse::GetMetadata() const {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnsLbsResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool SnsLbsResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnsLbsResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void SnsLbsResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnsLbsResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& SnsLbsResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsLbsResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* SnsLbsResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsLbsResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* SnsLbsResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.SnsLbsResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void SnsLbsResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsLbsResponse.BaseResponse)
}

// required uint32 ContactCount = 2;
bool SnsLbsResponse::has_contactcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SnsLbsResponse::set_has_contactcount() {
  _has_bits_[0] |= 0x00000002u;
}
void SnsLbsResponse::clear_has_contactcount() {
  _has_bits_[0] &= ~0x00000002u;
}
void SnsLbsResponse::clear_contactcount() {
  contactcount_ = 0u;
  clear_has_contactcount();
}
::google::protobuf::uint32 SnsLbsResponse::contactcount() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsLbsResponse.ContactCount)
  return contactcount_;
}
void SnsLbsResponse::set_contactcount(::google::protobuf::uint32 value) {
  set_has_contactcount();
  contactcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsLbsResponse.ContactCount)
}

// repeated .micromsg.SnsLbsContactInfo ContactList = 3;
int SnsLbsResponse::contactlist_size() const {
  return contactlist_.size();
}
void SnsLbsResponse::clear_contactlist() {
  contactlist_.Clear();
}
const ::micromsg::SnsLbsContactInfo& SnsLbsResponse::contactlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.SnsLbsResponse.ContactList)
  return contactlist_.Get(index);
}
::micromsg::SnsLbsContactInfo* SnsLbsResponse::mutable_contactlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.SnsLbsResponse.ContactList)
  return contactlist_.Mutable(index);
}
::micromsg::SnsLbsContactInfo* SnsLbsResponse::add_contactlist() {
  // @@protoc_insertion_point(field_add:micromsg.SnsLbsResponse.ContactList)
  return contactlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::SnsLbsContactInfo >*
SnsLbsResponse::mutable_contactlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.SnsLbsResponse.ContactList)
  return &contactlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::SnsLbsContactInfo >&
SnsLbsResponse::contactlist() const {
  // @@protoc_insertion_point(field_list:micromsg.SnsLbsResponse.ContactList)
  return contactlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnsGetCityRequest::kBaseRequestFieldNumber;
const int SnsGetCityRequest::kLongitudeFieldNumber;
const int SnsGetCityRequest::kLatitudeFieldNumber;
const int SnsGetCityRequest::kPrecisionFieldNumber;
const int SnsGetCityRequest::kMacAddrFieldNumber;
const int SnsGetCityRequest::kCellIdFieldNumber;
const int SnsGetCityRequest::kGPSSourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnsGetCityRequest::SnsGetCityRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsns_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SnsGetCityRequest)
}
SnsGetCityRequest::SnsGetCityRequest(const SnsGetCityRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  macaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_macaddr()) {
    macaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.macaddr_);
  }
  cellid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cellid()) {
    cellid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cellid_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&longitude_, &from.longitude_,
    reinterpret_cast<char*>(&gpssource_) -
    reinterpret_cast<char*>(&longitude_) + sizeof(gpssource_));
  // @@protoc_insertion_point(copy_constructor:micromsg.SnsGetCityRequest)
}

void SnsGetCityRequest::SharedCtor() {
  _cached_size_ = 0;
  macaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cellid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&gpssource_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(gpssource_));
}

SnsGetCityRequest::~SnsGetCityRequest() {
  // @@protoc_insertion_point(destructor:micromsg.SnsGetCityRequest)
  SharedDtor();
}

void SnsGetCityRequest::SharedDtor() {
  macaddr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cellid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void SnsGetCityRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnsGetCityRequest::descriptor() {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnsGetCityRequest& SnsGetCityRequest::default_instance() {
  protobuf_mmsns_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnsGetCityRequest* SnsGetCityRequest::New(::google::protobuf::Arena* arena) const {
  SnsGetCityRequest* n = new SnsGetCityRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnsGetCityRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SnsGetCityRequest)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_macaddr()) {
      GOOGLE_DCHECK(!macaddr_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*macaddr_.UnsafeRawStringPointer())->clear();
    }
    if (has_cellid()) {
      GOOGLE_DCHECK(!cellid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*cellid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 120u) {
    ::memset(&longitude_, 0, reinterpret_cast<char*>(&gpssource_) -
      reinterpret_cast<char*>(&longitude_) + sizeof(gpssource_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnsGetCityRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SnsGetCityRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Longitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Latitude = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Precision = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_precision();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &precision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string MacAddr = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_macaddr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->macaddr().data(), this->macaddr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SnsGetCityRequest.MacAddr");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string CellId = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cellid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cellid().data(), this->cellid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SnsGetCityRequest.CellId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 GPSSource = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_gpssource();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gpssource_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SnsGetCityRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SnsGetCityRequest)
  return false;
#undef DO_
}

void SnsGetCityRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SnsGetCityRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required int32 Longitude = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->longitude(), output);
  }

  // required int32 Latitude = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->latitude(), output);
  }

  // required int32 Precision = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->precision(), output);
  }

  // optional string MacAddr = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->macaddr().data(), this->macaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsGetCityRequest.MacAddr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->macaddr(), output);
  }

  // optional string CellId = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cellid().data(), this->cellid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsGetCityRequest.CellId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->cellid(), output);
  }

  // required int32 GPSSource = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->gpssource(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SnsGetCityRequest)
}

::google::protobuf::uint8* SnsGetCityRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SnsGetCityRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required int32 Longitude = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->longitude(), target);
  }

  // required int32 Latitude = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->latitude(), target);
  }

  // required int32 Precision = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->precision(), target);
  }

  // optional string MacAddr = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->macaddr().data(), this->macaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsGetCityRequest.MacAddr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->macaddr(), target);
  }

  // optional string CellId = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cellid().data(), this->cellid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsGetCityRequest.CellId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->cellid(), target);
  }

  // required int32 GPSSource = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->gpssource(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SnsGetCityRequest)
  return target;
}

size_t SnsGetCityRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SnsGetCityRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_longitude()) {
    // required int32 Longitude = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->longitude());
  }

  if (has_latitude()) {
    // required int32 Latitude = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->latitude());
  }

  if (has_precision()) {
    // required int32 Precision = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->precision());
  }

  if (has_gpssource()) {
    // required int32 GPSSource = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gpssource());
  }

  return total_size;
}
size_t SnsGetCityRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SnsGetCityRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007c) ^ 0x0000007c) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required int32 Longitude = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->longitude());

    // required int32 Latitude = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->latitude());

    // required int32 Precision = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->precision());

    // required int32 GPSSource = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gpssource());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string MacAddr = 6;
    if (has_macaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->macaddr());
    }

    // optional string CellId = 7;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cellid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnsGetCityRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SnsGetCityRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SnsGetCityRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnsGetCityRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SnsGetCityRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SnsGetCityRequest)
    MergeFrom(*source);
  }
}

void SnsGetCityRequest::MergeFrom(const SnsGetCityRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SnsGetCityRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_macaddr();
      macaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.macaddr_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_cellid();
      cellid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cellid_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000008u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000010u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000020u) {
      precision_ = from.precision_;
    }
    if (cached_has_bits & 0x00000040u) {
      gpssource_ = from.gpssource_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SnsGetCityRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SnsGetCityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnsGetCityRequest::CopyFrom(const SnsGetCityRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SnsGetCityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsGetCityRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007c) != 0x0000007c) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void SnsGetCityRequest::Swap(SnsGetCityRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnsGetCityRequest::InternalSwap(SnsGetCityRequest* other) {
  macaddr_.Swap(&other->macaddr_);
  cellid_.Swap(&other->cellid_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(longitude_, other->longitude_);
  std::swap(latitude_, other->latitude_);
  std::swap(precision_, other->precision_);
  std::swap(gpssource_, other->gpssource_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnsGetCityRequest::GetMetadata() const {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnsGetCityRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool SnsGetCityRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SnsGetCityRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
void SnsGetCityRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
void SnsGetCityRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& SnsGetCityRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsGetCityRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* SnsGetCityRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsGetCityRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* SnsGetCityRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.SnsGetCityRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void SnsGetCityRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsGetCityRequest.BaseRequest)
}

// required int32 Longitude = 3;
bool SnsGetCityRequest::has_longitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SnsGetCityRequest::set_has_longitude() {
  _has_bits_[0] |= 0x00000008u;
}
void SnsGetCityRequest::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000008u;
}
void SnsGetCityRequest::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
::google::protobuf::int32 SnsGetCityRequest::longitude() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsGetCityRequest.Longitude)
  return longitude_;
}
void SnsGetCityRequest::set_longitude(::google::protobuf::int32 value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsGetCityRequest.Longitude)
}

// required int32 Latitude = 4;
bool SnsGetCityRequest::has_latitude() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SnsGetCityRequest::set_has_latitude() {
  _has_bits_[0] |= 0x00000010u;
}
void SnsGetCityRequest::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000010u;
}
void SnsGetCityRequest::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
::google::protobuf::int32 SnsGetCityRequest::latitude() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsGetCityRequest.Latitude)
  return latitude_;
}
void SnsGetCityRequest::set_latitude(::google::protobuf::int32 value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsGetCityRequest.Latitude)
}

// required int32 Precision = 5;
bool SnsGetCityRequest::has_precision() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SnsGetCityRequest::set_has_precision() {
  _has_bits_[0] |= 0x00000020u;
}
void SnsGetCityRequest::clear_has_precision() {
  _has_bits_[0] &= ~0x00000020u;
}
void SnsGetCityRequest::clear_precision() {
  precision_ = 0;
  clear_has_precision();
}
::google::protobuf::int32 SnsGetCityRequest::precision() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsGetCityRequest.Precision)
  return precision_;
}
void SnsGetCityRequest::set_precision(::google::protobuf::int32 value) {
  set_has_precision();
  precision_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsGetCityRequest.Precision)
}

// optional string MacAddr = 6;
bool SnsGetCityRequest::has_macaddr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnsGetCityRequest::set_has_macaddr() {
  _has_bits_[0] |= 0x00000001u;
}
void SnsGetCityRequest::clear_has_macaddr() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnsGetCityRequest::clear_macaddr() {
  macaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_macaddr();
}
const ::std::string& SnsGetCityRequest::macaddr() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsGetCityRequest.MacAddr)
  return macaddr_.GetNoArena();
}
void SnsGetCityRequest::set_macaddr(const ::std::string& value) {
  set_has_macaddr();
  macaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SnsGetCityRequest.MacAddr)
}
#if LANG_CXX11
void SnsGetCityRequest::set_macaddr(::std::string&& value) {
  set_has_macaddr();
  macaddr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SnsGetCityRequest.MacAddr)
}
#endif
void SnsGetCityRequest::set_macaddr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_macaddr();
  macaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SnsGetCityRequest.MacAddr)
}
void SnsGetCityRequest::set_macaddr(const char* value, size_t size) {
  set_has_macaddr();
  macaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SnsGetCityRequest.MacAddr)
}
::std::string* SnsGetCityRequest::mutable_macaddr() {
  set_has_macaddr();
  // @@protoc_insertion_point(field_mutable:micromsg.SnsGetCityRequest.MacAddr)
  return macaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnsGetCityRequest::release_macaddr() {
  // @@protoc_insertion_point(field_release:micromsg.SnsGetCityRequest.MacAddr)
  clear_has_macaddr();
  return macaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnsGetCityRequest::set_allocated_macaddr(::std::string* macaddr) {
  if (macaddr != NULL) {
    set_has_macaddr();
  } else {
    clear_has_macaddr();
  }
  macaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), macaddr);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsGetCityRequest.MacAddr)
}

// optional string CellId = 7;
bool SnsGetCityRequest::has_cellid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SnsGetCityRequest::set_has_cellid() {
  _has_bits_[0] |= 0x00000002u;
}
void SnsGetCityRequest::clear_has_cellid() {
  _has_bits_[0] &= ~0x00000002u;
}
void SnsGetCityRequest::clear_cellid() {
  cellid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cellid();
}
const ::std::string& SnsGetCityRequest::cellid() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsGetCityRequest.CellId)
  return cellid_.GetNoArena();
}
void SnsGetCityRequest::set_cellid(const ::std::string& value) {
  set_has_cellid();
  cellid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SnsGetCityRequest.CellId)
}
#if LANG_CXX11
void SnsGetCityRequest::set_cellid(::std::string&& value) {
  set_has_cellid();
  cellid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SnsGetCityRequest.CellId)
}
#endif
void SnsGetCityRequest::set_cellid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cellid();
  cellid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SnsGetCityRequest.CellId)
}
void SnsGetCityRequest::set_cellid(const char* value, size_t size) {
  set_has_cellid();
  cellid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SnsGetCityRequest.CellId)
}
::std::string* SnsGetCityRequest::mutable_cellid() {
  set_has_cellid();
  // @@protoc_insertion_point(field_mutable:micromsg.SnsGetCityRequest.CellId)
  return cellid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnsGetCityRequest::release_cellid() {
  // @@protoc_insertion_point(field_release:micromsg.SnsGetCityRequest.CellId)
  clear_has_cellid();
  return cellid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnsGetCityRequest::set_allocated_cellid(::std::string* cellid) {
  if (cellid != NULL) {
    set_has_cellid();
  } else {
    clear_has_cellid();
  }
  cellid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cellid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsGetCityRequest.CellId)
}

// required int32 GPSSource = 8;
bool SnsGetCityRequest::has_gpssource() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SnsGetCityRequest::set_has_gpssource() {
  _has_bits_[0] |= 0x00000040u;
}
void SnsGetCityRequest::clear_has_gpssource() {
  _has_bits_[0] &= ~0x00000040u;
}
void SnsGetCityRequest::clear_gpssource() {
  gpssource_ = 0;
  clear_has_gpssource();
}
::google::protobuf::int32 SnsGetCityRequest::gpssource() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsGetCityRequest.GPSSource)
  return gpssource_;
}
void SnsGetCityRequest::set_gpssource(::google::protobuf::int32 value) {
  set_has_gpssource();
  gpssource_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsGetCityRequest.GPSSource)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnsGetCityResponse::kBaseResponseFieldNumber;
const int SnsGetCityResponse::kLongitudeFieldNumber;
const int SnsGetCityResponse::kLatitudeFieldNumber;
const int SnsGetCityResponse::kCountryFieldNumber;
const int SnsGetCityResponse::kCityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnsGetCityResponse::SnsGetCityResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsns_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SnsGetCityResponse)
}
SnsGetCityResponse::SnsGetCityResponse(const SnsGetCityResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_country()) {
    country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  city_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_city()) {
    city_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.city_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  ::memcpy(&longitude_, &from.longitude_,
    reinterpret_cast<char*>(&latitude_) -
    reinterpret_cast<char*>(&longitude_) + sizeof(latitude_));
  // @@protoc_insertion_point(copy_constructor:micromsg.SnsGetCityResponse)
}

void SnsGetCityResponse::SharedCtor() {
  _cached_size_ = 0;
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&latitude_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(latitude_));
}

SnsGetCityResponse::~SnsGetCityResponse() {
  // @@protoc_insertion_point(destructor:micromsg.SnsGetCityResponse)
  SharedDtor();
}

void SnsGetCityResponse::SharedDtor() {
  country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void SnsGetCityResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnsGetCityResponse::descriptor() {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnsGetCityResponse& SnsGetCityResponse::default_instance() {
  protobuf_mmsns_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnsGetCityResponse* SnsGetCityResponse::New(::google::protobuf::Arena* arena) const {
  SnsGetCityResponse* n = new SnsGetCityResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnsGetCityResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SnsGetCityResponse)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_country()) {
      GOOGLE_DCHECK(!country_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*country_.UnsafeRawStringPointer())->clear();
    }
    if (has_city()) {
      GOOGLE_DCHECK(!city_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*city_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&longitude_, 0, reinterpret_cast<char*>(&latitude_) -
      reinterpret_cast<char*>(&longitude_) + sizeof(latitude_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnsGetCityResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SnsGetCityResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Longitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Latitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Country = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SnsGetCityResponse.Country");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string City = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SnsGetCityResponse.City");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SnsGetCityResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SnsGetCityResponse)
  return false;
#undef DO_
}

void SnsGetCityResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SnsGetCityResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required int32 Longitude = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->longitude(), output);
  }

  // required int32 Latitude = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->latitude(), output);
  }

  // optional string Country = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsGetCityResponse.Country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->country(), output);
  }

  // optional string City = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsGetCityResponse.City");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->city(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SnsGetCityResponse)
}

::google::protobuf::uint8* SnsGetCityResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SnsGetCityResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required int32 Longitude = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->longitude(), target);
  }

  // required int32 Latitude = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->latitude(), target);
  }

  // optional string Country = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsGetCityResponse.Country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->country(), target);
  }

  // optional string City = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsGetCityResponse.City");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->city(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SnsGetCityResponse)
  return target;
}

size_t SnsGetCityResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SnsGetCityResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_longitude()) {
    // required int32 Longitude = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->longitude());
  }

  if (has_latitude()) {
    // required int32 Latitude = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->latitude());
  }

  return total_size;
}
size_t SnsGetCityResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SnsGetCityResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001c) ^ 0x0000001c) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required int32 Longitude = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->longitude());

    // required int32 Latitude = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->latitude());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string Country = 4;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

    // optional string City = 5;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnsGetCityResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SnsGetCityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SnsGetCityResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnsGetCityResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SnsGetCityResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SnsGetCityResponse)
    MergeFrom(*source);
  }
}

void SnsGetCityResponse::MergeFrom(const SnsGetCityResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SnsGetCityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_country();
      country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_city();
      city_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.city_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000008u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000010u) {
      latitude_ = from.latitude_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SnsGetCityResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SnsGetCityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnsGetCityResponse::CopyFrom(const SnsGetCityResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SnsGetCityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsGetCityResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001c) != 0x0000001c) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void SnsGetCityResponse::Swap(SnsGetCityResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnsGetCityResponse::InternalSwap(SnsGetCityResponse* other) {
  country_.Swap(&other->country_);
  city_.Swap(&other->city_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(longitude_, other->longitude_);
  std::swap(latitude_, other->latitude_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnsGetCityResponse::GetMetadata() const {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnsGetCityResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool SnsGetCityResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SnsGetCityResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000004u;
}
void SnsGetCityResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000004u;
}
void SnsGetCityResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& SnsGetCityResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsGetCityResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* SnsGetCityResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsGetCityResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* SnsGetCityResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.SnsGetCityResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void SnsGetCityResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsGetCityResponse.BaseResponse)
}

// required int32 Longitude = 2;
bool SnsGetCityResponse::has_longitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SnsGetCityResponse::set_has_longitude() {
  _has_bits_[0] |= 0x00000008u;
}
void SnsGetCityResponse::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000008u;
}
void SnsGetCityResponse::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
::google::protobuf::int32 SnsGetCityResponse::longitude() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsGetCityResponse.Longitude)
  return longitude_;
}
void SnsGetCityResponse::set_longitude(::google::protobuf::int32 value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsGetCityResponse.Longitude)
}

// required int32 Latitude = 3;
bool SnsGetCityResponse::has_latitude() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SnsGetCityResponse::set_has_latitude() {
  _has_bits_[0] |= 0x00000010u;
}
void SnsGetCityResponse::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000010u;
}
void SnsGetCityResponse::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
::google::protobuf::int32 SnsGetCityResponse::latitude() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsGetCityResponse.Latitude)
  return latitude_;
}
void SnsGetCityResponse::set_latitude(::google::protobuf::int32 value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsGetCityResponse.Latitude)
}

// optional string Country = 4;
bool SnsGetCityResponse::has_country() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnsGetCityResponse::set_has_country() {
  _has_bits_[0] |= 0x00000001u;
}
void SnsGetCityResponse::clear_has_country() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnsGetCityResponse::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country();
}
const ::std::string& SnsGetCityResponse::country() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsGetCityResponse.Country)
  return country_.GetNoArena();
}
void SnsGetCityResponse::set_country(const ::std::string& value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SnsGetCityResponse.Country)
}
#if LANG_CXX11
void SnsGetCityResponse::set_country(::std::string&& value) {
  set_has_country();
  country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SnsGetCityResponse.Country)
}
#endif
void SnsGetCityResponse::set_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SnsGetCityResponse.Country)
}
void SnsGetCityResponse::set_country(const char* value, size_t size) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SnsGetCityResponse.Country)
}
::std::string* SnsGetCityResponse::mutable_country() {
  set_has_country();
  // @@protoc_insertion_point(field_mutable:micromsg.SnsGetCityResponse.Country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnsGetCityResponse::release_country() {
  // @@protoc_insertion_point(field_release:micromsg.SnsGetCityResponse.Country)
  clear_has_country();
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnsGetCityResponse::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    set_has_country();
  } else {
    clear_has_country();
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsGetCityResponse.Country)
}

// optional string City = 5;
bool SnsGetCityResponse::has_city() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SnsGetCityResponse::set_has_city() {
  _has_bits_[0] |= 0x00000002u;
}
void SnsGetCityResponse::clear_has_city() {
  _has_bits_[0] &= ~0x00000002u;
}
void SnsGetCityResponse::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_city();
}
const ::std::string& SnsGetCityResponse::city() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsGetCityResponse.City)
  return city_.GetNoArena();
}
void SnsGetCityResponse::set_city(const ::std::string& value) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SnsGetCityResponse.City)
}
#if LANG_CXX11
void SnsGetCityResponse::set_city(::std::string&& value) {
  set_has_city();
  city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SnsGetCityResponse.City)
}
#endif
void SnsGetCityResponse::set_city(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SnsGetCityResponse.City)
}
void SnsGetCityResponse::set_city(const char* value, size_t size) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SnsGetCityResponse.City)
}
::std::string* SnsGetCityResponse::mutable_city() {
  set_has_city();
  // @@protoc_insertion_point(field_mutable:micromsg.SnsGetCityResponse.City)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnsGetCityResponse::release_city() {
  // @@protoc_insertion_point(field_release:micromsg.SnsGetCityResponse.City)
  clear_has_city();
  return city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnsGetCityResponse::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    set_has_city();
  } else {
    clear_has_city();
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsGetCityResponse.City)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnsClassifyTimeLineRequest::kBaseRequestFieldNumber;
const int SnsClassifyTimeLineRequest::kFirstPageMd5FieldNumber;
const int SnsClassifyTimeLineRequest::kMaxIdFieldNumber;
const int SnsClassifyTimeLineRequest::kClassifyIdFieldNumber;
const int SnsClassifyTimeLineRequest::kClassifyTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnsClassifyTimeLineRequest::SnsClassifyTimeLineRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsns_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SnsClassifyTimeLineRequest)
}
SnsClassifyTimeLineRequest::SnsClassifyTimeLineRequest(const SnsClassifyTimeLineRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  firstpagemd5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_firstpagemd5()) {
    firstpagemd5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firstpagemd5_);
  }
  classifyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_classifyid()) {
    classifyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.classifyid_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&maxid_, &from.maxid_,
    reinterpret_cast<char*>(&classifytype_) -
    reinterpret_cast<char*>(&maxid_) + sizeof(classifytype_));
  // @@protoc_insertion_point(copy_constructor:micromsg.SnsClassifyTimeLineRequest)
}

void SnsClassifyTimeLineRequest::SharedCtor() {
  _cached_size_ = 0;
  firstpagemd5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  classifyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&classifytype_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(classifytype_));
}

SnsClassifyTimeLineRequest::~SnsClassifyTimeLineRequest() {
  // @@protoc_insertion_point(destructor:micromsg.SnsClassifyTimeLineRequest)
  SharedDtor();
}

void SnsClassifyTimeLineRequest::SharedDtor() {
  firstpagemd5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  classifyid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void SnsClassifyTimeLineRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnsClassifyTimeLineRequest::descriptor() {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnsClassifyTimeLineRequest& SnsClassifyTimeLineRequest::default_instance() {
  protobuf_mmsns_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnsClassifyTimeLineRequest* SnsClassifyTimeLineRequest::New(::google::protobuf::Arena* arena) const {
  SnsClassifyTimeLineRequest* n = new SnsClassifyTimeLineRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnsClassifyTimeLineRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SnsClassifyTimeLineRequest)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_firstpagemd5()) {
      GOOGLE_DCHECK(!firstpagemd5_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*firstpagemd5_.UnsafeRawStringPointer())->clear();
    }
    if (has_classifyid()) {
      GOOGLE_DCHECK(!classifyid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*classifyid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&maxid_, 0, reinterpret_cast<char*>(&classifytype_) -
      reinterpret_cast<char*>(&maxid_) + sizeof(classifytype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnsClassifyTimeLineRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SnsClassifyTimeLineRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FirstPageMd5 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firstpagemd5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->firstpagemd5().data(), this->firstpagemd5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SnsClassifyTimeLineRequest.FirstPageMd5");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 MaxId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_maxid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ClassifyId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_classifyid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->classifyid().data(), this->classifyid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SnsClassifyTimeLineRequest.ClassifyId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ClassifyType = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_classifytype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &classifytype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SnsClassifyTimeLineRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SnsClassifyTimeLineRequest)
  return false;
#undef DO_
}

void SnsClassifyTimeLineRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SnsClassifyTimeLineRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string FirstPageMd5 = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firstpagemd5().data(), this->firstpagemd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsClassifyTimeLineRequest.FirstPageMd5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->firstpagemd5(), output);
  }

  // required uint64 MaxId = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->maxid(), output);
  }

  // optional string ClassifyId = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->classifyid().data(), this->classifyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsClassifyTimeLineRequest.ClassifyId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->classifyid(), output);
  }

  // required uint32 ClassifyType = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->classifytype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SnsClassifyTimeLineRequest)
}

::google::protobuf::uint8* SnsClassifyTimeLineRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SnsClassifyTimeLineRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string FirstPageMd5 = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firstpagemd5().data(), this->firstpagemd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsClassifyTimeLineRequest.FirstPageMd5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->firstpagemd5(), target);
  }

  // required uint64 MaxId = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->maxid(), target);
  }

  // optional string ClassifyId = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->classifyid().data(), this->classifyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsClassifyTimeLineRequest.ClassifyId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->classifyid(), target);
  }

  // required uint32 ClassifyType = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->classifytype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SnsClassifyTimeLineRequest)
  return target;
}

size_t SnsClassifyTimeLineRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SnsClassifyTimeLineRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_maxid()) {
    // required uint64 MaxId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->maxid());
  }

  if (has_classifytype()) {
    // required uint32 ClassifyType = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->classifytype());
  }

  return total_size;
}
size_t SnsClassifyTimeLineRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SnsClassifyTimeLineRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001c) ^ 0x0000001c) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint64 MaxId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->maxid());

    // required uint32 ClassifyType = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->classifytype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string FirstPageMd5 = 2;
    if (has_firstpagemd5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->firstpagemd5());
    }

    // optional string ClassifyId = 4;
    if (has_classifyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->classifyid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnsClassifyTimeLineRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SnsClassifyTimeLineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SnsClassifyTimeLineRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnsClassifyTimeLineRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SnsClassifyTimeLineRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SnsClassifyTimeLineRequest)
    MergeFrom(*source);
  }
}

void SnsClassifyTimeLineRequest::MergeFrom(const SnsClassifyTimeLineRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SnsClassifyTimeLineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_firstpagemd5();
      firstpagemd5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firstpagemd5_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_classifyid();
      classifyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.classifyid_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000008u) {
      maxid_ = from.maxid_;
    }
    if (cached_has_bits & 0x00000010u) {
      classifytype_ = from.classifytype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SnsClassifyTimeLineRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SnsClassifyTimeLineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnsClassifyTimeLineRequest::CopyFrom(const SnsClassifyTimeLineRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SnsClassifyTimeLineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsClassifyTimeLineRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001c) != 0x0000001c) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void SnsClassifyTimeLineRequest::Swap(SnsClassifyTimeLineRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnsClassifyTimeLineRequest::InternalSwap(SnsClassifyTimeLineRequest* other) {
  firstpagemd5_.Swap(&other->firstpagemd5_);
  classifyid_.Swap(&other->classifyid_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(maxid_, other->maxid_);
  std::swap(classifytype_, other->classifytype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnsClassifyTimeLineRequest::GetMetadata() const {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnsClassifyTimeLineRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool SnsClassifyTimeLineRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SnsClassifyTimeLineRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
void SnsClassifyTimeLineRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
void SnsClassifyTimeLineRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& SnsClassifyTimeLineRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsClassifyTimeLineRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* SnsClassifyTimeLineRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsClassifyTimeLineRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* SnsClassifyTimeLineRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.SnsClassifyTimeLineRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void SnsClassifyTimeLineRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsClassifyTimeLineRequest.BaseRequest)
}

// optional string FirstPageMd5 = 2;
bool SnsClassifyTimeLineRequest::has_firstpagemd5() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnsClassifyTimeLineRequest::set_has_firstpagemd5() {
  _has_bits_[0] |= 0x00000001u;
}
void SnsClassifyTimeLineRequest::clear_has_firstpagemd5() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnsClassifyTimeLineRequest::clear_firstpagemd5() {
  firstpagemd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_firstpagemd5();
}
const ::std::string& SnsClassifyTimeLineRequest::firstpagemd5() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsClassifyTimeLineRequest.FirstPageMd5)
  return firstpagemd5_.GetNoArena();
}
void SnsClassifyTimeLineRequest::set_firstpagemd5(const ::std::string& value) {
  set_has_firstpagemd5();
  firstpagemd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SnsClassifyTimeLineRequest.FirstPageMd5)
}
#if LANG_CXX11
void SnsClassifyTimeLineRequest::set_firstpagemd5(::std::string&& value) {
  set_has_firstpagemd5();
  firstpagemd5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SnsClassifyTimeLineRequest.FirstPageMd5)
}
#endif
void SnsClassifyTimeLineRequest::set_firstpagemd5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_firstpagemd5();
  firstpagemd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SnsClassifyTimeLineRequest.FirstPageMd5)
}
void SnsClassifyTimeLineRequest::set_firstpagemd5(const char* value, size_t size) {
  set_has_firstpagemd5();
  firstpagemd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SnsClassifyTimeLineRequest.FirstPageMd5)
}
::std::string* SnsClassifyTimeLineRequest::mutable_firstpagemd5() {
  set_has_firstpagemd5();
  // @@protoc_insertion_point(field_mutable:micromsg.SnsClassifyTimeLineRequest.FirstPageMd5)
  return firstpagemd5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnsClassifyTimeLineRequest::release_firstpagemd5() {
  // @@protoc_insertion_point(field_release:micromsg.SnsClassifyTimeLineRequest.FirstPageMd5)
  clear_has_firstpagemd5();
  return firstpagemd5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnsClassifyTimeLineRequest::set_allocated_firstpagemd5(::std::string* firstpagemd5) {
  if (firstpagemd5 != NULL) {
    set_has_firstpagemd5();
  } else {
    clear_has_firstpagemd5();
  }
  firstpagemd5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), firstpagemd5);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsClassifyTimeLineRequest.FirstPageMd5)
}

// required uint64 MaxId = 3;
bool SnsClassifyTimeLineRequest::has_maxid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SnsClassifyTimeLineRequest::set_has_maxid() {
  _has_bits_[0] |= 0x00000008u;
}
void SnsClassifyTimeLineRequest::clear_has_maxid() {
  _has_bits_[0] &= ~0x00000008u;
}
void SnsClassifyTimeLineRequest::clear_maxid() {
  maxid_ = GOOGLE_ULONGLONG(0);
  clear_has_maxid();
}
::google::protobuf::uint64 SnsClassifyTimeLineRequest::maxid() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsClassifyTimeLineRequest.MaxId)
  return maxid_;
}
void SnsClassifyTimeLineRequest::set_maxid(::google::protobuf::uint64 value) {
  set_has_maxid();
  maxid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsClassifyTimeLineRequest.MaxId)
}

// optional string ClassifyId = 4;
bool SnsClassifyTimeLineRequest::has_classifyid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SnsClassifyTimeLineRequest::set_has_classifyid() {
  _has_bits_[0] |= 0x00000002u;
}
void SnsClassifyTimeLineRequest::clear_has_classifyid() {
  _has_bits_[0] &= ~0x00000002u;
}
void SnsClassifyTimeLineRequest::clear_classifyid() {
  classifyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_classifyid();
}
const ::std::string& SnsClassifyTimeLineRequest::classifyid() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsClassifyTimeLineRequest.ClassifyId)
  return classifyid_.GetNoArena();
}
void SnsClassifyTimeLineRequest::set_classifyid(const ::std::string& value) {
  set_has_classifyid();
  classifyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SnsClassifyTimeLineRequest.ClassifyId)
}
#if LANG_CXX11
void SnsClassifyTimeLineRequest::set_classifyid(::std::string&& value) {
  set_has_classifyid();
  classifyid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SnsClassifyTimeLineRequest.ClassifyId)
}
#endif
void SnsClassifyTimeLineRequest::set_classifyid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_classifyid();
  classifyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SnsClassifyTimeLineRequest.ClassifyId)
}
void SnsClassifyTimeLineRequest::set_classifyid(const char* value, size_t size) {
  set_has_classifyid();
  classifyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SnsClassifyTimeLineRequest.ClassifyId)
}
::std::string* SnsClassifyTimeLineRequest::mutable_classifyid() {
  set_has_classifyid();
  // @@protoc_insertion_point(field_mutable:micromsg.SnsClassifyTimeLineRequest.ClassifyId)
  return classifyid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnsClassifyTimeLineRequest::release_classifyid() {
  // @@protoc_insertion_point(field_release:micromsg.SnsClassifyTimeLineRequest.ClassifyId)
  clear_has_classifyid();
  return classifyid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnsClassifyTimeLineRequest::set_allocated_classifyid(::std::string* classifyid) {
  if (classifyid != NULL) {
    set_has_classifyid();
  } else {
    clear_has_classifyid();
  }
  classifyid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), classifyid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsClassifyTimeLineRequest.ClassifyId)
}

// required uint32 ClassifyType = 5;
bool SnsClassifyTimeLineRequest::has_classifytype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SnsClassifyTimeLineRequest::set_has_classifytype() {
  _has_bits_[0] |= 0x00000010u;
}
void SnsClassifyTimeLineRequest::clear_has_classifytype() {
  _has_bits_[0] &= ~0x00000010u;
}
void SnsClassifyTimeLineRequest::clear_classifytype() {
  classifytype_ = 0u;
  clear_has_classifytype();
}
::google::protobuf::uint32 SnsClassifyTimeLineRequest::classifytype() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsClassifyTimeLineRequest.ClassifyType)
  return classifytype_;
}
void SnsClassifyTimeLineRequest::set_classifytype(::google::protobuf::uint32 value) {
  set_has_classifytype();
  classifytype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsClassifyTimeLineRequest.ClassifyType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnsClassifyTimeLineResponse::kBaseResponseFieldNumber;
const int SnsClassifyTimeLineResponse::kFirstPageMd5FieldNumber;
const int SnsClassifyTimeLineResponse::kObjectCountFieldNumber;
const int SnsClassifyTimeLineResponse::kObjectListFieldNumber;
const int SnsClassifyTimeLineResponse::kObjectCountForSameMd5FieldNumber;
const int SnsClassifyTimeLineResponse::kDescriptionFieldNumber;
const int SnsClassifyTimeLineResponse::kControlFlagFieldNumber;
const int SnsClassifyTimeLineResponse::kServerConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnsClassifyTimeLineResponse::SnsClassifyTimeLineResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsns_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SnsClassifyTimeLineResponse)
}
SnsClassifyTimeLineResponse::SnsClassifyTimeLineResponse(const SnsClassifyTimeLineResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      objectlist_(from.objectlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  firstpagemd5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_firstpagemd5()) {
    firstpagemd5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firstpagemd5_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_serverconfig()) {
    serverconfig_ = new ::micromsg::SnsServerConfig(*from.serverconfig_);
  } else {
    serverconfig_ = NULL;
  }
  ::memcpy(&objectcount_, &from.objectcount_,
    reinterpret_cast<char*>(&controlflag_) -
    reinterpret_cast<char*>(&objectcount_) + sizeof(controlflag_));
  // @@protoc_insertion_point(copy_constructor:micromsg.SnsClassifyTimeLineResponse)
}

void SnsClassifyTimeLineResponse::SharedCtor() {
  _cached_size_ = 0;
  firstpagemd5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&controlflag_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(controlflag_));
}

SnsClassifyTimeLineResponse::~SnsClassifyTimeLineResponse() {
  // @@protoc_insertion_point(destructor:micromsg.SnsClassifyTimeLineResponse)
  SharedDtor();
}

void SnsClassifyTimeLineResponse::SharedDtor() {
  firstpagemd5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete serverconfig_;
  }
}

void SnsClassifyTimeLineResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnsClassifyTimeLineResponse::descriptor() {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnsClassifyTimeLineResponse& SnsClassifyTimeLineResponse::default_instance() {
  protobuf_mmsns_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnsClassifyTimeLineResponse* SnsClassifyTimeLineResponse::New(::google::protobuf::Arena* arena) const {
  SnsClassifyTimeLineResponse* n = new SnsClassifyTimeLineResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnsClassifyTimeLineResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SnsClassifyTimeLineResponse)
  objectlist_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    if (has_firstpagemd5()) {
      GOOGLE_DCHECK(!firstpagemd5_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*firstpagemd5_.UnsafeRawStringPointer())->clear();
    }
    if (has_description()) {
      GOOGLE_DCHECK(!description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*description_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_serverconfig()) {
      GOOGLE_DCHECK(serverconfig_ != NULL);
      serverconfig_->::micromsg::SnsServerConfig::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 112u) {
    ::memset(&objectcount_, 0, reinterpret_cast<char*>(&controlflag_) -
      reinterpret_cast<char*>(&objectcount_) + sizeof(controlflag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnsClassifyTimeLineResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SnsClassifyTimeLineResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FirstPageMd5 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firstpagemd5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->firstpagemd5().data(), this->firstpagemd5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SnsClassifyTimeLineResponse.FirstPageMd5");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ObjectCount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_objectcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &objectcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.SnsObject ObjectList = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objectlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ObjectCountForSameMd5 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_objectcountforsamemd5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &objectcountforsamemd5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Description = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SnsClassifyTimeLineResponse.Description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ControlFlag = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_controlflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &controlflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SnsServerConfig ServerConfig = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_serverconfig()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SnsClassifyTimeLineResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SnsClassifyTimeLineResponse)
  return false;
#undef DO_
}

void SnsClassifyTimeLineResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SnsClassifyTimeLineResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional string FirstPageMd5 = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firstpagemd5().data(), this->firstpagemd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsClassifyTimeLineResponse.FirstPageMd5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->firstpagemd5(), output);
  }

  // required uint32 ObjectCount = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->objectcount(), output);
  }

  // repeated .micromsg.SnsObject ObjectList = 4;
  for (unsigned int i = 0, n = this->objectlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->objectlist(i), output);
  }

  // required uint32 ObjectCountForSameMd5 = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->objectcountforsamemd5(), output);
  }

  // optional string Description = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsClassifyTimeLineResponse.Description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->description(), output);
  }

  // required uint32 ControlFlag = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->controlflag(), output);
  }

  // required .micromsg.SnsServerConfig ServerConfig = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->serverconfig_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SnsClassifyTimeLineResponse)
}

::google::protobuf::uint8* SnsClassifyTimeLineResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SnsClassifyTimeLineResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional string FirstPageMd5 = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firstpagemd5().data(), this->firstpagemd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsClassifyTimeLineResponse.FirstPageMd5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->firstpagemd5(), target);
  }

  // required uint32 ObjectCount = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->objectcount(), target);
  }

  // repeated .micromsg.SnsObject ObjectList = 4;
  for (unsigned int i = 0, n = this->objectlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->objectlist(i), deterministic, target);
  }

  // required uint32 ObjectCountForSameMd5 = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->objectcountforsamemd5(), target);
  }

  // optional string Description = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsClassifyTimeLineResponse.Description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->description(), target);
  }

  // required uint32 ControlFlag = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->controlflag(), target);
  }

  // required .micromsg.SnsServerConfig ServerConfig = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->serverconfig_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SnsClassifyTimeLineResponse)
  return target;
}

size_t SnsClassifyTimeLineResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SnsClassifyTimeLineResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_serverconfig()) {
    // required .micromsg.SnsServerConfig ServerConfig = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->serverconfig_);
  }

  if (has_objectcount()) {
    // required uint32 ObjectCount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->objectcount());
  }

  if (has_objectcountforsamemd5()) {
    // required uint32 ObjectCountForSameMd5 = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->objectcountforsamemd5());
  }

  if (has_controlflag()) {
    // required uint32 ControlFlag = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->controlflag());
  }

  return total_size;
}
size_t SnsClassifyTimeLineResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SnsClassifyTimeLineResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007c) ^ 0x0000007c) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required .micromsg.SnsServerConfig ServerConfig = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->serverconfig_);

    // required uint32 ObjectCount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->objectcount());

    // required uint32 ObjectCountForSameMd5 = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->objectcountforsamemd5());

    // required uint32 ControlFlag = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->controlflag());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.SnsObject ObjectList = 4;
  {
    unsigned int count = this->objectlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->objectlist(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string FirstPageMd5 = 2;
    if (has_firstpagemd5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->firstpagemd5());
    }

    // optional string Description = 6;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnsClassifyTimeLineResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SnsClassifyTimeLineResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SnsClassifyTimeLineResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnsClassifyTimeLineResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SnsClassifyTimeLineResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SnsClassifyTimeLineResponse)
    MergeFrom(*source);
  }
}

void SnsClassifyTimeLineResponse::MergeFrom(const SnsClassifyTimeLineResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SnsClassifyTimeLineResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objectlist_.MergeFrom(from.objectlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_firstpagemd5();
      firstpagemd5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firstpagemd5_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_serverconfig()->::micromsg::SnsServerConfig::MergeFrom(from.serverconfig());
    }
    if (cached_has_bits & 0x00000010u) {
      objectcount_ = from.objectcount_;
    }
    if (cached_has_bits & 0x00000020u) {
      objectcountforsamemd5_ = from.objectcountforsamemd5_;
    }
    if (cached_has_bits & 0x00000040u) {
      controlflag_ = from.controlflag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SnsClassifyTimeLineResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SnsClassifyTimeLineResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnsClassifyTimeLineResponse::CopyFrom(const SnsClassifyTimeLineResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SnsClassifyTimeLineResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsClassifyTimeLineResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007c) != 0x0000007c) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->objectlist())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void SnsClassifyTimeLineResponse::Swap(SnsClassifyTimeLineResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnsClassifyTimeLineResponse::InternalSwap(SnsClassifyTimeLineResponse* other) {
  objectlist_.InternalSwap(&other->objectlist_);
  firstpagemd5_.Swap(&other->firstpagemd5_);
  description_.Swap(&other->description_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(serverconfig_, other->serverconfig_);
  std::swap(objectcount_, other->objectcount_);
  std::swap(objectcountforsamemd5_, other->objectcountforsamemd5_);
  std::swap(controlflag_, other->controlflag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnsClassifyTimeLineResponse::GetMetadata() const {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnsClassifyTimeLineResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool SnsClassifyTimeLineResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SnsClassifyTimeLineResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000004u;
}
void SnsClassifyTimeLineResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000004u;
}
void SnsClassifyTimeLineResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& SnsClassifyTimeLineResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsClassifyTimeLineResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* SnsClassifyTimeLineResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsClassifyTimeLineResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* SnsClassifyTimeLineResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.SnsClassifyTimeLineResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void SnsClassifyTimeLineResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsClassifyTimeLineResponse.BaseResponse)
}

// optional string FirstPageMd5 = 2;
bool SnsClassifyTimeLineResponse::has_firstpagemd5() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnsClassifyTimeLineResponse::set_has_firstpagemd5() {
  _has_bits_[0] |= 0x00000001u;
}
void SnsClassifyTimeLineResponse::clear_has_firstpagemd5() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnsClassifyTimeLineResponse::clear_firstpagemd5() {
  firstpagemd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_firstpagemd5();
}
const ::std::string& SnsClassifyTimeLineResponse::firstpagemd5() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsClassifyTimeLineResponse.FirstPageMd5)
  return firstpagemd5_.GetNoArena();
}
void SnsClassifyTimeLineResponse::set_firstpagemd5(const ::std::string& value) {
  set_has_firstpagemd5();
  firstpagemd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SnsClassifyTimeLineResponse.FirstPageMd5)
}
#if LANG_CXX11
void SnsClassifyTimeLineResponse::set_firstpagemd5(::std::string&& value) {
  set_has_firstpagemd5();
  firstpagemd5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SnsClassifyTimeLineResponse.FirstPageMd5)
}
#endif
void SnsClassifyTimeLineResponse::set_firstpagemd5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_firstpagemd5();
  firstpagemd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SnsClassifyTimeLineResponse.FirstPageMd5)
}
void SnsClassifyTimeLineResponse::set_firstpagemd5(const char* value, size_t size) {
  set_has_firstpagemd5();
  firstpagemd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SnsClassifyTimeLineResponse.FirstPageMd5)
}
::std::string* SnsClassifyTimeLineResponse::mutable_firstpagemd5() {
  set_has_firstpagemd5();
  // @@protoc_insertion_point(field_mutable:micromsg.SnsClassifyTimeLineResponse.FirstPageMd5)
  return firstpagemd5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnsClassifyTimeLineResponse::release_firstpagemd5() {
  // @@protoc_insertion_point(field_release:micromsg.SnsClassifyTimeLineResponse.FirstPageMd5)
  clear_has_firstpagemd5();
  return firstpagemd5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnsClassifyTimeLineResponse::set_allocated_firstpagemd5(::std::string* firstpagemd5) {
  if (firstpagemd5 != NULL) {
    set_has_firstpagemd5();
  } else {
    clear_has_firstpagemd5();
  }
  firstpagemd5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), firstpagemd5);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsClassifyTimeLineResponse.FirstPageMd5)
}

// required uint32 ObjectCount = 3;
bool SnsClassifyTimeLineResponse::has_objectcount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SnsClassifyTimeLineResponse::set_has_objectcount() {
  _has_bits_[0] |= 0x00000010u;
}
void SnsClassifyTimeLineResponse::clear_has_objectcount() {
  _has_bits_[0] &= ~0x00000010u;
}
void SnsClassifyTimeLineResponse::clear_objectcount() {
  objectcount_ = 0u;
  clear_has_objectcount();
}
::google::protobuf::uint32 SnsClassifyTimeLineResponse::objectcount() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsClassifyTimeLineResponse.ObjectCount)
  return objectcount_;
}
void SnsClassifyTimeLineResponse::set_objectcount(::google::protobuf::uint32 value) {
  set_has_objectcount();
  objectcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsClassifyTimeLineResponse.ObjectCount)
}

// repeated .micromsg.SnsObject ObjectList = 4;
int SnsClassifyTimeLineResponse::objectlist_size() const {
  return objectlist_.size();
}
void SnsClassifyTimeLineResponse::clear_objectlist() {
  objectlist_.Clear();
}
const ::micromsg::SnsObject& SnsClassifyTimeLineResponse::objectlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.SnsClassifyTimeLineResponse.ObjectList)
  return objectlist_.Get(index);
}
::micromsg::SnsObject* SnsClassifyTimeLineResponse::mutable_objectlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.SnsClassifyTimeLineResponse.ObjectList)
  return objectlist_.Mutable(index);
}
::micromsg::SnsObject* SnsClassifyTimeLineResponse::add_objectlist() {
  // @@protoc_insertion_point(field_add:micromsg.SnsClassifyTimeLineResponse.ObjectList)
  return objectlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::SnsObject >*
SnsClassifyTimeLineResponse::mutable_objectlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.SnsClassifyTimeLineResponse.ObjectList)
  return &objectlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::SnsObject >&
SnsClassifyTimeLineResponse::objectlist() const {
  // @@protoc_insertion_point(field_list:micromsg.SnsClassifyTimeLineResponse.ObjectList)
  return objectlist_;
}

// required uint32 ObjectCountForSameMd5 = 5;
bool SnsClassifyTimeLineResponse::has_objectcountforsamemd5() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SnsClassifyTimeLineResponse::set_has_objectcountforsamemd5() {
  _has_bits_[0] |= 0x00000020u;
}
void SnsClassifyTimeLineResponse::clear_has_objectcountforsamemd5() {
  _has_bits_[0] &= ~0x00000020u;
}
void SnsClassifyTimeLineResponse::clear_objectcountforsamemd5() {
  objectcountforsamemd5_ = 0u;
  clear_has_objectcountforsamemd5();
}
::google::protobuf::uint32 SnsClassifyTimeLineResponse::objectcountforsamemd5() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsClassifyTimeLineResponse.ObjectCountForSameMd5)
  return objectcountforsamemd5_;
}
void SnsClassifyTimeLineResponse::set_objectcountforsamemd5(::google::protobuf::uint32 value) {
  set_has_objectcountforsamemd5();
  objectcountforsamemd5_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsClassifyTimeLineResponse.ObjectCountForSameMd5)
}

// optional string Description = 6;
bool SnsClassifyTimeLineResponse::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SnsClassifyTimeLineResponse::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
void SnsClassifyTimeLineResponse::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
void SnsClassifyTimeLineResponse::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
const ::std::string& SnsClassifyTimeLineResponse::description() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsClassifyTimeLineResponse.Description)
  return description_.GetNoArena();
}
void SnsClassifyTimeLineResponse::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SnsClassifyTimeLineResponse.Description)
}
#if LANG_CXX11
void SnsClassifyTimeLineResponse::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SnsClassifyTimeLineResponse.Description)
}
#endif
void SnsClassifyTimeLineResponse::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SnsClassifyTimeLineResponse.Description)
}
void SnsClassifyTimeLineResponse::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SnsClassifyTimeLineResponse.Description)
}
::std::string* SnsClassifyTimeLineResponse::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:micromsg.SnsClassifyTimeLineResponse.Description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnsClassifyTimeLineResponse::release_description() {
  // @@protoc_insertion_point(field_release:micromsg.SnsClassifyTimeLineResponse.Description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnsClassifyTimeLineResponse::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsClassifyTimeLineResponse.Description)
}

// required uint32 ControlFlag = 7;
bool SnsClassifyTimeLineResponse::has_controlflag() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SnsClassifyTimeLineResponse::set_has_controlflag() {
  _has_bits_[0] |= 0x00000040u;
}
void SnsClassifyTimeLineResponse::clear_has_controlflag() {
  _has_bits_[0] &= ~0x00000040u;
}
void SnsClassifyTimeLineResponse::clear_controlflag() {
  controlflag_ = 0u;
  clear_has_controlflag();
}
::google::protobuf::uint32 SnsClassifyTimeLineResponse::controlflag() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsClassifyTimeLineResponse.ControlFlag)
  return controlflag_;
}
void SnsClassifyTimeLineResponse::set_controlflag(::google::protobuf::uint32 value) {
  set_has_controlflag();
  controlflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsClassifyTimeLineResponse.ControlFlag)
}

// required .micromsg.SnsServerConfig ServerConfig = 8;
bool SnsClassifyTimeLineResponse::has_serverconfig() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SnsClassifyTimeLineResponse::set_has_serverconfig() {
  _has_bits_[0] |= 0x00000008u;
}
void SnsClassifyTimeLineResponse::clear_has_serverconfig() {
  _has_bits_[0] &= ~0x00000008u;
}
void SnsClassifyTimeLineResponse::clear_serverconfig() {
  if (serverconfig_ != NULL) serverconfig_->::micromsg::SnsServerConfig::Clear();
  clear_has_serverconfig();
}
const ::micromsg::SnsServerConfig& SnsClassifyTimeLineResponse::serverconfig() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsClassifyTimeLineResponse.ServerConfig)
  return serverconfig_ != NULL ? *serverconfig_
                         : *::micromsg::SnsServerConfig::internal_default_instance();
}
::micromsg::SnsServerConfig* SnsClassifyTimeLineResponse::mutable_serverconfig() {
  set_has_serverconfig();
  if (serverconfig_ == NULL) {
    serverconfig_ = new ::micromsg::SnsServerConfig;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsClassifyTimeLineResponse.ServerConfig)
  return serverconfig_;
}
::micromsg::SnsServerConfig* SnsClassifyTimeLineResponse::release_serverconfig() {
  // @@protoc_insertion_point(field_release:micromsg.SnsClassifyTimeLineResponse.ServerConfig)
  clear_has_serverconfig();
  ::micromsg::SnsServerConfig* temp = serverconfig_;
  serverconfig_ = NULL;
  return temp;
}
void SnsClassifyTimeLineResponse::set_allocated_serverconfig(::micromsg::SnsServerConfig* serverconfig) {
  delete serverconfig_;
  serverconfig_ = serverconfig;
  if (serverconfig) {
    set_has_serverconfig();
  } else {
    clear_has_serverconfig();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsClassifyTimeLineResponse.ServerConfig)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Whatsnew61::kLikeFieldNumber;
const int Whatsnew61::kLikedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Whatsnew61::Whatsnew61()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsns_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.Whatsnew61)
}
Whatsnew61::Whatsnew61(const Whatsnew61& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&like_, &from.like_,
    reinterpret_cast<char*>(&liked_) -
    reinterpret_cast<char*>(&like_) + sizeof(liked_));
  // @@protoc_insertion_point(copy_constructor:micromsg.Whatsnew61)
}

void Whatsnew61::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&like_, 0, reinterpret_cast<char*>(&liked_) -
    reinterpret_cast<char*>(&like_) + sizeof(liked_));
}

Whatsnew61::~Whatsnew61() {
  // @@protoc_insertion_point(destructor:micromsg.Whatsnew61)
  SharedDtor();
}

void Whatsnew61::SharedDtor() {
}

void Whatsnew61::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Whatsnew61::descriptor() {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Whatsnew61& Whatsnew61::default_instance() {
  protobuf_mmsns_2eproto::InitDefaults();
  return *internal_default_instance();
}

Whatsnew61* Whatsnew61::New(::google::protobuf::Arena* arena) const {
  Whatsnew61* n = new Whatsnew61;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Whatsnew61::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.Whatsnew61)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&like_, 0, reinterpret_cast<char*>(&liked_) -
      reinterpret_cast<char*>(&like_) + sizeof(liked_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Whatsnew61::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.Whatsnew61)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 like = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_like();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &like_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 liked = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_liked();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &liked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.Whatsnew61)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.Whatsnew61)
  return false;
#undef DO_
}

void Whatsnew61::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.Whatsnew61)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 like = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->like(), output);
  }

  // optional uint32 liked = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->liked(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.Whatsnew61)
}

::google::protobuf::uint8* Whatsnew61::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.Whatsnew61)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 like = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->like(), target);
  }

  // optional uint32 liked = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->liked(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.Whatsnew61)
  return target;
}

size_t Whatsnew61::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.Whatsnew61)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 like = 1;
    if (has_like()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->like());
    }

    // optional uint32 liked = 2;
    if (has_liked()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->liked());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Whatsnew61::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.Whatsnew61)
  GOOGLE_DCHECK_NE(&from, this);
  const Whatsnew61* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Whatsnew61>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.Whatsnew61)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.Whatsnew61)
    MergeFrom(*source);
  }
}

void Whatsnew61::MergeFrom(const Whatsnew61& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.Whatsnew61)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      like_ = from.like_;
    }
    if (cached_has_bits & 0x00000002u) {
      liked_ = from.liked_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Whatsnew61::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.Whatsnew61)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Whatsnew61::CopyFrom(const Whatsnew61& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.Whatsnew61)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Whatsnew61::IsInitialized() const {
  return true;
}

void Whatsnew61::Swap(Whatsnew61* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Whatsnew61::InternalSwap(Whatsnew61* other) {
  std::swap(like_, other->like_);
  std::swap(liked_, other->liked_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Whatsnew61::GetMetadata() const {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Whatsnew61

// optional uint32 like = 1;
bool Whatsnew61::has_like() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Whatsnew61::set_has_like() {
  _has_bits_[0] |= 0x00000001u;
}
void Whatsnew61::clear_has_like() {
  _has_bits_[0] &= ~0x00000001u;
}
void Whatsnew61::clear_like() {
  like_ = 0u;
  clear_has_like();
}
::google::protobuf::uint32 Whatsnew61::like() const {
  // @@protoc_insertion_point(field_get:micromsg.Whatsnew61.like)
  return like_;
}
void Whatsnew61::set_like(::google::protobuf::uint32 value) {
  set_has_like();
  like_ = value;
  // @@protoc_insertion_point(field_set:micromsg.Whatsnew61.like)
}

// optional uint32 liked = 2;
bool Whatsnew61::has_liked() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Whatsnew61::set_has_liked() {
  _has_bits_[0] |= 0x00000002u;
}
void Whatsnew61::clear_has_liked() {
  _has_bits_[0] &= ~0x00000002u;
}
void Whatsnew61::clear_liked() {
  liked_ = 0u;
  clear_has_liked();
}
::google::protobuf::uint32 Whatsnew61::liked() const {
  // @@protoc_insertion_point(field_get:micromsg.Whatsnew61.liked)
  return liked_;
}
void Whatsnew61::set_liked(::google::protobuf::uint32 value) {
  set_has_liked();
  liked_ = value;
  // @@protoc_insertion_point(field_set:micromsg.Whatsnew61.liked)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnsWhatsnewRequest::kBaseRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnsWhatsnewRequest::SnsWhatsnewRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsns_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SnsWhatsnewRequest)
}
SnsWhatsnewRequest::SnsWhatsnewRequest(const SnsWhatsnewRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.SnsWhatsnewRequest)
}

void SnsWhatsnewRequest::SharedCtor() {
  _cached_size_ = 0;
  baserequest_ = NULL;
}

SnsWhatsnewRequest::~SnsWhatsnewRequest() {
  // @@protoc_insertion_point(destructor:micromsg.SnsWhatsnewRequest)
  SharedDtor();
}

void SnsWhatsnewRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void SnsWhatsnewRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnsWhatsnewRequest::descriptor() {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnsWhatsnewRequest& SnsWhatsnewRequest::default_instance() {
  protobuf_mmsns_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnsWhatsnewRequest* SnsWhatsnewRequest::New(::google::protobuf::Arena* arena) const {
  SnsWhatsnewRequest* n = new SnsWhatsnewRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnsWhatsnewRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SnsWhatsnewRequest)
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnsWhatsnewRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SnsWhatsnewRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SnsWhatsnewRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SnsWhatsnewRequest)
  return false;
#undef DO_
}

void SnsWhatsnewRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SnsWhatsnewRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SnsWhatsnewRequest)
}

::google::protobuf::uint8* SnsWhatsnewRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SnsWhatsnewRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SnsWhatsnewRequest)
  return target;
}

size_t SnsWhatsnewRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SnsWhatsnewRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnsWhatsnewRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SnsWhatsnewRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SnsWhatsnewRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnsWhatsnewRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SnsWhatsnewRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SnsWhatsnewRequest)
    MergeFrom(*source);
  }
}

void SnsWhatsnewRequest::MergeFrom(const SnsWhatsnewRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SnsWhatsnewRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baserequest()) {
    mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
  }
}

void SnsWhatsnewRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SnsWhatsnewRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnsWhatsnewRequest::CopyFrom(const SnsWhatsnewRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SnsWhatsnewRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsWhatsnewRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void SnsWhatsnewRequest::Swap(SnsWhatsnewRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnsWhatsnewRequest::InternalSwap(SnsWhatsnewRequest* other) {
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnsWhatsnewRequest::GetMetadata() const {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnsWhatsnewRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool SnsWhatsnewRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnsWhatsnewRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void SnsWhatsnewRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnsWhatsnewRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& SnsWhatsnewRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsWhatsnewRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* SnsWhatsnewRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsWhatsnewRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* SnsWhatsnewRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.SnsWhatsnewRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void SnsWhatsnewRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsWhatsnewRequest.BaseRequest)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnsWhatsnewResponse::kBaseResponseFieldNumber;
const int SnsWhatsnewResponse::kWhatsnew61FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnsWhatsnewResponse::SnsWhatsnewResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsns_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SnsWhatsnewResponse)
}
SnsWhatsnewResponse::SnsWhatsnewResponse(const SnsWhatsnewResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_whatsnew61()) {
    whatsnew61_ = new ::micromsg::Whatsnew61(*from.whatsnew61_);
  } else {
    whatsnew61_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.SnsWhatsnewResponse)
}

void SnsWhatsnewResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&whatsnew61_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(whatsnew61_));
}

SnsWhatsnewResponse::~SnsWhatsnewResponse() {
  // @@protoc_insertion_point(destructor:micromsg.SnsWhatsnewResponse)
  SharedDtor();
}

void SnsWhatsnewResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete whatsnew61_;
  }
}

void SnsWhatsnewResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnsWhatsnewResponse::descriptor() {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnsWhatsnewResponse& SnsWhatsnewResponse::default_instance() {
  protobuf_mmsns_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnsWhatsnewResponse* SnsWhatsnewResponse::New(::google::protobuf::Arena* arena) const {
  SnsWhatsnewResponse* n = new SnsWhatsnewResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnsWhatsnewResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SnsWhatsnewResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_whatsnew61()) {
      GOOGLE_DCHECK(whatsnew61_ != NULL);
      whatsnew61_->::micromsg::Whatsnew61::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnsWhatsnewResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SnsWhatsnewResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.Whatsnew61 Whatsnew61 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_whatsnew61()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SnsWhatsnewResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SnsWhatsnewResponse)
  return false;
#undef DO_
}

void SnsWhatsnewResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SnsWhatsnewResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional .micromsg.Whatsnew61 Whatsnew61 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->whatsnew61_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SnsWhatsnewResponse)
}

::google::protobuf::uint8* SnsWhatsnewResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SnsWhatsnewResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional .micromsg.Whatsnew61 Whatsnew61 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->whatsnew61_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SnsWhatsnewResponse)
  return target;
}

size_t SnsWhatsnewResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SnsWhatsnewResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  // optional .micromsg.Whatsnew61 Whatsnew61 = 2;
  if (has_whatsnew61()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->whatsnew61_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnsWhatsnewResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SnsWhatsnewResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SnsWhatsnewResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnsWhatsnewResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SnsWhatsnewResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SnsWhatsnewResponse)
    MergeFrom(*source);
  }
}

void SnsWhatsnewResponse::MergeFrom(const SnsWhatsnewResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SnsWhatsnewResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_whatsnew61()->::micromsg::Whatsnew61::MergeFrom(from.whatsnew61());
    }
  }
}

void SnsWhatsnewResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SnsWhatsnewResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnsWhatsnewResponse::CopyFrom(const SnsWhatsnewResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SnsWhatsnewResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsWhatsnewResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void SnsWhatsnewResponse::Swap(SnsWhatsnewResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnsWhatsnewResponse::InternalSwap(SnsWhatsnewResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(whatsnew61_, other->whatsnew61_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnsWhatsnewResponse::GetMetadata() const {
  protobuf_mmsns_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsns_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnsWhatsnewResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool SnsWhatsnewResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnsWhatsnewResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void SnsWhatsnewResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnsWhatsnewResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& SnsWhatsnewResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsWhatsnewResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* SnsWhatsnewResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsWhatsnewResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* SnsWhatsnewResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.SnsWhatsnewResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void SnsWhatsnewResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsWhatsnewResponse.BaseResponse)
}

// optional .micromsg.Whatsnew61 Whatsnew61 = 2;
bool SnsWhatsnewResponse::has_whatsnew61() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SnsWhatsnewResponse::set_has_whatsnew61() {
  _has_bits_[0] |= 0x00000002u;
}
void SnsWhatsnewResponse::clear_has_whatsnew61() {
  _has_bits_[0] &= ~0x00000002u;
}
void SnsWhatsnewResponse::clear_whatsnew61() {
  if (whatsnew61_ != NULL) whatsnew61_->::micromsg::Whatsnew61::Clear();
  clear_has_whatsnew61();
}
const ::micromsg::Whatsnew61& SnsWhatsnewResponse::whatsnew61() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsWhatsnewResponse.Whatsnew61)
  return whatsnew61_ != NULL ? *whatsnew61_
                         : *::micromsg::Whatsnew61::internal_default_instance();
}
::micromsg::Whatsnew61* SnsWhatsnewResponse::mutable_whatsnew61() {
  set_has_whatsnew61();
  if (whatsnew61_ == NULL) {
    whatsnew61_ = new ::micromsg::Whatsnew61;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SnsWhatsnewResponse.Whatsnew61)
  return whatsnew61_;
}
::micromsg::Whatsnew61* SnsWhatsnewResponse::release_whatsnew61() {
  // @@protoc_insertion_point(field_release:micromsg.SnsWhatsnewResponse.Whatsnew61)
  clear_has_whatsnew61();
  ::micromsg::Whatsnew61* temp = whatsnew61_;
  whatsnew61_ = NULL;
  return temp;
}
void SnsWhatsnewResponse::set_allocated_whatsnew61(::micromsg::Whatsnew61* whatsnew61) {
  delete whatsnew61_;
  whatsnew61_ = whatsnew61;
  if (whatsnew61) {
    set_has_whatsnew61();
  } else {
    clear_has_whatsnew61();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsWhatsnewResponse.Whatsnew61)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace micromsg

// @@protoc_insertion_point(global_scope)
