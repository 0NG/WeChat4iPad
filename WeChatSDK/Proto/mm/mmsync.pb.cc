// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmsync.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mmsync.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace micromsg {
class InitBufferDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InitBuffer> {
} _InitBuffer_default_instance_;
class InitRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InitRequest> {
} _InitRequest_default_instance_;
class InitResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InitResponse> {
} _InitResponse_default_instance_;
class KeyBufferDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<KeyBuffer> {
} _KeyBuffer_default_instance_;
class NewInitRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NewInitRequest> {
} _NewInitRequest_default_instance_;
class NewInitResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NewInitResponse> {
} _NewInitResponse_default_instance_;
class SyncRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SyncRequest> {
} _SyncRequest_default_instance_;
class SyncResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SyncResponse> {
} _SyncResponse_default_instance_;
class KeyValDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<KeyVal> {
} _KeyVal_default_instance_;
class SyncKeyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SyncKey> {
} _SyncKey_default_instance_;
class NewSyncRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NewSyncRequest> {
} _NewSyncRequest_default_instance_;
class NewSyncResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NewSyncResponse> {
} _NewSyncResponse_default_instance_;
class SyncFriendRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SyncFriendRequest> {
} _SyncFriendRequest_default_instance_;
class SyncFriendResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SyncFriendResponse> {
} _SyncFriendResponse_default_instance_;
class OpenQQMicroBlogDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OpenQQMicroBlog> {
} _OpenQQMicroBlog_default_instance_;
class ModChatRoomNotifyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ModChatRoomNotify> {
} _ModChatRoomNotify_default_instance_;
class CloseMicroBlogDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CloseMicroBlog> {
} _CloseMicroBlog_default_instance_;
class ModChatRoomMemberDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ModChatRoomMember> {
} _ModChatRoomMember_default_instance_;
class QuitChatRoomDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<QuitChatRoom> {
} _QuitChatRoom_default_instance_;
class ModChatRoomTopicDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ModChatRoomTopic> {
} _ModChatRoomTopic_default_instance_;
class ModChatRoomMemberDisplayNameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ModChatRoomMemberDisplayName> {
} _ModChatRoomMemberDisplayName_default_instance_;
class ModChatRoomMemberFlagDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ModChatRoomMemberFlag> {
} _ModChatRoomMemberFlag_default_instance_;
class AddMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AddMsg> {
} _AddMsg_default_instance_;
class ModMsgStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ModMsgStatus> {
} _ModMsgStatus_default_instance_;
class DelContactDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DelContact> {
} _DelContact_default_instance_;
class DelChatContactDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DelChatContact> {
} _DelChatContact_default_instance_;
class DelContactMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DelContactMsg> {
} _DelContactMsg_default_instance_;
class DelMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DelMsg> {
} _DelMsg_default_instance_;
class NewDelMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NewDelMsg> {
} _NewDelMsg_default_instance_;
class FacebookInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FacebookInfo> {
} _FacebookInfo_default_instance_;
class ModUserImgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ModUserImg> {
} _ModUserImg_default_instance_;
class ModDisturbSettingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ModDisturbSetting> {
} _ModDisturbSetting_default_instance_;
class ModNotifyStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ModNotifyStatus> {
} _ModNotifyStatus_default_instance_;
class ModMicroBlogInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ModMicroBlogInfo> {
} _ModMicroBlogInfo_default_instance_;
class ReportDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Report> {
} _Report_default_instance_;
class InviteFriendOpenDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InviteFriendOpen> {
} _InviteFriendOpen_default_instance_;
class ModUserDomainEmailDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ModUserDomainEmail> {
} _ModUserDomainEmail_default_instance_;
class DelUserDomainEmailDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DelUserDomainEmail> {
} _DelUserDomainEmail_default_instance_;
class FunctionSwitchDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FunctionSwitch> {
} _FunctionSwitch_default_instance_;
class WebWxFunctionSwitchDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WebWxFunctionSwitch> {
} _WebWxFunctionSwitch_default_instance_;
class PluginInstallDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PluginInstall> {
} _PluginInstall_default_instance_;
class ModTXNewsCategoryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ModTXNewsCategory> {
} _ModTXNewsCategory_default_instance_;
class MediaNoteOpLogDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MediaNoteOpLog> {
} _MediaNoteOpLog_default_instance_;
class GmailSwitchOplogDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GmailSwitchOplog> {
} _GmailSwitchOplog_default_instance_;
class UpdateStatOpLogDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UpdateStatOpLog> {
} _UpdateStatOpLog_default_instance_;
class KVStatItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<KVStatItem> {
} _KVStatItem_default_instance_;
class KVStatOpLogDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<KVStatOpLog> {
} _KVStatOpLog_default_instance_;
class KVCmdDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<KVCmd> {
} _KVCmd_default_instance_;
class ThemeOpLogDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ThemeOpLog> {
} _ThemeOpLog_default_instance_;
class ModDescriptionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ModDescription> {
} _ModDescription_default_instance_;
class OplogRetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OplogRet> {
} _OplogRet_default_instance_;
class OplogRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OplogRequest> {
} _OplogRequest_default_instance_;
class OplogResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OplogResponse> {
} _OplogResponse_default_instance_;

namespace protobuf_mmsync_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[53];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitBuffer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitBuffer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitBuffer, maxsynckey_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRequest, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRequest, synckey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRequest, buffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRequest, language_),
  1,
  2,
  4,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitResponse, newsynckey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitResponse, continueflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitResponse, cmdcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitResponse, cmdlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitResponse, buffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitResponse, ratio_),
  0,
  2,
  3,
  4,
  ~0u,
  1,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyBuffer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyBuffer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyBuffer, synckey_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewInitRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewInitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewInitRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewInitRequest, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewInitRequest, currentsynckey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewInitRequest, maxsynckey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewInitRequest, language_),
  2,
  0,
  3,
  4,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewInitResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewInitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewInitResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewInitResponse, currentsynckey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewInitResponse, maxsynckey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewInitResponse, continueflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewInitResponse, selectbitmap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewInitResponse, cmdcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewInitResponse, cmdlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewInitResponse, ratio_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRequest, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRequest, synckey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRequest, scene_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRequest, option_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRequest, oplog_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRequest, keybuf_),
  1,
  2,
  4,
  5,
  6,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncResponse, newsynckey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncResponse, continueflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncResponse, cmdcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncResponse, cmdlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncResponse, oobcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncResponse, ooblist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncResponse, keybuf_),
  1,
  2,
  3,
  4,
  ~0u,
  5,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyVal, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyVal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyVal, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyVal, val_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncKey, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncKey, keycount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncKey, key_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewSyncRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewSyncRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewSyncRequest, oplog_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewSyncRequest, selector_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewSyncRequest, keybuf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewSyncRequest, scene_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewSyncRequest, devicetype_),
  1,
  3,
  2,
  4,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewSyncResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewSyncResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewSyncResponse, ret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewSyncResponse, cmdlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewSyncResponse, continueflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewSyncResponse, keybuf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewSyncResponse, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewSyncResponse, onlineversion_),
  2,
  0,
  3,
  1,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncFriendRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncFriendRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncFriendRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncFriendRequest, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncFriendRequest, synckey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncFriendRequest, scene_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncFriendResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncFriendResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncFriendResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncFriendResponse, newsynckey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncFriendResponse, continueflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncFriendResponse, cmdcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncFriendResponse, cmdlist_),
  0,
  1,
  2,
  3,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenQQMicroBlog, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenQQMicroBlog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenQQMicroBlog, microblogusername_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomNotify, chatroomname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomNotify, status_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseMicroBlog, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseMicroBlog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseMicroBlog, microblogusername_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomMember, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomMember, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomMember, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomMember, pyinitial_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomMember, quanpin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomMember, sex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomMember, imgbuf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomMember, imgflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomMember, remark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomMember, remarkpyinitial_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomMember, remarkquanpin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomMember, contacttype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomMember, province_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomMember, city_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomMember, signature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomMember, personalcard_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomMember, verifyflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomMember, verifyinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomMember, weibo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomMember, verifycontent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomMember, weibonickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomMember, weiboflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomMember, albumstyle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomMember, albumflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomMember, albumbgimgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomMember, alias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomMember, snsuserinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomMember, country_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomMember, bigheadimgurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomMember, smallheadimgurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomMember, mybrandlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomMember, customizedinfo_),
  13,
  14,
  15,
  16,
  23,
  17,
  24,
  18,
  19,
  20,
  25,
  0,
  1,
  2,
  26,
  27,
  3,
  4,
  5,
  6,
  28,
  29,
  30,
  7,
  8,
  21,
  9,
  10,
  11,
  12,
  22,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitChatRoom, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitChatRoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitChatRoom, chatroomname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitChatRoom, username_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomTopic, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomTopic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomTopic, chatroomname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomTopic, chatroomtopic_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomMemberDisplayName, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomMemberDisplayName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomMemberDisplayName, chatroomname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomMemberDisplayName, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomMemberDisplayName, displayname_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomMemberFlag, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomMemberFlag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomMemberFlag, chatroomname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomMemberFlag, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomMemberFlag, flagswitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModChatRoomMemberFlag, value_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMsg, msgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMsg, fromusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMsg, tousername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMsg, msgtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMsg, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMsg, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMsg, imgstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMsg, imgbuf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMsg, createtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMsg, msgsource_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMsg, pushcontent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMsg, newmsgid_),
  6,
  2,
  3,
  7,
  4,
  8,
  9,
  5,
  11,
  0,
  1,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModMsgStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModMsgStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModMsgStatus, msgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModMsgStatus, fromusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModMsgStatus, tousername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModMsgStatus, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModMsgStatus, newmsgid_),
  2,
  0,
  1,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelContact, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelContact, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelContact, username_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelChatContact, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelChatContact, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelChatContact, username_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelContactMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelContactMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelContactMsg, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelContactMsg, maxmsgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelContactMsg, newmsgid_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelMsg, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelMsg, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelMsg, msgidlist_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDelMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDelMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDelMsg, fromusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDelMsg, tousername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDelMsg, msgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDelMsg, msgtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDelMsg, newmsgid_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacebookInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacebookInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacebookInfo, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacebookInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacebookInfo, token_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserImg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserImg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserImg, imgtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserImg, imglen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserImg, imgbuf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserImg, imgmd5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserImg, bigheadimgurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserImg, smallheadimgurl_),
  4,
  5,
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModDisturbSetting, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModDisturbSetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModDisturbSetting, disturbsetting_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModNotifyStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModNotifyStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModNotifyStatus, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModNotifyStatus, status_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModMicroBlogInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModMicroBlogInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModMicroBlogInfo, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModMicroBlogInfo, microblogtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModMicroBlogInfo, notifystatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModMicroBlogInfo, deleteflag_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report, log_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteFriendOpen, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteFriendOpen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteFriendOpen, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteFriendOpen, friendtype_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserDomainEmail, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserDomainEmail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserDomainEmail, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserDomainEmail, email_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelUserDomainEmail, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelUserDomainEmail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelUserDomainEmail, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelUserDomainEmail, email_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionSwitch, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionSwitch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionSwitch, functionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionSwitch, switchvalue_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebWxFunctionSwitch, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebWxFunctionSwitch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebWxFunctionSwitch, functionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebWxFunctionSwitch, switchvalue_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginInstall, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginInstall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginInstall, pluginflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginInstall, isuninstall_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModTXNewsCategory, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModTXNewsCategory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModTXNewsCategory, txnewscategory_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaNoteOpLog, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaNoteOpLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaNoteOpLog, writecount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaNoteOpLog, notetype_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmailSwitchOplog, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmailSwitchOplog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmailSwitchOplog, gmailacct_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmailSwitchOplog, gmailswitch_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStatOpLog, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStatOpLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStatOpLog, opcode_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVStatItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVStatItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVStatItem, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVStatItem, value_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVStatOpLog, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVStatOpLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVStatOpLog, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVStatOpLog, list_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVCmd, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVCmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVCmd, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVCmd, value_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeOpLog, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeOpLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeOpLog, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeOpLog, value_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModDescription, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModDescription, contactusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModDescription, desc_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OplogRet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OplogRet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OplogRet, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OplogRet, ret_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OplogRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OplogRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OplogRequest, oplog_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OplogResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OplogResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OplogResponse, ret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OplogResponse, oplogret_),
  1,
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(InitBuffer)},
  { 7, 17, sizeof(InitRequest)},
  { 22, 34, sizeof(InitResponse)},
  { 41, 47, sizeof(KeyBuffer)},
  { 48, 58, sizeof(NewInitRequest)},
  { 63, 76, sizeof(NewInitResponse)},
  { 84, 96, sizeof(SyncRequest)},
  { 103, 116, sizeof(SyncResponse)},
  { 124, 131, sizeof(KeyVal)},
  { 133, 140, sizeof(SyncKey)},
  { 142, 152, sizeof(NewSyncRequest)},
  { 157, 168, sizeof(NewSyncResponse)},
  { 174, 183, sizeof(SyncFriendRequest)},
  { 187, 197, sizeof(SyncFriendResponse)},
  { 202, 208, sizeof(OpenQQMicroBlog)},
  { 209, 216, sizeof(ModChatRoomNotify)},
  { 218, 224, sizeof(CloseMicroBlog)},
  { 225, 261, sizeof(ModChatRoomMember)},
  { 292, 299, sizeof(QuitChatRoom)},
  { 301, 308, sizeof(ModChatRoomTopic)},
  { 310, 318, sizeof(ModChatRoomMemberDisplayName)},
  { 321, 330, sizeof(ModChatRoomMemberFlag)},
  { 334, 351, sizeof(AddMsg)},
  { 363, 373, sizeof(ModMsgStatus)},
  { 378, 384, sizeof(DelContact)},
  { 385, 391, sizeof(DelChatContact)},
  { 392, 400, sizeof(DelContactMsg)},
  { 403, 411, sizeof(DelMsg)},
  { 414, 424, sizeof(NewDelMsg)},
  { 429, 437, sizeof(FacebookInfo)},
  { 440, 451, sizeof(ModUserImg)},
  { 457, 463, sizeof(ModDisturbSetting)},
  { 464, 471, sizeof(ModNotifyStatus)},
  { 473, 482, sizeof(ModMicroBlogInfo)},
  { 486, 492, sizeof(Report)},
  { 493, 500, sizeof(InviteFriendOpen)},
  { 502, 509, sizeof(ModUserDomainEmail)},
  { 511, 518, sizeof(DelUserDomainEmail)},
  { 520, 527, sizeof(FunctionSwitch)},
  { 529, 536, sizeof(WebWxFunctionSwitch)},
  { 538, 545, sizeof(PluginInstall)},
  { 547, 553, sizeof(ModTXNewsCategory)},
  { 554, 561, sizeof(MediaNoteOpLog)},
  { 563, 570, sizeof(GmailSwitchOplog)},
  { 572, 578, sizeof(UpdateStatOpLog)},
  { 579, 586, sizeof(KVStatItem)},
  { 588, 595, sizeof(KVStatOpLog)},
  { 597, 604, sizeof(KVCmd)},
  { 606, 613, sizeof(ThemeOpLog)},
  { 615, 622, sizeof(ModDescription)},
  { 624, 631, sizeof(OplogRet)},
  { 633, 639, sizeof(OplogRequest)},
  { 640, 647, sizeof(OplogResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_InitBuffer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InitRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InitResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KeyBuffer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NewInitRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NewInitResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SyncRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SyncResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KeyVal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SyncKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NewSyncRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NewSyncResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SyncFriendRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SyncFriendResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OpenQQMicroBlog_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ModChatRoomNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CloseMicroBlog_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ModChatRoomMember_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QuitChatRoom_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ModChatRoomTopic_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ModChatRoomMemberDisplayName_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ModChatRoomMemberFlag_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AddMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ModMsgStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DelContact_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DelChatContact_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DelContactMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DelMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NewDelMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FacebookInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ModUserImg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ModDisturbSetting_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ModNotifyStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ModMicroBlogInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Report_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InviteFriendOpen_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ModUserDomainEmail_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DelUserDomainEmail_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FunctionSwitch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WebWxFunctionSwitch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PluginInstall_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ModTXNewsCategory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MediaNoteOpLog_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GmailSwitchOplog_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UpdateStatOpLog_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KVStatItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KVStatOpLog_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KVCmd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ThemeOpLog_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ModDescription_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OplogRet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OplogRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OplogResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "mmsync.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 53);
}

}  // namespace

void TableStruct::Shutdown() {
  _InitBuffer_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _InitRequest_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _InitResponse_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _KeyBuffer_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _NewInitRequest_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _NewInitResponse_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _SyncRequest_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _SyncResponse_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _KeyVal_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _SyncKey_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _NewSyncRequest_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _NewSyncResponse_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _SyncFriendRequest_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _SyncFriendResponse_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _OpenQQMicroBlog_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _ModChatRoomNotify_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _CloseMicroBlog_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _ModChatRoomMember_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _QuitChatRoom_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _ModChatRoomTopic_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _ModChatRoomMemberDisplayName_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _ModChatRoomMemberFlag_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _AddMsg_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _ModMsgStatus_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _DelContact_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _DelChatContact_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _DelContactMsg_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _DelMsg_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _NewDelMsg_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _FacebookInfo_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _ModUserImg_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _ModDisturbSetting_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _ModNotifyStatus_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _ModMicroBlogInfo_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _Report_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
  _InviteFriendOpen_default_instance_.Shutdown();
  delete file_level_metadata[35].reflection;
  _ModUserDomainEmail_default_instance_.Shutdown();
  delete file_level_metadata[36].reflection;
  _DelUserDomainEmail_default_instance_.Shutdown();
  delete file_level_metadata[37].reflection;
  _FunctionSwitch_default_instance_.Shutdown();
  delete file_level_metadata[38].reflection;
  _WebWxFunctionSwitch_default_instance_.Shutdown();
  delete file_level_metadata[39].reflection;
  _PluginInstall_default_instance_.Shutdown();
  delete file_level_metadata[40].reflection;
  _ModTXNewsCategory_default_instance_.Shutdown();
  delete file_level_metadata[41].reflection;
  _MediaNoteOpLog_default_instance_.Shutdown();
  delete file_level_metadata[42].reflection;
  _GmailSwitchOplog_default_instance_.Shutdown();
  delete file_level_metadata[43].reflection;
  _UpdateStatOpLog_default_instance_.Shutdown();
  delete file_level_metadata[44].reflection;
  _KVStatItem_default_instance_.Shutdown();
  delete file_level_metadata[45].reflection;
  _KVStatOpLog_default_instance_.Shutdown();
  delete file_level_metadata[46].reflection;
  _KVCmd_default_instance_.Shutdown();
  delete file_level_metadata[47].reflection;
  _ThemeOpLog_default_instance_.Shutdown();
  delete file_level_metadata[48].reflection;
  _ModDescription_default_instance_.Shutdown();
  delete file_level_metadata[49].reflection;
  _OplogRet_default_instance_.Shutdown();
  delete file_level_metadata[50].reflection;
  _OplogRequest_default_instance_.Shutdown();
  delete file_level_metadata[51].reflection;
  _OplogResponse_default_instance_.Shutdown();
  delete file_level_metadata[52].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::micromsg::protobuf_mmbuiltintype_2eproto::InitDefaults();
  ::micromsg::protobuf_mmbase_2eproto::InitDefaults();
  _InitBuffer_default_instance_.DefaultConstruct();
  _InitRequest_default_instance_.DefaultConstruct();
  _InitResponse_default_instance_.DefaultConstruct();
  _KeyBuffer_default_instance_.DefaultConstruct();
  _NewInitRequest_default_instance_.DefaultConstruct();
  _NewInitResponse_default_instance_.DefaultConstruct();
  _SyncRequest_default_instance_.DefaultConstruct();
  _SyncResponse_default_instance_.DefaultConstruct();
  _KeyVal_default_instance_.DefaultConstruct();
  _SyncKey_default_instance_.DefaultConstruct();
  _NewSyncRequest_default_instance_.DefaultConstruct();
  _NewSyncResponse_default_instance_.DefaultConstruct();
  _SyncFriendRequest_default_instance_.DefaultConstruct();
  _SyncFriendResponse_default_instance_.DefaultConstruct();
  _OpenQQMicroBlog_default_instance_.DefaultConstruct();
  _ModChatRoomNotify_default_instance_.DefaultConstruct();
  _CloseMicroBlog_default_instance_.DefaultConstruct();
  _ModChatRoomMember_default_instance_.DefaultConstruct();
  _QuitChatRoom_default_instance_.DefaultConstruct();
  _ModChatRoomTopic_default_instance_.DefaultConstruct();
  _ModChatRoomMemberDisplayName_default_instance_.DefaultConstruct();
  _ModChatRoomMemberFlag_default_instance_.DefaultConstruct();
  _AddMsg_default_instance_.DefaultConstruct();
  _ModMsgStatus_default_instance_.DefaultConstruct();
  _DelContact_default_instance_.DefaultConstruct();
  _DelChatContact_default_instance_.DefaultConstruct();
  _DelContactMsg_default_instance_.DefaultConstruct();
  _DelMsg_default_instance_.DefaultConstruct();
  _NewDelMsg_default_instance_.DefaultConstruct();
  _FacebookInfo_default_instance_.DefaultConstruct();
  _ModUserImg_default_instance_.DefaultConstruct();
  _ModDisturbSetting_default_instance_.DefaultConstruct();
  _ModNotifyStatus_default_instance_.DefaultConstruct();
  _ModMicroBlogInfo_default_instance_.DefaultConstruct();
  _Report_default_instance_.DefaultConstruct();
  _InviteFriendOpen_default_instance_.DefaultConstruct();
  _ModUserDomainEmail_default_instance_.DefaultConstruct();
  _DelUserDomainEmail_default_instance_.DefaultConstruct();
  _FunctionSwitch_default_instance_.DefaultConstruct();
  _WebWxFunctionSwitch_default_instance_.DefaultConstruct();
  _PluginInstall_default_instance_.DefaultConstruct();
  _ModTXNewsCategory_default_instance_.DefaultConstruct();
  _MediaNoteOpLog_default_instance_.DefaultConstruct();
  _GmailSwitchOplog_default_instance_.DefaultConstruct();
  _UpdateStatOpLog_default_instance_.DefaultConstruct();
  _KVStatItem_default_instance_.DefaultConstruct();
  _KVStatOpLog_default_instance_.DefaultConstruct();
  _KVCmd_default_instance_.DefaultConstruct();
  _ThemeOpLog_default_instance_.DefaultConstruct();
  _ModDescription_default_instance_.DefaultConstruct();
  _OplogRet_default_instance_.DefaultConstruct();
  _OplogRequest_default_instance_.DefaultConstruct();
  _OplogResponse_default_instance_.DefaultConstruct();
  _InitRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _InitRequest_default_instance_.get_mutable()->username_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _InitRequest_default_instance_.get_mutable()->buffer_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _InitResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _InitResponse_default_instance_.get_mutable()->buffer_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _KeyBuffer_default_instance_.get_mutable()->synckey_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _NewInitRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _NewInitRequest_default_instance_.get_mutable()->currentsynckey_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _NewInitRequest_default_instance_.get_mutable()->maxsynckey_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _NewInitResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _NewInitResponse_default_instance_.get_mutable()->currentsynckey_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _NewInitResponse_default_instance_.get_mutable()->maxsynckey_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _SyncRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _SyncRequest_default_instance_.get_mutable()->username_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _SyncRequest_default_instance_.get_mutable()->oplog_ = const_cast< ::micromsg::CmdList*>(
      ::micromsg::CmdList::internal_default_instance());
  _SyncResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _NewSyncRequest_default_instance_.get_mutable()->oplog_ = const_cast< ::micromsg::CmdList*>(
      ::micromsg::CmdList::internal_default_instance());
  _NewSyncRequest_default_instance_.get_mutable()->keybuf_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _NewSyncResponse_default_instance_.get_mutable()->cmdlist_ = const_cast< ::micromsg::CmdList*>(
      ::micromsg::CmdList::internal_default_instance());
  _NewSyncResponse_default_instance_.get_mutable()->keybuf_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _SyncFriendRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _SyncFriendRequest_default_instance_.get_mutable()->username_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _SyncFriendResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _OpenQQMicroBlog_default_instance_.get_mutable()->microblogusername_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _ModChatRoomNotify_default_instance_.get_mutable()->chatroomname_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _CloseMicroBlog_default_instance_.get_mutable()->microblogusername_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _ModChatRoomMember_default_instance_.get_mutable()->username_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _ModChatRoomMember_default_instance_.get_mutable()->nickname_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _ModChatRoomMember_default_instance_.get_mutable()->pyinitial_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _ModChatRoomMember_default_instance_.get_mutable()->quanpin_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _ModChatRoomMember_default_instance_.get_mutable()->imgbuf_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _ModChatRoomMember_default_instance_.get_mutable()->remark_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _ModChatRoomMember_default_instance_.get_mutable()->remarkpyinitial_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _ModChatRoomMember_default_instance_.get_mutable()->remarkquanpin_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _ModChatRoomMember_default_instance_.get_mutable()->snsuserinfo_ = const_cast< ::micromsg::SnsUserInfo*>(
      ::micromsg::SnsUserInfo::internal_default_instance());
  _ModChatRoomMember_default_instance_.get_mutable()->customizedinfo_ = const_cast< ::micromsg::CustomizedInfo*>(
      ::micromsg::CustomizedInfo::internal_default_instance());
  _QuitChatRoom_default_instance_.get_mutable()->chatroomname_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _QuitChatRoom_default_instance_.get_mutable()->username_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _ModChatRoomTopic_default_instance_.get_mutable()->chatroomname_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _ModChatRoomTopic_default_instance_.get_mutable()->chatroomtopic_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _AddMsg_default_instance_.get_mutable()->fromusername_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _AddMsg_default_instance_.get_mutable()->tousername_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _AddMsg_default_instance_.get_mutable()->content_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _AddMsg_default_instance_.get_mutable()->imgbuf_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _ModMsgStatus_default_instance_.get_mutable()->fromusername_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _ModMsgStatus_default_instance_.get_mutable()->tousername_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _DelContact_default_instance_.get_mutable()->username_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _DelChatContact_default_instance_.get_mutable()->username_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _DelContactMsg_default_instance_.get_mutable()->username_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _DelMsg_default_instance_.get_mutable()->username_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _ModDisturbSetting_default_instance_.get_mutable()->disturbsetting_ = const_cast< ::micromsg::DisturbSetting*>(
      ::micromsg::DisturbSetting::internal_default_instance());
  _ModNotifyStatus_default_instance_.get_mutable()->username_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _ModMicroBlogInfo_default_instance_.get_mutable()->username_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _ModUserDomainEmail_default_instance_.get_mutable()->email_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _DelUserDomainEmail_default_instance_.get_mutable()->username_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _DelUserDomainEmail_default_instance_.get_mutable()->email_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _KVCmd_default_instance_.get_mutable()->value_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _OplogRequest_default_instance_.get_mutable()->oplog_ = const_cast< ::micromsg::CmdList*>(
      ::micromsg::CmdList::internal_default_instance());
  _OplogResponse_default_instance_.get_mutable()->oplogret_ = const_cast< ::micromsg::OplogRet*>(
      ::micromsg::OplogRet::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\014mmsync.proto\022\010micromsg\032\023mmbuiltintype."
      "proto\032\014mmbase.proto\" \n\nInitBuffer\022\022\n\nMax"
      "SyncKey\030\001 \002(\r\"\270\001\n\013InitRequest\022*\n\013BaseReq"
      "uest\030\001 \002(\0132\025.micromsg.BaseRequest\022-\n\010Use"
      "rName\030\002 \002(\0132\033.micromsg.SKBuiltinString_t"
      "\022\017\n\007SyncKey\030\003 \002(\r\022+\n\006Buffer\030\004 \002(\0132\033.micr"
      "omsg.SKBuiltinString_t\022\020\n\010Language\030\005 \001(\t"
      "\"\330\001\n\014InitResponse\022,\n\014BaseResponse\030\001 \002(\0132"
      "\026.micromsg.BaseResponse\022\022\n\nNewSyncKey\030\002 "
      "\002(\r\022\024\n\014ContinueFlag\030\003 \002(\005\022\020\n\010CmdCount\030\004 "
      "\002(\r\022\"\n\007CmdList\030\005 \003(\0132\021.micromsg.CmdItem\022"
      "+\n\006Buffer\030\006 \002(\0132\033.micromsg.SKBuiltinStri"
      "ng_t\022\r\n\005Ratio\030\007 \002(\r\"9\n\tKeyBuffer\022,\n\007sync"
      "key\030\001 \002(\0132\033.micromsg.SKBuiltinString_t\"\306"
      "\001\n\016NewInitRequest\022*\n\013BaseRequest\030\001 \002(\0132\025"
      ".micromsg.BaseRequest\022\020\n\010UserName\030\002 \001(\t\022"
      "3\n\016CurrentSynckey\030\003 \002(\0132\033.micromsg.SKBui"
      "ltinBuffer_t\022/\n\nMaxSynckey\030\004 \002(\0132\033.micro"
      "msg.SKBuiltinBuffer_t\022\020\n\010Language\030\005 \001(\t\""
      "\226\002\n\017NewInitResponse\022,\n\014BaseResponse\030\001 \002("
      "\0132\026.micromsg.BaseResponse\0223\n\016CurrentSync"
      "key\030\002 \002(\0132\033.micromsg.SKBuiltinBuffer_t\022/"
      "\n\nMaxSynckey\030\003 \002(\0132\033.micromsg.SKBuiltinB"
      "uffer_t\022\024\n\014ContinueFlag\030\004 \002(\r\022\024\n\014SelectB"
      "itmap\030\005 \002(\r\022\020\n\010CmdCount\030\006 \002(\r\022\"\n\007CmdList"
      "\030\007 \003(\0132\021.micromsg.CmdItem\022\r\n\005Ratio\030\010 \002(\r"
      "\"\312\001\n\013SyncRequest\022*\n\013BaseRequest\030\001 \002(\0132\025."
      "micromsg.BaseRequest\022-\n\010UserName\030\002 \002(\0132\033"
      ".micromsg.SKBuiltinString_t\022\017\n\007SyncKey\030\003"
      " \002(\r\022\r\n\005Scene\030\004 \002(\005\022\016\n\006Option\030\005 \002(\005\022 \n\005O"
      "plog\030\006 \002(\0132\021.micromsg.CmdList\022\016\n\006KeyBuf\030"
      "\007 \001(\t\"\342\001\n\014SyncResponse\022,\n\014BaseResponse\030\001"
      " \002(\0132\026.micromsg.BaseResponse\022\022\n\nNewSyncK"
      "ey\030\002 \002(\r\022\024\n\014ContinueFlag\030\003 \002(\005\022\020\n\010CmdCou"
      "nt\030\004 \002(\r\022\"\n\007CmdList\030\005 \003(\0132\021.micromsg.Cmd"
      "Item\022\020\n\010OOBCount\030\006 \002(\r\022\"\n\007OOBList\030\007 \003(\0132"
      "\021.micromsg.CmdItem\022\016\n\006KeyBuf\030\010 \001(\t\"\"\n\006Ke"
      "yVal\022\013\n\003Key\030\001 \002(\r\022\013\n\003Val\030\002 \002(\r\":\n\007SyncKe"
      "y\022\020\n\010KeyCount\030\001 \002(\r\022\035\n\003Key\030\002 \003(\0132\020.micro"
      "msg.KeyVal\"\224\001\n\016NewSyncRequest\022 \n\005Oplog\030\001"
      " \002(\0132\021.micromsg.CmdList\022\020\n\010Selector\030\002 \002("
      "\r\022+\n\006KeyBuf\030\003 \002(\0132\033.micromsg.SKBuiltinBu"
      "ffer_t\022\r\n\005Scene\030\004 \001(\r\022\022\n\nDeviceType\030\005 \001("
      "\t\"\254\001\n\017NewSyncResponse\022\013\n\003Ret\030\001 \002(\005\022\"\n\007Cm"
      "dList\030\002 \002(\0132\021.micromsg.CmdList\022\024\n\014Contin"
      "ueFlag\030\003 \002(\r\022+\n\006KeyBuf\030\004 \002(\0132\033.micromsg."
      "SKBuiltinBuffer_t\022\016\n\006Status\030\005 \001(\r\022\025\n\rOnl"
      "ineVersion\030\006 \001(\r\"\216\001\n\021SyncFriendRequest\022*"
      "\n\013BaseRequest\030\001 \002(\0132\025.micromsg.BaseReque"
      "st\022-\n\010UserName\030\002 \002(\0132\033.micromsg.SKBuilti"
      "nString_t\022\017\n\007SyncKey\030\003 \002(\r\022\r\n\005Scene\030\004 \002("
      "\005\"\242\001\n\022SyncFriendResponse\022,\n\014BaseResponse"
      "\030\001 \002(\0132\026.micromsg.BaseResponse\022\022\n\nNewSyn"
      "cKey\030\002 \002(\r\022\024\n\014ContinueFlag\030\003 \002(\005\022\020\n\010CmdC"
      "ount\030\004 \002(\r\022\"\n\007CmdList\030\005 \003(\0132\021.micromsg.C"
      "mdItem\"I\n\017OpenQQMicroBlog\0226\n\021MicroBlogUs"
      "erName\030\001 \002(\0132\033.micromsg.SKBuiltinString_"
      "t\"V\n\021ModChatRoomNotify\0221\n\014ChatRoomName\030\001"
      " \002(\0132\033.micromsg.SKBuiltinString_t\022\016\n\006Sta"
      "tus\030\002 \002(\r\"H\n\016CloseMicroBlog\0226\n\021MicroBlog"
      "UserName\030\001 \002(\0132\033.micromsg.SKBuiltinStrin"
      "g_t\"\207\007\n\021ModChatRoomMember\022-\n\010UserName\030\001 "
      "\002(\0132\033.micromsg.SKBuiltinString_t\022-\n\010Nick"
      "Name\030\002 \002(\0132\033.micromsg.SKBuiltinString_t\022"
      ".\n\tPYInitial\030\003 \002(\0132\033.micromsg.SKBuiltinS"
      "tring_t\022,\n\007QuanPin\030\004 \002(\0132\033.micromsg.SKBu"
      "iltinString_t\022\013\n\003Sex\030\005 \002(\005\022+\n\006ImgBuf\030\006 \002"
      "(\0132\033.micromsg.SKBuiltinBuffer_t\022\017\n\007ImgFl"
      "ag\030\007 \002(\r\022+\n\006Remark\030\010 \002(\0132\033.micromsg.SKBu"
      "iltinString_t\0224\n\017RemarkPYInitial\030\t \002(\0132\033"
      ".micromsg.SKBuiltinString_t\0222\n\rRemarkQua"
      "nPin\030\n \002(\0132\033.micromsg.SKBuiltinString_t\022"
      "\023\n\013ContactType\030\013 \002(\r\022\020\n\010Province\030\014 \001(\t\022\014"
      "\n\004City\030\r \001(\t\022\021\n\tSignature\030\016 \001(\t\022\024\n\014Perso"
      "nalCard\030\017 \001(\r\022\022\n\nVerifyFlag\030\020 \001(\r\022\022\n\nVer"
      "ifyInfo\030\021 \001(\t\022\r\n\005Weibo\030\022 \001(\t\022\025\n\rVerifyCo"
      "ntent\030\023 \001(\t\022\025\n\rWeiboNickname\030\024 \001(\t\022\021\n\tWe"
      "iboFlag\030\025 \001(\r\022\022\n\nAlbumStyle\030\026 \001(\005\022\021\n\tAlb"
      "umFlag\030\027 \001(\005\022\024\n\014AlbumBGImgID\030\030 \001(\t\022\r\n\005Al"
      "ias\030\031 \001(\t\022*\n\013SnsUserInfo\030\032 \001(\0132\025.microms"
      "g.SnsUserInfo\022\017\n\007Country\030\033 \001(\t\022\025\n\rBigHea"
      "dImgUrl\030\034 \001(\t\022\027\n\017SmallHeadImgUrl\030\035 \001(\t\022\023"
      "\n\013MyBrandList\030\036 \001(\t\0220\n\016CustomizedInfo\030\037 "
      "\001(\0132\030.micromsg.CustomizedInfo\"p\n\014QuitCha"
      "tRoom\0221\n\014ChatRoomName\030\001 \002(\0132\033.micromsg.S"
      "KBuiltinString_t\022-\n\010UserName\030\002 \002(\0132\033.mic"
      "romsg.SKBuiltinString_t\"y\n\020ModChatRoomTo"
      "pic\0221\n\014ChatRoomName\030\001 \002(\0132\033.micromsg.SKB"
      "uiltinString_t\0222\n\rChatRoomTopic\030\002 \002(\0132\033."
      "micromsg.SKBuiltinString_t\"[\n\034ModChatRoo"
      "mMemberDisplayName\022\024\n\014ChatRoomName\030\001 \001(\t"
      "\022\020\n\010UserName\030\002 \001(\t\022\023\n\013DisplayName\030\003 \001(\t\""
      "b\n\025ModChatRoomMemberFlag\022\024\n\014ChatRoomName"
      "\030\001 \001(\t\022\020\n\010UserName\030\002 \001(\t\022\022\n\nFlagSwitch\030\003"
      " \002(\r\022\r\n\005Value\030\004 \002(\r\"\330\002\n\006AddMsg\022\r\n\005MsgId\030"
      "\001 \002(\005\0221\n\014FromUserName\030\002 \002(\0132\033.micromsg.S"
      "KBuiltinString_t\022/\n\nToUserName\030\003 \002(\0132\033.m"
      "icromsg.SKBuiltinString_t\022\017\n\007MsgType\030\004 \002"
      "(\005\022,\n\007Content\030\005 \002(\0132\033.micromsg.SKBuiltin"
      "String_t\022\016\n\006Status\030\006 \002(\r\022\021\n\tImgStatus\030\007 "
      "\002(\r\022+\n\006ImgBuf\030\010 \002(\0132\033.micromsg.SKBuiltin"
      "Buffer_t\022\022\n\nCreateTime\030\t \002(\r\022\021\n\tMsgSourc"
      "e\030\n \001(\t\022\023\n\013PushContent\030\013 \001(\t\022\020\n\010NewMsgId"
      "\030\014 \001(\003\"\243\001\n\014ModMsgStatus\022\r\n\005MsgId\030\001 \002(\005\0221"
      "\n\014FromUserName\030\002 \002(\0132\033.micromsg.SKBuilti"
      "nString_t\022/\n\nToUserName\030\003 \002(\0132\033.micromsg"
      ".SKBuiltinString_t\022\016\n\006Status\030\004 \002(\r\022\020\n\010Ne"
      "wMsgId\030\005 \001(\003\";\n\nDelContact\022-\n\010UserName\030\001"
      " \002(\0132\033.micromsg.SKBuiltinString_t\"\?\n\016Del"
      "ChatContact\022-\n\010UserName\030\001 \002(\0132\033.micromsg"
      ".SKBuiltinString_t\"b\n\rDelContactMsg\022-\n\010U"
      "serName\030\001 \002(\0132\033.micromsg.SKBuiltinString"
      "_t\022\020\n\010MaxMsgId\030\002 \002(\005\022\020\n\010NewMsgId\030\003 \001(\003\"]"
      "\n\006DelMsg\022-\n\010UserName\030\001 \002(\0132\033.micromsg.SK"
      "BuiltinString_t\022\r\n\005Count\030\002 \002(\r\022\025\n\tMsgIdL"
      "ist\030\003 \003(\005B\002\020\001\"g\n\tNewDelMsg\022\024\n\014FromUserNa"
      "me\030\001 \001(\t\022\022\n\nToUserName\030\002 \001(\t\022\r\n\005MsgId\030\003 "
      "\002(\005\022\017\n\007MsgType\030\004 \002(\r\022\020\n\010NewMsgId\030\005 \001(\003\"8"
      "\n\014FacebookInfo\022\013\n\003Uid\030\001 \002(\004\022\014\n\004Name\030\002 \001("
      "\t\022\r\n\005Token\030\003 \001(\t\"}\n\nModUserImg\022\017\n\007ImgTyp"
      "e\030\001 \002(\r\022\016\n\006ImgLen\030\002 \002(\r\022\016\n\006ImgBuf\030\003 \001(\014\022"
      "\016\n\006ImgMd5\030\004 \001(\t\022\025\n\rBigHeadImgUrl\030\005 \001(\t\022\027"
      "\n\017SmallHeadImgUrl\030\006 \001(\t\"E\n\021ModDisturbSet"
      "ting\0220\n\016DisturbSetting\030\001 \002(\0132\030.micromsg."
      "DisturbSetting\"P\n\017ModNotifyStatus\022-\n\010Use"
      "rName\030\001 \002(\0132\033.micromsg.SKBuiltinString_t"
      "\022\016\n\006Status\030\002 \002(\r\"\202\001\n\020ModMicroBlogInfo\022-\n"
      "\010UserName\030\001 \002(\0132\033.micromsg.SKBuiltinStri"
      "ng_t\022\025\n\rMicroBlogType\030\002 \002(\r\022\024\n\014NotifySta"
      "tus\030\003 \002(\r\022\022\n\nDeleteFlag\030\004 \002(\r\"\025\n\006Report\022"
      "\013\n\003Log\030\001 \001(\t\"8\n\020InviteFriendOpen\022\020\n\010User"
      "Name\030\001 \001(\t\022\022\n\nFriendType\030\002 \002(\r\"P\n\022ModUse"
      "rDomainEmail\022\016\n\006Status\030\001 \002(\r\022*\n\005Email\030\002 "
      "\002(\0132\033.micromsg.SKBuiltinString_t\"o\n\022DelU"
      "serDomainEmail\022-\n\010UserName\030\001 \002(\0132\033.micro"
      "msg.SKBuiltinString_t\022*\n\005Email\030\002 \002(\0132\033.m"
      "icromsg.SKBuiltinString_t\"9\n\016FunctionSwi"
      "tch\022\022\n\nFunctionId\030\001 \002(\r\022\023\n\013SwitchValue\030\002"
      " \002(\r\">\n\023WebWxFunctionSwitch\022\022\n\nFunctionI"
      "d\030\001 \002(\r\022\023\n\013SwitchValue\030\002 \002(\r\"8\n\rPluginIn"
      "stall\022\022\n\nPluginFlag\030\001 \002(\r\022\023\n\013IsUnInstall"
      "\030\002 \002(\r\"+\n\021ModTXNewsCategory\022\026\n\016TXNewsCat"
      "egory\030\001 \002(\r\"6\n\016MediaNoteOpLog\022\022\n\nWriteCo"
      "unt\030\001 \002(\r\022\020\n\010NoteType\030\002 \002(\005\":\n\020GmailSwit"
      "chOplog\022\021\n\tGmailAcct\030\001 \001(\t\022\023\n\013GmailSwitc"
      "h\030\002 \002(\r\"!\n\017UpdateStatOpLog\022\016\n\006OpCode\030\001 \002"
      "(\r\"(\n\nKVStatItem\022\013\n\003Key\030\001 \002(\r\022\r\n\005Value\030\002"
      " \001(\t\"@\n\013KVStatOpLog\022\r\n\005Count\030\001 \002(\r\022\"\n\004Li"
      "st\030\002 \003(\0132\024.micromsg.KVStatItem\"@\n\005KVCmd\022"
      "\013\n\003Key\030\001 \002(\r\022*\n\005Value\030\002 \002(\0132\033.micromsg.S"
      "KBuiltinBuffer_t\"(\n\nThemeOpLog\022\013\n\003Key\030\001 "
      "\002(\r\022\r\n\005Value\030\002 \001(\t\"7\n\016ModDescription\022\027\n\017"
      "ContactUsername\030\001 \001(\t\022\014\n\004Desc\030\002 \001(\t\"*\n\010O"
      "plogRet\022\r\n\005Count\030\001 \002(\r\022\017\n\003Ret\030\002 \003(\005B\002\020\001\""
      "0\n\014OplogRequest\022 \n\005Oplog\030\001 \002(\0132\021.microms"
      "g.CmdList\"B\n\rOplogResponse\022\013\n\003Ret\030\001 \002(\005\022"
      "$\n\010OplogRet\030\002 \002(\0132\022.micromsg.OplogRet"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 6277);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mmsync.proto", &protobuf_RegisterTypes);
  ::micromsg::protobuf_mmbuiltintype_2eproto::AddDescriptors();
  ::micromsg::protobuf_mmbase_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_mmsync_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitBuffer::kMaxSyncKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitBuffer::InitBuffer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.InitBuffer)
}
InitBuffer::InitBuffer(const InitBuffer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  maxsynckey_ = from.maxsynckey_;
  // @@protoc_insertion_point(copy_constructor:micromsg.InitBuffer)
}

void InitBuffer::SharedCtor() {
  _cached_size_ = 0;
  maxsynckey_ = 0u;
}

InitBuffer::~InitBuffer() {
  // @@protoc_insertion_point(destructor:micromsg.InitBuffer)
  SharedDtor();
}

void InitBuffer::SharedDtor() {
}

void InitBuffer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitBuffer::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InitBuffer& InitBuffer::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

InitBuffer* InitBuffer::New(::google::protobuf::Arena* arena) const {
  InitBuffer* n = new InitBuffer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InitBuffer::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.InitBuffer)
  maxsynckey_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InitBuffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.InitBuffer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 MaxSyncKey = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_maxsynckey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxsynckey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.InitBuffer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.InitBuffer)
  return false;
#undef DO_
}

void InitBuffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.InitBuffer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 MaxSyncKey = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->maxsynckey(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.InitBuffer)
}

::google::protobuf::uint8* InitBuffer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.InitBuffer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 MaxSyncKey = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->maxsynckey(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.InitBuffer)
  return target;
}

size_t InitBuffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.InitBuffer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 MaxSyncKey = 1;
  if (has_maxsynckey()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maxsynckey());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitBuffer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.InitBuffer)
  GOOGLE_DCHECK_NE(&from, this);
  const InitBuffer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InitBuffer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.InitBuffer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.InitBuffer)
    MergeFrom(*source);
  }
}

void InitBuffer::MergeFrom(const InitBuffer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.InitBuffer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_maxsynckey()) {
    set_maxsynckey(from.maxsynckey());
  }
}

void InitBuffer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.InitBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitBuffer::CopyFrom(const InitBuffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.InitBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitBuffer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void InitBuffer::Swap(InitBuffer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitBuffer::InternalSwap(InitBuffer* other) {
  std::swap(maxsynckey_, other->maxsynckey_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InitBuffer::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InitBuffer

// required uint32 MaxSyncKey = 1;
bool InitBuffer::has_maxsynckey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InitBuffer::set_has_maxsynckey() {
  _has_bits_[0] |= 0x00000001u;
}
void InitBuffer::clear_has_maxsynckey() {
  _has_bits_[0] &= ~0x00000001u;
}
void InitBuffer::clear_maxsynckey() {
  maxsynckey_ = 0u;
  clear_has_maxsynckey();
}
::google::protobuf::uint32 InitBuffer::maxsynckey() const {
  // @@protoc_insertion_point(field_get:micromsg.InitBuffer.MaxSyncKey)
  return maxsynckey_;
}
void InitBuffer::set_maxsynckey(::google::protobuf::uint32 value) {
  set_has_maxsynckey();
  maxsynckey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.InitBuffer.MaxSyncKey)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitRequest::kBaseRequestFieldNumber;
const int InitRequest::kUserNameFieldNumber;
const int InitRequest::kSyncKeyFieldNumber;
const int InitRequest::kBufferFieldNumber;
const int InitRequest::kLanguageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitRequest::InitRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.InitRequest)
}
InitRequest::InitRequest(const InitRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_language()) {
    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_username()) {
    username_ = new ::micromsg::SKBuiltinString_t(*from.username_);
  } else {
    username_ = NULL;
  }
  if (from.has_buffer()) {
    buffer_ = new ::micromsg::SKBuiltinString_t(*from.buffer_);
  } else {
    buffer_ = NULL;
  }
  synckey_ = from.synckey_;
  // @@protoc_insertion_point(copy_constructor:micromsg.InitRequest)
}

void InitRequest::SharedCtor() {
  _cached_size_ = 0;
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&synckey_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(synckey_));
}

InitRequest::~InitRequest() {
  // @@protoc_insertion_point(destructor:micromsg.InitRequest)
  SharedDtor();
}

void InitRequest::SharedDtor() {
  language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete username_;
  }
  if (this != internal_default_instance()) {
    delete buffer_;
  }
}

void InitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitRequest::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InitRequest& InitRequest::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

InitRequest* InitRequest::New(::google::protobuf::Arena* arena) const {
  InitRequest* n = new InitRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.InitRequest)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_language()) {
      GOOGLE_DCHECK(!language_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*language_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_username()) {
      GOOGLE_DCHECK(username_ != NULL);
      username_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_buffer()) {
      GOOGLE_DCHECK(buffer_ != NULL);
      buffer_->::micromsg::SKBuiltinString_t::Clear();
    }
  }
  synckey_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.InitRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t UserName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_username()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 SyncKey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_synckey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &synckey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t Buffer = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Language = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.InitRequest.Language");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.InitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.InitRequest)
  return false;
#undef DO_
}

void InitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.InitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required .micromsg.SKBuiltinString_t UserName = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->username_, output);
  }

  // required uint32 SyncKey = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->synckey(), output);
  }

  // required .micromsg.SKBuiltinString_t Buffer = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->buffer_, output);
  }

  // optional string Language = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.InitRequest.Language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->language(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.InitRequest)
}

::google::protobuf::uint8* InitRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.InitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t UserName = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->username_, deterministic, target);
  }

  // required uint32 SyncKey = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->synckey(), target);
  }

  // required .micromsg.SKBuiltinString_t Buffer = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->buffer_, deterministic, target);
  }

  // optional string Language = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.InitRequest.Language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->language(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.InitRequest)
  return target;
}

size_t InitRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.InitRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_username()) {
    // required .micromsg.SKBuiltinString_t UserName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->username_);
  }

  if (has_buffer()) {
    // required .micromsg.SKBuiltinString_t Buffer = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->buffer_);
  }

  if (has_synckey()) {
    // required uint32 SyncKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->synckey());
  }

  return total_size;
}
size_t InitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.InitRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001e) ^ 0x0000001e) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.SKBuiltinString_t UserName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->username_);

    // required .micromsg.SKBuiltinString_t Buffer = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->buffer_);

    // required uint32 SyncKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->synckey());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string Language = 5;
  if (has_language()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->language());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.InitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InitRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InitRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.InitRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.InitRequest)
    MergeFrom(*source);
  }
}

void InitRequest::MergeFrom(const InitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.InitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_language();
      language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_username()->::micromsg::SKBuiltinString_t::MergeFrom(from.username());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_buffer()->::micromsg::SKBuiltinString_t::MergeFrom(from.buffer());
    }
    if (cached_has_bits & 0x00000010u) {
      synckey_ = from.synckey_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InitRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.InitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitRequest::CopyFrom(const InitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.InitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void InitRequest::Swap(InitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitRequest::InternalSwap(InitRequest* other) {
  language_.Swap(&other->language_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(username_, other->username_);
  std::swap(buffer_, other->buffer_);
  std::swap(synckey_, other->synckey_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InitRequest::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InitRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool InitRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InitRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void InitRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void InitRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& InitRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.InitRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* InitRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.InitRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* InitRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.InitRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void InitRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.InitRequest.BaseRequest)
}

// required .micromsg.SKBuiltinString_t UserName = 2;
bool InitRequest::has_username() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InitRequest::set_has_username() {
  _has_bits_[0] |= 0x00000004u;
}
void InitRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000004u;
}
void InitRequest::clear_username() {
  if (username_ != NULL) username_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_username();
}
const ::micromsg::SKBuiltinString_t& InitRequest::username() const {
  // @@protoc_insertion_point(field_get:micromsg.InitRequest.UserName)
  return username_ != NULL ? *username_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* InitRequest::mutable_username() {
  set_has_username();
  if (username_ == NULL) {
    username_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.InitRequest.UserName)
  return username_;
}
::micromsg::SKBuiltinString_t* InitRequest::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.InitRequest.UserName)
  clear_has_username();
  ::micromsg::SKBuiltinString_t* temp = username_;
  username_ = NULL;
  return temp;
}
void InitRequest::set_allocated_username(::micromsg::SKBuiltinString_t* username) {
  delete username_;
  username_ = username;
  if (username) {
    set_has_username();
  } else {
    clear_has_username();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.InitRequest.UserName)
}

// required uint32 SyncKey = 3;
bool InitRequest::has_synckey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void InitRequest::set_has_synckey() {
  _has_bits_[0] |= 0x00000010u;
}
void InitRequest::clear_has_synckey() {
  _has_bits_[0] &= ~0x00000010u;
}
void InitRequest::clear_synckey() {
  synckey_ = 0u;
  clear_has_synckey();
}
::google::protobuf::uint32 InitRequest::synckey() const {
  // @@protoc_insertion_point(field_get:micromsg.InitRequest.SyncKey)
  return synckey_;
}
void InitRequest::set_synckey(::google::protobuf::uint32 value) {
  set_has_synckey();
  synckey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.InitRequest.SyncKey)
}

// required .micromsg.SKBuiltinString_t Buffer = 4;
bool InitRequest::has_buffer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void InitRequest::set_has_buffer() {
  _has_bits_[0] |= 0x00000008u;
}
void InitRequest::clear_has_buffer() {
  _has_bits_[0] &= ~0x00000008u;
}
void InitRequest::clear_buffer() {
  if (buffer_ != NULL) buffer_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_buffer();
}
const ::micromsg::SKBuiltinString_t& InitRequest::buffer() const {
  // @@protoc_insertion_point(field_get:micromsg.InitRequest.Buffer)
  return buffer_ != NULL ? *buffer_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* InitRequest::mutable_buffer() {
  set_has_buffer();
  if (buffer_ == NULL) {
    buffer_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.InitRequest.Buffer)
  return buffer_;
}
::micromsg::SKBuiltinString_t* InitRequest::release_buffer() {
  // @@protoc_insertion_point(field_release:micromsg.InitRequest.Buffer)
  clear_has_buffer();
  ::micromsg::SKBuiltinString_t* temp = buffer_;
  buffer_ = NULL;
  return temp;
}
void InitRequest::set_allocated_buffer(::micromsg::SKBuiltinString_t* buffer) {
  delete buffer_;
  buffer_ = buffer;
  if (buffer) {
    set_has_buffer();
  } else {
    clear_has_buffer();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.InitRequest.Buffer)
}

// optional string Language = 5;
bool InitRequest::has_language() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InitRequest::set_has_language() {
  _has_bits_[0] |= 0x00000001u;
}
void InitRequest::clear_has_language() {
  _has_bits_[0] &= ~0x00000001u;
}
void InitRequest::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_language();
}
const ::std::string& InitRequest::language() const {
  // @@protoc_insertion_point(field_get:micromsg.InitRequest.Language)
  return language_.GetNoArena();
}
void InitRequest::set_language(const ::std::string& value) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.InitRequest.Language)
}
#if LANG_CXX11
void InitRequest::set_language(::std::string&& value) {
  set_has_language();
  language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.InitRequest.Language)
}
#endif
void InitRequest::set_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.InitRequest.Language)
}
void InitRequest::set_language(const char* value, size_t size) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.InitRequest.Language)
}
::std::string* InitRequest::mutable_language() {
  set_has_language();
  // @@protoc_insertion_point(field_mutable:micromsg.InitRequest.Language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InitRequest::release_language() {
  // @@protoc_insertion_point(field_release:micromsg.InitRequest.Language)
  clear_has_language();
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InitRequest::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    set_has_language();
  } else {
    clear_has_language();
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:micromsg.InitRequest.Language)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitResponse::kBaseResponseFieldNumber;
const int InitResponse::kNewSyncKeyFieldNumber;
const int InitResponse::kContinueFlagFieldNumber;
const int InitResponse::kCmdCountFieldNumber;
const int InitResponse::kCmdListFieldNumber;
const int InitResponse::kBufferFieldNumber;
const int InitResponse::kRatioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitResponse::InitResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.InitResponse)
}
InitResponse::InitResponse(const InitResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      cmdlist_(from.cmdlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_buffer()) {
    buffer_ = new ::micromsg::SKBuiltinString_t(*from.buffer_);
  } else {
    buffer_ = NULL;
  }
  ::memcpy(&newsynckey_, &from.newsynckey_,
    reinterpret_cast<char*>(&ratio_) -
    reinterpret_cast<char*>(&newsynckey_) + sizeof(ratio_));
  // @@protoc_insertion_point(copy_constructor:micromsg.InitResponse)
}

void InitResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&ratio_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(ratio_));
}

InitResponse::~InitResponse() {
  // @@protoc_insertion_point(destructor:micromsg.InitResponse)
  SharedDtor();
}

void InitResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete buffer_;
  }
}

void InitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitResponse::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InitResponse& InitResponse::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

InitResponse* InitResponse::New(::google::protobuf::Arena* arena) const {
  InitResponse* n = new InitResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.InitResponse)
  cmdlist_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_buffer()) {
      GOOGLE_DCHECK(buffer_ != NULL);
      buffer_->::micromsg::SKBuiltinString_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 60u) {
    ::memset(&newsynckey_, 0, reinterpret_cast<char*>(&ratio_) -
      reinterpret_cast<char*>(&newsynckey_) + sizeof(ratio_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.InitResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 NewSyncKey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_newsynckey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newsynckey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 ContinueFlag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_continueflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &continueflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 CmdCount = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_cmdcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmdcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.CmdItem CmdList = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cmdlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t Buffer = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Ratio = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.InitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.InitResponse)
  return false;
#undef DO_
}

void InitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.InitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 NewSyncKey = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->newsynckey(), output);
  }

  // required int32 ContinueFlag = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->continueflag(), output);
  }

  // required uint32 CmdCount = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cmdcount(), output);
  }

  // repeated .micromsg.CmdItem CmdList = 5;
  for (unsigned int i = 0, n = this->cmdlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->cmdlist(i), output);
  }

  // required .micromsg.SKBuiltinString_t Buffer = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->buffer_, output);
  }

  // required uint32 Ratio = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->ratio(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.InitResponse)
}

::google::protobuf::uint8* InitResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.InitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 NewSyncKey = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->newsynckey(), target);
  }

  // required int32 ContinueFlag = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->continueflag(), target);
  }

  // required uint32 CmdCount = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cmdcount(), target);
  }

  // repeated .micromsg.CmdItem CmdList = 5;
  for (unsigned int i = 0, n = this->cmdlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->cmdlist(i), deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t Buffer = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->buffer_, deterministic, target);
  }

  // required uint32 Ratio = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->ratio(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.InitResponse)
  return target;
}

size_t InitResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.InitResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_buffer()) {
    // required .micromsg.SKBuiltinString_t Buffer = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->buffer_);
  }

  if (has_newsynckey()) {
    // required uint32 NewSyncKey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->newsynckey());
  }

  if (has_continueflag()) {
    // required int32 ContinueFlag = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->continueflag());
  }

  if (has_cmdcount()) {
    // required uint32 CmdCount = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cmdcount());
  }

  if (has_ratio()) {
    // required uint32 Ratio = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ratio());
  }

  return total_size;
}
size_t InitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.InitResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required .micromsg.SKBuiltinString_t Buffer = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->buffer_);

    // required uint32 NewSyncKey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->newsynckey());

    // required int32 ContinueFlag = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->continueflag());

    // required uint32 CmdCount = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cmdcount());

    // required uint32 Ratio = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ratio());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.CmdItem CmdList = 5;
  {
    unsigned int count = this->cmdlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cmdlist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.InitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const InitResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InitResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.InitResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.InitResponse)
    MergeFrom(*source);
  }
}

void InitResponse::MergeFrom(const InitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.InitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cmdlist_.MergeFrom(from.cmdlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_buffer()->::micromsg::SKBuiltinString_t::MergeFrom(from.buffer());
    }
    if (cached_has_bits & 0x00000004u) {
      newsynckey_ = from.newsynckey_;
    }
    if (cached_has_bits & 0x00000008u) {
      continueflag_ = from.continueflag_;
    }
    if (cached_has_bits & 0x00000010u) {
      cmdcount_ = from.cmdcount_;
    }
    if (cached_has_bits & 0x00000020u) {
      ratio_ = from.ratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InitResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.InitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitResponse::CopyFrom(const InitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.InitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->cmdlist())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void InitResponse::Swap(InitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitResponse::InternalSwap(InitResponse* other) {
  cmdlist_.InternalSwap(&other->cmdlist_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(buffer_, other->buffer_);
  std::swap(newsynckey_, other->newsynckey_);
  std::swap(continueflag_, other->continueflag_);
  std::swap(cmdcount_, other->cmdcount_);
  std::swap(ratio_, other->ratio_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InitResponse::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InitResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool InitResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InitResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void InitResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void InitResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& InitResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.InitResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* InitResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.InitResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* InitResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.InitResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void InitResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.InitResponse.BaseResponse)
}

// required uint32 NewSyncKey = 2;
bool InitResponse::has_newsynckey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InitResponse::set_has_newsynckey() {
  _has_bits_[0] |= 0x00000004u;
}
void InitResponse::clear_has_newsynckey() {
  _has_bits_[0] &= ~0x00000004u;
}
void InitResponse::clear_newsynckey() {
  newsynckey_ = 0u;
  clear_has_newsynckey();
}
::google::protobuf::uint32 InitResponse::newsynckey() const {
  // @@protoc_insertion_point(field_get:micromsg.InitResponse.NewSyncKey)
  return newsynckey_;
}
void InitResponse::set_newsynckey(::google::protobuf::uint32 value) {
  set_has_newsynckey();
  newsynckey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.InitResponse.NewSyncKey)
}

// required int32 ContinueFlag = 3;
bool InitResponse::has_continueflag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void InitResponse::set_has_continueflag() {
  _has_bits_[0] |= 0x00000008u;
}
void InitResponse::clear_has_continueflag() {
  _has_bits_[0] &= ~0x00000008u;
}
void InitResponse::clear_continueflag() {
  continueflag_ = 0;
  clear_has_continueflag();
}
::google::protobuf::int32 InitResponse::continueflag() const {
  // @@protoc_insertion_point(field_get:micromsg.InitResponse.ContinueFlag)
  return continueflag_;
}
void InitResponse::set_continueflag(::google::protobuf::int32 value) {
  set_has_continueflag();
  continueflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.InitResponse.ContinueFlag)
}

// required uint32 CmdCount = 4;
bool InitResponse::has_cmdcount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void InitResponse::set_has_cmdcount() {
  _has_bits_[0] |= 0x00000010u;
}
void InitResponse::clear_has_cmdcount() {
  _has_bits_[0] &= ~0x00000010u;
}
void InitResponse::clear_cmdcount() {
  cmdcount_ = 0u;
  clear_has_cmdcount();
}
::google::protobuf::uint32 InitResponse::cmdcount() const {
  // @@protoc_insertion_point(field_get:micromsg.InitResponse.CmdCount)
  return cmdcount_;
}
void InitResponse::set_cmdcount(::google::protobuf::uint32 value) {
  set_has_cmdcount();
  cmdcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.InitResponse.CmdCount)
}

// repeated .micromsg.CmdItem CmdList = 5;
int InitResponse::cmdlist_size() const {
  return cmdlist_.size();
}
void InitResponse::clear_cmdlist() {
  cmdlist_.Clear();
}
const ::micromsg::CmdItem& InitResponse::cmdlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.InitResponse.CmdList)
  return cmdlist_.Get(index);
}
::micromsg::CmdItem* InitResponse::mutable_cmdlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.InitResponse.CmdList)
  return cmdlist_.Mutable(index);
}
::micromsg::CmdItem* InitResponse::add_cmdlist() {
  // @@protoc_insertion_point(field_add:micromsg.InitResponse.CmdList)
  return cmdlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::CmdItem >*
InitResponse::mutable_cmdlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.InitResponse.CmdList)
  return &cmdlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::CmdItem >&
InitResponse::cmdlist() const {
  // @@protoc_insertion_point(field_list:micromsg.InitResponse.CmdList)
  return cmdlist_;
}

// required .micromsg.SKBuiltinString_t Buffer = 6;
bool InitResponse::has_buffer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InitResponse::set_has_buffer() {
  _has_bits_[0] |= 0x00000002u;
}
void InitResponse::clear_has_buffer() {
  _has_bits_[0] &= ~0x00000002u;
}
void InitResponse::clear_buffer() {
  if (buffer_ != NULL) buffer_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_buffer();
}
const ::micromsg::SKBuiltinString_t& InitResponse::buffer() const {
  // @@protoc_insertion_point(field_get:micromsg.InitResponse.Buffer)
  return buffer_ != NULL ? *buffer_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* InitResponse::mutable_buffer() {
  set_has_buffer();
  if (buffer_ == NULL) {
    buffer_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.InitResponse.Buffer)
  return buffer_;
}
::micromsg::SKBuiltinString_t* InitResponse::release_buffer() {
  // @@protoc_insertion_point(field_release:micromsg.InitResponse.Buffer)
  clear_has_buffer();
  ::micromsg::SKBuiltinString_t* temp = buffer_;
  buffer_ = NULL;
  return temp;
}
void InitResponse::set_allocated_buffer(::micromsg::SKBuiltinString_t* buffer) {
  delete buffer_;
  buffer_ = buffer;
  if (buffer) {
    set_has_buffer();
  } else {
    clear_has_buffer();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.InitResponse.Buffer)
}

// required uint32 Ratio = 7;
bool InitResponse::has_ratio() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void InitResponse::set_has_ratio() {
  _has_bits_[0] |= 0x00000020u;
}
void InitResponse::clear_has_ratio() {
  _has_bits_[0] &= ~0x00000020u;
}
void InitResponse::clear_ratio() {
  ratio_ = 0u;
  clear_has_ratio();
}
::google::protobuf::uint32 InitResponse::ratio() const {
  // @@protoc_insertion_point(field_get:micromsg.InitResponse.Ratio)
  return ratio_;
}
void InitResponse::set_ratio(::google::protobuf::uint32 value) {
  set_has_ratio();
  ratio_ = value;
  // @@protoc_insertion_point(field_set:micromsg.InitResponse.Ratio)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyBuffer::kSynckeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyBuffer::KeyBuffer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.KeyBuffer)
}
KeyBuffer::KeyBuffer(const KeyBuffer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_synckey()) {
    synckey_ = new ::micromsg::SKBuiltinString_t(*from.synckey_);
  } else {
    synckey_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.KeyBuffer)
}

void KeyBuffer::SharedCtor() {
  _cached_size_ = 0;
  synckey_ = NULL;
}

KeyBuffer::~KeyBuffer() {
  // @@protoc_insertion_point(destructor:micromsg.KeyBuffer)
  SharedDtor();
}

void KeyBuffer::SharedDtor() {
  if (this != internal_default_instance()) {
    delete synckey_;
  }
}

void KeyBuffer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyBuffer::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KeyBuffer& KeyBuffer::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

KeyBuffer* KeyBuffer::New(::google::protobuf::Arena* arena) const {
  KeyBuffer* n = new KeyBuffer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyBuffer::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.KeyBuffer)
  if (has_synckey()) {
    GOOGLE_DCHECK(synckey_ != NULL);
    synckey_->::micromsg::SKBuiltinString_t::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool KeyBuffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.KeyBuffer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.SKBuiltinString_t synckey = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_synckey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.KeyBuffer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.KeyBuffer)
  return false;
#undef DO_
}

void KeyBuffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.KeyBuffer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t synckey = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->synckey_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.KeyBuffer)
}

::google::protobuf::uint8* KeyBuffer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.KeyBuffer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t synckey = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->synckey_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.KeyBuffer)
  return target;
}

size_t KeyBuffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.KeyBuffer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.SKBuiltinString_t synckey = 1;
  if (has_synckey()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->synckey_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyBuffer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.KeyBuffer)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyBuffer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyBuffer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.KeyBuffer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.KeyBuffer)
    MergeFrom(*source);
  }
}

void KeyBuffer::MergeFrom(const KeyBuffer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.KeyBuffer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_synckey()) {
    mutable_synckey()->::micromsg::SKBuiltinString_t::MergeFrom(from.synckey());
  }
}

void KeyBuffer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.KeyBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyBuffer::CopyFrom(const KeyBuffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.KeyBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyBuffer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void KeyBuffer::Swap(KeyBuffer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyBuffer::InternalSwap(KeyBuffer* other) {
  std::swap(synckey_, other->synckey_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeyBuffer::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeyBuffer

// required .micromsg.SKBuiltinString_t synckey = 1;
bool KeyBuffer::has_synckey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KeyBuffer::set_has_synckey() {
  _has_bits_[0] |= 0x00000001u;
}
void KeyBuffer::clear_has_synckey() {
  _has_bits_[0] &= ~0x00000001u;
}
void KeyBuffer::clear_synckey() {
  if (synckey_ != NULL) synckey_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_synckey();
}
const ::micromsg::SKBuiltinString_t& KeyBuffer::synckey() const {
  // @@protoc_insertion_point(field_get:micromsg.KeyBuffer.synckey)
  return synckey_ != NULL ? *synckey_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* KeyBuffer::mutable_synckey() {
  set_has_synckey();
  if (synckey_ == NULL) {
    synckey_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.KeyBuffer.synckey)
  return synckey_;
}
::micromsg::SKBuiltinString_t* KeyBuffer::release_synckey() {
  // @@protoc_insertion_point(field_release:micromsg.KeyBuffer.synckey)
  clear_has_synckey();
  ::micromsg::SKBuiltinString_t* temp = synckey_;
  synckey_ = NULL;
  return temp;
}
void KeyBuffer::set_allocated_synckey(::micromsg::SKBuiltinString_t* synckey) {
  delete synckey_;
  synckey_ = synckey;
  if (synckey) {
    set_has_synckey();
  } else {
    clear_has_synckey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.KeyBuffer.synckey)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewInitRequest::kBaseRequestFieldNumber;
const int NewInitRequest::kUserNameFieldNumber;
const int NewInitRequest::kCurrentSynckeyFieldNumber;
const int NewInitRequest::kMaxSynckeyFieldNumber;
const int NewInitRequest::kLanguageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewInitRequest::NewInitRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.NewInitRequest)
}
NewInitRequest::NewInitRequest(const NewInitRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_language()) {
    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_currentsynckey()) {
    currentsynckey_ = new ::micromsg::SKBuiltinBuffer_t(*from.currentsynckey_);
  } else {
    currentsynckey_ = NULL;
  }
  if (from.has_maxsynckey()) {
    maxsynckey_ = new ::micromsg::SKBuiltinBuffer_t(*from.maxsynckey_);
  } else {
    maxsynckey_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.NewInitRequest)
}

void NewInitRequest::SharedCtor() {
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&maxsynckey_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(maxsynckey_));
}

NewInitRequest::~NewInitRequest() {
  // @@protoc_insertion_point(destructor:micromsg.NewInitRequest)
  SharedDtor();
}

void NewInitRequest::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete currentsynckey_;
  }
  if (this != internal_default_instance()) {
    delete maxsynckey_;
  }
}

void NewInitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewInitRequest::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NewInitRequest& NewInitRequest::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

NewInitRequest* NewInitRequest::New(::google::protobuf::Arena* arena) const {
  NewInitRequest* n = new NewInitRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NewInitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.NewInitRequest)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_username()) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
    if (has_language()) {
      GOOGLE_DCHECK(!language_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*language_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_currentsynckey()) {
      GOOGLE_DCHECK(currentsynckey_ != NULL);
      currentsynckey_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_maxsynckey()) {
      GOOGLE_DCHECK(maxsynckey_ != NULL);
      maxsynckey_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NewInitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.NewInitRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string UserName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewInitRequest.UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t CurrentSynckey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_currentsynckey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t MaxSynckey = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_maxsynckey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Language = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewInitRequest.Language");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.NewInitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.NewInitRequest)
  return false;
#undef DO_
}

void NewInitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.NewInitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string UserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewInitRequest.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t CurrentSynckey = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->currentsynckey_, output);
  }

  // required .micromsg.SKBuiltinBuffer_t MaxSynckey = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->maxsynckey_, output);
  }

  // optional string Language = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewInitRequest.Language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->language(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.NewInitRequest)
}

::google::protobuf::uint8* NewInitRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.NewInitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string UserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewInitRequest.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t CurrentSynckey = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->currentsynckey_, deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t MaxSynckey = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->maxsynckey_, deterministic, target);
  }

  // optional string Language = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewInitRequest.Language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->language(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.NewInitRequest)
  return target;
}

size_t NewInitRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.NewInitRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_currentsynckey()) {
    // required .micromsg.SKBuiltinBuffer_t CurrentSynckey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->currentsynckey_);
  }

  if (has_maxsynckey()) {
    // required .micromsg.SKBuiltinBuffer_t MaxSynckey = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->maxsynckey_);
  }

  return total_size;
}
size_t NewInitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.NewInitRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001c) ^ 0x0000001c) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.SKBuiltinBuffer_t CurrentSynckey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->currentsynckey_);

    // required .micromsg.SKBuiltinBuffer_t MaxSynckey = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->maxsynckey_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string UserName = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string Language = 5;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewInitRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.NewInitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NewInitRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NewInitRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.NewInitRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.NewInitRequest)
    MergeFrom(*source);
  }
}

void NewInitRequest::MergeFrom(const NewInitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.NewInitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_language();
      language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_currentsynckey()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.currentsynckey());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_maxsynckey()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.maxsynckey());
    }
  }
}

void NewInitRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.NewInitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewInitRequest::CopyFrom(const NewInitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.NewInitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewInitRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001c) != 0x0000001c) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_currentsynckey()) {
    if (!this->currentsynckey_->IsInitialized()) return false;
  }
  if (has_maxsynckey()) {
    if (!this->maxsynckey_->IsInitialized()) return false;
  }
  return true;
}

void NewInitRequest::Swap(NewInitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewInitRequest::InternalSwap(NewInitRequest* other) {
  username_.Swap(&other->username_);
  language_.Swap(&other->language_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(currentsynckey_, other->currentsynckey_);
  std::swap(maxsynckey_, other->maxsynckey_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NewInitRequest::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NewInitRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool NewInitRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NewInitRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
void NewInitRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
void NewInitRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& NewInitRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.NewInitRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* NewInitRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewInitRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* NewInitRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.NewInitRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void NewInitRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewInitRequest.BaseRequest)
}

// optional string UserName = 2;
bool NewInitRequest::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NewInitRequest::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void NewInitRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void NewInitRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& NewInitRequest::username() const {
  // @@protoc_insertion_point(field_get:micromsg.NewInitRequest.UserName)
  return username_.GetNoArena();
}
void NewInitRequest::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewInitRequest.UserName)
}
#if LANG_CXX11
void NewInitRequest::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewInitRequest.UserName)
}
#endif
void NewInitRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewInitRequest.UserName)
}
void NewInitRequest::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewInitRequest.UserName)
}
::std::string* NewInitRequest::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.NewInitRequest.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewInitRequest::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.NewInitRequest.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewInitRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewInitRequest.UserName)
}

// required .micromsg.SKBuiltinBuffer_t CurrentSynckey = 3;
bool NewInitRequest::has_currentsynckey() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NewInitRequest::set_has_currentsynckey() {
  _has_bits_[0] |= 0x00000008u;
}
void NewInitRequest::clear_has_currentsynckey() {
  _has_bits_[0] &= ~0x00000008u;
}
void NewInitRequest::clear_currentsynckey() {
  if (currentsynckey_ != NULL) currentsynckey_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_currentsynckey();
}
const ::micromsg::SKBuiltinBuffer_t& NewInitRequest::currentsynckey() const {
  // @@protoc_insertion_point(field_get:micromsg.NewInitRequest.CurrentSynckey)
  return currentsynckey_ != NULL ? *currentsynckey_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* NewInitRequest::mutable_currentsynckey() {
  set_has_currentsynckey();
  if (currentsynckey_ == NULL) {
    currentsynckey_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewInitRequest.CurrentSynckey)
  return currentsynckey_;
}
::micromsg::SKBuiltinBuffer_t* NewInitRequest::release_currentsynckey() {
  // @@protoc_insertion_point(field_release:micromsg.NewInitRequest.CurrentSynckey)
  clear_has_currentsynckey();
  ::micromsg::SKBuiltinBuffer_t* temp = currentsynckey_;
  currentsynckey_ = NULL;
  return temp;
}
void NewInitRequest::set_allocated_currentsynckey(::micromsg::SKBuiltinBuffer_t* currentsynckey) {
  delete currentsynckey_;
  currentsynckey_ = currentsynckey;
  if (currentsynckey) {
    set_has_currentsynckey();
  } else {
    clear_has_currentsynckey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewInitRequest.CurrentSynckey)
}

// required .micromsg.SKBuiltinBuffer_t MaxSynckey = 4;
bool NewInitRequest::has_maxsynckey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NewInitRequest::set_has_maxsynckey() {
  _has_bits_[0] |= 0x00000010u;
}
void NewInitRequest::clear_has_maxsynckey() {
  _has_bits_[0] &= ~0x00000010u;
}
void NewInitRequest::clear_maxsynckey() {
  if (maxsynckey_ != NULL) maxsynckey_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_maxsynckey();
}
const ::micromsg::SKBuiltinBuffer_t& NewInitRequest::maxsynckey() const {
  // @@protoc_insertion_point(field_get:micromsg.NewInitRequest.MaxSynckey)
  return maxsynckey_ != NULL ? *maxsynckey_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* NewInitRequest::mutable_maxsynckey() {
  set_has_maxsynckey();
  if (maxsynckey_ == NULL) {
    maxsynckey_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewInitRequest.MaxSynckey)
  return maxsynckey_;
}
::micromsg::SKBuiltinBuffer_t* NewInitRequest::release_maxsynckey() {
  // @@protoc_insertion_point(field_release:micromsg.NewInitRequest.MaxSynckey)
  clear_has_maxsynckey();
  ::micromsg::SKBuiltinBuffer_t* temp = maxsynckey_;
  maxsynckey_ = NULL;
  return temp;
}
void NewInitRequest::set_allocated_maxsynckey(::micromsg::SKBuiltinBuffer_t* maxsynckey) {
  delete maxsynckey_;
  maxsynckey_ = maxsynckey;
  if (maxsynckey) {
    set_has_maxsynckey();
  } else {
    clear_has_maxsynckey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewInitRequest.MaxSynckey)
}

// optional string Language = 5;
bool NewInitRequest::has_language() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NewInitRequest::set_has_language() {
  _has_bits_[0] |= 0x00000002u;
}
void NewInitRequest::clear_has_language() {
  _has_bits_[0] &= ~0x00000002u;
}
void NewInitRequest::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_language();
}
const ::std::string& NewInitRequest::language() const {
  // @@protoc_insertion_point(field_get:micromsg.NewInitRequest.Language)
  return language_.GetNoArena();
}
void NewInitRequest::set_language(const ::std::string& value) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewInitRequest.Language)
}
#if LANG_CXX11
void NewInitRequest::set_language(::std::string&& value) {
  set_has_language();
  language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewInitRequest.Language)
}
#endif
void NewInitRequest::set_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewInitRequest.Language)
}
void NewInitRequest::set_language(const char* value, size_t size) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewInitRequest.Language)
}
::std::string* NewInitRequest::mutable_language() {
  set_has_language();
  // @@protoc_insertion_point(field_mutable:micromsg.NewInitRequest.Language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewInitRequest::release_language() {
  // @@protoc_insertion_point(field_release:micromsg.NewInitRequest.Language)
  clear_has_language();
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewInitRequest::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    set_has_language();
  } else {
    clear_has_language();
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewInitRequest.Language)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewInitResponse::kBaseResponseFieldNumber;
const int NewInitResponse::kCurrentSynckeyFieldNumber;
const int NewInitResponse::kMaxSynckeyFieldNumber;
const int NewInitResponse::kContinueFlagFieldNumber;
const int NewInitResponse::kSelectBitmapFieldNumber;
const int NewInitResponse::kCmdCountFieldNumber;
const int NewInitResponse::kCmdListFieldNumber;
const int NewInitResponse::kRatioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewInitResponse::NewInitResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.NewInitResponse)
}
NewInitResponse::NewInitResponse(const NewInitResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      cmdlist_(from.cmdlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_currentsynckey()) {
    currentsynckey_ = new ::micromsg::SKBuiltinBuffer_t(*from.currentsynckey_);
  } else {
    currentsynckey_ = NULL;
  }
  if (from.has_maxsynckey()) {
    maxsynckey_ = new ::micromsg::SKBuiltinBuffer_t(*from.maxsynckey_);
  } else {
    maxsynckey_ = NULL;
  }
  ::memcpy(&continueflag_, &from.continueflag_,
    reinterpret_cast<char*>(&ratio_) -
    reinterpret_cast<char*>(&continueflag_) + sizeof(ratio_));
  // @@protoc_insertion_point(copy_constructor:micromsg.NewInitResponse)
}

void NewInitResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&ratio_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(ratio_));
}

NewInitResponse::~NewInitResponse() {
  // @@protoc_insertion_point(destructor:micromsg.NewInitResponse)
  SharedDtor();
}

void NewInitResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete currentsynckey_;
  }
  if (this != internal_default_instance()) {
    delete maxsynckey_;
  }
}

void NewInitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewInitResponse::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NewInitResponse& NewInitResponse::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

NewInitResponse* NewInitResponse::New(::google::protobuf::Arena* arena) const {
  NewInitResponse* n = new NewInitResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NewInitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.NewInitResponse)
  cmdlist_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_currentsynckey()) {
      GOOGLE_DCHECK(currentsynckey_ != NULL);
      currentsynckey_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_maxsynckey()) {
      GOOGLE_DCHECK(maxsynckey_ != NULL);
      maxsynckey_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 120u) {
    ::memset(&continueflag_, 0, reinterpret_cast<char*>(&ratio_) -
      reinterpret_cast<char*>(&continueflag_) + sizeof(ratio_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NewInitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.NewInitResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t CurrentSynckey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_currentsynckey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t MaxSynckey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_maxsynckey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ContinueFlag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_continueflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &continueflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 SelectBitmap = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_selectbitmap();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selectbitmap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 CmdCount = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_cmdcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmdcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.CmdItem CmdList = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cmdlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Ratio = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.NewInitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.NewInitResponse)
  return false;
#undef DO_
}

void NewInitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.NewInitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required .micromsg.SKBuiltinBuffer_t CurrentSynckey = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->currentsynckey_, output);
  }

  // required .micromsg.SKBuiltinBuffer_t MaxSynckey = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->maxsynckey_, output);
  }

  // required uint32 ContinueFlag = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->continueflag(), output);
  }

  // required uint32 SelectBitmap = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->selectbitmap(), output);
  }

  // required uint32 CmdCount = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->cmdcount(), output);
  }

  // repeated .micromsg.CmdItem CmdList = 7;
  for (unsigned int i = 0, n = this->cmdlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->cmdlist(i), output);
  }

  // required uint32 Ratio = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->ratio(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.NewInitResponse)
}

::google::protobuf::uint8* NewInitResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.NewInitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t CurrentSynckey = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->currentsynckey_, deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t MaxSynckey = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->maxsynckey_, deterministic, target);
  }

  // required uint32 ContinueFlag = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->continueflag(), target);
  }

  // required uint32 SelectBitmap = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->selectbitmap(), target);
  }

  // required uint32 CmdCount = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->cmdcount(), target);
  }

  // repeated .micromsg.CmdItem CmdList = 7;
  for (unsigned int i = 0, n = this->cmdlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->cmdlist(i), deterministic, target);
  }

  // required uint32 Ratio = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->ratio(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.NewInitResponse)
  return target;
}

size_t NewInitResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.NewInitResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_currentsynckey()) {
    // required .micromsg.SKBuiltinBuffer_t CurrentSynckey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->currentsynckey_);
  }

  if (has_maxsynckey()) {
    // required .micromsg.SKBuiltinBuffer_t MaxSynckey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->maxsynckey_);
  }

  if (has_continueflag()) {
    // required uint32 ContinueFlag = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->continueflag());
  }

  if (has_selectbitmap()) {
    // required uint32 SelectBitmap = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->selectbitmap());
  }

  if (has_cmdcount()) {
    // required uint32 CmdCount = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cmdcount());
  }

  if (has_ratio()) {
    // required uint32 Ratio = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ratio());
  }

  return total_size;
}
size_t NewInitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.NewInitResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required .micromsg.SKBuiltinBuffer_t CurrentSynckey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->currentsynckey_);

    // required .micromsg.SKBuiltinBuffer_t MaxSynckey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->maxsynckey_);

    // required uint32 ContinueFlag = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->continueflag());

    // required uint32 SelectBitmap = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->selectbitmap());

    // required uint32 CmdCount = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cmdcount());

    // required uint32 Ratio = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ratio());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.CmdItem CmdList = 7;
  {
    unsigned int count = this->cmdlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cmdlist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewInitResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.NewInitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NewInitResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NewInitResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.NewInitResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.NewInitResponse)
    MergeFrom(*source);
  }
}

void NewInitResponse::MergeFrom(const NewInitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.NewInitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cmdlist_.MergeFrom(from.cmdlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_currentsynckey()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.currentsynckey());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_maxsynckey()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.maxsynckey());
    }
    if (cached_has_bits & 0x00000008u) {
      continueflag_ = from.continueflag_;
    }
    if (cached_has_bits & 0x00000010u) {
      selectbitmap_ = from.selectbitmap_;
    }
    if (cached_has_bits & 0x00000020u) {
      cmdcount_ = from.cmdcount_;
    }
    if (cached_has_bits & 0x00000040u) {
      ratio_ = from.ratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NewInitResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.NewInitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewInitResponse::CopyFrom(const NewInitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.NewInitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewInitResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->cmdlist())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_currentsynckey()) {
    if (!this->currentsynckey_->IsInitialized()) return false;
  }
  if (has_maxsynckey()) {
    if (!this->maxsynckey_->IsInitialized()) return false;
  }
  return true;
}

void NewInitResponse::Swap(NewInitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewInitResponse::InternalSwap(NewInitResponse* other) {
  cmdlist_.InternalSwap(&other->cmdlist_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(currentsynckey_, other->currentsynckey_);
  std::swap(maxsynckey_, other->maxsynckey_);
  std::swap(continueflag_, other->continueflag_);
  std::swap(selectbitmap_, other->selectbitmap_);
  std::swap(cmdcount_, other->cmdcount_);
  std::swap(ratio_, other->ratio_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NewInitResponse::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NewInitResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool NewInitResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NewInitResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void NewInitResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void NewInitResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& NewInitResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.NewInitResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* NewInitResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewInitResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* NewInitResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.NewInitResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void NewInitResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewInitResponse.BaseResponse)
}

// required .micromsg.SKBuiltinBuffer_t CurrentSynckey = 2;
bool NewInitResponse::has_currentsynckey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NewInitResponse::set_has_currentsynckey() {
  _has_bits_[0] |= 0x00000002u;
}
void NewInitResponse::clear_has_currentsynckey() {
  _has_bits_[0] &= ~0x00000002u;
}
void NewInitResponse::clear_currentsynckey() {
  if (currentsynckey_ != NULL) currentsynckey_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_currentsynckey();
}
const ::micromsg::SKBuiltinBuffer_t& NewInitResponse::currentsynckey() const {
  // @@protoc_insertion_point(field_get:micromsg.NewInitResponse.CurrentSynckey)
  return currentsynckey_ != NULL ? *currentsynckey_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* NewInitResponse::mutable_currentsynckey() {
  set_has_currentsynckey();
  if (currentsynckey_ == NULL) {
    currentsynckey_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewInitResponse.CurrentSynckey)
  return currentsynckey_;
}
::micromsg::SKBuiltinBuffer_t* NewInitResponse::release_currentsynckey() {
  // @@protoc_insertion_point(field_release:micromsg.NewInitResponse.CurrentSynckey)
  clear_has_currentsynckey();
  ::micromsg::SKBuiltinBuffer_t* temp = currentsynckey_;
  currentsynckey_ = NULL;
  return temp;
}
void NewInitResponse::set_allocated_currentsynckey(::micromsg::SKBuiltinBuffer_t* currentsynckey) {
  delete currentsynckey_;
  currentsynckey_ = currentsynckey;
  if (currentsynckey) {
    set_has_currentsynckey();
  } else {
    clear_has_currentsynckey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewInitResponse.CurrentSynckey)
}

// required .micromsg.SKBuiltinBuffer_t MaxSynckey = 3;
bool NewInitResponse::has_maxsynckey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NewInitResponse::set_has_maxsynckey() {
  _has_bits_[0] |= 0x00000004u;
}
void NewInitResponse::clear_has_maxsynckey() {
  _has_bits_[0] &= ~0x00000004u;
}
void NewInitResponse::clear_maxsynckey() {
  if (maxsynckey_ != NULL) maxsynckey_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_maxsynckey();
}
const ::micromsg::SKBuiltinBuffer_t& NewInitResponse::maxsynckey() const {
  // @@protoc_insertion_point(field_get:micromsg.NewInitResponse.MaxSynckey)
  return maxsynckey_ != NULL ? *maxsynckey_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* NewInitResponse::mutable_maxsynckey() {
  set_has_maxsynckey();
  if (maxsynckey_ == NULL) {
    maxsynckey_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewInitResponse.MaxSynckey)
  return maxsynckey_;
}
::micromsg::SKBuiltinBuffer_t* NewInitResponse::release_maxsynckey() {
  // @@protoc_insertion_point(field_release:micromsg.NewInitResponse.MaxSynckey)
  clear_has_maxsynckey();
  ::micromsg::SKBuiltinBuffer_t* temp = maxsynckey_;
  maxsynckey_ = NULL;
  return temp;
}
void NewInitResponse::set_allocated_maxsynckey(::micromsg::SKBuiltinBuffer_t* maxsynckey) {
  delete maxsynckey_;
  maxsynckey_ = maxsynckey;
  if (maxsynckey) {
    set_has_maxsynckey();
  } else {
    clear_has_maxsynckey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewInitResponse.MaxSynckey)
}

// required uint32 ContinueFlag = 4;
bool NewInitResponse::has_continueflag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NewInitResponse::set_has_continueflag() {
  _has_bits_[0] |= 0x00000008u;
}
void NewInitResponse::clear_has_continueflag() {
  _has_bits_[0] &= ~0x00000008u;
}
void NewInitResponse::clear_continueflag() {
  continueflag_ = 0u;
  clear_has_continueflag();
}
::google::protobuf::uint32 NewInitResponse::continueflag() const {
  // @@protoc_insertion_point(field_get:micromsg.NewInitResponse.ContinueFlag)
  return continueflag_;
}
void NewInitResponse::set_continueflag(::google::protobuf::uint32 value) {
  set_has_continueflag();
  continueflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewInitResponse.ContinueFlag)
}

// required uint32 SelectBitmap = 5;
bool NewInitResponse::has_selectbitmap() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NewInitResponse::set_has_selectbitmap() {
  _has_bits_[0] |= 0x00000010u;
}
void NewInitResponse::clear_has_selectbitmap() {
  _has_bits_[0] &= ~0x00000010u;
}
void NewInitResponse::clear_selectbitmap() {
  selectbitmap_ = 0u;
  clear_has_selectbitmap();
}
::google::protobuf::uint32 NewInitResponse::selectbitmap() const {
  // @@protoc_insertion_point(field_get:micromsg.NewInitResponse.SelectBitmap)
  return selectbitmap_;
}
void NewInitResponse::set_selectbitmap(::google::protobuf::uint32 value) {
  set_has_selectbitmap();
  selectbitmap_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewInitResponse.SelectBitmap)
}

// required uint32 CmdCount = 6;
bool NewInitResponse::has_cmdcount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void NewInitResponse::set_has_cmdcount() {
  _has_bits_[0] |= 0x00000020u;
}
void NewInitResponse::clear_has_cmdcount() {
  _has_bits_[0] &= ~0x00000020u;
}
void NewInitResponse::clear_cmdcount() {
  cmdcount_ = 0u;
  clear_has_cmdcount();
}
::google::protobuf::uint32 NewInitResponse::cmdcount() const {
  // @@protoc_insertion_point(field_get:micromsg.NewInitResponse.CmdCount)
  return cmdcount_;
}
void NewInitResponse::set_cmdcount(::google::protobuf::uint32 value) {
  set_has_cmdcount();
  cmdcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewInitResponse.CmdCount)
}

// repeated .micromsg.CmdItem CmdList = 7;
int NewInitResponse::cmdlist_size() const {
  return cmdlist_.size();
}
void NewInitResponse::clear_cmdlist() {
  cmdlist_.Clear();
}
const ::micromsg::CmdItem& NewInitResponse::cmdlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.NewInitResponse.CmdList)
  return cmdlist_.Get(index);
}
::micromsg::CmdItem* NewInitResponse::mutable_cmdlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.NewInitResponse.CmdList)
  return cmdlist_.Mutable(index);
}
::micromsg::CmdItem* NewInitResponse::add_cmdlist() {
  // @@protoc_insertion_point(field_add:micromsg.NewInitResponse.CmdList)
  return cmdlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::CmdItem >*
NewInitResponse::mutable_cmdlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.NewInitResponse.CmdList)
  return &cmdlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::CmdItem >&
NewInitResponse::cmdlist() const {
  // @@protoc_insertion_point(field_list:micromsg.NewInitResponse.CmdList)
  return cmdlist_;
}

// required uint32 Ratio = 8;
bool NewInitResponse::has_ratio() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void NewInitResponse::set_has_ratio() {
  _has_bits_[0] |= 0x00000040u;
}
void NewInitResponse::clear_has_ratio() {
  _has_bits_[0] &= ~0x00000040u;
}
void NewInitResponse::clear_ratio() {
  ratio_ = 0u;
  clear_has_ratio();
}
::google::protobuf::uint32 NewInitResponse::ratio() const {
  // @@protoc_insertion_point(field_get:micromsg.NewInitResponse.Ratio)
  return ratio_;
}
void NewInitResponse::set_ratio(::google::protobuf::uint32 value) {
  set_has_ratio();
  ratio_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewInitResponse.Ratio)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SyncRequest::kBaseRequestFieldNumber;
const int SyncRequest::kUserNameFieldNumber;
const int SyncRequest::kSyncKeyFieldNumber;
const int SyncRequest::kSceneFieldNumber;
const int SyncRequest::kOptionFieldNumber;
const int SyncRequest::kOplogFieldNumber;
const int SyncRequest::kKeyBufFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SyncRequest::SyncRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SyncRequest)
}
SyncRequest::SyncRequest(const SyncRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  keybuf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_keybuf()) {
    keybuf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keybuf_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_username()) {
    username_ = new ::micromsg::SKBuiltinString_t(*from.username_);
  } else {
    username_ = NULL;
  }
  if (from.has_oplog()) {
    oplog_ = new ::micromsg::CmdList(*from.oplog_);
  } else {
    oplog_ = NULL;
  }
  ::memcpy(&synckey_, &from.synckey_,
    reinterpret_cast<char*>(&option_) -
    reinterpret_cast<char*>(&synckey_) + sizeof(option_));
  // @@protoc_insertion_point(copy_constructor:micromsg.SyncRequest)
}

void SyncRequest::SharedCtor() {
  _cached_size_ = 0;
  keybuf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&option_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(option_));
}

SyncRequest::~SyncRequest() {
  // @@protoc_insertion_point(destructor:micromsg.SyncRequest)
  SharedDtor();
}

void SyncRequest::SharedDtor() {
  keybuf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete username_;
  }
  if (this != internal_default_instance()) {
    delete oplog_;
  }
}

void SyncRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncRequest::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SyncRequest& SyncRequest::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

SyncRequest* SyncRequest::New(::google::protobuf::Arena* arena) const {
  SyncRequest* n = new SyncRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SyncRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SyncRequest)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_keybuf()) {
      GOOGLE_DCHECK(!keybuf_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*keybuf_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_username()) {
      GOOGLE_DCHECK(username_ != NULL);
      username_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_oplog()) {
      GOOGLE_DCHECK(oplog_ != NULL);
      oplog_->::micromsg::CmdList::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 112u) {
    ::memset(&synckey_, 0, reinterpret_cast<char*>(&option_) -
      reinterpret_cast<char*>(&synckey_) + sizeof(option_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SyncRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SyncRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t UserName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_username()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 SyncKey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_synckey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &synckey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Scene = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_scene();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Option = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_option();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &option_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.CmdList Oplog = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oplog()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string KeyBuf = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keybuf()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keybuf().data(), this->keybuf().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SyncRequest.KeyBuf");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SyncRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SyncRequest)
  return false;
#undef DO_
}

void SyncRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SyncRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required .micromsg.SKBuiltinString_t UserName = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->username_, output);
  }

  // required uint32 SyncKey = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->synckey(), output);
  }

  // required int32 Scene = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->scene(), output);
  }

  // required int32 Option = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->option(), output);
  }

  // required .micromsg.CmdList Oplog = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->oplog_, output);
  }

  // optional string KeyBuf = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keybuf().data(), this->keybuf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SyncRequest.KeyBuf");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->keybuf(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SyncRequest)
}

::google::protobuf::uint8* SyncRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SyncRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t UserName = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->username_, deterministic, target);
  }

  // required uint32 SyncKey = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->synckey(), target);
  }

  // required int32 Scene = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->scene(), target);
  }

  // required int32 Option = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->option(), target);
  }

  // required .micromsg.CmdList Oplog = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->oplog_, deterministic, target);
  }

  // optional string KeyBuf = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keybuf().data(), this->keybuf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SyncRequest.KeyBuf");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->keybuf(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SyncRequest)
  return target;
}

size_t SyncRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SyncRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_username()) {
    // required .micromsg.SKBuiltinString_t UserName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->username_);
  }

  if (has_oplog()) {
    // required .micromsg.CmdList Oplog = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->oplog_);
  }

  if (has_synckey()) {
    // required uint32 SyncKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->synckey());
  }

  if (has_scene()) {
    // required int32 Scene = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->scene());
  }

  if (has_option()) {
    // required int32 Option = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->option());
  }

  return total_size;
}
size_t SyncRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SyncRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007e) ^ 0x0000007e) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.SKBuiltinString_t UserName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->username_);

    // required .micromsg.CmdList Oplog = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->oplog_);

    // required uint32 SyncKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->synckey());

    // required int32 Scene = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->scene());

    // required int32 Option = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->option());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string KeyBuf = 7;
  if (has_keybuf()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->keybuf());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SyncRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SyncRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SyncRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SyncRequest)
    MergeFrom(*source);
  }
}

void SyncRequest::MergeFrom(const SyncRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SyncRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_keybuf();
      keybuf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keybuf_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_username()->::micromsg::SKBuiltinString_t::MergeFrom(from.username());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_oplog()->::micromsg::CmdList::MergeFrom(from.oplog());
    }
    if (cached_has_bits & 0x00000010u) {
      synckey_ = from.synckey_;
    }
    if (cached_has_bits & 0x00000020u) {
      scene_ = from.scene_;
    }
    if (cached_has_bits & 0x00000040u) {
      option_ = from.option_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SyncRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SyncRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncRequest::CopyFrom(const SyncRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SyncRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007e) != 0x0000007e) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_oplog()) {
    if (!this->oplog_->IsInitialized()) return false;
  }
  return true;
}

void SyncRequest::Swap(SyncRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SyncRequest::InternalSwap(SyncRequest* other) {
  keybuf_.Swap(&other->keybuf_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(username_, other->username_);
  std::swap(oplog_, other->oplog_);
  std::swap(synckey_, other->synckey_);
  std::swap(scene_, other->scene_);
  std::swap(option_, other->option_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SyncRequest::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SyncRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool SyncRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SyncRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void SyncRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void SyncRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& SyncRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.SyncRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* SyncRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SyncRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* SyncRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.SyncRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void SyncRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SyncRequest.BaseRequest)
}

// required .micromsg.SKBuiltinString_t UserName = 2;
bool SyncRequest::has_username() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SyncRequest::set_has_username() {
  _has_bits_[0] |= 0x00000004u;
}
void SyncRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000004u;
}
void SyncRequest::clear_username() {
  if (username_ != NULL) username_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_username();
}
const ::micromsg::SKBuiltinString_t& SyncRequest::username() const {
  // @@protoc_insertion_point(field_get:micromsg.SyncRequest.UserName)
  return username_ != NULL ? *username_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* SyncRequest::mutable_username() {
  set_has_username();
  if (username_ == NULL) {
    username_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SyncRequest.UserName)
  return username_;
}
::micromsg::SKBuiltinString_t* SyncRequest::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.SyncRequest.UserName)
  clear_has_username();
  ::micromsg::SKBuiltinString_t* temp = username_;
  username_ = NULL;
  return temp;
}
void SyncRequest::set_allocated_username(::micromsg::SKBuiltinString_t* username) {
  delete username_;
  username_ = username;
  if (username) {
    set_has_username();
  } else {
    clear_has_username();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SyncRequest.UserName)
}

// required uint32 SyncKey = 3;
bool SyncRequest::has_synckey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SyncRequest::set_has_synckey() {
  _has_bits_[0] |= 0x00000010u;
}
void SyncRequest::clear_has_synckey() {
  _has_bits_[0] &= ~0x00000010u;
}
void SyncRequest::clear_synckey() {
  synckey_ = 0u;
  clear_has_synckey();
}
::google::protobuf::uint32 SyncRequest::synckey() const {
  // @@protoc_insertion_point(field_get:micromsg.SyncRequest.SyncKey)
  return synckey_;
}
void SyncRequest::set_synckey(::google::protobuf::uint32 value) {
  set_has_synckey();
  synckey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SyncRequest.SyncKey)
}

// required int32 Scene = 4;
bool SyncRequest::has_scene() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SyncRequest::set_has_scene() {
  _has_bits_[0] |= 0x00000020u;
}
void SyncRequest::clear_has_scene() {
  _has_bits_[0] &= ~0x00000020u;
}
void SyncRequest::clear_scene() {
  scene_ = 0;
  clear_has_scene();
}
::google::protobuf::int32 SyncRequest::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.SyncRequest.Scene)
  return scene_;
}
void SyncRequest::set_scene(::google::protobuf::int32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SyncRequest.Scene)
}

// required int32 Option = 5;
bool SyncRequest::has_option() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SyncRequest::set_has_option() {
  _has_bits_[0] |= 0x00000040u;
}
void SyncRequest::clear_has_option() {
  _has_bits_[0] &= ~0x00000040u;
}
void SyncRequest::clear_option() {
  option_ = 0;
  clear_has_option();
}
::google::protobuf::int32 SyncRequest::option() const {
  // @@protoc_insertion_point(field_get:micromsg.SyncRequest.Option)
  return option_;
}
void SyncRequest::set_option(::google::protobuf::int32 value) {
  set_has_option();
  option_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SyncRequest.Option)
}

// required .micromsg.CmdList Oplog = 6;
bool SyncRequest::has_oplog() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SyncRequest::set_has_oplog() {
  _has_bits_[0] |= 0x00000008u;
}
void SyncRequest::clear_has_oplog() {
  _has_bits_[0] &= ~0x00000008u;
}
void SyncRequest::clear_oplog() {
  if (oplog_ != NULL) oplog_->::micromsg::CmdList::Clear();
  clear_has_oplog();
}
const ::micromsg::CmdList& SyncRequest::oplog() const {
  // @@protoc_insertion_point(field_get:micromsg.SyncRequest.Oplog)
  return oplog_ != NULL ? *oplog_
                         : *::micromsg::CmdList::internal_default_instance();
}
::micromsg::CmdList* SyncRequest::mutable_oplog() {
  set_has_oplog();
  if (oplog_ == NULL) {
    oplog_ = new ::micromsg::CmdList;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SyncRequest.Oplog)
  return oplog_;
}
::micromsg::CmdList* SyncRequest::release_oplog() {
  // @@protoc_insertion_point(field_release:micromsg.SyncRequest.Oplog)
  clear_has_oplog();
  ::micromsg::CmdList* temp = oplog_;
  oplog_ = NULL;
  return temp;
}
void SyncRequest::set_allocated_oplog(::micromsg::CmdList* oplog) {
  delete oplog_;
  oplog_ = oplog;
  if (oplog) {
    set_has_oplog();
  } else {
    clear_has_oplog();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SyncRequest.Oplog)
}

// optional string KeyBuf = 7;
bool SyncRequest::has_keybuf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SyncRequest::set_has_keybuf() {
  _has_bits_[0] |= 0x00000001u;
}
void SyncRequest::clear_has_keybuf() {
  _has_bits_[0] &= ~0x00000001u;
}
void SyncRequest::clear_keybuf() {
  keybuf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_keybuf();
}
const ::std::string& SyncRequest::keybuf() const {
  // @@protoc_insertion_point(field_get:micromsg.SyncRequest.KeyBuf)
  return keybuf_.GetNoArena();
}
void SyncRequest::set_keybuf(const ::std::string& value) {
  set_has_keybuf();
  keybuf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SyncRequest.KeyBuf)
}
#if LANG_CXX11
void SyncRequest::set_keybuf(::std::string&& value) {
  set_has_keybuf();
  keybuf_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SyncRequest.KeyBuf)
}
#endif
void SyncRequest::set_keybuf(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_keybuf();
  keybuf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SyncRequest.KeyBuf)
}
void SyncRequest::set_keybuf(const char* value, size_t size) {
  set_has_keybuf();
  keybuf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SyncRequest.KeyBuf)
}
::std::string* SyncRequest::mutable_keybuf() {
  set_has_keybuf();
  // @@protoc_insertion_point(field_mutable:micromsg.SyncRequest.KeyBuf)
  return keybuf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SyncRequest::release_keybuf() {
  // @@protoc_insertion_point(field_release:micromsg.SyncRequest.KeyBuf)
  clear_has_keybuf();
  return keybuf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SyncRequest::set_allocated_keybuf(::std::string* keybuf) {
  if (keybuf != NULL) {
    set_has_keybuf();
  } else {
    clear_has_keybuf();
  }
  keybuf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), keybuf);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SyncRequest.KeyBuf)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SyncResponse::kBaseResponseFieldNumber;
const int SyncResponse::kNewSyncKeyFieldNumber;
const int SyncResponse::kContinueFlagFieldNumber;
const int SyncResponse::kCmdCountFieldNumber;
const int SyncResponse::kCmdListFieldNumber;
const int SyncResponse::kOOBCountFieldNumber;
const int SyncResponse::kOOBListFieldNumber;
const int SyncResponse::kKeyBufFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SyncResponse::SyncResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SyncResponse)
}
SyncResponse::SyncResponse(const SyncResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      cmdlist_(from.cmdlist_),
      ooblist_(from.ooblist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  keybuf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_keybuf()) {
    keybuf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keybuf_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  ::memcpy(&newsynckey_, &from.newsynckey_,
    reinterpret_cast<char*>(&oobcount_) -
    reinterpret_cast<char*>(&newsynckey_) + sizeof(oobcount_));
  // @@protoc_insertion_point(copy_constructor:micromsg.SyncResponse)
}

void SyncResponse::SharedCtor() {
  _cached_size_ = 0;
  keybuf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&oobcount_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(oobcount_));
}

SyncResponse::~SyncResponse() {
  // @@protoc_insertion_point(destructor:micromsg.SyncResponse)
  SharedDtor();
}

void SyncResponse::SharedDtor() {
  keybuf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void SyncResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncResponse::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SyncResponse& SyncResponse::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

SyncResponse* SyncResponse::New(::google::protobuf::Arena* arena) const {
  SyncResponse* n = new SyncResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SyncResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SyncResponse)
  cmdlist_.Clear();
  ooblist_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_keybuf()) {
      GOOGLE_DCHECK(!keybuf_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*keybuf_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 60u) {
    ::memset(&newsynckey_, 0, reinterpret_cast<char*>(&oobcount_) -
      reinterpret_cast<char*>(&newsynckey_) + sizeof(oobcount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SyncResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SyncResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 NewSyncKey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_newsynckey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newsynckey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 ContinueFlag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_continueflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &continueflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 CmdCount = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_cmdcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmdcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.CmdItem CmdList = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cmdlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 OOBCount = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_oobcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oobcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.CmdItem OOBList = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ooblist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string KeyBuf = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keybuf()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keybuf().data(), this->keybuf().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SyncResponse.KeyBuf");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SyncResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SyncResponse)
  return false;
#undef DO_
}

void SyncResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SyncResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 NewSyncKey = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->newsynckey(), output);
  }

  // required int32 ContinueFlag = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->continueflag(), output);
  }

  // required uint32 CmdCount = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cmdcount(), output);
  }

  // repeated .micromsg.CmdItem CmdList = 5;
  for (unsigned int i = 0, n = this->cmdlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->cmdlist(i), output);
  }

  // required uint32 OOBCount = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->oobcount(), output);
  }

  // repeated .micromsg.CmdItem OOBList = 7;
  for (unsigned int i = 0, n = this->ooblist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->ooblist(i), output);
  }

  // optional string KeyBuf = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keybuf().data(), this->keybuf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SyncResponse.KeyBuf");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->keybuf(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SyncResponse)
}

::google::protobuf::uint8* SyncResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SyncResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 NewSyncKey = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->newsynckey(), target);
  }

  // required int32 ContinueFlag = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->continueflag(), target);
  }

  // required uint32 CmdCount = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cmdcount(), target);
  }

  // repeated .micromsg.CmdItem CmdList = 5;
  for (unsigned int i = 0, n = this->cmdlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->cmdlist(i), deterministic, target);
  }

  // required uint32 OOBCount = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->oobcount(), target);
  }

  // repeated .micromsg.CmdItem OOBList = 7;
  for (unsigned int i = 0, n = this->ooblist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->ooblist(i), deterministic, target);
  }

  // optional string KeyBuf = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keybuf().data(), this->keybuf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SyncResponse.KeyBuf");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->keybuf(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SyncResponse)
  return target;
}

size_t SyncResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SyncResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_newsynckey()) {
    // required uint32 NewSyncKey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->newsynckey());
  }

  if (has_continueflag()) {
    // required int32 ContinueFlag = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->continueflag());
  }

  if (has_cmdcount()) {
    // required uint32 CmdCount = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cmdcount());
  }

  if (has_oobcount()) {
    // required uint32 OOBCount = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->oobcount());
  }

  return total_size;
}
size_t SyncResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SyncResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003e) ^ 0x0000003e) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 NewSyncKey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->newsynckey());

    // required int32 ContinueFlag = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->continueflag());

    // required uint32 CmdCount = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cmdcount());

    // required uint32 OOBCount = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->oobcount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.CmdItem CmdList = 5;
  {
    unsigned int count = this->cmdlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cmdlist(i));
    }
  }

  // repeated .micromsg.CmdItem OOBList = 7;
  {
    unsigned int count = this->ooblist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ooblist(i));
    }
  }

  // optional string KeyBuf = 8;
  if (has_keybuf()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->keybuf());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SyncResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SyncResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SyncResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SyncResponse)
    MergeFrom(*source);
  }
}

void SyncResponse::MergeFrom(const SyncResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SyncResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cmdlist_.MergeFrom(from.cmdlist_);
  ooblist_.MergeFrom(from.ooblist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_keybuf();
      keybuf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keybuf_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000004u) {
      newsynckey_ = from.newsynckey_;
    }
    if (cached_has_bits & 0x00000008u) {
      continueflag_ = from.continueflag_;
    }
    if (cached_has_bits & 0x00000010u) {
      cmdcount_ = from.cmdcount_;
    }
    if (cached_has_bits & 0x00000020u) {
      oobcount_ = from.oobcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SyncResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SyncResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncResponse::CopyFrom(const SyncResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SyncResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003e) != 0x0000003e) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->cmdlist())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ooblist())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void SyncResponse::Swap(SyncResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SyncResponse::InternalSwap(SyncResponse* other) {
  cmdlist_.InternalSwap(&other->cmdlist_);
  ooblist_.InternalSwap(&other->ooblist_);
  keybuf_.Swap(&other->keybuf_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(newsynckey_, other->newsynckey_);
  std::swap(continueflag_, other->continueflag_);
  std::swap(cmdcount_, other->cmdcount_);
  std::swap(oobcount_, other->oobcount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SyncResponse::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SyncResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool SyncResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SyncResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
void SyncResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
void SyncResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& SyncResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.SyncResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* SyncResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SyncResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* SyncResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.SyncResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void SyncResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SyncResponse.BaseResponse)
}

// required uint32 NewSyncKey = 2;
bool SyncResponse::has_newsynckey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SyncResponse::set_has_newsynckey() {
  _has_bits_[0] |= 0x00000004u;
}
void SyncResponse::clear_has_newsynckey() {
  _has_bits_[0] &= ~0x00000004u;
}
void SyncResponse::clear_newsynckey() {
  newsynckey_ = 0u;
  clear_has_newsynckey();
}
::google::protobuf::uint32 SyncResponse::newsynckey() const {
  // @@protoc_insertion_point(field_get:micromsg.SyncResponse.NewSyncKey)
  return newsynckey_;
}
void SyncResponse::set_newsynckey(::google::protobuf::uint32 value) {
  set_has_newsynckey();
  newsynckey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SyncResponse.NewSyncKey)
}

// required int32 ContinueFlag = 3;
bool SyncResponse::has_continueflag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SyncResponse::set_has_continueflag() {
  _has_bits_[0] |= 0x00000008u;
}
void SyncResponse::clear_has_continueflag() {
  _has_bits_[0] &= ~0x00000008u;
}
void SyncResponse::clear_continueflag() {
  continueflag_ = 0;
  clear_has_continueflag();
}
::google::protobuf::int32 SyncResponse::continueflag() const {
  // @@protoc_insertion_point(field_get:micromsg.SyncResponse.ContinueFlag)
  return continueflag_;
}
void SyncResponse::set_continueflag(::google::protobuf::int32 value) {
  set_has_continueflag();
  continueflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SyncResponse.ContinueFlag)
}

// required uint32 CmdCount = 4;
bool SyncResponse::has_cmdcount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SyncResponse::set_has_cmdcount() {
  _has_bits_[0] |= 0x00000010u;
}
void SyncResponse::clear_has_cmdcount() {
  _has_bits_[0] &= ~0x00000010u;
}
void SyncResponse::clear_cmdcount() {
  cmdcount_ = 0u;
  clear_has_cmdcount();
}
::google::protobuf::uint32 SyncResponse::cmdcount() const {
  // @@protoc_insertion_point(field_get:micromsg.SyncResponse.CmdCount)
  return cmdcount_;
}
void SyncResponse::set_cmdcount(::google::protobuf::uint32 value) {
  set_has_cmdcount();
  cmdcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SyncResponse.CmdCount)
}

// repeated .micromsg.CmdItem CmdList = 5;
int SyncResponse::cmdlist_size() const {
  return cmdlist_.size();
}
void SyncResponse::clear_cmdlist() {
  cmdlist_.Clear();
}
const ::micromsg::CmdItem& SyncResponse::cmdlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.SyncResponse.CmdList)
  return cmdlist_.Get(index);
}
::micromsg::CmdItem* SyncResponse::mutable_cmdlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.SyncResponse.CmdList)
  return cmdlist_.Mutable(index);
}
::micromsg::CmdItem* SyncResponse::add_cmdlist() {
  // @@protoc_insertion_point(field_add:micromsg.SyncResponse.CmdList)
  return cmdlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::CmdItem >*
SyncResponse::mutable_cmdlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.SyncResponse.CmdList)
  return &cmdlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::CmdItem >&
SyncResponse::cmdlist() const {
  // @@protoc_insertion_point(field_list:micromsg.SyncResponse.CmdList)
  return cmdlist_;
}

// required uint32 OOBCount = 6;
bool SyncResponse::has_oobcount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SyncResponse::set_has_oobcount() {
  _has_bits_[0] |= 0x00000020u;
}
void SyncResponse::clear_has_oobcount() {
  _has_bits_[0] &= ~0x00000020u;
}
void SyncResponse::clear_oobcount() {
  oobcount_ = 0u;
  clear_has_oobcount();
}
::google::protobuf::uint32 SyncResponse::oobcount() const {
  // @@protoc_insertion_point(field_get:micromsg.SyncResponse.OOBCount)
  return oobcount_;
}
void SyncResponse::set_oobcount(::google::protobuf::uint32 value) {
  set_has_oobcount();
  oobcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SyncResponse.OOBCount)
}

// repeated .micromsg.CmdItem OOBList = 7;
int SyncResponse::ooblist_size() const {
  return ooblist_.size();
}
void SyncResponse::clear_ooblist() {
  ooblist_.Clear();
}
const ::micromsg::CmdItem& SyncResponse::ooblist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.SyncResponse.OOBList)
  return ooblist_.Get(index);
}
::micromsg::CmdItem* SyncResponse::mutable_ooblist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.SyncResponse.OOBList)
  return ooblist_.Mutable(index);
}
::micromsg::CmdItem* SyncResponse::add_ooblist() {
  // @@protoc_insertion_point(field_add:micromsg.SyncResponse.OOBList)
  return ooblist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::CmdItem >*
SyncResponse::mutable_ooblist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.SyncResponse.OOBList)
  return &ooblist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::CmdItem >&
SyncResponse::ooblist() const {
  // @@protoc_insertion_point(field_list:micromsg.SyncResponse.OOBList)
  return ooblist_;
}

// optional string KeyBuf = 8;
bool SyncResponse::has_keybuf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SyncResponse::set_has_keybuf() {
  _has_bits_[0] |= 0x00000001u;
}
void SyncResponse::clear_has_keybuf() {
  _has_bits_[0] &= ~0x00000001u;
}
void SyncResponse::clear_keybuf() {
  keybuf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_keybuf();
}
const ::std::string& SyncResponse::keybuf() const {
  // @@protoc_insertion_point(field_get:micromsg.SyncResponse.KeyBuf)
  return keybuf_.GetNoArena();
}
void SyncResponse::set_keybuf(const ::std::string& value) {
  set_has_keybuf();
  keybuf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SyncResponse.KeyBuf)
}
#if LANG_CXX11
void SyncResponse::set_keybuf(::std::string&& value) {
  set_has_keybuf();
  keybuf_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SyncResponse.KeyBuf)
}
#endif
void SyncResponse::set_keybuf(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_keybuf();
  keybuf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SyncResponse.KeyBuf)
}
void SyncResponse::set_keybuf(const char* value, size_t size) {
  set_has_keybuf();
  keybuf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SyncResponse.KeyBuf)
}
::std::string* SyncResponse::mutable_keybuf() {
  set_has_keybuf();
  // @@protoc_insertion_point(field_mutable:micromsg.SyncResponse.KeyBuf)
  return keybuf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SyncResponse::release_keybuf() {
  // @@protoc_insertion_point(field_release:micromsg.SyncResponse.KeyBuf)
  clear_has_keybuf();
  return keybuf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SyncResponse::set_allocated_keybuf(::std::string* keybuf) {
  if (keybuf != NULL) {
    set_has_keybuf();
  } else {
    clear_has_keybuf();
  }
  keybuf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), keybuf);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SyncResponse.KeyBuf)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyVal::kKeyFieldNumber;
const int KeyVal::kValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyVal::KeyVal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.KeyVal)
}
KeyVal::KeyVal(const KeyVal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&key_, &from.key_,
    reinterpret_cast<char*>(&val_) -
    reinterpret_cast<char*>(&key_) + sizeof(val_));
  // @@protoc_insertion_point(copy_constructor:micromsg.KeyVal)
}

void KeyVal::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&key_, 0, reinterpret_cast<char*>(&val_) -
    reinterpret_cast<char*>(&key_) + sizeof(val_));
}

KeyVal::~KeyVal() {
  // @@protoc_insertion_point(destructor:micromsg.KeyVal)
  SharedDtor();
}

void KeyVal::SharedDtor() {
}

void KeyVal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyVal::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KeyVal& KeyVal::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

KeyVal* KeyVal::New(::google::protobuf::Arena* arena) const {
  KeyVal* n = new KeyVal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyVal::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.KeyVal)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&key_, 0, reinterpret_cast<char*>(&val_) -
      reinterpret_cast<char*>(&key_) + sizeof(val_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool KeyVal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.KeyVal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_key();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Val = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_val();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &val_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.KeyVal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.KeyVal)
  return false;
#undef DO_
}

void KeyVal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.KeyVal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->key(), output);
  }

  // required uint32 Val = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->val(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.KeyVal)
}

::google::protobuf::uint8* KeyVal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.KeyVal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->key(), target);
  }

  // required uint32 Val = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->val(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.KeyVal)
  return target;
}

size_t KeyVal::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.KeyVal)
  size_t total_size = 0;

  if (has_key()) {
    // required uint32 Key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->key());
  }

  if (has_val()) {
    // required uint32 Val = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->val());
  }

  return total_size;
}
size_t KeyVal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.KeyVal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 Key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->key());

    // required uint32 Val = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->val());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyVal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.KeyVal)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyVal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyVal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.KeyVal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.KeyVal)
    MergeFrom(*source);
  }
}

void KeyVal::MergeFrom(const KeyVal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.KeyVal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      key_ = from.key_;
    }
    if (cached_has_bits & 0x00000002u) {
      val_ = from.val_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KeyVal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.KeyVal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyVal::CopyFrom(const KeyVal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.KeyVal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyVal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void KeyVal::Swap(KeyVal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyVal::InternalSwap(KeyVal* other) {
  std::swap(key_, other->key_);
  std::swap(val_, other->val_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeyVal::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeyVal

// required uint32 Key = 1;
bool KeyVal::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KeyVal::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void KeyVal::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void KeyVal::clear_key() {
  key_ = 0u;
  clear_has_key();
}
::google::protobuf::uint32 KeyVal::key() const {
  // @@protoc_insertion_point(field_get:micromsg.KeyVal.Key)
  return key_;
}
void KeyVal::set_key(::google::protobuf::uint32 value) {
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:micromsg.KeyVal.Key)
}

// required uint32 Val = 2;
bool KeyVal::has_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void KeyVal::set_has_val() {
  _has_bits_[0] |= 0x00000002u;
}
void KeyVal::clear_has_val() {
  _has_bits_[0] &= ~0x00000002u;
}
void KeyVal::clear_val() {
  val_ = 0u;
  clear_has_val();
}
::google::protobuf::uint32 KeyVal::val() const {
  // @@protoc_insertion_point(field_get:micromsg.KeyVal.Val)
  return val_;
}
void KeyVal::set_val(::google::protobuf::uint32 value) {
  set_has_val();
  val_ = value;
  // @@protoc_insertion_point(field_set:micromsg.KeyVal.Val)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SyncKey::kKeyCountFieldNumber;
const int SyncKey::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SyncKey::SyncKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SyncKey)
}
SyncKey::SyncKey(const SyncKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      key_(from.key_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  keycount_ = from.keycount_;
  // @@protoc_insertion_point(copy_constructor:micromsg.SyncKey)
}

void SyncKey::SharedCtor() {
  _cached_size_ = 0;
  keycount_ = 0u;
}

SyncKey::~SyncKey() {
  // @@protoc_insertion_point(destructor:micromsg.SyncKey)
  SharedDtor();
}

void SyncKey::SharedDtor() {
}

void SyncKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncKey::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SyncKey& SyncKey::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

SyncKey* SyncKey::New(::google::protobuf::Arena* arena) const {
  SyncKey* n = new SyncKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SyncKey::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SyncKey)
  key_.Clear();
  keycount_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SyncKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SyncKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 KeyCount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_keycount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &keycount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.KeyVal Key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SyncKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SyncKey)
  return false;
#undef DO_
}

void SyncKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SyncKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 KeyCount = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->keycount(), output);
  }

  // repeated .micromsg.KeyVal Key = 2;
  for (unsigned int i = 0, n = this->key_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->key(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SyncKey)
}

::google::protobuf::uint8* SyncKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SyncKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 KeyCount = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->keycount(), target);
  }

  // repeated .micromsg.KeyVal Key = 2;
  for (unsigned int i = 0, n = this->key_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->key(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SyncKey)
  return target;
}

size_t SyncKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SyncKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 KeyCount = 1;
  if (has_keycount()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->keycount());
  }
  // repeated .micromsg.KeyVal Key = 2;
  {
    unsigned int count = this->key_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->key(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SyncKey)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SyncKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SyncKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SyncKey)
    MergeFrom(*source);
  }
}

void SyncKey::MergeFrom(const SyncKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SyncKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  key_.MergeFrom(from.key_);
  if (from.has_keycount()) {
    set_keycount(from.keycount());
  }
}

void SyncKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SyncKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncKey::CopyFrom(const SyncKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SyncKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncKey::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->key())) return false;
  return true;
}

void SyncKey::Swap(SyncKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SyncKey::InternalSwap(SyncKey* other) {
  key_.InternalSwap(&other->key_);
  std::swap(keycount_, other->keycount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SyncKey::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SyncKey

// required uint32 KeyCount = 1;
bool SyncKey::has_keycount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SyncKey::set_has_keycount() {
  _has_bits_[0] |= 0x00000001u;
}
void SyncKey::clear_has_keycount() {
  _has_bits_[0] &= ~0x00000001u;
}
void SyncKey::clear_keycount() {
  keycount_ = 0u;
  clear_has_keycount();
}
::google::protobuf::uint32 SyncKey::keycount() const {
  // @@protoc_insertion_point(field_get:micromsg.SyncKey.KeyCount)
  return keycount_;
}
void SyncKey::set_keycount(::google::protobuf::uint32 value) {
  set_has_keycount();
  keycount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SyncKey.KeyCount)
}

// repeated .micromsg.KeyVal Key = 2;
int SyncKey::key_size() const {
  return key_.size();
}
void SyncKey::clear_key() {
  key_.Clear();
}
const ::micromsg::KeyVal& SyncKey::key(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.SyncKey.Key)
  return key_.Get(index);
}
::micromsg::KeyVal* SyncKey::mutable_key(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.SyncKey.Key)
  return key_.Mutable(index);
}
::micromsg::KeyVal* SyncKey::add_key() {
  // @@protoc_insertion_point(field_add:micromsg.SyncKey.Key)
  return key_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::KeyVal >*
SyncKey::mutable_key() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.SyncKey.Key)
  return &key_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::KeyVal >&
SyncKey::key() const {
  // @@protoc_insertion_point(field_list:micromsg.SyncKey.Key)
  return key_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewSyncRequest::kOplogFieldNumber;
const int NewSyncRequest::kSelectorFieldNumber;
const int NewSyncRequest::kKeyBufFieldNumber;
const int NewSyncRequest::kSceneFieldNumber;
const int NewSyncRequest::kDeviceTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewSyncRequest::NewSyncRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.NewSyncRequest)
}
NewSyncRequest::NewSyncRequest(const NewSyncRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  devicetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_devicetype()) {
    devicetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicetype_);
  }
  if (from.has_oplog()) {
    oplog_ = new ::micromsg::CmdList(*from.oplog_);
  } else {
    oplog_ = NULL;
  }
  if (from.has_keybuf()) {
    keybuf_ = new ::micromsg::SKBuiltinBuffer_t(*from.keybuf_);
  } else {
    keybuf_ = NULL;
  }
  ::memcpy(&selector_, &from.selector_,
    reinterpret_cast<char*>(&scene_) -
    reinterpret_cast<char*>(&selector_) + sizeof(scene_));
  // @@protoc_insertion_point(copy_constructor:micromsg.NewSyncRequest)
}

void NewSyncRequest::SharedCtor() {
  _cached_size_ = 0;
  devicetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&oplog_, 0, reinterpret_cast<char*>(&scene_) -
    reinterpret_cast<char*>(&oplog_) + sizeof(scene_));
}

NewSyncRequest::~NewSyncRequest() {
  // @@protoc_insertion_point(destructor:micromsg.NewSyncRequest)
  SharedDtor();
}

void NewSyncRequest::SharedDtor() {
  devicetype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete oplog_;
  }
  if (this != internal_default_instance()) {
    delete keybuf_;
  }
}

void NewSyncRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewSyncRequest::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NewSyncRequest& NewSyncRequest::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

NewSyncRequest* NewSyncRequest::New(::google::protobuf::Arena* arena) const {
  NewSyncRequest* n = new NewSyncRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NewSyncRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.NewSyncRequest)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_devicetype()) {
      GOOGLE_DCHECK(!devicetype_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*devicetype_.UnsafeRawStringPointer())->clear();
    }
    if (has_oplog()) {
      GOOGLE_DCHECK(oplog_ != NULL);
      oplog_->::micromsg::CmdList::Clear();
    }
    if (has_keybuf()) {
      GOOGLE_DCHECK(keybuf_ != NULL);
      keybuf_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&selector_, 0, reinterpret_cast<char*>(&scene_) -
      reinterpret_cast<char*>(&selector_) + sizeof(scene_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NewSyncRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.NewSyncRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.CmdList Oplog = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oplog()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Selector = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_selector();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selector_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keybuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Scene = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_scene();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string DeviceType = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devicetype().data(), this->devicetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewSyncRequest.DeviceType");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.NewSyncRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.NewSyncRequest)
  return false;
#undef DO_
}

void NewSyncRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.NewSyncRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.CmdList Oplog = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->oplog_, output);
  }

  // required uint32 Selector = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->selector(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->keybuf_, output);
  }

  // optional uint32 Scene = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->scene(), output);
  }

  // optional string DeviceType = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicetype().data(), this->devicetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewSyncRequest.DeviceType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->devicetype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.NewSyncRequest)
}

::google::protobuf::uint8* NewSyncRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.NewSyncRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.CmdList Oplog = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->oplog_, deterministic, target);
  }

  // required uint32 Selector = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->selector(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->keybuf_, deterministic, target);
  }

  // optional uint32 Scene = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->scene(), target);
  }

  // optional string DeviceType = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicetype().data(), this->devicetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewSyncRequest.DeviceType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->devicetype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.NewSyncRequest)
  return target;
}

size_t NewSyncRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.NewSyncRequest)
  size_t total_size = 0;

  if (has_oplog()) {
    // required .micromsg.CmdList Oplog = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->oplog_);
  }

  if (has_keybuf()) {
    // required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->keybuf_);
  }

  if (has_selector()) {
    // required uint32 Selector = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->selector());
  }

  return total_size;
}
size_t NewSyncRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.NewSyncRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required .micromsg.CmdList Oplog = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->oplog_);

    // required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->keybuf_);

    // required uint32 Selector = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->selector());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string DeviceType = 5;
  if (has_devicetype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->devicetype());
  }

  // optional uint32 Scene = 4;
  if (has_scene()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewSyncRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.NewSyncRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NewSyncRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NewSyncRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.NewSyncRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.NewSyncRequest)
    MergeFrom(*source);
  }
}

void NewSyncRequest::MergeFrom(const NewSyncRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.NewSyncRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_devicetype();
      devicetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicetype_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_oplog()->::micromsg::CmdList::MergeFrom(from.oplog());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_keybuf()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.keybuf());
    }
    if (cached_has_bits & 0x00000008u) {
      selector_ = from.selector_;
    }
    if (cached_has_bits & 0x00000010u) {
      scene_ = from.scene_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NewSyncRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.NewSyncRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewSyncRequest::CopyFrom(const NewSyncRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.NewSyncRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewSyncRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  if (has_oplog()) {
    if (!this->oplog_->IsInitialized()) return false;
  }
  if (has_keybuf()) {
    if (!this->keybuf_->IsInitialized()) return false;
  }
  return true;
}

void NewSyncRequest::Swap(NewSyncRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewSyncRequest::InternalSwap(NewSyncRequest* other) {
  devicetype_.Swap(&other->devicetype_);
  std::swap(oplog_, other->oplog_);
  std::swap(keybuf_, other->keybuf_);
  std::swap(selector_, other->selector_);
  std::swap(scene_, other->scene_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NewSyncRequest::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NewSyncRequest

// required .micromsg.CmdList Oplog = 1;
bool NewSyncRequest::has_oplog() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NewSyncRequest::set_has_oplog() {
  _has_bits_[0] |= 0x00000002u;
}
void NewSyncRequest::clear_has_oplog() {
  _has_bits_[0] &= ~0x00000002u;
}
void NewSyncRequest::clear_oplog() {
  if (oplog_ != NULL) oplog_->::micromsg::CmdList::Clear();
  clear_has_oplog();
}
const ::micromsg::CmdList& NewSyncRequest::oplog() const {
  // @@protoc_insertion_point(field_get:micromsg.NewSyncRequest.Oplog)
  return oplog_ != NULL ? *oplog_
                         : *::micromsg::CmdList::internal_default_instance();
}
::micromsg::CmdList* NewSyncRequest::mutable_oplog() {
  set_has_oplog();
  if (oplog_ == NULL) {
    oplog_ = new ::micromsg::CmdList;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewSyncRequest.Oplog)
  return oplog_;
}
::micromsg::CmdList* NewSyncRequest::release_oplog() {
  // @@protoc_insertion_point(field_release:micromsg.NewSyncRequest.Oplog)
  clear_has_oplog();
  ::micromsg::CmdList* temp = oplog_;
  oplog_ = NULL;
  return temp;
}
void NewSyncRequest::set_allocated_oplog(::micromsg::CmdList* oplog) {
  delete oplog_;
  oplog_ = oplog;
  if (oplog) {
    set_has_oplog();
  } else {
    clear_has_oplog();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewSyncRequest.Oplog)
}

// required uint32 Selector = 2;
bool NewSyncRequest::has_selector() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NewSyncRequest::set_has_selector() {
  _has_bits_[0] |= 0x00000008u;
}
void NewSyncRequest::clear_has_selector() {
  _has_bits_[0] &= ~0x00000008u;
}
void NewSyncRequest::clear_selector() {
  selector_ = 0u;
  clear_has_selector();
}
::google::protobuf::uint32 NewSyncRequest::selector() const {
  // @@protoc_insertion_point(field_get:micromsg.NewSyncRequest.Selector)
  return selector_;
}
void NewSyncRequest::set_selector(::google::protobuf::uint32 value) {
  set_has_selector();
  selector_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewSyncRequest.Selector)
}

// required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
bool NewSyncRequest::has_keybuf() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NewSyncRequest::set_has_keybuf() {
  _has_bits_[0] |= 0x00000004u;
}
void NewSyncRequest::clear_has_keybuf() {
  _has_bits_[0] &= ~0x00000004u;
}
void NewSyncRequest::clear_keybuf() {
  if (keybuf_ != NULL) keybuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_keybuf();
}
const ::micromsg::SKBuiltinBuffer_t& NewSyncRequest::keybuf() const {
  // @@protoc_insertion_point(field_get:micromsg.NewSyncRequest.KeyBuf)
  return keybuf_ != NULL ? *keybuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* NewSyncRequest::mutable_keybuf() {
  set_has_keybuf();
  if (keybuf_ == NULL) {
    keybuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewSyncRequest.KeyBuf)
  return keybuf_;
}
::micromsg::SKBuiltinBuffer_t* NewSyncRequest::release_keybuf() {
  // @@protoc_insertion_point(field_release:micromsg.NewSyncRequest.KeyBuf)
  clear_has_keybuf();
  ::micromsg::SKBuiltinBuffer_t* temp = keybuf_;
  keybuf_ = NULL;
  return temp;
}
void NewSyncRequest::set_allocated_keybuf(::micromsg::SKBuiltinBuffer_t* keybuf) {
  delete keybuf_;
  keybuf_ = keybuf;
  if (keybuf) {
    set_has_keybuf();
  } else {
    clear_has_keybuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewSyncRequest.KeyBuf)
}

// optional uint32 Scene = 4;
bool NewSyncRequest::has_scene() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NewSyncRequest::set_has_scene() {
  _has_bits_[0] |= 0x00000010u;
}
void NewSyncRequest::clear_has_scene() {
  _has_bits_[0] &= ~0x00000010u;
}
void NewSyncRequest::clear_scene() {
  scene_ = 0u;
  clear_has_scene();
}
::google::protobuf::uint32 NewSyncRequest::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.NewSyncRequest.Scene)
  return scene_;
}
void NewSyncRequest::set_scene(::google::protobuf::uint32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewSyncRequest.Scene)
}

// optional string DeviceType = 5;
bool NewSyncRequest::has_devicetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NewSyncRequest::set_has_devicetype() {
  _has_bits_[0] |= 0x00000001u;
}
void NewSyncRequest::clear_has_devicetype() {
  _has_bits_[0] &= ~0x00000001u;
}
void NewSyncRequest::clear_devicetype() {
  devicetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_devicetype();
}
const ::std::string& NewSyncRequest::devicetype() const {
  // @@protoc_insertion_point(field_get:micromsg.NewSyncRequest.DeviceType)
  return devicetype_.GetNoArena();
}
void NewSyncRequest::set_devicetype(const ::std::string& value) {
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewSyncRequest.DeviceType)
}
#if LANG_CXX11
void NewSyncRequest::set_devicetype(::std::string&& value) {
  set_has_devicetype();
  devicetype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewSyncRequest.DeviceType)
}
#endif
void NewSyncRequest::set_devicetype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewSyncRequest.DeviceType)
}
void NewSyncRequest::set_devicetype(const char* value, size_t size) {
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewSyncRequest.DeviceType)
}
::std::string* NewSyncRequest::mutable_devicetype() {
  set_has_devicetype();
  // @@protoc_insertion_point(field_mutable:micromsg.NewSyncRequest.DeviceType)
  return devicetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewSyncRequest::release_devicetype() {
  // @@protoc_insertion_point(field_release:micromsg.NewSyncRequest.DeviceType)
  clear_has_devicetype();
  return devicetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewSyncRequest::set_allocated_devicetype(::std::string* devicetype) {
  if (devicetype != NULL) {
    set_has_devicetype();
  } else {
    clear_has_devicetype();
  }
  devicetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicetype);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewSyncRequest.DeviceType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewSyncResponse::kRetFieldNumber;
const int NewSyncResponse::kCmdListFieldNumber;
const int NewSyncResponse::kContinueFlagFieldNumber;
const int NewSyncResponse::kKeyBufFieldNumber;
const int NewSyncResponse::kStatusFieldNumber;
const int NewSyncResponse::kOnlineVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewSyncResponse::NewSyncResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.NewSyncResponse)
}
NewSyncResponse::NewSyncResponse(const NewSyncResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cmdlist()) {
    cmdlist_ = new ::micromsg::CmdList(*from.cmdlist_);
  } else {
    cmdlist_ = NULL;
  }
  if (from.has_keybuf()) {
    keybuf_ = new ::micromsg::SKBuiltinBuffer_t(*from.keybuf_);
  } else {
    keybuf_ = NULL;
  }
  ::memcpy(&ret_, &from.ret_,
    reinterpret_cast<char*>(&onlineversion_) -
    reinterpret_cast<char*>(&ret_) + sizeof(onlineversion_));
  // @@protoc_insertion_point(copy_constructor:micromsg.NewSyncResponse)
}

void NewSyncResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&cmdlist_, 0, reinterpret_cast<char*>(&onlineversion_) -
    reinterpret_cast<char*>(&cmdlist_) + sizeof(onlineversion_));
}

NewSyncResponse::~NewSyncResponse() {
  // @@protoc_insertion_point(destructor:micromsg.NewSyncResponse)
  SharedDtor();
}

void NewSyncResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete cmdlist_;
  }
  if (this != internal_default_instance()) {
    delete keybuf_;
  }
}

void NewSyncResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewSyncResponse::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NewSyncResponse& NewSyncResponse::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

NewSyncResponse* NewSyncResponse::New(::google::protobuf::Arena* arena) const {
  NewSyncResponse* n = new NewSyncResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NewSyncResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.NewSyncResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_cmdlist()) {
      GOOGLE_DCHECK(cmdlist_ != NULL);
      cmdlist_->::micromsg::CmdList::Clear();
    }
    if (has_keybuf()) {
      GOOGLE_DCHECK(keybuf_ != NULL);
      keybuf_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 60u) {
    ::memset(&ret_, 0, reinterpret_cast<char*>(&onlineversion_) -
      reinterpret_cast<char*>(&ret_) + sizeof(onlineversion_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NewSyncResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.NewSyncResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Ret = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.CmdList CmdList = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmdlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ContinueFlag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_continueflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &continueflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t KeyBuf = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keybuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 OnlineVersion = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_onlineversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &onlineversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.NewSyncResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.NewSyncResponse)
  return false;
#undef DO_
}

void NewSyncResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.NewSyncResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Ret = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // required .micromsg.CmdList CmdList = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->cmdlist_, output);
  }

  // required uint32 ContinueFlag = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->continueflag(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t KeyBuf = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->keybuf_, output);
  }

  // optional uint32 Status = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->status(), output);
  }

  // optional uint32 OnlineVersion = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->onlineversion(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.NewSyncResponse)
}

::google::protobuf::uint8* NewSyncResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.NewSyncResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Ret = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // required .micromsg.CmdList CmdList = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->cmdlist_, deterministic, target);
  }

  // required uint32 ContinueFlag = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->continueflag(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t KeyBuf = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->keybuf_, deterministic, target);
  }

  // optional uint32 Status = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->status(), target);
  }

  // optional uint32 OnlineVersion = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->onlineversion(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.NewSyncResponse)
  return target;
}

size_t NewSyncResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.NewSyncResponse)
  size_t total_size = 0;

  if (has_cmdlist()) {
    // required .micromsg.CmdList CmdList = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cmdlist_);
  }

  if (has_keybuf()) {
    // required .micromsg.SKBuiltinBuffer_t KeyBuf = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->keybuf_);
  }

  if (has_ret()) {
    // required int32 Ret = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  if (has_continueflag()) {
    // required uint32 ContinueFlag = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->continueflag());
  }

  return total_size;
}
size_t NewSyncResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.NewSyncResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .micromsg.CmdList CmdList = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cmdlist_);

    // required .micromsg.SKBuiltinBuffer_t KeyBuf = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->keybuf_);

    // required int32 Ret = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());

    // required uint32 ContinueFlag = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->continueflag());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 48u) {
    // optional uint32 Status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint32 OnlineVersion = 6;
    if (has_onlineversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->onlineversion());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewSyncResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.NewSyncResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NewSyncResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NewSyncResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.NewSyncResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.NewSyncResponse)
    MergeFrom(*source);
  }
}

void NewSyncResponse::MergeFrom(const NewSyncResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.NewSyncResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_cmdlist()->::micromsg::CmdList::MergeFrom(from.cmdlist());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_keybuf()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.keybuf());
    }
    if (cached_has_bits & 0x00000004u) {
      ret_ = from.ret_;
    }
    if (cached_has_bits & 0x00000008u) {
      continueflag_ = from.continueflag_;
    }
    if (cached_has_bits & 0x00000010u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000020u) {
      onlineversion_ = from.onlineversion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NewSyncResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.NewSyncResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewSyncResponse::CopyFrom(const NewSyncResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.NewSyncResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewSyncResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_cmdlist()) {
    if (!this->cmdlist_->IsInitialized()) return false;
  }
  if (has_keybuf()) {
    if (!this->keybuf_->IsInitialized()) return false;
  }
  return true;
}

void NewSyncResponse::Swap(NewSyncResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewSyncResponse::InternalSwap(NewSyncResponse* other) {
  std::swap(cmdlist_, other->cmdlist_);
  std::swap(keybuf_, other->keybuf_);
  std::swap(ret_, other->ret_);
  std::swap(continueflag_, other->continueflag_);
  std::swap(status_, other->status_);
  std::swap(onlineversion_, other->onlineversion_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NewSyncResponse::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NewSyncResponse

// required int32 Ret = 1;
bool NewSyncResponse::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NewSyncResponse::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
void NewSyncResponse::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
void NewSyncResponse::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
::google::protobuf::int32 NewSyncResponse::ret() const {
  // @@protoc_insertion_point(field_get:micromsg.NewSyncResponse.Ret)
  return ret_;
}
void NewSyncResponse::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewSyncResponse.Ret)
}

// required .micromsg.CmdList CmdList = 2;
bool NewSyncResponse::has_cmdlist() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NewSyncResponse::set_has_cmdlist() {
  _has_bits_[0] |= 0x00000001u;
}
void NewSyncResponse::clear_has_cmdlist() {
  _has_bits_[0] &= ~0x00000001u;
}
void NewSyncResponse::clear_cmdlist() {
  if (cmdlist_ != NULL) cmdlist_->::micromsg::CmdList::Clear();
  clear_has_cmdlist();
}
const ::micromsg::CmdList& NewSyncResponse::cmdlist() const {
  // @@protoc_insertion_point(field_get:micromsg.NewSyncResponse.CmdList)
  return cmdlist_ != NULL ? *cmdlist_
                         : *::micromsg::CmdList::internal_default_instance();
}
::micromsg::CmdList* NewSyncResponse::mutable_cmdlist() {
  set_has_cmdlist();
  if (cmdlist_ == NULL) {
    cmdlist_ = new ::micromsg::CmdList;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewSyncResponse.CmdList)
  return cmdlist_;
}
::micromsg::CmdList* NewSyncResponse::release_cmdlist() {
  // @@protoc_insertion_point(field_release:micromsg.NewSyncResponse.CmdList)
  clear_has_cmdlist();
  ::micromsg::CmdList* temp = cmdlist_;
  cmdlist_ = NULL;
  return temp;
}
void NewSyncResponse::set_allocated_cmdlist(::micromsg::CmdList* cmdlist) {
  delete cmdlist_;
  cmdlist_ = cmdlist;
  if (cmdlist) {
    set_has_cmdlist();
  } else {
    clear_has_cmdlist();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewSyncResponse.CmdList)
}

// required uint32 ContinueFlag = 3;
bool NewSyncResponse::has_continueflag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NewSyncResponse::set_has_continueflag() {
  _has_bits_[0] |= 0x00000008u;
}
void NewSyncResponse::clear_has_continueflag() {
  _has_bits_[0] &= ~0x00000008u;
}
void NewSyncResponse::clear_continueflag() {
  continueflag_ = 0u;
  clear_has_continueflag();
}
::google::protobuf::uint32 NewSyncResponse::continueflag() const {
  // @@protoc_insertion_point(field_get:micromsg.NewSyncResponse.ContinueFlag)
  return continueflag_;
}
void NewSyncResponse::set_continueflag(::google::protobuf::uint32 value) {
  set_has_continueflag();
  continueflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewSyncResponse.ContinueFlag)
}

// required .micromsg.SKBuiltinBuffer_t KeyBuf = 4;
bool NewSyncResponse::has_keybuf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NewSyncResponse::set_has_keybuf() {
  _has_bits_[0] |= 0x00000002u;
}
void NewSyncResponse::clear_has_keybuf() {
  _has_bits_[0] &= ~0x00000002u;
}
void NewSyncResponse::clear_keybuf() {
  if (keybuf_ != NULL) keybuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_keybuf();
}
const ::micromsg::SKBuiltinBuffer_t& NewSyncResponse::keybuf() const {
  // @@protoc_insertion_point(field_get:micromsg.NewSyncResponse.KeyBuf)
  return keybuf_ != NULL ? *keybuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* NewSyncResponse::mutable_keybuf() {
  set_has_keybuf();
  if (keybuf_ == NULL) {
    keybuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.NewSyncResponse.KeyBuf)
  return keybuf_;
}
::micromsg::SKBuiltinBuffer_t* NewSyncResponse::release_keybuf() {
  // @@protoc_insertion_point(field_release:micromsg.NewSyncResponse.KeyBuf)
  clear_has_keybuf();
  ::micromsg::SKBuiltinBuffer_t* temp = keybuf_;
  keybuf_ = NULL;
  return temp;
}
void NewSyncResponse::set_allocated_keybuf(::micromsg::SKBuiltinBuffer_t* keybuf) {
  delete keybuf_;
  keybuf_ = keybuf;
  if (keybuf) {
    set_has_keybuf();
  } else {
    clear_has_keybuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewSyncResponse.KeyBuf)
}

// optional uint32 Status = 5;
bool NewSyncResponse::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NewSyncResponse::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
void NewSyncResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
void NewSyncResponse::clear_status() {
  status_ = 0u;
  clear_has_status();
}
::google::protobuf::uint32 NewSyncResponse::status() const {
  // @@protoc_insertion_point(field_get:micromsg.NewSyncResponse.Status)
  return status_;
}
void NewSyncResponse::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewSyncResponse.Status)
}

// optional uint32 OnlineVersion = 6;
bool NewSyncResponse::has_onlineversion() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void NewSyncResponse::set_has_onlineversion() {
  _has_bits_[0] |= 0x00000020u;
}
void NewSyncResponse::clear_has_onlineversion() {
  _has_bits_[0] &= ~0x00000020u;
}
void NewSyncResponse::clear_onlineversion() {
  onlineversion_ = 0u;
  clear_has_onlineversion();
}
::google::protobuf::uint32 NewSyncResponse::onlineversion() const {
  // @@protoc_insertion_point(field_get:micromsg.NewSyncResponse.OnlineVersion)
  return onlineversion_;
}
void NewSyncResponse::set_onlineversion(::google::protobuf::uint32 value) {
  set_has_onlineversion();
  onlineversion_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewSyncResponse.OnlineVersion)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SyncFriendRequest::kBaseRequestFieldNumber;
const int SyncFriendRequest::kUserNameFieldNumber;
const int SyncFriendRequest::kSyncKeyFieldNumber;
const int SyncFriendRequest::kSceneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SyncFriendRequest::SyncFriendRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SyncFriendRequest)
}
SyncFriendRequest::SyncFriendRequest(const SyncFriendRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_username()) {
    username_ = new ::micromsg::SKBuiltinString_t(*from.username_);
  } else {
    username_ = NULL;
  }
  ::memcpy(&synckey_, &from.synckey_,
    reinterpret_cast<char*>(&scene_) -
    reinterpret_cast<char*>(&synckey_) + sizeof(scene_));
  // @@protoc_insertion_point(copy_constructor:micromsg.SyncFriendRequest)
}

void SyncFriendRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&scene_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(scene_));
}

SyncFriendRequest::~SyncFriendRequest() {
  // @@protoc_insertion_point(destructor:micromsg.SyncFriendRequest)
  SharedDtor();
}

void SyncFriendRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete username_;
  }
}

void SyncFriendRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncFriendRequest::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SyncFriendRequest& SyncFriendRequest::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

SyncFriendRequest* SyncFriendRequest::New(::google::protobuf::Arena* arena) const {
  SyncFriendRequest* n = new SyncFriendRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SyncFriendRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SyncFriendRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_username()) {
      GOOGLE_DCHECK(username_ != NULL);
      username_->::micromsg::SKBuiltinString_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&synckey_, 0, reinterpret_cast<char*>(&scene_) -
      reinterpret_cast<char*>(&synckey_) + sizeof(scene_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SyncFriendRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SyncFriendRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t UserName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_username()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 SyncKey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_synckey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &synckey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Scene = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_scene();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SyncFriendRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SyncFriendRequest)
  return false;
#undef DO_
}

void SyncFriendRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SyncFriendRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required .micromsg.SKBuiltinString_t UserName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->username_, output);
  }

  // required uint32 SyncKey = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->synckey(), output);
  }

  // required int32 Scene = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->scene(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SyncFriendRequest)
}

::google::protobuf::uint8* SyncFriendRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SyncFriendRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t UserName = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->username_, deterministic, target);
  }

  // required uint32 SyncKey = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->synckey(), target);
  }

  // required int32 Scene = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->scene(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SyncFriendRequest)
  return target;
}

size_t SyncFriendRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SyncFriendRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_username()) {
    // required .micromsg.SKBuiltinString_t UserName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->username_);
  }

  if (has_synckey()) {
    // required uint32 SyncKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->synckey());
  }

  if (has_scene()) {
    // required int32 Scene = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->scene());
  }

  return total_size;
}
size_t SyncFriendRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SyncFriendRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.SKBuiltinString_t UserName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->username_);

    // required uint32 SyncKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->synckey());

    // required int32 Scene = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->scene());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncFriendRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SyncFriendRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncFriendRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SyncFriendRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SyncFriendRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SyncFriendRequest)
    MergeFrom(*source);
  }
}

void SyncFriendRequest::MergeFrom(const SyncFriendRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SyncFriendRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_username()->::micromsg::SKBuiltinString_t::MergeFrom(from.username());
    }
    if (cached_has_bits & 0x00000004u) {
      synckey_ = from.synckey_;
    }
    if (cached_has_bits & 0x00000008u) {
      scene_ = from.scene_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SyncFriendRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SyncFriendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncFriendRequest::CopyFrom(const SyncFriendRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SyncFriendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncFriendRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void SyncFriendRequest::Swap(SyncFriendRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SyncFriendRequest::InternalSwap(SyncFriendRequest* other) {
  std::swap(baserequest_, other->baserequest_);
  std::swap(username_, other->username_);
  std::swap(synckey_, other->synckey_);
  std::swap(scene_, other->scene_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SyncFriendRequest::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SyncFriendRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool SyncFriendRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SyncFriendRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void SyncFriendRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void SyncFriendRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& SyncFriendRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.SyncFriendRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* SyncFriendRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SyncFriendRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* SyncFriendRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.SyncFriendRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void SyncFriendRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SyncFriendRequest.BaseRequest)
}

// required .micromsg.SKBuiltinString_t UserName = 2;
bool SyncFriendRequest::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SyncFriendRequest::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
void SyncFriendRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
void SyncFriendRequest::clear_username() {
  if (username_ != NULL) username_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_username();
}
const ::micromsg::SKBuiltinString_t& SyncFriendRequest::username() const {
  // @@protoc_insertion_point(field_get:micromsg.SyncFriendRequest.UserName)
  return username_ != NULL ? *username_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* SyncFriendRequest::mutable_username() {
  set_has_username();
  if (username_ == NULL) {
    username_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SyncFriendRequest.UserName)
  return username_;
}
::micromsg::SKBuiltinString_t* SyncFriendRequest::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.SyncFriendRequest.UserName)
  clear_has_username();
  ::micromsg::SKBuiltinString_t* temp = username_;
  username_ = NULL;
  return temp;
}
void SyncFriendRequest::set_allocated_username(::micromsg::SKBuiltinString_t* username) {
  delete username_;
  username_ = username;
  if (username) {
    set_has_username();
  } else {
    clear_has_username();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SyncFriendRequest.UserName)
}

// required uint32 SyncKey = 3;
bool SyncFriendRequest::has_synckey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SyncFriendRequest::set_has_synckey() {
  _has_bits_[0] |= 0x00000004u;
}
void SyncFriendRequest::clear_has_synckey() {
  _has_bits_[0] &= ~0x00000004u;
}
void SyncFriendRequest::clear_synckey() {
  synckey_ = 0u;
  clear_has_synckey();
}
::google::protobuf::uint32 SyncFriendRequest::synckey() const {
  // @@protoc_insertion_point(field_get:micromsg.SyncFriendRequest.SyncKey)
  return synckey_;
}
void SyncFriendRequest::set_synckey(::google::protobuf::uint32 value) {
  set_has_synckey();
  synckey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SyncFriendRequest.SyncKey)
}

// required int32 Scene = 4;
bool SyncFriendRequest::has_scene() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SyncFriendRequest::set_has_scene() {
  _has_bits_[0] |= 0x00000008u;
}
void SyncFriendRequest::clear_has_scene() {
  _has_bits_[0] &= ~0x00000008u;
}
void SyncFriendRequest::clear_scene() {
  scene_ = 0;
  clear_has_scene();
}
::google::protobuf::int32 SyncFriendRequest::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.SyncFriendRequest.Scene)
  return scene_;
}
void SyncFriendRequest::set_scene(::google::protobuf::int32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SyncFriendRequest.Scene)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SyncFriendResponse::kBaseResponseFieldNumber;
const int SyncFriendResponse::kNewSyncKeyFieldNumber;
const int SyncFriendResponse::kContinueFlagFieldNumber;
const int SyncFriendResponse::kCmdCountFieldNumber;
const int SyncFriendResponse::kCmdListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SyncFriendResponse::SyncFriendResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SyncFriendResponse)
}
SyncFriendResponse::SyncFriendResponse(const SyncFriendResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      cmdlist_(from.cmdlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  ::memcpy(&newsynckey_, &from.newsynckey_,
    reinterpret_cast<char*>(&cmdcount_) -
    reinterpret_cast<char*>(&newsynckey_) + sizeof(cmdcount_));
  // @@protoc_insertion_point(copy_constructor:micromsg.SyncFriendResponse)
}

void SyncFriendResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&cmdcount_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(cmdcount_));
}

SyncFriendResponse::~SyncFriendResponse() {
  // @@protoc_insertion_point(destructor:micromsg.SyncFriendResponse)
  SharedDtor();
}

void SyncFriendResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void SyncFriendResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncFriendResponse::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SyncFriendResponse& SyncFriendResponse::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

SyncFriendResponse* SyncFriendResponse::New(::google::protobuf::Arena* arena) const {
  SyncFriendResponse* n = new SyncFriendResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SyncFriendResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SyncFriendResponse)
  cmdlist_.Clear();
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&newsynckey_, 0, reinterpret_cast<char*>(&cmdcount_) -
      reinterpret_cast<char*>(&newsynckey_) + sizeof(cmdcount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SyncFriendResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SyncFriendResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 NewSyncKey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_newsynckey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newsynckey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 ContinueFlag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_continueflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &continueflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 CmdCount = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_cmdcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmdcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.CmdItem CmdList = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cmdlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SyncFriendResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SyncFriendResponse)
  return false;
#undef DO_
}

void SyncFriendResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SyncFriendResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 NewSyncKey = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->newsynckey(), output);
  }

  // required int32 ContinueFlag = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->continueflag(), output);
  }

  // required uint32 CmdCount = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cmdcount(), output);
  }

  // repeated .micromsg.CmdItem CmdList = 5;
  for (unsigned int i = 0, n = this->cmdlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->cmdlist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SyncFriendResponse)
}

::google::protobuf::uint8* SyncFriendResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SyncFriendResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 NewSyncKey = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->newsynckey(), target);
  }

  // required int32 ContinueFlag = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->continueflag(), target);
  }

  // required uint32 CmdCount = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cmdcount(), target);
  }

  // repeated .micromsg.CmdItem CmdList = 5;
  for (unsigned int i = 0, n = this->cmdlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->cmdlist(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SyncFriendResponse)
  return target;
}

size_t SyncFriendResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SyncFriendResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_newsynckey()) {
    // required uint32 NewSyncKey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->newsynckey());
  }

  if (has_continueflag()) {
    // required int32 ContinueFlag = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->continueflag());
  }

  if (has_cmdcount()) {
    // required uint32 CmdCount = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cmdcount());
  }

  return total_size;
}
size_t SyncFriendResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SyncFriendResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 NewSyncKey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->newsynckey());

    // required int32 ContinueFlag = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->continueflag());

    // required uint32 CmdCount = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cmdcount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.CmdItem CmdList = 5;
  {
    unsigned int count = this->cmdlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cmdlist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncFriendResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SyncFriendResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncFriendResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SyncFriendResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SyncFriendResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SyncFriendResponse)
    MergeFrom(*source);
  }
}

void SyncFriendResponse::MergeFrom(const SyncFriendResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SyncFriendResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cmdlist_.MergeFrom(from.cmdlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      newsynckey_ = from.newsynckey_;
    }
    if (cached_has_bits & 0x00000004u) {
      continueflag_ = from.continueflag_;
    }
    if (cached_has_bits & 0x00000008u) {
      cmdcount_ = from.cmdcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SyncFriendResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SyncFriendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncFriendResponse::CopyFrom(const SyncFriendResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SyncFriendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncFriendResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->cmdlist())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void SyncFriendResponse::Swap(SyncFriendResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SyncFriendResponse::InternalSwap(SyncFriendResponse* other) {
  cmdlist_.InternalSwap(&other->cmdlist_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(newsynckey_, other->newsynckey_);
  std::swap(continueflag_, other->continueflag_);
  std::swap(cmdcount_, other->cmdcount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SyncFriendResponse::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SyncFriendResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool SyncFriendResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SyncFriendResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void SyncFriendResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void SyncFriendResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& SyncFriendResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.SyncFriendResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* SyncFriendResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SyncFriendResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* SyncFriendResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.SyncFriendResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void SyncFriendResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SyncFriendResponse.BaseResponse)
}

// required uint32 NewSyncKey = 2;
bool SyncFriendResponse::has_newsynckey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SyncFriendResponse::set_has_newsynckey() {
  _has_bits_[0] |= 0x00000002u;
}
void SyncFriendResponse::clear_has_newsynckey() {
  _has_bits_[0] &= ~0x00000002u;
}
void SyncFriendResponse::clear_newsynckey() {
  newsynckey_ = 0u;
  clear_has_newsynckey();
}
::google::protobuf::uint32 SyncFriendResponse::newsynckey() const {
  // @@protoc_insertion_point(field_get:micromsg.SyncFriendResponse.NewSyncKey)
  return newsynckey_;
}
void SyncFriendResponse::set_newsynckey(::google::protobuf::uint32 value) {
  set_has_newsynckey();
  newsynckey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SyncFriendResponse.NewSyncKey)
}

// required int32 ContinueFlag = 3;
bool SyncFriendResponse::has_continueflag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SyncFriendResponse::set_has_continueflag() {
  _has_bits_[0] |= 0x00000004u;
}
void SyncFriendResponse::clear_has_continueflag() {
  _has_bits_[0] &= ~0x00000004u;
}
void SyncFriendResponse::clear_continueflag() {
  continueflag_ = 0;
  clear_has_continueflag();
}
::google::protobuf::int32 SyncFriendResponse::continueflag() const {
  // @@protoc_insertion_point(field_get:micromsg.SyncFriendResponse.ContinueFlag)
  return continueflag_;
}
void SyncFriendResponse::set_continueflag(::google::protobuf::int32 value) {
  set_has_continueflag();
  continueflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SyncFriendResponse.ContinueFlag)
}

// required uint32 CmdCount = 4;
bool SyncFriendResponse::has_cmdcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SyncFriendResponse::set_has_cmdcount() {
  _has_bits_[0] |= 0x00000008u;
}
void SyncFriendResponse::clear_has_cmdcount() {
  _has_bits_[0] &= ~0x00000008u;
}
void SyncFriendResponse::clear_cmdcount() {
  cmdcount_ = 0u;
  clear_has_cmdcount();
}
::google::protobuf::uint32 SyncFriendResponse::cmdcount() const {
  // @@protoc_insertion_point(field_get:micromsg.SyncFriendResponse.CmdCount)
  return cmdcount_;
}
void SyncFriendResponse::set_cmdcount(::google::protobuf::uint32 value) {
  set_has_cmdcount();
  cmdcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SyncFriendResponse.CmdCount)
}

// repeated .micromsg.CmdItem CmdList = 5;
int SyncFriendResponse::cmdlist_size() const {
  return cmdlist_.size();
}
void SyncFriendResponse::clear_cmdlist() {
  cmdlist_.Clear();
}
const ::micromsg::CmdItem& SyncFriendResponse::cmdlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.SyncFriendResponse.CmdList)
  return cmdlist_.Get(index);
}
::micromsg::CmdItem* SyncFriendResponse::mutable_cmdlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.SyncFriendResponse.CmdList)
  return cmdlist_.Mutable(index);
}
::micromsg::CmdItem* SyncFriendResponse::add_cmdlist() {
  // @@protoc_insertion_point(field_add:micromsg.SyncFriendResponse.CmdList)
  return cmdlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::CmdItem >*
SyncFriendResponse::mutable_cmdlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.SyncFriendResponse.CmdList)
  return &cmdlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::CmdItem >&
SyncFriendResponse::cmdlist() const {
  // @@protoc_insertion_point(field_list:micromsg.SyncFriendResponse.CmdList)
  return cmdlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpenQQMicroBlog::kMicroBlogUserNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpenQQMicroBlog::OpenQQMicroBlog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.OpenQQMicroBlog)
}
OpenQQMicroBlog::OpenQQMicroBlog(const OpenQQMicroBlog& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_microblogusername()) {
    microblogusername_ = new ::micromsg::SKBuiltinString_t(*from.microblogusername_);
  } else {
    microblogusername_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.OpenQQMicroBlog)
}

void OpenQQMicroBlog::SharedCtor() {
  _cached_size_ = 0;
  microblogusername_ = NULL;
}

OpenQQMicroBlog::~OpenQQMicroBlog() {
  // @@protoc_insertion_point(destructor:micromsg.OpenQQMicroBlog)
  SharedDtor();
}

void OpenQQMicroBlog::SharedDtor() {
  if (this != internal_default_instance()) {
    delete microblogusername_;
  }
}

void OpenQQMicroBlog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenQQMicroBlog::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OpenQQMicroBlog& OpenQQMicroBlog::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

OpenQQMicroBlog* OpenQQMicroBlog::New(::google::protobuf::Arena* arena) const {
  OpenQQMicroBlog* n = new OpenQQMicroBlog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpenQQMicroBlog::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.OpenQQMicroBlog)
  if (has_microblogusername()) {
    GOOGLE_DCHECK(microblogusername_ != NULL);
    microblogusername_->::micromsg::SKBuiltinString_t::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OpenQQMicroBlog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.OpenQQMicroBlog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.SKBuiltinString_t MicroBlogUserName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_microblogusername()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.OpenQQMicroBlog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.OpenQQMicroBlog)
  return false;
#undef DO_
}

void OpenQQMicroBlog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.OpenQQMicroBlog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t MicroBlogUserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->microblogusername_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.OpenQQMicroBlog)
}

::google::protobuf::uint8* OpenQQMicroBlog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.OpenQQMicroBlog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t MicroBlogUserName = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->microblogusername_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.OpenQQMicroBlog)
  return target;
}

size_t OpenQQMicroBlog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.OpenQQMicroBlog)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.SKBuiltinString_t MicroBlogUserName = 1;
  if (has_microblogusername()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->microblogusername_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenQQMicroBlog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.OpenQQMicroBlog)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenQQMicroBlog* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpenQQMicroBlog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.OpenQQMicroBlog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.OpenQQMicroBlog)
    MergeFrom(*source);
  }
}

void OpenQQMicroBlog::MergeFrom(const OpenQQMicroBlog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.OpenQQMicroBlog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_microblogusername()) {
    mutable_microblogusername()->::micromsg::SKBuiltinString_t::MergeFrom(from.microblogusername());
  }
}

void OpenQQMicroBlog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.OpenQQMicroBlog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenQQMicroBlog::CopyFrom(const OpenQQMicroBlog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.OpenQQMicroBlog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenQQMicroBlog::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void OpenQQMicroBlog::Swap(OpenQQMicroBlog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpenQQMicroBlog::InternalSwap(OpenQQMicroBlog* other) {
  std::swap(microblogusername_, other->microblogusername_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpenQQMicroBlog::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpenQQMicroBlog

// required .micromsg.SKBuiltinString_t MicroBlogUserName = 1;
bool OpenQQMicroBlog::has_microblogusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OpenQQMicroBlog::set_has_microblogusername() {
  _has_bits_[0] |= 0x00000001u;
}
void OpenQQMicroBlog::clear_has_microblogusername() {
  _has_bits_[0] &= ~0x00000001u;
}
void OpenQQMicroBlog::clear_microblogusername() {
  if (microblogusername_ != NULL) microblogusername_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_microblogusername();
}
const ::micromsg::SKBuiltinString_t& OpenQQMicroBlog::microblogusername() const {
  // @@protoc_insertion_point(field_get:micromsg.OpenQQMicroBlog.MicroBlogUserName)
  return microblogusername_ != NULL ? *microblogusername_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* OpenQQMicroBlog::mutable_microblogusername() {
  set_has_microblogusername();
  if (microblogusername_ == NULL) {
    microblogusername_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.OpenQQMicroBlog.MicroBlogUserName)
  return microblogusername_;
}
::micromsg::SKBuiltinString_t* OpenQQMicroBlog::release_microblogusername() {
  // @@protoc_insertion_point(field_release:micromsg.OpenQQMicroBlog.MicroBlogUserName)
  clear_has_microblogusername();
  ::micromsg::SKBuiltinString_t* temp = microblogusername_;
  microblogusername_ = NULL;
  return temp;
}
void OpenQQMicroBlog::set_allocated_microblogusername(::micromsg::SKBuiltinString_t* microblogusername) {
  delete microblogusername_;
  microblogusername_ = microblogusername;
  if (microblogusername) {
    set_has_microblogusername();
  } else {
    clear_has_microblogusername();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.OpenQQMicroBlog.MicroBlogUserName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModChatRoomNotify::kChatRoomNameFieldNumber;
const int ModChatRoomNotify::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModChatRoomNotify::ModChatRoomNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ModChatRoomNotify)
}
ModChatRoomNotify::ModChatRoomNotify(const ModChatRoomNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_chatroomname()) {
    chatroomname_ = new ::micromsg::SKBuiltinString_t(*from.chatroomname_);
  } else {
    chatroomname_ = NULL;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:micromsg.ModChatRoomNotify)
}

void ModChatRoomNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&chatroomname_, 0, reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&chatroomname_) + sizeof(status_));
}

ModChatRoomNotify::~ModChatRoomNotify() {
  // @@protoc_insertion_point(destructor:micromsg.ModChatRoomNotify)
  SharedDtor();
}

void ModChatRoomNotify::SharedDtor() {
  if (this != internal_default_instance()) {
    delete chatroomname_;
  }
}

void ModChatRoomNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModChatRoomNotify::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModChatRoomNotify& ModChatRoomNotify::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

ModChatRoomNotify* ModChatRoomNotify::New(::google::protobuf::Arena* arena) const {
  ModChatRoomNotify* n = new ModChatRoomNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModChatRoomNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ModChatRoomNotify)
  if (has_chatroomname()) {
    GOOGLE_DCHECK(chatroomname_ != NULL);
    chatroomname_->::micromsg::SKBuiltinString_t::Clear();
  }
  status_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ModChatRoomNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ModChatRoomNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.SKBuiltinString_t ChatRoomName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chatroomname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ModChatRoomNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ModChatRoomNotify)
  return false;
#undef DO_
}

void ModChatRoomNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ModChatRoomNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t ChatRoomName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->chatroomname_, output);
  }

  // required uint32 Status = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ModChatRoomNotify)
}

::google::protobuf::uint8* ModChatRoomNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ModChatRoomNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t ChatRoomName = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->chatroomname_, deterministic, target);
  }

  // required uint32 Status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ModChatRoomNotify)
  return target;
}

size_t ModChatRoomNotify::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.ModChatRoomNotify)
  size_t total_size = 0;

  if (has_chatroomname()) {
    // required .micromsg.SKBuiltinString_t ChatRoomName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->chatroomname_);
  }

  if (has_status()) {
    // required uint32 Status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  return total_size;
}
size_t ModChatRoomNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ModChatRoomNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.SKBuiltinString_t ChatRoomName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->chatroomname_);

    // required uint32 Status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModChatRoomNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ModChatRoomNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const ModChatRoomNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModChatRoomNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ModChatRoomNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ModChatRoomNotify)
    MergeFrom(*source);
  }
}

void ModChatRoomNotify::MergeFrom(const ModChatRoomNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ModChatRoomNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_chatroomname()->::micromsg::SKBuiltinString_t::MergeFrom(from.chatroomname());
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ModChatRoomNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ModChatRoomNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModChatRoomNotify::CopyFrom(const ModChatRoomNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ModChatRoomNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModChatRoomNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ModChatRoomNotify::Swap(ModChatRoomNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModChatRoomNotify::InternalSwap(ModChatRoomNotify* other) {
  std::swap(chatroomname_, other->chatroomname_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModChatRoomNotify::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModChatRoomNotify

// required .micromsg.SKBuiltinString_t ChatRoomName = 1;
bool ModChatRoomNotify::has_chatroomname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModChatRoomNotify::set_has_chatroomname() {
  _has_bits_[0] |= 0x00000001u;
}
void ModChatRoomNotify::clear_has_chatroomname() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModChatRoomNotify::clear_chatroomname() {
  if (chatroomname_ != NULL) chatroomname_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_chatroomname();
}
const ::micromsg::SKBuiltinString_t& ModChatRoomNotify::chatroomname() const {
  // @@protoc_insertion_point(field_get:micromsg.ModChatRoomNotify.ChatRoomName)
  return chatroomname_ != NULL ? *chatroomname_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* ModChatRoomNotify::mutable_chatroomname() {
  set_has_chatroomname();
  if (chatroomname_ == NULL) {
    chatroomname_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModChatRoomNotify.ChatRoomName)
  return chatroomname_;
}
::micromsg::SKBuiltinString_t* ModChatRoomNotify::release_chatroomname() {
  // @@protoc_insertion_point(field_release:micromsg.ModChatRoomNotify.ChatRoomName)
  clear_has_chatroomname();
  ::micromsg::SKBuiltinString_t* temp = chatroomname_;
  chatroomname_ = NULL;
  return temp;
}
void ModChatRoomNotify::set_allocated_chatroomname(::micromsg::SKBuiltinString_t* chatroomname) {
  delete chatroomname_;
  chatroomname_ = chatroomname;
  if (chatroomname) {
    set_has_chatroomname();
  } else {
    clear_has_chatroomname();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModChatRoomNotify.ChatRoomName)
}

// required uint32 Status = 2;
bool ModChatRoomNotify::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ModChatRoomNotify::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void ModChatRoomNotify::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void ModChatRoomNotify::clear_status() {
  status_ = 0u;
  clear_has_status();
}
::google::protobuf::uint32 ModChatRoomNotify::status() const {
  // @@protoc_insertion_point(field_get:micromsg.ModChatRoomNotify.Status)
  return status_;
}
void ModChatRoomNotify::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModChatRoomNotify.Status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloseMicroBlog::kMicroBlogUserNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloseMicroBlog::CloseMicroBlog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.CloseMicroBlog)
}
CloseMicroBlog::CloseMicroBlog(const CloseMicroBlog& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_microblogusername()) {
    microblogusername_ = new ::micromsg::SKBuiltinString_t(*from.microblogusername_);
  } else {
    microblogusername_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.CloseMicroBlog)
}

void CloseMicroBlog::SharedCtor() {
  _cached_size_ = 0;
  microblogusername_ = NULL;
}

CloseMicroBlog::~CloseMicroBlog() {
  // @@protoc_insertion_point(destructor:micromsg.CloseMicroBlog)
  SharedDtor();
}

void CloseMicroBlog::SharedDtor() {
  if (this != internal_default_instance()) {
    delete microblogusername_;
  }
}

void CloseMicroBlog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloseMicroBlog::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CloseMicroBlog& CloseMicroBlog::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

CloseMicroBlog* CloseMicroBlog::New(::google::protobuf::Arena* arena) const {
  CloseMicroBlog* n = new CloseMicroBlog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CloseMicroBlog::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.CloseMicroBlog)
  if (has_microblogusername()) {
    GOOGLE_DCHECK(microblogusername_ != NULL);
    microblogusername_->::micromsg::SKBuiltinString_t::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CloseMicroBlog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.CloseMicroBlog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.SKBuiltinString_t MicroBlogUserName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_microblogusername()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.CloseMicroBlog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.CloseMicroBlog)
  return false;
#undef DO_
}

void CloseMicroBlog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.CloseMicroBlog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t MicroBlogUserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->microblogusername_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.CloseMicroBlog)
}

::google::protobuf::uint8* CloseMicroBlog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.CloseMicroBlog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t MicroBlogUserName = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->microblogusername_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.CloseMicroBlog)
  return target;
}

size_t CloseMicroBlog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.CloseMicroBlog)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.SKBuiltinString_t MicroBlogUserName = 1;
  if (has_microblogusername()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->microblogusername_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloseMicroBlog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.CloseMicroBlog)
  GOOGLE_DCHECK_NE(&from, this);
  const CloseMicroBlog* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CloseMicroBlog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.CloseMicroBlog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.CloseMicroBlog)
    MergeFrom(*source);
  }
}

void CloseMicroBlog::MergeFrom(const CloseMicroBlog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.CloseMicroBlog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_microblogusername()) {
    mutable_microblogusername()->::micromsg::SKBuiltinString_t::MergeFrom(from.microblogusername());
  }
}

void CloseMicroBlog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.CloseMicroBlog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseMicroBlog::CopyFrom(const CloseMicroBlog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.CloseMicroBlog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseMicroBlog::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CloseMicroBlog::Swap(CloseMicroBlog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloseMicroBlog::InternalSwap(CloseMicroBlog* other) {
  std::swap(microblogusername_, other->microblogusername_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CloseMicroBlog::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CloseMicroBlog

// required .micromsg.SKBuiltinString_t MicroBlogUserName = 1;
bool CloseMicroBlog::has_microblogusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CloseMicroBlog::set_has_microblogusername() {
  _has_bits_[0] |= 0x00000001u;
}
void CloseMicroBlog::clear_has_microblogusername() {
  _has_bits_[0] &= ~0x00000001u;
}
void CloseMicroBlog::clear_microblogusername() {
  if (microblogusername_ != NULL) microblogusername_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_microblogusername();
}
const ::micromsg::SKBuiltinString_t& CloseMicroBlog::microblogusername() const {
  // @@protoc_insertion_point(field_get:micromsg.CloseMicroBlog.MicroBlogUserName)
  return microblogusername_ != NULL ? *microblogusername_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* CloseMicroBlog::mutable_microblogusername() {
  set_has_microblogusername();
  if (microblogusername_ == NULL) {
    microblogusername_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CloseMicroBlog.MicroBlogUserName)
  return microblogusername_;
}
::micromsg::SKBuiltinString_t* CloseMicroBlog::release_microblogusername() {
  // @@protoc_insertion_point(field_release:micromsg.CloseMicroBlog.MicroBlogUserName)
  clear_has_microblogusername();
  ::micromsg::SKBuiltinString_t* temp = microblogusername_;
  microblogusername_ = NULL;
  return temp;
}
void CloseMicroBlog::set_allocated_microblogusername(::micromsg::SKBuiltinString_t* microblogusername) {
  delete microblogusername_;
  microblogusername_ = microblogusername;
  if (microblogusername) {
    set_has_microblogusername();
  } else {
    clear_has_microblogusername();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CloseMicroBlog.MicroBlogUserName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModChatRoomMember::kUserNameFieldNumber;
const int ModChatRoomMember::kNickNameFieldNumber;
const int ModChatRoomMember::kPYInitialFieldNumber;
const int ModChatRoomMember::kQuanPinFieldNumber;
const int ModChatRoomMember::kSexFieldNumber;
const int ModChatRoomMember::kImgBufFieldNumber;
const int ModChatRoomMember::kImgFlagFieldNumber;
const int ModChatRoomMember::kRemarkFieldNumber;
const int ModChatRoomMember::kRemarkPYInitialFieldNumber;
const int ModChatRoomMember::kRemarkQuanPinFieldNumber;
const int ModChatRoomMember::kContactTypeFieldNumber;
const int ModChatRoomMember::kProvinceFieldNumber;
const int ModChatRoomMember::kCityFieldNumber;
const int ModChatRoomMember::kSignatureFieldNumber;
const int ModChatRoomMember::kPersonalCardFieldNumber;
const int ModChatRoomMember::kVerifyFlagFieldNumber;
const int ModChatRoomMember::kVerifyInfoFieldNumber;
const int ModChatRoomMember::kWeiboFieldNumber;
const int ModChatRoomMember::kVerifyContentFieldNumber;
const int ModChatRoomMember::kWeiboNicknameFieldNumber;
const int ModChatRoomMember::kWeiboFlagFieldNumber;
const int ModChatRoomMember::kAlbumStyleFieldNumber;
const int ModChatRoomMember::kAlbumFlagFieldNumber;
const int ModChatRoomMember::kAlbumBGImgIDFieldNumber;
const int ModChatRoomMember::kAliasFieldNumber;
const int ModChatRoomMember::kSnsUserInfoFieldNumber;
const int ModChatRoomMember::kCountryFieldNumber;
const int ModChatRoomMember::kBigHeadImgUrlFieldNumber;
const int ModChatRoomMember::kSmallHeadImgUrlFieldNumber;
const int ModChatRoomMember::kMyBrandListFieldNumber;
const int ModChatRoomMember::kCustomizedInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModChatRoomMember::ModChatRoomMember()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ModChatRoomMember)
}
ModChatRoomMember::ModChatRoomMember(const ModChatRoomMember& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  province_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_province()) {
    province_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.province_);
  }
  city_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_city()) {
    city_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.city_);
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  verifyinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_verifyinfo()) {
    verifyinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifyinfo_);
  }
  weibo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_weibo()) {
    weibo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weibo_);
  }
  verifycontent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_verifycontent()) {
    verifycontent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifycontent_);
  }
  weibonickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_weibonickname()) {
    weibonickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weibonickname_);
  }
  albumbgimgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_albumbgimgid()) {
    albumbgimgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.albumbgimgid_);
  }
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_alias()) {
    alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
  }
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_country()) {
    country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  bigheadimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bigheadimgurl()) {
    bigheadimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bigheadimgurl_);
  }
  smallheadimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_smallheadimgurl()) {
    smallheadimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smallheadimgurl_);
  }
  mybrandlist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mybrandlist()) {
    mybrandlist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mybrandlist_);
  }
  if (from.has_username()) {
    username_ = new ::micromsg::SKBuiltinString_t(*from.username_);
  } else {
    username_ = NULL;
  }
  if (from.has_nickname()) {
    nickname_ = new ::micromsg::SKBuiltinString_t(*from.nickname_);
  } else {
    nickname_ = NULL;
  }
  if (from.has_pyinitial()) {
    pyinitial_ = new ::micromsg::SKBuiltinString_t(*from.pyinitial_);
  } else {
    pyinitial_ = NULL;
  }
  if (from.has_quanpin()) {
    quanpin_ = new ::micromsg::SKBuiltinString_t(*from.quanpin_);
  } else {
    quanpin_ = NULL;
  }
  if (from.has_imgbuf()) {
    imgbuf_ = new ::micromsg::SKBuiltinBuffer_t(*from.imgbuf_);
  } else {
    imgbuf_ = NULL;
  }
  if (from.has_remark()) {
    remark_ = new ::micromsg::SKBuiltinString_t(*from.remark_);
  } else {
    remark_ = NULL;
  }
  if (from.has_remarkpyinitial()) {
    remarkpyinitial_ = new ::micromsg::SKBuiltinString_t(*from.remarkpyinitial_);
  } else {
    remarkpyinitial_ = NULL;
  }
  if (from.has_remarkquanpin()) {
    remarkquanpin_ = new ::micromsg::SKBuiltinString_t(*from.remarkquanpin_);
  } else {
    remarkquanpin_ = NULL;
  }
  if (from.has_snsuserinfo()) {
    snsuserinfo_ = new ::micromsg::SnsUserInfo(*from.snsuserinfo_);
  } else {
    snsuserinfo_ = NULL;
  }
  if (from.has_customizedinfo()) {
    customizedinfo_ = new ::micromsg::CustomizedInfo(*from.customizedinfo_);
  } else {
    customizedinfo_ = NULL;
  }
  ::memcpy(&sex_, &from.sex_,
    reinterpret_cast<char*>(&albumflag_) -
    reinterpret_cast<char*>(&sex_) + sizeof(albumflag_));
  // @@protoc_insertion_point(copy_constructor:micromsg.ModChatRoomMember)
}

void ModChatRoomMember::SharedCtor() {
  _cached_size_ = 0;
  province_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifyinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weibo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifycontent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weibonickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  albumbgimgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bigheadimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smallheadimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mybrandlist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&username_, 0, reinterpret_cast<char*>(&albumflag_) -
    reinterpret_cast<char*>(&username_) + sizeof(albumflag_));
}

ModChatRoomMember::~ModChatRoomMember() {
  // @@protoc_insertion_point(destructor:micromsg.ModChatRoomMember)
  SharedDtor();
}

void ModChatRoomMember::SharedDtor() {
  province_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifyinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weibo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifycontent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weibonickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  albumbgimgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alias_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bigheadimgurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smallheadimgurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mybrandlist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete username_;
  }
  if (this != internal_default_instance()) {
    delete nickname_;
  }
  if (this != internal_default_instance()) {
    delete pyinitial_;
  }
  if (this != internal_default_instance()) {
    delete quanpin_;
  }
  if (this != internal_default_instance()) {
    delete imgbuf_;
  }
  if (this != internal_default_instance()) {
    delete remark_;
  }
  if (this != internal_default_instance()) {
    delete remarkpyinitial_;
  }
  if (this != internal_default_instance()) {
    delete remarkquanpin_;
  }
  if (this != internal_default_instance()) {
    delete snsuserinfo_;
  }
  if (this != internal_default_instance()) {
    delete customizedinfo_;
  }
}

void ModChatRoomMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModChatRoomMember::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModChatRoomMember& ModChatRoomMember::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

ModChatRoomMember* ModChatRoomMember::New(::google::protobuf::Arena* arena) const {
  ModChatRoomMember* n = new ModChatRoomMember;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModChatRoomMember::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ModChatRoomMember)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_province()) {
      GOOGLE_DCHECK(!province_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*province_.UnsafeRawStringPointer())->clear();
    }
    if (has_city()) {
      GOOGLE_DCHECK(!city_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*city_.UnsafeRawStringPointer())->clear();
    }
    if (has_signature()) {
      GOOGLE_DCHECK(!signature_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*signature_.UnsafeRawStringPointer())->clear();
    }
    if (has_verifyinfo()) {
      GOOGLE_DCHECK(!verifyinfo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*verifyinfo_.UnsafeRawStringPointer())->clear();
    }
    if (has_weibo()) {
      GOOGLE_DCHECK(!weibo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*weibo_.UnsafeRawStringPointer())->clear();
    }
    if (has_verifycontent()) {
      GOOGLE_DCHECK(!verifycontent_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*verifycontent_.UnsafeRawStringPointer())->clear();
    }
    if (has_weibonickname()) {
      GOOGLE_DCHECK(!weibonickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*weibonickname_.UnsafeRawStringPointer())->clear();
    }
    if (has_albumbgimgid()) {
      GOOGLE_DCHECK(!albumbgimgid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*albumbgimgid_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has_alias()) {
      GOOGLE_DCHECK(!alias_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*alias_.UnsafeRawStringPointer())->clear();
    }
    if (has_country()) {
      GOOGLE_DCHECK(!country_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*country_.UnsafeRawStringPointer())->clear();
    }
    if (has_bigheadimgurl()) {
      GOOGLE_DCHECK(!bigheadimgurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bigheadimgurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_smallheadimgurl()) {
      GOOGLE_DCHECK(!smallheadimgurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*smallheadimgurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_mybrandlist()) {
      GOOGLE_DCHECK(!mybrandlist_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mybrandlist_.UnsafeRawStringPointer())->clear();
    }
    if (has_username()) {
      GOOGLE_DCHECK(username_ != NULL);
      username_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_nickname()) {
      GOOGLE_DCHECK(nickname_ != NULL);
      nickname_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_pyinitial()) {
      GOOGLE_DCHECK(pyinitial_ != NULL);
      pyinitial_->::micromsg::SKBuiltinString_t::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 8323072u) {
    if (has_quanpin()) {
      GOOGLE_DCHECK(quanpin_ != NULL);
      quanpin_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_imgbuf()) {
      GOOGLE_DCHECK(imgbuf_ != NULL);
      imgbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_remark()) {
      GOOGLE_DCHECK(remark_ != NULL);
      remark_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_remarkpyinitial()) {
      GOOGLE_DCHECK(remarkpyinitial_ != NULL);
      remarkpyinitial_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_remarkquanpin()) {
      GOOGLE_DCHECK(remarkquanpin_ != NULL);
      remarkquanpin_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_snsuserinfo()) {
      GOOGLE_DCHECK(snsuserinfo_ != NULL);
      snsuserinfo_->::micromsg::SnsUserInfo::Clear();
    }
    if (has_customizedinfo()) {
      GOOGLE_DCHECK(customizedinfo_ != NULL);
      customizedinfo_->::micromsg::CustomizedInfo::Clear();
    }
  }
  sex_ = 0;
  if (_has_bits_[24 / 32] & 2130706432u) {
    ::memset(&imgflag_, 0, reinterpret_cast<char*>(&albumflag_) -
      reinterpret_cast<char*>(&imgflag_) + sizeof(albumflag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ModChatRoomMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ModChatRoomMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.SKBuiltinString_t UserName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_username()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t NickName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t PYInitial = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pyinitial()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t QuanPin = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quanpin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Sex = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_sex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t ImgBuf = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imgbuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ImgFlag = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_imgflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &imgflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t Remark = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remark()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t RemarkPYInitial = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remarkpyinitial()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t RemarkQuanPin = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remarkquanpin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ContactType = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_contacttype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contacttype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Province = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_province()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->province().data(), this->province().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModChatRoomMember.Province");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string City = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModChatRoomMember.City");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Signature = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModChatRoomMember.Signature");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 PersonalCard = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_personalcard();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &personalcard_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 VerifyFlag = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_verifyflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &verifyflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string VerifyInfo = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verifyinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->verifyinfo().data(), this->verifyinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModChatRoomMember.VerifyInfo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Weibo = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weibo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->weibo().data(), this->weibo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModChatRoomMember.Weibo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string VerifyContent = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verifycontent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->verifycontent().data(), this->verifycontent().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModChatRoomMember.VerifyContent");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string WeiboNickname = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weibonickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->weibonickname().data(), this->weibonickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModChatRoomMember.WeiboNickname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 WeiboFlag = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          set_has_weiboflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weiboflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 AlbumStyle = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_albumstyle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &albumstyle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 AlbumFlag = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          set_has_albumflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &albumflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AlbumBGImgID = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_albumbgimgid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->albumbgimgid().data(), this->albumbgimgid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModChatRoomMember.AlbumBGImgID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Alias = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alias()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->alias().data(), this->alias().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModChatRoomMember.Alias");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SnsUserInfo SnsUserInfo = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_snsuserinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Country = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModChatRoomMember.Country");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string BigHeadImgUrl = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bigheadimgurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bigheadimgurl().data(), this->bigheadimgurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModChatRoomMember.BigHeadImgUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string SmallHeadImgUrl = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smallheadimgurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->smallheadimgurl().data(), this->smallheadimgurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModChatRoomMember.SmallHeadImgUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string MyBrandList = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mybrandlist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mybrandlist().data(), this->mybrandlist().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModChatRoomMember.MyBrandList");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.CustomizedInfo CustomizedInfo = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_customizedinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ModChatRoomMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ModChatRoomMember)
  return false;
#undef DO_
}

void ModChatRoomMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ModChatRoomMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t UserName = 1;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->username_, output);
  }

  // required .micromsg.SKBuiltinString_t NickName = 2;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->nickname_, output);
  }

  // required .micromsg.SKBuiltinString_t PYInitial = 3;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->pyinitial_, output);
  }

  // required .micromsg.SKBuiltinString_t QuanPin = 4;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->quanpin_, output);
  }

  // required int32 Sex = 5;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sex(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t ImgBuf = 6;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->imgbuf_, output);
  }

  // required uint32 ImgFlag = 7;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->imgflag(), output);
  }

  // required .micromsg.SKBuiltinString_t Remark = 8;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->remark_, output);
  }

  // required .micromsg.SKBuiltinString_t RemarkPYInitial = 9;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->remarkpyinitial_, output);
  }

  // required .micromsg.SKBuiltinString_t RemarkQuanPin = 10;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->remarkquanpin_, output);
  }

  // required uint32 ContactType = 11;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->contacttype(), output);
  }

  // optional string Province = 12;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModChatRoomMember.Province");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->province(), output);
  }

  // optional string City = 13;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModChatRoomMember.City");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->city(), output);
  }

  // optional string Signature = 14;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModChatRoomMember.Signature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->signature(), output);
  }

  // optional uint32 PersonalCard = 15;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->personalcard(), output);
  }

  // optional uint32 VerifyFlag = 16;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->verifyflag(), output);
  }

  // optional string VerifyInfo = 17;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verifyinfo().data(), this->verifyinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModChatRoomMember.VerifyInfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->verifyinfo(), output);
  }

  // optional string Weibo = 18;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weibo().data(), this->weibo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModChatRoomMember.Weibo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->weibo(), output);
  }

  // optional string VerifyContent = 19;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verifycontent().data(), this->verifycontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModChatRoomMember.VerifyContent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->verifycontent(), output);
  }

  // optional string WeiboNickname = 20;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weibonickname().data(), this->weibonickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModChatRoomMember.WeiboNickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->weibonickname(), output);
  }

  // optional uint32 WeiboFlag = 21;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->weiboflag(), output);
  }

  // optional int32 AlbumStyle = 22;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->albumstyle(), output);
  }

  // optional int32 AlbumFlag = 23;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->albumflag(), output);
  }

  // optional string AlbumBGImgID = 24;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->albumbgimgid().data(), this->albumbgimgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModChatRoomMember.AlbumBGImgID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->albumbgimgid(), output);
  }

  // optional string Alias = 25;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModChatRoomMember.Alias");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->alias(), output);
  }

  // optional .micromsg.SnsUserInfo SnsUserInfo = 26;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, *this->snsuserinfo_, output);
  }

  // optional string Country = 27;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModChatRoomMember.Country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->country(), output);
  }

  // optional string BigHeadImgUrl = 28;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bigheadimgurl().data(), this->bigheadimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModChatRoomMember.BigHeadImgUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      28, this->bigheadimgurl(), output);
  }

  // optional string SmallHeadImgUrl = 29;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->smallheadimgurl().data(), this->smallheadimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModChatRoomMember.SmallHeadImgUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->smallheadimgurl(), output);
  }

  // optional string MyBrandList = 30;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mybrandlist().data(), this->mybrandlist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModChatRoomMember.MyBrandList");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->mybrandlist(), output);
  }

  // optional .micromsg.CustomizedInfo CustomizedInfo = 31;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, *this->customizedinfo_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ModChatRoomMember)
}

::google::protobuf::uint8* ModChatRoomMember::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ModChatRoomMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t UserName = 1;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->username_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t NickName = 2;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->nickname_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t PYInitial = 3;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->pyinitial_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t QuanPin = 4;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->quanpin_, deterministic, target);
  }

  // required int32 Sex = 5;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sex(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t ImgBuf = 6;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->imgbuf_, deterministic, target);
  }

  // required uint32 ImgFlag = 7;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->imgflag(), target);
  }

  // required .micromsg.SKBuiltinString_t Remark = 8;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->remark_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t RemarkPYInitial = 9;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->remarkpyinitial_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t RemarkQuanPin = 10;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->remarkquanpin_, deterministic, target);
  }

  // required uint32 ContactType = 11;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->contacttype(), target);
  }

  // optional string Province = 12;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModChatRoomMember.Province");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->province(), target);
  }

  // optional string City = 13;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModChatRoomMember.City");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->city(), target);
  }

  // optional string Signature = 14;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModChatRoomMember.Signature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->signature(), target);
  }

  // optional uint32 PersonalCard = 15;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->personalcard(), target);
  }

  // optional uint32 VerifyFlag = 16;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->verifyflag(), target);
  }

  // optional string VerifyInfo = 17;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verifyinfo().data(), this->verifyinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModChatRoomMember.VerifyInfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->verifyinfo(), target);
  }

  // optional string Weibo = 18;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weibo().data(), this->weibo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModChatRoomMember.Weibo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->weibo(), target);
  }

  // optional string VerifyContent = 19;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verifycontent().data(), this->verifycontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModChatRoomMember.VerifyContent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->verifycontent(), target);
  }

  // optional string WeiboNickname = 20;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weibonickname().data(), this->weibonickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModChatRoomMember.WeiboNickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->weibonickname(), target);
  }

  // optional uint32 WeiboFlag = 21;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->weiboflag(), target);
  }

  // optional int32 AlbumStyle = 22;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->albumstyle(), target);
  }

  // optional int32 AlbumFlag = 23;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->albumflag(), target);
  }

  // optional string AlbumBGImgID = 24;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->albumbgimgid().data(), this->albumbgimgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModChatRoomMember.AlbumBGImgID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->albumbgimgid(), target);
  }

  // optional string Alias = 25;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModChatRoomMember.Alias");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->alias(), target);
  }

  // optional .micromsg.SnsUserInfo SnsUserInfo = 26;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        26, *this->snsuserinfo_, deterministic, target);
  }

  // optional string Country = 27;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModChatRoomMember.Country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->country(), target);
  }

  // optional string BigHeadImgUrl = 28;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bigheadimgurl().data(), this->bigheadimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModChatRoomMember.BigHeadImgUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->bigheadimgurl(), target);
  }

  // optional string SmallHeadImgUrl = 29;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->smallheadimgurl().data(), this->smallheadimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModChatRoomMember.SmallHeadImgUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->smallheadimgurl(), target);
  }

  // optional string MyBrandList = 30;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mybrandlist().data(), this->mybrandlist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModChatRoomMember.MyBrandList");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->mybrandlist(), target);
  }

  // optional .micromsg.CustomizedInfo CustomizedInfo = 31;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        31, *this->customizedinfo_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ModChatRoomMember)
  return target;
}

size_t ModChatRoomMember::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.ModChatRoomMember)
  size_t total_size = 0;

  if (has_username()) {
    // required .micromsg.SKBuiltinString_t UserName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->username_);
  }

  if (has_nickname()) {
    // required .micromsg.SKBuiltinString_t NickName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->nickname_);
  }

  if (has_pyinitial()) {
    // required .micromsg.SKBuiltinString_t PYInitial = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pyinitial_);
  }

  if (has_quanpin()) {
    // required .micromsg.SKBuiltinString_t QuanPin = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->quanpin_);
  }

  if (has_imgbuf()) {
    // required .micromsg.SKBuiltinBuffer_t ImgBuf = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imgbuf_);
  }

  if (has_remark()) {
    // required .micromsg.SKBuiltinString_t Remark = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->remark_);
  }

  if (has_remarkpyinitial()) {
    // required .micromsg.SKBuiltinString_t RemarkPYInitial = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->remarkpyinitial_);
  }

  if (has_remarkquanpin()) {
    // required .micromsg.SKBuiltinString_t RemarkQuanPin = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->remarkquanpin_);
  }

  if (has_sex()) {
    // required int32 Sex = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sex());
  }

  if (has_imgflag()) {
    // required uint32 ImgFlag = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->imgflag());
  }

  if (has_contacttype()) {
    // required uint32 ContactType = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->contacttype());
  }

  return total_size;
}
size_t ModChatRoomMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ModChatRoomMember)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x039fe000) ^ 0x039fe000) == 0) {  // All required fields are present.
    // required .micromsg.SKBuiltinString_t UserName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->username_);

    // required .micromsg.SKBuiltinString_t NickName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->nickname_);

    // required .micromsg.SKBuiltinString_t PYInitial = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pyinitial_);

    // required .micromsg.SKBuiltinString_t QuanPin = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->quanpin_);

    // required .micromsg.SKBuiltinBuffer_t ImgBuf = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imgbuf_);

    // required .micromsg.SKBuiltinString_t Remark = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->remark_);

    // required .micromsg.SKBuiltinString_t RemarkPYInitial = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->remarkpyinitial_);

    // required .micromsg.SKBuiltinString_t RemarkQuanPin = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->remarkquanpin_);

    // required int32 Sex = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sex());

    // required uint32 ImgFlag = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->imgflag());

    // required uint32 ContactType = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->contacttype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string Province = 12;
    if (has_province()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->province());
    }

    // optional string City = 13;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

    // optional string Signature = 14;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }

    // optional string VerifyInfo = 17;
    if (has_verifyinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verifyinfo());
    }

    // optional string Weibo = 18;
    if (has_weibo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weibo());
    }

    // optional string VerifyContent = 19;
    if (has_verifycontent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verifycontent());
    }

    // optional string WeiboNickname = 20;
    if (has_weibonickname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weibonickname());
    }

    // optional string AlbumBGImgID = 24;
    if (has_albumbgimgid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->albumbgimgid());
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional string Alias = 25;
    if (has_alias()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alias());
    }

    // optional string Country = 27;
    if (has_country()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

    // optional string BigHeadImgUrl = 28;
    if (has_bigheadimgurl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bigheadimgurl());
    }

    // optional string SmallHeadImgUrl = 29;
    if (has_smallheadimgurl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->smallheadimgurl());
    }

    // optional string MyBrandList = 30;
    if (has_mybrandlist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mybrandlist());
    }

  }
  if (_has_bits_[16 / 32] & 6291456u) {
    // optional .micromsg.SnsUserInfo SnsUserInfo = 26;
    if (has_snsuserinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->snsuserinfo_);
    }

    // optional .micromsg.CustomizedInfo CustomizedInfo = 31;
    if (has_customizedinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->customizedinfo_);
    }

  }
  if (_has_bits_[24 / 32] & 2080374784u) {
    // optional uint32 PersonalCard = 15;
    if (has_personalcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->personalcard());
    }

    // optional uint32 VerifyFlag = 16;
    if (has_verifyflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->verifyflag());
    }

    // optional uint32 WeiboFlag = 21;
    if (has_weiboflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weiboflag());
    }

    // optional int32 AlbumStyle = 22;
    if (has_albumstyle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->albumstyle());
    }

    // optional int32 AlbumFlag = 23;
    if (has_albumflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->albumflag());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModChatRoomMember::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ModChatRoomMember)
  GOOGLE_DCHECK_NE(&from, this);
  const ModChatRoomMember* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModChatRoomMember>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ModChatRoomMember)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ModChatRoomMember)
    MergeFrom(*source);
  }
}

void ModChatRoomMember::MergeFrom(const ModChatRoomMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ModChatRoomMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_province();
      province_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.province_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_city();
      city_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.city_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_signature();
      signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_verifyinfo();
      verifyinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifyinfo_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_weibo();
      weibo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weibo_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_verifycontent();
      verifycontent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifycontent_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_weibonickname();
      weibonickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weibonickname_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_albumbgimgid();
      albumbgimgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.albumbgimgid_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_alias();
      alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_country();
      country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_bigheadimgurl();
      bigheadimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bigheadimgurl_);
    }
    if (cached_has_bits & 0x00000800u) {
      set_has_smallheadimgurl();
      smallheadimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smallheadimgurl_);
    }
    if (cached_has_bits & 0x00001000u) {
      set_has_mybrandlist();
      mybrandlist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mybrandlist_);
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_username()->::micromsg::SKBuiltinString_t::MergeFrom(from.username());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_nickname()->::micromsg::SKBuiltinString_t::MergeFrom(from.nickname());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_pyinitial()->::micromsg::SKBuiltinString_t::MergeFrom(from.pyinitial());
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_quanpin()->::micromsg::SKBuiltinString_t::MergeFrom(from.quanpin());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_imgbuf()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.imgbuf());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_remark()->::micromsg::SKBuiltinString_t::MergeFrom(from.remark());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_remarkpyinitial()->::micromsg::SKBuiltinString_t::MergeFrom(from.remarkpyinitial());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_remarkquanpin()->::micromsg::SKBuiltinString_t::MergeFrom(from.remarkquanpin());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_snsuserinfo()->::micromsg::SnsUserInfo::MergeFrom(from.snsuserinfo());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_customizedinfo()->::micromsg::CustomizedInfo::MergeFrom(from.customizedinfo());
    }
    if (cached_has_bits & 0x00800000u) {
      sex_ = from.sex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 2130706432u) {
    if (cached_has_bits & 0x01000000u) {
      imgflag_ = from.imgflag_;
    }
    if (cached_has_bits & 0x02000000u) {
      contacttype_ = from.contacttype_;
    }
    if (cached_has_bits & 0x04000000u) {
      personalcard_ = from.personalcard_;
    }
    if (cached_has_bits & 0x08000000u) {
      verifyflag_ = from.verifyflag_;
    }
    if (cached_has_bits & 0x10000000u) {
      weiboflag_ = from.weiboflag_;
    }
    if (cached_has_bits & 0x20000000u) {
      albumstyle_ = from.albumstyle_;
    }
    if (cached_has_bits & 0x40000000u) {
      albumflag_ = from.albumflag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ModChatRoomMember::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ModChatRoomMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModChatRoomMember::CopyFrom(const ModChatRoomMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ModChatRoomMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModChatRoomMember::IsInitialized() const {
  if ((_has_bits_[0] & 0x039fe000) != 0x039fe000) return false;
  if (has_imgbuf()) {
    if (!this->imgbuf_->IsInitialized()) return false;
  }
  if (has_snsuserinfo()) {
    if (!this->snsuserinfo_->IsInitialized()) return false;
  }
  if (has_customizedinfo()) {
    if (!this->customizedinfo_->IsInitialized()) return false;
  }
  return true;
}

void ModChatRoomMember::Swap(ModChatRoomMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModChatRoomMember::InternalSwap(ModChatRoomMember* other) {
  province_.Swap(&other->province_);
  city_.Swap(&other->city_);
  signature_.Swap(&other->signature_);
  verifyinfo_.Swap(&other->verifyinfo_);
  weibo_.Swap(&other->weibo_);
  verifycontent_.Swap(&other->verifycontent_);
  weibonickname_.Swap(&other->weibonickname_);
  albumbgimgid_.Swap(&other->albumbgimgid_);
  alias_.Swap(&other->alias_);
  country_.Swap(&other->country_);
  bigheadimgurl_.Swap(&other->bigheadimgurl_);
  smallheadimgurl_.Swap(&other->smallheadimgurl_);
  mybrandlist_.Swap(&other->mybrandlist_);
  std::swap(username_, other->username_);
  std::swap(nickname_, other->nickname_);
  std::swap(pyinitial_, other->pyinitial_);
  std::swap(quanpin_, other->quanpin_);
  std::swap(imgbuf_, other->imgbuf_);
  std::swap(remark_, other->remark_);
  std::swap(remarkpyinitial_, other->remarkpyinitial_);
  std::swap(remarkquanpin_, other->remarkquanpin_);
  std::swap(snsuserinfo_, other->snsuserinfo_);
  std::swap(customizedinfo_, other->customizedinfo_);
  std::swap(sex_, other->sex_);
  std::swap(imgflag_, other->imgflag_);
  std::swap(contacttype_, other->contacttype_);
  std::swap(personalcard_, other->personalcard_);
  std::swap(verifyflag_, other->verifyflag_);
  std::swap(weiboflag_, other->weiboflag_);
  std::swap(albumstyle_, other->albumstyle_);
  std::swap(albumflag_, other->albumflag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModChatRoomMember::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModChatRoomMember

// required .micromsg.SKBuiltinString_t UserName = 1;
bool ModChatRoomMember::has_username() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ModChatRoomMember::set_has_username() {
  _has_bits_[0] |= 0x00002000u;
}
void ModChatRoomMember::clear_has_username() {
  _has_bits_[0] &= ~0x00002000u;
}
void ModChatRoomMember::clear_username() {
  if (username_ != NULL) username_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_username();
}
const ::micromsg::SKBuiltinString_t& ModChatRoomMember::username() const {
  // @@protoc_insertion_point(field_get:micromsg.ModChatRoomMember.UserName)
  return username_ != NULL ? *username_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* ModChatRoomMember::mutable_username() {
  set_has_username();
  if (username_ == NULL) {
    username_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModChatRoomMember.UserName)
  return username_;
}
::micromsg::SKBuiltinString_t* ModChatRoomMember::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.ModChatRoomMember.UserName)
  clear_has_username();
  ::micromsg::SKBuiltinString_t* temp = username_;
  username_ = NULL;
  return temp;
}
void ModChatRoomMember::set_allocated_username(::micromsg::SKBuiltinString_t* username) {
  delete username_;
  username_ = username;
  if (username) {
    set_has_username();
  } else {
    clear_has_username();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModChatRoomMember.UserName)
}

// required .micromsg.SKBuiltinString_t NickName = 2;
bool ModChatRoomMember::has_nickname() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ModChatRoomMember::set_has_nickname() {
  _has_bits_[0] |= 0x00004000u;
}
void ModChatRoomMember::clear_has_nickname() {
  _has_bits_[0] &= ~0x00004000u;
}
void ModChatRoomMember::clear_nickname() {
  if (nickname_ != NULL) nickname_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_nickname();
}
const ::micromsg::SKBuiltinString_t& ModChatRoomMember::nickname() const {
  // @@protoc_insertion_point(field_get:micromsg.ModChatRoomMember.NickName)
  return nickname_ != NULL ? *nickname_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* ModChatRoomMember::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == NULL) {
    nickname_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModChatRoomMember.NickName)
  return nickname_;
}
::micromsg::SKBuiltinString_t* ModChatRoomMember::release_nickname() {
  // @@protoc_insertion_point(field_release:micromsg.ModChatRoomMember.NickName)
  clear_has_nickname();
  ::micromsg::SKBuiltinString_t* temp = nickname_;
  nickname_ = NULL;
  return temp;
}
void ModChatRoomMember::set_allocated_nickname(::micromsg::SKBuiltinString_t* nickname) {
  delete nickname_;
  nickname_ = nickname;
  if (nickname) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModChatRoomMember.NickName)
}

// required .micromsg.SKBuiltinString_t PYInitial = 3;
bool ModChatRoomMember::has_pyinitial() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void ModChatRoomMember::set_has_pyinitial() {
  _has_bits_[0] |= 0x00008000u;
}
void ModChatRoomMember::clear_has_pyinitial() {
  _has_bits_[0] &= ~0x00008000u;
}
void ModChatRoomMember::clear_pyinitial() {
  if (pyinitial_ != NULL) pyinitial_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_pyinitial();
}
const ::micromsg::SKBuiltinString_t& ModChatRoomMember::pyinitial() const {
  // @@protoc_insertion_point(field_get:micromsg.ModChatRoomMember.PYInitial)
  return pyinitial_ != NULL ? *pyinitial_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* ModChatRoomMember::mutable_pyinitial() {
  set_has_pyinitial();
  if (pyinitial_ == NULL) {
    pyinitial_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModChatRoomMember.PYInitial)
  return pyinitial_;
}
::micromsg::SKBuiltinString_t* ModChatRoomMember::release_pyinitial() {
  // @@protoc_insertion_point(field_release:micromsg.ModChatRoomMember.PYInitial)
  clear_has_pyinitial();
  ::micromsg::SKBuiltinString_t* temp = pyinitial_;
  pyinitial_ = NULL;
  return temp;
}
void ModChatRoomMember::set_allocated_pyinitial(::micromsg::SKBuiltinString_t* pyinitial) {
  delete pyinitial_;
  pyinitial_ = pyinitial;
  if (pyinitial) {
    set_has_pyinitial();
  } else {
    clear_has_pyinitial();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModChatRoomMember.PYInitial)
}

// required .micromsg.SKBuiltinString_t QuanPin = 4;
bool ModChatRoomMember::has_quanpin() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void ModChatRoomMember::set_has_quanpin() {
  _has_bits_[0] |= 0x00010000u;
}
void ModChatRoomMember::clear_has_quanpin() {
  _has_bits_[0] &= ~0x00010000u;
}
void ModChatRoomMember::clear_quanpin() {
  if (quanpin_ != NULL) quanpin_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_quanpin();
}
const ::micromsg::SKBuiltinString_t& ModChatRoomMember::quanpin() const {
  // @@protoc_insertion_point(field_get:micromsg.ModChatRoomMember.QuanPin)
  return quanpin_ != NULL ? *quanpin_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* ModChatRoomMember::mutable_quanpin() {
  set_has_quanpin();
  if (quanpin_ == NULL) {
    quanpin_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModChatRoomMember.QuanPin)
  return quanpin_;
}
::micromsg::SKBuiltinString_t* ModChatRoomMember::release_quanpin() {
  // @@protoc_insertion_point(field_release:micromsg.ModChatRoomMember.QuanPin)
  clear_has_quanpin();
  ::micromsg::SKBuiltinString_t* temp = quanpin_;
  quanpin_ = NULL;
  return temp;
}
void ModChatRoomMember::set_allocated_quanpin(::micromsg::SKBuiltinString_t* quanpin) {
  delete quanpin_;
  quanpin_ = quanpin;
  if (quanpin) {
    set_has_quanpin();
  } else {
    clear_has_quanpin();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModChatRoomMember.QuanPin)
}

// required int32 Sex = 5;
bool ModChatRoomMember::has_sex() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void ModChatRoomMember::set_has_sex() {
  _has_bits_[0] |= 0x00800000u;
}
void ModChatRoomMember::clear_has_sex() {
  _has_bits_[0] &= ~0x00800000u;
}
void ModChatRoomMember::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
::google::protobuf::int32 ModChatRoomMember::sex() const {
  // @@protoc_insertion_point(field_get:micromsg.ModChatRoomMember.Sex)
  return sex_;
}
void ModChatRoomMember::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModChatRoomMember.Sex)
}

// required .micromsg.SKBuiltinBuffer_t ImgBuf = 6;
bool ModChatRoomMember::has_imgbuf() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void ModChatRoomMember::set_has_imgbuf() {
  _has_bits_[0] |= 0x00020000u;
}
void ModChatRoomMember::clear_has_imgbuf() {
  _has_bits_[0] &= ~0x00020000u;
}
void ModChatRoomMember::clear_imgbuf() {
  if (imgbuf_ != NULL) imgbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_imgbuf();
}
const ::micromsg::SKBuiltinBuffer_t& ModChatRoomMember::imgbuf() const {
  // @@protoc_insertion_point(field_get:micromsg.ModChatRoomMember.ImgBuf)
  return imgbuf_ != NULL ? *imgbuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* ModChatRoomMember::mutable_imgbuf() {
  set_has_imgbuf();
  if (imgbuf_ == NULL) {
    imgbuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModChatRoomMember.ImgBuf)
  return imgbuf_;
}
::micromsg::SKBuiltinBuffer_t* ModChatRoomMember::release_imgbuf() {
  // @@protoc_insertion_point(field_release:micromsg.ModChatRoomMember.ImgBuf)
  clear_has_imgbuf();
  ::micromsg::SKBuiltinBuffer_t* temp = imgbuf_;
  imgbuf_ = NULL;
  return temp;
}
void ModChatRoomMember::set_allocated_imgbuf(::micromsg::SKBuiltinBuffer_t* imgbuf) {
  delete imgbuf_;
  imgbuf_ = imgbuf;
  if (imgbuf) {
    set_has_imgbuf();
  } else {
    clear_has_imgbuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModChatRoomMember.ImgBuf)
}

// required uint32 ImgFlag = 7;
bool ModChatRoomMember::has_imgflag() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void ModChatRoomMember::set_has_imgflag() {
  _has_bits_[0] |= 0x01000000u;
}
void ModChatRoomMember::clear_has_imgflag() {
  _has_bits_[0] &= ~0x01000000u;
}
void ModChatRoomMember::clear_imgflag() {
  imgflag_ = 0u;
  clear_has_imgflag();
}
::google::protobuf::uint32 ModChatRoomMember::imgflag() const {
  // @@protoc_insertion_point(field_get:micromsg.ModChatRoomMember.ImgFlag)
  return imgflag_;
}
void ModChatRoomMember::set_imgflag(::google::protobuf::uint32 value) {
  set_has_imgflag();
  imgflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModChatRoomMember.ImgFlag)
}

// required .micromsg.SKBuiltinString_t Remark = 8;
bool ModChatRoomMember::has_remark() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void ModChatRoomMember::set_has_remark() {
  _has_bits_[0] |= 0x00040000u;
}
void ModChatRoomMember::clear_has_remark() {
  _has_bits_[0] &= ~0x00040000u;
}
void ModChatRoomMember::clear_remark() {
  if (remark_ != NULL) remark_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_remark();
}
const ::micromsg::SKBuiltinString_t& ModChatRoomMember::remark() const {
  // @@protoc_insertion_point(field_get:micromsg.ModChatRoomMember.Remark)
  return remark_ != NULL ? *remark_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* ModChatRoomMember::mutable_remark() {
  set_has_remark();
  if (remark_ == NULL) {
    remark_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModChatRoomMember.Remark)
  return remark_;
}
::micromsg::SKBuiltinString_t* ModChatRoomMember::release_remark() {
  // @@protoc_insertion_point(field_release:micromsg.ModChatRoomMember.Remark)
  clear_has_remark();
  ::micromsg::SKBuiltinString_t* temp = remark_;
  remark_ = NULL;
  return temp;
}
void ModChatRoomMember::set_allocated_remark(::micromsg::SKBuiltinString_t* remark) {
  delete remark_;
  remark_ = remark;
  if (remark) {
    set_has_remark();
  } else {
    clear_has_remark();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModChatRoomMember.Remark)
}

// required .micromsg.SKBuiltinString_t RemarkPYInitial = 9;
bool ModChatRoomMember::has_remarkpyinitial() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void ModChatRoomMember::set_has_remarkpyinitial() {
  _has_bits_[0] |= 0x00080000u;
}
void ModChatRoomMember::clear_has_remarkpyinitial() {
  _has_bits_[0] &= ~0x00080000u;
}
void ModChatRoomMember::clear_remarkpyinitial() {
  if (remarkpyinitial_ != NULL) remarkpyinitial_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_remarkpyinitial();
}
const ::micromsg::SKBuiltinString_t& ModChatRoomMember::remarkpyinitial() const {
  // @@protoc_insertion_point(field_get:micromsg.ModChatRoomMember.RemarkPYInitial)
  return remarkpyinitial_ != NULL ? *remarkpyinitial_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* ModChatRoomMember::mutable_remarkpyinitial() {
  set_has_remarkpyinitial();
  if (remarkpyinitial_ == NULL) {
    remarkpyinitial_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModChatRoomMember.RemarkPYInitial)
  return remarkpyinitial_;
}
::micromsg::SKBuiltinString_t* ModChatRoomMember::release_remarkpyinitial() {
  // @@protoc_insertion_point(field_release:micromsg.ModChatRoomMember.RemarkPYInitial)
  clear_has_remarkpyinitial();
  ::micromsg::SKBuiltinString_t* temp = remarkpyinitial_;
  remarkpyinitial_ = NULL;
  return temp;
}
void ModChatRoomMember::set_allocated_remarkpyinitial(::micromsg::SKBuiltinString_t* remarkpyinitial) {
  delete remarkpyinitial_;
  remarkpyinitial_ = remarkpyinitial;
  if (remarkpyinitial) {
    set_has_remarkpyinitial();
  } else {
    clear_has_remarkpyinitial();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModChatRoomMember.RemarkPYInitial)
}

// required .micromsg.SKBuiltinString_t RemarkQuanPin = 10;
bool ModChatRoomMember::has_remarkquanpin() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void ModChatRoomMember::set_has_remarkquanpin() {
  _has_bits_[0] |= 0x00100000u;
}
void ModChatRoomMember::clear_has_remarkquanpin() {
  _has_bits_[0] &= ~0x00100000u;
}
void ModChatRoomMember::clear_remarkquanpin() {
  if (remarkquanpin_ != NULL) remarkquanpin_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_remarkquanpin();
}
const ::micromsg::SKBuiltinString_t& ModChatRoomMember::remarkquanpin() const {
  // @@protoc_insertion_point(field_get:micromsg.ModChatRoomMember.RemarkQuanPin)
  return remarkquanpin_ != NULL ? *remarkquanpin_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* ModChatRoomMember::mutable_remarkquanpin() {
  set_has_remarkquanpin();
  if (remarkquanpin_ == NULL) {
    remarkquanpin_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModChatRoomMember.RemarkQuanPin)
  return remarkquanpin_;
}
::micromsg::SKBuiltinString_t* ModChatRoomMember::release_remarkquanpin() {
  // @@protoc_insertion_point(field_release:micromsg.ModChatRoomMember.RemarkQuanPin)
  clear_has_remarkquanpin();
  ::micromsg::SKBuiltinString_t* temp = remarkquanpin_;
  remarkquanpin_ = NULL;
  return temp;
}
void ModChatRoomMember::set_allocated_remarkquanpin(::micromsg::SKBuiltinString_t* remarkquanpin) {
  delete remarkquanpin_;
  remarkquanpin_ = remarkquanpin;
  if (remarkquanpin) {
    set_has_remarkquanpin();
  } else {
    clear_has_remarkquanpin();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModChatRoomMember.RemarkQuanPin)
}

// required uint32 ContactType = 11;
bool ModChatRoomMember::has_contacttype() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void ModChatRoomMember::set_has_contacttype() {
  _has_bits_[0] |= 0x02000000u;
}
void ModChatRoomMember::clear_has_contacttype() {
  _has_bits_[0] &= ~0x02000000u;
}
void ModChatRoomMember::clear_contacttype() {
  contacttype_ = 0u;
  clear_has_contacttype();
}
::google::protobuf::uint32 ModChatRoomMember::contacttype() const {
  // @@protoc_insertion_point(field_get:micromsg.ModChatRoomMember.ContactType)
  return contacttype_;
}
void ModChatRoomMember::set_contacttype(::google::protobuf::uint32 value) {
  set_has_contacttype();
  contacttype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModChatRoomMember.ContactType)
}

// optional string Province = 12;
bool ModChatRoomMember::has_province() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModChatRoomMember::set_has_province() {
  _has_bits_[0] |= 0x00000001u;
}
void ModChatRoomMember::clear_has_province() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModChatRoomMember::clear_province() {
  province_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_province();
}
const ::std::string& ModChatRoomMember::province() const {
  // @@protoc_insertion_point(field_get:micromsg.ModChatRoomMember.Province)
  return province_.GetNoArena();
}
void ModChatRoomMember::set_province(const ::std::string& value) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModChatRoomMember.Province)
}
#if LANG_CXX11
void ModChatRoomMember::set_province(::std::string&& value) {
  set_has_province();
  province_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModChatRoomMember.Province)
}
#endif
void ModChatRoomMember::set_province(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModChatRoomMember.Province)
}
void ModChatRoomMember::set_province(const char* value, size_t size) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModChatRoomMember.Province)
}
::std::string* ModChatRoomMember::mutable_province() {
  set_has_province();
  // @@protoc_insertion_point(field_mutable:micromsg.ModChatRoomMember.Province)
  return province_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModChatRoomMember::release_province() {
  // @@protoc_insertion_point(field_release:micromsg.ModChatRoomMember.Province)
  clear_has_province();
  return province_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModChatRoomMember::set_allocated_province(::std::string* province) {
  if (province != NULL) {
    set_has_province();
  } else {
    clear_has_province();
  }
  province_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), province);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModChatRoomMember.Province)
}

// optional string City = 13;
bool ModChatRoomMember::has_city() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ModChatRoomMember::set_has_city() {
  _has_bits_[0] |= 0x00000002u;
}
void ModChatRoomMember::clear_has_city() {
  _has_bits_[0] &= ~0x00000002u;
}
void ModChatRoomMember::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_city();
}
const ::std::string& ModChatRoomMember::city() const {
  // @@protoc_insertion_point(field_get:micromsg.ModChatRoomMember.City)
  return city_.GetNoArena();
}
void ModChatRoomMember::set_city(const ::std::string& value) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModChatRoomMember.City)
}
#if LANG_CXX11
void ModChatRoomMember::set_city(::std::string&& value) {
  set_has_city();
  city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModChatRoomMember.City)
}
#endif
void ModChatRoomMember::set_city(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModChatRoomMember.City)
}
void ModChatRoomMember::set_city(const char* value, size_t size) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModChatRoomMember.City)
}
::std::string* ModChatRoomMember::mutable_city() {
  set_has_city();
  // @@protoc_insertion_point(field_mutable:micromsg.ModChatRoomMember.City)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModChatRoomMember::release_city() {
  // @@protoc_insertion_point(field_release:micromsg.ModChatRoomMember.City)
  clear_has_city();
  return city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModChatRoomMember::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    set_has_city();
  } else {
    clear_has_city();
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModChatRoomMember.City)
}

// optional string Signature = 14;
bool ModChatRoomMember::has_signature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ModChatRoomMember::set_has_signature() {
  _has_bits_[0] |= 0x00000004u;
}
void ModChatRoomMember::clear_has_signature() {
  _has_bits_[0] &= ~0x00000004u;
}
void ModChatRoomMember::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signature();
}
const ::std::string& ModChatRoomMember::signature() const {
  // @@protoc_insertion_point(field_get:micromsg.ModChatRoomMember.Signature)
  return signature_.GetNoArena();
}
void ModChatRoomMember::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModChatRoomMember.Signature)
}
#if LANG_CXX11
void ModChatRoomMember::set_signature(::std::string&& value) {
  set_has_signature();
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModChatRoomMember.Signature)
}
#endif
void ModChatRoomMember::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModChatRoomMember.Signature)
}
void ModChatRoomMember::set_signature(const char* value, size_t size) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModChatRoomMember.Signature)
}
::std::string* ModChatRoomMember::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:micromsg.ModChatRoomMember.Signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModChatRoomMember::release_signature() {
  // @@protoc_insertion_point(field_release:micromsg.ModChatRoomMember.Signature)
  clear_has_signature();
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModChatRoomMember::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModChatRoomMember.Signature)
}

// optional uint32 PersonalCard = 15;
bool ModChatRoomMember::has_personalcard() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void ModChatRoomMember::set_has_personalcard() {
  _has_bits_[0] |= 0x04000000u;
}
void ModChatRoomMember::clear_has_personalcard() {
  _has_bits_[0] &= ~0x04000000u;
}
void ModChatRoomMember::clear_personalcard() {
  personalcard_ = 0u;
  clear_has_personalcard();
}
::google::protobuf::uint32 ModChatRoomMember::personalcard() const {
  // @@protoc_insertion_point(field_get:micromsg.ModChatRoomMember.PersonalCard)
  return personalcard_;
}
void ModChatRoomMember::set_personalcard(::google::protobuf::uint32 value) {
  set_has_personalcard();
  personalcard_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModChatRoomMember.PersonalCard)
}

// optional uint32 VerifyFlag = 16;
bool ModChatRoomMember::has_verifyflag() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void ModChatRoomMember::set_has_verifyflag() {
  _has_bits_[0] |= 0x08000000u;
}
void ModChatRoomMember::clear_has_verifyflag() {
  _has_bits_[0] &= ~0x08000000u;
}
void ModChatRoomMember::clear_verifyflag() {
  verifyflag_ = 0u;
  clear_has_verifyflag();
}
::google::protobuf::uint32 ModChatRoomMember::verifyflag() const {
  // @@protoc_insertion_point(field_get:micromsg.ModChatRoomMember.VerifyFlag)
  return verifyflag_;
}
void ModChatRoomMember::set_verifyflag(::google::protobuf::uint32 value) {
  set_has_verifyflag();
  verifyflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModChatRoomMember.VerifyFlag)
}

// optional string VerifyInfo = 17;
bool ModChatRoomMember::has_verifyinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ModChatRoomMember::set_has_verifyinfo() {
  _has_bits_[0] |= 0x00000008u;
}
void ModChatRoomMember::clear_has_verifyinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
void ModChatRoomMember::clear_verifyinfo() {
  verifyinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verifyinfo();
}
const ::std::string& ModChatRoomMember::verifyinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.ModChatRoomMember.VerifyInfo)
  return verifyinfo_.GetNoArena();
}
void ModChatRoomMember::set_verifyinfo(const ::std::string& value) {
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModChatRoomMember.VerifyInfo)
}
#if LANG_CXX11
void ModChatRoomMember::set_verifyinfo(::std::string&& value) {
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModChatRoomMember.VerifyInfo)
}
#endif
void ModChatRoomMember::set_verifyinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModChatRoomMember.VerifyInfo)
}
void ModChatRoomMember::set_verifyinfo(const char* value, size_t size) {
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModChatRoomMember.VerifyInfo)
}
::std::string* ModChatRoomMember::mutable_verifyinfo() {
  set_has_verifyinfo();
  // @@protoc_insertion_point(field_mutable:micromsg.ModChatRoomMember.VerifyInfo)
  return verifyinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModChatRoomMember::release_verifyinfo() {
  // @@protoc_insertion_point(field_release:micromsg.ModChatRoomMember.VerifyInfo)
  clear_has_verifyinfo();
  return verifyinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModChatRoomMember::set_allocated_verifyinfo(::std::string* verifyinfo) {
  if (verifyinfo != NULL) {
    set_has_verifyinfo();
  } else {
    clear_has_verifyinfo();
  }
  verifyinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifyinfo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModChatRoomMember.VerifyInfo)
}

// optional string Weibo = 18;
bool ModChatRoomMember::has_weibo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ModChatRoomMember::set_has_weibo() {
  _has_bits_[0] |= 0x00000010u;
}
void ModChatRoomMember::clear_has_weibo() {
  _has_bits_[0] &= ~0x00000010u;
}
void ModChatRoomMember::clear_weibo() {
  weibo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weibo();
}
const ::std::string& ModChatRoomMember::weibo() const {
  // @@protoc_insertion_point(field_get:micromsg.ModChatRoomMember.Weibo)
  return weibo_.GetNoArena();
}
void ModChatRoomMember::set_weibo(const ::std::string& value) {
  set_has_weibo();
  weibo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModChatRoomMember.Weibo)
}
#if LANG_CXX11
void ModChatRoomMember::set_weibo(::std::string&& value) {
  set_has_weibo();
  weibo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModChatRoomMember.Weibo)
}
#endif
void ModChatRoomMember::set_weibo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_weibo();
  weibo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModChatRoomMember.Weibo)
}
void ModChatRoomMember::set_weibo(const char* value, size_t size) {
  set_has_weibo();
  weibo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModChatRoomMember.Weibo)
}
::std::string* ModChatRoomMember::mutable_weibo() {
  set_has_weibo();
  // @@protoc_insertion_point(field_mutable:micromsg.ModChatRoomMember.Weibo)
  return weibo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModChatRoomMember::release_weibo() {
  // @@protoc_insertion_point(field_release:micromsg.ModChatRoomMember.Weibo)
  clear_has_weibo();
  return weibo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModChatRoomMember::set_allocated_weibo(::std::string* weibo) {
  if (weibo != NULL) {
    set_has_weibo();
  } else {
    clear_has_weibo();
  }
  weibo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weibo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModChatRoomMember.Weibo)
}

// optional string VerifyContent = 19;
bool ModChatRoomMember::has_verifycontent() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ModChatRoomMember::set_has_verifycontent() {
  _has_bits_[0] |= 0x00000020u;
}
void ModChatRoomMember::clear_has_verifycontent() {
  _has_bits_[0] &= ~0x00000020u;
}
void ModChatRoomMember::clear_verifycontent() {
  verifycontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verifycontent();
}
const ::std::string& ModChatRoomMember::verifycontent() const {
  // @@protoc_insertion_point(field_get:micromsg.ModChatRoomMember.VerifyContent)
  return verifycontent_.GetNoArena();
}
void ModChatRoomMember::set_verifycontent(const ::std::string& value) {
  set_has_verifycontent();
  verifycontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModChatRoomMember.VerifyContent)
}
#if LANG_CXX11
void ModChatRoomMember::set_verifycontent(::std::string&& value) {
  set_has_verifycontent();
  verifycontent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModChatRoomMember.VerifyContent)
}
#endif
void ModChatRoomMember::set_verifycontent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verifycontent();
  verifycontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModChatRoomMember.VerifyContent)
}
void ModChatRoomMember::set_verifycontent(const char* value, size_t size) {
  set_has_verifycontent();
  verifycontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModChatRoomMember.VerifyContent)
}
::std::string* ModChatRoomMember::mutable_verifycontent() {
  set_has_verifycontent();
  // @@protoc_insertion_point(field_mutable:micromsg.ModChatRoomMember.VerifyContent)
  return verifycontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModChatRoomMember::release_verifycontent() {
  // @@protoc_insertion_point(field_release:micromsg.ModChatRoomMember.VerifyContent)
  clear_has_verifycontent();
  return verifycontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModChatRoomMember::set_allocated_verifycontent(::std::string* verifycontent) {
  if (verifycontent != NULL) {
    set_has_verifycontent();
  } else {
    clear_has_verifycontent();
  }
  verifycontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifycontent);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModChatRoomMember.VerifyContent)
}

// optional string WeiboNickname = 20;
bool ModChatRoomMember::has_weibonickname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ModChatRoomMember::set_has_weibonickname() {
  _has_bits_[0] |= 0x00000040u;
}
void ModChatRoomMember::clear_has_weibonickname() {
  _has_bits_[0] &= ~0x00000040u;
}
void ModChatRoomMember::clear_weibonickname() {
  weibonickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weibonickname();
}
const ::std::string& ModChatRoomMember::weibonickname() const {
  // @@protoc_insertion_point(field_get:micromsg.ModChatRoomMember.WeiboNickname)
  return weibonickname_.GetNoArena();
}
void ModChatRoomMember::set_weibonickname(const ::std::string& value) {
  set_has_weibonickname();
  weibonickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModChatRoomMember.WeiboNickname)
}
#if LANG_CXX11
void ModChatRoomMember::set_weibonickname(::std::string&& value) {
  set_has_weibonickname();
  weibonickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModChatRoomMember.WeiboNickname)
}
#endif
void ModChatRoomMember::set_weibonickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_weibonickname();
  weibonickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModChatRoomMember.WeiboNickname)
}
void ModChatRoomMember::set_weibonickname(const char* value, size_t size) {
  set_has_weibonickname();
  weibonickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModChatRoomMember.WeiboNickname)
}
::std::string* ModChatRoomMember::mutable_weibonickname() {
  set_has_weibonickname();
  // @@protoc_insertion_point(field_mutable:micromsg.ModChatRoomMember.WeiboNickname)
  return weibonickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModChatRoomMember::release_weibonickname() {
  // @@protoc_insertion_point(field_release:micromsg.ModChatRoomMember.WeiboNickname)
  clear_has_weibonickname();
  return weibonickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModChatRoomMember::set_allocated_weibonickname(::std::string* weibonickname) {
  if (weibonickname != NULL) {
    set_has_weibonickname();
  } else {
    clear_has_weibonickname();
  }
  weibonickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weibonickname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModChatRoomMember.WeiboNickname)
}

// optional uint32 WeiboFlag = 21;
bool ModChatRoomMember::has_weiboflag() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void ModChatRoomMember::set_has_weiboflag() {
  _has_bits_[0] |= 0x10000000u;
}
void ModChatRoomMember::clear_has_weiboflag() {
  _has_bits_[0] &= ~0x10000000u;
}
void ModChatRoomMember::clear_weiboflag() {
  weiboflag_ = 0u;
  clear_has_weiboflag();
}
::google::protobuf::uint32 ModChatRoomMember::weiboflag() const {
  // @@protoc_insertion_point(field_get:micromsg.ModChatRoomMember.WeiboFlag)
  return weiboflag_;
}
void ModChatRoomMember::set_weiboflag(::google::protobuf::uint32 value) {
  set_has_weiboflag();
  weiboflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModChatRoomMember.WeiboFlag)
}

// optional int32 AlbumStyle = 22;
bool ModChatRoomMember::has_albumstyle() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void ModChatRoomMember::set_has_albumstyle() {
  _has_bits_[0] |= 0x20000000u;
}
void ModChatRoomMember::clear_has_albumstyle() {
  _has_bits_[0] &= ~0x20000000u;
}
void ModChatRoomMember::clear_albumstyle() {
  albumstyle_ = 0;
  clear_has_albumstyle();
}
::google::protobuf::int32 ModChatRoomMember::albumstyle() const {
  // @@protoc_insertion_point(field_get:micromsg.ModChatRoomMember.AlbumStyle)
  return albumstyle_;
}
void ModChatRoomMember::set_albumstyle(::google::protobuf::int32 value) {
  set_has_albumstyle();
  albumstyle_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModChatRoomMember.AlbumStyle)
}

// optional int32 AlbumFlag = 23;
bool ModChatRoomMember::has_albumflag() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void ModChatRoomMember::set_has_albumflag() {
  _has_bits_[0] |= 0x40000000u;
}
void ModChatRoomMember::clear_has_albumflag() {
  _has_bits_[0] &= ~0x40000000u;
}
void ModChatRoomMember::clear_albumflag() {
  albumflag_ = 0;
  clear_has_albumflag();
}
::google::protobuf::int32 ModChatRoomMember::albumflag() const {
  // @@protoc_insertion_point(field_get:micromsg.ModChatRoomMember.AlbumFlag)
  return albumflag_;
}
void ModChatRoomMember::set_albumflag(::google::protobuf::int32 value) {
  set_has_albumflag();
  albumflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModChatRoomMember.AlbumFlag)
}

// optional string AlbumBGImgID = 24;
bool ModChatRoomMember::has_albumbgimgid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ModChatRoomMember::set_has_albumbgimgid() {
  _has_bits_[0] |= 0x00000080u;
}
void ModChatRoomMember::clear_has_albumbgimgid() {
  _has_bits_[0] &= ~0x00000080u;
}
void ModChatRoomMember::clear_albumbgimgid() {
  albumbgimgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_albumbgimgid();
}
const ::std::string& ModChatRoomMember::albumbgimgid() const {
  // @@protoc_insertion_point(field_get:micromsg.ModChatRoomMember.AlbumBGImgID)
  return albumbgimgid_.GetNoArena();
}
void ModChatRoomMember::set_albumbgimgid(const ::std::string& value) {
  set_has_albumbgimgid();
  albumbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModChatRoomMember.AlbumBGImgID)
}
#if LANG_CXX11
void ModChatRoomMember::set_albumbgimgid(::std::string&& value) {
  set_has_albumbgimgid();
  albumbgimgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModChatRoomMember.AlbumBGImgID)
}
#endif
void ModChatRoomMember::set_albumbgimgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_albumbgimgid();
  albumbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModChatRoomMember.AlbumBGImgID)
}
void ModChatRoomMember::set_albumbgimgid(const char* value, size_t size) {
  set_has_albumbgimgid();
  albumbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModChatRoomMember.AlbumBGImgID)
}
::std::string* ModChatRoomMember::mutable_albumbgimgid() {
  set_has_albumbgimgid();
  // @@protoc_insertion_point(field_mutable:micromsg.ModChatRoomMember.AlbumBGImgID)
  return albumbgimgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModChatRoomMember::release_albumbgimgid() {
  // @@protoc_insertion_point(field_release:micromsg.ModChatRoomMember.AlbumBGImgID)
  clear_has_albumbgimgid();
  return albumbgimgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModChatRoomMember::set_allocated_albumbgimgid(::std::string* albumbgimgid) {
  if (albumbgimgid != NULL) {
    set_has_albumbgimgid();
  } else {
    clear_has_albumbgimgid();
  }
  albumbgimgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), albumbgimgid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModChatRoomMember.AlbumBGImgID)
}

// optional string Alias = 25;
bool ModChatRoomMember::has_alias() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ModChatRoomMember::set_has_alias() {
  _has_bits_[0] |= 0x00000100u;
}
void ModChatRoomMember::clear_has_alias() {
  _has_bits_[0] &= ~0x00000100u;
}
void ModChatRoomMember::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_alias();
}
const ::std::string& ModChatRoomMember::alias() const {
  // @@protoc_insertion_point(field_get:micromsg.ModChatRoomMember.Alias)
  return alias_.GetNoArena();
}
void ModChatRoomMember::set_alias(const ::std::string& value) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModChatRoomMember.Alias)
}
#if LANG_CXX11
void ModChatRoomMember::set_alias(::std::string&& value) {
  set_has_alias();
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModChatRoomMember.Alias)
}
#endif
void ModChatRoomMember::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModChatRoomMember.Alias)
}
void ModChatRoomMember::set_alias(const char* value, size_t size) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModChatRoomMember.Alias)
}
::std::string* ModChatRoomMember::mutable_alias() {
  set_has_alias();
  // @@protoc_insertion_point(field_mutable:micromsg.ModChatRoomMember.Alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModChatRoomMember::release_alias() {
  // @@protoc_insertion_point(field_release:micromsg.ModChatRoomMember.Alias)
  clear_has_alias();
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModChatRoomMember::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    set_has_alias();
  } else {
    clear_has_alias();
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModChatRoomMember.Alias)
}

// optional .micromsg.SnsUserInfo SnsUserInfo = 26;
bool ModChatRoomMember::has_snsuserinfo() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void ModChatRoomMember::set_has_snsuserinfo() {
  _has_bits_[0] |= 0x00200000u;
}
void ModChatRoomMember::clear_has_snsuserinfo() {
  _has_bits_[0] &= ~0x00200000u;
}
void ModChatRoomMember::clear_snsuserinfo() {
  if (snsuserinfo_ != NULL) snsuserinfo_->::micromsg::SnsUserInfo::Clear();
  clear_has_snsuserinfo();
}
const ::micromsg::SnsUserInfo& ModChatRoomMember::snsuserinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.ModChatRoomMember.SnsUserInfo)
  return snsuserinfo_ != NULL ? *snsuserinfo_
                         : *::micromsg::SnsUserInfo::internal_default_instance();
}
::micromsg::SnsUserInfo* ModChatRoomMember::mutable_snsuserinfo() {
  set_has_snsuserinfo();
  if (snsuserinfo_ == NULL) {
    snsuserinfo_ = new ::micromsg::SnsUserInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModChatRoomMember.SnsUserInfo)
  return snsuserinfo_;
}
::micromsg::SnsUserInfo* ModChatRoomMember::release_snsuserinfo() {
  // @@protoc_insertion_point(field_release:micromsg.ModChatRoomMember.SnsUserInfo)
  clear_has_snsuserinfo();
  ::micromsg::SnsUserInfo* temp = snsuserinfo_;
  snsuserinfo_ = NULL;
  return temp;
}
void ModChatRoomMember::set_allocated_snsuserinfo(::micromsg::SnsUserInfo* snsuserinfo) {
  delete snsuserinfo_;
  snsuserinfo_ = snsuserinfo;
  if (snsuserinfo) {
    set_has_snsuserinfo();
  } else {
    clear_has_snsuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModChatRoomMember.SnsUserInfo)
}

// optional string Country = 27;
bool ModChatRoomMember::has_country() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ModChatRoomMember::set_has_country() {
  _has_bits_[0] |= 0x00000200u;
}
void ModChatRoomMember::clear_has_country() {
  _has_bits_[0] &= ~0x00000200u;
}
void ModChatRoomMember::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country();
}
const ::std::string& ModChatRoomMember::country() const {
  // @@protoc_insertion_point(field_get:micromsg.ModChatRoomMember.Country)
  return country_.GetNoArena();
}
void ModChatRoomMember::set_country(const ::std::string& value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModChatRoomMember.Country)
}
#if LANG_CXX11
void ModChatRoomMember::set_country(::std::string&& value) {
  set_has_country();
  country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModChatRoomMember.Country)
}
#endif
void ModChatRoomMember::set_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModChatRoomMember.Country)
}
void ModChatRoomMember::set_country(const char* value, size_t size) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModChatRoomMember.Country)
}
::std::string* ModChatRoomMember::mutable_country() {
  set_has_country();
  // @@protoc_insertion_point(field_mutable:micromsg.ModChatRoomMember.Country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModChatRoomMember::release_country() {
  // @@protoc_insertion_point(field_release:micromsg.ModChatRoomMember.Country)
  clear_has_country();
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModChatRoomMember::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    set_has_country();
  } else {
    clear_has_country();
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModChatRoomMember.Country)
}

// optional string BigHeadImgUrl = 28;
bool ModChatRoomMember::has_bigheadimgurl() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ModChatRoomMember::set_has_bigheadimgurl() {
  _has_bits_[0] |= 0x00000400u;
}
void ModChatRoomMember::clear_has_bigheadimgurl() {
  _has_bits_[0] &= ~0x00000400u;
}
void ModChatRoomMember::clear_bigheadimgurl() {
  bigheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bigheadimgurl();
}
const ::std::string& ModChatRoomMember::bigheadimgurl() const {
  // @@protoc_insertion_point(field_get:micromsg.ModChatRoomMember.BigHeadImgUrl)
  return bigheadimgurl_.GetNoArena();
}
void ModChatRoomMember::set_bigheadimgurl(const ::std::string& value) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModChatRoomMember.BigHeadImgUrl)
}
#if LANG_CXX11
void ModChatRoomMember::set_bigheadimgurl(::std::string&& value) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModChatRoomMember.BigHeadImgUrl)
}
#endif
void ModChatRoomMember::set_bigheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModChatRoomMember.BigHeadImgUrl)
}
void ModChatRoomMember::set_bigheadimgurl(const char* value, size_t size) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModChatRoomMember.BigHeadImgUrl)
}
::std::string* ModChatRoomMember::mutable_bigheadimgurl() {
  set_has_bigheadimgurl();
  // @@protoc_insertion_point(field_mutable:micromsg.ModChatRoomMember.BigHeadImgUrl)
  return bigheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModChatRoomMember::release_bigheadimgurl() {
  // @@protoc_insertion_point(field_release:micromsg.ModChatRoomMember.BigHeadImgUrl)
  clear_has_bigheadimgurl();
  return bigheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModChatRoomMember::set_allocated_bigheadimgurl(::std::string* bigheadimgurl) {
  if (bigheadimgurl != NULL) {
    set_has_bigheadimgurl();
  } else {
    clear_has_bigheadimgurl();
  }
  bigheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bigheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModChatRoomMember.BigHeadImgUrl)
}

// optional string SmallHeadImgUrl = 29;
bool ModChatRoomMember::has_smallheadimgurl() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ModChatRoomMember::set_has_smallheadimgurl() {
  _has_bits_[0] |= 0x00000800u;
}
void ModChatRoomMember::clear_has_smallheadimgurl() {
  _has_bits_[0] &= ~0x00000800u;
}
void ModChatRoomMember::clear_smallheadimgurl() {
  smallheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_smallheadimgurl();
}
const ::std::string& ModChatRoomMember::smallheadimgurl() const {
  // @@protoc_insertion_point(field_get:micromsg.ModChatRoomMember.SmallHeadImgUrl)
  return smallheadimgurl_.GetNoArena();
}
void ModChatRoomMember::set_smallheadimgurl(const ::std::string& value) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModChatRoomMember.SmallHeadImgUrl)
}
#if LANG_CXX11
void ModChatRoomMember::set_smallheadimgurl(::std::string&& value) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModChatRoomMember.SmallHeadImgUrl)
}
#endif
void ModChatRoomMember::set_smallheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModChatRoomMember.SmallHeadImgUrl)
}
void ModChatRoomMember::set_smallheadimgurl(const char* value, size_t size) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModChatRoomMember.SmallHeadImgUrl)
}
::std::string* ModChatRoomMember::mutable_smallheadimgurl() {
  set_has_smallheadimgurl();
  // @@protoc_insertion_point(field_mutable:micromsg.ModChatRoomMember.SmallHeadImgUrl)
  return smallheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModChatRoomMember::release_smallheadimgurl() {
  // @@protoc_insertion_point(field_release:micromsg.ModChatRoomMember.SmallHeadImgUrl)
  clear_has_smallheadimgurl();
  return smallheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModChatRoomMember::set_allocated_smallheadimgurl(::std::string* smallheadimgurl) {
  if (smallheadimgurl != NULL) {
    set_has_smallheadimgurl();
  } else {
    clear_has_smallheadimgurl();
  }
  smallheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smallheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModChatRoomMember.SmallHeadImgUrl)
}

// optional string MyBrandList = 30;
bool ModChatRoomMember::has_mybrandlist() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ModChatRoomMember::set_has_mybrandlist() {
  _has_bits_[0] |= 0x00001000u;
}
void ModChatRoomMember::clear_has_mybrandlist() {
  _has_bits_[0] &= ~0x00001000u;
}
void ModChatRoomMember::clear_mybrandlist() {
  mybrandlist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mybrandlist();
}
const ::std::string& ModChatRoomMember::mybrandlist() const {
  // @@protoc_insertion_point(field_get:micromsg.ModChatRoomMember.MyBrandList)
  return mybrandlist_.GetNoArena();
}
void ModChatRoomMember::set_mybrandlist(const ::std::string& value) {
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModChatRoomMember.MyBrandList)
}
#if LANG_CXX11
void ModChatRoomMember::set_mybrandlist(::std::string&& value) {
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModChatRoomMember.MyBrandList)
}
#endif
void ModChatRoomMember::set_mybrandlist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModChatRoomMember.MyBrandList)
}
void ModChatRoomMember::set_mybrandlist(const char* value, size_t size) {
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModChatRoomMember.MyBrandList)
}
::std::string* ModChatRoomMember::mutable_mybrandlist() {
  set_has_mybrandlist();
  // @@protoc_insertion_point(field_mutable:micromsg.ModChatRoomMember.MyBrandList)
  return mybrandlist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModChatRoomMember::release_mybrandlist() {
  // @@protoc_insertion_point(field_release:micromsg.ModChatRoomMember.MyBrandList)
  clear_has_mybrandlist();
  return mybrandlist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModChatRoomMember::set_allocated_mybrandlist(::std::string* mybrandlist) {
  if (mybrandlist != NULL) {
    set_has_mybrandlist();
  } else {
    clear_has_mybrandlist();
  }
  mybrandlist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mybrandlist);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModChatRoomMember.MyBrandList)
}

// optional .micromsg.CustomizedInfo CustomizedInfo = 31;
bool ModChatRoomMember::has_customizedinfo() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void ModChatRoomMember::set_has_customizedinfo() {
  _has_bits_[0] |= 0x00400000u;
}
void ModChatRoomMember::clear_has_customizedinfo() {
  _has_bits_[0] &= ~0x00400000u;
}
void ModChatRoomMember::clear_customizedinfo() {
  if (customizedinfo_ != NULL) customizedinfo_->::micromsg::CustomizedInfo::Clear();
  clear_has_customizedinfo();
}
const ::micromsg::CustomizedInfo& ModChatRoomMember::customizedinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.ModChatRoomMember.CustomizedInfo)
  return customizedinfo_ != NULL ? *customizedinfo_
                         : *::micromsg::CustomizedInfo::internal_default_instance();
}
::micromsg::CustomizedInfo* ModChatRoomMember::mutable_customizedinfo() {
  set_has_customizedinfo();
  if (customizedinfo_ == NULL) {
    customizedinfo_ = new ::micromsg::CustomizedInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModChatRoomMember.CustomizedInfo)
  return customizedinfo_;
}
::micromsg::CustomizedInfo* ModChatRoomMember::release_customizedinfo() {
  // @@protoc_insertion_point(field_release:micromsg.ModChatRoomMember.CustomizedInfo)
  clear_has_customizedinfo();
  ::micromsg::CustomizedInfo* temp = customizedinfo_;
  customizedinfo_ = NULL;
  return temp;
}
void ModChatRoomMember::set_allocated_customizedinfo(::micromsg::CustomizedInfo* customizedinfo) {
  delete customizedinfo_;
  customizedinfo_ = customizedinfo;
  if (customizedinfo) {
    set_has_customizedinfo();
  } else {
    clear_has_customizedinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModChatRoomMember.CustomizedInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuitChatRoom::kChatRoomNameFieldNumber;
const int QuitChatRoom::kUserNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuitChatRoom::QuitChatRoom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.QuitChatRoom)
}
QuitChatRoom::QuitChatRoom(const QuitChatRoom& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_chatroomname()) {
    chatroomname_ = new ::micromsg::SKBuiltinString_t(*from.chatroomname_);
  } else {
    chatroomname_ = NULL;
  }
  if (from.has_username()) {
    username_ = new ::micromsg::SKBuiltinString_t(*from.username_);
  } else {
    username_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.QuitChatRoom)
}

void QuitChatRoom::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&chatroomname_, 0, reinterpret_cast<char*>(&username_) -
    reinterpret_cast<char*>(&chatroomname_) + sizeof(username_));
}

QuitChatRoom::~QuitChatRoom() {
  // @@protoc_insertion_point(destructor:micromsg.QuitChatRoom)
  SharedDtor();
}

void QuitChatRoom::SharedDtor() {
  if (this != internal_default_instance()) {
    delete chatroomname_;
  }
  if (this != internal_default_instance()) {
    delete username_;
  }
}

void QuitChatRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuitChatRoom::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QuitChatRoom& QuitChatRoom::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

QuitChatRoom* QuitChatRoom::New(::google::protobuf::Arena* arena) const {
  QuitChatRoom* n = new QuitChatRoom;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuitChatRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.QuitChatRoom)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_chatroomname()) {
      GOOGLE_DCHECK(chatroomname_ != NULL);
      chatroomname_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_username()) {
      GOOGLE_DCHECK(username_ != NULL);
      username_->::micromsg::SKBuiltinString_t::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QuitChatRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.QuitChatRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.SKBuiltinString_t ChatRoomName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chatroomname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t UserName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_username()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.QuitChatRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.QuitChatRoom)
  return false;
#undef DO_
}

void QuitChatRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.QuitChatRoom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t ChatRoomName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->chatroomname_, output);
  }

  // required .micromsg.SKBuiltinString_t UserName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->username_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.QuitChatRoom)
}

::google::protobuf::uint8* QuitChatRoom::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.QuitChatRoom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t ChatRoomName = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->chatroomname_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t UserName = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->username_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.QuitChatRoom)
  return target;
}

size_t QuitChatRoom::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.QuitChatRoom)
  size_t total_size = 0;

  if (has_chatroomname()) {
    // required .micromsg.SKBuiltinString_t ChatRoomName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->chatroomname_);
  }

  if (has_username()) {
    // required .micromsg.SKBuiltinString_t UserName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->username_);
  }

  return total_size;
}
size_t QuitChatRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.QuitChatRoom)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.SKBuiltinString_t ChatRoomName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->chatroomname_);

    // required .micromsg.SKBuiltinString_t UserName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->username_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuitChatRoom::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.QuitChatRoom)
  GOOGLE_DCHECK_NE(&from, this);
  const QuitChatRoom* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuitChatRoom>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.QuitChatRoom)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.QuitChatRoom)
    MergeFrom(*source);
  }
}

void QuitChatRoom::MergeFrom(const QuitChatRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.QuitChatRoom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_chatroomname()->::micromsg::SKBuiltinString_t::MergeFrom(from.chatroomname());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_username()->::micromsg::SKBuiltinString_t::MergeFrom(from.username());
    }
  }
}

void QuitChatRoom::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.QuitChatRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuitChatRoom::CopyFrom(const QuitChatRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.QuitChatRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuitChatRoom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void QuitChatRoom::Swap(QuitChatRoom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuitChatRoom::InternalSwap(QuitChatRoom* other) {
  std::swap(chatroomname_, other->chatroomname_);
  std::swap(username_, other->username_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuitChatRoom::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QuitChatRoom

// required .micromsg.SKBuiltinString_t ChatRoomName = 1;
bool QuitChatRoom::has_chatroomname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QuitChatRoom::set_has_chatroomname() {
  _has_bits_[0] |= 0x00000001u;
}
void QuitChatRoom::clear_has_chatroomname() {
  _has_bits_[0] &= ~0x00000001u;
}
void QuitChatRoom::clear_chatroomname() {
  if (chatroomname_ != NULL) chatroomname_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_chatroomname();
}
const ::micromsg::SKBuiltinString_t& QuitChatRoom::chatroomname() const {
  // @@protoc_insertion_point(field_get:micromsg.QuitChatRoom.ChatRoomName)
  return chatroomname_ != NULL ? *chatroomname_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* QuitChatRoom::mutable_chatroomname() {
  set_has_chatroomname();
  if (chatroomname_ == NULL) {
    chatroomname_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.QuitChatRoom.ChatRoomName)
  return chatroomname_;
}
::micromsg::SKBuiltinString_t* QuitChatRoom::release_chatroomname() {
  // @@protoc_insertion_point(field_release:micromsg.QuitChatRoom.ChatRoomName)
  clear_has_chatroomname();
  ::micromsg::SKBuiltinString_t* temp = chatroomname_;
  chatroomname_ = NULL;
  return temp;
}
void QuitChatRoom::set_allocated_chatroomname(::micromsg::SKBuiltinString_t* chatroomname) {
  delete chatroomname_;
  chatroomname_ = chatroomname;
  if (chatroomname) {
    set_has_chatroomname();
  } else {
    clear_has_chatroomname();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.QuitChatRoom.ChatRoomName)
}

// required .micromsg.SKBuiltinString_t UserName = 2;
bool QuitChatRoom::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QuitChatRoom::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
void QuitChatRoom::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
void QuitChatRoom::clear_username() {
  if (username_ != NULL) username_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_username();
}
const ::micromsg::SKBuiltinString_t& QuitChatRoom::username() const {
  // @@protoc_insertion_point(field_get:micromsg.QuitChatRoom.UserName)
  return username_ != NULL ? *username_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* QuitChatRoom::mutable_username() {
  set_has_username();
  if (username_ == NULL) {
    username_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.QuitChatRoom.UserName)
  return username_;
}
::micromsg::SKBuiltinString_t* QuitChatRoom::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.QuitChatRoom.UserName)
  clear_has_username();
  ::micromsg::SKBuiltinString_t* temp = username_;
  username_ = NULL;
  return temp;
}
void QuitChatRoom::set_allocated_username(::micromsg::SKBuiltinString_t* username) {
  delete username_;
  username_ = username;
  if (username) {
    set_has_username();
  } else {
    clear_has_username();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.QuitChatRoom.UserName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModChatRoomTopic::kChatRoomNameFieldNumber;
const int ModChatRoomTopic::kChatRoomTopicFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModChatRoomTopic::ModChatRoomTopic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ModChatRoomTopic)
}
ModChatRoomTopic::ModChatRoomTopic(const ModChatRoomTopic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_chatroomname()) {
    chatroomname_ = new ::micromsg::SKBuiltinString_t(*from.chatroomname_);
  } else {
    chatroomname_ = NULL;
  }
  if (from.has_chatroomtopic()) {
    chatroomtopic_ = new ::micromsg::SKBuiltinString_t(*from.chatroomtopic_);
  } else {
    chatroomtopic_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.ModChatRoomTopic)
}

void ModChatRoomTopic::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&chatroomname_, 0, reinterpret_cast<char*>(&chatroomtopic_) -
    reinterpret_cast<char*>(&chatroomname_) + sizeof(chatroomtopic_));
}

ModChatRoomTopic::~ModChatRoomTopic() {
  // @@protoc_insertion_point(destructor:micromsg.ModChatRoomTopic)
  SharedDtor();
}

void ModChatRoomTopic::SharedDtor() {
  if (this != internal_default_instance()) {
    delete chatroomname_;
  }
  if (this != internal_default_instance()) {
    delete chatroomtopic_;
  }
}

void ModChatRoomTopic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModChatRoomTopic::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModChatRoomTopic& ModChatRoomTopic::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

ModChatRoomTopic* ModChatRoomTopic::New(::google::protobuf::Arena* arena) const {
  ModChatRoomTopic* n = new ModChatRoomTopic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModChatRoomTopic::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ModChatRoomTopic)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_chatroomname()) {
      GOOGLE_DCHECK(chatroomname_ != NULL);
      chatroomname_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_chatroomtopic()) {
      GOOGLE_DCHECK(chatroomtopic_ != NULL);
      chatroomtopic_->::micromsg::SKBuiltinString_t::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ModChatRoomTopic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ModChatRoomTopic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.SKBuiltinString_t ChatRoomName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chatroomname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t ChatRoomTopic = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chatroomtopic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ModChatRoomTopic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ModChatRoomTopic)
  return false;
#undef DO_
}

void ModChatRoomTopic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ModChatRoomTopic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t ChatRoomName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->chatroomname_, output);
  }

  // required .micromsg.SKBuiltinString_t ChatRoomTopic = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->chatroomtopic_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ModChatRoomTopic)
}

::google::protobuf::uint8* ModChatRoomTopic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ModChatRoomTopic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t ChatRoomName = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->chatroomname_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t ChatRoomTopic = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->chatroomtopic_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ModChatRoomTopic)
  return target;
}

size_t ModChatRoomTopic::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.ModChatRoomTopic)
  size_t total_size = 0;

  if (has_chatroomname()) {
    // required .micromsg.SKBuiltinString_t ChatRoomName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->chatroomname_);
  }

  if (has_chatroomtopic()) {
    // required .micromsg.SKBuiltinString_t ChatRoomTopic = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->chatroomtopic_);
  }

  return total_size;
}
size_t ModChatRoomTopic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ModChatRoomTopic)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.SKBuiltinString_t ChatRoomName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->chatroomname_);

    // required .micromsg.SKBuiltinString_t ChatRoomTopic = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->chatroomtopic_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModChatRoomTopic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ModChatRoomTopic)
  GOOGLE_DCHECK_NE(&from, this);
  const ModChatRoomTopic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModChatRoomTopic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ModChatRoomTopic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ModChatRoomTopic)
    MergeFrom(*source);
  }
}

void ModChatRoomTopic::MergeFrom(const ModChatRoomTopic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ModChatRoomTopic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_chatroomname()->::micromsg::SKBuiltinString_t::MergeFrom(from.chatroomname());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_chatroomtopic()->::micromsg::SKBuiltinString_t::MergeFrom(from.chatroomtopic());
    }
  }
}

void ModChatRoomTopic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ModChatRoomTopic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModChatRoomTopic::CopyFrom(const ModChatRoomTopic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ModChatRoomTopic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModChatRoomTopic::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ModChatRoomTopic::Swap(ModChatRoomTopic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModChatRoomTopic::InternalSwap(ModChatRoomTopic* other) {
  std::swap(chatroomname_, other->chatroomname_);
  std::swap(chatroomtopic_, other->chatroomtopic_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModChatRoomTopic::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModChatRoomTopic

// required .micromsg.SKBuiltinString_t ChatRoomName = 1;
bool ModChatRoomTopic::has_chatroomname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModChatRoomTopic::set_has_chatroomname() {
  _has_bits_[0] |= 0x00000001u;
}
void ModChatRoomTopic::clear_has_chatroomname() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModChatRoomTopic::clear_chatroomname() {
  if (chatroomname_ != NULL) chatroomname_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_chatroomname();
}
const ::micromsg::SKBuiltinString_t& ModChatRoomTopic::chatroomname() const {
  // @@protoc_insertion_point(field_get:micromsg.ModChatRoomTopic.ChatRoomName)
  return chatroomname_ != NULL ? *chatroomname_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* ModChatRoomTopic::mutable_chatroomname() {
  set_has_chatroomname();
  if (chatroomname_ == NULL) {
    chatroomname_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModChatRoomTopic.ChatRoomName)
  return chatroomname_;
}
::micromsg::SKBuiltinString_t* ModChatRoomTopic::release_chatroomname() {
  // @@protoc_insertion_point(field_release:micromsg.ModChatRoomTopic.ChatRoomName)
  clear_has_chatroomname();
  ::micromsg::SKBuiltinString_t* temp = chatroomname_;
  chatroomname_ = NULL;
  return temp;
}
void ModChatRoomTopic::set_allocated_chatroomname(::micromsg::SKBuiltinString_t* chatroomname) {
  delete chatroomname_;
  chatroomname_ = chatroomname;
  if (chatroomname) {
    set_has_chatroomname();
  } else {
    clear_has_chatroomname();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModChatRoomTopic.ChatRoomName)
}

// required .micromsg.SKBuiltinString_t ChatRoomTopic = 2;
bool ModChatRoomTopic::has_chatroomtopic() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ModChatRoomTopic::set_has_chatroomtopic() {
  _has_bits_[0] |= 0x00000002u;
}
void ModChatRoomTopic::clear_has_chatroomtopic() {
  _has_bits_[0] &= ~0x00000002u;
}
void ModChatRoomTopic::clear_chatroomtopic() {
  if (chatroomtopic_ != NULL) chatroomtopic_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_chatroomtopic();
}
const ::micromsg::SKBuiltinString_t& ModChatRoomTopic::chatroomtopic() const {
  // @@protoc_insertion_point(field_get:micromsg.ModChatRoomTopic.ChatRoomTopic)
  return chatroomtopic_ != NULL ? *chatroomtopic_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* ModChatRoomTopic::mutable_chatroomtopic() {
  set_has_chatroomtopic();
  if (chatroomtopic_ == NULL) {
    chatroomtopic_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModChatRoomTopic.ChatRoomTopic)
  return chatroomtopic_;
}
::micromsg::SKBuiltinString_t* ModChatRoomTopic::release_chatroomtopic() {
  // @@protoc_insertion_point(field_release:micromsg.ModChatRoomTopic.ChatRoomTopic)
  clear_has_chatroomtopic();
  ::micromsg::SKBuiltinString_t* temp = chatroomtopic_;
  chatroomtopic_ = NULL;
  return temp;
}
void ModChatRoomTopic::set_allocated_chatroomtopic(::micromsg::SKBuiltinString_t* chatroomtopic) {
  delete chatroomtopic_;
  chatroomtopic_ = chatroomtopic;
  if (chatroomtopic) {
    set_has_chatroomtopic();
  } else {
    clear_has_chatroomtopic();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModChatRoomTopic.ChatRoomTopic)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModChatRoomMemberDisplayName::kChatRoomNameFieldNumber;
const int ModChatRoomMemberDisplayName::kUserNameFieldNumber;
const int ModChatRoomMemberDisplayName::kDisplayNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModChatRoomMemberDisplayName::ModChatRoomMemberDisplayName()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ModChatRoomMemberDisplayName)
}
ModChatRoomMemberDisplayName::ModChatRoomMemberDisplayName(const ModChatRoomMemberDisplayName& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chatroomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chatroomname()) {
    chatroomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroomname_);
  }
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  displayname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_displayname()) {
    displayname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.displayname_);
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.ModChatRoomMemberDisplayName)
}

void ModChatRoomMemberDisplayName::SharedCtor() {
  _cached_size_ = 0;
  chatroomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  displayname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ModChatRoomMemberDisplayName::~ModChatRoomMemberDisplayName() {
  // @@protoc_insertion_point(destructor:micromsg.ModChatRoomMemberDisplayName)
  SharedDtor();
}

void ModChatRoomMemberDisplayName::SharedDtor() {
  chatroomname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  displayname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ModChatRoomMemberDisplayName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModChatRoomMemberDisplayName::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModChatRoomMemberDisplayName& ModChatRoomMemberDisplayName::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

ModChatRoomMemberDisplayName* ModChatRoomMemberDisplayName::New(::google::protobuf::Arena* arena) const {
  ModChatRoomMemberDisplayName* n = new ModChatRoomMemberDisplayName;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModChatRoomMemberDisplayName::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ModChatRoomMemberDisplayName)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_chatroomname()) {
      GOOGLE_DCHECK(!chatroomname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*chatroomname_.UnsafeRawStringPointer())->clear();
    }
    if (has_username()) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
    if (has_displayname()) {
      GOOGLE_DCHECK(!displayname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*displayname_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ModChatRoomMemberDisplayName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ModChatRoomMemberDisplayName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ChatRoomName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatroomname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chatroomname().data(), this->chatroomname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModChatRoomMemberDisplayName.ChatRoomName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string UserName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModChatRoomMemberDisplayName.UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string DisplayName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_displayname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->displayname().data(), this->displayname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModChatRoomMemberDisplayName.DisplayName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ModChatRoomMemberDisplayName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ModChatRoomMemberDisplayName)
  return false;
#undef DO_
}

void ModChatRoomMemberDisplayName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ModChatRoomMemberDisplayName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ChatRoomName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroomname().data(), this->chatroomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModChatRoomMemberDisplayName.ChatRoomName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->chatroomname(), output);
  }

  // optional string UserName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModChatRoomMemberDisplayName.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // optional string DisplayName = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->displayname().data(), this->displayname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModChatRoomMemberDisplayName.DisplayName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->displayname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ModChatRoomMemberDisplayName)
}

::google::protobuf::uint8* ModChatRoomMemberDisplayName::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ModChatRoomMemberDisplayName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ChatRoomName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroomname().data(), this->chatroomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModChatRoomMemberDisplayName.ChatRoomName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->chatroomname(), target);
  }

  // optional string UserName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModChatRoomMemberDisplayName.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // optional string DisplayName = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->displayname().data(), this->displayname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModChatRoomMemberDisplayName.DisplayName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->displayname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ModChatRoomMemberDisplayName)
  return target;
}

size_t ModChatRoomMemberDisplayName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ModChatRoomMemberDisplayName)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string ChatRoomName = 1;
    if (has_chatroomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chatroomname());
    }

    // optional string UserName = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string DisplayName = 3;
    if (has_displayname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->displayname());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModChatRoomMemberDisplayName::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ModChatRoomMemberDisplayName)
  GOOGLE_DCHECK_NE(&from, this);
  const ModChatRoomMemberDisplayName* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModChatRoomMemberDisplayName>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ModChatRoomMemberDisplayName)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ModChatRoomMemberDisplayName)
    MergeFrom(*source);
  }
}

void ModChatRoomMemberDisplayName::MergeFrom(const ModChatRoomMemberDisplayName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ModChatRoomMemberDisplayName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_chatroomname();
      chatroomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroomname_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_displayname();
      displayname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.displayname_);
    }
  }
}

void ModChatRoomMemberDisplayName::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ModChatRoomMemberDisplayName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModChatRoomMemberDisplayName::CopyFrom(const ModChatRoomMemberDisplayName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ModChatRoomMemberDisplayName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModChatRoomMemberDisplayName::IsInitialized() const {
  return true;
}

void ModChatRoomMemberDisplayName::Swap(ModChatRoomMemberDisplayName* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModChatRoomMemberDisplayName::InternalSwap(ModChatRoomMemberDisplayName* other) {
  chatroomname_.Swap(&other->chatroomname_);
  username_.Swap(&other->username_);
  displayname_.Swap(&other->displayname_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModChatRoomMemberDisplayName::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModChatRoomMemberDisplayName

// optional string ChatRoomName = 1;
bool ModChatRoomMemberDisplayName::has_chatroomname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModChatRoomMemberDisplayName::set_has_chatroomname() {
  _has_bits_[0] |= 0x00000001u;
}
void ModChatRoomMemberDisplayName::clear_has_chatroomname() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModChatRoomMemberDisplayName::clear_chatroomname() {
  chatroomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroomname();
}
const ::std::string& ModChatRoomMemberDisplayName::chatroomname() const {
  // @@protoc_insertion_point(field_get:micromsg.ModChatRoomMemberDisplayName.ChatRoomName)
  return chatroomname_.GetNoArena();
}
void ModChatRoomMemberDisplayName::set_chatroomname(const ::std::string& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModChatRoomMemberDisplayName.ChatRoomName)
}
#if LANG_CXX11
void ModChatRoomMemberDisplayName::set_chatroomname(::std::string&& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModChatRoomMemberDisplayName.ChatRoomName)
}
#endif
void ModChatRoomMemberDisplayName::set_chatroomname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModChatRoomMemberDisplayName.ChatRoomName)
}
void ModChatRoomMemberDisplayName::set_chatroomname(const char* value, size_t size) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModChatRoomMemberDisplayName.ChatRoomName)
}
::std::string* ModChatRoomMemberDisplayName::mutable_chatroomname() {
  set_has_chatroomname();
  // @@protoc_insertion_point(field_mutable:micromsg.ModChatRoomMemberDisplayName.ChatRoomName)
  return chatroomname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModChatRoomMemberDisplayName::release_chatroomname() {
  // @@protoc_insertion_point(field_release:micromsg.ModChatRoomMemberDisplayName.ChatRoomName)
  clear_has_chatroomname();
  return chatroomname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModChatRoomMemberDisplayName::set_allocated_chatroomname(::std::string* chatroomname) {
  if (chatroomname != NULL) {
    set_has_chatroomname();
  } else {
    clear_has_chatroomname();
  }
  chatroomname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroomname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModChatRoomMemberDisplayName.ChatRoomName)
}

// optional string UserName = 2;
bool ModChatRoomMemberDisplayName::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ModChatRoomMemberDisplayName::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
void ModChatRoomMemberDisplayName::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
void ModChatRoomMemberDisplayName::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& ModChatRoomMemberDisplayName::username() const {
  // @@protoc_insertion_point(field_get:micromsg.ModChatRoomMemberDisplayName.UserName)
  return username_.GetNoArena();
}
void ModChatRoomMemberDisplayName::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModChatRoomMemberDisplayName.UserName)
}
#if LANG_CXX11
void ModChatRoomMemberDisplayName::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModChatRoomMemberDisplayName.UserName)
}
#endif
void ModChatRoomMemberDisplayName::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModChatRoomMemberDisplayName.UserName)
}
void ModChatRoomMemberDisplayName::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModChatRoomMemberDisplayName.UserName)
}
::std::string* ModChatRoomMemberDisplayName::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.ModChatRoomMemberDisplayName.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModChatRoomMemberDisplayName::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.ModChatRoomMemberDisplayName.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModChatRoomMemberDisplayName::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModChatRoomMemberDisplayName.UserName)
}

// optional string DisplayName = 3;
bool ModChatRoomMemberDisplayName::has_displayname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ModChatRoomMemberDisplayName::set_has_displayname() {
  _has_bits_[0] |= 0x00000004u;
}
void ModChatRoomMemberDisplayName::clear_has_displayname() {
  _has_bits_[0] &= ~0x00000004u;
}
void ModChatRoomMemberDisplayName::clear_displayname() {
  displayname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_displayname();
}
const ::std::string& ModChatRoomMemberDisplayName::displayname() const {
  // @@protoc_insertion_point(field_get:micromsg.ModChatRoomMemberDisplayName.DisplayName)
  return displayname_.GetNoArena();
}
void ModChatRoomMemberDisplayName::set_displayname(const ::std::string& value) {
  set_has_displayname();
  displayname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModChatRoomMemberDisplayName.DisplayName)
}
#if LANG_CXX11
void ModChatRoomMemberDisplayName::set_displayname(::std::string&& value) {
  set_has_displayname();
  displayname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModChatRoomMemberDisplayName.DisplayName)
}
#endif
void ModChatRoomMemberDisplayName::set_displayname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_displayname();
  displayname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModChatRoomMemberDisplayName.DisplayName)
}
void ModChatRoomMemberDisplayName::set_displayname(const char* value, size_t size) {
  set_has_displayname();
  displayname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModChatRoomMemberDisplayName.DisplayName)
}
::std::string* ModChatRoomMemberDisplayName::mutable_displayname() {
  set_has_displayname();
  // @@protoc_insertion_point(field_mutable:micromsg.ModChatRoomMemberDisplayName.DisplayName)
  return displayname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModChatRoomMemberDisplayName::release_displayname() {
  // @@protoc_insertion_point(field_release:micromsg.ModChatRoomMemberDisplayName.DisplayName)
  clear_has_displayname();
  return displayname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModChatRoomMemberDisplayName::set_allocated_displayname(::std::string* displayname) {
  if (displayname != NULL) {
    set_has_displayname();
  } else {
    clear_has_displayname();
  }
  displayname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), displayname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModChatRoomMemberDisplayName.DisplayName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModChatRoomMemberFlag::kChatRoomNameFieldNumber;
const int ModChatRoomMemberFlag::kUserNameFieldNumber;
const int ModChatRoomMemberFlag::kFlagSwitchFieldNumber;
const int ModChatRoomMemberFlag::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModChatRoomMemberFlag::ModChatRoomMemberFlag()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ModChatRoomMemberFlag)
}
ModChatRoomMemberFlag::ModChatRoomMemberFlag(const ModChatRoomMemberFlag& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chatroomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chatroomname()) {
    chatroomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroomname_);
  }
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  ::memcpy(&flagswitch_, &from.flagswitch_,
    reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&flagswitch_) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:micromsg.ModChatRoomMemberFlag)
}

void ModChatRoomMemberFlag::SharedCtor() {
  _cached_size_ = 0;
  chatroomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&flagswitch_, 0, reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&flagswitch_) + sizeof(value_));
}

ModChatRoomMemberFlag::~ModChatRoomMemberFlag() {
  // @@protoc_insertion_point(destructor:micromsg.ModChatRoomMemberFlag)
  SharedDtor();
}

void ModChatRoomMemberFlag::SharedDtor() {
  chatroomname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ModChatRoomMemberFlag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModChatRoomMemberFlag::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModChatRoomMemberFlag& ModChatRoomMemberFlag::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

ModChatRoomMemberFlag* ModChatRoomMemberFlag::New(::google::protobuf::Arena* arena) const {
  ModChatRoomMemberFlag* n = new ModChatRoomMemberFlag;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModChatRoomMemberFlag::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ModChatRoomMemberFlag)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_chatroomname()) {
      GOOGLE_DCHECK(!chatroomname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*chatroomname_.UnsafeRawStringPointer())->clear();
    }
    if (has_username()) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&flagswitch_, 0, reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&flagswitch_) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ModChatRoomMemberFlag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ModChatRoomMemberFlag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ChatRoomName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatroomname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chatroomname().data(), this->chatroomname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModChatRoomMemberFlag.ChatRoomName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string UserName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModChatRoomMemberFlag.UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 FlagSwitch = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_flagswitch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flagswitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ModChatRoomMemberFlag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ModChatRoomMemberFlag)
  return false;
#undef DO_
}

void ModChatRoomMemberFlag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ModChatRoomMemberFlag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ChatRoomName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroomname().data(), this->chatroomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModChatRoomMemberFlag.ChatRoomName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->chatroomname(), output);
  }

  // optional string UserName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModChatRoomMemberFlag.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // required uint32 FlagSwitch = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flagswitch(), output);
  }

  // required uint32 Value = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ModChatRoomMemberFlag)
}

::google::protobuf::uint8* ModChatRoomMemberFlag::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ModChatRoomMemberFlag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ChatRoomName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroomname().data(), this->chatroomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModChatRoomMemberFlag.ChatRoomName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->chatroomname(), target);
  }

  // optional string UserName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModChatRoomMemberFlag.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // required uint32 FlagSwitch = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flagswitch(), target);
  }

  // required uint32 Value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ModChatRoomMemberFlag)
  return target;
}

size_t ModChatRoomMemberFlag::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.ModChatRoomMemberFlag)
  size_t total_size = 0;

  if (has_flagswitch()) {
    // required uint32 FlagSwitch = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flagswitch());
  }

  if (has_value()) {
    // required uint32 Value = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->value());
  }

  return total_size;
}
size_t ModChatRoomMemberFlag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ModChatRoomMemberFlag)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required uint32 FlagSwitch = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flagswitch());

    // required uint32 Value = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string ChatRoomName = 1;
    if (has_chatroomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chatroomname());
    }

    // optional string UserName = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModChatRoomMemberFlag::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ModChatRoomMemberFlag)
  GOOGLE_DCHECK_NE(&from, this);
  const ModChatRoomMemberFlag* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModChatRoomMemberFlag>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ModChatRoomMemberFlag)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ModChatRoomMemberFlag)
    MergeFrom(*source);
  }
}

void ModChatRoomMemberFlag::MergeFrom(const ModChatRoomMemberFlag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ModChatRoomMemberFlag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_chatroomname();
      chatroomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroomname_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000004u) {
      flagswitch_ = from.flagswitch_;
    }
    if (cached_has_bits & 0x00000008u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ModChatRoomMemberFlag::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ModChatRoomMemberFlag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModChatRoomMemberFlag::CopyFrom(const ModChatRoomMemberFlag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ModChatRoomMemberFlag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModChatRoomMemberFlag::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;
  return true;
}

void ModChatRoomMemberFlag::Swap(ModChatRoomMemberFlag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModChatRoomMemberFlag::InternalSwap(ModChatRoomMemberFlag* other) {
  chatroomname_.Swap(&other->chatroomname_);
  username_.Swap(&other->username_);
  std::swap(flagswitch_, other->flagswitch_);
  std::swap(value_, other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModChatRoomMemberFlag::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModChatRoomMemberFlag

// optional string ChatRoomName = 1;
bool ModChatRoomMemberFlag::has_chatroomname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModChatRoomMemberFlag::set_has_chatroomname() {
  _has_bits_[0] |= 0x00000001u;
}
void ModChatRoomMemberFlag::clear_has_chatroomname() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModChatRoomMemberFlag::clear_chatroomname() {
  chatroomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroomname();
}
const ::std::string& ModChatRoomMemberFlag::chatroomname() const {
  // @@protoc_insertion_point(field_get:micromsg.ModChatRoomMemberFlag.ChatRoomName)
  return chatroomname_.GetNoArena();
}
void ModChatRoomMemberFlag::set_chatroomname(const ::std::string& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModChatRoomMemberFlag.ChatRoomName)
}
#if LANG_CXX11
void ModChatRoomMemberFlag::set_chatroomname(::std::string&& value) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModChatRoomMemberFlag.ChatRoomName)
}
#endif
void ModChatRoomMemberFlag::set_chatroomname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModChatRoomMemberFlag.ChatRoomName)
}
void ModChatRoomMemberFlag::set_chatroomname(const char* value, size_t size) {
  set_has_chatroomname();
  chatroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModChatRoomMemberFlag.ChatRoomName)
}
::std::string* ModChatRoomMemberFlag::mutable_chatroomname() {
  set_has_chatroomname();
  // @@protoc_insertion_point(field_mutable:micromsg.ModChatRoomMemberFlag.ChatRoomName)
  return chatroomname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModChatRoomMemberFlag::release_chatroomname() {
  // @@protoc_insertion_point(field_release:micromsg.ModChatRoomMemberFlag.ChatRoomName)
  clear_has_chatroomname();
  return chatroomname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModChatRoomMemberFlag::set_allocated_chatroomname(::std::string* chatroomname) {
  if (chatroomname != NULL) {
    set_has_chatroomname();
  } else {
    clear_has_chatroomname();
  }
  chatroomname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroomname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModChatRoomMemberFlag.ChatRoomName)
}

// optional string UserName = 2;
bool ModChatRoomMemberFlag::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ModChatRoomMemberFlag::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
void ModChatRoomMemberFlag::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
void ModChatRoomMemberFlag::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& ModChatRoomMemberFlag::username() const {
  // @@protoc_insertion_point(field_get:micromsg.ModChatRoomMemberFlag.UserName)
  return username_.GetNoArena();
}
void ModChatRoomMemberFlag::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModChatRoomMemberFlag.UserName)
}
#if LANG_CXX11
void ModChatRoomMemberFlag::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModChatRoomMemberFlag.UserName)
}
#endif
void ModChatRoomMemberFlag::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModChatRoomMemberFlag.UserName)
}
void ModChatRoomMemberFlag::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModChatRoomMemberFlag.UserName)
}
::std::string* ModChatRoomMemberFlag::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.ModChatRoomMemberFlag.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModChatRoomMemberFlag::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.ModChatRoomMemberFlag.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModChatRoomMemberFlag::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModChatRoomMemberFlag.UserName)
}

// required uint32 FlagSwitch = 3;
bool ModChatRoomMemberFlag::has_flagswitch() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ModChatRoomMemberFlag::set_has_flagswitch() {
  _has_bits_[0] |= 0x00000004u;
}
void ModChatRoomMemberFlag::clear_has_flagswitch() {
  _has_bits_[0] &= ~0x00000004u;
}
void ModChatRoomMemberFlag::clear_flagswitch() {
  flagswitch_ = 0u;
  clear_has_flagswitch();
}
::google::protobuf::uint32 ModChatRoomMemberFlag::flagswitch() const {
  // @@protoc_insertion_point(field_get:micromsg.ModChatRoomMemberFlag.FlagSwitch)
  return flagswitch_;
}
void ModChatRoomMemberFlag::set_flagswitch(::google::protobuf::uint32 value) {
  set_has_flagswitch();
  flagswitch_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModChatRoomMemberFlag.FlagSwitch)
}

// required uint32 Value = 4;
bool ModChatRoomMemberFlag::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ModChatRoomMemberFlag::set_has_value() {
  _has_bits_[0] |= 0x00000008u;
}
void ModChatRoomMemberFlag::clear_has_value() {
  _has_bits_[0] &= ~0x00000008u;
}
void ModChatRoomMemberFlag::clear_value() {
  value_ = 0u;
  clear_has_value();
}
::google::protobuf::uint32 ModChatRoomMemberFlag::value() const {
  // @@protoc_insertion_point(field_get:micromsg.ModChatRoomMemberFlag.Value)
  return value_;
}
void ModChatRoomMemberFlag::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModChatRoomMemberFlag.Value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddMsg::kMsgIdFieldNumber;
const int AddMsg::kFromUserNameFieldNumber;
const int AddMsg::kToUserNameFieldNumber;
const int AddMsg::kMsgTypeFieldNumber;
const int AddMsg::kContentFieldNumber;
const int AddMsg::kStatusFieldNumber;
const int AddMsg::kImgStatusFieldNumber;
const int AddMsg::kImgBufFieldNumber;
const int AddMsg::kCreateTimeFieldNumber;
const int AddMsg::kMsgSourceFieldNumber;
const int AddMsg::kPushContentFieldNumber;
const int AddMsg::kNewMsgIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddMsg::AddMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.AddMsg)
}
AddMsg::AddMsg(const AddMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msgsource_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msgsource()) {
    msgsource_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msgsource_);
  }
  pushcontent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pushcontent()) {
    pushcontent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pushcontent_);
  }
  if (from.has_fromusername()) {
    fromusername_ = new ::micromsg::SKBuiltinString_t(*from.fromusername_);
  } else {
    fromusername_ = NULL;
  }
  if (from.has_tousername()) {
    tousername_ = new ::micromsg::SKBuiltinString_t(*from.tousername_);
  } else {
    tousername_ = NULL;
  }
  if (from.has_content()) {
    content_ = new ::micromsg::SKBuiltinString_t(*from.content_);
  } else {
    content_ = NULL;
  }
  if (from.has_imgbuf()) {
    imgbuf_ = new ::micromsg::SKBuiltinBuffer_t(*from.imgbuf_);
  } else {
    imgbuf_ = NULL;
  }
  ::memcpy(&msgid_, &from.msgid_,
    reinterpret_cast<char*>(&createtime_) -
    reinterpret_cast<char*>(&msgid_) + sizeof(createtime_));
  // @@protoc_insertion_point(copy_constructor:micromsg.AddMsg)
}

void AddMsg::SharedCtor() {
  _cached_size_ = 0;
  msgsource_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pushcontent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&fromusername_, 0, reinterpret_cast<char*>(&createtime_) -
    reinterpret_cast<char*>(&fromusername_) + sizeof(createtime_));
}

AddMsg::~AddMsg() {
  // @@protoc_insertion_point(destructor:micromsg.AddMsg)
  SharedDtor();
}

void AddMsg::SharedDtor() {
  msgsource_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pushcontent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete fromusername_;
  }
  if (this != internal_default_instance()) {
    delete tousername_;
  }
  if (this != internal_default_instance()) {
    delete content_;
  }
  if (this != internal_default_instance()) {
    delete imgbuf_;
  }
}

void AddMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddMsg::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddMsg& AddMsg::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

AddMsg* AddMsg::New(::google::protobuf::Arena* arena) const {
  AddMsg* n = new AddMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.AddMsg)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_msgsource()) {
      GOOGLE_DCHECK(!msgsource_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*msgsource_.UnsafeRawStringPointer())->clear();
    }
    if (has_pushcontent()) {
      GOOGLE_DCHECK(!pushcontent_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pushcontent_.UnsafeRawStringPointer())->clear();
    }
    if (has_fromusername()) {
      GOOGLE_DCHECK(fromusername_ != NULL);
      fromusername_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_tousername()) {
      GOOGLE_DCHECK(tousername_ != NULL);
      tousername_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_content()) {
      GOOGLE_DCHECK(content_ != NULL);
      content_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_imgbuf()) {
      GOOGLE_DCHECK(imgbuf_ != NULL);
      imgbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 192u) {
    ::memset(&msgid_, 0, reinterpret_cast<char*>(&msgtype_) -
      reinterpret_cast<char*>(&msgid_) + sizeof(msgtype_));
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ::memset(&status_, 0, reinterpret_cast<char*>(&createtime_) -
      reinterpret_cast<char*>(&status_) + sizeof(createtime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AddMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.AddMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 MsgId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_msgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t FromUserName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fromusername()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t ToUserName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tousername()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 MsgType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_msgtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t Content = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Status = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ImgStatus = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_imgstatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &imgstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t ImgBuf = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imgbuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 CreateTime = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_createtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string MsgSource = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgsource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msgsource().data(), this->msgsource().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.AddMsg.MsgSource");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PushContent = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pushcontent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pushcontent().data(), this->pushcontent().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.AddMsg.PushContent");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 NewMsgId = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_newmsgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &newmsgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.AddMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.AddMsg)
  return false;
#undef DO_
}

void AddMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.AddMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 MsgId = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msgid(), output);
  }

  // required .micromsg.SKBuiltinString_t FromUserName = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->fromusername_, output);
  }

  // required .micromsg.SKBuiltinString_t ToUserName = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->tousername_, output);
  }

  // required int32 MsgType = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->msgtype(), output);
  }

  // required .micromsg.SKBuiltinString_t Content = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->content_, output);
  }

  // required uint32 Status = 6;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->status(), output);
  }

  // required uint32 ImgStatus = 7;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->imgstatus(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t ImgBuf = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->imgbuf_, output);
  }

  // required uint32 CreateTime = 9;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->createtime(), output);
  }

  // optional string MsgSource = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgsource().data(), this->msgsource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AddMsg.MsgSource");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->msgsource(), output);
  }

  // optional string PushContent = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pushcontent().data(), this->pushcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AddMsg.PushContent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->pushcontent(), output);
  }

  // optional int64 NewMsgId = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->newmsgid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.AddMsg)
}

::google::protobuf::uint8* AddMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.AddMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 MsgId = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msgid(), target);
  }

  // required .micromsg.SKBuiltinString_t FromUserName = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->fromusername_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t ToUserName = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->tousername_, deterministic, target);
  }

  // required int32 MsgType = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->msgtype(), target);
  }

  // required .micromsg.SKBuiltinString_t Content = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->content_, deterministic, target);
  }

  // required uint32 Status = 6;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->status(), target);
  }

  // required uint32 ImgStatus = 7;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->imgstatus(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t ImgBuf = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->imgbuf_, deterministic, target);
  }

  // required uint32 CreateTime = 9;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->createtime(), target);
  }

  // optional string MsgSource = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgsource().data(), this->msgsource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AddMsg.MsgSource");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->msgsource(), target);
  }

  // optional string PushContent = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pushcontent().data(), this->pushcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AddMsg.PushContent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->pushcontent(), target);
  }

  // optional int64 NewMsgId = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->newmsgid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.AddMsg)
  return target;
}

size_t AddMsg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.AddMsg)
  size_t total_size = 0;

  if (has_fromusername()) {
    // required .micromsg.SKBuiltinString_t FromUserName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fromusername_);
  }

  if (has_tousername()) {
    // required .micromsg.SKBuiltinString_t ToUserName = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tousername_);
  }

  if (has_content()) {
    // required .micromsg.SKBuiltinString_t Content = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->content_);
  }

  if (has_imgbuf()) {
    // required .micromsg.SKBuiltinBuffer_t ImgBuf = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imgbuf_);
  }

  if (has_msgid()) {
    // required int32 MsgId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msgid());
  }

  if (has_msgtype()) {
    // required int32 MsgType = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msgtype());
  }

  if (has_status()) {
    // required uint32 Status = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  if (has_imgstatus()) {
    // required uint32 ImgStatus = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->imgstatus());
  }

  if (has_createtime()) {
    // required uint32 CreateTime = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->createtime());
  }

  return total_size;
}
size_t AddMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.AddMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000bfc) ^ 0x00000bfc) == 0) {  // All required fields are present.
    // required .micromsg.SKBuiltinString_t FromUserName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fromusername_);

    // required .micromsg.SKBuiltinString_t ToUserName = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tousername_);

    // required .micromsg.SKBuiltinString_t Content = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->content_);

    // required .micromsg.SKBuiltinBuffer_t ImgBuf = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imgbuf_);

    // required int32 MsgId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msgid());

    // required int32 MsgType = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msgtype());

    // required uint32 Status = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());

    // required uint32 ImgStatus = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->imgstatus());

    // required uint32 CreateTime = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->createtime());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string MsgSource = 10;
    if (has_msgsource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgsource());
    }

    // optional string PushContent = 11;
    if (has_pushcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pushcontent());
    }

  }
  // optional int64 NewMsgId = 12;
  if (has_newmsgid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->newmsgid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.AddMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const AddMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.AddMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.AddMsg)
    MergeFrom(*source);
  }
}

void AddMsg::MergeFrom(const AddMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.AddMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_msgsource();
      msgsource_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msgsource_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_pushcontent();
      pushcontent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pushcontent_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_fromusername()->::micromsg::SKBuiltinString_t::MergeFrom(from.fromusername());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_tousername()->::micromsg::SKBuiltinString_t::MergeFrom(from.tousername());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_content()->::micromsg::SKBuiltinString_t::MergeFrom(from.content());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_imgbuf()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.imgbuf());
    }
    if (cached_has_bits & 0x00000040u) {
      msgid_ = from.msgid_;
    }
    if (cached_has_bits & 0x00000080u) {
      msgtype_ = from.msgtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000200u) {
      imgstatus_ = from.imgstatus_;
    }
    if (cached_has_bits & 0x00000400u) {
      newmsgid_ = from.newmsgid_;
    }
    if (cached_has_bits & 0x00000800u) {
      createtime_ = from.createtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AddMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.AddMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddMsg::CopyFrom(const AddMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.AddMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000bfc) != 0x00000bfc) return false;
  if (has_imgbuf()) {
    if (!this->imgbuf_->IsInitialized()) return false;
  }
  return true;
}

void AddMsg::Swap(AddMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddMsg::InternalSwap(AddMsg* other) {
  msgsource_.Swap(&other->msgsource_);
  pushcontent_.Swap(&other->pushcontent_);
  std::swap(fromusername_, other->fromusername_);
  std::swap(tousername_, other->tousername_);
  std::swap(content_, other->content_);
  std::swap(imgbuf_, other->imgbuf_);
  std::swap(msgid_, other->msgid_);
  std::swap(msgtype_, other->msgtype_);
  std::swap(status_, other->status_);
  std::swap(imgstatus_, other->imgstatus_);
  std::swap(newmsgid_, other->newmsgid_);
  std::swap(createtime_, other->createtime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddMsg::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddMsg

// required int32 MsgId = 1;
bool AddMsg::has_msgid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void AddMsg::set_has_msgid() {
  _has_bits_[0] |= 0x00000040u;
}
void AddMsg::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000040u;
}
void AddMsg::clear_msgid() {
  msgid_ = 0;
  clear_has_msgid();
}
::google::protobuf::int32 AddMsg::msgid() const {
  // @@protoc_insertion_point(field_get:micromsg.AddMsg.MsgId)
  return msgid_;
}
void AddMsg::set_msgid(::google::protobuf::int32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AddMsg.MsgId)
}

// required .micromsg.SKBuiltinString_t FromUserName = 2;
bool AddMsg::has_fromusername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AddMsg::set_has_fromusername() {
  _has_bits_[0] |= 0x00000004u;
}
void AddMsg::clear_has_fromusername() {
  _has_bits_[0] &= ~0x00000004u;
}
void AddMsg::clear_fromusername() {
  if (fromusername_ != NULL) fromusername_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_fromusername();
}
const ::micromsg::SKBuiltinString_t& AddMsg::fromusername() const {
  // @@protoc_insertion_point(field_get:micromsg.AddMsg.FromUserName)
  return fromusername_ != NULL ? *fromusername_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* AddMsg::mutable_fromusername() {
  set_has_fromusername();
  if (fromusername_ == NULL) {
    fromusername_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AddMsg.FromUserName)
  return fromusername_;
}
::micromsg::SKBuiltinString_t* AddMsg::release_fromusername() {
  // @@protoc_insertion_point(field_release:micromsg.AddMsg.FromUserName)
  clear_has_fromusername();
  ::micromsg::SKBuiltinString_t* temp = fromusername_;
  fromusername_ = NULL;
  return temp;
}
void AddMsg::set_allocated_fromusername(::micromsg::SKBuiltinString_t* fromusername) {
  delete fromusername_;
  fromusername_ = fromusername;
  if (fromusername) {
    set_has_fromusername();
  } else {
    clear_has_fromusername();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AddMsg.FromUserName)
}

// required .micromsg.SKBuiltinString_t ToUserName = 3;
bool AddMsg::has_tousername() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AddMsg::set_has_tousername() {
  _has_bits_[0] |= 0x00000008u;
}
void AddMsg::clear_has_tousername() {
  _has_bits_[0] &= ~0x00000008u;
}
void AddMsg::clear_tousername() {
  if (tousername_ != NULL) tousername_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_tousername();
}
const ::micromsg::SKBuiltinString_t& AddMsg::tousername() const {
  // @@protoc_insertion_point(field_get:micromsg.AddMsg.ToUserName)
  return tousername_ != NULL ? *tousername_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* AddMsg::mutable_tousername() {
  set_has_tousername();
  if (tousername_ == NULL) {
    tousername_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AddMsg.ToUserName)
  return tousername_;
}
::micromsg::SKBuiltinString_t* AddMsg::release_tousername() {
  // @@protoc_insertion_point(field_release:micromsg.AddMsg.ToUserName)
  clear_has_tousername();
  ::micromsg::SKBuiltinString_t* temp = tousername_;
  tousername_ = NULL;
  return temp;
}
void AddMsg::set_allocated_tousername(::micromsg::SKBuiltinString_t* tousername) {
  delete tousername_;
  tousername_ = tousername;
  if (tousername) {
    set_has_tousername();
  } else {
    clear_has_tousername();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AddMsg.ToUserName)
}

// required int32 MsgType = 4;
bool AddMsg::has_msgtype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void AddMsg::set_has_msgtype() {
  _has_bits_[0] |= 0x00000080u;
}
void AddMsg::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000080u;
}
void AddMsg::clear_msgtype() {
  msgtype_ = 0;
  clear_has_msgtype();
}
::google::protobuf::int32 AddMsg::msgtype() const {
  // @@protoc_insertion_point(field_get:micromsg.AddMsg.MsgType)
  return msgtype_;
}
void AddMsg::set_msgtype(::google::protobuf::int32 value) {
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AddMsg.MsgType)
}

// required .micromsg.SKBuiltinString_t Content = 5;
bool AddMsg::has_content() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AddMsg::set_has_content() {
  _has_bits_[0] |= 0x00000010u;
}
void AddMsg::clear_has_content() {
  _has_bits_[0] &= ~0x00000010u;
}
void AddMsg::clear_content() {
  if (content_ != NULL) content_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_content();
}
const ::micromsg::SKBuiltinString_t& AddMsg::content() const {
  // @@protoc_insertion_point(field_get:micromsg.AddMsg.Content)
  return content_ != NULL ? *content_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* AddMsg::mutable_content() {
  set_has_content();
  if (content_ == NULL) {
    content_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AddMsg.Content)
  return content_;
}
::micromsg::SKBuiltinString_t* AddMsg::release_content() {
  // @@protoc_insertion_point(field_release:micromsg.AddMsg.Content)
  clear_has_content();
  ::micromsg::SKBuiltinString_t* temp = content_;
  content_ = NULL;
  return temp;
}
void AddMsg::set_allocated_content(::micromsg::SKBuiltinString_t* content) {
  delete content_;
  content_ = content;
  if (content) {
    set_has_content();
  } else {
    clear_has_content();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AddMsg.Content)
}

// required uint32 Status = 6;
bool AddMsg::has_status() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void AddMsg::set_has_status() {
  _has_bits_[0] |= 0x00000100u;
}
void AddMsg::clear_has_status() {
  _has_bits_[0] &= ~0x00000100u;
}
void AddMsg::clear_status() {
  status_ = 0u;
  clear_has_status();
}
::google::protobuf::uint32 AddMsg::status() const {
  // @@protoc_insertion_point(field_get:micromsg.AddMsg.Status)
  return status_;
}
void AddMsg::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AddMsg.Status)
}

// required uint32 ImgStatus = 7;
bool AddMsg::has_imgstatus() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void AddMsg::set_has_imgstatus() {
  _has_bits_[0] |= 0x00000200u;
}
void AddMsg::clear_has_imgstatus() {
  _has_bits_[0] &= ~0x00000200u;
}
void AddMsg::clear_imgstatus() {
  imgstatus_ = 0u;
  clear_has_imgstatus();
}
::google::protobuf::uint32 AddMsg::imgstatus() const {
  // @@protoc_insertion_point(field_get:micromsg.AddMsg.ImgStatus)
  return imgstatus_;
}
void AddMsg::set_imgstatus(::google::protobuf::uint32 value) {
  set_has_imgstatus();
  imgstatus_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AddMsg.ImgStatus)
}

// required .micromsg.SKBuiltinBuffer_t ImgBuf = 8;
bool AddMsg::has_imgbuf() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void AddMsg::set_has_imgbuf() {
  _has_bits_[0] |= 0x00000020u;
}
void AddMsg::clear_has_imgbuf() {
  _has_bits_[0] &= ~0x00000020u;
}
void AddMsg::clear_imgbuf() {
  if (imgbuf_ != NULL) imgbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_imgbuf();
}
const ::micromsg::SKBuiltinBuffer_t& AddMsg::imgbuf() const {
  // @@protoc_insertion_point(field_get:micromsg.AddMsg.ImgBuf)
  return imgbuf_ != NULL ? *imgbuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* AddMsg::mutable_imgbuf() {
  set_has_imgbuf();
  if (imgbuf_ == NULL) {
    imgbuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AddMsg.ImgBuf)
  return imgbuf_;
}
::micromsg::SKBuiltinBuffer_t* AddMsg::release_imgbuf() {
  // @@protoc_insertion_point(field_release:micromsg.AddMsg.ImgBuf)
  clear_has_imgbuf();
  ::micromsg::SKBuiltinBuffer_t* temp = imgbuf_;
  imgbuf_ = NULL;
  return temp;
}
void AddMsg::set_allocated_imgbuf(::micromsg::SKBuiltinBuffer_t* imgbuf) {
  delete imgbuf_;
  imgbuf_ = imgbuf;
  if (imgbuf) {
    set_has_imgbuf();
  } else {
    clear_has_imgbuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AddMsg.ImgBuf)
}

// required uint32 CreateTime = 9;
bool AddMsg::has_createtime() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void AddMsg::set_has_createtime() {
  _has_bits_[0] |= 0x00000800u;
}
void AddMsg::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000800u;
}
void AddMsg::clear_createtime() {
  createtime_ = 0u;
  clear_has_createtime();
}
::google::protobuf::uint32 AddMsg::createtime() const {
  // @@protoc_insertion_point(field_get:micromsg.AddMsg.CreateTime)
  return createtime_;
}
void AddMsg::set_createtime(::google::protobuf::uint32 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AddMsg.CreateTime)
}

// optional string MsgSource = 10;
bool AddMsg::has_msgsource() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AddMsg::set_has_msgsource() {
  _has_bits_[0] |= 0x00000001u;
}
void AddMsg::clear_has_msgsource() {
  _has_bits_[0] &= ~0x00000001u;
}
void AddMsg::clear_msgsource() {
  msgsource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msgsource();
}
const ::std::string& AddMsg::msgsource() const {
  // @@protoc_insertion_point(field_get:micromsg.AddMsg.MsgSource)
  return msgsource_.GetNoArena();
}
void AddMsg::set_msgsource(const ::std::string& value) {
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AddMsg.MsgSource)
}
#if LANG_CXX11
void AddMsg::set_msgsource(::std::string&& value) {
  set_has_msgsource();
  msgsource_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AddMsg.MsgSource)
}
#endif
void AddMsg::set_msgsource(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AddMsg.MsgSource)
}
void AddMsg::set_msgsource(const char* value, size_t size) {
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AddMsg.MsgSource)
}
::std::string* AddMsg::mutable_msgsource() {
  set_has_msgsource();
  // @@protoc_insertion_point(field_mutable:micromsg.AddMsg.MsgSource)
  return msgsource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddMsg::release_msgsource() {
  // @@protoc_insertion_point(field_release:micromsg.AddMsg.MsgSource)
  clear_has_msgsource();
  return msgsource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddMsg::set_allocated_msgsource(::std::string* msgsource) {
  if (msgsource != NULL) {
    set_has_msgsource();
  } else {
    clear_has_msgsource();
  }
  msgsource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgsource);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AddMsg.MsgSource)
}

// optional string PushContent = 11;
bool AddMsg::has_pushcontent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AddMsg::set_has_pushcontent() {
  _has_bits_[0] |= 0x00000002u;
}
void AddMsg::clear_has_pushcontent() {
  _has_bits_[0] &= ~0x00000002u;
}
void AddMsg::clear_pushcontent() {
  pushcontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pushcontent();
}
const ::std::string& AddMsg::pushcontent() const {
  // @@protoc_insertion_point(field_get:micromsg.AddMsg.PushContent)
  return pushcontent_.GetNoArena();
}
void AddMsg::set_pushcontent(const ::std::string& value) {
  set_has_pushcontent();
  pushcontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AddMsg.PushContent)
}
#if LANG_CXX11
void AddMsg::set_pushcontent(::std::string&& value) {
  set_has_pushcontent();
  pushcontent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AddMsg.PushContent)
}
#endif
void AddMsg::set_pushcontent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pushcontent();
  pushcontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AddMsg.PushContent)
}
void AddMsg::set_pushcontent(const char* value, size_t size) {
  set_has_pushcontent();
  pushcontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AddMsg.PushContent)
}
::std::string* AddMsg::mutable_pushcontent() {
  set_has_pushcontent();
  // @@protoc_insertion_point(field_mutable:micromsg.AddMsg.PushContent)
  return pushcontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddMsg::release_pushcontent() {
  // @@protoc_insertion_point(field_release:micromsg.AddMsg.PushContent)
  clear_has_pushcontent();
  return pushcontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddMsg::set_allocated_pushcontent(::std::string* pushcontent) {
  if (pushcontent != NULL) {
    set_has_pushcontent();
  } else {
    clear_has_pushcontent();
  }
  pushcontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pushcontent);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AddMsg.PushContent)
}

// optional int64 NewMsgId = 12;
bool AddMsg::has_newmsgid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void AddMsg::set_has_newmsgid() {
  _has_bits_[0] |= 0x00000400u;
}
void AddMsg::clear_has_newmsgid() {
  _has_bits_[0] &= ~0x00000400u;
}
void AddMsg::clear_newmsgid() {
  newmsgid_ = GOOGLE_LONGLONG(0);
  clear_has_newmsgid();
}
::google::protobuf::int64 AddMsg::newmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.AddMsg.NewMsgId)
  return newmsgid_;
}
void AddMsg::set_newmsgid(::google::protobuf::int64 value) {
  set_has_newmsgid();
  newmsgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AddMsg.NewMsgId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModMsgStatus::kMsgIdFieldNumber;
const int ModMsgStatus::kFromUserNameFieldNumber;
const int ModMsgStatus::kToUserNameFieldNumber;
const int ModMsgStatus::kStatusFieldNumber;
const int ModMsgStatus::kNewMsgIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModMsgStatus::ModMsgStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ModMsgStatus)
}
ModMsgStatus::ModMsgStatus(const ModMsgStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fromusername()) {
    fromusername_ = new ::micromsg::SKBuiltinString_t(*from.fromusername_);
  } else {
    fromusername_ = NULL;
  }
  if (from.has_tousername()) {
    tousername_ = new ::micromsg::SKBuiltinString_t(*from.tousername_);
  } else {
    tousername_ = NULL;
  }
  ::memcpy(&msgid_, &from.msgid_,
    reinterpret_cast<char*>(&newmsgid_) -
    reinterpret_cast<char*>(&msgid_) + sizeof(newmsgid_));
  // @@protoc_insertion_point(copy_constructor:micromsg.ModMsgStatus)
}

void ModMsgStatus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&fromusername_, 0, reinterpret_cast<char*>(&newmsgid_) -
    reinterpret_cast<char*>(&fromusername_) + sizeof(newmsgid_));
}

ModMsgStatus::~ModMsgStatus() {
  // @@protoc_insertion_point(destructor:micromsg.ModMsgStatus)
  SharedDtor();
}

void ModMsgStatus::SharedDtor() {
  if (this != internal_default_instance()) {
    delete fromusername_;
  }
  if (this != internal_default_instance()) {
    delete tousername_;
  }
}

void ModMsgStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModMsgStatus::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModMsgStatus& ModMsgStatus::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

ModMsgStatus* ModMsgStatus::New(::google::protobuf::Arena* arena) const {
  ModMsgStatus* n = new ModMsgStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModMsgStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ModMsgStatus)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_fromusername()) {
      GOOGLE_DCHECK(fromusername_ != NULL);
      fromusername_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_tousername()) {
      GOOGLE_DCHECK(tousername_ != NULL);
      tousername_->::micromsg::SKBuiltinString_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&msgid_, 0, reinterpret_cast<char*>(&newmsgid_) -
      reinterpret_cast<char*>(&msgid_) + sizeof(newmsgid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ModMsgStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ModMsgStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 MsgId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_msgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t FromUserName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fromusername()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t ToUserName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tousername()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 NewMsgId = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_newmsgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &newmsgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ModMsgStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ModMsgStatus)
  return false;
#undef DO_
}

void ModMsgStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ModMsgStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 MsgId = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msgid(), output);
  }

  // required .micromsg.SKBuiltinString_t FromUserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->fromusername_, output);
  }

  // required .micromsg.SKBuiltinString_t ToUserName = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->tousername_, output);
  }

  // required uint32 Status = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->status(), output);
  }

  // optional int64 NewMsgId = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->newmsgid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ModMsgStatus)
}

::google::protobuf::uint8* ModMsgStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ModMsgStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 MsgId = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msgid(), target);
  }

  // required .micromsg.SKBuiltinString_t FromUserName = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->fromusername_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t ToUserName = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->tousername_, deterministic, target);
  }

  // required uint32 Status = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->status(), target);
  }

  // optional int64 NewMsgId = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->newmsgid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ModMsgStatus)
  return target;
}

size_t ModMsgStatus::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.ModMsgStatus)
  size_t total_size = 0;

  if (has_fromusername()) {
    // required .micromsg.SKBuiltinString_t FromUserName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fromusername_);
  }

  if (has_tousername()) {
    // required .micromsg.SKBuiltinString_t ToUserName = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tousername_);
  }

  if (has_msgid()) {
    // required int32 MsgId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msgid());
  }

  if (has_status()) {
    // required uint32 Status = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  return total_size;
}
size_t ModMsgStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ModMsgStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .micromsg.SKBuiltinString_t FromUserName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fromusername_);

    // required .micromsg.SKBuiltinString_t ToUserName = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tousername_);

    // required int32 MsgId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msgid());

    // required uint32 Status = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int64 NewMsgId = 5;
  if (has_newmsgid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->newmsgid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModMsgStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ModMsgStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ModMsgStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModMsgStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ModMsgStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ModMsgStatus)
    MergeFrom(*source);
  }
}

void ModMsgStatus::MergeFrom(const ModMsgStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ModMsgStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_fromusername()->::micromsg::SKBuiltinString_t::MergeFrom(from.fromusername());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_tousername()->::micromsg::SKBuiltinString_t::MergeFrom(from.tousername());
    }
    if (cached_has_bits & 0x00000004u) {
      msgid_ = from.msgid_;
    }
    if (cached_has_bits & 0x00000008u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000010u) {
      newmsgid_ = from.newmsgid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ModMsgStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ModMsgStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModMsgStatus::CopyFrom(const ModMsgStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ModMsgStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModMsgStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void ModMsgStatus::Swap(ModMsgStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModMsgStatus::InternalSwap(ModMsgStatus* other) {
  std::swap(fromusername_, other->fromusername_);
  std::swap(tousername_, other->tousername_);
  std::swap(msgid_, other->msgid_);
  std::swap(status_, other->status_);
  std::swap(newmsgid_, other->newmsgid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModMsgStatus::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModMsgStatus

// required int32 MsgId = 1;
bool ModMsgStatus::has_msgid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ModMsgStatus::set_has_msgid() {
  _has_bits_[0] |= 0x00000004u;
}
void ModMsgStatus::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000004u;
}
void ModMsgStatus::clear_msgid() {
  msgid_ = 0;
  clear_has_msgid();
}
::google::protobuf::int32 ModMsgStatus::msgid() const {
  // @@protoc_insertion_point(field_get:micromsg.ModMsgStatus.MsgId)
  return msgid_;
}
void ModMsgStatus::set_msgid(::google::protobuf::int32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModMsgStatus.MsgId)
}

// required .micromsg.SKBuiltinString_t FromUserName = 2;
bool ModMsgStatus::has_fromusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModMsgStatus::set_has_fromusername() {
  _has_bits_[0] |= 0x00000001u;
}
void ModMsgStatus::clear_has_fromusername() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModMsgStatus::clear_fromusername() {
  if (fromusername_ != NULL) fromusername_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_fromusername();
}
const ::micromsg::SKBuiltinString_t& ModMsgStatus::fromusername() const {
  // @@protoc_insertion_point(field_get:micromsg.ModMsgStatus.FromUserName)
  return fromusername_ != NULL ? *fromusername_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* ModMsgStatus::mutable_fromusername() {
  set_has_fromusername();
  if (fromusername_ == NULL) {
    fromusername_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModMsgStatus.FromUserName)
  return fromusername_;
}
::micromsg::SKBuiltinString_t* ModMsgStatus::release_fromusername() {
  // @@protoc_insertion_point(field_release:micromsg.ModMsgStatus.FromUserName)
  clear_has_fromusername();
  ::micromsg::SKBuiltinString_t* temp = fromusername_;
  fromusername_ = NULL;
  return temp;
}
void ModMsgStatus::set_allocated_fromusername(::micromsg::SKBuiltinString_t* fromusername) {
  delete fromusername_;
  fromusername_ = fromusername;
  if (fromusername) {
    set_has_fromusername();
  } else {
    clear_has_fromusername();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModMsgStatus.FromUserName)
}

// required .micromsg.SKBuiltinString_t ToUserName = 3;
bool ModMsgStatus::has_tousername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ModMsgStatus::set_has_tousername() {
  _has_bits_[0] |= 0x00000002u;
}
void ModMsgStatus::clear_has_tousername() {
  _has_bits_[0] &= ~0x00000002u;
}
void ModMsgStatus::clear_tousername() {
  if (tousername_ != NULL) tousername_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_tousername();
}
const ::micromsg::SKBuiltinString_t& ModMsgStatus::tousername() const {
  // @@protoc_insertion_point(field_get:micromsg.ModMsgStatus.ToUserName)
  return tousername_ != NULL ? *tousername_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* ModMsgStatus::mutable_tousername() {
  set_has_tousername();
  if (tousername_ == NULL) {
    tousername_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModMsgStatus.ToUserName)
  return tousername_;
}
::micromsg::SKBuiltinString_t* ModMsgStatus::release_tousername() {
  // @@protoc_insertion_point(field_release:micromsg.ModMsgStatus.ToUserName)
  clear_has_tousername();
  ::micromsg::SKBuiltinString_t* temp = tousername_;
  tousername_ = NULL;
  return temp;
}
void ModMsgStatus::set_allocated_tousername(::micromsg::SKBuiltinString_t* tousername) {
  delete tousername_;
  tousername_ = tousername;
  if (tousername) {
    set_has_tousername();
  } else {
    clear_has_tousername();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModMsgStatus.ToUserName)
}

// required uint32 Status = 4;
bool ModMsgStatus::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ModMsgStatus::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
void ModMsgStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
void ModMsgStatus::clear_status() {
  status_ = 0u;
  clear_has_status();
}
::google::protobuf::uint32 ModMsgStatus::status() const {
  // @@protoc_insertion_point(field_get:micromsg.ModMsgStatus.Status)
  return status_;
}
void ModMsgStatus::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModMsgStatus.Status)
}

// optional int64 NewMsgId = 5;
bool ModMsgStatus::has_newmsgid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ModMsgStatus::set_has_newmsgid() {
  _has_bits_[0] |= 0x00000010u;
}
void ModMsgStatus::clear_has_newmsgid() {
  _has_bits_[0] &= ~0x00000010u;
}
void ModMsgStatus::clear_newmsgid() {
  newmsgid_ = GOOGLE_LONGLONG(0);
  clear_has_newmsgid();
}
::google::protobuf::int64 ModMsgStatus::newmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.ModMsgStatus.NewMsgId)
  return newmsgid_;
}
void ModMsgStatus::set_newmsgid(::google::protobuf::int64 value) {
  set_has_newmsgid();
  newmsgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModMsgStatus.NewMsgId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelContact::kUserNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelContact::DelContact()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.DelContact)
}
DelContact::DelContact(const DelContact& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_username()) {
    username_ = new ::micromsg::SKBuiltinString_t(*from.username_);
  } else {
    username_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.DelContact)
}

void DelContact::SharedCtor() {
  _cached_size_ = 0;
  username_ = NULL;
}

DelContact::~DelContact() {
  // @@protoc_insertion_point(destructor:micromsg.DelContact)
  SharedDtor();
}

void DelContact::SharedDtor() {
  if (this != internal_default_instance()) {
    delete username_;
  }
}

void DelContact::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelContact::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DelContact& DelContact::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

DelContact* DelContact::New(::google::protobuf::Arena* arena) const {
  DelContact* n = new DelContact;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DelContact::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.DelContact)
  if (has_username()) {
    GOOGLE_DCHECK(username_ != NULL);
    username_->::micromsg::SKBuiltinString_t::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DelContact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.DelContact)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.SKBuiltinString_t UserName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_username()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.DelContact)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.DelContact)
  return false;
#undef DO_
}

void DelContact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.DelContact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t UserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->username_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.DelContact)
}

::google::protobuf::uint8* DelContact::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.DelContact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t UserName = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->username_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.DelContact)
  return target;
}

size_t DelContact::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.DelContact)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.SKBuiltinString_t UserName = 1;
  if (has_username()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->username_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelContact::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.DelContact)
  GOOGLE_DCHECK_NE(&from, this);
  const DelContact* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DelContact>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.DelContact)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.DelContact)
    MergeFrom(*source);
  }
}

void DelContact::MergeFrom(const DelContact& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.DelContact)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_username()) {
    mutable_username()->::micromsg::SKBuiltinString_t::MergeFrom(from.username());
  }
}

void DelContact::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.DelContact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelContact::CopyFrom(const DelContact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.DelContact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelContact::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void DelContact::Swap(DelContact* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelContact::InternalSwap(DelContact* other) {
  std::swap(username_, other->username_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DelContact::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DelContact

// required .micromsg.SKBuiltinString_t UserName = 1;
bool DelContact::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DelContact::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void DelContact::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void DelContact::clear_username() {
  if (username_ != NULL) username_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_username();
}
const ::micromsg::SKBuiltinString_t& DelContact::username() const {
  // @@protoc_insertion_point(field_get:micromsg.DelContact.UserName)
  return username_ != NULL ? *username_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* DelContact::mutable_username() {
  set_has_username();
  if (username_ == NULL) {
    username_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DelContact.UserName)
  return username_;
}
::micromsg::SKBuiltinString_t* DelContact::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.DelContact.UserName)
  clear_has_username();
  ::micromsg::SKBuiltinString_t* temp = username_;
  username_ = NULL;
  return temp;
}
void DelContact::set_allocated_username(::micromsg::SKBuiltinString_t* username) {
  delete username_;
  username_ = username;
  if (username) {
    set_has_username();
  } else {
    clear_has_username();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DelContact.UserName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelChatContact::kUserNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelChatContact::DelChatContact()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.DelChatContact)
}
DelChatContact::DelChatContact(const DelChatContact& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_username()) {
    username_ = new ::micromsg::SKBuiltinString_t(*from.username_);
  } else {
    username_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.DelChatContact)
}

void DelChatContact::SharedCtor() {
  _cached_size_ = 0;
  username_ = NULL;
}

DelChatContact::~DelChatContact() {
  // @@protoc_insertion_point(destructor:micromsg.DelChatContact)
  SharedDtor();
}

void DelChatContact::SharedDtor() {
  if (this != internal_default_instance()) {
    delete username_;
  }
}

void DelChatContact::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelChatContact::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DelChatContact& DelChatContact::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

DelChatContact* DelChatContact::New(::google::protobuf::Arena* arena) const {
  DelChatContact* n = new DelChatContact;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DelChatContact::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.DelChatContact)
  if (has_username()) {
    GOOGLE_DCHECK(username_ != NULL);
    username_->::micromsg::SKBuiltinString_t::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DelChatContact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.DelChatContact)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.SKBuiltinString_t UserName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_username()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.DelChatContact)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.DelChatContact)
  return false;
#undef DO_
}

void DelChatContact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.DelChatContact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t UserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->username_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.DelChatContact)
}

::google::protobuf::uint8* DelChatContact::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.DelChatContact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t UserName = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->username_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.DelChatContact)
  return target;
}

size_t DelChatContact::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.DelChatContact)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.SKBuiltinString_t UserName = 1;
  if (has_username()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->username_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelChatContact::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.DelChatContact)
  GOOGLE_DCHECK_NE(&from, this);
  const DelChatContact* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DelChatContact>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.DelChatContact)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.DelChatContact)
    MergeFrom(*source);
  }
}

void DelChatContact::MergeFrom(const DelChatContact& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.DelChatContact)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_username()) {
    mutable_username()->::micromsg::SKBuiltinString_t::MergeFrom(from.username());
  }
}

void DelChatContact::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.DelChatContact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelChatContact::CopyFrom(const DelChatContact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.DelChatContact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelChatContact::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void DelChatContact::Swap(DelChatContact* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelChatContact::InternalSwap(DelChatContact* other) {
  std::swap(username_, other->username_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DelChatContact::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DelChatContact

// required .micromsg.SKBuiltinString_t UserName = 1;
bool DelChatContact::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DelChatContact::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void DelChatContact::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void DelChatContact::clear_username() {
  if (username_ != NULL) username_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_username();
}
const ::micromsg::SKBuiltinString_t& DelChatContact::username() const {
  // @@protoc_insertion_point(field_get:micromsg.DelChatContact.UserName)
  return username_ != NULL ? *username_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* DelChatContact::mutable_username() {
  set_has_username();
  if (username_ == NULL) {
    username_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DelChatContact.UserName)
  return username_;
}
::micromsg::SKBuiltinString_t* DelChatContact::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.DelChatContact.UserName)
  clear_has_username();
  ::micromsg::SKBuiltinString_t* temp = username_;
  username_ = NULL;
  return temp;
}
void DelChatContact::set_allocated_username(::micromsg::SKBuiltinString_t* username) {
  delete username_;
  username_ = username;
  if (username) {
    set_has_username();
  } else {
    clear_has_username();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DelChatContact.UserName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelContactMsg::kUserNameFieldNumber;
const int DelContactMsg::kMaxMsgIdFieldNumber;
const int DelContactMsg::kNewMsgIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelContactMsg::DelContactMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.DelContactMsg)
}
DelContactMsg::DelContactMsg(const DelContactMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_username()) {
    username_ = new ::micromsg::SKBuiltinString_t(*from.username_);
  } else {
    username_ = NULL;
  }
  ::memcpy(&newmsgid_, &from.newmsgid_,
    reinterpret_cast<char*>(&maxmsgid_) -
    reinterpret_cast<char*>(&newmsgid_) + sizeof(maxmsgid_));
  // @@protoc_insertion_point(copy_constructor:micromsg.DelContactMsg)
}

void DelContactMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&username_, 0, reinterpret_cast<char*>(&maxmsgid_) -
    reinterpret_cast<char*>(&username_) + sizeof(maxmsgid_));
}

DelContactMsg::~DelContactMsg() {
  // @@protoc_insertion_point(destructor:micromsg.DelContactMsg)
  SharedDtor();
}

void DelContactMsg::SharedDtor() {
  if (this != internal_default_instance()) {
    delete username_;
  }
}

void DelContactMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelContactMsg::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DelContactMsg& DelContactMsg::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

DelContactMsg* DelContactMsg::New(::google::protobuf::Arena* arena) const {
  DelContactMsg* n = new DelContactMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DelContactMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.DelContactMsg)
  if (has_username()) {
    GOOGLE_DCHECK(username_ != NULL);
    username_->::micromsg::SKBuiltinString_t::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&newmsgid_, 0, reinterpret_cast<char*>(&maxmsgid_) -
      reinterpret_cast<char*>(&newmsgid_) + sizeof(maxmsgid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DelContactMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.DelContactMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.SKBuiltinString_t UserName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_username()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 MaxMsgId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_maxmsgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxmsgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 NewMsgId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_newmsgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &newmsgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.DelContactMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.DelContactMsg)
  return false;
#undef DO_
}

void DelContactMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.DelContactMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t UserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->username_, output);
  }

  // required int32 MaxMsgId = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maxmsgid(), output);
  }

  // optional int64 NewMsgId = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->newmsgid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.DelContactMsg)
}

::google::protobuf::uint8* DelContactMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.DelContactMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t UserName = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->username_, deterministic, target);
  }

  // required int32 MaxMsgId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->maxmsgid(), target);
  }

  // optional int64 NewMsgId = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->newmsgid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.DelContactMsg)
  return target;
}

size_t DelContactMsg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.DelContactMsg)
  size_t total_size = 0;

  if (has_username()) {
    // required .micromsg.SKBuiltinString_t UserName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->username_);
  }

  if (has_maxmsgid()) {
    // required int32 MaxMsgId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maxmsgid());
  }

  return total_size;
}
size_t DelContactMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.DelContactMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required .micromsg.SKBuiltinString_t UserName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->username_);

    // required int32 MaxMsgId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maxmsgid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int64 NewMsgId = 3;
  if (has_newmsgid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->newmsgid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelContactMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.DelContactMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const DelContactMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DelContactMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.DelContactMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.DelContactMsg)
    MergeFrom(*source);
  }
}

void DelContactMsg::MergeFrom(const DelContactMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.DelContactMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_username()->::micromsg::SKBuiltinString_t::MergeFrom(from.username());
    }
    if (cached_has_bits & 0x00000002u) {
      newmsgid_ = from.newmsgid_;
    }
    if (cached_has_bits & 0x00000004u) {
      maxmsgid_ = from.maxmsgid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DelContactMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.DelContactMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelContactMsg::CopyFrom(const DelContactMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.DelContactMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelContactMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  return true;
}

void DelContactMsg::Swap(DelContactMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelContactMsg::InternalSwap(DelContactMsg* other) {
  std::swap(username_, other->username_);
  std::swap(newmsgid_, other->newmsgid_);
  std::swap(maxmsgid_, other->maxmsgid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DelContactMsg::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DelContactMsg

// required .micromsg.SKBuiltinString_t UserName = 1;
bool DelContactMsg::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DelContactMsg::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void DelContactMsg::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void DelContactMsg::clear_username() {
  if (username_ != NULL) username_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_username();
}
const ::micromsg::SKBuiltinString_t& DelContactMsg::username() const {
  // @@protoc_insertion_point(field_get:micromsg.DelContactMsg.UserName)
  return username_ != NULL ? *username_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* DelContactMsg::mutable_username() {
  set_has_username();
  if (username_ == NULL) {
    username_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DelContactMsg.UserName)
  return username_;
}
::micromsg::SKBuiltinString_t* DelContactMsg::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.DelContactMsg.UserName)
  clear_has_username();
  ::micromsg::SKBuiltinString_t* temp = username_;
  username_ = NULL;
  return temp;
}
void DelContactMsg::set_allocated_username(::micromsg::SKBuiltinString_t* username) {
  delete username_;
  username_ = username;
  if (username) {
    set_has_username();
  } else {
    clear_has_username();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DelContactMsg.UserName)
}

// required int32 MaxMsgId = 2;
bool DelContactMsg::has_maxmsgid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DelContactMsg::set_has_maxmsgid() {
  _has_bits_[0] |= 0x00000004u;
}
void DelContactMsg::clear_has_maxmsgid() {
  _has_bits_[0] &= ~0x00000004u;
}
void DelContactMsg::clear_maxmsgid() {
  maxmsgid_ = 0;
  clear_has_maxmsgid();
}
::google::protobuf::int32 DelContactMsg::maxmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.DelContactMsg.MaxMsgId)
  return maxmsgid_;
}
void DelContactMsg::set_maxmsgid(::google::protobuf::int32 value) {
  set_has_maxmsgid();
  maxmsgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DelContactMsg.MaxMsgId)
}

// optional int64 NewMsgId = 3;
bool DelContactMsg::has_newmsgid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DelContactMsg::set_has_newmsgid() {
  _has_bits_[0] |= 0x00000002u;
}
void DelContactMsg::clear_has_newmsgid() {
  _has_bits_[0] &= ~0x00000002u;
}
void DelContactMsg::clear_newmsgid() {
  newmsgid_ = GOOGLE_LONGLONG(0);
  clear_has_newmsgid();
}
::google::protobuf::int64 DelContactMsg::newmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.DelContactMsg.NewMsgId)
  return newmsgid_;
}
void DelContactMsg::set_newmsgid(::google::protobuf::int64 value) {
  set_has_newmsgid();
  newmsgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DelContactMsg.NewMsgId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelMsg::kUserNameFieldNumber;
const int DelMsg::kCountFieldNumber;
const int DelMsg::kMsgIdListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelMsg::DelMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.DelMsg)
}
DelMsg::DelMsg(const DelMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      msgidlist_(from.msgidlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_username()) {
    username_ = new ::micromsg::SKBuiltinString_t(*from.username_);
  } else {
    username_ = NULL;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:micromsg.DelMsg)
}

void DelMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&username_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&username_) + sizeof(count_));
}

DelMsg::~DelMsg() {
  // @@protoc_insertion_point(destructor:micromsg.DelMsg)
  SharedDtor();
}

void DelMsg::SharedDtor() {
  if (this != internal_default_instance()) {
    delete username_;
  }
}

void DelMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelMsg::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DelMsg& DelMsg::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

DelMsg* DelMsg::New(::google::protobuf::Arena* arena) const {
  DelMsg* n = new DelMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DelMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.DelMsg)
  msgidlist_.Clear();
  if (has_username()) {
    GOOGLE_DCHECK(username_ != NULL);
    username_->::micromsg::SKBuiltinString_t::Clear();
  }
  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DelMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.DelMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.SKBuiltinString_t UserName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_username()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 MsgIdList = 3 [packed = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_msgidlist())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_msgidlist())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.DelMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.DelMsg)
  return false;
#undef DO_
}

void DelMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.DelMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t UserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->username_, output);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // repeated int32 MsgIdList = 3 [packed = true];
  if (this->msgidlist_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_msgidlist_cached_byte_size_);
  }
  for (int i = 0, n = this->msgidlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->msgidlist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.DelMsg)
}

::google::protobuf::uint8* DelMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.DelMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t UserName = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->username_, deterministic, target);
  }

  // required uint32 Count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // repeated int32 MsgIdList = 3 [packed = true];
  if (this->msgidlist_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _msgidlist_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->msgidlist_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.DelMsg)
  return target;
}

size_t DelMsg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.DelMsg)
  size_t total_size = 0;

  if (has_username()) {
    // required .micromsg.SKBuiltinString_t UserName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->username_);
  }

  if (has_count()) {
    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  return total_size;
}
size_t DelMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.DelMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.SKBuiltinString_t UserName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->username_);

    // required uint32 Count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 MsgIdList = 3 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->msgidlist_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _msgidlist_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.DelMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const DelMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DelMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.DelMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.DelMsg)
    MergeFrom(*source);
  }
}

void DelMsg::MergeFrom(const DelMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.DelMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msgidlist_.MergeFrom(from.msgidlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_username()->::micromsg::SKBuiltinString_t::MergeFrom(from.username());
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DelMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.DelMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelMsg::CopyFrom(const DelMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.DelMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void DelMsg::Swap(DelMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelMsg::InternalSwap(DelMsg* other) {
  msgidlist_.InternalSwap(&other->msgidlist_);
  std::swap(username_, other->username_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DelMsg::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DelMsg

// required .micromsg.SKBuiltinString_t UserName = 1;
bool DelMsg::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DelMsg::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void DelMsg::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void DelMsg::clear_username() {
  if (username_ != NULL) username_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_username();
}
const ::micromsg::SKBuiltinString_t& DelMsg::username() const {
  // @@protoc_insertion_point(field_get:micromsg.DelMsg.UserName)
  return username_ != NULL ? *username_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* DelMsg::mutable_username() {
  set_has_username();
  if (username_ == NULL) {
    username_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DelMsg.UserName)
  return username_;
}
::micromsg::SKBuiltinString_t* DelMsg::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.DelMsg.UserName)
  clear_has_username();
  ::micromsg::SKBuiltinString_t* temp = username_;
  username_ = NULL;
  return temp;
}
void DelMsg::set_allocated_username(::micromsg::SKBuiltinString_t* username) {
  delete username_;
  username_ = username;
  if (username) {
    set_has_username();
  } else {
    clear_has_username();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DelMsg.UserName)
}

// required uint32 Count = 2;
bool DelMsg::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DelMsg::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void DelMsg::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void DelMsg::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 DelMsg::count() const {
  // @@protoc_insertion_point(field_get:micromsg.DelMsg.Count)
  return count_;
}
void DelMsg::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DelMsg.Count)
}

// repeated int32 MsgIdList = 3 [packed = true];
int DelMsg::msgidlist_size() const {
  return msgidlist_.size();
}
void DelMsg::clear_msgidlist() {
  msgidlist_.Clear();
}
::google::protobuf::int32 DelMsg::msgidlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.DelMsg.MsgIdList)
  return msgidlist_.Get(index);
}
void DelMsg::set_msgidlist(int index, ::google::protobuf::int32 value) {
  msgidlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:micromsg.DelMsg.MsgIdList)
}
void DelMsg::add_msgidlist(::google::protobuf::int32 value) {
  msgidlist_.Add(value);
  // @@protoc_insertion_point(field_add:micromsg.DelMsg.MsgIdList)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DelMsg::msgidlist() const {
  // @@protoc_insertion_point(field_list:micromsg.DelMsg.MsgIdList)
  return msgidlist_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DelMsg::mutable_msgidlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.DelMsg.MsgIdList)
  return &msgidlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewDelMsg::kFromUserNameFieldNumber;
const int NewDelMsg::kToUserNameFieldNumber;
const int NewDelMsg::kMsgIdFieldNumber;
const int NewDelMsg::kMsgTypeFieldNumber;
const int NewDelMsg::kNewMsgIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewDelMsg::NewDelMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.NewDelMsg)
}
NewDelMsg::NewDelMsg(const NewDelMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fromusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fromusername()) {
    fromusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromusername_);
  }
  tousername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tousername()) {
    tousername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tousername_);
  }
  ::memcpy(&msgid_, &from.msgid_,
    reinterpret_cast<char*>(&newmsgid_) -
    reinterpret_cast<char*>(&msgid_) + sizeof(newmsgid_));
  // @@protoc_insertion_point(copy_constructor:micromsg.NewDelMsg)
}

void NewDelMsg::SharedCtor() {
  _cached_size_ = 0;
  fromusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tousername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&msgid_, 0, reinterpret_cast<char*>(&newmsgid_) -
    reinterpret_cast<char*>(&msgid_) + sizeof(newmsgid_));
}

NewDelMsg::~NewDelMsg() {
  // @@protoc_insertion_point(destructor:micromsg.NewDelMsg)
  SharedDtor();
}

void NewDelMsg::SharedDtor() {
  fromusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tousername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NewDelMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewDelMsg::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NewDelMsg& NewDelMsg::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

NewDelMsg* NewDelMsg::New(::google::protobuf::Arena* arena) const {
  NewDelMsg* n = new NewDelMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NewDelMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.NewDelMsg)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_fromusername()) {
      GOOGLE_DCHECK(!fromusername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fromusername_.UnsafeRawStringPointer())->clear();
    }
    if (has_tousername()) {
      GOOGLE_DCHECK(!tousername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tousername_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&msgid_, 0, reinterpret_cast<char*>(&newmsgid_) -
      reinterpret_cast<char*>(&msgid_) + sizeof(newmsgid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NewDelMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.NewDelMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string FromUserName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fromusername().data(), this->fromusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewDelMsg.FromUserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ToUserName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tousername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tousername().data(), this->tousername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NewDelMsg.ToUserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 MsgId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_msgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 MsgType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_msgtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 NewMsgId = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_newmsgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &newmsgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.NewDelMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.NewDelMsg)
  return false;
#undef DO_
}

void NewDelMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.NewDelMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string FromUserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromusername().data(), this->fromusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewDelMsg.FromUserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->fromusername(), output);
  }

  // optional string ToUserName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tousername().data(), this->tousername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewDelMsg.ToUserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tousername(), output);
  }

  // required int32 MsgId = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->msgid(), output);
  }

  // required uint32 MsgType = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->msgtype(), output);
  }

  // optional int64 NewMsgId = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->newmsgid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.NewDelMsg)
}

::google::protobuf::uint8* NewDelMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.NewDelMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string FromUserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromusername().data(), this->fromusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewDelMsg.FromUserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fromusername(), target);
  }

  // optional string ToUserName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tousername().data(), this->tousername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NewDelMsg.ToUserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tousername(), target);
  }

  // required int32 MsgId = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->msgid(), target);
  }

  // required uint32 MsgType = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->msgtype(), target);
  }

  // optional int64 NewMsgId = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->newmsgid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.NewDelMsg)
  return target;
}

size_t NewDelMsg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.NewDelMsg)
  size_t total_size = 0;

  if (has_msgid()) {
    // required int32 MsgId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msgid());
  }

  if (has_msgtype()) {
    // required uint32 MsgType = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msgtype());
  }

  return total_size;
}
size_t NewDelMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.NewDelMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required int32 MsgId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msgid());

    // required uint32 MsgType = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msgtype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string FromUserName = 1;
    if (has_fromusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromusername());
    }

    // optional string ToUserName = 2;
    if (has_tousername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tousername());
    }

  }
  // optional int64 NewMsgId = 5;
  if (has_newmsgid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->newmsgid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewDelMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.NewDelMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const NewDelMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NewDelMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.NewDelMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.NewDelMsg)
    MergeFrom(*source);
  }
}

void NewDelMsg::MergeFrom(const NewDelMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.NewDelMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_fromusername();
      fromusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromusername_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_tousername();
      tousername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tousername_);
    }
    if (cached_has_bits & 0x00000004u) {
      msgid_ = from.msgid_;
    }
    if (cached_has_bits & 0x00000008u) {
      msgtype_ = from.msgtype_;
    }
    if (cached_has_bits & 0x00000010u) {
      newmsgid_ = from.newmsgid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NewDelMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.NewDelMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewDelMsg::CopyFrom(const NewDelMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.NewDelMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewDelMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;
  return true;
}

void NewDelMsg::Swap(NewDelMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewDelMsg::InternalSwap(NewDelMsg* other) {
  fromusername_.Swap(&other->fromusername_);
  tousername_.Swap(&other->tousername_);
  std::swap(msgid_, other->msgid_);
  std::swap(msgtype_, other->msgtype_);
  std::swap(newmsgid_, other->newmsgid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NewDelMsg::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NewDelMsg

// optional string FromUserName = 1;
bool NewDelMsg::has_fromusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NewDelMsg::set_has_fromusername() {
  _has_bits_[0] |= 0x00000001u;
}
void NewDelMsg::clear_has_fromusername() {
  _has_bits_[0] &= ~0x00000001u;
}
void NewDelMsg::clear_fromusername() {
  fromusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fromusername();
}
const ::std::string& NewDelMsg::fromusername() const {
  // @@protoc_insertion_point(field_get:micromsg.NewDelMsg.FromUserName)
  return fromusername_.GetNoArena();
}
void NewDelMsg::set_fromusername(const ::std::string& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewDelMsg.FromUserName)
}
#if LANG_CXX11
void NewDelMsg::set_fromusername(::std::string&& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewDelMsg.FromUserName)
}
#endif
void NewDelMsg::set_fromusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewDelMsg.FromUserName)
}
void NewDelMsg::set_fromusername(const char* value, size_t size) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewDelMsg.FromUserName)
}
::std::string* NewDelMsg::mutable_fromusername() {
  set_has_fromusername();
  // @@protoc_insertion_point(field_mutable:micromsg.NewDelMsg.FromUserName)
  return fromusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewDelMsg::release_fromusername() {
  // @@protoc_insertion_point(field_release:micromsg.NewDelMsg.FromUserName)
  clear_has_fromusername();
  return fromusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewDelMsg::set_allocated_fromusername(::std::string* fromusername) {
  if (fromusername != NULL) {
    set_has_fromusername();
  } else {
    clear_has_fromusername();
  }
  fromusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewDelMsg.FromUserName)
}

// optional string ToUserName = 2;
bool NewDelMsg::has_tousername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NewDelMsg::set_has_tousername() {
  _has_bits_[0] |= 0x00000002u;
}
void NewDelMsg::clear_has_tousername() {
  _has_bits_[0] &= ~0x00000002u;
}
void NewDelMsg::clear_tousername() {
  tousername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tousername();
}
const ::std::string& NewDelMsg::tousername() const {
  // @@protoc_insertion_point(field_get:micromsg.NewDelMsg.ToUserName)
  return tousername_.GetNoArena();
}
void NewDelMsg::set_tousername(const ::std::string& value) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NewDelMsg.ToUserName)
}
#if LANG_CXX11
void NewDelMsg::set_tousername(::std::string&& value) {
  set_has_tousername();
  tousername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NewDelMsg.ToUserName)
}
#endif
void NewDelMsg::set_tousername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NewDelMsg.ToUserName)
}
void NewDelMsg::set_tousername(const char* value, size_t size) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NewDelMsg.ToUserName)
}
::std::string* NewDelMsg::mutable_tousername() {
  set_has_tousername();
  // @@protoc_insertion_point(field_mutable:micromsg.NewDelMsg.ToUserName)
  return tousername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewDelMsg::release_tousername() {
  // @@protoc_insertion_point(field_release:micromsg.NewDelMsg.ToUserName)
  clear_has_tousername();
  return tousername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewDelMsg::set_allocated_tousername(::std::string* tousername) {
  if (tousername != NULL) {
    set_has_tousername();
  } else {
    clear_has_tousername();
  }
  tousername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tousername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NewDelMsg.ToUserName)
}

// required int32 MsgId = 3;
bool NewDelMsg::has_msgid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NewDelMsg::set_has_msgid() {
  _has_bits_[0] |= 0x00000004u;
}
void NewDelMsg::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000004u;
}
void NewDelMsg::clear_msgid() {
  msgid_ = 0;
  clear_has_msgid();
}
::google::protobuf::int32 NewDelMsg::msgid() const {
  // @@protoc_insertion_point(field_get:micromsg.NewDelMsg.MsgId)
  return msgid_;
}
void NewDelMsg::set_msgid(::google::protobuf::int32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewDelMsg.MsgId)
}

// required uint32 MsgType = 4;
bool NewDelMsg::has_msgtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NewDelMsg::set_has_msgtype() {
  _has_bits_[0] |= 0x00000008u;
}
void NewDelMsg::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000008u;
}
void NewDelMsg::clear_msgtype() {
  msgtype_ = 0u;
  clear_has_msgtype();
}
::google::protobuf::uint32 NewDelMsg::msgtype() const {
  // @@protoc_insertion_point(field_get:micromsg.NewDelMsg.MsgType)
  return msgtype_;
}
void NewDelMsg::set_msgtype(::google::protobuf::uint32 value) {
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewDelMsg.MsgType)
}

// optional int64 NewMsgId = 5;
bool NewDelMsg::has_newmsgid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NewDelMsg::set_has_newmsgid() {
  _has_bits_[0] |= 0x00000010u;
}
void NewDelMsg::clear_has_newmsgid() {
  _has_bits_[0] &= ~0x00000010u;
}
void NewDelMsg::clear_newmsgid() {
  newmsgid_ = GOOGLE_LONGLONG(0);
  clear_has_newmsgid();
}
::google::protobuf::int64 NewDelMsg::newmsgid() const {
  // @@protoc_insertion_point(field_get:micromsg.NewDelMsg.NewMsgId)
  return newmsgid_;
}
void NewDelMsg::set_newmsgid(::google::protobuf::int64 value) {
  set_has_newmsgid();
  newmsgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NewDelMsg.NewMsgId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FacebookInfo::kUidFieldNumber;
const int FacebookInfo::kNameFieldNumber;
const int FacebookInfo::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FacebookInfo::FacebookInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.FacebookInfo)
}
FacebookInfo::FacebookInfo(const FacebookInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_token()) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:micromsg.FacebookInfo)
}

void FacebookInfo::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_ = GOOGLE_ULONGLONG(0);
}

FacebookInfo::~FacebookInfo() {
  // @@protoc_insertion_point(destructor:micromsg.FacebookInfo)
  SharedDtor();
}

void FacebookInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FacebookInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FacebookInfo::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FacebookInfo& FacebookInfo::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

FacebookInfo* FacebookInfo::New(::google::protobuf::Arena* arena) const {
  FacebookInfo* n = new FacebookInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FacebookInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.FacebookInfo)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_token()) {
      GOOGLE_DCHECK(!token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*token_.UnsafeRawStringPointer())->clear();
    }
  }
  uid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FacebookInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.FacebookInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 Uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_uid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.FacebookInfo.Name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.FacebookInfo.Token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.FacebookInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.FacebookInfo)
  return false;
#undef DO_
}

void FacebookInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.FacebookInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 Uid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional string Name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.FacebookInfo.Name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string Token = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.FacebookInfo.Token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.FacebookInfo)
}

::google::protobuf::uint8* FacebookInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.FacebookInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 Uid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional string Name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.FacebookInfo.Name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string Token = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.FacebookInfo.Token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.FacebookInfo)
  return target;
}

size_t FacebookInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.FacebookInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint64 Uid = 1;
  if (has_uid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uid());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string Token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FacebookInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.FacebookInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FacebookInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FacebookInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.FacebookInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.FacebookInfo)
    MergeFrom(*source);
  }
}

void FacebookInfo::MergeFrom(const FacebookInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.FacebookInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (cached_has_bits & 0x00000004u) {
      uid_ = from.uid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FacebookInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.FacebookInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FacebookInfo::CopyFrom(const FacebookInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.FacebookInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacebookInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  return true;
}

void FacebookInfo::Swap(FacebookInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FacebookInfo::InternalSwap(FacebookInfo* other) {
  name_.Swap(&other->name_);
  token_.Swap(&other->token_);
  std::swap(uid_, other->uid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FacebookInfo::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FacebookInfo

// required uint64 Uid = 1;
bool FacebookInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FacebookInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000004u;
}
void FacebookInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
void FacebookInfo::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
::google::protobuf::uint64 FacebookInfo::uid() const {
  // @@protoc_insertion_point(field_get:micromsg.FacebookInfo.Uid)
  return uid_;
}
void FacebookInfo::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.FacebookInfo.Uid)
}

// optional string Name = 2;
bool FacebookInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FacebookInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void FacebookInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void FacebookInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& FacebookInfo::name() const {
  // @@protoc_insertion_point(field_get:micromsg.FacebookInfo.Name)
  return name_.GetNoArena();
}
void FacebookInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.FacebookInfo.Name)
}
#if LANG_CXX11
void FacebookInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.FacebookInfo.Name)
}
#endif
void FacebookInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.FacebookInfo.Name)
}
void FacebookInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.FacebookInfo.Name)
}
::std::string* FacebookInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:micromsg.FacebookInfo.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FacebookInfo::release_name() {
  // @@protoc_insertion_point(field_release:micromsg.FacebookInfo.Name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FacebookInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:micromsg.FacebookInfo.Name)
}

// optional string Token = 3;
bool FacebookInfo::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FacebookInfo::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
void FacebookInfo::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
void FacebookInfo::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
const ::std::string& FacebookInfo::token() const {
  // @@protoc_insertion_point(field_get:micromsg.FacebookInfo.Token)
  return token_.GetNoArena();
}
void FacebookInfo::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.FacebookInfo.Token)
}
#if LANG_CXX11
void FacebookInfo::set_token(::std::string&& value) {
  set_has_token();
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.FacebookInfo.Token)
}
#endif
void FacebookInfo::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.FacebookInfo.Token)
}
void FacebookInfo::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.FacebookInfo.Token)
}
::std::string* FacebookInfo::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:micromsg.FacebookInfo.Token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FacebookInfo::release_token() {
  // @@protoc_insertion_point(field_release:micromsg.FacebookInfo.Token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FacebookInfo::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:micromsg.FacebookInfo.Token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModUserImg::kImgTypeFieldNumber;
const int ModUserImg::kImgLenFieldNumber;
const int ModUserImg::kImgBufFieldNumber;
const int ModUserImg::kImgMd5FieldNumber;
const int ModUserImg::kBigHeadImgUrlFieldNumber;
const int ModUserImg::kSmallHeadImgUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModUserImg::ModUserImg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ModUserImg)
}
ModUserImg::ModUserImg(const ModUserImg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  imgbuf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_imgbuf()) {
    imgbuf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imgbuf_);
  }
  imgmd5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_imgmd5()) {
    imgmd5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imgmd5_);
  }
  bigheadimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bigheadimgurl()) {
    bigheadimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bigheadimgurl_);
  }
  smallheadimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_smallheadimgurl()) {
    smallheadimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smallheadimgurl_);
  }
  ::memcpy(&imgtype_, &from.imgtype_,
    reinterpret_cast<char*>(&imglen_) -
    reinterpret_cast<char*>(&imgtype_) + sizeof(imglen_));
  // @@protoc_insertion_point(copy_constructor:micromsg.ModUserImg)
}

void ModUserImg::SharedCtor() {
  _cached_size_ = 0;
  imgbuf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imgmd5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bigheadimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smallheadimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&imgtype_, 0, reinterpret_cast<char*>(&imglen_) -
    reinterpret_cast<char*>(&imgtype_) + sizeof(imglen_));
}

ModUserImg::~ModUserImg() {
  // @@protoc_insertion_point(destructor:micromsg.ModUserImg)
  SharedDtor();
}

void ModUserImg::SharedDtor() {
  imgbuf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imgmd5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bigheadimgurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smallheadimgurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ModUserImg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModUserImg::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModUserImg& ModUserImg::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

ModUserImg* ModUserImg::New(::google::protobuf::Arena* arena) const {
  ModUserImg* n = new ModUserImg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModUserImg::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ModUserImg)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_imgbuf()) {
      GOOGLE_DCHECK(!imgbuf_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*imgbuf_.UnsafeRawStringPointer())->clear();
    }
    if (has_imgmd5()) {
      GOOGLE_DCHECK(!imgmd5_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*imgmd5_.UnsafeRawStringPointer())->clear();
    }
    if (has_bigheadimgurl()) {
      GOOGLE_DCHECK(!bigheadimgurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bigheadimgurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_smallheadimgurl()) {
      GOOGLE_DCHECK(!smallheadimgurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*smallheadimgurl_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 48u) {
    ::memset(&imgtype_, 0, reinterpret_cast<char*>(&imglen_) -
      reinterpret_cast<char*>(&imgtype_) + sizeof(imglen_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ModUserImg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ModUserImg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ImgType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_imgtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &imgtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ImgLen = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_imglen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &imglen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes ImgBuf = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_imgbuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ImgMd5 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imgmd5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imgmd5().data(), this->imgmd5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModUserImg.ImgMd5");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string BigHeadImgUrl = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bigheadimgurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bigheadimgurl().data(), this->bigheadimgurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModUserImg.BigHeadImgUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string SmallHeadImgUrl = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smallheadimgurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->smallheadimgurl().data(), this->smallheadimgurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModUserImg.SmallHeadImgUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ModUserImg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ModUserImg)
  return false;
#undef DO_
}

void ModUserImg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ModUserImg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 ImgType = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->imgtype(), output);
  }

  // required uint32 ImgLen = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->imglen(), output);
  }

  // optional bytes ImgBuf = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->imgbuf(), output);
  }

  // optional string ImgMd5 = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imgmd5().data(), this->imgmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModUserImg.ImgMd5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->imgmd5(), output);
  }

  // optional string BigHeadImgUrl = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bigheadimgurl().data(), this->bigheadimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModUserImg.BigHeadImgUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->bigheadimgurl(), output);
  }

  // optional string SmallHeadImgUrl = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->smallheadimgurl().data(), this->smallheadimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModUserImg.SmallHeadImgUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->smallheadimgurl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ModUserImg)
}

::google::protobuf::uint8* ModUserImg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ModUserImg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 ImgType = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->imgtype(), target);
  }

  // required uint32 ImgLen = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->imglen(), target);
  }

  // optional bytes ImgBuf = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->imgbuf(), target);
  }

  // optional string ImgMd5 = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imgmd5().data(), this->imgmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModUserImg.ImgMd5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->imgmd5(), target);
  }

  // optional string BigHeadImgUrl = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bigheadimgurl().data(), this->bigheadimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModUserImg.BigHeadImgUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->bigheadimgurl(), target);
  }

  // optional string SmallHeadImgUrl = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->smallheadimgurl().data(), this->smallheadimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModUserImg.SmallHeadImgUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->smallheadimgurl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ModUserImg)
  return target;
}

size_t ModUserImg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.ModUserImg)
  size_t total_size = 0;

  if (has_imgtype()) {
    // required uint32 ImgType = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->imgtype());
  }

  if (has_imglen()) {
    // required uint32 ImgLen = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->imglen());
  }

  return total_size;
}
size_t ModUserImg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ModUserImg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000030) ^ 0x00000030) == 0) {  // All required fields are present.
    // required uint32 ImgType = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->imgtype());

    // required uint32 ImgLen = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->imglen());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes ImgBuf = 3;
    if (has_imgbuf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->imgbuf());
    }

    // optional string ImgMd5 = 4;
    if (has_imgmd5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imgmd5());
    }

    // optional string BigHeadImgUrl = 5;
    if (has_bigheadimgurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bigheadimgurl());
    }

    // optional string SmallHeadImgUrl = 6;
    if (has_smallheadimgurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->smallheadimgurl());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModUserImg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ModUserImg)
  GOOGLE_DCHECK_NE(&from, this);
  const ModUserImg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModUserImg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ModUserImg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ModUserImg)
    MergeFrom(*source);
  }
}

void ModUserImg::MergeFrom(const ModUserImg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ModUserImg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_imgbuf();
      imgbuf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imgbuf_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_imgmd5();
      imgmd5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imgmd5_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_bigheadimgurl();
      bigheadimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bigheadimgurl_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_smallheadimgurl();
      smallheadimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smallheadimgurl_);
    }
    if (cached_has_bits & 0x00000010u) {
      imgtype_ = from.imgtype_;
    }
    if (cached_has_bits & 0x00000020u) {
      imglen_ = from.imglen_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ModUserImg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ModUserImg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModUserImg::CopyFrom(const ModUserImg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ModUserImg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModUserImg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000030) != 0x00000030) return false;
  return true;
}

void ModUserImg::Swap(ModUserImg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModUserImg::InternalSwap(ModUserImg* other) {
  imgbuf_.Swap(&other->imgbuf_);
  imgmd5_.Swap(&other->imgmd5_);
  bigheadimgurl_.Swap(&other->bigheadimgurl_);
  smallheadimgurl_.Swap(&other->smallheadimgurl_);
  std::swap(imgtype_, other->imgtype_);
  std::swap(imglen_, other->imglen_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModUserImg::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModUserImg

// required uint32 ImgType = 1;
bool ModUserImg::has_imgtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ModUserImg::set_has_imgtype() {
  _has_bits_[0] |= 0x00000010u;
}
void ModUserImg::clear_has_imgtype() {
  _has_bits_[0] &= ~0x00000010u;
}
void ModUserImg::clear_imgtype() {
  imgtype_ = 0u;
  clear_has_imgtype();
}
::google::protobuf::uint32 ModUserImg::imgtype() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserImg.ImgType)
  return imgtype_;
}
void ModUserImg::set_imgtype(::google::protobuf::uint32 value) {
  set_has_imgtype();
  imgtype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModUserImg.ImgType)
}

// required uint32 ImgLen = 2;
bool ModUserImg::has_imglen() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ModUserImg::set_has_imglen() {
  _has_bits_[0] |= 0x00000020u;
}
void ModUserImg::clear_has_imglen() {
  _has_bits_[0] &= ~0x00000020u;
}
void ModUserImg::clear_imglen() {
  imglen_ = 0u;
  clear_has_imglen();
}
::google::protobuf::uint32 ModUserImg::imglen() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserImg.ImgLen)
  return imglen_;
}
void ModUserImg::set_imglen(::google::protobuf::uint32 value) {
  set_has_imglen();
  imglen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModUserImg.ImgLen)
}

// optional bytes ImgBuf = 3;
bool ModUserImg::has_imgbuf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModUserImg::set_has_imgbuf() {
  _has_bits_[0] |= 0x00000001u;
}
void ModUserImg::clear_has_imgbuf() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModUserImg::clear_imgbuf() {
  imgbuf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imgbuf();
}
const ::std::string& ModUserImg::imgbuf() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserImg.ImgBuf)
  return imgbuf_.GetNoArena();
}
void ModUserImg::set_imgbuf(const ::std::string& value) {
  set_has_imgbuf();
  imgbuf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModUserImg.ImgBuf)
}
#if LANG_CXX11
void ModUserImg::set_imgbuf(::std::string&& value) {
  set_has_imgbuf();
  imgbuf_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModUserImg.ImgBuf)
}
#endif
void ModUserImg::set_imgbuf(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imgbuf();
  imgbuf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModUserImg.ImgBuf)
}
void ModUserImg::set_imgbuf(const void* value, size_t size) {
  set_has_imgbuf();
  imgbuf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModUserImg.ImgBuf)
}
::std::string* ModUserImg::mutable_imgbuf() {
  set_has_imgbuf();
  // @@protoc_insertion_point(field_mutable:micromsg.ModUserImg.ImgBuf)
  return imgbuf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModUserImg::release_imgbuf() {
  // @@protoc_insertion_point(field_release:micromsg.ModUserImg.ImgBuf)
  clear_has_imgbuf();
  return imgbuf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModUserImg::set_allocated_imgbuf(::std::string* imgbuf) {
  if (imgbuf != NULL) {
    set_has_imgbuf();
  } else {
    clear_has_imgbuf();
  }
  imgbuf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imgbuf);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModUserImg.ImgBuf)
}

// optional string ImgMd5 = 4;
bool ModUserImg::has_imgmd5() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ModUserImg::set_has_imgmd5() {
  _has_bits_[0] |= 0x00000002u;
}
void ModUserImg::clear_has_imgmd5() {
  _has_bits_[0] &= ~0x00000002u;
}
void ModUserImg::clear_imgmd5() {
  imgmd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imgmd5();
}
const ::std::string& ModUserImg::imgmd5() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserImg.ImgMd5)
  return imgmd5_.GetNoArena();
}
void ModUserImg::set_imgmd5(const ::std::string& value) {
  set_has_imgmd5();
  imgmd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModUserImg.ImgMd5)
}
#if LANG_CXX11
void ModUserImg::set_imgmd5(::std::string&& value) {
  set_has_imgmd5();
  imgmd5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModUserImg.ImgMd5)
}
#endif
void ModUserImg::set_imgmd5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imgmd5();
  imgmd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModUserImg.ImgMd5)
}
void ModUserImg::set_imgmd5(const char* value, size_t size) {
  set_has_imgmd5();
  imgmd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModUserImg.ImgMd5)
}
::std::string* ModUserImg::mutable_imgmd5() {
  set_has_imgmd5();
  // @@protoc_insertion_point(field_mutable:micromsg.ModUserImg.ImgMd5)
  return imgmd5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModUserImg::release_imgmd5() {
  // @@protoc_insertion_point(field_release:micromsg.ModUserImg.ImgMd5)
  clear_has_imgmd5();
  return imgmd5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModUserImg::set_allocated_imgmd5(::std::string* imgmd5) {
  if (imgmd5 != NULL) {
    set_has_imgmd5();
  } else {
    clear_has_imgmd5();
  }
  imgmd5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imgmd5);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModUserImg.ImgMd5)
}

// optional string BigHeadImgUrl = 5;
bool ModUserImg::has_bigheadimgurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ModUserImg::set_has_bigheadimgurl() {
  _has_bits_[0] |= 0x00000004u;
}
void ModUserImg::clear_has_bigheadimgurl() {
  _has_bits_[0] &= ~0x00000004u;
}
void ModUserImg::clear_bigheadimgurl() {
  bigheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bigheadimgurl();
}
const ::std::string& ModUserImg::bigheadimgurl() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserImg.BigHeadImgUrl)
  return bigheadimgurl_.GetNoArena();
}
void ModUserImg::set_bigheadimgurl(const ::std::string& value) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModUserImg.BigHeadImgUrl)
}
#if LANG_CXX11
void ModUserImg::set_bigheadimgurl(::std::string&& value) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModUserImg.BigHeadImgUrl)
}
#endif
void ModUserImg::set_bigheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModUserImg.BigHeadImgUrl)
}
void ModUserImg::set_bigheadimgurl(const char* value, size_t size) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModUserImg.BigHeadImgUrl)
}
::std::string* ModUserImg::mutable_bigheadimgurl() {
  set_has_bigheadimgurl();
  // @@protoc_insertion_point(field_mutable:micromsg.ModUserImg.BigHeadImgUrl)
  return bigheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModUserImg::release_bigheadimgurl() {
  // @@protoc_insertion_point(field_release:micromsg.ModUserImg.BigHeadImgUrl)
  clear_has_bigheadimgurl();
  return bigheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModUserImg::set_allocated_bigheadimgurl(::std::string* bigheadimgurl) {
  if (bigheadimgurl != NULL) {
    set_has_bigheadimgurl();
  } else {
    clear_has_bigheadimgurl();
  }
  bigheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bigheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModUserImg.BigHeadImgUrl)
}

// optional string SmallHeadImgUrl = 6;
bool ModUserImg::has_smallheadimgurl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ModUserImg::set_has_smallheadimgurl() {
  _has_bits_[0] |= 0x00000008u;
}
void ModUserImg::clear_has_smallheadimgurl() {
  _has_bits_[0] &= ~0x00000008u;
}
void ModUserImg::clear_smallheadimgurl() {
  smallheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_smallheadimgurl();
}
const ::std::string& ModUserImg::smallheadimgurl() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserImg.SmallHeadImgUrl)
  return smallheadimgurl_.GetNoArena();
}
void ModUserImg::set_smallheadimgurl(const ::std::string& value) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModUserImg.SmallHeadImgUrl)
}
#if LANG_CXX11
void ModUserImg::set_smallheadimgurl(::std::string&& value) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModUserImg.SmallHeadImgUrl)
}
#endif
void ModUserImg::set_smallheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModUserImg.SmallHeadImgUrl)
}
void ModUserImg::set_smallheadimgurl(const char* value, size_t size) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModUserImg.SmallHeadImgUrl)
}
::std::string* ModUserImg::mutable_smallheadimgurl() {
  set_has_smallheadimgurl();
  // @@protoc_insertion_point(field_mutable:micromsg.ModUserImg.SmallHeadImgUrl)
  return smallheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModUserImg::release_smallheadimgurl() {
  // @@protoc_insertion_point(field_release:micromsg.ModUserImg.SmallHeadImgUrl)
  clear_has_smallheadimgurl();
  return smallheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModUserImg::set_allocated_smallheadimgurl(::std::string* smallheadimgurl) {
  if (smallheadimgurl != NULL) {
    set_has_smallheadimgurl();
  } else {
    clear_has_smallheadimgurl();
  }
  smallheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smallheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModUserImg.SmallHeadImgUrl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModDisturbSetting::kDisturbSettingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModDisturbSetting::ModDisturbSetting()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ModDisturbSetting)
}
ModDisturbSetting::ModDisturbSetting(const ModDisturbSetting& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_disturbsetting()) {
    disturbsetting_ = new ::micromsg::DisturbSetting(*from.disturbsetting_);
  } else {
    disturbsetting_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.ModDisturbSetting)
}

void ModDisturbSetting::SharedCtor() {
  _cached_size_ = 0;
  disturbsetting_ = NULL;
}

ModDisturbSetting::~ModDisturbSetting() {
  // @@protoc_insertion_point(destructor:micromsg.ModDisturbSetting)
  SharedDtor();
}

void ModDisturbSetting::SharedDtor() {
  if (this != internal_default_instance()) {
    delete disturbsetting_;
  }
}

void ModDisturbSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModDisturbSetting::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModDisturbSetting& ModDisturbSetting::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

ModDisturbSetting* ModDisturbSetting::New(::google::protobuf::Arena* arena) const {
  ModDisturbSetting* n = new ModDisturbSetting;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModDisturbSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ModDisturbSetting)
  if (has_disturbsetting()) {
    GOOGLE_DCHECK(disturbsetting_ != NULL);
    disturbsetting_->::micromsg::DisturbSetting::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ModDisturbSetting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ModDisturbSetting)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.DisturbSetting DisturbSetting = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_disturbsetting()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ModDisturbSetting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ModDisturbSetting)
  return false;
#undef DO_
}

void ModDisturbSetting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ModDisturbSetting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.DisturbSetting DisturbSetting = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->disturbsetting_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ModDisturbSetting)
}

::google::protobuf::uint8* ModDisturbSetting::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ModDisturbSetting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.DisturbSetting DisturbSetting = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->disturbsetting_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ModDisturbSetting)
  return target;
}

size_t ModDisturbSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ModDisturbSetting)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.DisturbSetting DisturbSetting = 1;
  if (has_disturbsetting()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->disturbsetting_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModDisturbSetting::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ModDisturbSetting)
  GOOGLE_DCHECK_NE(&from, this);
  const ModDisturbSetting* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModDisturbSetting>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ModDisturbSetting)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ModDisturbSetting)
    MergeFrom(*source);
  }
}

void ModDisturbSetting::MergeFrom(const ModDisturbSetting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ModDisturbSetting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_disturbsetting()) {
    mutable_disturbsetting()->::micromsg::DisturbSetting::MergeFrom(from.disturbsetting());
  }
}

void ModDisturbSetting::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ModDisturbSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModDisturbSetting::CopyFrom(const ModDisturbSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ModDisturbSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModDisturbSetting::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_disturbsetting()) {
    if (!this->disturbsetting_->IsInitialized()) return false;
  }
  return true;
}

void ModDisturbSetting::Swap(ModDisturbSetting* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModDisturbSetting::InternalSwap(ModDisturbSetting* other) {
  std::swap(disturbsetting_, other->disturbsetting_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModDisturbSetting::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModDisturbSetting

// required .micromsg.DisturbSetting DisturbSetting = 1;
bool ModDisturbSetting::has_disturbsetting() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModDisturbSetting::set_has_disturbsetting() {
  _has_bits_[0] |= 0x00000001u;
}
void ModDisturbSetting::clear_has_disturbsetting() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModDisturbSetting::clear_disturbsetting() {
  if (disturbsetting_ != NULL) disturbsetting_->::micromsg::DisturbSetting::Clear();
  clear_has_disturbsetting();
}
const ::micromsg::DisturbSetting& ModDisturbSetting::disturbsetting() const {
  // @@protoc_insertion_point(field_get:micromsg.ModDisturbSetting.DisturbSetting)
  return disturbsetting_ != NULL ? *disturbsetting_
                         : *::micromsg::DisturbSetting::internal_default_instance();
}
::micromsg::DisturbSetting* ModDisturbSetting::mutable_disturbsetting() {
  set_has_disturbsetting();
  if (disturbsetting_ == NULL) {
    disturbsetting_ = new ::micromsg::DisturbSetting;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModDisturbSetting.DisturbSetting)
  return disturbsetting_;
}
::micromsg::DisturbSetting* ModDisturbSetting::release_disturbsetting() {
  // @@protoc_insertion_point(field_release:micromsg.ModDisturbSetting.DisturbSetting)
  clear_has_disturbsetting();
  ::micromsg::DisturbSetting* temp = disturbsetting_;
  disturbsetting_ = NULL;
  return temp;
}
void ModDisturbSetting::set_allocated_disturbsetting(::micromsg::DisturbSetting* disturbsetting) {
  delete disturbsetting_;
  disturbsetting_ = disturbsetting;
  if (disturbsetting) {
    set_has_disturbsetting();
  } else {
    clear_has_disturbsetting();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModDisturbSetting.DisturbSetting)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModNotifyStatus::kUserNameFieldNumber;
const int ModNotifyStatus::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModNotifyStatus::ModNotifyStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ModNotifyStatus)
}
ModNotifyStatus::ModNotifyStatus(const ModNotifyStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_username()) {
    username_ = new ::micromsg::SKBuiltinString_t(*from.username_);
  } else {
    username_ = NULL;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:micromsg.ModNotifyStatus)
}

void ModNotifyStatus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&username_, 0, reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&username_) + sizeof(status_));
}

ModNotifyStatus::~ModNotifyStatus() {
  // @@protoc_insertion_point(destructor:micromsg.ModNotifyStatus)
  SharedDtor();
}

void ModNotifyStatus::SharedDtor() {
  if (this != internal_default_instance()) {
    delete username_;
  }
}

void ModNotifyStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModNotifyStatus::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModNotifyStatus& ModNotifyStatus::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

ModNotifyStatus* ModNotifyStatus::New(::google::protobuf::Arena* arena) const {
  ModNotifyStatus* n = new ModNotifyStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModNotifyStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ModNotifyStatus)
  if (has_username()) {
    GOOGLE_DCHECK(username_ != NULL);
    username_->::micromsg::SKBuiltinString_t::Clear();
  }
  status_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ModNotifyStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ModNotifyStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.SKBuiltinString_t UserName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_username()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ModNotifyStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ModNotifyStatus)
  return false;
#undef DO_
}

void ModNotifyStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ModNotifyStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t UserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->username_, output);
  }

  // required uint32 Status = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ModNotifyStatus)
}

::google::protobuf::uint8* ModNotifyStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ModNotifyStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t UserName = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->username_, deterministic, target);
  }

  // required uint32 Status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ModNotifyStatus)
  return target;
}

size_t ModNotifyStatus::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.ModNotifyStatus)
  size_t total_size = 0;

  if (has_username()) {
    // required .micromsg.SKBuiltinString_t UserName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->username_);
  }

  if (has_status()) {
    // required uint32 Status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  return total_size;
}
size_t ModNotifyStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ModNotifyStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.SKBuiltinString_t UserName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->username_);

    // required uint32 Status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModNotifyStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ModNotifyStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ModNotifyStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModNotifyStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ModNotifyStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ModNotifyStatus)
    MergeFrom(*source);
  }
}

void ModNotifyStatus::MergeFrom(const ModNotifyStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ModNotifyStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_username()->::micromsg::SKBuiltinString_t::MergeFrom(from.username());
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ModNotifyStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ModNotifyStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModNotifyStatus::CopyFrom(const ModNotifyStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ModNotifyStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModNotifyStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ModNotifyStatus::Swap(ModNotifyStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModNotifyStatus::InternalSwap(ModNotifyStatus* other) {
  std::swap(username_, other->username_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModNotifyStatus::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModNotifyStatus

// required .micromsg.SKBuiltinString_t UserName = 1;
bool ModNotifyStatus::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModNotifyStatus::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void ModNotifyStatus::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModNotifyStatus::clear_username() {
  if (username_ != NULL) username_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_username();
}
const ::micromsg::SKBuiltinString_t& ModNotifyStatus::username() const {
  // @@protoc_insertion_point(field_get:micromsg.ModNotifyStatus.UserName)
  return username_ != NULL ? *username_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* ModNotifyStatus::mutable_username() {
  set_has_username();
  if (username_ == NULL) {
    username_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModNotifyStatus.UserName)
  return username_;
}
::micromsg::SKBuiltinString_t* ModNotifyStatus::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.ModNotifyStatus.UserName)
  clear_has_username();
  ::micromsg::SKBuiltinString_t* temp = username_;
  username_ = NULL;
  return temp;
}
void ModNotifyStatus::set_allocated_username(::micromsg::SKBuiltinString_t* username) {
  delete username_;
  username_ = username;
  if (username) {
    set_has_username();
  } else {
    clear_has_username();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModNotifyStatus.UserName)
}

// required uint32 Status = 2;
bool ModNotifyStatus::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ModNotifyStatus::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void ModNotifyStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void ModNotifyStatus::clear_status() {
  status_ = 0u;
  clear_has_status();
}
::google::protobuf::uint32 ModNotifyStatus::status() const {
  // @@protoc_insertion_point(field_get:micromsg.ModNotifyStatus.Status)
  return status_;
}
void ModNotifyStatus::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModNotifyStatus.Status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModMicroBlogInfo::kUserNameFieldNumber;
const int ModMicroBlogInfo::kMicroBlogTypeFieldNumber;
const int ModMicroBlogInfo::kNotifyStatusFieldNumber;
const int ModMicroBlogInfo::kDeleteFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModMicroBlogInfo::ModMicroBlogInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ModMicroBlogInfo)
}
ModMicroBlogInfo::ModMicroBlogInfo(const ModMicroBlogInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_username()) {
    username_ = new ::micromsg::SKBuiltinString_t(*from.username_);
  } else {
    username_ = NULL;
  }
  ::memcpy(&microblogtype_, &from.microblogtype_,
    reinterpret_cast<char*>(&deleteflag_) -
    reinterpret_cast<char*>(&microblogtype_) + sizeof(deleteflag_));
  // @@protoc_insertion_point(copy_constructor:micromsg.ModMicroBlogInfo)
}

void ModMicroBlogInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&username_, 0, reinterpret_cast<char*>(&deleteflag_) -
    reinterpret_cast<char*>(&username_) + sizeof(deleteflag_));
}

ModMicroBlogInfo::~ModMicroBlogInfo() {
  // @@protoc_insertion_point(destructor:micromsg.ModMicroBlogInfo)
  SharedDtor();
}

void ModMicroBlogInfo::SharedDtor() {
  if (this != internal_default_instance()) {
    delete username_;
  }
}

void ModMicroBlogInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModMicroBlogInfo::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModMicroBlogInfo& ModMicroBlogInfo::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

ModMicroBlogInfo* ModMicroBlogInfo::New(::google::protobuf::Arena* arena) const {
  ModMicroBlogInfo* n = new ModMicroBlogInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModMicroBlogInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ModMicroBlogInfo)
  if (has_username()) {
    GOOGLE_DCHECK(username_ != NULL);
    username_->::micromsg::SKBuiltinString_t::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&microblogtype_, 0, reinterpret_cast<char*>(&deleteflag_) -
      reinterpret_cast<char*>(&microblogtype_) + sizeof(deleteflag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ModMicroBlogInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ModMicroBlogInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.SKBuiltinString_t UserName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_username()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 MicroBlogType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_microblogtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &microblogtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 NotifyStatus = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_notifystatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &notifystatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 DeleteFlag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_deleteflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deleteflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ModMicroBlogInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ModMicroBlogInfo)
  return false;
#undef DO_
}

void ModMicroBlogInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ModMicroBlogInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t UserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->username_, output);
  }

  // required uint32 MicroBlogType = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->microblogtype(), output);
  }

  // required uint32 NotifyStatus = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->notifystatus(), output);
  }

  // required uint32 DeleteFlag = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->deleteflag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ModMicroBlogInfo)
}

::google::protobuf::uint8* ModMicroBlogInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ModMicroBlogInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t UserName = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->username_, deterministic, target);
  }

  // required uint32 MicroBlogType = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->microblogtype(), target);
  }

  // required uint32 NotifyStatus = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->notifystatus(), target);
  }

  // required uint32 DeleteFlag = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->deleteflag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ModMicroBlogInfo)
  return target;
}

size_t ModMicroBlogInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.ModMicroBlogInfo)
  size_t total_size = 0;

  if (has_username()) {
    // required .micromsg.SKBuiltinString_t UserName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->username_);
  }

  if (has_microblogtype()) {
    // required uint32 MicroBlogType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->microblogtype());
  }

  if (has_notifystatus()) {
    // required uint32 NotifyStatus = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->notifystatus());
  }

  if (has_deleteflag()) {
    // required uint32 DeleteFlag = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->deleteflag());
  }

  return total_size;
}
size_t ModMicroBlogInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ModMicroBlogInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .micromsg.SKBuiltinString_t UserName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->username_);

    // required uint32 MicroBlogType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->microblogtype());

    // required uint32 NotifyStatus = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->notifystatus());

    // required uint32 DeleteFlag = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->deleteflag());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModMicroBlogInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ModMicroBlogInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ModMicroBlogInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModMicroBlogInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ModMicroBlogInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ModMicroBlogInfo)
    MergeFrom(*source);
  }
}

void ModMicroBlogInfo::MergeFrom(const ModMicroBlogInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ModMicroBlogInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_username()->::micromsg::SKBuiltinString_t::MergeFrom(from.username());
    }
    if (cached_has_bits & 0x00000002u) {
      microblogtype_ = from.microblogtype_;
    }
    if (cached_has_bits & 0x00000004u) {
      notifystatus_ = from.notifystatus_;
    }
    if (cached_has_bits & 0x00000008u) {
      deleteflag_ = from.deleteflag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ModMicroBlogInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ModMicroBlogInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModMicroBlogInfo::CopyFrom(const ModMicroBlogInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ModMicroBlogInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModMicroBlogInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void ModMicroBlogInfo::Swap(ModMicroBlogInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModMicroBlogInfo::InternalSwap(ModMicroBlogInfo* other) {
  std::swap(username_, other->username_);
  std::swap(microblogtype_, other->microblogtype_);
  std::swap(notifystatus_, other->notifystatus_);
  std::swap(deleteflag_, other->deleteflag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModMicroBlogInfo::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModMicroBlogInfo

// required .micromsg.SKBuiltinString_t UserName = 1;
bool ModMicroBlogInfo::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModMicroBlogInfo::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void ModMicroBlogInfo::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModMicroBlogInfo::clear_username() {
  if (username_ != NULL) username_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_username();
}
const ::micromsg::SKBuiltinString_t& ModMicroBlogInfo::username() const {
  // @@protoc_insertion_point(field_get:micromsg.ModMicroBlogInfo.UserName)
  return username_ != NULL ? *username_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* ModMicroBlogInfo::mutable_username() {
  set_has_username();
  if (username_ == NULL) {
    username_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModMicroBlogInfo.UserName)
  return username_;
}
::micromsg::SKBuiltinString_t* ModMicroBlogInfo::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.ModMicroBlogInfo.UserName)
  clear_has_username();
  ::micromsg::SKBuiltinString_t* temp = username_;
  username_ = NULL;
  return temp;
}
void ModMicroBlogInfo::set_allocated_username(::micromsg::SKBuiltinString_t* username) {
  delete username_;
  username_ = username;
  if (username) {
    set_has_username();
  } else {
    clear_has_username();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModMicroBlogInfo.UserName)
}

// required uint32 MicroBlogType = 2;
bool ModMicroBlogInfo::has_microblogtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ModMicroBlogInfo::set_has_microblogtype() {
  _has_bits_[0] |= 0x00000002u;
}
void ModMicroBlogInfo::clear_has_microblogtype() {
  _has_bits_[0] &= ~0x00000002u;
}
void ModMicroBlogInfo::clear_microblogtype() {
  microblogtype_ = 0u;
  clear_has_microblogtype();
}
::google::protobuf::uint32 ModMicroBlogInfo::microblogtype() const {
  // @@protoc_insertion_point(field_get:micromsg.ModMicroBlogInfo.MicroBlogType)
  return microblogtype_;
}
void ModMicroBlogInfo::set_microblogtype(::google::protobuf::uint32 value) {
  set_has_microblogtype();
  microblogtype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModMicroBlogInfo.MicroBlogType)
}

// required uint32 NotifyStatus = 3;
bool ModMicroBlogInfo::has_notifystatus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ModMicroBlogInfo::set_has_notifystatus() {
  _has_bits_[0] |= 0x00000004u;
}
void ModMicroBlogInfo::clear_has_notifystatus() {
  _has_bits_[0] &= ~0x00000004u;
}
void ModMicroBlogInfo::clear_notifystatus() {
  notifystatus_ = 0u;
  clear_has_notifystatus();
}
::google::protobuf::uint32 ModMicroBlogInfo::notifystatus() const {
  // @@protoc_insertion_point(field_get:micromsg.ModMicroBlogInfo.NotifyStatus)
  return notifystatus_;
}
void ModMicroBlogInfo::set_notifystatus(::google::protobuf::uint32 value) {
  set_has_notifystatus();
  notifystatus_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModMicroBlogInfo.NotifyStatus)
}

// required uint32 DeleteFlag = 4;
bool ModMicroBlogInfo::has_deleteflag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ModMicroBlogInfo::set_has_deleteflag() {
  _has_bits_[0] |= 0x00000008u;
}
void ModMicroBlogInfo::clear_has_deleteflag() {
  _has_bits_[0] &= ~0x00000008u;
}
void ModMicroBlogInfo::clear_deleteflag() {
  deleteflag_ = 0u;
  clear_has_deleteflag();
}
::google::protobuf::uint32 ModMicroBlogInfo::deleteflag() const {
  // @@protoc_insertion_point(field_get:micromsg.ModMicroBlogInfo.DeleteFlag)
  return deleteflag_;
}
void ModMicroBlogInfo::set_deleteflag(::google::protobuf::uint32 value) {
  set_has_deleteflag();
  deleteflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModMicroBlogInfo.DeleteFlag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Report::kLogFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Report::Report()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.Report)
}
Report::Report(const Report& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_log()) {
    log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_);
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.Report)
}

void Report::SharedCtor() {
  _cached_size_ = 0;
  log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Report::~Report() {
  // @@protoc_insertion_point(destructor:micromsg.Report)
  SharedDtor();
}

void Report::SharedDtor() {
  log_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Report::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Report::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Report& Report::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

Report* Report::New(::google::protobuf::Arena* arena) const {
  Report* n = new Report;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Report::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.Report)
  if (has_log()) {
    GOOGLE_DCHECK(!log_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*log_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Report::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.Report)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Log = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->log().data(), this->log().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.Report.Log");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.Report)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.Report)
  return false;
#undef DO_
}

void Report::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.Report)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Log = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->log().data(), this->log().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.Report.Log");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->log(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.Report)
}

::google::protobuf::uint8* Report::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.Report)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Log = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->log().data(), this->log().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.Report.Log");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->log(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.Report)
  return target;
}

size_t Report::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.Report)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string Log = 1;
  if (has_log()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->log());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Report::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.Report)
  GOOGLE_DCHECK_NE(&from, this);
  const Report* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Report>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.Report)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.Report)
    MergeFrom(*source);
  }
}

void Report::MergeFrom(const Report& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.Report)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_log()) {
    set_has_log();
    log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_);
  }
}

void Report::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.Report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Report::CopyFrom(const Report& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.Report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Report::IsInitialized() const {
  return true;
}

void Report::Swap(Report* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Report::InternalSwap(Report* other) {
  log_.Swap(&other->log_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Report::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Report

// optional string Log = 1;
bool Report::has_log() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Report::set_has_log() {
  _has_bits_[0] |= 0x00000001u;
}
void Report::clear_has_log() {
  _has_bits_[0] &= ~0x00000001u;
}
void Report::clear_log() {
  log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_log();
}
const ::std::string& Report::log() const {
  // @@protoc_insertion_point(field_get:micromsg.Report.Log)
  return log_.GetNoArena();
}
void Report::set_log(const ::std::string& value) {
  set_has_log();
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.Report.Log)
}
#if LANG_CXX11
void Report::set_log(::std::string&& value) {
  set_has_log();
  log_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.Report.Log)
}
#endif
void Report::set_log(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_log();
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.Report.Log)
}
void Report::set_log(const char* value, size_t size) {
  set_has_log();
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.Report.Log)
}
::std::string* Report::mutable_log() {
  set_has_log();
  // @@protoc_insertion_point(field_mutable:micromsg.Report.Log)
  return log_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Report::release_log() {
  // @@protoc_insertion_point(field_release:micromsg.Report.Log)
  clear_has_log();
  return log_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Report::set_allocated_log(::std::string* log) {
  if (log != NULL) {
    set_has_log();
  } else {
    clear_has_log();
  }
  log_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log);
  // @@protoc_insertion_point(field_set_allocated:micromsg.Report.Log)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InviteFriendOpen::kUserNameFieldNumber;
const int InviteFriendOpen::kFriendTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InviteFriendOpen::InviteFriendOpen()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.InviteFriendOpen)
}
InviteFriendOpen::InviteFriendOpen(const InviteFriendOpen& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  friendtype_ = from.friendtype_;
  // @@protoc_insertion_point(copy_constructor:micromsg.InviteFriendOpen)
}

void InviteFriendOpen::SharedCtor() {
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  friendtype_ = 0u;
}

InviteFriendOpen::~InviteFriendOpen() {
  // @@protoc_insertion_point(destructor:micromsg.InviteFriendOpen)
  SharedDtor();
}

void InviteFriendOpen::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InviteFriendOpen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteFriendOpen::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InviteFriendOpen& InviteFriendOpen::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

InviteFriendOpen* InviteFriendOpen::New(::google::protobuf::Arena* arena) const {
  InviteFriendOpen* n = new InviteFriendOpen;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InviteFriendOpen::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.InviteFriendOpen)
  if (has_username()) {
    GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*username_.UnsafeRawStringPointer())->clear();
  }
  friendtype_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InviteFriendOpen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.InviteFriendOpen)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string UserName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.InviteFriendOpen.UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 FriendType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_friendtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friendtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.InviteFriendOpen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.InviteFriendOpen)
  return false;
#undef DO_
}

void InviteFriendOpen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.InviteFriendOpen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string UserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.InviteFriendOpen.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // required uint32 FriendType = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->friendtype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.InviteFriendOpen)
}

::google::protobuf::uint8* InviteFriendOpen::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.InviteFriendOpen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string UserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.InviteFriendOpen.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // required uint32 FriendType = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->friendtype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.InviteFriendOpen)
  return target;
}

size_t InviteFriendOpen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.InviteFriendOpen)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 FriendType = 2;
  if (has_friendtype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->friendtype());
  }
  // optional string UserName = 1;
  if (has_username()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteFriendOpen::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.InviteFriendOpen)
  GOOGLE_DCHECK_NE(&from, this);
  const InviteFriendOpen* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InviteFriendOpen>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.InviteFriendOpen)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.InviteFriendOpen)
    MergeFrom(*source);
  }
}

void InviteFriendOpen::MergeFrom(const InviteFriendOpen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.InviteFriendOpen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      friendtype_ = from.friendtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InviteFriendOpen::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.InviteFriendOpen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteFriendOpen::CopyFrom(const InviteFriendOpen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.InviteFriendOpen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteFriendOpen::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void InviteFriendOpen::Swap(InviteFriendOpen* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InviteFriendOpen::InternalSwap(InviteFriendOpen* other) {
  username_.Swap(&other->username_);
  std::swap(friendtype_, other->friendtype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InviteFriendOpen::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InviteFriendOpen

// optional string UserName = 1;
bool InviteFriendOpen::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InviteFriendOpen::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void InviteFriendOpen::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void InviteFriendOpen::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& InviteFriendOpen::username() const {
  // @@protoc_insertion_point(field_get:micromsg.InviteFriendOpen.UserName)
  return username_.GetNoArena();
}
void InviteFriendOpen::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.InviteFriendOpen.UserName)
}
#if LANG_CXX11
void InviteFriendOpen::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.InviteFriendOpen.UserName)
}
#endif
void InviteFriendOpen::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.InviteFriendOpen.UserName)
}
void InviteFriendOpen::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.InviteFriendOpen.UserName)
}
::std::string* InviteFriendOpen::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.InviteFriendOpen.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InviteFriendOpen::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.InviteFriendOpen.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InviteFriendOpen::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.InviteFriendOpen.UserName)
}

// required uint32 FriendType = 2;
bool InviteFriendOpen::has_friendtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InviteFriendOpen::set_has_friendtype() {
  _has_bits_[0] |= 0x00000002u;
}
void InviteFriendOpen::clear_has_friendtype() {
  _has_bits_[0] &= ~0x00000002u;
}
void InviteFriendOpen::clear_friendtype() {
  friendtype_ = 0u;
  clear_has_friendtype();
}
::google::protobuf::uint32 InviteFriendOpen::friendtype() const {
  // @@protoc_insertion_point(field_get:micromsg.InviteFriendOpen.FriendType)
  return friendtype_;
}
void InviteFriendOpen::set_friendtype(::google::protobuf::uint32 value) {
  set_has_friendtype();
  friendtype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.InviteFriendOpen.FriendType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModUserDomainEmail::kStatusFieldNumber;
const int ModUserDomainEmail::kEmailFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModUserDomainEmail::ModUserDomainEmail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ModUserDomainEmail)
}
ModUserDomainEmail::ModUserDomainEmail(const ModUserDomainEmail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_email()) {
    email_ = new ::micromsg::SKBuiltinString_t(*from.email_);
  } else {
    email_ = NULL;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:micromsg.ModUserDomainEmail)
}

void ModUserDomainEmail::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&email_, 0, reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&email_) + sizeof(status_));
}

ModUserDomainEmail::~ModUserDomainEmail() {
  // @@protoc_insertion_point(destructor:micromsg.ModUserDomainEmail)
  SharedDtor();
}

void ModUserDomainEmail::SharedDtor() {
  if (this != internal_default_instance()) {
    delete email_;
  }
}

void ModUserDomainEmail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModUserDomainEmail::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModUserDomainEmail& ModUserDomainEmail::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

ModUserDomainEmail* ModUserDomainEmail::New(::google::protobuf::Arena* arena) const {
  ModUserDomainEmail* n = new ModUserDomainEmail;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModUserDomainEmail::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ModUserDomainEmail)
  if (has_email()) {
    GOOGLE_DCHECK(email_ != NULL);
    email_->::micromsg::SKBuiltinString_t::Clear();
  }
  status_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ModUserDomainEmail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ModUserDomainEmail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t Email = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_email()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ModUserDomainEmail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ModUserDomainEmail)
  return false;
#undef DO_
}

void ModUserDomainEmail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ModUserDomainEmail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Status = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  // required .micromsg.SKBuiltinString_t Email = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->email_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ModUserDomainEmail)
}

::google::protobuf::uint8* ModUserDomainEmail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ModUserDomainEmail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Status = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }

  // required .micromsg.SKBuiltinString_t Email = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->email_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ModUserDomainEmail)
  return target;
}

size_t ModUserDomainEmail::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.ModUserDomainEmail)
  size_t total_size = 0;

  if (has_email()) {
    // required .micromsg.SKBuiltinString_t Email = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->email_);
  }

  if (has_status()) {
    // required uint32 Status = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  return total_size;
}
size_t ModUserDomainEmail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ModUserDomainEmail)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.SKBuiltinString_t Email = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->email_);

    // required uint32 Status = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModUserDomainEmail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ModUserDomainEmail)
  GOOGLE_DCHECK_NE(&from, this);
  const ModUserDomainEmail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModUserDomainEmail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ModUserDomainEmail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ModUserDomainEmail)
    MergeFrom(*source);
  }
}

void ModUserDomainEmail::MergeFrom(const ModUserDomainEmail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ModUserDomainEmail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_email()->::micromsg::SKBuiltinString_t::MergeFrom(from.email());
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ModUserDomainEmail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ModUserDomainEmail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModUserDomainEmail::CopyFrom(const ModUserDomainEmail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ModUserDomainEmail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModUserDomainEmail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ModUserDomainEmail::Swap(ModUserDomainEmail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModUserDomainEmail::InternalSwap(ModUserDomainEmail* other) {
  std::swap(email_, other->email_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModUserDomainEmail::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModUserDomainEmail

// required uint32 Status = 1;
bool ModUserDomainEmail::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ModUserDomainEmail::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void ModUserDomainEmail::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void ModUserDomainEmail::clear_status() {
  status_ = 0u;
  clear_has_status();
}
::google::protobuf::uint32 ModUserDomainEmail::status() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserDomainEmail.Status)
  return status_;
}
void ModUserDomainEmail::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModUserDomainEmail.Status)
}

// required .micromsg.SKBuiltinString_t Email = 2;
bool ModUserDomainEmail::has_email() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModUserDomainEmail::set_has_email() {
  _has_bits_[0] |= 0x00000001u;
}
void ModUserDomainEmail::clear_has_email() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModUserDomainEmail::clear_email() {
  if (email_ != NULL) email_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_email();
}
const ::micromsg::SKBuiltinString_t& ModUserDomainEmail::email() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserDomainEmail.Email)
  return email_ != NULL ? *email_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* ModUserDomainEmail::mutable_email() {
  set_has_email();
  if (email_ == NULL) {
    email_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModUserDomainEmail.Email)
  return email_;
}
::micromsg::SKBuiltinString_t* ModUserDomainEmail::release_email() {
  // @@protoc_insertion_point(field_release:micromsg.ModUserDomainEmail.Email)
  clear_has_email();
  ::micromsg::SKBuiltinString_t* temp = email_;
  email_ = NULL;
  return temp;
}
void ModUserDomainEmail::set_allocated_email(::micromsg::SKBuiltinString_t* email) {
  delete email_;
  email_ = email;
  if (email) {
    set_has_email();
  } else {
    clear_has_email();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModUserDomainEmail.Email)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelUserDomainEmail::kUserNameFieldNumber;
const int DelUserDomainEmail::kEmailFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelUserDomainEmail::DelUserDomainEmail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.DelUserDomainEmail)
}
DelUserDomainEmail::DelUserDomainEmail(const DelUserDomainEmail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_username()) {
    username_ = new ::micromsg::SKBuiltinString_t(*from.username_);
  } else {
    username_ = NULL;
  }
  if (from.has_email()) {
    email_ = new ::micromsg::SKBuiltinString_t(*from.email_);
  } else {
    email_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.DelUserDomainEmail)
}

void DelUserDomainEmail::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&username_, 0, reinterpret_cast<char*>(&email_) -
    reinterpret_cast<char*>(&username_) + sizeof(email_));
}

DelUserDomainEmail::~DelUserDomainEmail() {
  // @@protoc_insertion_point(destructor:micromsg.DelUserDomainEmail)
  SharedDtor();
}

void DelUserDomainEmail::SharedDtor() {
  if (this != internal_default_instance()) {
    delete username_;
  }
  if (this != internal_default_instance()) {
    delete email_;
  }
}

void DelUserDomainEmail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelUserDomainEmail::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DelUserDomainEmail& DelUserDomainEmail::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

DelUserDomainEmail* DelUserDomainEmail::New(::google::protobuf::Arena* arena) const {
  DelUserDomainEmail* n = new DelUserDomainEmail;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DelUserDomainEmail::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.DelUserDomainEmail)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_username()) {
      GOOGLE_DCHECK(username_ != NULL);
      username_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_email()) {
      GOOGLE_DCHECK(email_ != NULL);
      email_->::micromsg::SKBuiltinString_t::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DelUserDomainEmail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.DelUserDomainEmail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.SKBuiltinString_t UserName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_username()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t Email = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_email()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.DelUserDomainEmail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.DelUserDomainEmail)
  return false;
#undef DO_
}

void DelUserDomainEmail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.DelUserDomainEmail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t UserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->username_, output);
  }

  // required .micromsg.SKBuiltinString_t Email = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->email_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.DelUserDomainEmail)
}

::google::protobuf::uint8* DelUserDomainEmail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.DelUserDomainEmail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t UserName = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->username_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t Email = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->email_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.DelUserDomainEmail)
  return target;
}

size_t DelUserDomainEmail::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.DelUserDomainEmail)
  size_t total_size = 0;

  if (has_username()) {
    // required .micromsg.SKBuiltinString_t UserName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->username_);
  }

  if (has_email()) {
    // required .micromsg.SKBuiltinString_t Email = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->email_);
  }

  return total_size;
}
size_t DelUserDomainEmail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.DelUserDomainEmail)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.SKBuiltinString_t UserName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->username_);

    // required .micromsg.SKBuiltinString_t Email = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->email_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelUserDomainEmail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.DelUserDomainEmail)
  GOOGLE_DCHECK_NE(&from, this);
  const DelUserDomainEmail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DelUserDomainEmail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.DelUserDomainEmail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.DelUserDomainEmail)
    MergeFrom(*source);
  }
}

void DelUserDomainEmail::MergeFrom(const DelUserDomainEmail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.DelUserDomainEmail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_username()->::micromsg::SKBuiltinString_t::MergeFrom(from.username());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_email()->::micromsg::SKBuiltinString_t::MergeFrom(from.email());
    }
  }
}

void DelUserDomainEmail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.DelUserDomainEmail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelUserDomainEmail::CopyFrom(const DelUserDomainEmail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.DelUserDomainEmail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelUserDomainEmail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void DelUserDomainEmail::Swap(DelUserDomainEmail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelUserDomainEmail::InternalSwap(DelUserDomainEmail* other) {
  std::swap(username_, other->username_);
  std::swap(email_, other->email_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DelUserDomainEmail::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DelUserDomainEmail

// required .micromsg.SKBuiltinString_t UserName = 1;
bool DelUserDomainEmail::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DelUserDomainEmail::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void DelUserDomainEmail::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void DelUserDomainEmail::clear_username() {
  if (username_ != NULL) username_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_username();
}
const ::micromsg::SKBuiltinString_t& DelUserDomainEmail::username() const {
  // @@protoc_insertion_point(field_get:micromsg.DelUserDomainEmail.UserName)
  return username_ != NULL ? *username_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* DelUserDomainEmail::mutable_username() {
  set_has_username();
  if (username_ == NULL) {
    username_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DelUserDomainEmail.UserName)
  return username_;
}
::micromsg::SKBuiltinString_t* DelUserDomainEmail::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.DelUserDomainEmail.UserName)
  clear_has_username();
  ::micromsg::SKBuiltinString_t* temp = username_;
  username_ = NULL;
  return temp;
}
void DelUserDomainEmail::set_allocated_username(::micromsg::SKBuiltinString_t* username) {
  delete username_;
  username_ = username;
  if (username) {
    set_has_username();
  } else {
    clear_has_username();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DelUserDomainEmail.UserName)
}

// required .micromsg.SKBuiltinString_t Email = 2;
bool DelUserDomainEmail::has_email() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DelUserDomainEmail::set_has_email() {
  _has_bits_[0] |= 0x00000002u;
}
void DelUserDomainEmail::clear_has_email() {
  _has_bits_[0] &= ~0x00000002u;
}
void DelUserDomainEmail::clear_email() {
  if (email_ != NULL) email_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_email();
}
const ::micromsg::SKBuiltinString_t& DelUserDomainEmail::email() const {
  // @@protoc_insertion_point(field_get:micromsg.DelUserDomainEmail.Email)
  return email_ != NULL ? *email_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* DelUserDomainEmail::mutable_email() {
  set_has_email();
  if (email_ == NULL) {
    email_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DelUserDomainEmail.Email)
  return email_;
}
::micromsg::SKBuiltinString_t* DelUserDomainEmail::release_email() {
  // @@protoc_insertion_point(field_release:micromsg.DelUserDomainEmail.Email)
  clear_has_email();
  ::micromsg::SKBuiltinString_t* temp = email_;
  email_ = NULL;
  return temp;
}
void DelUserDomainEmail::set_allocated_email(::micromsg::SKBuiltinString_t* email) {
  delete email_;
  email_ = email;
  if (email) {
    set_has_email();
  } else {
    clear_has_email();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DelUserDomainEmail.Email)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FunctionSwitch::kFunctionIdFieldNumber;
const int FunctionSwitch::kSwitchValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FunctionSwitch::FunctionSwitch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.FunctionSwitch)
}
FunctionSwitch::FunctionSwitch(const FunctionSwitch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&functionid_, &from.functionid_,
    reinterpret_cast<char*>(&switchvalue_) -
    reinterpret_cast<char*>(&functionid_) + sizeof(switchvalue_));
  // @@protoc_insertion_point(copy_constructor:micromsg.FunctionSwitch)
}

void FunctionSwitch::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&functionid_, 0, reinterpret_cast<char*>(&switchvalue_) -
    reinterpret_cast<char*>(&functionid_) + sizeof(switchvalue_));
}

FunctionSwitch::~FunctionSwitch() {
  // @@protoc_insertion_point(destructor:micromsg.FunctionSwitch)
  SharedDtor();
}

void FunctionSwitch::SharedDtor() {
}

void FunctionSwitch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FunctionSwitch::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FunctionSwitch& FunctionSwitch::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

FunctionSwitch* FunctionSwitch::New(::google::protobuf::Arena* arena) const {
  FunctionSwitch* n = new FunctionSwitch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FunctionSwitch::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.FunctionSwitch)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&functionid_, 0, reinterpret_cast<char*>(&switchvalue_) -
      reinterpret_cast<char*>(&functionid_) + sizeof(switchvalue_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FunctionSwitch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.FunctionSwitch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 FunctionId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_functionid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &functionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 SwitchValue = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_switchvalue();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &switchvalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.FunctionSwitch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.FunctionSwitch)
  return false;
#undef DO_
}

void FunctionSwitch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.FunctionSwitch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 FunctionId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->functionid(), output);
  }

  // required uint32 SwitchValue = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->switchvalue(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.FunctionSwitch)
}

::google::protobuf::uint8* FunctionSwitch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.FunctionSwitch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 FunctionId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->functionid(), target);
  }

  // required uint32 SwitchValue = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->switchvalue(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.FunctionSwitch)
  return target;
}

size_t FunctionSwitch::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.FunctionSwitch)
  size_t total_size = 0;

  if (has_functionid()) {
    // required uint32 FunctionId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->functionid());
  }

  if (has_switchvalue()) {
    // required uint32 SwitchValue = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->switchvalue());
  }

  return total_size;
}
size_t FunctionSwitch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.FunctionSwitch)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 FunctionId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->functionid());

    // required uint32 SwitchValue = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->switchvalue());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunctionSwitch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.FunctionSwitch)
  GOOGLE_DCHECK_NE(&from, this);
  const FunctionSwitch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FunctionSwitch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.FunctionSwitch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.FunctionSwitch)
    MergeFrom(*source);
  }
}

void FunctionSwitch::MergeFrom(const FunctionSwitch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.FunctionSwitch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      functionid_ = from.functionid_;
    }
    if (cached_has_bits & 0x00000002u) {
      switchvalue_ = from.switchvalue_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FunctionSwitch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.FunctionSwitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionSwitch::CopyFrom(const FunctionSwitch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.FunctionSwitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionSwitch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void FunctionSwitch::Swap(FunctionSwitch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FunctionSwitch::InternalSwap(FunctionSwitch* other) {
  std::swap(functionid_, other->functionid_);
  std::swap(switchvalue_, other->switchvalue_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FunctionSwitch::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FunctionSwitch

// required uint32 FunctionId = 1;
bool FunctionSwitch::has_functionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FunctionSwitch::set_has_functionid() {
  _has_bits_[0] |= 0x00000001u;
}
void FunctionSwitch::clear_has_functionid() {
  _has_bits_[0] &= ~0x00000001u;
}
void FunctionSwitch::clear_functionid() {
  functionid_ = 0u;
  clear_has_functionid();
}
::google::protobuf::uint32 FunctionSwitch::functionid() const {
  // @@protoc_insertion_point(field_get:micromsg.FunctionSwitch.FunctionId)
  return functionid_;
}
void FunctionSwitch::set_functionid(::google::protobuf::uint32 value) {
  set_has_functionid();
  functionid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.FunctionSwitch.FunctionId)
}

// required uint32 SwitchValue = 2;
bool FunctionSwitch::has_switchvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FunctionSwitch::set_has_switchvalue() {
  _has_bits_[0] |= 0x00000002u;
}
void FunctionSwitch::clear_has_switchvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
void FunctionSwitch::clear_switchvalue() {
  switchvalue_ = 0u;
  clear_has_switchvalue();
}
::google::protobuf::uint32 FunctionSwitch::switchvalue() const {
  // @@protoc_insertion_point(field_get:micromsg.FunctionSwitch.SwitchValue)
  return switchvalue_;
}
void FunctionSwitch::set_switchvalue(::google::protobuf::uint32 value) {
  set_has_switchvalue();
  switchvalue_ = value;
  // @@protoc_insertion_point(field_set:micromsg.FunctionSwitch.SwitchValue)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WebWxFunctionSwitch::kFunctionIdFieldNumber;
const int WebWxFunctionSwitch::kSwitchValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WebWxFunctionSwitch::WebWxFunctionSwitch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.WebWxFunctionSwitch)
}
WebWxFunctionSwitch::WebWxFunctionSwitch(const WebWxFunctionSwitch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&functionid_, &from.functionid_,
    reinterpret_cast<char*>(&switchvalue_) -
    reinterpret_cast<char*>(&functionid_) + sizeof(switchvalue_));
  // @@protoc_insertion_point(copy_constructor:micromsg.WebWxFunctionSwitch)
}

void WebWxFunctionSwitch::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&functionid_, 0, reinterpret_cast<char*>(&switchvalue_) -
    reinterpret_cast<char*>(&functionid_) + sizeof(switchvalue_));
}

WebWxFunctionSwitch::~WebWxFunctionSwitch() {
  // @@protoc_insertion_point(destructor:micromsg.WebWxFunctionSwitch)
  SharedDtor();
}

void WebWxFunctionSwitch::SharedDtor() {
}

void WebWxFunctionSwitch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WebWxFunctionSwitch::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WebWxFunctionSwitch& WebWxFunctionSwitch::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

WebWxFunctionSwitch* WebWxFunctionSwitch::New(::google::protobuf::Arena* arena) const {
  WebWxFunctionSwitch* n = new WebWxFunctionSwitch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WebWxFunctionSwitch::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.WebWxFunctionSwitch)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&functionid_, 0, reinterpret_cast<char*>(&switchvalue_) -
      reinterpret_cast<char*>(&functionid_) + sizeof(switchvalue_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WebWxFunctionSwitch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.WebWxFunctionSwitch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 FunctionId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_functionid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &functionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 SwitchValue = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_switchvalue();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &switchvalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.WebWxFunctionSwitch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.WebWxFunctionSwitch)
  return false;
#undef DO_
}

void WebWxFunctionSwitch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.WebWxFunctionSwitch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 FunctionId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->functionid(), output);
  }

  // required uint32 SwitchValue = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->switchvalue(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.WebWxFunctionSwitch)
}

::google::protobuf::uint8* WebWxFunctionSwitch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.WebWxFunctionSwitch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 FunctionId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->functionid(), target);
  }

  // required uint32 SwitchValue = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->switchvalue(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.WebWxFunctionSwitch)
  return target;
}

size_t WebWxFunctionSwitch::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.WebWxFunctionSwitch)
  size_t total_size = 0;

  if (has_functionid()) {
    // required uint32 FunctionId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->functionid());
  }

  if (has_switchvalue()) {
    // required uint32 SwitchValue = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->switchvalue());
  }

  return total_size;
}
size_t WebWxFunctionSwitch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.WebWxFunctionSwitch)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 FunctionId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->functionid());

    // required uint32 SwitchValue = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->switchvalue());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebWxFunctionSwitch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.WebWxFunctionSwitch)
  GOOGLE_DCHECK_NE(&from, this);
  const WebWxFunctionSwitch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WebWxFunctionSwitch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.WebWxFunctionSwitch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.WebWxFunctionSwitch)
    MergeFrom(*source);
  }
}

void WebWxFunctionSwitch::MergeFrom(const WebWxFunctionSwitch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.WebWxFunctionSwitch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      functionid_ = from.functionid_;
    }
    if (cached_has_bits & 0x00000002u) {
      switchvalue_ = from.switchvalue_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WebWxFunctionSwitch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.WebWxFunctionSwitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebWxFunctionSwitch::CopyFrom(const WebWxFunctionSwitch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.WebWxFunctionSwitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebWxFunctionSwitch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void WebWxFunctionSwitch::Swap(WebWxFunctionSwitch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WebWxFunctionSwitch::InternalSwap(WebWxFunctionSwitch* other) {
  std::swap(functionid_, other->functionid_);
  std::swap(switchvalue_, other->switchvalue_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WebWxFunctionSwitch::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WebWxFunctionSwitch

// required uint32 FunctionId = 1;
bool WebWxFunctionSwitch::has_functionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WebWxFunctionSwitch::set_has_functionid() {
  _has_bits_[0] |= 0x00000001u;
}
void WebWxFunctionSwitch::clear_has_functionid() {
  _has_bits_[0] &= ~0x00000001u;
}
void WebWxFunctionSwitch::clear_functionid() {
  functionid_ = 0u;
  clear_has_functionid();
}
::google::protobuf::uint32 WebWxFunctionSwitch::functionid() const {
  // @@protoc_insertion_point(field_get:micromsg.WebWxFunctionSwitch.FunctionId)
  return functionid_;
}
void WebWxFunctionSwitch::set_functionid(::google::protobuf::uint32 value) {
  set_has_functionid();
  functionid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.WebWxFunctionSwitch.FunctionId)
}

// required uint32 SwitchValue = 2;
bool WebWxFunctionSwitch::has_switchvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WebWxFunctionSwitch::set_has_switchvalue() {
  _has_bits_[0] |= 0x00000002u;
}
void WebWxFunctionSwitch::clear_has_switchvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
void WebWxFunctionSwitch::clear_switchvalue() {
  switchvalue_ = 0u;
  clear_has_switchvalue();
}
::google::protobuf::uint32 WebWxFunctionSwitch::switchvalue() const {
  // @@protoc_insertion_point(field_get:micromsg.WebWxFunctionSwitch.SwitchValue)
  return switchvalue_;
}
void WebWxFunctionSwitch::set_switchvalue(::google::protobuf::uint32 value) {
  set_has_switchvalue();
  switchvalue_ = value;
  // @@protoc_insertion_point(field_set:micromsg.WebWxFunctionSwitch.SwitchValue)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PluginInstall::kPluginFlagFieldNumber;
const int PluginInstall::kIsUnInstallFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PluginInstall::PluginInstall()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.PluginInstall)
}
PluginInstall::PluginInstall(const PluginInstall& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pluginflag_, &from.pluginflag_,
    reinterpret_cast<char*>(&isuninstall_) -
    reinterpret_cast<char*>(&pluginflag_) + sizeof(isuninstall_));
  // @@protoc_insertion_point(copy_constructor:micromsg.PluginInstall)
}

void PluginInstall::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pluginflag_, 0, reinterpret_cast<char*>(&isuninstall_) -
    reinterpret_cast<char*>(&pluginflag_) + sizeof(isuninstall_));
}

PluginInstall::~PluginInstall() {
  // @@protoc_insertion_point(destructor:micromsg.PluginInstall)
  SharedDtor();
}

void PluginInstall::SharedDtor() {
}

void PluginInstall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PluginInstall::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PluginInstall& PluginInstall::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

PluginInstall* PluginInstall::New(::google::protobuf::Arena* arena) const {
  PluginInstall* n = new PluginInstall;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PluginInstall::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.PluginInstall)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&pluginflag_, 0, reinterpret_cast<char*>(&isuninstall_) -
      reinterpret_cast<char*>(&pluginflag_) + sizeof(isuninstall_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PluginInstall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.PluginInstall)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 PluginFlag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_pluginflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pluginflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 IsUnInstall = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_isuninstall();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isuninstall_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.PluginInstall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.PluginInstall)
  return false;
#undef DO_
}

void PluginInstall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.PluginInstall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 PluginFlag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pluginflag(), output);
  }

  // required uint32 IsUnInstall = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->isuninstall(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.PluginInstall)
}

::google::protobuf::uint8* PluginInstall::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.PluginInstall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 PluginFlag = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pluginflag(), target);
  }

  // required uint32 IsUnInstall = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->isuninstall(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.PluginInstall)
  return target;
}

size_t PluginInstall::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.PluginInstall)
  size_t total_size = 0;

  if (has_pluginflag()) {
    // required uint32 PluginFlag = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pluginflag());
  }

  if (has_isuninstall()) {
    // required uint32 IsUnInstall = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->isuninstall());
  }

  return total_size;
}
size_t PluginInstall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.PluginInstall)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 PluginFlag = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pluginflag());

    // required uint32 IsUnInstall = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->isuninstall());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PluginInstall::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.PluginInstall)
  GOOGLE_DCHECK_NE(&from, this);
  const PluginInstall* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PluginInstall>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.PluginInstall)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.PluginInstall)
    MergeFrom(*source);
  }
}

void PluginInstall::MergeFrom(const PluginInstall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.PluginInstall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      pluginflag_ = from.pluginflag_;
    }
    if (cached_has_bits & 0x00000002u) {
      isuninstall_ = from.isuninstall_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PluginInstall::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.PluginInstall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PluginInstall::CopyFrom(const PluginInstall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.PluginInstall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PluginInstall::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void PluginInstall::Swap(PluginInstall* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PluginInstall::InternalSwap(PluginInstall* other) {
  std::swap(pluginflag_, other->pluginflag_);
  std::swap(isuninstall_, other->isuninstall_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PluginInstall::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PluginInstall

// required uint32 PluginFlag = 1;
bool PluginInstall::has_pluginflag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PluginInstall::set_has_pluginflag() {
  _has_bits_[0] |= 0x00000001u;
}
void PluginInstall::clear_has_pluginflag() {
  _has_bits_[0] &= ~0x00000001u;
}
void PluginInstall::clear_pluginflag() {
  pluginflag_ = 0u;
  clear_has_pluginflag();
}
::google::protobuf::uint32 PluginInstall::pluginflag() const {
  // @@protoc_insertion_point(field_get:micromsg.PluginInstall.PluginFlag)
  return pluginflag_;
}
void PluginInstall::set_pluginflag(::google::protobuf::uint32 value) {
  set_has_pluginflag();
  pluginflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PluginInstall.PluginFlag)
}

// required uint32 IsUnInstall = 2;
bool PluginInstall::has_isuninstall() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PluginInstall::set_has_isuninstall() {
  _has_bits_[0] |= 0x00000002u;
}
void PluginInstall::clear_has_isuninstall() {
  _has_bits_[0] &= ~0x00000002u;
}
void PluginInstall::clear_isuninstall() {
  isuninstall_ = 0u;
  clear_has_isuninstall();
}
::google::protobuf::uint32 PluginInstall::isuninstall() const {
  // @@protoc_insertion_point(field_get:micromsg.PluginInstall.IsUnInstall)
  return isuninstall_;
}
void PluginInstall::set_isuninstall(::google::protobuf::uint32 value) {
  set_has_isuninstall();
  isuninstall_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PluginInstall.IsUnInstall)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModTXNewsCategory::kTXNewsCategoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModTXNewsCategory::ModTXNewsCategory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ModTXNewsCategory)
}
ModTXNewsCategory::ModTXNewsCategory(const ModTXNewsCategory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  txnewscategory_ = from.txnewscategory_;
  // @@protoc_insertion_point(copy_constructor:micromsg.ModTXNewsCategory)
}

void ModTXNewsCategory::SharedCtor() {
  _cached_size_ = 0;
  txnewscategory_ = 0u;
}

ModTXNewsCategory::~ModTXNewsCategory() {
  // @@protoc_insertion_point(destructor:micromsg.ModTXNewsCategory)
  SharedDtor();
}

void ModTXNewsCategory::SharedDtor() {
}

void ModTXNewsCategory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModTXNewsCategory::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModTXNewsCategory& ModTXNewsCategory::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

ModTXNewsCategory* ModTXNewsCategory::New(::google::protobuf::Arena* arena) const {
  ModTXNewsCategory* n = new ModTXNewsCategory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModTXNewsCategory::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ModTXNewsCategory)
  txnewscategory_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ModTXNewsCategory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ModTXNewsCategory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 TXNewsCategory = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_txnewscategory();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txnewscategory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ModTXNewsCategory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ModTXNewsCategory)
  return false;
#undef DO_
}

void ModTXNewsCategory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ModTXNewsCategory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 TXNewsCategory = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->txnewscategory(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ModTXNewsCategory)
}

::google::protobuf::uint8* ModTXNewsCategory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ModTXNewsCategory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 TXNewsCategory = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->txnewscategory(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ModTXNewsCategory)
  return target;
}

size_t ModTXNewsCategory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ModTXNewsCategory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 TXNewsCategory = 1;
  if (has_txnewscategory()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->txnewscategory());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModTXNewsCategory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ModTXNewsCategory)
  GOOGLE_DCHECK_NE(&from, this);
  const ModTXNewsCategory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModTXNewsCategory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ModTXNewsCategory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ModTXNewsCategory)
    MergeFrom(*source);
  }
}

void ModTXNewsCategory::MergeFrom(const ModTXNewsCategory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ModTXNewsCategory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_txnewscategory()) {
    set_txnewscategory(from.txnewscategory());
  }
}

void ModTXNewsCategory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ModTXNewsCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModTXNewsCategory::CopyFrom(const ModTXNewsCategory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ModTXNewsCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModTXNewsCategory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ModTXNewsCategory::Swap(ModTXNewsCategory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModTXNewsCategory::InternalSwap(ModTXNewsCategory* other) {
  std::swap(txnewscategory_, other->txnewscategory_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModTXNewsCategory::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModTXNewsCategory

// required uint32 TXNewsCategory = 1;
bool ModTXNewsCategory::has_txnewscategory() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModTXNewsCategory::set_has_txnewscategory() {
  _has_bits_[0] |= 0x00000001u;
}
void ModTXNewsCategory::clear_has_txnewscategory() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModTXNewsCategory::clear_txnewscategory() {
  txnewscategory_ = 0u;
  clear_has_txnewscategory();
}
::google::protobuf::uint32 ModTXNewsCategory::txnewscategory() const {
  // @@protoc_insertion_point(field_get:micromsg.ModTXNewsCategory.TXNewsCategory)
  return txnewscategory_;
}
void ModTXNewsCategory::set_txnewscategory(::google::protobuf::uint32 value) {
  set_has_txnewscategory();
  txnewscategory_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModTXNewsCategory.TXNewsCategory)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MediaNoteOpLog::kWriteCountFieldNumber;
const int MediaNoteOpLog::kNoteTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MediaNoteOpLog::MediaNoteOpLog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.MediaNoteOpLog)
}
MediaNoteOpLog::MediaNoteOpLog(const MediaNoteOpLog& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&writecount_, &from.writecount_,
    reinterpret_cast<char*>(&notetype_) -
    reinterpret_cast<char*>(&writecount_) + sizeof(notetype_));
  // @@protoc_insertion_point(copy_constructor:micromsg.MediaNoteOpLog)
}

void MediaNoteOpLog::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&writecount_, 0, reinterpret_cast<char*>(&notetype_) -
    reinterpret_cast<char*>(&writecount_) + sizeof(notetype_));
}

MediaNoteOpLog::~MediaNoteOpLog() {
  // @@protoc_insertion_point(destructor:micromsg.MediaNoteOpLog)
  SharedDtor();
}

void MediaNoteOpLog::SharedDtor() {
}

void MediaNoteOpLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaNoteOpLog::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MediaNoteOpLog& MediaNoteOpLog::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

MediaNoteOpLog* MediaNoteOpLog::New(::google::protobuf::Arena* arena) const {
  MediaNoteOpLog* n = new MediaNoteOpLog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MediaNoteOpLog::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.MediaNoteOpLog)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&writecount_, 0, reinterpret_cast<char*>(&notetype_) -
      reinterpret_cast<char*>(&writecount_) + sizeof(notetype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MediaNoteOpLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.MediaNoteOpLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 WriteCount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_writecount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &writecount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 NoteType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_notetype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &notetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.MediaNoteOpLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.MediaNoteOpLog)
  return false;
#undef DO_
}

void MediaNoteOpLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.MediaNoteOpLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 WriteCount = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->writecount(), output);
  }

  // required int32 NoteType = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->notetype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.MediaNoteOpLog)
}

::google::protobuf::uint8* MediaNoteOpLog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.MediaNoteOpLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 WriteCount = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->writecount(), target);
  }

  // required int32 NoteType = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->notetype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.MediaNoteOpLog)
  return target;
}

size_t MediaNoteOpLog::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.MediaNoteOpLog)
  size_t total_size = 0;

  if (has_writecount()) {
    // required uint32 WriteCount = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->writecount());
  }

  if (has_notetype()) {
    // required int32 NoteType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->notetype());
  }

  return total_size;
}
size_t MediaNoteOpLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.MediaNoteOpLog)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 WriteCount = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->writecount());

    // required int32 NoteType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->notetype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaNoteOpLog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.MediaNoteOpLog)
  GOOGLE_DCHECK_NE(&from, this);
  const MediaNoteOpLog* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MediaNoteOpLog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.MediaNoteOpLog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.MediaNoteOpLog)
    MergeFrom(*source);
  }
}

void MediaNoteOpLog::MergeFrom(const MediaNoteOpLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.MediaNoteOpLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      writecount_ = from.writecount_;
    }
    if (cached_has_bits & 0x00000002u) {
      notetype_ = from.notetype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MediaNoteOpLog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.MediaNoteOpLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaNoteOpLog::CopyFrom(const MediaNoteOpLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.MediaNoteOpLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaNoteOpLog::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void MediaNoteOpLog::Swap(MediaNoteOpLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MediaNoteOpLog::InternalSwap(MediaNoteOpLog* other) {
  std::swap(writecount_, other->writecount_);
  std::swap(notetype_, other->notetype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MediaNoteOpLog::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MediaNoteOpLog

// required uint32 WriteCount = 1;
bool MediaNoteOpLog::has_writecount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MediaNoteOpLog::set_has_writecount() {
  _has_bits_[0] |= 0x00000001u;
}
void MediaNoteOpLog::clear_has_writecount() {
  _has_bits_[0] &= ~0x00000001u;
}
void MediaNoteOpLog::clear_writecount() {
  writecount_ = 0u;
  clear_has_writecount();
}
::google::protobuf::uint32 MediaNoteOpLog::writecount() const {
  // @@protoc_insertion_point(field_get:micromsg.MediaNoteOpLog.WriteCount)
  return writecount_;
}
void MediaNoteOpLog::set_writecount(::google::protobuf::uint32 value) {
  set_has_writecount();
  writecount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.MediaNoteOpLog.WriteCount)
}

// required int32 NoteType = 2;
bool MediaNoteOpLog::has_notetype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MediaNoteOpLog::set_has_notetype() {
  _has_bits_[0] |= 0x00000002u;
}
void MediaNoteOpLog::clear_has_notetype() {
  _has_bits_[0] &= ~0x00000002u;
}
void MediaNoteOpLog::clear_notetype() {
  notetype_ = 0;
  clear_has_notetype();
}
::google::protobuf::int32 MediaNoteOpLog::notetype() const {
  // @@protoc_insertion_point(field_get:micromsg.MediaNoteOpLog.NoteType)
  return notetype_;
}
void MediaNoteOpLog::set_notetype(::google::protobuf::int32 value) {
  set_has_notetype();
  notetype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.MediaNoteOpLog.NoteType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GmailSwitchOplog::kGmailAcctFieldNumber;
const int GmailSwitchOplog::kGmailSwitchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GmailSwitchOplog::GmailSwitchOplog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GmailSwitchOplog)
}
GmailSwitchOplog::GmailSwitchOplog(const GmailSwitchOplog& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gmailacct_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gmailacct()) {
    gmailacct_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gmailacct_);
  }
  gmailswitch_ = from.gmailswitch_;
  // @@protoc_insertion_point(copy_constructor:micromsg.GmailSwitchOplog)
}

void GmailSwitchOplog::SharedCtor() {
  _cached_size_ = 0;
  gmailacct_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gmailswitch_ = 0u;
}

GmailSwitchOplog::~GmailSwitchOplog() {
  // @@protoc_insertion_point(destructor:micromsg.GmailSwitchOplog)
  SharedDtor();
}

void GmailSwitchOplog::SharedDtor() {
  gmailacct_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GmailSwitchOplog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GmailSwitchOplog::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GmailSwitchOplog& GmailSwitchOplog::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

GmailSwitchOplog* GmailSwitchOplog::New(::google::protobuf::Arena* arena) const {
  GmailSwitchOplog* n = new GmailSwitchOplog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GmailSwitchOplog::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GmailSwitchOplog)
  if (has_gmailacct()) {
    GOOGLE_DCHECK(!gmailacct_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*gmailacct_.UnsafeRawStringPointer())->clear();
  }
  gmailswitch_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GmailSwitchOplog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GmailSwitchOplog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string GmailAcct = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gmailacct()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gmailacct().data(), this->gmailacct().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GmailSwitchOplog.GmailAcct");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 GmailSwitch = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_gmailswitch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmailswitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GmailSwitchOplog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GmailSwitchOplog)
  return false;
#undef DO_
}

void GmailSwitchOplog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GmailSwitchOplog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string GmailAcct = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmailacct().data(), this->gmailacct().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GmailSwitchOplog.GmailAcct");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gmailacct(), output);
  }

  // required uint32 GmailSwitch = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gmailswitch(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GmailSwitchOplog)
}

::google::protobuf::uint8* GmailSwitchOplog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GmailSwitchOplog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string GmailAcct = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmailacct().data(), this->gmailacct().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GmailSwitchOplog.GmailAcct");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gmailacct(), target);
  }

  // required uint32 GmailSwitch = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gmailswitch(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GmailSwitchOplog)
  return target;
}

size_t GmailSwitchOplog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GmailSwitchOplog)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 GmailSwitch = 2;
  if (has_gmailswitch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gmailswitch());
  }
  // optional string GmailAcct = 1;
  if (has_gmailacct()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gmailacct());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GmailSwitchOplog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GmailSwitchOplog)
  GOOGLE_DCHECK_NE(&from, this);
  const GmailSwitchOplog* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GmailSwitchOplog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GmailSwitchOplog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GmailSwitchOplog)
    MergeFrom(*source);
  }
}

void GmailSwitchOplog::MergeFrom(const GmailSwitchOplog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GmailSwitchOplog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_gmailacct();
      gmailacct_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gmailacct_);
    }
    if (cached_has_bits & 0x00000002u) {
      gmailswitch_ = from.gmailswitch_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GmailSwitchOplog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GmailSwitchOplog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GmailSwitchOplog::CopyFrom(const GmailSwitchOplog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GmailSwitchOplog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GmailSwitchOplog::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void GmailSwitchOplog::Swap(GmailSwitchOplog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GmailSwitchOplog::InternalSwap(GmailSwitchOplog* other) {
  gmailacct_.Swap(&other->gmailacct_);
  std::swap(gmailswitch_, other->gmailswitch_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GmailSwitchOplog::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GmailSwitchOplog

// optional string GmailAcct = 1;
bool GmailSwitchOplog::has_gmailacct() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GmailSwitchOplog::set_has_gmailacct() {
  _has_bits_[0] |= 0x00000001u;
}
void GmailSwitchOplog::clear_has_gmailacct() {
  _has_bits_[0] &= ~0x00000001u;
}
void GmailSwitchOplog::clear_gmailacct() {
  gmailacct_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gmailacct();
}
const ::std::string& GmailSwitchOplog::gmailacct() const {
  // @@protoc_insertion_point(field_get:micromsg.GmailSwitchOplog.GmailAcct)
  return gmailacct_.GetNoArena();
}
void GmailSwitchOplog::set_gmailacct(const ::std::string& value) {
  set_has_gmailacct();
  gmailacct_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GmailSwitchOplog.GmailAcct)
}
#if LANG_CXX11
void GmailSwitchOplog::set_gmailacct(::std::string&& value) {
  set_has_gmailacct();
  gmailacct_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GmailSwitchOplog.GmailAcct)
}
#endif
void GmailSwitchOplog::set_gmailacct(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gmailacct();
  gmailacct_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GmailSwitchOplog.GmailAcct)
}
void GmailSwitchOplog::set_gmailacct(const char* value, size_t size) {
  set_has_gmailacct();
  gmailacct_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GmailSwitchOplog.GmailAcct)
}
::std::string* GmailSwitchOplog::mutable_gmailacct() {
  set_has_gmailacct();
  // @@protoc_insertion_point(field_mutable:micromsg.GmailSwitchOplog.GmailAcct)
  return gmailacct_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GmailSwitchOplog::release_gmailacct() {
  // @@protoc_insertion_point(field_release:micromsg.GmailSwitchOplog.GmailAcct)
  clear_has_gmailacct();
  return gmailacct_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GmailSwitchOplog::set_allocated_gmailacct(::std::string* gmailacct) {
  if (gmailacct != NULL) {
    set_has_gmailacct();
  } else {
    clear_has_gmailacct();
  }
  gmailacct_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gmailacct);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GmailSwitchOplog.GmailAcct)
}

// required uint32 GmailSwitch = 2;
bool GmailSwitchOplog::has_gmailswitch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GmailSwitchOplog::set_has_gmailswitch() {
  _has_bits_[0] |= 0x00000002u;
}
void GmailSwitchOplog::clear_has_gmailswitch() {
  _has_bits_[0] &= ~0x00000002u;
}
void GmailSwitchOplog::clear_gmailswitch() {
  gmailswitch_ = 0u;
  clear_has_gmailswitch();
}
::google::protobuf::uint32 GmailSwitchOplog::gmailswitch() const {
  // @@protoc_insertion_point(field_get:micromsg.GmailSwitchOplog.GmailSwitch)
  return gmailswitch_;
}
void GmailSwitchOplog::set_gmailswitch(::google::protobuf::uint32 value) {
  set_has_gmailswitch();
  gmailswitch_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GmailSwitchOplog.GmailSwitch)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateStatOpLog::kOpCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateStatOpLog::UpdateStatOpLog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.UpdateStatOpLog)
}
UpdateStatOpLog::UpdateStatOpLog(const UpdateStatOpLog& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  opcode_ = from.opcode_;
  // @@protoc_insertion_point(copy_constructor:micromsg.UpdateStatOpLog)
}

void UpdateStatOpLog::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0u;
}

UpdateStatOpLog::~UpdateStatOpLog() {
  // @@protoc_insertion_point(destructor:micromsg.UpdateStatOpLog)
  SharedDtor();
}

void UpdateStatOpLog::SharedDtor() {
}

void UpdateStatOpLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateStatOpLog::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateStatOpLog& UpdateStatOpLog::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

UpdateStatOpLog* UpdateStatOpLog::New(::google::protobuf::Arena* arena) const {
  UpdateStatOpLog* n = new UpdateStatOpLog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateStatOpLog::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.UpdateStatOpLog)
  opcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UpdateStatOpLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.UpdateStatOpLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 OpCode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_opcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.UpdateStatOpLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.UpdateStatOpLog)
  return false;
#undef DO_
}

void UpdateStatOpLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.UpdateStatOpLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 OpCode = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->opcode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.UpdateStatOpLog)
}

::google::protobuf::uint8* UpdateStatOpLog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.UpdateStatOpLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 OpCode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->opcode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.UpdateStatOpLog)
  return target;
}

size_t UpdateStatOpLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.UpdateStatOpLog)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 OpCode = 1;
  if (has_opcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateStatOpLog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.UpdateStatOpLog)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateStatOpLog* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateStatOpLog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.UpdateStatOpLog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.UpdateStatOpLog)
    MergeFrom(*source);
  }
}

void UpdateStatOpLog::MergeFrom(const UpdateStatOpLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.UpdateStatOpLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_opcode()) {
    set_opcode(from.opcode());
  }
}

void UpdateStatOpLog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.UpdateStatOpLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateStatOpLog::CopyFrom(const UpdateStatOpLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.UpdateStatOpLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateStatOpLog::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void UpdateStatOpLog::Swap(UpdateStatOpLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateStatOpLog::InternalSwap(UpdateStatOpLog* other) {
  std::swap(opcode_, other->opcode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateStatOpLog::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateStatOpLog

// required uint32 OpCode = 1;
bool UpdateStatOpLog::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UpdateStatOpLog::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
void UpdateStatOpLog::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
void UpdateStatOpLog::clear_opcode() {
  opcode_ = 0u;
  clear_has_opcode();
}
::google::protobuf::uint32 UpdateStatOpLog::opcode() const {
  // @@protoc_insertion_point(field_get:micromsg.UpdateStatOpLog.OpCode)
  return opcode_;
}
void UpdateStatOpLog::set_opcode(::google::protobuf::uint32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UpdateStatOpLog.OpCode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KVStatItem::kKeyFieldNumber;
const int KVStatItem::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KVStatItem::KVStatItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.KVStatItem)
}
KVStatItem::KVStatItem(const KVStatItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  key_ = from.key_;
  // @@protoc_insertion_point(copy_constructor:micromsg.KVStatItem)
}

void KVStatItem::SharedCtor() {
  _cached_size_ = 0;
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_ = 0u;
}

KVStatItem::~KVStatItem() {
  // @@protoc_insertion_point(destructor:micromsg.KVStatItem)
  SharedDtor();
}

void KVStatItem::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KVStatItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KVStatItem::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KVStatItem& KVStatItem::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

KVStatItem* KVStatItem::New(::google::protobuf::Arena* arena) const {
  KVStatItem* n = new KVStatItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KVStatItem::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.KVStatItem)
  if (has_value()) {
    GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*value_.UnsafeRawStringPointer())->clear();
  }
  key_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool KVStatItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.KVStatItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_key();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.KVStatItem.Value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.KVStatItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.KVStatItem)
  return false;
#undef DO_
}

void KVStatItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.KVStatItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Key = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->key(), output);
  }

  // optional string Value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.KVStatItem.Value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.KVStatItem)
}

::google::protobuf::uint8* KVStatItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.KVStatItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Key = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->key(), target);
  }

  // optional string Value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.KVStatItem.Value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.KVStatItem)
  return target;
}

size_t KVStatItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.KVStatItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 Key = 1;
  if (has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->key());
  }
  // optional string Value = 2;
  if (has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KVStatItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.KVStatItem)
  GOOGLE_DCHECK_NE(&from, this);
  const KVStatItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KVStatItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.KVStatItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.KVStatItem)
    MergeFrom(*source);
  }
}

void KVStatItem::MergeFrom(const KVStatItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.KVStatItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (cached_has_bits & 0x00000002u) {
      key_ = from.key_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KVStatItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.KVStatItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KVStatItem::CopyFrom(const KVStatItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.KVStatItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KVStatItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void KVStatItem::Swap(KVStatItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KVStatItem::InternalSwap(KVStatItem* other) {
  value_.Swap(&other->value_);
  std::swap(key_, other->key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KVStatItem::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KVStatItem

// required uint32 Key = 1;
bool KVStatItem::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void KVStatItem::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
void KVStatItem::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void KVStatItem::clear_key() {
  key_ = 0u;
  clear_has_key();
}
::google::protobuf::uint32 KVStatItem::key() const {
  // @@protoc_insertion_point(field_get:micromsg.KVStatItem.Key)
  return key_;
}
void KVStatItem::set_key(::google::protobuf::uint32 value) {
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:micromsg.KVStatItem.Key)
}

// optional string Value = 2;
bool KVStatItem::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KVStatItem::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
void KVStatItem::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void KVStatItem::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& KVStatItem::value() const {
  // @@protoc_insertion_point(field_get:micromsg.KVStatItem.Value)
  return value_.GetNoArena();
}
void KVStatItem::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.KVStatItem.Value)
}
#if LANG_CXX11
void KVStatItem::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.KVStatItem.Value)
}
#endif
void KVStatItem::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.KVStatItem.Value)
}
void KVStatItem::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.KVStatItem.Value)
}
::std::string* KVStatItem::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:micromsg.KVStatItem.Value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KVStatItem::release_value() {
  // @@protoc_insertion_point(field_release:micromsg.KVStatItem.Value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KVStatItem::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:micromsg.KVStatItem.Value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KVStatOpLog::kCountFieldNumber;
const int KVStatOpLog::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KVStatOpLog::KVStatOpLog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.KVStatOpLog)
}
KVStatOpLog::KVStatOpLog(const KVStatOpLog& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:micromsg.KVStatOpLog)
}

void KVStatOpLog::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0u;
}

KVStatOpLog::~KVStatOpLog() {
  // @@protoc_insertion_point(destructor:micromsg.KVStatOpLog)
  SharedDtor();
}

void KVStatOpLog::SharedDtor() {
}

void KVStatOpLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KVStatOpLog::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KVStatOpLog& KVStatOpLog::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

KVStatOpLog* KVStatOpLog::New(::google::protobuf::Arena* arena) const {
  KVStatOpLog* n = new KVStatOpLog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KVStatOpLog::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.KVStatOpLog)
  list_.Clear();
  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool KVStatOpLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.KVStatOpLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.KVStatItem List = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.KVStatOpLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.KVStatOpLog)
  return false;
#undef DO_
}

void KVStatOpLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.KVStatOpLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  // repeated .micromsg.KVStatItem List = 2;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.KVStatOpLog)
}

::google::protobuf::uint8* KVStatOpLog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.KVStatOpLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }

  // repeated .micromsg.KVStatItem List = 2;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->list(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.KVStatOpLog)
  return target;
}

size_t KVStatOpLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.KVStatOpLog)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 Count = 1;
  if (has_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }
  // repeated .micromsg.KVStatItem List = 2;
  {
    unsigned int count = this->list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KVStatOpLog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.KVStatOpLog)
  GOOGLE_DCHECK_NE(&from, this);
  const KVStatOpLog* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KVStatOpLog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.KVStatOpLog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.KVStatOpLog)
    MergeFrom(*source);
  }
}

void KVStatOpLog::MergeFrom(const KVStatOpLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.KVStatOpLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  if (from.has_count()) {
    set_count(from.count());
  }
}

void KVStatOpLog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.KVStatOpLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KVStatOpLog::CopyFrom(const KVStatOpLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.KVStatOpLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KVStatOpLog::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void KVStatOpLog::Swap(KVStatOpLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KVStatOpLog::InternalSwap(KVStatOpLog* other) {
  list_.InternalSwap(&other->list_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KVStatOpLog::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KVStatOpLog

// required uint32 Count = 1;
bool KVStatOpLog::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KVStatOpLog::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
void KVStatOpLog::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void KVStatOpLog::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 KVStatOpLog::count() const {
  // @@protoc_insertion_point(field_get:micromsg.KVStatOpLog.Count)
  return count_;
}
void KVStatOpLog::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.KVStatOpLog.Count)
}

// repeated .micromsg.KVStatItem List = 2;
int KVStatOpLog::list_size() const {
  return list_.size();
}
void KVStatOpLog::clear_list() {
  list_.Clear();
}
const ::micromsg::KVStatItem& KVStatOpLog::list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.KVStatOpLog.List)
  return list_.Get(index);
}
::micromsg::KVStatItem* KVStatOpLog::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.KVStatOpLog.List)
  return list_.Mutable(index);
}
::micromsg::KVStatItem* KVStatOpLog::add_list() {
  // @@protoc_insertion_point(field_add:micromsg.KVStatOpLog.List)
  return list_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::KVStatItem >*
KVStatOpLog::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.KVStatOpLog.List)
  return &list_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::KVStatItem >&
KVStatOpLog::list() const {
  // @@protoc_insertion_point(field_list:micromsg.KVStatOpLog.List)
  return list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KVCmd::kKeyFieldNumber;
const int KVCmd::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KVCmd::KVCmd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.KVCmd)
}
KVCmd::KVCmd(const KVCmd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_value()) {
    value_ = new ::micromsg::SKBuiltinBuffer_t(*from.value_);
  } else {
    value_ = NULL;
  }
  key_ = from.key_;
  // @@protoc_insertion_point(copy_constructor:micromsg.KVCmd)
}

void KVCmd::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&value_, 0, reinterpret_cast<char*>(&key_) -
    reinterpret_cast<char*>(&value_) + sizeof(key_));
}

KVCmd::~KVCmd() {
  // @@protoc_insertion_point(destructor:micromsg.KVCmd)
  SharedDtor();
}

void KVCmd::SharedDtor() {
  if (this != internal_default_instance()) {
    delete value_;
  }
}

void KVCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KVCmd::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KVCmd& KVCmd::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

KVCmd* KVCmd::New(::google::protobuf::Arena* arena) const {
  KVCmd* n = new KVCmd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KVCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.KVCmd)
  if (has_value()) {
    GOOGLE_DCHECK(value_ != NULL);
    value_->::micromsg::SKBuiltinBuffer_t::Clear();
  }
  key_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool KVCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.KVCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_key();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t Value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.KVCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.KVCmd)
  return false;
#undef DO_
}

void KVCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.KVCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Key = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->key(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t Value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->value_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.KVCmd)
}

::google::protobuf::uint8* KVCmd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.KVCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Key = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->key(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t Value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->value_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.KVCmd)
  return target;
}

size_t KVCmd::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.KVCmd)
  size_t total_size = 0;

  if (has_value()) {
    // required .micromsg.SKBuiltinBuffer_t Value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);
  }

  if (has_key()) {
    // required uint32 Key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->key());
  }

  return total_size;
}
size_t KVCmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.KVCmd)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.SKBuiltinBuffer_t Value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);

    // required uint32 Key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->key());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KVCmd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.KVCmd)
  GOOGLE_DCHECK_NE(&from, this);
  const KVCmd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KVCmd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.KVCmd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.KVCmd)
    MergeFrom(*source);
  }
}

void KVCmd::MergeFrom(const KVCmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.KVCmd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_value()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.value());
    }
    if (cached_has_bits & 0x00000002u) {
      key_ = from.key_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KVCmd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.KVCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KVCmd::CopyFrom(const KVCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.KVCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KVCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_value()) {
    if (!this->value_->IsInitialized()) return false;
  }
  return true;
}

void KVCmd::Swap(KVCmd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KVCmd::InternalSwap(KVCmd* other) {
  std::swap(value_, other->value_);
  std::swap(key_, other->key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KVCmd::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KVCmd

// required uint32 Key = 1;
bool KVCmd::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void KVCmd::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
void KVCmd::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void KVCmd::clear_key() {
  key_ = 0u;
  clear_has_key();
}
::google::protobuf::uint32 KVCmd::key() const {
  // @@protoc_insertion_point(field_get:micromsg.KVCmd.Key)
  return key_;
}
void KVCmd::set_key(::google::protobuf::uint32 value) {
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:micromsg.KVCmd.Key)
}

// required .micromsg.SKBuiltinBuffer_t Value = 2;
bool KVCmd::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KVCmd::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
void KVCmd::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void KVCmd::clear_value() {
  if (value_ != NULL) value_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_value();
}
const ::micromsg::SKBuiltinBuffer_t& KVCmd::value() const {
  // @@protoc_insertion_point(field_get:micromsg.KVCmd.Value)
  return value_ != NULL ? *value_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* KVCmd::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    value_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.KVCmd.Value)
  return value_;
}
::micromsg::SKBuiltinBuffer_t* KVCmd::release_value() {
  // @@protoc_insertion_point(field_release:micromsg.KVCmd.Value)
  clear_has_value();
  ::micromsg::SKBuiltinBuffer_t* temp = value_;
  value_ = NULL;
  return temp;
}
void KVCmd::set_allocated_value(::micromsg::SKBuiltinBuffer_t* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.KVCmd.Value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ThemeOpLog::kKeyFieldNumber;
const int ThemeOpLog::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ThemeOpLog::ThemeOpLog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ThemeOpLog)
}
ThemeOpLog::ThemeOpLog(const ThemeOpLog& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  key_ = from.key_;
  // @@protoc_insertion_point(copy_constructor:micromsg.ThemeOpLog)
}

void ThemeOpLog::SharedCtor() {
  _cached_size_ = 0;
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_ = 0u;
}

ThemeOpLog::~ThemeOpLog() {
  // @@protoc_insertion_point(destructor:micromsg.ThemeOpLog)
  SharedDtor();
}

void ThemeOpLog::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ThemeOpLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThemeOpLog::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ThemeOpLog& ThemeOpLog::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

ThemeOpLog* ThemeOpLog::New(::google::protobuf::Arena* arena) const {
  ThemeOpLog* n = new ThemeOpLog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ThemeOpLog::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ThemeOpLog)
  if (has_value()) {
    GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*value_.UnsafeRawStringPointer())->clear();
  }
  key_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ThemeOpLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ThemeOpLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_key();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ThemeOpLog.Value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ThemeOpLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ThemeOpLog)
  return false;
#undef DO_
}

void ThemeOpLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ThemeOpLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Key = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->key(), output);
  }

  // optional string Value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ThemeOpLog.Value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ThemeOpLog)
}

::google::protobuf::uint8* ThemeOpLog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ThemeOpLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Key = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->key(), target);
  }

  // optional string Value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ThemeOpLog.Value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ThemeOpLog)
  return target;
}

size_t ThemeOpLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ThemeOpLog)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 Key = 1;
  if (has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->key());
  }
  // optional string Value = 2;
  if (has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThemeOpLog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ThemeOpLog)
  GOOGLE_DCHECK_NE(&from, this);
  const ThemeOpLog* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ThemeOpLog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ThemeOpLog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ThemeOpLog)
    MergeFrom(*source);
  }
}

void ThemeOpLog::MergeFrom(const ThemeOpLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ThemeOpLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (cached_has_bits & 0x00000002u) {
      key_ = from.key_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ThemeOpLog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ThemeOpLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThemeOpLog::CopyFrom(const ThemeOpLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ThemeOpLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemeOpLog::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void ThemeOpLog::Swap(ThemeOpLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ThemeOpLog::InternalSwap(ThemeOpLog* other) {
  value_.Swap(&other->value_);
  std::swap(key_, other->key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ThemeOpLog::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ThemeOpLog

// required uint32 Key = 1;
bool ThemeOpLog::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ThemeOpLog::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
void ThemeOpLog::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void ThemeOpLog::clear_key() {
  key_ = 0u;
  clear_has_key();
}
::google::protobuf::uint32 ThemeOpLog::key() const {
  // @@protoc_insertion_point(field_get:micromsg.ThemeOpLog.Key)
  return key_;
}
void ThemeOpLog::set_key(::google::protobuf::uint32 value) {
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ThemeOpLog.Key)
}

// optional string Value = 2;
bool ThemeOpLog::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ThemeOpLog::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
void ThemeOpLog::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void ThemeOpLog::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& ThemeOpLog::value() const {
  // @@protoc_insertion_point(field_get:micromsg.ThemeOpLog.Value)
  return value_.GetNoArena();
}
void ThemeOpLog::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ThemeOpLog.Value)
}
#if LANG_CXX11
void ThemeOpLog::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ThemeOpLog.Value)
}
#endif
void ThemeOpLog::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ThemeOpLog.Value)
}
void ThemeOpLog::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ThemeOpLog.Value)
}
::std::string* ThemeOpLog::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:micromsg.ThemeOpLog.Value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ThemeOpLog::release_value() {
  // @@protoc_insertion_point(field_release:micromsg.ThemeOpLog.Value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ThemeOpLog::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ThemeOpLog.Value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModDescription::kContactUsernameFieldNumber;
const int ModDescription::kDescFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModDescription::ModDescription()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ModDescription)
}
ModDescription::ModDescription(const ModDescription& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  contactusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_contactusername()) {
    contactusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contactusername_);
  }
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_desc()) {
    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.ModDescription)
}

void ModDescription::SharedCtor() {
  _cached_size_ = 0;
  contactusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ModDescription::~ModDescription() {
  // @@protoc_insertion_point(destructor:micromsg.ModDescription)
  SharedDtor();
}

void ModDescription::SharedDtor() {
  contactusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ModDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModDescription::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModDescription& ModDescription::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

ModDescription* ModDescription::New(::google::protobuf::Arena* arena) const {
  ModDescription* n = new ModDescription;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ModDescription)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_contactusername()) {
      GOOGLE_DCHECK(!contactusername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*contactusername_.UnsafeRawStringPointer())->clear();
    }
    if (has_desc()) {
      GOOGLE_DCHECK(!desc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*desc_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ModDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ModDescription)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ContactUsername = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contactusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contactusername().data(), this->contactusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModDescription.ContactUsername");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Desc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModDescription.Desc");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ModDescription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ModDescription)
  return false;
#undef DO_
}

void ModDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ModDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ContactUsername = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contactusername().data(), this->contactusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModDescription.ContactUsername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->contactusername(), output);
  }

  // optional string Desc = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModDescription.Desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->desc(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ModDescription)
}

::google::protobuf::uint8* ModDescription::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ModDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ContactUsername = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contactusername().data(), this->contactusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModDescription.ContactUsername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->contactusername(), target);
  }

  // optional string Desc = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModDescription.Desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->desc(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ModDescription)
  return target;
}

size_t ModDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ModDescription)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string ContactUsername = 1;
    if (has_contactusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contactusername());
    }

    // optional string Desc = 2;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModDescription::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ModDescription)
  GOOGLE_DCHECK_NE(&from, this);
  const ModDescription* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModDescription>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ModDescription)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ModDescription)
    MergeFrom(*source);
  }
}

void ModDescription::MergeFrom(const ModDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ModDescription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_contactusername();
      contactusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contactusername_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_desc();
      desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
    }
  }
}

void ModDescription::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ModDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModDescription::CopyFrom(const ModDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ModDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModDescription::IsInitialized() const {
  return true;
}

void ModDescription::Swap(ModDescription* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModDescription::InternalSwap(ModDescription* other) {
  contactusername_.Swap(&other->contactusername_);
  desc_.Swap(&other->desc_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModDescription::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModDescription

// optional string ContactUsername = 1;
bool ModDescription::has_contactusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModDescription::set_has_contactusername() {
  _has_bits_[0] |= 0x00000001u;
}
void ModDescription::clear_has_contactusername() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModDescription::clear_contactusername() {
  contactusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_contactusername();
}
const ::std::string& ModDescription::contactusername() const {
  // @@protoc_insertion_point(field_get:micromsg.ModDescription.ContactUsername)
  return contactusername_.GetNoArena();
}
void ModDescription::set_contactusername(const ::std::string& value) {
  set_has_contactusername();
  contactusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModDescription.ContactUsername)
}
#if LANG_CXX11
void ModDescription::set_contactusername(::std::string&& value) {
  set_has_contactusername();
  contactusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModDescription.ContactUsername)
}
#endif
void ModDescription::set_contactusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_contactusername();
  contactusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModDescription.ContactUsername)
}
void ModDescription::set_contactusername(const char* value, size_t size) {
  set_has_contactusername();
  contactusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModDescription.ContactUsername)
}
::std::string* ModDescription::mutable_contactusername() {
  set_has_contactusername();
  // @@protoc_insertion_point(field_mutable:micromsg.ModDescription.ContactUsername)
  return contactusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModDescription::release_contactusername() {
  // @@protoc_insertion_point(field_release:micromsg.ModDescription.ContactUsername)
  clear_has_contactusername();
  return contactusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModDescription::set_allocated_contactusername(::std::string* contactusername) {
  if (contactusername != NULL) {
    set_has_contactusername();
  } else {
    clear_has_contactusername();
  }
  contactusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contactusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModDescription.ContactUsername)
}

// optional string Desc = 2;
bool ModDescription::has_desc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ModDescription::set_has_desc() {
  _has_bits_[0] |= 0x00000002u;
}
void ModDescription::clear_has_desc() {
  _has_bits_[0] &= ~0x00000002u;
}
void ModDescription::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_desc();
}
const ::std::string& ModDescription::desc() const {
  // @@protoc_insertion_point(field_get:micromsg.ModDescription.Desc)
  return desc_.GetNoArena();
}
void ModDescription::set_desc(const ::std::string& value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModDescription.Desc)
}
#if LANG_CXX11
void ModDescription::set_desc(::std::string&& value) {
  set_has_desc();
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModDescription.Desc)
}
#endif
void ModDescription::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModDescription.Desc)
}
void ModDescription::set_desc(const char* value, size_t size) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModDescription.Desc)
}
::std::string* ModDescription::mutable_desc() {
  set_has_desc();
  // @@protoc_insertion_point(field_mutable:micromsg.ModDescription.Desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModDescription::release_desc() {
  // @@protoc_insertion_point(field_release:micromsg.ModDescription.Desc)
  clear_has_desc();
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModDescription::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModDescription.Desc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OplogRet::kCountFieldNumber;
const int OplogRet::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OplogRet::OplogRet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.OplogRet)
}
OplogRet::OplogRet(const OplogRet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      ret_(from.ret_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:micromsg.OplogRet)
}

void OplogRet::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0u;
}

OplogRet::~OplogRet() {
  // @@protoc_insertion_point(destructor:micromsg.OplogRet)
  SharedDtor();
}

void OplogRet::SharedDtor() {
}

void OplogRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OplogRet::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OplogRet& OplogRet::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

OplogRet* OplogRet::New(::google::protobuf::Arena* arena) const {
  OplogRet* n = new OplogRet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OplogRet::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.OplogRet)
  ret_.Clear();
  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OplogRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.OplogRet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 Ret = 2 [packed = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ret())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_ret())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.OplogRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.OplogRet)
  return false;
#undef DO_
}

void OplogRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.OplogRet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  // repeated int32 Ret = 2 [packed = true];
  if (this->ret_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ret_cached_byte_size_);
  }
  for (int i = 0, n = this->ret_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->ret(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.OplogRet)
}

::google::protobuf::uint8* OplogRet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.OplogRet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }

  // repeated int32 Ret = 2 [packed = true];
  if (this->ret_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _ret_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->ret_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.OplogRet)
  return target;
}

size_t OplogRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.OplogRet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 Count = 1;
  if (has_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }
  // repeated int32 Ret = 2 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->ret_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ret_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OplogRet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.OplogRet)
  GOOGLE_DCHECK_NE(&from, this);
  const OplogRet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OplogRet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.OplogRet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.OplogRet)
    MergeFrom(*source);
  }
}

void OplogRet::MergeFrom(const OplogRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.OplogRet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ret_.MergeFrom(from.ret_);
  if (from.has_count()) {
    set_count(from.count());
  }
}

void OplogRet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.OplogRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OplogRet::CopyFrom(const OplogRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.OplogRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OplogRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void OplogRet::Swap(OplogRet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OplogRet::InternalSwap(OplogRet* other) {
  ret_.InternalSwap(&other->ret_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OplogRet::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OplogRet

// required uint32 Count = 1;
bool OplogRet::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OplogRet::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
void OplogRet::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void OplogRet::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 OplogRet::count() const {
  // @@protoc_insertion_point(field_get:micromsg.OplogRet.Count)
  return count_;
}
void OplogRet::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.OplogRet.Count)
}

// repeated int32 Ret = 2 [packed = true];
int OplogRet::ret_size() const {
  return ret_.size();
}
void OplogRet::clear_ret() {
  ret_.Clear();
}
::google::protobuf::int32 OplogRet::ret(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.OplogRet.Ret)
  return ret_.Get(index);
}
void OplogRet::set_ret(int index, ::google::protobuf::int32 value) {
  ret_.Set(index, value);
  // @@protoc_insertion_point(field_set:micromsg.OplogRet.Ret)
}
void OplogRet::add_ret(::google::protobuf::int32 value) {
  ret_.Add(value);
  // @@protoc_insertion_point(field_add:micromsg.OplogRet.Ret)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
OplogRet::ret() const {
  // @@protoc_insertion_point(field_list:micromsg.OplogRet.Ret)
  return ret_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
OplogRet::mutable_ret() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.OplogRet.Ret)
  return &ret_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OplogRequest::kOplogFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OplogRequest::OplogRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.OplogRequest)
}
OplogRequest::OplogRequest(const OplogRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_oplog()) {
    oplog_ = new ::micromsg::CmdList(*from.oplog_);
  } else {
    oplog_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.OplogRequest)
}

void OplogRequest::SharedCtor() {
  _cached_size_ = 0;
  oplog_ = NULL;
}

OplogRequest::~OplogRequest() {
  // @@protoc_insertion_point(destructor:micromsg.OplogRequest)
  SharedDtor();
}

void OplogRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete oplog_;
  }
}

void OplogRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OplogRequest::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OplogRequest& OplogRequest::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

OplogRequest* OplogRequest::New(::google::protobuf::Arena* arena) const {
  OplogRequest* n = new OplogRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OplogRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.OplogRequest)
  if (has_oplog()) {
    GOOGLE_DCHECK(oplog_ != NULL);
    oplog_->::micromsg::CmdList::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OplogRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.OplogRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.CmdList Oplog = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oplog()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.OplogRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.OplogRequest)
  return false;
#undef DO_
}

void OplogRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.OplogRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.CmdList Oplog = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->oplog_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.OplogRequest)
}

::google::protobuf::uint8* OplogRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.OplogRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.CmdList Oplog = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->oplog_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.OplogRequest)
  return target;
}

size_t OplogRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.OplogRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.CmdList Oplog = 1;
  if (has_oplog()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->oplog_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OplogRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.OplogRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OplogRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OplogRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.OplogRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.OplogRequest)
    MergeFrom(*source);
  }
}

void OplogRequest::MergeFrom(const OplogRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.OplogRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_oplog()) {
    mutable_oplog()->::micromsg::CmdList::MergeFrom(from.oplog());
  }
}

void OplogRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.OplogRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OplogRequest::CopyFrom(const OplogRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.OplogRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OplogRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_oplog()) {
    if (!this->oplog_->IsInitialized()) return false;
  }
  return true;
}

void OplogRequest::Swap(OplogRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OplogRequest::InternalSwap(OplogRequest* other) {
  std::swap(oplog_, other->oplog_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OplogRequest::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OplogRequest

// required .micromsg.CmdList Oplog = 1;
bool OplogRequest::has_oplog() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OplogRequest::set_has_oplog() {
  _has_bits_[0] |= 0x00000001u;
}
void OplogRequest::clear_has_oplog() {
  _has_bits_[0] &= ~0x00000001u;
}
void OplogRequest::clear_oplog() {
  if (oplog_ != NULL) oplog_->::micromsg::CmdList::Clear();
  clear_has_oplog();
}
const ::micromsg::CmdList& OplogRequest::oplog() const {
  // @@protoc_insertion_point(field_get:micromsg.OplogRequest.Oplog)
  return oplog_ != NULL ? *oplog_
                         : *::micromsg::CmdList::internal_default_instance();
}
::micromsg::CmdList* OplogRequest::mutable_oplog() {
  set_has_oplog();
  if (oplog_ == NULL) {
    oplog_ = new ::micromsg::CmdList;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.OplogRequest.Oplog)
  return oplog_;
}
::micromsg::CmdList* OplogRequest::release_oplog() {
  // @@protoc_insertion_point(field_release:micromsg.OplogRequest.Oplog)
  clear_has_oplog();
  ::micromsg::CmdList* temp = oplog_;
  oplog_ = NULL;
  return temp;
}
void OplogRequest::set_allocated_oplog(::micromsg::CmdList* oplog) {
  delete oplog_;
  oplog_ = oplog;
  if (oplog) {
    set_has_oplog();
  } else {
    clear_has_oplog();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.OplogRequest.Oplog)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OplogResponse::kRetFieldNumber;
const int OplogResponse::kOplogRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OplogResponse::OplogResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmsync_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.OplogResponse)
}
OplogResponse::OplogResponse(const OplogResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_oplogret()) {
    oplogret_ = new ::micromsg::OplogRet(*from.oplogret_);
  } else {
    oplogret_ = NULL;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:micromsg.OplogResponse)
}

void OplogResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&oplogret_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&oplogret_) + sizeof(ret_));
}

OplogResponse::~OplogResponse() {
  // @@protoc_insertion_point(destructor:micromsg.OplogResponse)
  SharedDtor();
}

void OplogResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete oplogret_;
  }
}

void OplogResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OplogResponse::descriptor() {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OplogResponse& OplogResponse::default_instance() {
  protobuf_mmsync_2eproto::InitDefaults();
  return *internal_default_instance();
}

OplogResponse* OplogResponse::New(::google::protobuf::Arena* arena) const {
  OplogResponse* n = new OplogResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OplogResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.OplogResponse)
  if (has_oplogret()) {
    GOOGLE_DCHECK(oplogret_ != NULL);
    oplogret_->::micromsg::OplogRet::Clear();
  }
  ret_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OplogResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.OplogResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Ret = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.OplogRet OplogRet = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oplogret()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.OplogResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.OplogResponse)
  return false;
#undef DO_
}

void OplogResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.OplogResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Ret = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // required .micromsg.OplogRet OplogRet = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->oplogret_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.OplogResponse)
}

::google::protobuf::uint8* OplogResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.OplogResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Ret = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // required .micromsg.OplogRet OplogRet = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->oplogret_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.OplogResponse)
  return target;
}

size_t OplogResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.OplogResponse)
  size_t total_size = 0;

  if (has_oplogret()) {
    // required .micromsg.OplogRet OplogRet = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->oplogret_);
  }

  if (has_ret()) {
    // required int32 Ret = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  return total_size;
}
size_t OplogResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.OplogResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.OplogRet OplogRet = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->oplogret_);

    // required int32 Ret = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OplogResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.OplogResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OplogResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OplogResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.OplogResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.OplogResponse)
    MergeFrom(*source);
  }
}

void OplogResponse::MergeFrom(const OplogResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.OplogResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_oplogret()->::micromsg::OplogRet::MergeFrom(from.oplogret());
    }
    if (cached_has_bits & 0x00000002u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OplogResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.OplogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OplogResponse::CopyFrom(const OplogResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.OplogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OplogResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_oplogret()) {
    if (!this->oplogret_->IsInitialized()) return false;
  }
  return true;
}

void OplogResponse::Swap(OplogResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OplogResponse::InternalSwap(OplogResponse* other) {
  std::swap(oplogret_, other->oplogret_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OplogResponse::GetMetadata() const {
  protobuf_mmsync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmsync_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OplogResponse

// required int32 Ret = 1;
bool OplogResponse::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OplogResponse::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void OplogResponse::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void OplogResponse::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
::google::protobuf::int32 OplogResponse::ret() const {
  // @@protoc_insertion_point(field_get:micromsg.OplogResponse.Ret)
  return ret_;
}
void OplogResponse::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:micromsg.OplogResponse.Ret)
}

// required .micromsg.OplogRet OplogRet = 2;
bool OplogResponse::has_oplogret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OplogResponse::set_has_oplogret() {
  _has_bits_[0] |= 0x00000001u;
}
void OplogResponse::clear_has_oplogret() {
  _has_bits_[0] &= ~0x00000001u;
}
void OplogResponse::clear_oplogret() {
  if (oplogret_ != NULL) oplogret_->::micromsg::OplogRet::Clear();
  clear_has_oplogret();
}
const ::micromsg::OplogRet& OplogResponse::oplogret() const {
  // @@protoc_insertion_point(field_get:micromsg.OplogResponse.OplogRet)
  return oplogret_ != NULL ? *oplogret_
                         : *::micromsg::OplogRet::internal_default_instance();
}
::micromsg::OplogRet* OplogResponse::mutable_oplogret() {
  set_has_oplogret();
  if (oplogret_ == NULL) {
    oplogret_ = new ::micromsg::OplogRet;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.OplogResponse.OplogRet)
  return oplogret_;
}
::micromsg::OplogRet* OplogResponse::release_oplogret() {
  // @@protoc_insertion_point(field_release:micromsg.OplogResponse.OplogRet)
  clear_has_oplogret();
  ::micromsg::OplogRet* temp = oplogret_;
  oplogret_ = NULL;
  return temp;
}
void OplogResponse::set_allocated_oplogret(::micromsg::OplogRet* oplogret) {
  delete oplogret_;
  oplogret_ = oplogret;
  if (oplogret) {
    set_has_oplogret();
  } else {
    clear_has_oplogret();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.OplogResponse.OplogRet)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace micromsg

// @@protoc_insertion_point(global_scope)
