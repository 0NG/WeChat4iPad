// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmtalk.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mmtalk.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace micromsg {
class TalkRoomMemberDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TalkRoomMember> {
} _TalkRoomMember_default_instance_;
class TalkRelayAddrDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TalkRelayAddr> {
} _TalkRelayAddr_default_instance_;
class EnterTalkRoomReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EnterTalkRoomReq> {
} _EnterTalkRoomReq_default_instance_;
class EnterTalkRoomRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EnterTalkRoomResp> {
} _EnterTalkRoomResp_default_instance_;
class ExitTalkRoomReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ExitTalkRoomReq> {
} _ExitTalkRoomReq_default_instance_;
class ExitTalkRoomRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ExitTalkRoomResp> {
} _ExitTalkRoomResp_default_instance_;
class TalkMicActionReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TalkMicActionReq> {
} _TalkMicActionReq_default_instance_;
class TalkMicActionRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TalkMicActionResp> {
} _TalkMicActionResp_default_instance_;
class TalkNoopReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TalkNoopReq> {
} _TalkNoopReq_default_instance_;
class TalkNoopRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TalkNoopResp> {
} _TalkNoopResp_default_instance_;
class GetTalkRoomMemberReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetTalkRoomMemberReq> {
} _GetTalkRoomMemberReq_default_instance_;
class GetTalkRoomMemberRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetTalkRoomMemberResp> {
} _GetTalkRoomMemberResp_default_instance_;
class TalkInviteReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TalkInviteReq> {
} _TalkInviteReq_default_instance_;
class TalkInviteRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TalkInviteResp> {
} _TalkInviteResp_default_instance_;
class TalkStatReportDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TalkStatReportData> {
} _TalkStatReportData_default_instance_;
class TalkStatReportReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TalkStatReportReq> {
} _TalkStatReportReq_default_instance_;
class TalkStatReportRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TalkStatReportResp> {
} _TalkStatReportResp_default_instance_;
class CreateTalkRoomRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateTalkRoomRequest> {
} _CreateTalkRoomRequest_default_instance_;
class CreateTalkRoomResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateTalkRoomResponse> {
} _CreateTalkRoomResponse_default_instance_;
class AddTalkRoomMemberRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AddTalkRoomMemberRequest> {
} _AddTalkRoomMemberRequest_default_instance_;
class AddTalkRoomMemberResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AddTalkRoomMemberResponse> {
} _AddTalkRoomMemberResponse_default_instance_;
class DelTalkRoomMemberRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DelTalkRoomMemberRequest> {
} _DelTalkRoomMemberRequest_default_instance_;
class DelTalkRoomMemberResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DelTalkRoomMemberResponse> {
} _DelTalkRoomMemberResponse_default_instance_;

namespace protobuf_mmtalk_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[23];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkRoomMember, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkRoomMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkRoomMember, memberid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkRoomMember, username_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkRelayAddr, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkRelayAddr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkRelayAddr, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkRelayAddr, port_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTalkRoomReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTalkRoomReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTalkRoomReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTalkRoomReq, tousername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTalkRoomReq, scene_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTalkRoomResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTalkRoomResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTalkRoomResp, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTalkRoomResp, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTalkRoomResp, roomkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTalkRoomResp, micseq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTalkRoomResp, membernum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTalkRoomResp, memberlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTalkRoomResp, myroommemberid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTalkRoomResp, addrcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTalkRoomResp, addrlist_),
  0,
  2,
  1,
  3,
  4,
  ~0u,
  5,
  6,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitTalkRoomReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitTalkRoomReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitTalkRoomReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitTalkRoomReq, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitTalkRoomReq, roomkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitTalkRoomReq, tousername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitTalkRoomReq, scene_),
  1,
  3,
  2,
  0,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitTalkRoomResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitTalkRoomResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitTalkRoomResp, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMicActionReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMicActionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMicActionReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMicActionReq, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMicActionReq, roomkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMicActionReq, actiontype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMicActionReq, updatetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMicActionReq, scene_),
  0,
  2,
  1,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMicActionResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMicActionResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMicActionResp, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMicActionResp, micseq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMicActionResp, channelid_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkNoopReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkNoopReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkNoopReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkNoopReq, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkNoopReq, roomkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkNoopReq, updatetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkNoopReq, scene_),
  0,
  2,
  1,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkNoopResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkNoopResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkNoopResp, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTalkRoomMemberReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTalkRoomMemberReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTalkRoomMemberReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTalkRoomMemberReq, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTalkRoomMemberReq, roomkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTalkRoomMemberReq, scene_),
  0,
  2,
  1,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTalkRoomMemberResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTalkRoomMemberResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTalkRoomMemberResp, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTalkRoomMemberResp, micseq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTalkRoomMemberResp, membernum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTalkRoomMemberResp, memberlist_),
  0,
  1,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkInviteReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkInviteReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkInviteReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkInviteReq, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkInviteReq, roomkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkInviteReq, scene_),
  0,
  2,
  1,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkInviteResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkInviteResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkInviteResp, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkStatReportData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkStatReportData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkStatReportData, logid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkStatReportData, statreport_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkStatReportReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkStatReportReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkStatReportReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkStatReportReq, datanum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkStatReportReq, reportdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkStatReportReq, scene_),
  0,
  1,
  ~0u,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkStatReportResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkStatReportResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkStatReportResp, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTalkRoomRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTalkRoomRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTalkRoomRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTalkRoomRequest, topic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTalkRoomRequest, membercount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTalkRoomRequest, memberlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTalkRoomRequest, scene_),
  0,
  1,
  2,
  ~0u,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTalkRoomResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTalkRoomResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTalkRoomResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTalkRoomResponse, topic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTalkRoomResponse, pyinitial_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTalkRoomResponse, quanpin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTalkRoomResponse, membercount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTalkRoomResponse, memberlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTalkRoomResponse, talkroomname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTalkRoomResponse, imgbuf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTalkRoomResponse, bigheadimgurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTalkRoomResponse, smallheadimgurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTalkRoomResponse, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTalkRoomResponse, roomkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTalkRoomResponse, micseq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTalkRoomResponse, myroommemberid_),
  2,
  3,
  4,
  5,
  8,
  ~0u,
  6,
  7,
  0,
  1,
  9,
  10,
  11,
  12,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTalkRoomMemberRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTalkRoomMemberRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTalkRoomMemberRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTalkRoomMemberRequest, membercount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTalkRoomMemberRequest, memberlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTalkRoomMemberRequest, talkroomname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTalkRoomMemberRequest, scene_),
  0,
  2,
  ~0u,
  1,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTalkRoomMemberResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTalkRoomMemberResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTalkRoomMemberResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTalkRoomMemberResponse, membercount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTalkRoomMemberResponse, memberlist_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelTalkRoomMemberRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelTalkRoomMemberRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelTalkRoomMemberRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelTalkRoomMemberRequest, membercount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelTalkRoomMemberRequest, memberlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelTalkRoomMemberRequest, talkroomname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelTalkRoomMemberRequest, scene_),
  1,
  2,
  ~0u,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelTalkRoomMemberResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelTalkRoomMemberResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelTalkRoomMemberResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelTalkRoomMemberResponse, membercount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelTalkRoomMemberResponse, memberlist_),
  0,
  1,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(TalkRoomMember)},
  { 9, 16, sizeof(TalkRelayAddr)},
  { 18, 26, sizeof(EnterTalkRoomReq)},
  { 29, 43, sizeof(EnterTalkRoomResp)},
  { 52, 62, sizeof(ExitTalkRoomReq)},
  { 67, 73, sizeof(ExitTalkRoomResp)},
  { 74, 85, sizeof(TalkMicActionReq)},
  { 91, 99, sizeof(TalkMicActionResp)},
  { 102, 112, sizeof(TalkNoopReq)},
  { 117, 123, sizeof(TalkNoopResp)},
  { 124, 133, sizeof(GetTalkRoomMemberReq)},
  { 137, 146, sizeof(GetTalkRoomMemberResp)},
  { 150, 159, sizeof(TalkInviteReq)},
  { 163, 169, sizeof(TalkInviteResp)},
  { 170, 177, sizeof(TalkStatReportData)},
  { 179, 188, sizeof(TalkStatReportReq)},
  { 192, 198, sizeof(TalkStatReportResp)},
  { 199, 209, sizeof(CreateTalkRoomRequest)},
  { 214, 233, sizeof(CreateTalkRoomResponse)},
  { 247, 257, sizeof(AddTalkRoomMemberRequest)},
  { 262, 270, sizeof(AddTalkRoomMemberResponse)},
  { 273, 283, sizeof(DelTalkRoomMemberRequest)},
  { 288, 296, sizeof(DelTalkRoomMemberResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TalkRoomMember_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TalkRelayAddr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EnterTalkRoomReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EnterTalkRoomResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExitTalkRoomReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExitTalkRoomResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TalkMicActionReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TalkMicActionResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TalkNoopReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TalkNoopResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetTalkRoomMemberReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetTalkRoomMemberResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TalkInviteReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TalkInviteResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TalkStatReportData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TalkStatReportReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TalkStatReportResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateTalkRoomRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateTalkRoomResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AddTalkRoomMemberRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AddTalkRoomMemberResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DelTalkRoomMemberRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DelTalkRoomMemberResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "mmtalk.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 23);
}

}  // namespace

void TableStruct::Shutdown() {
  _TalkRoomMember_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _TalkRelayAddr_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _EnterTalkRoomReq_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _EnterTalkRoomResp_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _ExitTalkRoomReq_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _ExitTalkRoomResp_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _TalkMicActionReq_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _TalkMicActionResp_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _TalkNoopReq_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _TalkNoopResp_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _GetTalkRoomMemberReq_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _GetTalkRoomMemberResp_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _TalkInviteReq_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _TalkInviteResp_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _TalkStatReportData_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _TalkStatReportReq_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _TalkStatReportResp_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _CreateTalkRoomRequest_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _CreateTalkRoomResponse_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _AddTalkRoomMemberRequest_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _AddTalkRoomMemberResponse_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _DelTalkRoomMemberRequest_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _DelTalkRoomMemberResponse_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::micromsg::protobuf_mmbuiltintype_2eproto::InitDefaults();
  ::micromsg::protobuf_mmbase_2eproto::InitDefaults();
  _TalkRoomMember_default_instance_.DefaultConstruct();
  _TalkRelayAddr_default_instance_.DefaultConstruct();
  _EnterTalkRoomReq_default_instance_.DefaultConstruct();
  _EnterTalkRoomResp_default_instance_.DefaultConstruct();
  _ExitTalkRoomReq_default_instance_.DefaultConstruct();
  _ExitTalkRoomResp_default_instance_.DefaultConstruct();
  _TalkMicActionReq_default_instance_.DefaultConstruct();
  _TalkMicActionResp_default_instance_.DefaultConstruct();
  _TalkNoopReq_default_instance_.DefaultConstruct();
  _TalkNoopResp_default_instance_.DefaultConstruct();
  _GetTalkRoomMemberReq_default_instance_.DefaultConstruct();
  _GetTalkRoomMemberResp_default_instance_.DefaultConstruct();
  _TalkInviteReq_default_instance_.DefaultConstruct();
  _TalkInviteResp_default_instance_.DefaultConstruct();
  _TalkStatReportData_default_instance_.DefaultConstruct();
  _TalkStatReportReq_default_instance_.DefaultConstruct();
  _TalkStatReportResp_default_instance_.DefaultConstruct();
  _CreateTalkRoomRequest_default_instance_.DefaultConstruct();
  _CreateTalkRoomResponse_default_instance_.DefaultConstruct();
  _AddTalkRoomMemberRequest_default_instance_.DefaultConstruct();
  _AddTalkRoomMemberResponse_default_instance_.DefaultConstruct();
  _DelTalkRoomMemberRequest_default_instance_.DefaultConstruct();
  _DelTalkRoomMemberResponse_default_instance_.DefaultConstruct();
  _EnterTalkRoomReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _EnterTalkRoomResp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _ExitTalkRoomReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _ExitTalkRoomResp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _TalkMicActionReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _TalkMicActionResp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _TalkNoopReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _TalkNoopResp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetTalkRoomMemberReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GetTalkRoomMemberResp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _TalkInviteReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _TalkInviteResp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _TalkStatReportData_default_instance_.get_mutable()->statreport_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _TalkStatReportReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _TalkStatReportResp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _CreateTalkRoomRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _CreateTalkRoomRequest_default_instance_.get_mutable()->topic_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _CreateTalkRoomResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _CreateTalkRoomResponse_default_instance_.get_mutable()->topic_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _CreateTalkRoomResponse_default_instance_.get_mutable()->pyinitial_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _CreateTalkRoomResponse_default_instance_.get_mutable()->quanpin_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _CreateTalkRoomResponse_default_instance_.get_mutable()->talkroomname_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _CreateTalkRoomResponse_default_instance_.get_mutable()->imgbuf_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _AddTalkRoomMemberRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _AddTalkRoomMemberRequest_default_instance_.get_mutable()->talkroomname_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _AddTalkRoomMemberResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _DelTalkRoomMemberRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _DelTalkRoomMemberResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\014mmtalk.proto\022\010micromsg\032\023mmbuiltintype."
      "proto\032\014mmbase.proto\"4\n\016TalkRoomMember\022\020\n"
      "\010MemberID\030\001 \002(\005\022\020\n\010UserName\030\002 \001(\t\")\n\rTal"
      "kRelayAddr\022\n\n\002Ip\030\001 \002(\r\022\014\n\004Port\030\002 \002(\r\"a\n\020"
      "EnterTalkRoomReq\022*\n\013BaseRequest\030\001 \002(\0132\025."
      "micromsg.BaseRequest\022\022\n\nToUsername\030\002 \001(\t"
      "\022\r\n\005Scene\030\003 \001(\r\"\211\002\n\021EnterTalkRoomResp\022,\n"
      "\014BaseResponse\030\001 \002(\0132\026.micromsg.BaseRespo"
      "nse\022\016\n\006RoomId\030\002 \002(\005\022\017\n\007RoomKey\030\003 \002(\003\022\016\n\006"
      "MicSeq\030\004 \002(\005\022\021\n\tMemberNum\030\005 \002(\005\022,\n\nMembe"
      "rList\030\006 \003(\0132\030.micromsg.TalkRoomMember\022\026\n"
      "\016MyRoomMemberId\030\007 \002(\005\022\021\n\tAddrCount\030\010 \001(\005"
      "\022)\n\010AddrList\030\t \003(\0132\027.micromsg.TalkRelayA"
      "ddr\"\201\001\n\017ExitTalkRoomReq\022*\n\013BaseRequest\030\001"
      " \002(\0132\025.micromsg.BaseRequest\022\016\n\006RoomId\030\002 "
      "\002(\005\022\017\n\007RoomKey\030\003 \002(\003\022\022\n\nToUsername\030\004 \001(\t"
      "\022\r\n\005Scene\030\005 \001(\r\"@\n\020ExitTalkRoomResp\022,\n\014B"
      "aseResponse\030\001 \002(\0132\026.micromsg.BaseRespons"
      "e\"\226\001\n\020TalkMicActionReq\022*\n\013BaseRequest\030\001 "
      "\002(\0132\025.micromsg.BaseRequest\022\016\n\006RoomId\030\002 \002"
      "(\005\022\017\n\007RoomKey\030\003 \002(\003\022\022\n\nActionType\030\004 \002(\r\022"
      "\022\n\nUpdateTime\030\005 \001(\r\022\r\n\005Scene\030\006 \001(\r\"d\n\021Ta"
      "lkMicActionResp\022,\n\014BaseResponse\030\001 \002(\0132\026."
      "micromsg.BaseResponse\022\016\n\006MicSeq\030\002 \002(\005\022\021\n"
      "\tChannelId\030\003 \001(\r\"}\n\013TalkNoopReq\022*\n\013BaseR"
      "equest\030\001 \002(\0132\025.micromsg.BaseRequest\022\016\n\006R"
      "oomId\030\002 \002(\005\022\017\n\007RoomKey\030\003 \002(\003\022\022\n\nUpdateTi"
      "me\030\004 \001(\r\022\r\n\005Scene\030\005 \001(\r\"<\n\014TalkNoopResp\022"
      ",\n\014BaseResponse\030\001 \002(\0132\026.micromsg.BaseRes"
      "ponse\"r\n\024GetTalkRoomMemberReq\022*\n\013BaseReq"
      "uest\030\001 \002(\0132\025.micromsg.BaseRequest\022\016\n\006Roo"
      "mId\030\002 \002(\005\022\017\n\007RoomKey\030\003 \002(\003\022\r\n\005Scene\030\004 \001("
      "\r\"\226\001\n\025GetTalkRoomMemberResp\022,\n\014BaseRespo"
      "nse\030\001 \002(\0132\026.micromsg.BaseResponse\022\016\n\006Mic"
      "Seq\030\002 \002(\005\022\021\n\tMemberNum\030\003 \002(\005\022,\n\nMemberLi"
      "st\030\004 \003(\0132\030.micromsg.TalkRoomMember\"k\n\rTa"
      "lkInviteReq\022*\n\013BaseRequest\030\001 \002(\0132\025.micro"
      "msg.BaseRequest\022\016\n\006RoomId\030\002 \002(\005\022\017\n\007RoomK"
      "ey\030\003 \002(\003\022\r\n\005Scene\030\004 \001(\r\">\n\016TalkInviteRes"
      "p\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg.BaseR"
      "esponse\"T\n\022TalkStatReportData\022\r\n\005LogID\030\001"
      " \002(\005\022/\n\nStatReport\030\002 \002(\0132\033.micromsg.SKBu"
      "iltinString_t\"\221\001\n\021TalkStatReportReq\022*\n\013B"
      "aseRequest\030\001 \002(\0132\025.micromsg.BaseRequest\022"
      "\017\n\007DataNum\030\002 \002(\005\0220\n\nReportData\030\003 \003(\0132\034.m"
      "icromsg.TalkStatReportData\022\r\n\005Scene\030\004 \001("
      "\r\"B\n\022TalkStatReportResp\022,\n\014BaseResponse\030"
      "\001 \002(\0132\026.micromsg.BaseResponse\"\274\001\n\025Create"
      "TalkRoomRequest\022*\n\013BaseRequest\030\001 \002(\0132\025.m"
      "icromsg.BaseRequest\022*\n\005Topic\030\002 \002(\0132\033.mic"
      "romsg.SKBuiltinString_t\022\023\n\013MemberCount\030\003"
      " \002(\r\022\'\n\nMemberList\030\004 \003(\0132\023.micromsg.Memb"
      "erReq\022\r\n\005Scene\030\005 \001(\r\"\350\003\n\026CreateTalkRoomR"
      "esponse\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg"
      ".BaseResponse\022*\n\005Topic\030\002 \002(\0132\033.micromsg."
      "SKBuiltinString_t\022.\n\tPYInitial\030\003 \002(\0132\033.m"
      "icromsg.SKBuiltinString_t\022,\n\007QuanPin\030\004 \002"
      "(\0132\033.micromsg.SKBuiltinString_t\022\023\n\013Membe"
      "rCount\030\005 \002(\r\022(\n\nMemberList\030\006 \003(\0132\024.micro"
      "msg.MemberResp\0221\n\014TalkRoomName\030\007 \002(\0132\033.m"
      "icromsg.SKBuiltinString_t\022+\n\006ImgBuf\030\010 \002("
      "\0132\033.micromsg.SKBuiltinBuffer_t\022\025\n\rBigHea"
      "dImgUrl\030\t \001(\t\022\027\n\017SmallHeadImgUrl\030\n \001(\t\022\016"
      "\n\006RoomId\030\013 \002(\005\022\017\n\007RoomKey\030\014 \002(\003\022\016\n\006MicSe"
      "q\030\r \002(\005\022\026\n\016MyRoomMemberId\030\016 \002(\005\"\306\001\n\030AddT"
      "alkRoomMemberRequest\022*\n\013BaseRequest\030\001 \002("
      "\0132\025.micromsg.BaseRequest\022\023\n\013MemberCount\030"
      "\002 \002(\r\022\'\n\nMemberList\030\003 \003(\0132\023.micromsg.Mem"
      "berReq\0221\n\014TalkRoomName\030\004 \002(\0132\033.micromsg."
      "SKBuiltinString_t\022\r\n\005Scene\030\005 \001(\r\"\210\001\n\031Add"
      "TalkRoomMemberResponse\022,\n\014BaseResponse\030\001"
      " \002(\0132\026.micromsg.BaseResponse\022\023\n\013MemberCo"
      "unt\030\002 \002(\r\022(\n\nMemberList\030\003 \003(\0132\024.micromsg"
      ".MemberResp\"\254\001\n\030DelTalkRoomMemberRequest"
      "\022*\n\013BaseRequest\030\001 \002(\0132\025.micromsg.BaseReq"
      "uest\022\023\n\013MemberCount\030\002 \002(\r\022*\n\nMemberList\030"
      "\003 \003(\0132\026.micromsg.DelMemberReq\022\024\n\014TalkRoo"
      "mName\030\004 \001(\t\022\r\n\005Scene\030\005 \001(\r\"\213\001\n\031DelTalkRo"
      "omMemberResponse\022,\n\014BaseResponse\030\001 \002(\0132\026"
      ".micromsg.BaseResponse\022\023\n\013MemberCount\030\002 "
      "\002(\r\022+\n\nMemberList\030\003 \003(\0132\027.micromsg.DelMe"
      "mberResp"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3248);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mmtalk.proto", &protobuf_RegisterTypes);
  ::micromsg::protobuf_mmbuiltintype_2eproto::AddDescriptors();
  ::micromsg::protobuf_mmbase_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_mmtalk_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TalkRoomMember::kMemberIDFieldNumber;
const int TalkRoomMember::kUserNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TalkRoomMember::TalkRoomMember()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmtalk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.TalkRoomMember)
}
TalkRoomMember::TalkRoomMember(const TalkRoomMember& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  memberid_ = from.memberid_;
  // @@protoc_insertion_point(copy_constructor:micromsg.TalkRoomMember)
}

void TalkRoomMember::SharedCtor() {
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  memberid_ = 0;
}

TalkRoomMember::~TalkRoomMember() {
  // @@protoc_insertion_point(destructor:micromsg.TalkRoomMember)
  SharedDtor();
}

void TalkRoomMember::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TalkRoomMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TalkRoomMember::descriptor() {
  protobuf_mmtalk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmtalk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TalkRoomMember& TalkRoomMember::default_instance() {
  protobuf_mmtalk_2eproto::InitDefaults();
  return *internal_default_instance();
}

TalkRoomMember* TalkRoomMember::New(::google::protobuf::Arena* arena) const {
  TalkRoomMember* n = new TalkRoomMember;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TalkRoomMember::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.TalkRoomMember)
  if (has_username()) {
    GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*username_.UnsafeRawStringPointer())->clear();
  }
  memberid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TalkRoomMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.TalkRoomMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 MemberID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_memberid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &memberid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string UserName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.TalkRoomMember.UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.TalkRoomMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.TalkRoomMember)
  return false;
#undef DO_
}

void TalkRoomMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.TalkRoomMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 MemberID = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->memberid(), output);
  }

  // optional string UserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.TalkRoomMember.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.TalkRoomMember)
}

::google::protobuf::uint8* TalkRoomMember::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.TalkRoomMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 MemberID = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->memberid(), target);
  }

  // optional string UserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.TalkRoomMember.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.TalkRoomMember)
  return target;
}

size_t TalkRoomMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.TalkRoomMember)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required int32 MemberID = 1;
  if (has_memberid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->memberid());
  }
  // optional string UserName = 2;
  if (has_username()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TalkRoomMember::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.TalkRoomMember)
  GOOGLE_DCHECK_NE(&from, this);
  const TalkRoomMember* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TalkRoomMember>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.TalkRoomMember)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.TalkRoomMember)
    MergeFrom(*source);
  }
}

void TalkRoomMember::MergeFrom(const TalkRoomMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.TalkRoomMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      memberid_ = from.memberid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TalkRoomMember::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.TalkRoomMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TalkRoomMember::CopyFrom(const TalkRoomMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.TalkRoomMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TalkRoomMember::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void TalkRoomMember::Swap(TalkRoomMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TalkRoomMember::InternalSwap(TalkRoomMember* other) {
  username_.Swap(&other->username_);
  std::swap(memberid_, other->memberid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TalkRoomMember::GetMetadata() const {
  protobuf_mmtalk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmtalk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TalkRoomMember

// required int32 MemberID = 1;
bool TalkRoomMember::has_memberid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TalkRoomMember::set_has_memberid() {
  _has_bits_[0] |= 0x00000002u;
}
void TalkRoomMember::clear_has_memberid() {
  _has_bits_[0] &= ~0x00000002u;
}
void TalkRoomMember::clear_memberid() {
  memberid_ = 0;
  clear_has_memberid();
}
::google::protobuf::int32 TalkRoomMember::memberid() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkRoomMember.MemberID)
  return memberid_;
}
void TalkRoomMember::set_memberid(::google::protobuf::int32 value) {
  set_has_memberid();
  memberid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.TalkRoomMember.MemberID)
}

// optional string UserName = 2;
bool TalkRoomMember::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TalkRoomMember::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void TalkRoomMember::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void TalkRoomMember::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& TalkRoomMember::username() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkRoomMember.UserName)
  return username_.GetNoArena();
}
void TalkRoomMember::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.TalkRoomMember.UserName)
}
#if LANG_CXX11
void TalkRoomMember::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.TalkRoomMember.UserName)
}
#endif
void TalkRoomMember::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.TalkRoomMember.UserName)
}
void TalkRoomMember::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.TalkRoomMember.UserName)
}
::std::string* TalkRoomMember::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.TalkRoomMember.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TalkRoomMember::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.TalkRoomMember.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TalkRoomMember::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.TalkRoomMember.UserName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TalkRelayAddr::kIpFieldNumber;
const int TalkRelayAddr::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TalkRelayAddr::TalkRelayAddr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmtalk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.TalkRelayAddr)
}
TalkRelayAddr::TalkRelayAddr(const TalkRelayAddr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ip_, &from.ip_,
    reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&ip_) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:micromsg.TalkRelayAddr)
}

void TalkRelayAddr::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ip_, 0, reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&ip_) + sizeof(port_));
}

TalkRelayAddr::~TalkRelayAddr() {
  // @@protoc_insertion_point(destructor:micromsg.TalkRelayAddr)
  SharedDtor();
}

void TalkRelayAddr::SharedDtor() {
}

void TalkRelayAddr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TalkRelayAddr::descriptor() {
  protobuf_mmtalk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmtalk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TalkRelayAddr& TalkRelayAddr::default_instance() {
  protobuf_mmtalk_2eproto::InitDefaults();
  return *internal_default_instance();
}

TalkRelayAddr* TalkRelayAddr::New(::google::protobuf::Arena* arena) const {
  TalkRelayAddr* n = new TalkRelayAddr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TalkRelayAddr::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.TalkRelayAddr)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&ip_, 0, reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&ip_) + sizeof(port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TalkRelayAddr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.TalkRelayAddr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.TalkRelayAddr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.TalkRelayAddr)
  return false;
#undef DO_
}

void TalkRelayAddr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.TalkRelayAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ip(), output);
  }

  // required uint32 Port = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.TalkRelayAddr)
}

::google::protobuf::uint8* TalkRelayAddr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.TalkRelayAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Ip = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ip(), target);
  }

  // required uint32 Port = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.TalkRelayAddr)
  return target;
}

size_t TalkRelayAddr::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.TalkRelayAddr)
  size_t total_size = 0;

  if (has_ip()) {
    // required uint32 Ip = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ip());
  }

  if (has_port()) {
    // required uint32 Port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  return total_size;
}
size_t TalkRelayAddr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.TalkRelayAddr)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 Ip = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ip());

    // required uint32 Port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TalkRelayAddr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.TalkRelayAddr)
  GOOGLE_DCHECK_NE(&from, this);
  const TalkRelayAddr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TalkRelayAddr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.TalkRelayAddr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.TalkRelayAddr)
    MergeFrom(*source);
  }
}

void TalkRelayAddr::MergeFrom(const TalkRelayAddr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.TalkRelayAddr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      ip_ = from.ip_;
    }
    if (cached_has_bits & 0x00000002u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TalkRelayAddr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.TalkRelayAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TalkRelayAddr::CopyFrom(const TalkRelayAddr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.TalkRelayAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TalkRelayAddr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void TalkRelayAddr::Swap(TalkRelayAddr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TalkRelayAddr::InternalSwap(TalkRelayAddr* other) {
  std::swap(ip_, other->ip_);
  std::swap(port_, other->port_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TalkRelayAddr::GetMetadata() const {
  protobuf_mmtalk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmtalk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TalkRelayAddr

// required uint32 Ip = 1;
bool TalkRelayAddr::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TalkRelayAddr::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
void TalkRelayAddr::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
void TalkRelayAddr::clear_ip() {
  ip_ = 0u;
  clear_has_ip();
}
::google::protobuf::uint32 TalkRelayAddr::ip() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkRelayAddr.Ip)
  return ip_;
}
void TalkRelayAddr::set_ip(::google::protobuf::uint32 value) {
  set_has_ip();
  ip_ = value;
  // @@protoc_insertion_point(field_set:micromsg.TalkRelayAddr.Ip)
}

// required uint32 Port = 2;
bool TalkRelayAddr::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TalkRelayAddr::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
void TalkRelayAddr::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
void TalkRelayAddr::clear_port() {
  port_ = 0u;
  clear_has_port();
}
::google::protobuf::uint32 TalkRelayAddr::port() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkRelayAddr.Port)
  return port_;
}
void TalkRelayAddr::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:micromsg.TalkRelayAddr.Port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnterTalkRoomReq::kBaseRequestFieldNumber;
const int EnterTalkRoomReq::kToUsernameFieldNumber;
const int EnterTalkRoomReq::kSceneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnterTalkRoomReq::EnterTalkRoomReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmtalk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.EnterTalkRoomReq)
}
EnterTalkRoomReq::EnterTalkRoomReq(const EnterTalkRoomReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tousername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tousername()) {
    tousername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tousername_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  scene_ = from.scene_;
  // @@protoc_insertion_point(copy_constructor:micromsg.EnterTalkRoomReq)
}

void EnterTalkRoomReq::SharedCtor() {
  _cached_size_ = 0;
  tousername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&scene_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(scene_));
}

EnterTalkRoomReq::~EnterTalkRoomReq() {
  // @@protoc_insertion_point(destructor:micromsg.EnterTalkRoomReq)
  SharedDtor();
}

void EnterTalkRoomReq::SharedDtor() {
  tousername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void EnterTalkRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterTalkRoomReq::descriptor() {
  protobuf_mmtalk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmtalk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EnterTalkRoomReq& EnterTalkRoomReq::default_instance() {
  protobuf_mmtalk_2eproto::InitDefaults();
  return *internal_default_instance();
}

EnterTalkRoomReq* EnterTalkRoomReq::New(::google::protobuf::Arena* arena) const {
  EnterTalkRoomReq* n = new EnterTalkRoomReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnterTalkRoomReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.EnterTalkRoomReq)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_tousername()) {
      GOOGLE_DCHECK(!tousername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tousername_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  scene_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EnterTalkRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.EnterTalkRoomReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ToUsername = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tousername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tousername().data(), this->tousername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.EnterTalkRoomReq.ToUsername");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Scene = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_scene();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.EnterTalkRoomReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.EnterTalkRoomReq)
  return false;
#undef DO_
}

void EnterTalkRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.EnterTalkRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string ToUsername = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tousername().data(), this->tousername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EnterTalkRoomReq.ToUsername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tousername(), output);
  }

  // optional uint32 Scene = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->scene(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.EnterTalkRoomReq)
}

::google::protobuf::uint8* EnterTalkRoomReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.EnterTalkRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string ToUsername = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tousername().data(), this->tousername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.EnterTalkRoomReq.ToUsername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tousername(), target);
  }

  // optional uint32 Scene = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->scene(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.EnterTalkRoomReq)
  return target;
}

size_t EnterTalkRoomReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.EnterTalkRoomReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  // optional string ToUsername = 2;
  if (has_tousername()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tousername());
  }

  // optional uint32 Scene = 3;
  if (has_scene()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterTalkRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.EnterTalkRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  const EnterTalkRoomReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EnterTalkRoomReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.EnterTalkRoomReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.EnterTalkRoomReq)
    MergeFrom(*source);
  }
}

void EnterTalkRoomReq::MergeFrom(const EnterTalkRoomReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.EnterTalkRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_tousername();
      tousername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tousername_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000004u) {
      scene_ = from.scene_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EnterTalkRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.EnterTalkRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterTalkRoomReq::CopyFrom(const EnterTalkRoomReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.EnterTalkRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterTalkRoomReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void EnterTalkRoomReq::Swap(EnterTalkRoomReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnterTalkRoomReq::InternalSwap(EnterTalkRoomReq* other) {
  tousername_.Swap(&other->tousername_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(scene_, other->scene_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnterTalkRoomReq::GetMetadata() const {
  protobuf_mmtalk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmtalk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EnterTalkRoomReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool EnterTalkRoomReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EnterTalkRoomReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void EnterTalkRoomReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void EnterTalkRoomReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& EnterTalkRoomReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.EnterTalkRoomReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* EnterTalkRoomReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.EnterTalkRoomReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* EnterTalkRoomReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.EnterTalkRoomReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void EnterTalkRoomReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.EnterTalkRoomReq.BaseRequest)
}

// optional string ToUsername = 2;
bool EnterTalkRoomReq::has_tousername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EnterTalkRoomReq::set_has_tousername() {
  _has_bits_[0] |= 0x00000001u;
}
void EnterTalkRoomReq::clear_has_tousername() {
  _has_bits_[0] &= ~0x00000001u;
}
void EnterTalkRoomReq::clear_tousername() {
  tousername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tousername();
}
const ::std::string& EnterTalkRoomReq::tousername() const {
  // @@protoc_insertion_point(field_get:micromsg.EnterTalkRoomReq.ToUsername)
  return tousername_.GetNoArena();
}
void EnterTalkRoomReq::set_tousername(const ::std::string& value) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EnterTalkRoomReq.ToUsername)
}
#if LANG_CXX11
void EnterTalkRoomReq::set_tousername(::std::string&& value) {
  set_has_tousername();
  tousername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EnterTalkRoomReq.ToUsername)
}
#endif
void EnterTalkRoomReq::set_tousername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EnterTalkRoomReq.ToUsername)
}
void EnterTalkRoomReq::set_tousername(const char* value, size_t size) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EnterTalkRoomReq.ToUsername)
}
::std::string* EnterTalkRoomReq::mutable_tousername() {
  set_has_tousername();
  // @@protoc_insertion_point(field_mutable:micromsg.EnterTalkRoomReq.ToUsername)
  return tousername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EnterTalkRoomReq::release_tousername() {
  // @@protoc_insertion_point(field_release:micromsg.EnterTalkRoomReq.ToUsername)
  clear_has_tousername();
  return tousername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EnterTalkRoomReq::set_allocated_tousername(::std::string* tousername) {
  if (tousername != NULL) {
    set_has_tousername();
  } else {
    clear_has_tousername();
  }
  tousername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tousername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EnterTalkRoomReq.ToUsername)
}

// optional uint32 Scene = 3;
bool EnterTalkRoomReq::has_scene() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EnterTalkRoomReq::set_has_scene() {
  _has_bits_[0] |= 0x00000004u;
}
void EnterTalkRoomReq::clear_has_scene() {
  _has_bits_[0] &= ~0x00000004u;
}
void EnterTalkRoomReq::clear_scene() {
  scene_ = 0u;
  clear_has_scene();
}
::google::protobuf::uint32 EnterTalkRoomReq::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.EnterTalkRoomReq.Scene)
  return scene_;
}
void EnterTalkRoomReq::set_scene(::google::protobuf::uint32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EnterTalkRoomReq.Scene)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnterTalkRoomResp::kBaseResponseFieldNumber;
const int EnterTalkRoomResp::kRoomIdFieldNumber;
const int EnterTalkRoomResp::kRoomKeyFieldNumber;
const int EnterTalkRoomResp::kMicSeqFieldNumber;
const int EnterTalkRoomResp::kMemberNumFieldNumber;
const int EnterTalkRoomResp::kMemberListFieldNumber;
const int EnterTalkRoomResp::kMyRoomMemberIdFieldNumber;
const int EnterTalkRoomResp::kAddrCountFieldNumber;
const int EnterTalkRoomResp::kAddrListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnterTalkRoomResp::EnterTalkRoomResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmtalk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.EnterTalkRoomResp)
}
EnterTalkRoomResp::EnterTalkRoomResp(const EnterTalkRoomResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      memberlist_(from.memberlist_),
      addrlist_(from.addrlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  ::memcpy(&roomkey_, &from.roomkey_,
    reinterpret_cast<char*>(&addrcount_) -
    reinterpret_cast<char*>(&roomkey_) + sizeof(addrcount_));
  // @@protoc_insertion_point(copy_constructor:micromsg.EnterTalkRoomResp)
}

void EnterTalkRoomResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&addrcount_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(addrcount_));
}

EnterTalkRoomResp::~EnterTalkRoomResp() {
  // @@protoc_insertion_point(destructor:micromsg.EnterTalkRoomResp)
  SharedDtor();
}

void EnterTalkRoomResp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void EnterTalkRoomResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterTalkRoomResp::descriptor() {
  protobuf_mmtalk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmtalk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EnterTalkRoomResp& EnterTalkRoomResp::default_instance() {
  protobuf_mmtalk_2eproto::InitDefaults();
  return *internal_default_instance();
}

EnterTalkRoomResp* EnterTalkRoomResp::New(::google::protobuf::Arena* arena) const {
  EnterTalkRoomResp* n = new EnterTalkRoomResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnterTalkRoomResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.EnterTalkRoomResp)
  memberlist_.Clear();
  addrlist_.Clear();
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  if (_has_bits_[0 / 32] & 126u) {
    ::memset(&roomkey_, 0, reinterpret_cast<char*>(&addrcount_) -
      reinterpret_cast<char*>(&roomkey_) + sizeof(addrcount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EnterTalkRoomResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.EnterTalkRoomResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 RoomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_roomid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 RoomKey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_roomkey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roomkey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 MicSeq = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_micseq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &micseq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 MemberNum = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_membernum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &membernum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.TalkRoomMember MemberList = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_memberlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 MyRoomMemberId = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_myroommemberid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &myroommemberid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 AddrCount = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_addrcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addrcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.TalkRelayAddr AddrList = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_addrlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.EnterTalkRoomResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.EnterTalkRoomResp)
  return false;
#undef DO_
}

void EnterTalkRoomResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.EnterTalkRoomResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required int32 RoomId = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // required int64 RoomKey = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->roomkey(), output);
  }

  // required int32 MicSeq = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->micseq(), output);
  }

  // required int32 MemberNum = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->membernum(), output);
  }

  // repeated .micromsg.TalkRoomMember MemberList = 6;
  for (unsigned int i = 0, n = this->memberlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->memberlist(i), output);
  }

  // required int32 MyRoomMemberId = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->myroommemberid(), output);
  }

  // optional int32 AddrCount = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->addrcount(), output);
  }

  // repeated .micromsg.TalkRelayAddr AddrList = 9;
  for (unsigned int i = 0, n = this->addrlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->addrlist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.EnterTalkRoomResp)
}

::google::protobuf::uint8* EnterTalkRoomResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.EnterTalkRoomResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required int32 RoomId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // required int64 RoomKey = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->roomkey(), target);
  }

  // required int32 MicSeq = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->micseq(), target);
  }

  // required int32 MemberNum = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->membernum(), target);
  }

  // repeated .micromsg.TalkRoomMember MemberList = 6;
  for (unsigned int i = 0, n = this->memberlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->memberlist(i), deterministic, target);
  }

  // required int32 MyRoomMemberId = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->myroommemberid(), target);
  }

  // optional int32 AddrCount = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->addrcount(), target);
  }

  // repeated .micromsg.TalkRelayAddr AddrList = 9;
  for (unsigned int i = 0, n = this->addrlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->addrlist(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.EnterTalkRoomResp)
  return target;
}

size_t EnterTalkRoomResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.EnterTalkRoomResp)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_roomkey()) {
    // required int64 RoomKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());
  }

  if (has_roomid()) {
    // required int32 RoomId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  if (has_micseq()) {
    // required int32 MicSeq = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->micseq());
  }

  if (has_membernum()) {
    // required int32 MemberNum = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->membernum());
  }

  if (has_myroommemberid()) {
    // required int32 MyRoomMemberId = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->myroommemberid());
  }

  return total_size;
}
size_t EnterTalkRoomResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.EnterTalkRoomResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required int64 RoomKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());

    // required int32 RoomId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());

    // required int32 MicSeq = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->micseq());

    // required int32 MemberNum = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->membernum());

    // required int32 MyRoomMemberId = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->myroommemberid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.TalkRoomMember MemberList = 6;
  {
    unsigned int count = this->memberlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memberlist(i));
    }
  }

  // repeated .micromsg.TalkRelayAddr AddrList = 9;
  {
    unsigned int count = this->addrlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->addrlist(i));
    }
  }

  // optional int32 AddrCount = 8;
  if (has_addrcount()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->addrcount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterTalkRoomResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.EnterTalkRoomResp)
  GOOGLE_DCHECK_NE(&from, this);
  const EnterTalkRoomResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EnterTalkRoomResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.EnterTalkRoomResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.EnterTalkRoomResp)
    MergeFrom(*source);
  }
}

void EnterTalkRoomResp::MergeFrom(const EnterTalkRoomResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.EnterTalkRoomResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  memberlist_.MergeFrom(from.memberlist_);
  addrlist_.MergeFrom(from.addrlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      roomkey_ = from.roomkey_;
    }
    if (cached_has_bits & 0x00000004u) {
      roomid_ = from.roomid_;
    }
    if (cached_has_bits & 0x00000008u) {
      micseq_ = from.micseq_;
    }
    if (cached_has_bits & 0x00000010u) {
      membernum_ = from.membernum_;
    }
    if (cached_has_bits & 0x00000020u) {
      myroommemberid_ = from.myroommemberid_;
    }
    if (cached_has_bits & 0x00000040u) {
      addrcount_ = from.addrcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EnterTalkRoomResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.EnterTalkRoomResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterTalkRoomResp::CopyFrom(const EnterTalkRoomResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.EnterTalkRoomResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterTalkRoomResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->memberlist())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->addrlist())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void EnterTalkRoomResp::Swap(EnterTalkRoomResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnterTalkRoomResp::InternalSwap(EnterTalkRoomResp* other) {
  memberlist_.InternalSwap(&other->memberlist_);
  addrlist_.InternalSwap(&other->addrlist_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(roomkey_, other->roomkey_);
  std::swap(roomid_, other->roomid_);
  std::swap(micseq_, other->micseq_);
  std::swap(membernum_, other->membernum_);
  std::swap(myroommemberid_, other->myroommemberid_);
  std::swap(addrcount_, other->addrcount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnterTalkRoomResp::GetMetadata() const {
  protobuf_mmtalk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmtalk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EnterTalkRoomResp

// required .micromsg.BaseResponse BaseResponse = 1;
bool EnterTalkRoomResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EnterTalkRoomResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void EnterTalkRoomResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void EnterTalkRoomResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& EnterTalkRoomResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.EnterTalkRoomResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* EnterTalkRoomResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.EnterTalkRoomResp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* EnterTalkRoomResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.EnterTalkRoomResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void EnterTalkRoomResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.EnterTalkRoomResp.BaseResponse)
}

// required int32 RoomId = 2;
bool EnterTalkRoomResp::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EnterTalkRoomResp::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
void EnterTalkRoomResp::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
void EnterTalkRoomResp::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
::google::protobuf::int32 EnterTalkRoomResp::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.EnterTalkRoomResp.RoomId)
  return roomid_;
}
void EnterTalkRoomResp::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EnterTalkRoomResp.RoomId)
}

// required int64 RoomKey = 3;
bool EnterTalkRoomResp::has_roomkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EnterTalkRoomResp::set_has_roomkey() {
  _has_bits_[0] |= 0x00000002u;
}
void EnterTalkRoomResp::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000002u;
}
void EnterTalkRoomResp::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
::google::protobuf::int64 EnterTalkRoomResp::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.EnterTalkRoomResp.RoomKey)
  return roomkey_;
}
void EnterTalkRoomResp::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EnterTalkRoomResp.RoomKey)
}

// required int32 MicSeq = 4;
bool EnterTalkRoomResp::has_micseq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EnterTalkRoomResp::set_has_micseq() {
  _has_bits_[0] |= 0x00000008u;
}
void EnterTalkRoomResp::clear_has_micseq() {
  _has_bits_[0] &= ~0x00000008u;
}
void EnterTalkRoomResp::clear_micseq() {
  micseq_ = 0;
  clear_has_micseq();
}
::google::protobuf::int32 EnterTalkRoomResp::micseq() const {
  // @@protoc_insertion_point(field_get:micromsg.EnterTalkRoomResp.MicSeq)
  return micseq_;
}
void EnterTalkRoomResp::set_micseq(::google::protobuf::int32 value) {
  set_has_micseq();
  micseq_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EnterTalkRoomResp.MicSeq)
}

// required int32 MemberNum = 5;
bool EnterTalkRoomResp::has_membernum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void EnterTalkRoomResp::set_has_membernum() {
  _has_bits_[0] |= 0x00000010u;
}
void EnterTalkRoomResp::clear_has_membernum() {
  _has_bits_[0] &= ~0x00000010u;
}
void EnterTalkRoomResp::clear_membernum() {
  membernum_ = 0;
  clear_has_membernum();
}
::google::protobuf::int32 EnterTalkRoomResp::membernum() const {
  // @@protoc_insertion_point(field_get:micromsg.EnterTalkRoomResp.MemberNum)
  return membernum_;
}
void EnterTalkRoomResp::set_membernum(::google::protobuf::int32 value) {
  set_has_membernum();
  membernum_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EnterTalkRoomResp.MemberNum)
}

// repeated .micromsg.TalkRoomMember MemberList = 6;
int EnterTalkRoomResp::memberlist_size() const {
  return memberlist_.size();
}
void EnterTalkRoomResp::clear_memberlist() {
  memberlist_.Clear();
}
const ::micromsg::TalkRoomMember& EnterTalkRoomResp::memberlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.EnterTalkRoomResp.MemberList)
  return memberlist_.Get(index);
}
::micromsg::TalkRoomMember* EnterTalkRoomResp::mutable_memberlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.EnterTalkRoomResp.MemberList)
  return memberlist_.Mutable(index);
}
::micromsg::TalkRoomMember* EnterTalkRoomResp::add_memberlist() {
  // @@protoc_insertion_point(field_add:micromsg.EnterTalkRoomResp.MemberList)
  return memberlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::TalkRoomMember >*
EnterTalkRoomResp::mutable_memberlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.EnterTalkRoomResp.MemberList)
  return &memberlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::TalkRoomMember >&
EnterTalkRoomResp::memberlist() const {
  // @@protoc_insertion_point(field_list:micromsg.EnterTalkRoomResp.MemberList)
  return memberlist_;
}

// required int32 MyRoomMemberId = 7;
bool EnterTalkRoomResp::has_myroommemberid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void EnterTalkRoomResp::set_has_myroommemberid() {
  _has_bits_[0] |= 0x00000020u;
}
void EnterTalkRoomResp::clear_has_myroommemberid() {
  _has_bits_[0] &= ~0x00000020u;
}
void EnterTalkRoomResp::clear_myroommemberid() {
  myroommemberid_ = 0;
  clear_has_myroommemberid();
}
::google::protobuf::int32 EnterTalkRoomResp::myroommemberid() const {
  // @@protoc_insertion_point(field_get:micromsg.EnterTalkRoomResp.MyRoomMemberId)
  return myroommemberid_;
}
void EnterTalkRoomResp::set_myroommemberid(::google::protobuf::int32 value) {
  set_has_myroommemberid();
  myroommemberid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EnterTalkRoomResp.MyRoomMemberId)
}

// optional int32 AddrCount = 8;
bool EnterTalkRoomResp::has_addrcount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void EnterTalkRoomResp::set_has_addrcount() {
  _has_bits_[0] |= 0x00000040u;
}
void EnterTalkRoomResp::clear_has_addrcount() {
  _has_bits_[0] &= ~0x00000040u;
}
void EnterTalkRoomResp::clear_addrcount() {
  addrcount_ = 0;
  clear_has_addrcount();
}
::google::protobuf::int32 EnterTalkRoomResp::addrcount() const {
  // @@protoc_insertion_point(field_get:micromsg.EnterTalkRoomResp.AddrCount)
  return addrcount_;
}
void EnterTalkRoomResp::set_addrcount(::google::protobuf::int32 value) {
  set_has_addrcount();
  addrcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EnterTalkRoomResp.AddrCount)
}

// repeated .micromsg.TalkRelayAddr AddrList = 9;
int EnterTalkRoomResp::addrlist_size() const {
  return addrlist_.size();
}
void EnterTalkRoomResp::clear_addrlist() {
  addrlist_.Clear();
}
const ::micromsg::TalkRelayAddr& EnterTalkRoomResp::addrlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.EnterTalkRoomResp.AddrList)
  return addrlist_.Get(index);
}
::micromsg::TalkRelayAddr* EnterTalkRoomResp::mutable_addrlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.EnterTalkRoomResp.AddrList)
  return addrlist_.Mutable(index);
}
::micromsg::TalkRelayAddr* EnterTalkRoomResp::add_addrlist() {
  // @@protoc_insertion_point(field_add:micromsg.EnterTalkRoomResp.AddrList)
  return addrlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::TalkRelayAddr >*
EnterTalkRoomResp::mutable_addrlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.EnterTalkRoomResp.AddrList)
  return &addrlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::TalkRelayAddr >&
EnterTalkRoomResp::addrlist() const {
  // @@protoc_insertion_point(field_list:micromsg.EnterTalkRoomResp.AddrList)
  return addrlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExitTalkRoomReq::kBaseRequestFieldNumber;
const int ExitTalkRoomReq::kRoomIdFieldNumber;
const int ExitTalkRoomReq::kRoomKeyFieldNumber;
const int ExitTalkRoomReq::kToUsernameFieldNumber;
const int ExitTalkRoomReq::kSceneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExitTalkRoomReq::ExitTalkRoomReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmtalk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ExitTalkRoomReq)
}
ExitTalkRoomReq::ExitTalkRoomReq(const ExitTalkRoomReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tousername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tousername()) {
    tousername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tousername_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&roomkey_, &from.roomkey_,
    reinterpret_cast<char*>(&scene_) -
    reinterpret_cast<char*>(&roomkey_) + sizeof(scene_));
  // @@protoc_insertion_point(copy_constructor:micromsg.ExitTalkRoomReq)
}

void ExitTalkRoomReq::SharedCtor() {
  _cached_size_ = 0;
  tousername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&scene_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(scene_));
}

ExitTalkRoomReq::~ExitTalkRoomReq() {
  // @@protoc_insertion_point(destructor:micromsg.ExitTalkRoomReq)
  SharedDtor();
}

void ExitTalkRoomReq::SharedDtor() {
  tousername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void ExitTalkRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExitTalkRoomReq::descriptor() {
  protobuf_mmtalk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmtalk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExitTalkRoomReq& ExitTalkRoomReq::default_instance() {
  protobuf_mmtalk_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExitTalkRoomReq* ExitTalkRoomReq::New(::google::protobuf::Arena* arena) const {
  ExitTalkRoomReq* n = new ExitTalkRoomReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExitTalkRoomReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ExitTalkRoomReq)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_tousername()) {
      GOOGLE_DCHECK(!tousername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tousername_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&roomkey_, 0, reinterpret_cast<char*>(&scene_) -
      reinterpret_cast<char*>(&roomkey_) + sizeof(scene_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ExitTalkRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ExitTalkRoomReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 RoomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_roomid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 RoomKey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_roomkey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roomkey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ToUsername = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tousername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tousername().data(), this->tousername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ExitTalkRoomReq.ToUsername");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Scene = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_scene();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ExitTalkRoomReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ExitTalkRoomReq)
  return false;
#undef DO_
}

void ExitTalkRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ExitTalkRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required int32 RoomId = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // required int64 RoomKey = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->roomkey(), output);
  }

  // optional string ToUsername = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tousername().data(), this->tousername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ExitTalkRoomReq.ToUsername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->tousername(), output);
  }

  // optional uint32 Scene = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->scene(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ExitTalkRoomReq)
}

::google::protobuf::uint8* ExitTalkRoomReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ExitTalkRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required int32 RoomId = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // required int64 RoomKey = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->roomkey(), target);
  }

  // optional string ToUsername = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tousername().data(), this->tousername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ExitTalkRoomReq.ToUsername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->tousername(), target);
  }

  // optional uint32 Scene = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->scene(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ExitTalkRoomReq)
  return target;
}

size_t ExitTalkRoomReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.ExitTalkRoomReq)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_roomkey()) {
    // required int64 RoomKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());
  }

  if (has_roomid()) {
    // required int32 RoomId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  return total_size;
}
size_t ExitTalkRoomReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ExitTalkRoomReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required int64 RoomKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());

    // required int32 RoomId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string ToUsername = 4;
  if (has_tousername()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tousername());
  }

  // optional uint32 Scene = 5;
  if (has_scene()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExitTalkRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ExitTalkRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ExitTalkRoomReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExitTalkRoomReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ExitTalkRoomReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ExitTalkRoomReq)
    MergeFrom(*source);
  }
}

void ExitTalkRoomReq::MergeFrom(const ExitTalkRoomReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ExitTalkRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_tousername();
      tousername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tousername_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000004u) {
      roomkey_ = from.roomkey_;
    }
    if (cached_has_bits & 0x00000008u) {
      roomid_ = from.roomid_;
    }
    if (cached_has_bits & 0x00000010u) {
      scene_ = from.scene_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ExitTalkRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ExitTalkRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExitTalkRoomReq::CopyFrom(const ExitTalkRoomReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ExitTalkRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExitTalkRoomReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void ExitTalkRoomReq::Swap(ExitTalkRoomReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExitTalkRoomReq::InternalSwap(ExitTalkRoomReq* other) {
  tousername_.Swap(&other->tousername_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(roomkey_, other->roomkey_);
  std::swap(roomid_, other->roomid_);
  std::swap(scene_, other->scene_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExitTalkRoomReq::GetMetadata() const {
  protobuf_mmtalk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmtalk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExitTalkRoomReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool ExitTalkRoomReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ExitTalkRoomReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void ExitTalkRoomReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void ExitTalkRoomReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& ExitTalkRoomReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.ExitTalkRoomReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* ExitTalkRoomReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ExitTalkRoomReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* ExitTalkRoomReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.ExitTalkRoomReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void ExitTalkRoomReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ExitTalkRoomReq.BaseRequest)
}

// required int32 RoomId = 2;
bool ExitTalkRoomReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ExitTalkRoomReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000008u;
}
void ExitTalkRoomReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000008u;
}
void ExitTalkRoomReq::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
::google::protobuf::int32 ExitTalkRoomReq::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.ExitTalkRoomReq.RoomId)
  return roomid_;
}
void ExitTalkRoomReq::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ExitTalkRoomReq.RoomId)
}

// required int64 RoomKey = 3;
bool ExitTalkRoomReq::has_roomkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ExitTalkRoomReq::set_has_roomkey() {
  _has_bits_[0] |= 0x00000004u;
}
void ExitTalkRoomReq::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000004u;
}
void ExitTalkRoomReq::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
::google::protobuf::int64 ExitTalkRoomReq::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.ExitTalkRoomReq.RoomKey)
  return roomkey_;
}
void ExitTalkRoomReq::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ExitTalkRoomReq.RoomKey)
}

// optional string ToUsername = 4;
bool ExitTalkRoomReq::has_tousername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ExitTalkRoomReq::set_has_tousername() {
  _has_bits_[0] |= 0x00000001u;
}
void ExitTalkRoomReq::clear_has_tousername() {
  _has_bits_[0] &= ~0x00000001u;
}
void ExitTalkRoomReq::clear_tousername() {
  tousername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tousername();
}
const ::std::string& ExitTalkRoomReq::tousername() const {
  // @@protoc_insertion_point(field_get:micromsg.ExitTalkRoomReq.ToUsername)
  return tousername_.GetNoArena();
}
void ExitTalkRoomReq::set_tousername(const ::std::string& value) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ExitTalkRoomReq.ToUsername)
}
#if LANG_CXX11
void ExitTalkRoomReq::set_tousername(::std::string&& value) {
  set_has_tousername();
  tousername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ExitTalkRoomReq.ToUsername)
}
#endif
void ExitTalkRoomReq::set_tousername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ExitTalkRoomReq.ToUsername)
}
void ExitTalkRoomReq::set_tousername(const char* value, size_t size) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ExitTalkRoomReq.ToUsername)
}
::std::string* ExitTalkRoomReq::mutable_tousername() {
  set_has_tousername();
  // @@protoc_insertion_point(field_mutable:micromsg.ExitTalkRoomReq.ToUsername)
  return tousername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExitTalkRoomReq::release_tousername() {
  // @@protoc_insertion_point(field_release:micromsg.ExitTalkRoomReq.ToUsername)
  clear_has_tousername();
  return tousername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExitTalkRoomReq::set_allocated_tousername(::std::string* tousername) {
  if (tousername != NULL) {
    set_has_tousername();
  } else {
    clear_has_tousername();
  }
  tousername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tousername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ExitTalkRoomReq.ToUsername)
}

// optional uint32 Scene = 5;
bool ExitTalkRoomReq::has_scene() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ExitTalkRoomReq::set_has_scene() {
  _has_bits_[0] |= 0x00000010u;
}
void ExitTalkRoomReq::clear_has_scene() {
  _has_bits_[0] &= ~0x00000010u;
}
void ExitTalkRoomReq::clear_scene() {
  scene_ = 0u;
  clear_has_scene();
}
::google::protobuf::uint32 ExitTalkRoomReq::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.ExitTalkRoomReq.Scene)
  return scene_;
}
void ExitTalkRoomReq::set_scene(::google::protobuf::uint32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ExitTalkRoomReq.Scene)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExitTalkRoomResp::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExitTalkRoomResp::ExitTalkRoomResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmtalk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ExitTalkRoomResp)
}
ExitTalkRoomResp::ExitTalkRoomResp(const ExitTalkRoomResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.ExitTalkRoomResp)
}

void ExitTalkRoomResp::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

ExitTalkRoomResp::~ExitTalkRoomResp() {
  // @@protoc_insertion_point(destructor:micromsg.ExitTalkRoomResp)
  SharedDtor();
}

void ExitTalkRoomResp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void ExitTalkRoomResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExitTalkRoomResp::descriptor() {
  protobuf_mmtalk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmtalk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExitTalkRoomResp& ExitTalkRoomResp::default_instance() {
  protobuf_mmtalk_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExitTalkRoomResp* ExitTalkRoomResp::New(::google::protobuf::Arena* arena) const {
  ExitTalkRoomResp* n = new ExitTalkRoomResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExitTalkRoomResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ExitTalkRoomResp)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ExitTalkRoomResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ExitTalkRoomResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ExitTalkRoomResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ExitTalkRoomResp)
  return false;
#undef DO_
}

void ExitTalkRoomResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ExitTalkRoomResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ExitTalkRoomResp)
}

::google::protobuf::uint8* ExitTalkRoomResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ExitTalkRoomResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ExitTalkRoomResp)
  return target;
}

size_t ExitTalkRoomResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ExitTalkRoomResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExitTalkRoomResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ExitTalkRoomResp)
  GOOGLE_DCHECK_NE(&from, this);
  const ExitTalkRoomResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExitTalkRoomResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ExitTalkRoomResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ExitTalkRoomResp)
    MergeFrom(*source);
  }
}

void ExitTalkRoomResp::MergeFrom(const ExitTalkRoomResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ExitTalkRoomResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void ExitTalkRoomResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ExitTalkRoomResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExitTalkRoomResp::CopyFrom(const ExitTalkRoomResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ExitTalkRoomResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExitTalkRoomResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void ExitTalkRoomResp::Swap(ExitTalkRoomResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExitTalkRoomResp::InternalSwap(ExitTalkRoomResp* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExitTalkRoomResp::GetMetadata() const {
  protobuf_mmtalk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmtalk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExitTalkRoomResp

// required .micromsg.BaseResponse BaseResponse = 1;
bool ExitTalkRoomResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ExitTalkRoomResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void ExitTalkRoomResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void ExitTalkRoomResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& ExitTalkRoomResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.ExitTalkRoomResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* ExitTalkRoomResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ExitTalkRoomResp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* ExitTalkRoomResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.ExitTalkRoomResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void ExitTalkRoomResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ExitTalkRoomResp.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TalkMicActionReq::kBaseRequestFieldNumber;
const int TalkMicActionReq::kRoomIdFieldNumber;
const int TalkMicActionReq::kRoomKeyFieldNumber;
const int TalkMicActionReq::kActionTypeFieldNumber;
const int TalkMicActionReq::kUpdateTimeFieldNumber;
const int TalkMicActionReq::kSceneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TalkMicActionReq::TalkMicActionReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmtalk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.TalkMicActionReq)
}
TalkMicActionReq::TalkMicActionReq(const TalkMicActionReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&roomkey_, &from.roomkey_,
    reinterpret_cast<char*>(&scene_) -
    reinterpret_cast<char*>(&roomkey_) + sizeof(scene_));
  // @@protoc_insertion_point(copy_constructor:micromsg.TalkMicActionReq)
}

void TalkMicActionReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&scene_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(scene_));
}

TalkMicActionReq::~TalkMicActionReq() {
  // @@protoc_insertion_point(destructor:micromsg.TalkMicActionReq)
  SharedDtor();
}

void TalkMicActionReq::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void TalkMicActionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TalkMicActionReq::descriptor() {
  protobuf_mmtalk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmtalk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TalkMicActionReq& TalkMicActionReq::default_instance() {
  protobuf_mmtalk_2eproto::InitDefaults();
  return *internal_default_instance();
}

TalkMicActionReq* TalkMicActionReq::New(::google::protobuf::Arena* arena) const {
  TalkMicActionReq* n = new TalkMicActionReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TalkMicActionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.TalkMicActionReq)
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  if (_has_bits_[0 / 32] & 62u) {
    ::memset(&roomkey_, 0, reinterpret_cast<char*>(&scene_) -
      reinterpret_cast<char*>(&roomkey_) + sizeof(scene_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TalkMicActionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.TalkMicActionReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 RoomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_roomid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 RoomKey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_roomkey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roomkey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ActionType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_actiontype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actiontype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 UpdateTime = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_updatetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Scene = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_scene();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.TalkMicActionReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.TalkMicActionReq)
  return false;
#undef DO_
}

void TalkMicActionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.TalkMicActionReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required int32 RoomId = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // required int64 RoomKey = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->roomkey(), output);
  }

  // required uint32 ActionType = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->actiontype(), output);
  }

  // optional uint32 UpdateTime = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->updatetime(), output);
  }

  // optional uint32 Scene = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->scene(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.TalkMicActionReq)
}

::google::protobuf::uint8* TalkMicActionReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.TalkMicActionReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required int32 RoomId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // required int64 RoomKey = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->roomkey(), target);
  }

  // required uint32 ActionType = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->actiontype(), target);
  }

  // optional uint32 UpdateTime = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->updatetime(), target);
  }

  // optional uint32 Scene = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->scene(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.TalkMicActionReq)
  return target;
}

size_t TalkMicActionReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.TalkMicActionReq)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_roomkey()) {
    // required int64 RoomKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());
  }

  if (has_roomid()) {
    // required int32 RoomId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  if (has_actiontype()) {
    // required uint32 ActionType = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->actiontype());
  }

  return total_size;
}
size_t TalkMicActionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.TalkMicActionReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required int64 RoomKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());

    // required int32 RoomId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());

    // required uint32 ActionType = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->actiontype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 48u) {
    // optional uint32 UpdateTime = 5;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->updatetime());
    }

    // optional uint32 Scene = 6;
    if (has_scene()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TalkMicActionReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.TalkMicActionReq)
  GOOGLE_DCHECK_NE(&from, this);
  const TalkMicActionReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TalkMicActionReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.TalkMicActionReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.TalkMicActionReq)
    MergeFrom(*source);
  }
}

void TalkMicActionReq::MergeFrom(const TalkMicActionReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.TalkMicActionReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      roomkey_ = from.roomkey_;
    }
    if (cached_has_bits & 0x00000004u) {
      roomid_ = from.roomid_;
    }
    if (cached_has_bits & 0x00000008u) {
      actiontype_ = from.actiontype_;
    }
    if (cached_has_bits & 0x00000010u) {
      updatetime_ = from.updatetime_;
    }
    if (cached_has_bits & 0x00000020u) {
      scene_ = from.scene_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TalkMicActionReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.TalkMicActionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TalkMicActionReq::CopyFrom(const TalkMicActionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.TalkMicActionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TalkMicActionReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void TalkMicActionReq::Swap(TalkMicActionReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TalkMicActionReq::InternalSwap(TalkMicActionReq* other) {
  std::swap(baserequest_, other->baserequest_);
  std::swap(roomkey_, other->roomkey_);
  std::swap(roomid_, other->roomid_);
  std::swap(actiontype_, other->actiontype_);
  std::swap(updatetime_, other->updatetime_);
  std::swap(scene_, other->scene_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TalkMicActionReq::GetMetadata() const {
  protobuf_mmtalk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmtalk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TalkMicActionReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool TalkMicActionReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TalkMicActionReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void TalkMicActionReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void TalkMicActionReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& TalkMicActionReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkMicActionReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* TalkMicActionReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.TalkMicActionReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* TalkMicActionReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.TalkMicActionReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void TalkMicActionReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.TalkMicActionReq.BaseRequest)
}

// required int32 RoomId = 2;
bool TalkMicActionReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TalkMicActionReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
void TalkMicActionReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
void TalkMicActionReq::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
::google::protobuf::int32 TalkMicActionReq::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkMicActionReq.RoomId)
  return roomid_;
}
void TalkMicActionReq::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.TalkMicActionReq.RoomId)
}

// required int64 RoomKey = 3;
bool TalkMicActionReq::has_roomkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TalkMicActionReq::set_has_roomkey() {
  _has_bits_[0] |= 0x00000002u;
}
void TalkMicActionReq::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000002u;
}
void TalkMicActionReq::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
::google::protobuf::int64 TalkMicActionReq::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkMicActionReq.RoomKey)
  return roomkey_;
}
void TalkMicActionReq::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.TalkMicActionReq.RoomKey)
}

// required uint32 ActionType = 4;
bool TalkMicActionReq::has_actiontype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TalkMicActionReq::set_has_actiontype() {
  _has_bits_[0] |= 0x00000008u;
}
void TalkMicActionReq::clear_has_actiontype() {
  _has_bits_[0] &= ~0x00000008u;
}
void TalkMicActionReq::clear_actiontype() {
  actiontype_ = 0u;
  clear_has_actiontype();
}
::google::protobuf::uint32 TalkMicActionReq::actiontype() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkMicActionReq.ActionType)
  return actiontype_;
}
void TalkMicActionReq::set_actiontype(::google::protobuf::uint32 value) {
  set_has_actiontype();
  actiontype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.TalkMicActionReq.ActionType)
}

// optional uint32 UpdateTime = 5;
bool TalkMicActionReq::has_updatetime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TalkMicActionReq::set_has_updatetime() {
  _has_bits_[0] |= 0x00000010u;
}
void TalkMicActionReq::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000010u;
}
void TalkMicActionReq::clear_updatetime() {
  updatetime_ = 0u;
  clear_has_updatetime();
}
::google::protobuf::uint32 TalkMicActionReq::updatetime() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkMicActionReq.UpdateTime)
  return updatetime_;
}
void TalkMicActionReq::set_updatetime(::google::protobuf::uint32 value) {
  set_has_updatetime();
  updatetime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.TalkMicActionReq.UpdateTime)
}

// optional uint32 Scene = 6;
bool TalkMicActionReq::has_scene() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TalkMicActionReq::set_has_scene() {
  _has_bits_[0] |= 0x00000020u;
}
void TalkMicActionReq::clear_has_scene() {
  _has_bits_[0] &= ~0x00000020u;
}
void TalkMicActionReq::clear_scene() {
  scene_ = 0u;
  clear_has_scene();
}
::google::protobuf::uint32 TalkMicActionReq::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkMicActionReq.Scene)
  return scene_;
}
void TalkMicActionReq::set_scene(::google::protobuf::uint32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.TalkMicActionReq.Scene)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TalkMicActionResp::kBaseResponseFieldNumber;
const int TalkMicActionResp::kMicSeqFieldNumber;
const int TalkMicActionResp::kChannelIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TalkMicActionResp::TalkMicActionResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmtalk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.TalkMicActionResp)
}
TalkMicActionResp::TalkMicActionResp(const TalkMicActionResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  ::memcpy(&micseq_, &from.micseq_,
    reinterpret_cast<char*>(&channelid_) -
    reinterpret_cast<char*>(&micseq_) + sizeof(channelid_));
  // @@protoc_insertion_point(copy_constructor:micromsg.TalkMicActionResp)
}

void TalkMicActionResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&channelid_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(channelid_));
}

TalkMicActionResp::~TalkMicActionResp() {
  // @@protoc_insertion_point(destructor:micromsg.TalkMicActionResp)
  SharedDtor();
}

void TalkMicActionResp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void TalkMicActionResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TalkMicActionResp::descriptor() {
  protobuf_mmtalk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmtalk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TalkMicActionResp& TalkMicActionResp::default_instance() {
  protobuf_mmtalk_2eproto::InitDefaults();
  return *internal_default_instance();
}

TalkMicActionResp* TalkMicActionResp::New(::google::protobuf::Arena* arena) const {
  TalkMicActionResp* n = new TalkMicActionResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TalkMicActionResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.TalkMicActionResp)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&micseq_, 0, reinterpret_cast<char*>(&channelid_) -
      reinterpret_cast<char*>(&micseq_) + sizeof(channelid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TalkMicActionResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.TalkMicActionResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 MicSeq = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_micseq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &micseq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ChannelId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_channelid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.TalkMicActionResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.TalkMicActionResp)
  return false;
#undef DO_
}

void TalkMicActionResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.TalkMicActionResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required int32 MicSeq = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->micseq(), output);
  }

  // optional uint32 ChannelId = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channelid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.TalkMicActionResp)
}

::google::protobuf::uint8* TalkMicActionResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.TalkMicActionResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required int32 MicSeq = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->micseq(), target);
  }

  // optional uint32 ChannelId = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channelid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.TalkMicActionResp)
  return target;
}

size_t TalkMicActionResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.TalkMicActionResp)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_micseq()) {
    // required int32 MicSeq = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->micseq());
  }

  return total_size;
}
size_t TalkMicActionResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.TalkMicActionResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required int32 MicSeq = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->micseq());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint32 ChannelId = 3;
  if (has_channelid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channelid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TalkMicActionResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.TalkMicActionResp)
  GOOGLE_DCHECK_NE(&from, this);
  const TalkMicActionResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TalkMicActionResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.TalkMicActionResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.TalkMicActionResp)
    MergeFrom(*source);
  }
}

void TalkMicActionResp::MergeFrom(const TalkMicActionResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.TalkMicActionResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      micseq_ = from.micseq_;
    }
    if (cached_has_bits & 0x00000004u) {
      channelid_ = from.channelid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TalkMicActionResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.TalkMicActionResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TalkMicActionResp::CopyFrom(const TalkMicActionResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.TalkMicActionResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TalkMicActionResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void TalkMicActionResp::Swap(TalkMicActionResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TalkMicActionResp::InternalSwap(TalkMicActionResp* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(micseq_, other->micseq_);
  std::swap(channelid_, other->channelid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TalkMicActionResp::GetMetadata() const {
  protobuf_mmtalk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmtalk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TalkMicActionResp

// required .micromsg.BaseResponse BaseResponse = 1;
bool TalkMicActionResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TalkMicActionResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void TalkMicActionResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void TalkMicActionResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& TalkMicActionResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkMicActionResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* TalkMicActionResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.TalkMicActionResp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* TalkMicActionResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.TalkMicActionResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void TalkMicActionResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.TalkMicActionResp.BaseResponse)
}

// required int32 MicSeq = 2;
bool TalkMicActionResp::has_micseq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TalkMicActionResp::set_has_micseq() {
  _has_bits_[0] |= 0x00000002u;
}
void TalkMicActionResp::clear_has_micseq() {
  _has_bits_[0] &= ~0x00000002u;
}
void TalkMicActionResp::clear_micseq() {
  micseq_ = 0;
  clear_has_micseq();
}
::google::protobuf::int32 TalkMicActionResp::micseq() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkMicActionResp.MicSeq)
  return micseq_;
}
void TalkMicActionResp::set_micseq(::google::protobuf::int32 value) {
  set_has_micseq();
  micseq_ = value;
  // @@protoc_insertion_point(field_set:micromsg.TalkMicActionResp.MicSeq)
}

// optional uint32 ChannelId = 3;
bool TalkMicActionResp::has_channelid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TalkMicActionResp::set_has_channelid() {
  _has_bits_[0] |= 0x00000004u;
}
void TalkMicActionResp::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000004u;
}
void TalkMicActionResp::clear_channelid() {
  channelid_ = 0u;
  clear_has_channelid();
}
::google::protobuf::uint32 TalkMicActionResp::channelid() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkMicActionResp.ChannelId)
  return channelid_;
}
void TalkMicActionResp::set_channelid(::google::protobuf::uint32 value) {
  set_has_channelid();
  channelid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.TalkMicActionResp.ChannelId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TalkNoopReq::kBaseRequestFieldNumber;
const int TalkNoopReq::kRoomIdFieldNumber;
const int TalkNoopReq::kRoomKeyFieldNumber;
const int TalkNoopReq::kUpdateTimeFieldNumber;
const int TalkNoopReq::kSceneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TalkNoopReq::TalkNoopReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmtalk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.TalkNoopReq)
}
TalkNoopReq::TalkNoopReq(const TalkNoopReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&roomkey_, &from.roomkey_,
    reinterpret_cast<char*>(&scene_) -
    reinterpret_cast<char*>(&roomkey_) + sizeof(scene_));
  // @@protoc_insertion_point(copy_constructor:micromsg.TalkNoopReq)
}

void TalkNoopReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&scene_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(scene_));
}

TalkNoopReq::~TalkNoopReq() {
  // @@protoc_insertion_point(destructor:micromsg.TalkNoopReq)
  SharedDtor();
}

void TalkNoopReq::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void TalkNoopReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TalkNoopReq::descriptor() {
  protobuf_mmtalk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmtalk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TalkNoopReq& TalkNoopReq::default_instance() {
  protobuf_mmtalk_2eproto::InitDefaults();
  return *internal_default_instance();
}

TalkNoopReq* TalkNoopReq::New(::google::protobuf::Arena* arena) const {
  TalkNoopReq* n = new TalkNoopReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TalkNoopReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.TalkNoopReq)
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&roomkey_, 0, reinterpret_cast<char*>(&scene_) -
      reinterpret_cast<char*>(&roomkey_) + sizeof(scene_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TalkNoopReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.TalkNoopReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 RoomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_roomid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 RoomKey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_roomkey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roomkey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 UpdateTime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_updatetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Scene = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_scene();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.TalkNoopReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.TalkNoopReq)
  return false;
#undef DO_
}

void TalkNoopReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.TalkNoopReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required int32 RoomId = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // required int64 RoomKey = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->roomkey(), output);
  }

  // optional uint32 UpdateTime = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->updatetime(), output);
  }

  // optional uint32 Scene = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->scene(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.TalkNoopReq)
}

::google::protobuf::uint8* TalkNoopReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.TalkNoopReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required int32 RoomId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // required int64 RoomKey = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->roomkey(), target);
  }

  // optional uint32 UpdateTime = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->updatetime(), target);
  }

  // optional uint32 Scene = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->scene(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.TalkNoopReq)
  return target;
}

size_t TalkNoopReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.TalkNoopReq)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_roomkey()) {
    // required int64 RoomKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());
  }

  if (has_roomid()) {
    // required int32 RoomId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  return total_size;
}
size_t TalkNoopReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.TalkNoopReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required int64 RoomKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());

    // required int32 RoomId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 24u) {
    // optional uint32 UpdateTime = 4;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->updatetime());
    }

    // optional uint32 Scene = 5;
    if (has_scene()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TalkNoopReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.TalkNoopReq)
  GOOGLE_DCHECK_NE(&from, this);
  const TalkNoopReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TalkNoopReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.TalkNoopReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.TalkNoopReq)
    MergeFrom(*source);
  }
}

void TalkNoopReq::MergeFrom(const TalkNoopReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.TalkNoopReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      roomkey_ = from.roomkey_;
    }
    if (cached_has_bits & 0x00000004u) {
      roomid_ = from.roomid_;
    }
    if (cached_has_bits & 0x00000008u) {
      updatetime_ = from.updatetime_;
    }
    if (cached_has_bits & 0x00000010u) {
      scene_ = from.scene_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TalkNoopReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.TalkNoopReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TalkNoopReq::CopyFrom(const TalkNoopReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.TalkNoopReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TalkNoopReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void TalkNoopReq::Swap(TalkNoopReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TalkNoopReq::InternalSwap(TalkNoopReq* other) {
  std::swap(baserequest_, other->baserequest_);
  std::swap(roomkey_, other->roomkey_);
  std::swap(roomid_, other->roomid_);
  std::swap(updatetime_, other->updatetime_);
  std::swap(scene_, other->scene_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TalkNoopReq::GetMetadata() const {
  protobuf_mmtalk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmtalk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TalkNoopReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool TalkNoopReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TalkNoopReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void TalkNoopReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void TalkNoopReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& TalkNoopReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkNoopReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* TalkNoopReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.TalkNoopReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* TalkNoopReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.TalkNoopReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void TalkNoopReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.TalkNoopReq.BaseRequest)
}

// required int32 RoomId = 2;
bool TalkNoopReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TalkNoopReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
void TalkNoopReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
void TalkNoopReq::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
::google::protobuf::int32 TalkNoopReq::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkNoopReq.RoomId)
  return roomid_;
}
void TalkNoopReq::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.TalkNoopReq.RoomId)
}

// required int64 RoomKey = 3;
bool TalkNoopReq::has_roomkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TalkNoopReq::set_has_roomkey() {
  _has_bits_[0] |= 0x00000002u;
}
void TalkNoopReq::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000002u;
}
void TalkNoopReq::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
::google::protobuf::int64 TalkNoopReq::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkNoopReq.RoomKey)
  return roomkey_;
}
void TalkNoopReq::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.TalkNoopReq.RoomKey)
}

// optional uint32 UpdateTime = 4;
bool TalkNoopReq::has_updatetime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TalkNoopReq::set_has_updatetime() {
  _has_bits_[0] |= 0x00000008u;
}
void TalkNoopReq::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000008u;
}
void TalkNoopReq::clear_updatetime() {
  updatetime_ = 0u;
  clear_has_updatetime();
}
::google::protobuf::uint32 TalkNoopReq::updatetime() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkNoopReq.UpdateTime)
  return updatetime_;
}
void TalkNoopReq::set_updatetime(::google::protobuf::uint32 value) {
  set_has_updatetime();
  updatetime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.TalkNoopReq.UpdateTime)
}

// optional uint32 Scene = 5;
bool TalkNoopReq::has_scene() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TalkNoopReq::set_has_scene() {
  _has_bits_[0] |= 0x00000010u;
}
void TalkNoopReq::clear_has_scene() {
  _has_bits_[0] &= ~0x00000010u;
}
void TalkNoopReq::clear_scene() {
  scene_ = 0u;
  clear_has_scene();
}
::google::protobuf::uint32 TalkNoopReq::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkNoopReq.Scene)
  return scene_;
}
void TalkNoopReq::set_scene(::google::protobuf::uint32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.TalkNoopReq.Scene)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TalkNoopResp::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TalkNoopResp::TalkNoopResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmtalk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.TalkNoopResp)
}
TalkNoopResp::TalkNoopResp(const TalkNoopResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.TalkNoopResp)
}

void TalkNoopResp::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

TalkNoopResp::~TalkNoopResp() {
  // @@protoc_insertion_point(destructor:micromsg.TalkNoopResp)
  SharedDtor();
}

void TalkNoopResp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void TalkNoopResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TalkNoopResp::descriptor() {
  protobuf_mmtalk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmtalk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TalkNoopResp& TalkNoopResp::default_instance() {
  protobuf_mmtalk_2eproto::InitDefaults();
  return *internal_default_instance();
}

TalkNoopResp* TalkNoopResp::New(::google::protobuf::Arena* arena) const {
  TalkNoopResp* n = new TalkNoopResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TalkNoopResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.TalkNoopResp)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TalkNoopResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.TalkNoopResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.TalkNoopResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.TalkNoopResp)
  return false;
#undef DO_
}

void TalkNoopResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.TalkNoopResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.TalkNoopResp)
}

::google::protobuf::uint8* TalkNoopResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.TalkNoopResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.TalkNoopResp)
  return target;
}

size_t TalkNoopResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.TalkNoopResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TalkNoopResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.TalkNoopResp)
  GOOGLE_DCHECK_NE(&from, this);
  const TalkNoopResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TalkNoopResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.TalkNoopResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.TalkNoopResp)
    MergeFrom(*source);
  }
}

void TalkNoopResp::MergeFrom(const TalkNoopResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.TalkNoopResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void TalkNoopResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.TalkNoopResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TalkNoopResp::CopyFrom(const TalkNoopResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.TalkNoopResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TalkNoopResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void TalkNoopResp::Swap(TalkNoopResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TalkNoopResp::InternalSwap(TalkNoopResp* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TalkNoopResp::GetMetadata() const {
  protobuf_mmtalk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmtalk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TalkNoopResp

// required .micromsg.BaseResponse BaseResponse = 1;
bool TalkNoopResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TalkNoopResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void TalkNoopResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void TalkNoopResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& TalkNoopResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkNoopResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* TalkNoopResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.TalkNoopResp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* TalkNoopResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.TalkNoopResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void TalkNoopResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.TalkNoopResp.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTalkRoomMemberReq::kBaseRequestFieldNumber;
const int GetTalkRoomMemberReq::kRoomIdFieldNumber;
const int GetTalkRoomMemberReq::kRoomKeyFieldNumber;
const int GetTalkRoomMemberReq::kSceneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTalkRoomMemberReq::GetTalkRoomMemberReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmtalk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetTalkRoomMemberReq)
}
GetTalkRoomMemberReq::GetTalkRoomMemberReq(const GetTalkRoomMemberReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&roomkey_, &from.roomkey_,
    reinterpret_cast<char*>(&scene_) -
    reinterpret_cast<char*>(&roomkey_) + sizeof(scene_));
  // @@protoc_insertion_point(copy_constructor:micromsg.GetTalkRoomMemberReq)
}

void GetTalkRoomMemberReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&scene_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(scene_));
}

GetTalkRoomMemberReq::~GetTalkRoomMemberReq() {
  // @@protoc_insertion_point(destructor:micromsg.GetTalkRoomMemberReq)
  SharedDtor();
}

void GetTalkRoomMemberReq::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GetTalkRoomMemberReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTalkRoomMemberReq::descriptor() {
  protobuf_mmtalk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmtalk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetTalkRoomMemberReq& GetTalkRoomMemberReq::default_instance() {
  protobuf_mmtalk_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetTalkRoomMemberReq* GetTalkRoomMemberReq::New(::google::protobuf::Arena* arena) const {
  GetTalkRoomMemberReq* n = new GetTalkRoomMemberReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetTalkRoomMemberReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetTalkRoomMemberReq)
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&roomkey_, 0, reinterpret_cast<char*>(&scene_) -
      reinterpret_cast<char*>(&roomkey_) + sizeof(scene_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetTalkRoomMemberReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetTalkRoomMemberReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 RoomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_roomid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 RoomKey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_roomkey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roomkey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Scene = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_scene();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetTalkRoomMemberReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetTalkRoomMemberReq)
  return false;
#undef DO_
}

void GetTalkRoomMemberReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetTalkRoomMemberReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required int32 RoomId = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // required int64 RoomKey = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->roomkey(), output);
  }

  // optional uint32 Scene = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->scene(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetTalkRoomMemberReq)
}

::google::protobuf::uint8* GetTalkRoomMemberReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetTalkRoomMemberReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required int32 RoomId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // required int64 RoomKey = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->roomkey(), target);
  }

  // optional uint32 Scene = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->scene(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetTalkRoomMemberReq)
  return target;
}

size_t GetTalkRoomMemberReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetTalkRoomMemberReq)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_roomkey()) {
    // required int64 RoomKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());
  }

  if (has_roomid()) {
    // required int32 RoomId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  return total_size;
}
size_t GetTalkRoomMemberReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetTalkRoomMemberReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required int64 RoomKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());

    // required int32 RoomId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint32 Scene = 4;
  if (has_scene()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTalkRoomMemberReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetTalkRoomMemberReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTalkRoomMemberReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTalkRoomMemberReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetTalkRoomMemberReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetTalkRoomMemberReq)
    MergeFrom(*source);
  }
}

void GetTalkRoomMemberReq::MergeFrom(const GetTalkRoomMemberReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetTalkRoomMemberReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      roomkey_ = from.roomkey_;
    }
    if (cached_has_bits & 0x00000004u) {
      roomid_ = from.roomid_;
    }
    if (cached_has_bits & 0x00000008u) {
      scene_ = from.scene_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetTalkRoomMemberReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetTalkRoomMemberReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTalkRoomMemberReq::CopyFrom(const GetTalkRoomMemberReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetTalkRoomMemberReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTalkRoomMemberReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GetTalkRoomMemberReq::Swap(GetTalkRoomMemberReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTalkRoomMemberReq::InternalSwap(GetTalkRoomMemberReq* other) {
  std::swap(baserequest_, other->baserequest_);
  std::swap(roomkey_, other->roomkey_);
  std::swap(roomid_, other->roomid_);
  std::swap(scene_, other->scene_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetTalkRoomMemberReq::GetMetadata() const {
  protobuf_mmtalk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmtalk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetTalkRoomMemberReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool GetTalkRoomMemberReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetTalkRoomMemberReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void GetTalkRoomMemberReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetTalkRoomMemberReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GetTalkRoomMemberReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetTalkRoomMemberReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GetTalkRoomMemberReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetTalkRoomMemberReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GetTalkRoomMemberReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetTalkRoomMemberReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GetTalkRoomMemberReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetTalkRoomMemberReq.BaseRequest)
}

// required int32 RoomId = 2;
bool GetTalkRoomMemberReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetTalkRoomMemberReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
void GetTalkRoomMemberReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetTalkRoomMemberReq::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
::google::protobuf::int32 GetTalkRoomMemberReq::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.GetTalkRoomMemberReq.RoomId)
  return roomid_;
}
void GetTalkRoomMemberReq::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetTalkRoomMemberReq.RoomId)
}

// required int64 RoomKey = 3;
bool GetTalkRoomMemberReq::has_roomkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetTalkRoomMemberReq::set_has_roomkey() {
  _has_bits_[0] |= 0x00000002u;
}
void GetTalkRoomMemberReq::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetTalkRoomMemberReq::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
::google::protobuf::int64 GetTalkRoomMemberReq::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.GetTalkRoomMemberReq.RoomKey)
  return roomkey_;
}
void GetTalkRoomMemberReq::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetTalkRoomMemberReq.RoomKey)
}

// optional uint32 Scene = 4;
bool GetTalkRoomMemberReq::has_scene() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetTalkRoomMemberReq::set_has_scene() {
  _has_bits_[0] |= 0x00000008u;
}
void GetTalkRoomMemberReq::clear_has_scene() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetTalkRoomMemberReq::clear_scene() {
  scene_ = 0u;
  clear_has_scene();
}
::google::protobuf::uint32 GetTalkRoomMemberReq::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.GetTalkRoomMemberReq.Scene)
  return scene_;
}
void GetTalkRoomMemberReq::set_scene(::google::protobuf::uint32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetTalkRoomMemberReq.Scene)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTalkRoomMemberResp::kBaseResponseFieldNumber;
const int GetTalkRoomMemberResp::kMicSeqFieldNumber;
const int GetTalkRoomMemberResp::kMemberNumFieldNumber;
const int GetTalkRoomMemberResp::kMemberListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTalkRoomMemberResp::GetTalkRoomMemberResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmtalk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetTalkRoomMemberResp)
}
GetTalkRoomMemberResp::GetTalkRoomMemberResp(const GetTalkRoomMemberResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      memberlist_(from.memberlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  ::memcpy(&micseq_, &from.micseq_,
    reinterpret_cast<char*>(&membernum_) -
    reinterpret_cast<char*>(&micseq_) + sizeof(membernum_));
  // @@protoc_insertion_point(copy_constructor:micromsg.GetTalkRoomMemberResp)
}

void GetTalkRoomMemberResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&membernum_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(membernum_));
}

GetTalkRoomMemberResp::~GetTalkRoomMemberResp() {
  // @@protoc_insertion_point(destructor:micromsg.GetTalkRoomMemberResp)
  SharedDtor();
}

void GetTalkRoomMemberResp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void GetTalkRoomMemberResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTalkRoomMemberResp::descriptor() {
  protobuf_mmtalk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmtalk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetTalkRoomMemberResp& GetTalkRoomMemberResp::default_instance() {
  protobuf_mmtalk_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetTalkRoomMemberResp* GetTalkRoomMemberResp::New(::google::protobuf::Arena* arena) const {
  GetTalkRoomMemberResp* n = new GetTalkRoomMemberResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetTalkRoomMemberResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetTalkRoomMemberResp)
  memberlist_.Clear();
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&micseq_, 0, reinterpret_cast<char*>(&membernum_) -
      reinterpret_cast<char*>(&micseq_) + sizeof(membernum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetTalkRoomMemberResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetTalkRoomMemberResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 MicSeq = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_micseq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &micseq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 MemberNum = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_membernum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &membernum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.TalkRoomMember MemberList = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_memberlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetTalkRoomMemberResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetTalkRoomMemberResp)
  return false;
#undef DO_
}

void GetTalkRoomMemberResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetTalkRoomMemberResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required int32 MicSeq = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->micseq(), output);
  }

  // required int32 MemberNum = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->membernum(), output);
  }

  // repeated .micromsg.TalkRoomMember MemberList = 4;
  for (unsigned int i = 0, n = this->memberlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->memberlist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetTalkRoomMemberResp)
}

::google::protobuf::uint8* GetTalkRoomMemberResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetTalkRoomMemberResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required int32 MicSeq = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->micseq(), target);
  }

  // required int32 MemberNum = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->membernum(), target);
  }

  // repeated .micromsg.TalkRoomMember MemberList = 4;
  for (unsigned int i = 0, n = this->memberlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->memberlist(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetTalkRoomMemberResp)
  return target;
}

size_t GetTalkRoomMemberResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetTalkRoomMemberResp)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_micseq()) {
    // required int32 MicSeq = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->micseq());
  }

  if (has_membernum()) {
    // required int32 MemberNum = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->membernum());
  }

  return total_size;
}
size_t GetTalkRoomMemberResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetTalkRoomMemberResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required int32 MicSeq = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->micseq());

    // required int32 MemberNum = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->membernum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.TalkRoomMember MemberList = 4;
  {
    unsigned int count = this->memberlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memberlist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTalkRoomMemberResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetTalkRoomMemberResp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTalkRoomMemberResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTalkRoomMemberResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetTalkRoomMemberResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetTalkRoomMemberResp)
    MergeFrom(*source);
  }
}

void GetTalkRoomMemberResp::MergeFrom(const GetTalkRoomMemberResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetTalkRoomMemberResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  memberlist_.MergeFrom(from.memberlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      micseq_ = from.micseq_;
    }
    if (cached_has_bits & 0x00000004u) {
      membernum_ = from.membernum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetTalkRoomMemberResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetTalkRoomMemberResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTalkRoomMemberResp::CopyFrom(const GetTalkRoomMemberResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetTalkRoomMemberResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTalkRoomMemberResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->memberlist())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void GetTalkRoomMemberResp::Swap(GetTalkRoomMemberResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTalkRoomMemberResp::InternalSwap(GetTalkRoomMemberResp* other) {
  memberlist_.InternalSwap(&other->memberlist_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(micseq_, other->micseq_);
  std::swap(membernum_, other->membernum_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetTalkRoomMemberResp::GetMetadata() const {
  protobuf_mmtalk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmtalk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetTalkRoomMemberResp

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetTalkRoomMemberResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetTalkRoomMemberResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void GetTalkRoomMemberResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetTalkRoomMemberResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetTalkRoomMemberResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetTalkRoomMemberResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetTalkRoomMemberResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetTalkRoomMemberResp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetTalkRoomMemberResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetTalkRoomMemberResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetTalkRoomMemberResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetTalkRoomMemberResp.BaseResponse)
}

// required int32 MicSeq = 2;
bool GetTalkRoomMemberResp::has_micseq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetTalkRoomMemberResp::set_has_micseq() {
  _has_bits_[0] |= 0x00000002u;
}
void GetTalkRoomMemberResp::clear_has_micseq() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetTalkRoomMemberResp::clear_micseq() {
  micseq_ = 0;
  clear_has_micseq();
}
::google::protobuf::int32 GetTalkRoomMemberResp::micseq() const {
  // @@protoc_insertion_point(field_get:micromsg.GetTalkRoomMemberResp.MicSeq)
  return micseq_;
}
void GetTalkRoomMemberResp::set_micseq(::google::protobuf::int32 value) {
  set_has_micseq();
  micseq_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetTalkRoomMemberResp.MicSeq)
}

// required int32 MemberNum = 3;
bool GetTalkRoomMemberResp::has_membernum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetTalkRoomMemberResp::set_has_membernum() {
  _has_bits_[0] |= 0x00000004u;
}
void GetTalkRoomMemberResp::clear_has_membernum() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetTalkRoomMemberResp::clear_membernum() {
  membernum_ = 0;
  clear_has_membernum();
}
::google::protobuf::int32 GetTalkRoomMemberResp::membernum() const {
  // @@protoc_insertion_point(field_get:micromsg.GetTalkRoomMemberResp.MemberNum)
  return membernum_;
}
void GetTalkRoomMemberResp::set_membernum(::google::protobuf::int32 value) {
  set_has_membernum();
  membernum_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetTalkRoomMemberResp.MemberNum)
}

// repeated .micromsg.TalkRoomMember MemberList = 4;
int GetTalkRoomMemberResp::memberlist_size() const {
  return memberlist_.size();
}
void GetTalkRoomMemberResp::clear_memberlist() {
  memberlist_.Clear();
}
const ::micromsg::TalkRoomMember& GetTalkRoomMemberResp::memberlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GetTalkRoomMemberResp.MemberList)
  return memberlist_.Get(index);
}
::micromsg::TalkRoomMember* GetTalkRoomMemberResp::mutable_memberlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GetTalkRoomMemberResp.MemberList)
  return memberlist_.Mutable(index);
}
::micromsg::TalkRoomMember* GetTalkRoomMemberResp::add_memberlist() {
  // @@protoc_insertion_point(field_add:micromsg.GetTalkRoomMemberResp.MemberList)
  return memberlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::TalkRoomMember >*
GetTalkRoomMemberResp::mutable_memberlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GetTalkRoomMemberResp.MemberList)
  return &memberlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::TalkRoomMember >&
GetTalkRoomMemberResp::memberlist() const {
  // @@protoc_insertion_point(field_list:micromsg.GetTalkRoomMemberResp.MemberList)
  return memberlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TalkInviteReq::kBaseRequestFieldNumber;
const int TalkInviteReq::kRoomIdFieldNumber;
const int TalkInviteReq::kRoomKeyFieldNumber;
const int TalkInviteReq::kSceneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TalkInviteReq::TalkInviteReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmtalk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.TalkInviteReq)
}
TalkInviteReq::TalkInviteReq(const TalkInviteReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&roomkey_, &from.roomkey_,
    reinterpret_cast<char*>(&scene_) -
    reinterpret_cast<char*>(&roomkey_) + sizeof(scene_));
  // @@protoc_insertion_point(copy_constructor:micromsg.TalkInviteReq)
}

void TalkInviteReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&scene_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(scene_));
}

TalkInviteReq::~TalkInviteReq() {
  // @@protoc_insertion_point(destructor:micromsg.TalkInviteReq)
  SharedDtor();
}

void TalkInviteReq::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void TalkInviteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TalkInviteReq::descriptor() {
  protobuf_mmtalk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmtalk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TalkInviteReq& TalkInviteReq::default_instance() {
  protobuf_mmtalk_2eproto::InitDefaults();
  return *internal_default_instance();
}

TalkInviteReq* TalkInviteReq::New(::google::protobuf::Arena* arena) const {
  TalkInviteReq* n = new TalkInviteReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TalkInviteReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.TalkInviteReq)
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&roomkey_, 0, reinterpret_cast<char*>(&scene_) -
      reinterpret_cast<char*>(&roomkey_) + sizeof(scene_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TalkInviteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.TalkInviteReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 RoomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_roomid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 RoomKey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_roomkey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roomkey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Scene = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_scene();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.TalkInviteReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.TalkInviteReq)
  return false;
#undef DO_
}

void TalkInviteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.TalkInviteReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required int32 RoomId = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // required int64 RoomKey = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->roomkey(), output);
  }

  // optional uint32 Scene = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->scene(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.TalkInviteReq)
}

::google::protobuf::uint8* TalkInviteReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.TalkInviteReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required int32 RoomId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // required int64 RoomKey = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->roomkey(), target);
  }

  // optional uint32 Scene = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->scene(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.TalkInviteReq)
  return target;
}

size_t TalkInviteReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.TalkInviteReq)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_roomkey()) {
    // required int64 RoomKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());
  }

  if (has_roomid()) {
    // required int32 RoomId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  return total_size;
}
size_t TalkInviteReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.TalkInviteReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required int64 RoomKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());

    // required int32 RoomId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint32 Scene = 4;
  if (has_scene()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TalkInviteReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.TalkInviteReq)
  GOOGLE_DCHECK_NE(&from, this);
  const TalkInviteReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TalkInviteReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.TalkInviteReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.TalkInviteReq)
    MergeFrom(*source);
  }
}

void TalkInviteReq::MergeFrom(const TalkInviteReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.TalkInviteReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      roomkey_ = from.roomkey_;
    }
    if (cached_has_bits & 0x00000004u) {
      roomid_ = from.roomid_;
    }
    if (cached_has_bits & 0x00000008u) {
      scene_ = from.scene_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TalkInviteReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.TalkInviteReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TalkInviteReq::CopyFrom(const TalkInviteReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.TalkInviteReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TalkInviteReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void TalkInviteReq::Swap(TalkInviteReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TalkInviteReq::InternalSwap(TalkInviteReq* other) {
  std::swap(baserequest_, other->baserequest_);
  std::swap(roomkey_, other->roomkey_);
  std::swap(roomid_, other->roomid_);
  std::swap(scene_, other->scene_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TalkInviteReq::GetMetadata() const {
  protobuf_mmtalk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmtalk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TalkInviteReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool TalkInviteReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TalkInviteReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void TalkInviteReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void TalkInviteReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& TalkInviteReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkInviteReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* TalkInviteReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.TalkInviteReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* TalkInviteReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.TalkInviteReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void TalkInviteReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.TalkInviteReq.BaseRequest)
}

// required int32 RoomId = 2;
bool TalkInviteReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TalkInviteReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
void TalkInviteReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
void TalkInviteReq::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
::google::protobuf::int32 TalkInviteReq::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkInviteReq.RoomId)
  return roomid_;
}
void TalkInviteReq::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.TalkInviteReq.RoomId)
}

// required int64 RoomKey = 3;
bool TalkInviteReq::has_roomkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TalkInviteReq::set_has_roomkey() {
  _has_bits_[0] |= 0x00000002u;
}
void TalkInviteReq::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000002u;
}
void TalkInviteReq::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
::google::protobuf::int64 TalkInviteReq::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkInviteReq.RoomKey)
  return roomkey_;
}
void TalkInviteReq::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.TalkInviteReq.RoomKey)
}

// optional uint32 Scene = 4;
bool TalkInviteReq::has_scene() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TalkInviteReq::set_has_scene() {
  _has_bits_[0] |= 0x00000008u;
}
void TalkInviteReq::clear_has_scene() {
  _has_bits_[0] &= ~0x00000008u;
}
void TalkInviteReq::clear_scene() {
  scene_ = 0u;
  clear_has_scene();
}
::google::protobuf::uint32 TalkInviteReq::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkInviteReq.Scene)
  return scene_;
}
void TalkInviteReq::set_scene(::google::protobuf::uint32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.TalkInviteReq.Scene)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TalkInviteResp::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TalkInviteResp::TalkInviteResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmtalk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.TalkInviteResp)
}
TalkInviteResp::TalkInviteResp(const TalkInviteResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.TalkInviteResp)
}

void TalkInviteResp::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

TalkInviteResp::~TalkInviteResp() {
  // @@protoc_insertion_point(destructor:micromsg.TalkInviteResp)
  SharedDtor();
}

void TalkInviteResp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void TalkInviteResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TalkInviteResp::descriptor() {
  protobuf_mmtalk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmtalk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TalkInviteResp& TalkInviteResp::default_instance() {
  protobuf_mmtalk_2eproto::InitDefaults();
  return *internal_default_instance();
}

TalkInviteResp* TalkInviteResp::New(::google::protobuf::Arena* arena) const {
  TalkInviteResp* n = new TalkInviteResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TalkInviteResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.TalkInviteResp)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TalkInviteResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.TalkInviteResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.TalkInviteResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.TalkInviteResp)
  return false;
#undef DO_
}

void TalkInviteResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.TalkInviteResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.TalkInviteResp)
}

::google::protobuf::uint8* TalkInviteResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.TalkInviteResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.TalkInviteResp)
  return target;
}

size_t TalkInviteResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.TalkInviteResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TalkInviteResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.TalkInviteResp)
  GOOGLE_DCHECK_NE(&from, this);
  const TalkInviteResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TalkInviteResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.TalkInviteResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.TalkInviteResp)
    MergeFrom(*source);
  }
}

void TalkInviteResp::MergeFrom(const TalkInviteResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.TalkInviteResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void TalkInviteResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.TalkInviteResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TalkInviteResp::CopyFrom(const TalkInviteResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.TalkInviteResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TalkInviteResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void TalkInviteResp::Swap(TalkInviteResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TalkInviteResp::InternalSwap(TalkInviteResp* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TalkInviteResp::GetMetadata() const {
  protobuf_mmtalk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmtalk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TalkInviteResp

// required .micromsg.BaseResponse BaseResponse = 1;
bool TalkInviteResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TalkInviteResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void TalkInviteResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void TalkInviteResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& TalkInviteResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkInviteResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* TalkInviteResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.TalkInviteResp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* TalkInviteResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.TalkInviteResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void TalkInviteResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.TalkInviteResp.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TalkStatReportData::kLogIDFieldNumber;
const int TalkStatReportData::kStatReportFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TalkStatReportData::TalkStatReportData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmtalk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.TalkStatReportData)
}
TalkStatReportData::TalkStatReportData(const TalkStatReportData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_statreport()) {
    statreport_ = new ::micromsg::SKBuiltinString_t(*from.statreport_);
  } else {
    statreport_ = NULL;
  }
  logid_ = from.logid_;
  // @@protoc_insertion_point(copy_constructor:micromsg.TalkStatReportData)
}

void TalkStatReportData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&statreport_, 0, reinterpret_cast<char*>(&logid_) -
    reinterpret_cast<char*>(&statreport_) + sizeof(logid_));
}

TalkStatReportData::~TalkStatReportData() {
  // @@protoc_insertion_point(destructor:micromsg.TalkStatReportData)
  SharedDtor();
}

void TalkStatReportData::SharedDtor() {
  if (this != internal_default_instance()) {
    delete statreport_;
  }
}

void TalkStatReportData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TalkStatReportData::descriptor() {
  protobuf_mmtalk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmtalk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TalkStatReportData& TalkStatReportData::default_instance() {
  protobuf_mmtalk_2eproto::InitDefaults();
  return *internal_default_instance();
}

TalkStatReportData* TalkStatReportData::New(::google::protobuf::Arena* arena) const {
  TalkStatReportData* n = new TalkStatReportData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TalkStatReportData::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.TalkStatReportData)
  if (has_statreport()) {
    GOOGLE_DCHECK(statreport_ != NULL);
    statreport_->::micromsg::SKBuiltinString_t::Clear();
  }
  logid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TalkStatReportData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.TalkStatReportData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 LogID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_logid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t StatReport = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statreport()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.TalkStatReportData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.TalkStatReportData)
  return false;
#undef DO_
}

void TalkStatReportData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.TalkStatReportData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 LogID = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->logid(), output);
  }

  // required .micromsg.SKBuiltinString_t StatReport = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->statreport_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.TalkStatReportData)
}

::google::protobuf::uint8* TalkStatReportData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.TalkStatReportData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 LogID = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->logid(), target);
  }

  // required .micromsg.SKBuiltinString_t StatReport = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->statreport_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.TalkStatReportData)
  return target;
}

size_t TalkStatReportData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.TalkStatReportData)
  size_t total_size = 0;

  if (has_statreport()) {
    // required .micromsg.SKBuiltinString_t StatReport = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->statreport_);
  }

  if (has_logid()) {
    // required int32 LogID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->logid());
  }

  return total_size;
}
size_t TalkStatReportData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.TalkStatReportData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.SKBuiltinString_t StatReport = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->statreport_);

    // required int32 LogID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->logid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TalkStatReportData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.TalkStatReportData)
  GOOGLE_DCHECK_NE(&from, this);
  const TalkStatReportData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TalkStatReportData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.TalkStatReportData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.TalkStatReportData)
    MergeFrom(*source);
  }
}

void TalkStatReportData::MergeFrom(const TalkStatReportData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.TalkStatReportData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_statreport()->::micromsg::SKBuiltinString_t::MergeFrom(from.statreport());
    }
    if (cached_has_bits & 0x00000002u) {
      logid_ = from.logid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TalkStatReportData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.TalkStatReportData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TalkStatReportData::CopyFrom(const TalkStatReportData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.TalkStatReportData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TalkStatReportData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void TalkStatReportData::Swap(TalkStatReportData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TalkStatReportData::InternalSwap(TalkStatReportData* other) {
  std::swap(statreport_, other->statreport_);
  std::swap(logid_, other->logid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TalkStatReportData::GetMetadata() const {
  protobuf_mmtalk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmtalk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TalkStatReportData

// required int32 LogID = 1;
bool TalkStatReportData::has_logid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TalkStatReportData::set_has_logid() {
  _has_bits_[0] |= 0x00000002u;
}
void TalkStatReportData::clear_has_logid() {
  _has_bits_[0] &= ~0x00000002u;
}
void TalkStatReportData::clear_logid() {
  logid_ = 0;
  clear_has_logid();
}
::google::protobuf::int32 TalkStatReportData::logid() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkStatReportData.LogID)
  return logid_;
}
void TalkStatReportData::set_logid(::google::protobuf::int32 value) {
  set_has_logid();
  logid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.TalkStatReportData.LogID)
}

// required .micromsg.SKBuiltinString_t StatReport = 2;
bool TalkStatReportData::has_statreport() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TalkStatReportData::set_has_statreport() {
  _has_bits_[0] |= 0x00000001u;
}
void TalkStatReportData::clear_has_statreport() {
  _has_bits_[0] &= ~0x00000001u;
}
void TalkStatReportData::clear_statreport() {
  if (statreport_ != NULL) statreport_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_statreport();
}
const ::micromsg::SKBuiltinString_t& TalkStatReportData::statreport() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkStatReportData.StatReport)
  return statreport_ != NULL ? *statreport_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* TalkStatReportData::mutable_statreport() {
  set_has_statreport();
  if (statreport_ == NULL) {
    statreport_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.TalkStatReportData.StatReport)
  return statreport_;
}
::micromsg::SKBuiltinString_t* TalkStatReportData::release_statreport() {
  // @@protoc_insertion_point(field_release:micromsg.TalkStatReportData.StatReport)
  clear_has_statreport();
  ::micromsg::SKBuiltinString_t* temp = statreport_;
  statreport_ = NULL;
  return temp;
}
void TalkStatReportData::set_allocated_statreport(::micromsg::SKBuiltinString_t* statreport) {
  delete statreport_;
  statreport_ = statreport;
  if (statreport) {
    set_has_statreport();
  } else {
    clear_has_statreport();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.TalkStatReportData.StatReport)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TalkStatReportReq::kBaseRequestFieldNumber;
const int TalkStatReportReq::kDataNumFieldNumber;
const int TalkStatReportReq::kReportDataFieldNumber;
const int TalkStatReportReq::kSceneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TalkStatReportReq::TalkStatReportReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmtalk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.TalkStatReportReq)
}
TalkStatReportReq::TalkStatReportReq(const TalkStatReportReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      reportdata_(from.reportdata_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&datanum_, &from.datanum_,
    reinterpret_cast<char*>(&scene_) -
    reinterpret_cast<char*>(&datanum_) + sizeof(scene_));
  // @@protoc_insertion_point(copy_constructor:micromsg.TalkStatReportReq)
}

void TalkStatReportReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&scene_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(scene_));
}

TalkStatReportReq::~TalkStatReportReq() {
  // @@protoc_insertion_point(destructor:micromsg.TalkStatReportReq)
  SharedDtor();
}

void TalkStatReportReq::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void TalkStatReportReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TalkStatReportReq::descriptor() {
  protobuf_mmtalk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmtalk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TalkStatReportReq& TalkStatReportReq::default_instance() {
  protobuf_mmtalk_2eproto::InitDefaults();
  return *internal_default_instance();
}

TalkStatReportReq* TalkStatReportReq::New(::google::protobuf::Arena* arena) const {
  TalkStatReportReq* n = new TalkStatReportReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TalkStatReportReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.TalkStatReportReq)
  reportdata_.Clear();
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&datanum_, 0, reinterpret_cast<char*>(&scene_) -
      reinterpret_cast<char*>(&datanum_) + sizeof(scene_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TalkStatReportReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.TalkStatReportReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 DataNum = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_datanum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datanum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.TalkStatReportData ReportData = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reportdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Scene = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_scene();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.TalkStatReportReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.TalkStatReportReq)
  return false;
#undef DO_
}

void TalkStatReportReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.TalkStatReportReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required int32 DataNum = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->datanum(), output);
  }

  // repeated .micromsg.TalkStatReportData ReportData = 3;
  for (unsigned int i = 0, n = this->reportdata_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reportdata(i), output);
  }

  // optional uint32 Scene = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->scene(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.TalkStatReportReq)
}

::google::protobuf::uint8* TalkStatReportReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.TalkStatReportReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required int32 DataNum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->datanum(), target);
  }

  // repeated .micromsg.TalkStatReportData ReportData = 3;
  for (unsigned int i = 0, n = this->reportdata_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->reportdata(i), deterministic, target);
  }

  // optional uint32 Scene = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->scene(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.TalkStatReportReq)
  return target;
}

size_t TalkStatReportReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.TalkStatReportReq)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_datanum()) {
    // required int32 DataNum = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->datanum());
  }

  return total_size;
}
size_t TalkStatReportReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.TalkStatReportReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required int32 DataNum = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->datanum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.TalkStatReportData ReportData = 3;
  {
    unsigned int count = this->reportdata_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reportdata(i));
    }
  }

  // optional uint32 Scene = 4;
  if (has_scene()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TalkStatReportReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.TalkStatReportReq)
  GOOGLE_DCHECK_NE(&from, this);
  const TalkStatReportReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TalkStatReportReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.TalkStatReportReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.TalkStatReportReq)
    MergeFrom(*source);
  }
}

void TalkStatReportReq::MergeFrom(const TalkStatReportReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.TalkStatReportReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reportdata_.MergeFrom(from.reportdata_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      datanum_ = from.datanum_;
    }
    if (cached_has_bits & 0x00000004u) {
      scene_ = from.scene_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TalkStatReportReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.TalkStatReportReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TalkStatReportReq::CopyFrom(const TalkStatReportReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.TalkStatReportReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TalkStatReportReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->reportdata())) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void TalkStatReportReq::Swap(TalkStatReportReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TalkStatReportReq::InternalSwap(TalkStatReportReq* other) {
  reportdata_.InternalSwap(&other->reportdata_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(datanum_, other->datanum_);
  std::swap(scene_, other->scene_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TalkStatReportReq::GetMetadata() const {
  protobuf_mmtalk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmtalk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TalkStatReportReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool TalkStatReportReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TalkStatReportReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void TalkStatReportReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void TalkStatReportReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& TalkStatReportReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkStatReportReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* TalkStatReportReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.TalkStatReportReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* TalkStatReportReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.TalkStatReportReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void TalkStatReportReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.TalkStatReportReq.BaseRequest)
}

// required int32 DataNum = 2;
bool TalkStatReportReq::has_datanum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TalkStatReportReq::set_has_datanum() {
  _has_bits_[0] |= 0x00000002u;
}
void TalkStatReportReq::clear_has_datanum() {
  _has_bits_[0] &= ~0x00000002u;
}
void TalkStatReportReq::clear_datanum() {
  datanum_ = 0;
  clear_has_datanum();
}
::google::protobuf::int32 TalkStatReportReq::datanum() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkStatReportReq.DataNum)
  return datanum_;
}
void TalkStatReportReq::set_datanum(::google::protobuf::int32 value) {
  set_has_datanum();
  datanum_ = value;
  // @@protoc_insertion_point(field_set:micromsg.TalkStatReportReq.DataNum)
}

// repeated .micromsg.TalkStatReportData ReportData = 3;
int TalkStatReportReq::reportdata_size() const {
  return reportdata_.size();
}
void TalkStatReportReq::clear_reportdata() {
  reportdata_.Clear();
}
const ::micromsg::TalkStatReportData& TalkStatReportReq::reportdata(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.TalkStatReportReq.ReportData)
  return reportdata_.Get(index);
}
::micromsg::TalkStatReportData* TalkStatReportReq::mutable_reportdata(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.TalkStatReportReq.ReportData)
  return reportdata_.Mutable(index);
}
::micromsg::TalkStatReportData* TalkStatReportReq::add_reportdata() {
  // @@protoc_insertion_point(field_add:micromsg.TalkStatReportReq.ReportData)
  return reportdata_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::TalkStatReportData >*
TalkStatReportReq::mutable_reportdata() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.TalkStatReportReq.ReportData)
  return &reportdata_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::TalkStatReportData >&
TalkStatReportReq::reportdata() const {
  // @@protoc_insertion_point(field_list:micromsg.TalkStatReportReq.ReportData)
  return reportdata_;
}

// optional uint32 Scene = 4;
bool TalkStatReportReq::has_scene() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TalkStatReportReq::set_has_scene() {
  _has_bits_[0] |= 0x00000004u;
}
void TalkStatReportReq::clear_has_scene() {
  _has_bits_[0] &= ~0x00000004u;
}
void TalkStatReportReq::clear_scene() {
  scene_ = 0u;
  clear_has_scene();
}
::google::protobuf::uint32 TalkStatReportReq::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkStatReportReq.Scene)
  return scene_;
}
void TalkStatReportReq::set_scene(::google::protobuf::uint32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.TalkStatReportReq.Scene)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TalkStatReportResp::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TalkStatReportResp::TalkStatReportResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmtalk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.TalkStatReportResp)
}
TalkStatReportResp::TalkStatReportResp(const TalkStatReportResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.TalkStatReportResp)
}

void TalkStatReportResp::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

TalkStatReportResp::~TalkStatReportResp() {
  // @@protoc_insertion_point(destructor:micromsg.TalkStatReportResp)
  SharedDtor();
}

void TalkStatReportResp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void TalkStatReportResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TalkStatReportResp::descriptor() {
  protobuf_mmtalk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmtalk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TalkStatReportResp& TalkStatReportResp::default_instance() {
  protobuf_mmtalk_2eproto::InitDefaults();
  return *internal_default_instance();
}

TalkStatReportResp* TalkStatReportResp::New(::google::protobuf::Arena* arena) const {
  TalkStatReportResp* n = new TalkStatReportResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TalkStatReportResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.TalkStatReportResp)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TalkStatReportResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.TalkStatReportResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.TalkStatReportResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.TalkStatReportResp)
  return false;
#undef DO_
}

void TalkStatReportResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.TalkStatReportResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.TalkStatReportResp)
}

::google::protobuf::uint8* TalkStatReportResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.TalkStatReportResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.TalkStatReportResp)
  return target;
}

size_t TalkStatReportResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.TalkStatReportResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TalkStatReportResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.TalkStatReportResp)
  GOOGLE_DCHECK_NE(&from, this);
  const TalkStatReportResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TalkStatReportResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.TalkStatReportResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.TalkStatReportResp)
    MergeFrom(*source);
  }
}

void TalkStatReportResp::MergeFrom(const TalkStatReportResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.TalkStatReportResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void TalkStatReportResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.TalkStatReportResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TalkStatReportResp::CopyFrom(const TalkStatReportResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.TalkStatReportResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TalkStatReportResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void TalkStatReportResp::Swap(TalkStatReportResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TalkStatReportResp::InternalSwap(TalkStatReportResp* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TalkStatReportResp::GetMetadata() const {
  protobuf_mmtalk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmtalk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TalkStatReportResp

// required .micromsg.BaseResponse BaseResponse = 1;
bool TalkStatReportResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TalkStatReportResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void TalkStatReportResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void TalkStatReportResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& TalkStatReportResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkStatReportResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* TalkStatReportResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.TalkStatReportResp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* TalkStatReportResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.TalkStatReportResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void TalkStatReportResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.TalkStatReportResp.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateTalkRoomRequest::kBaseRequestFieldNumber;
const int CreateTalkRoomRequest::kTopicFieldNumber;
const int CreateTalkRoomRequest::kMemberCountFieldNumber;
const int CreateTalkRoomRequest::kMemberListFieldNumber;
const int CreateTalkRoomRequest::kSceneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateTalkRoomRequest::CreateTalkRoomRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmtalk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.CreateTalkRoomRequest)
}
CreateTalkRoomRequest::CreateTalkRoomRequest(const CreateTalkRoomRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      memberlist_(from.memberlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_topic()) {
    topic_ = new ::micromsg::SKBuiltinString_t(*from.topic_);
  } else {
    topic_ = NULL;
  }
  ::memcpy(&membercount_, &from.membercount_,
    reinterpret_cast<char*>(&scene_) -
    reinterpret_cast<char*>(&membercount_) + sizeof(scene_));
  // @@protoc_insertion_point(copy_constructor:micromsg.CreateTalkRoomRequest)
}

void CreateTalkRoomRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&scene_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(scene_));
}

CreateTalkRoomRequest::~CreateTalkRoomRequest() {
  // @@protoc_insertion_point(destructor:micromsg.CreateTalkRoomRequest)
  SharedDtor();
}

void CreateTalkRoomRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete topic_;
  }
}

void CreateTalkRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateTalkRoomRequest::descriptor() {
  protobuf_mmtalk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmtalk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateTalkRoomRequest& CreateTalkRoomRequest::default_instance() {
  protobuf_mmtalk_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateTalkRoomRequest* CreateTalkRoomRequest::New(::google::protobuf::Arena* arena) const {
  CreateTalkRoomRequest* n = new CreateTalkRoomRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateTalkRoomRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.CreateTalkRoomRequest)
  memberlist_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_topic()) {
      GOOGLE_DCHECK(topic_ != NULL);
      topic_->::micromsg::SKBuiltinString_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&membercount_, 0, reinterpret_cast<char*>(&scene_) -
      reinterpret_cast<char*>(&membercount_) + sizeof(scene_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CreateTalkRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.CreateTalkRoomRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t Topic = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 MemberCount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_membercount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &membercount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.MemberReq MemberList = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_memberlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Scene = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_scene();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.CreateTalkRoomRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.CreateTalkRoomRequest)
  return false;
#undef DO_
}

void CreateTalkRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.CreateTalkRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required .micromsg.SKBuiltinString_t Topic = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->topic_, output);
  }

  // required uint32 MemberCount = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->membercount(), output);
  }

  // repeated .micromsg.MemberReq MemberList = 4;
  for (unsigned int i = 0, n = this->memberlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->memberlist(i), output);
  }

  // optional uint32 Scene = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->scene(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.CreateTalkRoomRequest)
}

::google::protobuf::uint8* CreateTalkRoomRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.CreateTalkRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t Topic = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->topic_, deterministic, target);
  }

  // required uint32 MemberCount = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->membercount(), target);
  }

  // repeated .micromsg.MemberReq MemberList = 4;
  for (unsigned int i = 0, n = this->memberlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->memberlist(i), deterministic, target);
  }

  // optional uint32 Scene = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->scene(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.CreateTalkRoomRequest)
  return target;
}

size_t CreateTalkRoomRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.CreateTalkRoomRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_topic()) {
    // required .micromsg.SKBuiltinString_t Topic = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->topic_);
  }

  if (has_membercount()) {
    // required uint32 MemberCount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->membercount());
  }

  return total_size;
}
size_t CreateTalkRoomRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.CreateTalkRoomRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.SKBuiltinString_t Topic = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->topic_);

    // required uint32 MemberCount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->membercount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.MemberReq MemberList = 4;
  {
    unsigned int count = this->memberlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memberlist(i));
    }
  }

  // optional uint32 Scene = 5;
  if (has_scene()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateTalkRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.CreateTalkRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateTalkRoomRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateTalkRoomRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.CreateTalkRoomRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.CreateTalkRoomRequest)
    MergeFrom(*source);
  }
}

void CreateTalkRoomRequest::MergeFrom(const CreateTalkRoomRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.CreateTalkRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  memberlist_.MergeFrom(from.memberlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_topic()->::micromsg::SKBuiltinString_t::MergeFrom(from.topic());
    }
    if (cached_has_bits & 0x00000004u) {
      membercount_ = from.membercount_;
    }
    if (cached_has_bits & 0x00000008u) {
      scene_ = from.scene_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CreateTalkRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.CreateTalkRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateTalkRoomRequest::CopyFrom(const CreateTalkRoomRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.CreateTalkRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTalkRoomRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->memberlist())) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void CreateTalkRoomRequest::Swap(CreateTalkRoomRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateTalkRoomRequest::InternalSwap(CreateTalkRoomRequest* other) {
  memberlist_.InternalSwap(&other->memberlist_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(topic_, other->topic_);
  std::swap(membercount_, other->membercount_);
  std::swap(scene_, other->scene_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateTalkRoomRequest::GetMetadata() const {
  protobuf_mmtalk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmtalk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateTalkRoomRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool CreateTalkRoomRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CreateTalkRoomRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void CreateTalkRoomRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void CreateTalkRoomRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& CreateTalkRoomRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateTalkRoomRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* CreateTalkRoomRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CreateTalkRoomRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* CreateTalkRoomRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.CreateTalkRoomRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void CreateTalkRoomRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CreateTalkRoomRequest.BaseRequest)
}

// required .micromsg.SKBuiltinString_t Topic = 2;
bool CreateTalkRoomRequest::has_topic() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CreateTalkRoomRequest::set_has_topic() {
  _has_bits_[0] |= 0x00000002u;
}
void CreateTalkRoomRequest::clear_has_topic() {
  _has_bits_[0] &= ~0x00000002u;
}
void CreateTalkRoomRequest::clear_topic() {
  if (topic_ != NULL) topic_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_topic();
}
const ::micromsg::SKBuiltinString_t& CreateTalkRoomRequest::topic() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateTalkRoomRequest.Topic)
  return topic_ != NULL ? *topic_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* CreateTalkRoomRequest::mutable_topic() {
  set_has_topic();
  if (topic_ == NULL) {
    topic_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CreateTalkRoomRequest.Topic)
  return topic_;
}
::micromsg::SKBuiltinString_t* CreateTalkRoomRequest::release_topic() {
  // @@protoc_insertion_point(field_release:micromsg.CreateTalkRoomRequest.Topic)
  clear_has_topic();
  ::micromsg::SKBuiltinString_t* temp = topic_;
  topic_ = NULL;
  return temp;
}
void CreateTalkRoomRequest::set_allocated_topic(::micromsg::SKBuiltinString_t* topic) {
  delete topic_;
  topic_ = topic;
  if (topic) {
    set_has_topic();
  } else {
    clear_has_topic();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CreateTalkRoomRequest.Topic)
}

// required uint32 MemberCount = 3;
bool CreateTalkRoomRequest::has_membercount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CreateTalkRoomRequest::set_has_membercount() {
  _has_bits_[0] |= 0x00000004u;
}
void CreateTalkRoomRequest::clear_has_membercount() {
  _has_bits_[0] &= ~0x00000004u;
}
void CreateTalkRoomRequest::clear_membercount() {
  membercount_ = 0u;
  clear_has_membercount();
}
::google::protobuf::uint32 CreateTalkRoomRequest::membercount() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateTalkRoomRequest.MemberCount)
  return membercount_;
}
void CreateTalkRoomRequest::set_membercount(::google::protobuf::uint32 value) {
  set_has_membercount();
  membercount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CreateTalkRoomRequest.MemberCount)
}

// repeated .micromsg.MemberReq MemberList = 4;
int CreateTalkRoomRequest::memberlist_size() const {
  return memberlist_.size();
}
void CreateTalkRoomRequest::clear_memberlist() {
  memberlist_.Clear();
}
const ::micromsg::MemberReq& CreateTalkRoomRequest::memberlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.CreateTalkRoomRequest.MemberList)
  return memberlist_.Get(index);
}
::micromsg::MemberReq* CreateTalkRoomRequest::mutable_memberlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.CreateTalkRoomRequest.MemberList)
  return memberlist_.Mutable(index);
}
::micromsg::MemberReq* CreateTalkRoomRequest::add_memberlist() {
  // @@protoc_insertion_point(field_add:micromsg.CreateTalkRoomRequest.MemberList)
  return memberlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::MemberReq >*
CreateTalkRoomRequest::mutable_memberlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.CreateTalkRoomRequest.MemberList)
  return &memberlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::MemberReq >&
CreateTalkRoomRequest::memberlist() const {
  // @@protoc_insertion_point(field_list:micromsg.CreateTalkRoomRequest.MemberList)
  return memberlist_;
}

// optional uint32 Scene = 5;
bool CreateTalkRoomRequest::has_scene() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CreateTalkRoomRequest::set_has_scene() {
  _has_bits_[0] |= 0x00000008u;
}
void CreateTalkRoomRequest::clear_has_scene() {
  _has_bits_[0] &= ~0x00000008u;
}
void CreateTalkRoomRequest::clear_scene() {
  scene_ = 0u;
  clear_has_scene();
}
::google::protobuf::uint32 CreateTalkRoomRequest::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateTalkRoomRequest.Scene)
  return scene_;
}
void CreateTalkRoomRequest::set_scene(::google::protobuf::uint32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CreateTalkRoomRequest.Scene)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateTalkRoomResponse::kBaseResponseFieldNumber;
const int CreateTalkRoomResponse::kTopicFieldNumber;
const int CreateTalkRoomResponse::kPYInitialFieldNumber;
const int CreateTalkRoomResponse::kQuanPinFieldNumber;
const int CreateTalkRoomResponse::kMemberCountFieldNumber;
const int CreateTalkRoomResponse::kMemberListFieldNumber;
const int CreateTalkRoomResponse::kTalkRoomNameFieldNumber;
const int CreateTalkRoomResponse::kImgBufFieldNumber;
const int CreateTalkRoomResponse::kBigHeadImgUrlFieldNumber;
const int CreateTalkRoomResponse::kSmallHeadImgUrlFieldNumber;
const int CreateTalkRoomResponse::kRoomIdFieldNumber;
const int CreateTalkRoomResponse::kRoomKeyFieldNumber;
const int CreateTalkRoomResponse::kMicSeqFieldNumber;
const int CreateTalkRoomResponse::kMyRoomMemberIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateTalkRoomResponse::CreateTalkRoomResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmtalk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.CreateTalkRoomResponse)
}
CreateTalkRoomResponse::CreateTalkRoomResponse(const CreateTalkRoomResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      memberlist_(from.memberlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bigheadimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bigheadimgurl()) {
    bigheadimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bigheadimgurl_);
  }
  smallheadimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_smallheadimgurl()) {
    smallheadimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smallheadimgurl_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_topic()) {
    topic_ = new ::micromsg::SKBuiltinString_t(*from.topic_);
  } else {
    topic_ = NULL;
  }
  if (from.has_pyinitial()) {
    pyinitial_ = new ::micromsg::SKBuiltinString_t(*from.pyinitial_);
  } else {
    pyinitial_ = NULL;
  }
  if (from.has_quanpin()) {
    quanpin_ = new ::micromsg::SKBuiltinString_t(*from.quanpin_);
  } else {
    quanpin_ = NULL;
  }
  if (from.has_talkroomname()) {
    talkroomname_ = new ::micromsg::SKBuiltinString_t(*from.talkroomname_);
  } else {
    talkroomname_ = NULL;
  }
  if (from.has_imgbuf()) {
    imgbuf_ = new ::micromsg::SKBuiltinBuffer_t(*from.imgbuf_);
  } else {
    imgbuf_ = NULL;
  }
  ::memcpy(&membercount_, &from.membercount_,
    reinterpret_cast<char*>(&myroommemberid_) -
    reinterpret_cast<char*>(&membercount_) + sizeof(myroommemberid_));
  // @@protoc_insertion_point(copy_constructor:micromsg.CreateTalkRoomResponse)
}

void CreateTalkRoomResponse::SharedCtor() {
  _cached_size_ = 0;
  bigheadimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smallheadimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&myroommemberid_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(myroommemberid_));
}

CreateTalkRoomResponse::~CreateTalkRoomResponse() {
  // @@protoc_insertion_point(destructor:micromsg.CreateTalkRoomResponse)
  SharedDtor();
}

void CreateTalkRoomResponse::SharedDtor() {
  bigheadimgurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smallheadimgurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete topic_;
  }
  if (this != internal_default_instance()) {
    delete pyinitial_;
  }
  if (this != internal_default_instance()) {
    delete quanpin_;
  }
  if (this != internal_default_instance()) {
    delete talkroomname_;
  }
  if (this != internal_default_instance()) {
    delete imgbuf_;
  }
}

void CreateTalkRoomResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateTalkRoomResponse::descriptor() {
  protobuf_mmtalk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmtalk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateTalkRoomResponse& CreateTalkRoomResponse::default_instance() {
  protobuf_mmtalk_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateTalkRoomResponse* CreateTalkRoomResponse::New(::google::protobuf::Arena* arena) const {
  CreateTalkRoomResponse* n = new CreateTalkRoomResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateTalkRoomResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.CreateTalkRoomResponse)
  memberlist_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    if (has_bigheadimgurl()) {
      GOOGLE_DCHECK(!bigheadimgurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bigheadimgurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_smallheadimgurl()) {
      GOOGLE_DCHECK(!smallheadimgurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*smallheadimgurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_topic()) {
      GOOGLE_DCHECK(topic_ != NULL);
      topic_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_pyinitial()) {
      GOOGLE_DCHECK(pyinitial_ != NULL);
      pyinitial_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_quanpin()) {
      GOOGLE_DCHECK(quanpin_ != NULL);
      quanpin_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_talkroomname()) {
      GOOGLE_DCHECK(talkroomname_ != NULL);
      talkroomname_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_imgbuf()) {
      GOOGLE_DCHECK(imgbuf_ != NULL);
      imgbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 7936u) {
    ::memset(&membercount_, 0, reinterpret_cast<char*>(&myroommemberid_) -
      reinterpret_cast<char*>(&membercount_) + sizeof(myroommemberid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CreateTalkRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.CreateTalkRoomResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t Topic = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t PYInitial = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pyinitial()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t QuanPin = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quanpin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 MemberCount = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_membercount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &membercount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.MemberResp MemberList = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_memberlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t TalkRoomName = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_talkroomname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t ImgBuf = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imgbuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string BigHeadImgUrl = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bigheadimgurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bigheadimgurl().data(), this->bigheadimgurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CreateTalkRoomResponse.BigHeadImgUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string SmallHeadImgUrl = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smallheadimgurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->smallheadimgurl().data(), this->smallheadimgurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CreateTalkRoomResponse.SmallHeadImgUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 RoomId = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_roomid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 RoomKey = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_roomkey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roomkey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 MicSeq = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_micseq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &micseq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 MyRoomMemberId = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_myroommemberid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &myroommemberid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.CreateTalkRoomResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.CreateTalkRoomResponse)
  return false;
#undef DO_
}

void CreateTalkRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.CreateTalkRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required .micromsg.SKBuiltinString_t Topic = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->topic_, output);
  }

  // required .micromsg.SKBuiltinString_t PYInitial = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->pyinitial_, output);
  }

  // required .micromsg.SKBuiltinString_t QuanPin = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->quanpin_, output);
  }

  // required uint32 MemberCount = 5;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->membercount(), output);
  }

  // repeated .micromsg.MemberResp MemberList = 6;
  for (unsigned int i = 0, n = this->memberlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->memberlist(i), output);
  }

  // required .micromsg.SKBuiltinString_t TalkRoomName = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->talkroomname_, output);
  }

  // required .micromsg.SKBuiltinBuffer_t ImgBuf = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->imgbuf_, output);
  }

  // optional string BigHeadImgUrl = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bigheadimgurl().data(), this->bigheadimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CreateTalkRoomResponse.BigHeadImgUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->bigheadimgurl(), output);
  }

  // optional string SmallHeadImgUrl = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->smallheadimgurl().data(), this->smallheadimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CreateTalkRoomResponse.SmallHeadImgUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->smallheadimgurl(), output);
  }

  // required int32 RoomId = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->roomid(), output);
  }

  // required int64 RoomKey = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->roomkey(), output);
  }

  // required int32 MicSeq = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->micseq(), output);
  }

  // required int32 MyRoomMemberId = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->myroommemberid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.CreateTalkRoomResponse)
}

::google::protobuf::uint8* CreateTalkRoomResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.CreateTalkRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t Topic = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->topic_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t PYInitial = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->pyinitial_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t QuanPin = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->quanpin_, deterministic, target);
  }

  // required uint32 MemberCount = 5;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->membercount(), target);
  }

  // repeated .micromsg.MemberResp MemberList = 6;
  for (unsigned int i = 0, n = this->memberlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->memberlist(i), deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t TalkRoomName = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->talkroomname_, deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t ImgBuf = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->imgbuf_, deterministic, target);
  }

  // optional string BigHeadImgUrl = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bigheadimgurl().data(), this->bigheadimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CreateTalkRoomResponse.BigHeadImgUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->bigheadimgurl(), target);
  }

  // optional string SmallHeadImgUrl = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->smallheadimgurl().data(), this->smallheadimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CreateTalkRoomResponse.SmallHeadImgUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->smallheadimgurl(), target);
  }

  // required int32 RoomId = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->roomid(), target);
  }

  // required int64 RoomKey = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->roomkey(), target);
  }

  // required int32 MicSeq = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->micseq(), target);
  }

  // required int32 MyRoomMemberId = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->myroommemberid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.CreateTalkRoomResponse)
  return target;
}

size_t CreateTalkRoomResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.CreateTalkRoomResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_topic()) {
    // required .micromsg.SKBuiltinString_t Topic = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->topic_);
  }

  if (has_pyinitial()) {
    // required .micromsg.SKBuiltinString_t PYInitial = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pyinitial_);
  }

  if (has_quanpin()) {
    // required .micromsg.SKBuiltinString_t QuanPin = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->quanpin_);
  }

  if (has_talkroomname()) {
    // required .micromsg.SKBuiltinString_t TalkRoomName = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->talkroomname_);
  }

  if (has_imgbuf()) {
    // required .micromsg.SKBuiltinBuffer_t ImgBuf = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imgbuf_);
  }

  if (has_membercount()) {
    // required uint32 MemberCount = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->membercount());
  }

  if (has_roomid()) {
    // required int32 RoomId = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  if (has_roomkey()) {
    // required int64 RoomKey = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());
  }

  if (has_micseq()) {
    // required int32 MicSeq = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->micseq());
  }

  if (has_myroommemberid()) {
    // required int32 MyRoomMemberId = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->myroommemberid());
  }

  return total_size;
}
size_t CreateTalkRoomResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.CreateTalkRoomResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00001ffc) ^ 0x00001ffc) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required .micromsg.SKBuiltinString_t Topic = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->topic_);

    // required .micromsg.SKBuiltinString_t PYInitial = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pyinitial_);

    // required .micromsg.SKBuiltinString_t QuanPin = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->quanpin_);

    // required .micromsg.SKBuiltinString_t TalkRoomName = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->talkroomname_);

    // required .micromsg.SKBuiltinBuffer_t ImgBuf = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imgbuf_);

    // required uint32 MemberCount = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->membercount());

    // required int32 RoomId = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());

    // required int64 RoomKey = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());

    // required int32 MicSeq = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->micseq());

    // required int32 MyRoomMemberId = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->myroommemberid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.MemberResp MemberList = 6;
  {
    unsigned int count = this->memberlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memberlist(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string BigHeadImgUrl = 9;
    if (has_bigheadimgurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bigheadimgurl());
    }

    // optional string SmallHeadImgUrl = 10;
    if (has_smallheadimgurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->smallheadimgurl());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateTalkRoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.CreateTalkRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateTalkRoomResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateTalkRoomResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.CreateTalkRoomResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.CreateTalkRoomResponse)
    MergeFrom(*source);
  }
}

void CreateTalkRoomResponse::MergeFrom(const CreateTalkRoomResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.CreateTalkRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  memberlist_.MergeFrom(from.memberlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_bigheadimgurl();
      bigheadimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bigheadimgurl_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_smallheadimgurl();
      smallheadimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smallheadimgurl_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_topic()->::micromsg::SKBuiltinString_t::MergeFrom(from.topic());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_pyinitial()->::micromsg::SKBuiltinString_t::MergeFrom(from.pyinitial());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_quanpin()->::micromsg::SKBuiltinString_t::MergeFrom(from.quanpin());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_talkroomname()->::micromsg::SKBuiltinString_t::MergeFrom(from.talkroomname());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_imgbuf()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.imgbuf());
    }
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      membercount_ = from.membercount_;
    }
    if (cached_has_bits & 0x00000200u) {
      roomid_ = from.roomid_;
    }
    if (cached_has_bits & 0x00000400u) {
      roomkey_ = from.roomkey_;
    }
    if (cached_has_bits & 0x00000800u) {
      micseq_ = from.micseq_;
    }
    if (cached_has_bits & 0x00001000u) {
      myroommemberid_ = from.myroommemberid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CreateTalkRoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.CreateTalkRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateTalkRoomResponse::CopyFrom(const CreateTalkRoomResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.CreateTalkRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTalkRoomResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001ffc) != 0x00001ffc) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->memberlist())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_imgbuf()) {
    if (!this->imgbuf_->IsInitialized()) return false;
  }
  return true;
}

void CreateTalkRoomResponse::Swap(CreateTalkRoomResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateTalkRoomResponse::InternalSwap(CreateTalkRoomResponse* other) {
  memberlist_.InternalSwap(&other->memberlist_);
  bigheadimgurl_.Swap(&other->bigheadimgurl_);
  smallheadimgurl_.Swap(&other->smallheadimgurl_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(topic_, other->topic_);
  std::swap(pyinitial_, other->pyinitial_);
  std::swap(quanpin_, other->quanpin_);
  std::swap(talkroomname_, other->talkroomname_);
  std::swap(imgbuf_, other->imgbuf_);
  std::swap(membercount_, other->membercount_);
  std::swap(roomid_, other->roomid_);
  std::swap(roomkey_, other->roomkey_);
  std::swap(micseq_, other->micseq_);
  std::swap(myroommemberid_, other->myroommemberid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateTalkRoomResponse::GetMetadata() const {
  protobuf_mmtalk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmtalk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateTalkRoomResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool CreateTalkRoomResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CreateTalkRoomResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000004u;
}
void CreateTalkRoomResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000004u;
}
void CreateTalkRoomResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& CreateTalkRoomResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateTalkRoomResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* CreateTalkRoomResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CreateTalkRoomResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* CreateTalkRoomResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.CreateTalkRoomResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void CreateTalkRoomResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CreateTalkRoomResponse.BaseResponse)
}

// required .micromsg.SKBuiltinString_t Topic = 2;
bool CreateTalkRoomResponse::has_topic() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CreateTalkRoomResponse::set_has_topic() {
  _has_bits_[0] |= 0x00000008u;
}
void CreateTalkRoomResponse::clear_has_topic() {
  _has_bits_[0] &= ~0x00000008u;
}
void CreateTalkRoomResponse::clear_topic() {
  if (topic_ != NULL) topic_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_topic();
}
const ::micromsg::SKBuiltinString_t& CreateTalkRoomResponse::topic() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateTalkRoomResponse.Topic)
  return topic_ != NULL ? *topic_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* CreateTalkRoomResponse::mutable_topic() {
  set_has_topic();
  if (topic_ == NULL) {
    topic_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CreateTalkRoomResponse.Topic)
  return topic_;
}
::micromsg::SKBuiltinString_t* CreateTalkRoomResponse::release_topic() {
  // @@protoc_insertion_point(field_release:micromsg.CreateTalkRoomResponse.Topic)
  clear_has_topic();
  ::micromsg::SKBuiltinString_t* temp = topic_;
  topic_ = NULL;
  return temp;
}
void CreateTalkRoomResponse::set_allocated_topic(::micromsg::SKBuiltinString_t* topic) {
  delete topic_;
  topic_ = topic;
  if (topic) {
    set_has_topic();
  } else {
    clear_has_topic();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CreateTalkRoomResponse.Topic)
}

// required .micromsg.SKBuiltinString_t PYInitial = 3;
bool CreateTalkRoomResponse::has_pyinitial() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CreateTalkRoomResponse::set_has_pyinitial() {
  _has_bits_[0] |= 0x00000010u;
}
void CreateTalkRoomResponse::clear_has_pyinitial() {
  _has_bits_[0] &= ~0x00000010u;
}
void CreateTalkRoomResponse::clear_pyinitial() {
  if (pyinitial_ != NULL) pyinitial_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_pyinitial();
}
const ::micromsg::SKBuiltinString_t& CreateTalkRoomResponse::pyinitial() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateTalkRoomResponse.PYInitial)
  return pyinitial_ != NULL ? *pyinitial_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* CreateTalkRoomResponse::mutable_pyinitial() {
  set_has_pyinitial();
  if (pyinitial_ == NULL) {
    pyinitial_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CreateTalkRoomResponse.PYInitial)
  return pyinitial_;
}
::micromsg::SKBuiltinString_t* CreateTalkRoomResponse::release_pyinitial() {
  // @@protoc_insertion_point(field_release:micromsg.CreateTalkRoomResponse.PYInitial)
  clear_has_pyinitial();
  ::micromsg::SKBuiltinString_t* temp = pyinitial_;
  pyinitial_ = NULL;
  return temp;
}
void CreateTalkRoomResponse::set_allocated_pyinitial(::micromsg::SKBuiltinString_t* pyinitial) {
  delete pyinitial_;
  pyinitial_ = pyinitial;
  if (pyinitial) {
    set_has_pyinitial();
  } else {
    clear_has_pyinitial();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CreateTalkRoomResponse.PYInitial)
}

// required .micromsg.SKBuiltinString_t QuanPin = 4;
bool CreateTalkRoomResponse::has_quanpin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CreateTalkRoomResponse::set_has_quanpin() {
  _has_bits_[0] |= 0x00000020u;
}
void CreateTalkRoomResponse::clear_has_quanpin() {
  _has_bits_[0] &= ~0x00000020u;
}
void CreateTalkRoomResponse::clear_quanpin() {
  if (quanpin_ != NULL) quanpin_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_quanpin();
}
const ::micromsg::SKBuiltinString_t& CreateTalkRoomResponse::quanpin() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateTalkRoomResponse.QuanPin)
  return quanpin_ != NULL ? *quanpin_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* CreateTalkRoomResponse::mutable_quanpin() {
  set_has_quanpin();
  if (quanpin_ == NULL) {
    quanpin_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CreateTalkRoomResponse.QuanPin)
  return quanpin_;
}
::micromsg::SKBuiltinString_t* CreateTalkRoomResponse::release_quanpin() {
  // @@protoc_insertion_point(field_release:micromsg.CreateTalkRoomResponse.QuanPin)
  clear_has_quanpin();
  ::micromsg::SKBuiltinString_t* temp = quanpin_;
  quanpin_ = NULL;
  return temp;
}
void CreateTalkRoomResponse::set_allocated_quanpin(::micromsg::SKBuiltinString_t* quanpin) {
  delete quanpin_;
  quanpin_ = quanpin;
  if (quanpin) {
    set_has_quanpin();
  } else {
    clear_has_quanpin();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CreateTalkRoomResponse.QuanPin)
}

// required uint32 MemberCount = 5;
bool CreateTalkRoomResponse::has_membercount() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CreateTalkRoomResponse::set_has_membercount() {
  _has_bits_[0] |= 0x00000100u;
}
void CreateTalkRoomResponse::clear_has_membercount() {
  _has_bits_[0] &= ~0x00000100u;
}
void CreateTalkRoomResponse::clear_membercount() {
  membercount_ = 0u;
  clear_has_membercount();
}
::google::protobuf::uint32 CreateTalkRoomResponse::membercount() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateTalkRoomResponse.MemberCount)
  return membercount_;
}
void CreateTalkRoomResponse::set_membercount(::google::protobuf::uint32 value) {
  set_has_membercount();
  membercount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CreateTalkRoomResponse.MemberCount)
}

// repeated .micromsg.MemberResp MemberList = 6;
int CreateTalkRoomResponse::memberlist_size() const {
  return memberlist_.size();
}
void CreateTalkRoomResponse::clear_memberlist() {
  memberlist_.Clear();
}
const ::micromsg::MemberResp& CreateTalkRoomResponse::memberlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.CreateTalkRoomResponse.MemberList)
  return memberlist_.Get(index);
}
::micromsg::MemberResp* CreateTalkRoomResponse::mutable_memberlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.CreateTalkRoomResponse.MemberList)
  return memberlist_.Mutable(index);
}
::micromsg::MemberResp* CreateTalkRoomResponse::add_memberlist() {
  // @@protoc_insertion_point(field_add:micromsg.CreateTalkRoomResponse.MemberList)
  return memberlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::MemberResp >*
CreateTalkRoomResponse::mutable_memberlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.CreateTalkRoomResponse.MemberList)
  return &memberlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::MemberResp >&
CreateTalkRoomResponse::memberlist() const {
  // @@protoc_insertion_point(field_list:micromsg.CreateTalkRoomResponse.MemberList)
  return memberlist_;
}

// required .micromsg.SKBuiltinString_t TalkRoomName = 7;
bool CreateTalkRoomResponse::has_talkroomname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CreateTalkRoomResponse::set_has_talkroomname() {
  _has_bits_[0] |= 0x00000040u;
}
void CreateTalkRoomResponse::clear_has_talkroomname() {
  _has_bits_[0] &= ~0x00000040u;
}
void CreateTalkRoomResponse::clear_talkroomname() {
  if (talkroomname_ != NULL) talkroomname_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_talkroomname();
}
const ::micromsg::SKBuiltinString_t& CreateTalkRoomResponse::talkroomname() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateTalkRoomResponse.TalkRoomName)
  return talkroomname_ != NULL ? *talkroomname_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* CreateTalkRoomResponse::mutable_talkroomname() {
  set_has_talkroomname();
  if (talkroomname_ == NULL) {
    talkroomname_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CreateTalkRoomResponse.TalkRoomName)
  return talkroomname_;
}
::micromsg::SKBuiltinString_t* CreateTalkRoomResponse::release_talkroomname() {
  // @@protoc_insertion_point(field_release:micromsg.CreateTalkRoomResponse.TalkRoomName)
  clear_has_talkroomname();
  ::micromsg::SKBuiltinString_t* temp = talkroomname_;
  talkroomname_ = NULL;
  return temp;
}
void CreateTalkRoomResponse::set_allocated_talkroomname(::micromsg::SKBuiltinString_t* talkroomname) {
  delete talkroomname_;
  talkroomname_ = talkroomname;
  if (talkroomname) {
    set_has_talkroomname();
  } else {
    clear_has_talkroomname();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CreateTalkRoomResponse.TalkRoomName)
}

// required .micromsg.SKBuiltinBuffer_t ImgBuf = 8;
bool CreateTalkRoomResponse::has_imgbuf() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CreateTalkRoomResponse::set_has_imgbuf() {
  _has_bits_[0] |= 0x00000080u;
}
void CreateTalkRoomResponse::clear_has_imgbuf() {
  _has_bits_[0] &= ~0x00000080u;
}
void CreateTalkRoomResponse::clear_imgbuf() {
  if (imgbuf_ != NULL) imgbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_imgbuf();
}
const ::micromsg::SKBuiltinBuffer_t& CreateTalkRoomResponse::imgbuf() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateTalkRoomResponse.ImgBuf)
  return imgbuf_ != NULL ? *imgbuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* CreateTalkRoomResponse::mutable_imgbuf() {
  set_has_imgbuf();
  if (imgbuf_ == NULL) {
    imgbuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CreateTalkRoomResponse.ImgBuf)
  return imgbuf_;
}
::micromsg::SKBuiltinBuffer_t* CreateTalkRoomResponse::release_imgbuf() {
  // @@protoc_insertion_point(field_release:micromsg.CreateTalkRoomResponse.ImgBuf)
  clear_has_imgbuf();
  ::micromsg::SKBuiltinBuffer_t* temp = imgbuf_;
  imgbuf_ = NULL;
  return temp;
}
void CreateTalkRoomResponse::set_allocated_imgbuf(::micromsg::SKBuiltinBuffer_t* imgbuf) {
  delete imgbuf_;
  imgbuf_ = imgbuf;
  if (imgbuf) {
    set_has_imgbuf();
  } else {
    clear_has_imgbuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CreateTalkRoomResponse.ImgBuf)
}

// optional string BigHeadImgUrl = 9;
bool CreateTalkRoomResponse::has_bigheadimgurl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CreateTalkRoomResponse::set_has_bigheadimgurl() {
  _has_bits_[0] |= 0x00000001u;
}
void CreateTalkRoomResponse::clear_has_bigheadimgurl() {
  _has_bits_[0] &= ~0x00000001u;
}
void CreateTalkRoomResponse::clear_bigheadimgurl() {
  bigheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bigheadimgurl();
}
const ::std::string& CreateTalkRoomResponse::bigheadimgurl() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateTalkRoomResponse.BigHeadImgUrl)
  return bigheadimgurl_.GetNoArena();
}
void CreateTalkRoomResponse::set_bigheadimgurl(const ::std::string& value) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CreateTalkRoomResponse.BigHeadImgUrl)
}
#if LANG_CXX11
void CreateTalkRoomResponse::set_bigheadimgurl(::std::string&& value) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CreateTalkRoomResponse.BigHeadImgUrl)
}
#endif
void CreateTalkRoomResponse::set_bigheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CreateTalkRoomResponse.BigHeadImgUrl)
}
void CreateTalkRoomResponse::set_bigheadimgurl(const char* value, size_t size) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CreateTalkRoomResponse.BigHeadImgUrl)
}
::std::string* CreateTalkRoomResponse::mutable_bigheadimgurl() {
  set_has_bigheadimgurl();
  // @@protoc_insertion_point(field_mutable:micromsg.CreateTalkRoomResponse.BigHeadImgUrl)
  return bigheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateTalkRoomResponse::release_bigheadimgurl() {
  // @@protoc_insertion_point(field_release:micromsg.CreateTalkRoomResponse.BigHeadImgUrl)
  clear_has_bigheadimgurl();
  return bigheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateTalkRoomResponse::set_allocated_bigheadimgurl(::std::string* bigheadimgurl) {
  if (bigheadimgurl != NULL) {
    set_has_bigheadimgurl();
  } else {
    clear_has_bigheadimgurl();
  }
  bigheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bigheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CreateTalkRoomResponse.BigHeadImgUrl)
}

// optional string SmallHeadImgUrl = 10;
bool CreateTalkRoomResponse::has_smallheadimgurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CreateTalkRoomResponse::set_has_smallheadimgurl() {
  _has_bits_[0] |= 0x00000002u;
}
void CreateTalkRoomResponse::clear_has_smallheadimgurl() {
  _has_bits_[0] &= ~0x00000002u;
}
void CreateTalkRoomResponse::clear_smallheadimgurl() {
  smallheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_smallheadimgurl();
}
const ::std::string& CreateTalkRoomResponse::smallheadimgurl() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateTalkRoomResponse.SmallHeadImgUrl)
  return smallheadimgurl_.GetNoArena();
}
void CreateTalkRoomResponse::set_smallheadimgurl(const ::std::string& value) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CreateTalkRoomResponse.SmallHeadImgUrl)
}
#if LANG_CXX11
void CreateTalkRoomResponse::set_smallheadimgurl(::std::string&& value) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CreateTalkRoomResponse.SmallHeadImgUrl)
}
#endif
void CreateTalkRoomResponse::set_smallheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CreateTalkRoomResponse.SmallHeadImgUrl)
}
void CreateTalkRoomResponse::set_smallheadimgurl(const char* value, size_t size) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CreateTalkRoomResponse.SmallHeadImgUrl)
}
::std::string* CreateTalkRoomResponse::mutable_smallheadimgurl() {
  set_has_smallheadimgurl();
  // @@protoc_insertion_point(field_mutable:micromsg.CreateTalkRoomResponse.SmallHeadImgUrl)
  return smallheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateTalkRoomResponse::release_smallheadimgurl() {
  // @@protoc_insertion_point(field_release:micromsg.CreateTalkRoomResponse.SmallHeadImgUrl)
  clear_has_smallheadimgurl();
  return smallheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateTalkRoomResponse::set_allocated_smallheadimgurl(::std::string* smallheadimgurl) {
  if (smallheadimgurl != NULL) {
    set_has_smallheadimgurl();
  } else {
    clear_has_smallheadimgurl();
  }
  smallheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smallheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CreateTalkRoomResponse.SmallHeadImgUrl)
}

// required int32 RoomId = 11;
bool CreateTalkRoomResponse::has_roomid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CreateTalkRoomResponse::set_has_roomid() {
  _has_bits_[0] |= 0x00000200u;
}
void CreateTalkRoomResponse::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000200u;
}
void CreateTalkRoomResponse::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
::google::protobuf::int32 CreateTalkRoomResponse::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateTalkRoomResponse.RoomId)
  return roomid_;
}
void CreateTalkRoomResponse::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CreateTalkRoomResponse.RoomId)
}

// required int64 RoomKey = 12;
bool CreateTalkRoomResponse::has_roomkey() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CreateTalkRoomResponse::set_has_roomkey() {
  _has_bits_[0] |= 0x00000400u;
}
void CreateTalkRoomResponse::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000400u;
}
void CreateTalkRoomResponse::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
::google::protobuf::int64 CreateTalkRoomResponse::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateTalkRoomResponse.RoomKey)
  return roomkey_;
}
void CreateTalkRoomResponse::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CreateTalkRoomResponse.RoomKey)
}

// required int32 MicSeq = 13;
bool CreateTalkRoomResponse::has_micseq() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CreateTalkRoomResponse::set_has_micseq() {
  _has_bits_[0] |= 0x00000800u;
}
void CreateTalkRoomResponse::clear_has_micseq() {
  _has_bits_[0] &= ~0x00000800u;
}
void CreateTalkRoomResponse::clear_micseq() {
  micseq_ = 0;
  clear_has_micseq();
}
::google::protobuf::int32 CreateTalkRoomResponse::micseq() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateTalkRoomResponse.MicSeq)
  return micseq_;
}
void CreateTalkRoomResponse::set_micseq(::google::protobuf::int32 value) {
  set_has_micseq();
  micseq_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CreateTalkRoomResponse.MicSeq)
}

// required int32 MyRoomMemberId = 14;
bool CreateTalkRoomResponse::has_myroommemberid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CreateTalkRoomResponse::set_has_myroommemberid() {
  _has_bits_[0] |= 0x00001000u;
}
void CreateTalkRoomResponse::clear_has_myroommemberid() {
  _has_bits_[0] &= ~0x00001000u;
}
void CreateTalkRoomResponse::clear_myroommemberid() {
  myroommemberid_ = 0;
  clear_has_myroommemberid();
}
::google::protobuf::int32 CreateTalkRoomResponse::myroommemberid() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateTalkRoomResponse.MyRoomMemberId)
  return myroommemberid_;
}
void CreateTalkRoomResponse::set_myroommemberid(::google::protobuf::int32 value) {
  set_has_myroommemberid();
  myroommemberid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CreateTalkRoomResponse.MyRoomMemberId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddTalkRoomMemberRequest::kBaseRequestFieldNumber;
const int AddTalkRoomMemberRequest::kMemberCountFieldNumber;
const int AddTalkRoomMemberRequest::kMemberListFieldNumber;
const int AddTalkRoomMemberRequest::kTalkRoomNameFieldNumber;
const int AddTalkRoomMemberRequest::kSceneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddTalkRoomMemberRequest::AddTalkRoomMemberRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmtalk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.AddTalkRoomMemberRequest)
}
AddTalkRoomMemberRequest::AddTalkRoomMemberRequest(const AddTalkRoomMemberRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      memberlist_(from.memberlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_talkroomname()) {
    talkroomname_ = new ::micromsg::SKBuiltinString_t(*from.talkroomname_);
  } else {
    talkroomname_ = NULL;
  }
  ::memcpy(&membercount_, &from.membercount_,
    reinterpret_cast<char*>(&scene_) -
    reinterpret_cast<char*>(&membercount_) + sizeof(scene_));
  // @@protoc_insertion_point(copy_constructor:micromsg.AddTalkRoomMemberRequest)
}

void AddTalkRoomMemberRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&scene_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(scene_));
}

AddTalkRoomMemberRequest::~AddTalkRoomMemberRequest() {
  // @@protoc_insertion_point(destructor:micromsg.AddTalkRoomMemberRequest)
  SharedDtor();
}

void AddTalkRoomMemberRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete talkroomname_;
  }
}

void AddTalkRoomMemberRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddTalkRoomMemberRequest::descriptor() {
  protobuf_mmtalk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmtalk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddTalkRoomMemberRequest& AddTalkRoomMemberRequest::default_instance() {
  protobuf_mmtalk_2eproto::InitDefaults();
  return *internal_default_instance();
}

AddTalkRoomMemberRequest* AddTalkRoomMemberRequest::New(::google::protobuf::Arena* arena) const {
  AddTalkRoomMemberRequest* n = new AddTalkRoomMemberRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddTalkRoomMemberRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.AddTalkRoomMemberRequest)
  memberlist_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_talkroomname()) {
      GOOGLE_DCHECK(talkroomname_ != NULL);
      talkroomname_->::micromsg::SKBuiltinString_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&membercount_, 0, reinterpret_cast<char*>(&scene_) -
      reinterpret_cast<char*>(&membercount_) + sizeof(scene_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AddTalkRoomMemberRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.AddTalkRoomMemberRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 MemberCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_membercount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &membercount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.MemberReq MemberList = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_memberlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t TalkRoomName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_talkroomname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Scene = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_scene();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.AddTalkRoomMemberRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.AddTalkRoomMemberRequest)
  return false;
#undef DO_
}

void AddTalkRoomMemberRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.AddTalkRoomMemberRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 MemberCount = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->membercount(), output);
  }

  // repeated .micromsg.MemberReq MemberList = 3;
  for (unsigned int i = 0, n = this->memberlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->memberlist(i), output);
  }

  // required .micromsg.SKBuiltinString_t TalkRoomName = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->talkroomname_, output);
  }

  // optional uint32 Scene = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->scene(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.AddTalkRoomMemberRequest)
}

::google::protobuf::uint8* AddTalkRoomMemberRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.AddTalkRoomMemberRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 MemberCount = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->membercount(), target);
  }

  // repeated .micromsg.MemberReq MemberList = 3;
  for (unsigned int i = 0, n = this->memberlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->memberlist(i), deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t TalkRoomName = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->talkroomname_, deterministic, target);
  }

  // optional uint32 Scene = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->scene(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.AddTalkRoomMemberRequest)
  return target;
}

size_t AddTalkRoomMemberRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.AddTalkRoomMemberRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_talkroomname()) {
    // required .micromsg.SKBuiltinString_t TalkRoomName = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->talkroomname_);
  }

  if (has_membercount()) {
    // required uint32 MemberCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->membercount());
  }

  return total_size;
}
size_t AddTalkRoomMemberRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.AddTalkRoomMemberRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.SKBuiltinString_t TalkRoomName = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->talkroomname_);

    // required uint32 MemberCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->membercount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.MemberReq MemberList = 3;
  {
    unsigned int count = this->memberlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memberlist(i));
    }
  }

  // optional uint32 Scene = 5;
  if (has_scene()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddTalkRoomMemberRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.AddTalkRoomMemberRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddTalkRoomMemberRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddTalkRoomMemberRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.AddTalkRoomMemberRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.AddTalkRoomMemberRequest)
    MergeFrom(*source);
  }
}

void AddTalkRoomMemberRequest::MergeFrom(const AddTalkRoomMemberRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.AddTalkRoomMemberRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  memberlist_.MergeFrom(from.memberlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_talkroomname()->::micromsg::SKBuiltinString_t::MergeFrom(from.talkroomname());
    }
    if (cached_has_bits & 0x00000004u) {
      membercount_ = from.membercount_;
    }
    if (cached_has_bits & 0x00000008u) {
      scene_ = from.scene_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AddTalkRoomMemberRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.AddTalkRoomMemberRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddTalkRoomMemberRequest::CopyFrom(const AddTalkRoomMemberRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.AddTalkRoomMemberRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddTalkRoomMemberRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->memberlist())) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void AddTalkRoomMemberRequest::Swap(AddTalkRoomMemberRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddTalkRoomMemberRequest::InternalSwap(AddTalkRoomMemberRequest* other) {
  memberlist_.InternalSwap(&other->memberlist_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(talkroomname_, other->talkroomname_);
  std::swap(membercount_, other->membercount_);
  std::swap(scene_, other->scene_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddTalkRoomMemberRequest::GetMetadata() const {
  protobuf_mmtalk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmtalk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddTalkRoomMemberRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool AddTalkRoomMemberRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AddTalkRoomMemberRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void AddTalkRoomMemberRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void AddTalkRoomMemberRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& AddTalkRoomMemberRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.AddTalkRoomMemberRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* AddTalkRoomMemberRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AddTalkRoomMemberRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* AddTalkRoomMemberRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.AddTalkRoomMemberRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void AddTalkRoomMemberRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AddTalkRoomMemberRequest.BaseRequest)
}

// required uint32 MemberCount = 2;
bool AddTalkRoomMemberRequest::has_membercount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AddTalkRoomMemberRequest::set_has_membercount() {
  _has_bits_[0] |= 0x00000004u;
}
void AddTalkRoomMemberRequest::clear_has_membercount() {
  _has_bits_[0] &= ~0x00000004u;
}
void AddTalkRoomMemberRequest::clear_membercount() {
  membercount_ = 0u;
  clear_has_membercount();
}
::google::protobuf::uint32 AddTalkRoomMemberRequest::membercount() const {
  // @@protoc_insertion_point(field_get:micromsg.AddTalkRoomMemberRequest.MemberCount)
  return membercount_;
}
void AddTalkRoomMemberRequest::set_membercount(::google::protobuf::uint32 value) {
  set_has_membercount();
  membercount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AddTalkRoomMemberRequest.MemberCount)
}

// repeated .micromsg.MemberReq MemberList = 3;
int AddTalkRoomMemberRequest::memberlist_size() const {
  return memberlist_.size();
}
void AddTalkRoomMemberRequest::clear_memberlist() {
  memberlist_.Clear();
}
const ::micromsg::MemberReq& AddTalkRoomMemberRequest::memberlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.AddTalkRoomMemberRequest.MemberList)
  return memberlist_.Get(index);
}
::micromsg::MemberReq* AddTalkRoomMemberRequest::mutable_memberlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.AddTalkRoomMemberRequest.MemberList)
  return memberlist_.Mutable(index);
}
::micromsg::MemberReq* AddTalkRoomMemberRequest::add_memberlist() {
  // @@protoc_insertion_point(field_add:micromsg.AddTalkRoomMemberRequest.MemberList)
  return memberlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::MemberReq >*
AddTalkRoomMemberRequest::mutable_memberlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.AddTalkRoomMemberRequest.MemberList)
  return &memberlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::MemberReq >&
AddTalkRoomMemberRequest::memberlist() const {
  // @@protoc_insertion_point(field_list:micromsg.AddTalkRoomMemberRequest.MemberList)
  return memberlist_;
}

// required .micromsg.SKBuiltinString_t TalkRoomName = 4;
bool AddTalkRoomMemberRequest::has_talkroomname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AddTalkRoomMemberRequest::set_has_talkroomname() {
  _has_bits_[0] |= 0x00000002u;
}
void AddTalkRoomMemberRequest::clear_has_talkroomname() {
  _has_bits_[0] &= ~0x00000002u;
}
void AddTalkRoomMemberRequest::clear_talkroomname() {
  if (talkroomname_ != NULL) talkroomname_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_talkroomname();
}
const ::micromsg::SKBuiltinString_t& AddTalkRoomMemberRequest::talkroomname() const {
  // @@protoc_insertion_point(field_get:micromsg.AddTalkRoomMemberRequest.TalkRoomName)
  return talkroomname_ != NULL ? *talkroomname_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* AddTalkRoomMemberRequest::mutable_talkroomname() {
  set_has_talkroomname();
  if (talkroomname_ == NULL) {
    talkroomname_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AddTalkRoomMemberRequest.TalkRoomName)
  return talkroomname_;
}
::micromsg::SKBuiltinString_t* AddTalkRoomMemberRequest::release_talkroomname() {
  // @@protoc_insertion_point(field_release:micromsg.AddTalkRoomMemberRequest.TalkRoomName)
  clear_has_talkroomname();
  ::micromsg::SKBuiltinString_t* temp = talkroomname_;
  talkroomname_ = NULL;
  return temp;
}
void AddTalkRoomMemberRequest::set_allocated_talkroomname(::micromsg::SKBuiltinString_t* talkroomname) {
  delete talkroomname_;
  talkroomname_ = talkroomname;
  if (talkroomname) {
    set_has_talkroomname();
  } else {
    clear_has_talkroomname();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AddTalkRoomMemberRequest.TalkRoomName)
}

// optional uint32 Scene = 5;
bool AddTalkRoomMemberRequest::has_scene() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AddTalkRoomMemberRequest::set_has_scene() {
  _has_bits_[0] |= 0x00000008u;
}
void AddTalkRoomMemberRequest::clear_has_scene() {
  _has_bits_[0] &= ~0x00000008u;
}
void AddTalkRoomMemberRequest::clear_scene() {
  scene_ = 0u;
  clear_has_scene();
}
::google::protobuf::uint32 AddTalkRoomMemberRequest::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.AddTalkRoomMemberRequest.Scene)
  return scene_;
}
void AddTalkRoomMemberRequest::set_scene(::google::protobuf::uint32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AddTalkRoomMemberRequest.Scene)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddTalkRoomMemberResponse::kBaseResponseFieldNumber;
const int AddTalkRoomMemberResponse::kMemberCountFieldNumber;
const int AddTalkRoomMemberResponse::kMemberListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddTalkRoomMemberResponse::AddTalkRoomMemberResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmtalk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.AddTalkRoomMemberResponse)
}
AddTalkRoomMemberResponse::AddTalkRoomMemberResponse(const AddTalkRoomMemberResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      memberlist_(from.memberlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  membercount_ = from.membercount_;
  // @@protoc_insertion_point(copy_constructor:micromsg.AddTalkRoomMemberResponse)
}

void AddTalkRoomMemberResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&membercount_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(membercount_));
}

AddTalkRoomMemberResponse::~AddTalkRoomMemberResponse() {
  // @@protoc_insertion_point(destructor:micromsg.AddTalkRoomMemberResponse)
  SharedDtor();
}

void AddTalkRoomMemberResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void AddTalkRoomMemberResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddTalkRoomMemberResponse::descriptor() {
  protobuf_mmtalk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmtalk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddTalkRoomMemberResponse& AddTalkRoomMemberResponse::default_instance() {
  protobuf_mmtalk_2eproto::InitDefaults();
  return *internal_default_instance();
}

AddTalkRoomMemberResponse* AddTalkRoomMemberResponse::New(::google::protobuf::Arena* arena) const {
  AddTalkRoomMemberResponse* n = new AddTalkRoomMemberResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddTalkRoomMemberResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.AddTalkRoomMemberResponse)
  memberlist_.Clear();
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  membercount_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AddTalkRoomMemberResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.AddTalkRoomMemberResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 MemberCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_membercount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &membercount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.MemberResp MemberList = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_memberlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.AddTalkRoomMemberResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.AddTalkRoomMemberResponse)
  return false;
#undef DO_
}

void AddTalkRoomMemberResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.AddTalkRoomMemberResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 MemberCount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->membercount(), output);
  }

  // repeated .micromsg.MemberResp MemberList = 3;
  for (unsigned int i = 0, n = this->memberlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->memberlist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.AddTalkRoomMemberResponse)
}

::google::protobuf::uint8* AddTalkRoomMemberResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.AddTalkRoomMemberResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 MemberCount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->membercount(), target);
  }

  // repeated .micromsg.MemberResp MemberList = 3;
  for (unsigned int i = 0, n = this->memberlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->memberlist(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.AddTalkRoomMemberResponse)
  return target;
}

size_t AddTalkRoomMemberResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.AddTalkRoomMemberResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_membercount()) {
    // required uint32 MemberCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->membercount());
  }

  return total_size;
}
size_t AddTalkRoomMemberResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.AddTalkRoomMemberResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 MemberCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->membercount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.MemberResp MemberList = 3;
  {
    unsigned int count = this->memberlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memberlist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddTalkRoomMemberResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.AddTalkRoomMemberResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddTalkRoomMemberResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddTalkRoomMemberResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.AddTalkRoomMemberResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.AddTalkRoomMemberResponse)
    MergeFrom(*source);
  }
}

void AddTalkRoomMemberResponse::MergeFrom(const AddTalkRoomMemberResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.AddTalkRoomMemberResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  memberlist_.MergeFrom(from.memberlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      membercount_ = from.membercount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AddTalkRoomMemberResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.AddTalkRoomMemberResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddTalkRoomMemberResponse::CopyFrom(const AddTalkRoomMemberResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.AddTalkRoomMemberResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddTalkRoomMemberResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->memberlist())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void AddTalkRoomMemberResponse::Swap(AddTalkRoomMemberResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddTalkRoomMemberResponse::InternalSwap(AddTalkRoomMemberResponse* other) {
  memberlist_.InternalSwap(&other->memberlist_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(membercount_, other->membercount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddTalkRoomMemberResponse::GetMetadata() const {
  protobuf_mmtalk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmtalk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddTalkRoomMemberResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool AddTalkRoomMemberResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AddTalkRoomMemberResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void AddTalkRoomMemberResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void AddTalkRoomMemberResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& AddTalkRoomMemberResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.AddTalkRoomMemberResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* AddTalkRoomMemberResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AddTalkRoomMemberResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* AddTalkRoomMemberResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.AddTalkRoomMemberResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void AddTalkRoomMemberResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AddTalkRoomMemberResponse.BaseResponse)
}

// required uint32 MemberCount = 2;
bool AddTalkRoomMemberResponse::has_membercount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AddTalkRoomMemberResponse::set_has_membercount() {
  _has_bits_[0] |= 0x00000002u;
}
void AddTalkRoomMemberResponse::clear_has_membercount() {
  _has_bits_[0] &= ~0x00000002u;
}
void AddTalkRoomMemberResponse::clear_membercount() {
  membercount_ = 0u;
  clear_has_membercount();
}
::google::protobuf::uint32 AddTalkRoomMemberResponse::membercount() const {
  // @@protoc_insertion_point(field_get:micromsg.AddTalkRoomMemberResponse.MemberCount)
  return membercount_;
}
void AddTalkRoomMemberResponse::set_membercount(::google::protobuf::uint32 value) {
  set_has_membercount();
  membercount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AddTalkRoomMemberResponse.MemberCount)
}

// repeated .micromsg.MemberResp MemberList = 3;
int AddTalkRoomMemberResponse::memberlist_size() const {
  return memberlist_.size();
}
void AddTalkRoomMemberResponse::clear_memberlist() {
  memberlist_.Clear();
}
const ::micromsg::MemberResp& AddTalkRoomMemberResponse::memberlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.AddTalkRoomMemberResponse.MemberList)
  return memberlist_.Get(index);
}
::micromsg::MemberResp* AddTalkRoomMemberResponse::mutable_memberlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.AddTalkRoomMemberResponse.MemberList)
  return memberlist_.Mutable(index);
}
::micromsg::MemberResp* AddTalkRoomMemberResponse::add_memberlist() {
  // @@protoc_insertion_point(field_add:micromsg.AddTalkRoomMemberResponse.MemberList)
  return memberlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::MemberResp >*
AddTalkRoomMemberResponse::mutable_memberlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.AddTalkRoomMemberResponse.MemberList)
  return &memberlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::MemberResp >&
AddTalkRoomMemberResponse::memberlist() const {
  // @@protoc_insertion_point(field_list:micromsg.AddTalkRoomMemberResponse.MemberList)
  return memberlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelTalkRoomMemberRequest::kBaseRequestFieldNumber;
const int DelTalkRoomMemberRequest::kMemberCountFieldNumber;
const int DelTalkRoomMemberRequest::kMemberListFieldNumber;
const int DelTalkRoomMemberRequest::kTalkRoomNameFieldNumber;
const int DelTalkRoomMemberRequest::kSceneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelTalkRoomMemberRequest::DelTalkRoomMemberRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmtalk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.DelTalkRoomMemberRequest)
}
DelTalkRoomMemberRequest::DelTalkRoomMemberRequest(const DelTalkRoomMemberRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      memberlist_(from.memberlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  talkroomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_talkroomname()) {
    talkroomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.talkroomname_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&membercount_, &from.membercount_,
    reinterpret_cast<char*>(&scene_) -
    reinterpret_cast<char*>(&membercount_) + sizeof(scene_));
  // @@protoc_insertion_point(copy_constructor:micromsg.DelTalkRoomMemberRequest)
}

void DelTalkRoomMemberRequest::SharedCtor() {
  _cached_size_ = 0;
  talkroomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&scene_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(scene_));
}

DelTalkRoomMemberRequest::~DelTalkRoomMemberRequest() {
  // @@protoc_insertion_point(destructor:micromsg.DelTalkRoomMemberRequest)
  SharedDtor();
}

void DelTalkRoomMemberRequest::SharedDtor() {
  talkroomname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void DelTalkRoomMemberRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelTalkRoomMemberRequest::descriptor() {
  protobuf_mmtalk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmtalk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DelTalkRoomMemberRequest& DelTalkRoomMemberRequest::default_instance() {
  protobuf_mmtalk_2eproto::InitDefaults();
  return *internal_default_instance();
}

DelTalkRoomMemberRequest* DelTalkRoomMemberRequest::New(::google::protobuf::Arena* arena) const {
  DelTalkRoomMemberRequest* n = new DelTalkRoomMemberRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DelTalkRoomMemberRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.DelTalkRoomMemberRequest)
  memberlist_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_talkroomname()) {
      GOOGLE_DCHECK(!talkroomname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*talkroomname_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&membercount_, 0, reinterpret_cast<char*>(&scene_) -
      reinterpret_cast<char*>(&membercount_) + sizeof(scene_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DelTalkRoomMemberRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.DelTalkRoomMemberRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 MemberCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_membercount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &membercount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.DelMemberReq MemberList = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_memberlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string TalkRoomName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_talkroomname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->talkroomname().data(), this->talkroomname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.DelTalkRoomMemberRequest.TalkRoomName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Scene = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_scene();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.DelTalkRoomMemberRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.DelTalkRoomMemberRequest)
  return false;
#undef DO_
}

void DelTalkRoomMemberRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.DelTalkRoomMemberRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 MemberCount = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->membercount(), output);
  }

  // repeated .micromsg.DelMemberReq MemberList = 3;
  for (unsigned int i = 0, n = this->memberlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->memberlist(i), output);
  }

  // optional string TalkRoomName = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->talkroomname().data(), this->talkroomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.DelTalkRoomMemberRequest.TalkRoomName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->talkroomname(), output);
  }

  // optional uint32 Scene = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->scene(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.DelTalkRoomMemberRequest)
}

::google::protobuf::uint8* DelTalkRoomMemberRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.DelTalkRoomMemberRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 MemberCount = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->membercount(), target);
  }

  // repeated .micromsg.DelMemberReq MemberList = 3;
  for (unsigned int i = 0, n = this->memberlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->memberlist(i), deterministic, target);
  }

  // optional string TalkRoomName = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->talkroomname().data(), this->talkroomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.DelTalkRoomMemberRequest.TalkRoomName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->talkroomname(), target);
  }

  // optional uint32 Scene = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->scene(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.DelTalkRoomMemberRequest)
  return target;
}

size_t DelTalkRoomMemberRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.DelTalkRoomMemberRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_membercount()) {
    // required uint32 MemberCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->membercount());
  }

  return total_size;
}
size_t DelTalkRoomMemberRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.DelTalkRoomMemberRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 MemberCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->membercount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.DelMemberReq MemberList = 3;
  {
    unsigned int count = this->memberlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memberlist(i));
    }
  }

  // optional string TalkRoomName = 4;
  if (has_talkroomname()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->talkroomname());
  }

  // optional uint32 Scene = 5;
  if (has_scene()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelTalkRoomMemberRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.DelTalkRoomMemberRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DelTalkRoomMemberRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DelTalkRoomMemberRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.DelTalkRoomMemberRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.DelTalkRoomMemberRequest)
    MergeFrom(*source);
  }
}

void DelTalkRoomMemberRequest::MergeFrom(const DelTalkRoomMemberRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.DelTalkRoomMemberRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  memberlist_.MergeFrom(from.memberlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_talkroomname();
      talkroomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.talkroomname_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000004u) {
      membercount_ = from.membercount_;
    }
    if (cached_has_bits & 0x00000008u) {
      scene_ = from.scene_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DelTalkRoomMemberRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.DelTalkRoomMemberRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelTalkRoomMemberRequest::CopyFrom(const DelTalkRoomMemberRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.DelTalkRoomMemberRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelTalkRoomMemberRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->memberlist())) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void DelTalkRoomMemberRequest::Swap(DelTalkRoomMemberRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelTalkRoomMemberRequest::InternalSwap(DelTalkRoomMemberRequest* other) {
  memberlist_.InternalSwap(&other->memberlist_);
  talkroomname_.Swap(&other->talkroomname_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(membercount_, other->membercount_);
  std::swap(scene_, other->scene_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DelTalkRoomMemberRequest::GetMetadata() const {
  protobuf_mmtalk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmtalk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DelTalkRoomMemberRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool DelTalkRoomMemberRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DelTalkRoomMemberRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void DelTalkRoomMemberRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void DelTalkRoomMemberRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& DelTalkRoomMemberRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.DelTalkRoomMemberRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* DelTalkRoomMemberRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DelTalkRoomMemberRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* DelTalkRoomMemberRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.DelTalkRoomMemberRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void DelTalkRoomMemberRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DelTalkRoomMemberRequest.BaseRequest)
}

// required uint32 MemberCount = 2;
bool DelTalkRoomMemberRequest::has_membercount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DelTalkRoomMemberRequest::set_has_membercount() {
  _has_bits_[0] |= 0x00000004u;
}
void DelTalkRoomMemberRequest::clear_has_membercount() {
  _has_bits_[0] &= ~0x00000004u;
}
void DelTalkRoomMemberRequest::clear_membercount() {
  membercount_ = 0u;
  clear_has_membercount();
}
::google::protobuf::uint32 DelTalkRoomMemberRequest::membercount() const {
  // @@protoc_insertion_point(field_get:micromsg.DelTalkRoomMemberRequest.MemberCount)
  return membercount_;
}
void DelTalkRoomMemberRequest::set_membercount(::google::protobuf::uint32 value) {
  set_has_membercount();
  membercount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DelTalkRoomMemberRequest.MemberCount)
}

// repeated .micromsg.DelMemberReq MemberList = 3;
int DelTalkRoomMemberRequest::memberlist_size() const {
  return memberlist_.size();
}
void DelTalkRoomMemberRequest::clear_memberlist() {
  memberlist_.Clear();
}
const ::micromsg::DelMemberReq& DelTalkRoomMemberRequest::memberlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.DelTalkRoomMemberRequest.MemberList)
  return memberlist_.Get(index);
}
::micromsg::DelMemberReq* DelTalkRoomMemberRequest::mutable_memberlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.DelTalkRoomMemberRequest.MemberList)
  return memberlist_.Mutable(index);
}
::micromsg::DelMemberReq* DelTalkRoomMemberRequest::add_memberlist() {
  // @@protoc_insertion_point(field_add:micromsg.DelTalkRoomMemberRequest.MemberList)
  return memberlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::DelMemberReq >*
DelTalkRoomMemberRequest::mutable_memberlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.DelTalkRoomMemberRequest.MemberList)
  return &memberlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::DelMemberReq >&
DelTalkRoomMemberRequest::memberlist() const {
  // @@protoc_insertion_point(field_list:micromsg.DelTalkRoomMemberRequest.MemberList)
  return memberlist_;
}

// optional string TalkRoomName = 4;
bool DelTalkRoomMemberRequest::has_talkroomname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DelTalkRoomMemberRequest::set_has_talkroomname() {
  _has_bits_[0] |= 0x00000001u;
}
void DelTalkRoomMemberRequest::clear_has_talkroomname() {
  _has_bits_[0] &= ~0x00000001u;
}
void DelTalkRoomMemberRequest::clear_talkroomname() {
  talkroomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_talkroomname();
}
const ::std::string& DelTalkRoomMemberRequest::talkroomname() const {
  // @@protoc_insertion_point(field_get:micromsg.DelTalkRoomMemberRequest.TalkRoomName)
  return talkroomname_.GetNoArena();
}
void DelTalkRoomMemberRequest::set_talkroomname(const ::std::string& value) {
  set_has_talkroomname();
  talkroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.DelTalkRoomMemberRequest.TalkRoomName)
}
#if LANG_CXX11
void DelTalkRoomMemberRequest::set_talkroomname(::std::string&& value) {
  set_has_talkroomname();
  talkroomname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.DelTalkRoomMemberRequest.TalkRoomName)
}
#endif
void DelTalkRoomMemberRequest::set_talkroomname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_talkroomname();
  talkroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.DelTalkRoomMemberRequest.TalkRoomName)
}
void DelTalkRoomMemberRequest::set_talkroomname(const char* value, size_t size) {
  set_has_talkroomname();
  talkroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.DelTalkRoomMemberRequest.TalkRoomName)
}
::std::string* DelTalkRoomMemberRequest::mutable_talkroomname() {
  set_has_talkroomname();
  // @@protoc_insertion_point(field_mutable:micromsg.DelTalkRoomMemberRequest.TalkRoomName)
  return talkroomname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DelTalkRoomMemberRequest::release_talkroomname() {
  // @@protoc_insertion_point(field_release:micromsg.DelTalkRoomMemberRequest.TalkRoomName)
  clear_has_talkroomname();
  return talkroomname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DelTalkRoomMemberRequest::set_allocated_talkroomname(::std::string* talkroomname) {
  if (talkroomname != NULL) {
    set_has_talkroomname();
  } else {
    clear_has_talkroomname();
  }
  talkroomname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), talkroomname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.DelTalkRoomMemberRequest.TalkRoomName)
}

// optional uint32 Scene = 5;
bool DelTalkRoomMemberRequest::has_scene() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DelTalkRoomMemberRequest::set_has_scene() {
  _has_bits_[0] |= 0x00000008u;
}
void DelTalkRoomMemberRequest::clear_has_scene() {
  _has_bits_[0] &= ~0x00000008u;
}
void DelTalkRoomMemberRequest::clear_scene() {
  scene_ = 0u;
  clear_has_scene();
}
::google::protobuf::uint32 DelTalkRoomMemberRequest::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.DelTalkRoomMemberRequest.Scene)
  return scene_;
}
void DelTalkRoomMemberRequest::set_scene(::google::protobuf::uint32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DelTalkRoomMemberRequest.Scene)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelTalkRoomMemberResponse::kBaseResponseFieldNumber;
const int DelTalkRoomMemberResponse::kMemberCountFieldNumber;
const int DelTalkRoomMemberResponse::kMemberListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelTalkRoomMemberResponse::DelTalkRoomMemberResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmtalk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.DelTalkRoomMemberResponse)
}
DelTalkRoomMemberResponse::DelTalkRoomMemberResponse(const DelTalkRoomMemberResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      memberlist_(from.memberlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  membercount_ = from.membercount_;
  // @@protoc_insertion_point(copy_constructor:micromsg.DelTalkRoomMemberResponse)
}

void DelTalkRoomMemberResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&membercount_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(membercount_));
}

DelTalkRoomMemberResponse::~DelTalkRoomMemberResponse() {
  // @@protoc_insertion_point(destructor:micromsg.DelTalkRoomMemberResponse)
  SharedDtor();
}

void DelTalkRoomMemberResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void DelTalkRoomMemberResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelTalkRoomMemberResponse::descriptor() {
  protobuf_mmtalk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmtalk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DelTalkRoomMemberResponse& DelTalkRoomMemberResponse::default_instance() {
  protobuf_mmtalk_2eproto::InitDefaults();
  return *internal_default_instance();
}

DelTalkRoomMemberResponse* DelTalkRoomMemberResponse::New(::google::protobuf::Arena* arena) const {
  DelTalkRoomMemberResponse* n = new DelTalkRoomMemberResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DelTalkRoomMemberResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.DelTalkRoomMemberResponse)
  memberlist_.Clear();
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  membercount_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DelTalkRoomMemberResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.DelTalkRoomMemberResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 MemberCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_membercount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &membercount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.DelMemberResp MemberList = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_memberlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.DelTalkRoomMemberResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.DelTalkRoomMemberResponse)
  return false;
#undef DO_
}

void DelTalkRoomMemberResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.DelTalkRoomMemberResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 MemberCount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->membercount(), output);
  }

  // repeated .micromsg.DelMemberResp MemberList = 3;
  for (unsigned int i = 0, n = this->memberlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->memberlist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.DelTalkRoomMemberResponse)
}

::google::protobuf::uint8* DelTalkRoomMemberResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.DelTalkRoomMemberResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 MemberCount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->membercount(), target);
  }

  // repeated .micromsg.DelMemberResp MemberList = 3;
  for (unsigned int i = 0, n = this->memberlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->memberlist(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.DelTalkRoomMemberResponse)
  return target;
}

size_t DelTalkRoomMemberResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.DelTalkRoomMemberResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_membercount()) {
    // required uint32 MemberCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->membercount());
  }

  return total_size;
}
size_t DelTalkRoomMemberResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.DelTalkRoomMemberResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 MemberCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->membercount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.DelMemberResp MemberList = 3;
  {
    unsigned int count = this->memberlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memberlist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelTalkRoomMemberResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.DelTalkRoomMemberResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DelTalkRoomMemberResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DelTalkRoomMemberResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.DelTalkRoomMemberResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.DelTalkRoomMemberResponse)
    MergeFrom(*source);
  }
}

void DelTalkRoomMemberResponse::MergeFrom(const DelTalkRoomMemberResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.DelTalkRoomMemberResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  memberlist_.MergeFrom(from.memberlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      membercount_ = from.membercount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DelTalkRoomMemberResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.DelTalkRoomMemberResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelTalkRoomMemberResponse::CopyFrom(const DelTalkRoomMemberResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.DelTalkRoomMemberResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelTalkRoomMemberResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->memberlist())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void DelTalkRoomMemberResponse::Swap(DelTalkRoomMemberResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelTalkRoomMemberResponse::InternalSwap(DelTalkRoomMemberResponse* other) {
  memberlist_.InternalSwap(&other->memberlist_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(membercount_, other->membercount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DelTalkRoomMemberResponse::GetMetadata() const {
  protobuf_mmtalk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmtalk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DelTalkRoomMemberResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool DelTalkRoomMemberResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DelTalkRoomMemberResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void DelTalkRoomMemberResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void DelTalkRoomMemberResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& DelTalkRoomMemberResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.DelTalkRoomMemberResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* DelTalkRoomMemberResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DelTalkRoomMemberResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* DelTalkRoomMemberResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.DelTalkRoomMemberResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void DelTalkRoomMemberResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DelTalkRoomMemberResponse.BaseResponse)
}

// required uint32 MemberCount = 2;
bool DelTalkRoomMemberResponse::has_membercount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DelTalkRoomMemberResponse::set_has_membercount() {
  _has_bits_[0] |= 0x00000002u;
}
void DelTalkRoomMemberResponse::clear_has_membercount() {
  _has_bits_[0] &= ~0x00000002u;
}
void DelTalkRoomMemberResponse::clear_membercount() {
  membercount_ = 0u;
  clear_has_membercount();
}
::google::protobuf::uint32 DelTalkRoomMemberResponse::membercount() const {
  // @@protoc_insertion_point(field_get:micromsg.DelTalkRoomMemberResponse.MemberCount)
  return membercount_;
}
void DelTalkRoomMemberResponse::set_membercount(::google::protobuf::uint32 value) {
  set_has_membercount();
  membercount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DelTalkRoomMemberResponse.MemberCount)
}

// repeated .micromsg.DelMemberResp MemberList = 3;
int DelTalkRoomMemberResponse::memberlist_size() const {
  return memberlist_.size();
}
void DelTalkRoomMemberResponse::clear_memberlist() {
  memberlist_.Clear();
}
const ::micromsg::DelMemberResp& DelTalkRoomMemberResponse::memberlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.DelTalkRoomMemberResponse.MemberList)
  return memberlist_.Get(index);
}
::micromsg::DelMemberResp* DelTalkRoomMemberResponse::mutable_memberlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.DelTalkRoomMemberResponse.MemberList)
  return memberlist_.Mutable(index);
}
::micromsg::DelMemberResp* DelTalkRoomMemberResponse::add_memberlist() {
  // @@protoc_insertion_point(field_add:micromsg.DelTalkRoomMemberResponse.MemberList)
  return memberlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::DelMemberResp >*
DelTalkRoomMemberResponse::mutable_memberlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.DelTalkRoomMemberResponse.MemberList)
  return &memberlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::DelMemberResp >&
DelTalkRoomMemberResponse::memberlist() const {
  // @@protoc_insertion_point(field_list:micromsg.DelTalkRoomMemberResponse.MemberList)
  return memberlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace micromsg

// @@protoc_insertion_point(global_scope)
