// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmtalk.proto

#ifndef PROTOBUF_mmtalk_2eproto__INCLUDED
#define PROTOBUF_mmtalk_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "mmbuiltintype.pb.h"
#include "mmbase.pb.h"
// @@protoc_insertion_point(includes)
namespace micromsg {
class AddTalkRoomMemberRequest;
class AddTalkRoomMemberRequestDefaultTypeInternal;
extern AddTalkRoomMemberRequestDefaultTypeInternal _AddTalkRoomMemberRequest_default_instance_;
class AddTalkRoomMemberResponse;
class AddTalkRoomMemberResponseDefaultTypeInternal;
extern AddTalkRoomMemberResponseDefaultTypeInternal _AddTalkRoomMemberResponse_default_instance_;
class AdditionalContactList;
class AdditionalContactListDefaultTypeInternal;
extern AdditionalContactListDefaultTypeInternal _AdditionalContactList_default_instance_;
class BaseRequest;
class BaseRequestDefaultTypeInternal;
extern BaseRequestDefaultTypeInternal _BaseRequest_default_instance_;
class BaseResponse;
class BaseResponseDefaultTypeInternal;
extern BaseResponseDefaultTypeInternal _BaseResponse_default_instance_;
class BindEmailRequest;
class BindEmailRequestDefaultTypeInternal;
extern BindEmailRequestDefaultTypeInternal _BindEmailRequest_default_instance_;
class BindEmailResponse;
class BindEmailResponseDefaultTypeInternal;
extern BindEmailResponseDefaultTypeInternal _BindEmailResponse_default_instance_;
class BuiltinIP;
class BuiltinIPDefaultTypeInternal;
extern BuiltinIPDefaultTypeInternal _BuiltinIP_default_instance_;
class BuiltinIPList;
class BuiltinIPListDefaultTypeInternal;
extern BuiltinIPListDefaultTypeInternal _BuiltinIPList_default_instance_;
class CDNDnsInfo;
class CDNDnsInfoDefaultTypeInternal;
extern CDNDnsInfoDefaultTypeInternal _CDNDnsInfo_default_instance_;
class ChatRoomMemberData;
class ChatRoomMemberDataDefaultTypeInternal;
extern ChatRoomMemberDataDefaultTypeInternal _ChatRoomMemberData_default_instance_;
class ChatRoomMemberInfo;
class ChatRoomMemberInfoDefaultTypeInternal;
extern ChatRoomMemberInfoDefaultTypeInternal _ChatRoomMemberInfo_default_instance_;
class CmdItem;
class CmdItemDefaultTypeInternal;
extern CmdItemDefaultTypeInternal _CmdItem_default_instance_;
class CmdList;
class CmdListDefaultTypeInternal;
extern CmdListDefaultTypeInternal _CmdList_default_instance_;
class CreateTalkRoomRequest;
class CreateTalkRoomRequestDefaultTypeInternal;
extern CreateTalkRoomRequestDefaultTypeInternal _CreateTalkRoomRequest_default_instance_;
class CreateTalkRoomResponse;
class CreateTalkRoomResponseDefaultTypeInternal;
extern CreateTalkRoomResponseDefaultTypeInternal _CreateTalkRoomResponse_default_instance_;
class CustomizedInfo;
class CustomizedInfoDefaultTypeInternal;
extern CustomizedInfoDefaultTypeInternal _CustomizedInfo_default_instance_;
class DelMemberReq;
class DelMemberReqDefaultTypeInternal;
extern DelMemberReqDefaultTypeInternal _DelMemberReq_default_instance_;
class DelMemberResp;
class DelMemberRespDefaultTypeInternal;
extern DelMemberRespDefaultTypeInternal _DelMemberResp_default_instance_;
class DelTalkRoomMemberRequest;
class DelTalkRoomMemberRequestDefaultTypeInternal;
extern DelTalkRoomMemberRequestDefaultTypeInternal _DelTalkRoomMemberRequest_default_instance_;
class DelTalkRoomMemberResponse;
class DelTalkRoomMemberResponseDefaultTypeInternal;
extern DelTalkRoomMemberResponseDefaultTypeInternal _DelTalkRoomMemberResponse_default_instance_;
class DisturbSetting;
class DisturbSettingDefaultTypeInternal;
extern DisturbSettingDefaultTypeInternal _DisturbSetting_default_instance_;
class DisturbTimeSpan;
class DisturbTimeSpanDefaultTypeInternal;
extern DisturbTimeSpanDefaultTypeInternal _DisturbTimeSpan_default_instance_;
class EnterTalkRoomReq;
class EnterTalkRoomReqDefaultTypeInternal;
extern EnterTalkRoomReqDefaultTypeInternal _EnterTalkRoomReq_default_instance_;
class EnterTalkRoomResp;
class EnterTalkRoomRespDefaultTypeInternal;
extern EnterTalkRoomRespDefaultTypeInternal _EnterTalkRoomResp_default_instance_;
class ExitTalkRoomReq;
class ExitTalkRoomReqDefaultTypeInternal;
extern ExitTalkRoomReqDefaultTypeInternal _ExitTalkRoomReq_default_instance_;
class ExitTalkRoomResp;
class ExitTalkRoomRespDefaultTypeInternal;
extern ExitTalkRoomRespDefaultTypeInternal _ExitTalkRoomResp_default_instance_;
class GetLocationRequest;
class GetLocationRequestDefaultTypeInternal;
extern GetLocationRequestDefaultTypeInternal _GetLocationRequest_default_instance_;
class GetLocationResponse;
class GetLocationResponseDefaultTypeInternal;
extern GetLocationResponseDefaultTypeInternal _GetLocationResponse_default_instance_;
class GetTalkRoomMemberReq;
class GetTalkRoomMemberReqDefaultTypeInternal;
extern GetTalkRoomMemberReqDefaultTypeInternal _GetTalkRoomMemberReq_default_instance_;
class GetTalkRoomMemberResp;
class GetTalkRoomMemberRespDefaultTypeInternal;
extern GetTalkRoomMemberRespDefaultTypeInternal _GetTalkRoomMemberResp_default_instance_;
class GmailInfo;
class GmailInfoDefaultTypeInternal;
extern GmailInfoDefaultTypeInternal _GmailInfo_default_instance_;
class GmailList;
class GmailListDefaultTypeInternal;
extern GmailListDefaultTypeInternal _GmailList_default_instance_;
class HardDevice;
class HardDeviceDefaultTypeInternal;
extern HardDeviceDefaultTypeInternal _HardDevice_default_instance_;
class Host;
class HostDefaultTypeInternal;
extern HostDefaultTypeInternal _Host_default_instance_;
class HostList;
class HostListDefaultTypeInternal;
extern HostListDefaultTypeInternal _HostList_default_instance_;
class LinkedinContactItem;
class LinkedinContactItemDefaultTypeInternal;
extern LinkedinContactItemDefaultTypeInternal _LinkedinContactItem_default_instance_;
class MemberReq;
class MemberReqDefaultTypeInternal;
extern MemberReqDefaultTypeInternal _MemberReq_default_instance_;
class MemberResp;
class MemberRespDefaultTypeInternal;
extern MemberRespDefaultTypeInternal _MemberResp_default_instance_;
class ModContact;
class ModContactDefaultTypeInternal;
extern ModContactDefaultTypeInternal _ModContact_default_instance_;
class ModUserInfo;
class ModUserInfoDefaultTypeInternal;
extern ModUserInfoDefaultTypeInternal _ModUserInfo_default_instance_;
class NetworkControl;
class NetworkControlDefaultTypeInternal;
extern NetworkControlDefaultTypeInternal _NetworkControl_default_instance_;
class PatternLockInfo;
class PatternLockInfoDefaultTypeInternal;
extern PatternLockInfoDefaultTypeInternal _PatternLockInfo_default_instance_;
class PluginKey;
class PluginKeyDefaultTypeInternal;
extern PluginKeyDefaultTypeInternal _PluginKey_default_instance_;
class PluginKeyList;
class PluginKeyListDefaultTypeInternal;
extern PluginKeyListDefaultTypeInternal _PluginKeyList_default_instance_;
class PositionInfo;
class PositionInfoDefaultTypeInternal;
extern PositionInfoDefaultTypeInternal _PositionInfo_default_instance_;
class RoomInfo;
class RoomInfoDefaultTypeInternal;
extern RoomInfoDefaultTypeInternal _RoomInfo_default_instance_;
class SKBuiltinBuffer_t;
class SKBuiltinBuffer_tDefaultTypeInternal;
extern SKBuiltinBuffer_tDefaultTypeInternal _SKBuiltinBuffer_t_default_instance_;
class SKBuiltinChar_t;
class SKBuiltinChar_tDefaultTypeInternal;
extern SKBuiltinChar_tDefaultTypeInternal _SKBuiltinChar_t_default_instance_;
class SKBuiltinDouble64_t;
class SKBuiltinDouble64_tDefaultTypeInternal;
extern SKBuiltinDouble64_tDefaultTypeInternal _SKBuiltinDouble64_t_default_instance_;
class SKBuiltinFloat32_t;
class SKBuiltinFloat32_tDefaultTypeInternal;
extern SKBuiltinFloat32_tDefaultTypeInternal _SKBuiltinFloat32_t_default_instance_;
class SKBuiltinInt16_t;
class SKBuiltinInt16_tDefaultTypeInternal;
extern SKBuiltinInt16_tDefaultTypeInternal _SKBuiltinInt16_t_default_instance_;
class SKBuiltinInt32_t;
class SKBuiltinInt32_tDefaultTypeInternal;
extern SKBuiltinInt32_tDefaultTypeInternal _SKBuiltinInt32_t_default_instance_;
class SKBuiltinInt64_t;
class SKBuiltinInt64_tDefaultTypeInternal;
extern SKBuiltinInt64_tDefaultTypeInternal _SKBuiltinInt64_t_default_instance_;
class SKBuiltinInt8_t;
class SKBuiltinInt8_tDefaultTypeInternal;
extern SKBuiltinInt8_tDefaultTypeInternal _SKBuiltinInt8_t_default_instance_;
class SKBuiltinString_t;
class SKBuiltinString_tDefaultTypeInternal;
extern SKBuiltinString_tDefaultTypeInternal _SKBuiltinString_t_default_instance_;
class SKBuiltinUchar_t;
class SKBuiltinUchar_tDefaultTypeInternal;
extern SKBuiltinUchar_tDefaultTypeInternal _SKBuiltinUchar_t_default_instance_;
class SKBuiltinUint16_t;
class SKBuiltinUint16_tDefaultTypeInternal;
extern SKBuiltinUint16_tDefaultTypeInternal _SKBuiltinUint16_t_default_instance_;
class SKBuiltinUint32_t;
class SKBuiltinUint32_tDefaultTypeInternal;
extern SKBuiltinUint32_tDefaultTypeInternal _SKBuiltinUint32_t_default_instance_;
class SKBuiltinUint64_t;
class SKBuiltinUint64_tDefaultTypeInternal;
extern SKBuiltinUint64_tDefaultTypeInternal _SKBuiltinUint64_t_default_instance_;
class SKBuiltinUint8_t;
class SKBuiltinUint8_tDefaultTypeInternal;
extern SKBuiltinUint8_tDefaultTypeInternal _SKBuiltinUint8_t_default_instance_;
class SafeDevice;
class SafeDeviceDefaultTypeInternal;
extern SafeDeviceDefaultTypeInternal _SafeDevice_default_instance_;
class SafeDeviceList;
class SafeDeviceListDefaultTypeInternal;
extern SafeDeviceListDefaultTypeInternal _SafeDeviceList_default_instance_;
class ShakeSyncRequest;
class ShakeSyncRequestDefaultTypeInternal;
extern ShakeSyncRequestDefaultTypeInternal _ShakeSyncRequest_default_instance_;
class ShakeSyncResponse;
class ShakeSyncResponseDefaultTypeInternal;
extern ShakeSyncResponseDefaultTypeInternal _ShakeSyncResponse_default_instance_;
class ShowStyleKey;
class ShowStyleKeyDefaultTypeInternal;
extern ShowStyleKeyDefaultTypeInternal _ShowStyleKey_default_instance_;
class SnsUserInfo;
class SnsUserInfoDefaultTypeInternal;
extern SnsUserInfoDefaultTypeInternal _SnsUserInfo_default_instance_;
class StyleKeyVal;
class StyleKeyValDefaultTypeInternal;
extern StyleKeyValDefaultTypeInternal _StyleKeyVal_default_instance_;
class TalkInviteReq;
class TalkInviteReqDefaultTypeInternal;
extern TalkInviteReqDefaultTypeInternal _TalkInviteReq_default_instance_;
class TalkInviteResp;
class TalkInviteRespDefaultTypeInternal;
extern TalkInviteRespDefaultTypeInternal _TalkInviteResp_default_instance_;
class TalkMicActionReq;
class TalkMicActionReqDefaultTypeInternal;
extern TalkMicActionReqDefaultTypeInternal _TalkMicActionReq_default_instance_;
class TalkMicActionResp;
class TalkMicActionRespDefaultTypeInternal;
extern TalkMicActionRespDefaultTypeInternal _TalkMicActionResp_default_instance_;
class TalkNoopReq;
class TalkNoopReqDefaultTypeInternal;
extern TalkNoopReqDefaultTypeInternal _TalkNoopReq_default_instance_;
class TalkNoopResp;
class TalkNoopRespDefaultTypeInternal;
extern TalkNoopRespDefaultTypeInternal _TalkNoopResp_default_instance_;
class TalkRelayAddr;
class TalkRelayAddrDefaultTypeInternal;
extern TalkRelayAddrDefaultTypeInternal _TalkRelayAddr_default_instance_;
class TalkRoomMember;
class TalkRoomMemberDefaultTypeInternal;
extern TalkRoomMemberDefaultTypeInternal _TalkRoomMember_default_instance_;
class TalkStatReportData;
class TalkStatReportDataDefaultTypeInternal;
extern TalkStatReportDataDefaultTypeInternal _TalkStatReportData_default_instance_;
class TalkStatReportReq;
class TalkStatReportReqDefaultTypeInternal;
extern TalkStatReportReqDefaultTypeInternal _TalkStatReportReq_default_instance_;
class TalkStatReportResp;
class TalkStatReportRespDefaultTypeInternal;
extern TalkStatReportRespDefaultTypeInternal _TalkStatReportResp_default_instance_;
class UserInfoExt;
class UserInfoExtDefaultTypeInternal;
extern UserInfoExtDefaultTypeInternal _UserInfoExt_default_instance_;
}  // namespace micromsg

namespace micromsg {

namespace protobuf_mmtalk_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_mmtalk_2eproto

// ===================================================================

class TalkRoomMember : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.TalkRoomMember) */ {
 public:
  TalkRoomMember();
  virtual ~TalkRoomMember();

  TalkRoomMember(const TalkRoomMember& from);

  inline TalkRoomMember& operator=(const TalkRoomMember& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TalkRoomMember& default_instance();

  static inline const TalkRoomMember* internal_default_instance() {
    return reinterpret_cast<const TalkRoomMember*>(
               &_TalkRoomMember_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(TalkRoomMember* other);

  // implements Message ----------------------------------------------

  inline TalkRoomMember* New() const PROTOBUF_FINAL { return New(NULL); }

  TalkRoomMember* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TalkRoomMember& from);
  void MergeFrom(const TalkRoomMember& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TalkRoomMember* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string UserName = 2;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // required int32 MemberID = 1;
  bool has_memberid() const;
  void clear_memberid();
  static const int kMemberIDFieldNumber = 1;
  ::google::protobuf::int32 memberid() const;
  void set_memberid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.TalkRoomMember)
 private:
  void set_has_memberid();
  void clear_has_memberid();
  void set_has_username();
  void clear_has_username();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::int32 memberid_;
  friend struct protobuf_mmtalk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TalkRelayAddr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.TalkRelayAddr) */ {
 public:
  TalkRelayAddr();
  virtual ~TalkRelayAddr();

  TalkRelayAddr(const TalkRelayAddr& from);

  inline TalkRelayAddr& operator=(const TalkRelayAddr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TalkRelayAddr& default_instance();

  static inline const TalkRelayAddr* internal_default_instance() {
    return reinterpret_cast<const TalkRelayAddr*>(
               &_TalkRelayAddr_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(TalkRelayAddr* other);

  // implements Message ----------------------------------------------

  inline TalkRelayAddr* New() const PROTOBUF_FINAL { return New(NULL); }

  TalkRelayAddr* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TalkRelayAddr& from);
  void MergeFrom(const TalkRelayAddr& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TalkRelayAddr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 Ip = 1;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  ::google::protobuf::uint32 ip() const;
  void set_ip(::google::protobuf::uint32 value);

  // required uint32 Port = 2;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.TalkRelayAddr)
 private:
  void set_has_ip();
  void clear_has_ip();
  void set_has_port();
  void clear_has_port();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 ip_;
  ::google::protobuf::uint32 port_;
  friend struct protobuf_mmtalk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EnterTalkRoomReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.EnterTalkRoomReq) */ {
 public:
  EnterTalkRoomReq();
  virtual ~EnterTalkRoomReq();

  EnterTalkRoomReq(const EnterTalkRoomReq& from);

  inline EnterTalkRoomReq& operator=(const EnterTalkRoomReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnterTalkRoomReq& default_instance();

  static inline const EnterTalkRoomReq* internal_default_instance() {
    return reinterpret_cast<const EnterTalkRoomReq*>(
               &_EnterTalkRoomReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(EnterTalkRoomReq* other);

  // implements Message ----------------------------------------------

  inline EnterTalkRoomReq* New() const PROTOBUF_FINAL { return New(NULL); }

  EnterTalkRoomReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EnterTalkRoomReq& from);
  void MergeFrom(const EnterTalkRoomReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EnterTalkRoomReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ToUsername = 2;
  bool has_tousername() const;
  void clear_tousername();
  static const int kToUsernameFieldNumber = 2;
  const ::std::string& tousername() const;
  void set_tousername(const ::std::string& value);
  #if LANG_CXX11
  void set_tousername(::std::string&& value);
  #endif
  void set_tousername(const char* value);
  void set_tousername(const char* value, size_t size);
  ::std::string* mutable_tousername();
  ::std::string* release_tousername();
  void set_allocated_tousername(::std::string* tousername);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // optional uint32 Scene = 3;
  bool has_scene() const;
  void clear_scene();
  static const int kSceneFieldNumber = 3;
  ::google::protobuf::uint32 scene() const;
  void set_scene(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.EnterTalkRoomReq)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_tousername();
  void clear_has_tousername();
  void set_has_scene();
  void clear_has_scene();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr tousername_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::uint32 scene_;
  friend struct protobuf_mmtalk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EnterTalkRoomResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.EnterTalkRoomResp) */ {
 public:
  EnterTalkRoomResp();
  virtual ~EnterTalkRoomResp();

  EnterTalkRoomResp(const EnterTalkRoomResp& from);

  inline EnterTalkRoomResp& operator=(const EnterTalkRoomResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnterTalkRoomResp& default_instance();

  static inline const EnterTalkRoomResp* internal_default_instance() {
    return reinterpret_cast<const EnterTalkRoomResp*>(
               &_EnterTalkRoomResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(EnterTalkRoomResp* other);

  // implements Message ----------------------------------------------

  inline EnterTalkRoomResp* New() const PROTOBUF_FINAL { return New(NULL); }

  EnterTalkRoomResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EnterTalkRoomResp& from);
  void MergeFrom(const EnterTalkRoomResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EnterTalkRoomResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.TalkRoomMember MemberList = 6;
  int memberlist_size() const;
  void clear_memberlist();
  static const int kMemberListFieldNumber = 6;
  const ::micromsg::TalkRoomMember& memberlist(int index) const;
  ::micromsg::TalkRoomMember* mutable_memberlist(int index);
  ::micromsg::TalkRoomMember* add_memberlist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::TalkRoomMember >*
      mutable_memberlist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::TalkRoomMember >&
      memberlist() const;

  // repeated .micromsg.TalkRelayAddr AddrList = 9;
  int addrlist_size() const;
  void clear_addrlist();
  static const int kAddrListFieldNumber = 9;
  const ::micromsg::TalkRelayAddr& addrlist(int index) const;
  ::micromsg::TalkRelayAddr* mutable_addrlist(int index);
  ::micromsg::TalkRelayAddr* add_addrlist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::TalkRelayAddr >*
      mutable_addrlist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::TalkRelayAddr >&
      addrlist() const;

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required int64 RoomKey = 3;
  bool has_roomkey() const;
  void clear_roomkey();
  static const int kRoomKeyFieldNumber = 3;
  ::google::protobuf::int64 roomkey() const;
  void set_roomkey(::google::protobuf::int64 value);

  // required int32 RoomId = 2;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 2;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // required int32 MicSeq = 4;
  bool has_micseq() const;
  void clear_micseq();
  static const int kMicSeqFieldNumber = 4;
  ::google::protobuf::int32 micseq() const;
  void set_micseq(::google::protobuf::int32 value);

  // required int32 MemberNum = 5;
  bool has_membernum() const;
  void clear_membernum();
  static const int kMemberNumFieldNumber = 5;
  ::google::protobuf::int32 membernum() const;
  void set_membernum(::google::protobuf::int32 value);

  // required int32 MyRoomMemberId = 7;
  bool has_myroommemberid() const;
  void clear_myroommemberid();
  static const int kMyRoomMemberIdFieldNumber = 7;
  ::google::protobuf::int32 myroommemberid() const;
  void set_myroommemberid(::google::protobuf::int32 value);

  // optional int32 AddrCount = 8;
  bool has_addrcount() const;
  void clear_addrcount();
  static const int kAddrCountFieldNumber = 8;
  ::google::protobuf::int32 addrcount() const;
  void set_addrcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.EnterTalkRoomResp)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_roomid();
  void clear_has_roomid();
  void set_has_roomkey();
  void clear_has_roomkey();
  void set_has_micseq();
  void clear_has_micseq();
  void set_has_membernum();
  void clear_has_membernum();
  void set_has_myroommemberid();
  void clear_has_myroommemberid();
  void set_has_addrcount();
  void clear_has_addrcount();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::TalkRoomMember > memberlist_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::TalkRelayAddr > addrlist_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::int64 roomkey_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 micseq_;
  ::google::protobuf::int32 membernum_;
  ::google::protobuf::int32 myroommemberid_;
  ::google::protobuf::int32 addrcount_;
  friend struct protobuf_mmtalk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExitTalkRoomReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.ExitTalkRoomReq) */ {
 public:
  ExitTalkRoomReq();
  virtual ~ExitTalkRoomReq();

  ExitTalkRoomReq(const ExitTalkRoomReq& from);

  inline ExitTalkRoomReq& operator=(const ExitTalkRoomReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExitTalkRoomReq& default_instance();

  static inline const ExitTalkRoomReq* internal_default_instance() {
    return reinterpret_cast<const ExitTalkRoomReq*>(
               &_ExitTalkRoomReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(ExitTalkRoomReq* other);

  // implements Message ----------------------------------------------

  inline ExitTalkRoomReq* New() const PROTOBUF_FINAL { return New(NULL); }

  ExitTalkRoomReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExitTalkRoomReq& from);
  void MergeFrom(const ExitTalkRoomReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExitTalkRoomReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ToUsername = 4;
  bool has_tousername() const;
  void clear_tousername();
  static const int kToUsernameFieldNumber = 4;
  const ::std::string& tousername() const;
  void set_tousername(const ::std::string& value);
  #if LANG_CXX11
  void set_tousername(::std::string&& value);
  #endif
  void set_tousername(const char* value);
  void set_tousername(const char* value, size_t size);
  ::std::string* mutable_tousername();
  ::std::string* release_tousername();
  void set_allocated_tousername(::std::string* tousername);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required int64 RoomKey = 3;
  bool has_roomkey() const;
  void clear_roomkey();
  static const int kRoomKeyFieldNumber = 3;
  ::google::protobuf::int64 roomkey() const;
  void set_roomkey(::google::protobuf::int64 value);

  // required int32 RoomId = 2;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 2;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // optional uint32 Scene = 5;
  bool has_scene() const;
  void clear_scene();
  static const int kSceneFieldNumber = 5;
  ::google::protobuf::uint32 scene() const;
  void set_scene(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.ExitTalkRoomReq)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_roomid();
  void clear_has_roomid();
  void set_has_roomkey();
  void clear_has_roomkey();
  void set_has_tousername();
  void clear_has_tousername();
  void set_has_scene();
  void clear_has_scene();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr tousername_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::int64 roomkey_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::uint32 scene_;
  friend struct protobuf_mmtalk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExitTalkRoomResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.ExitTalkRoomResp) */ {
 public:
  ExitTalkRoomResp();
  virtual ~ExitTalkRoomResp();

  ExitTalkRoomResp(const ExitTalkRoomResp& from);

  inline ExitTalkRoomResp& operator=(const ExitTalkRoomResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExitTalkRoomResp& default_instance();

  static inline const ExitTalkRoomResp* internal_default_instance() {
    return reinterpret_cast<const ExitTalkRoomResp*>(
               &_ExitTalkRoomResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(ExitTalkRoomResp* other);

  // implements Message ----------------------------------------------

  inline ExitTalkRoomResp* New() const PROTOBUF_FINAL { return New(NULL); }

  ExitTalkRoomResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExitTalkRoomResp& from);
  void MergeFrom(const ExitTalkRoomResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExitTalkRoomResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // @@protoc_insertion_point(class_scope:micromsg.ExitTalkRoomResp)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseResponse* baseresponse_;
  friend struct protobuf_mmtalk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TalkMicActionReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.TalkMicActionReq) */ {
 public:
  TalkMicActionReq();
  virtual ~TalkMicActionReq();

  TalkMicActionReq(const TalkMicActionReq& from);

  inline TalkMicActionReq& operator=(const TalkMicActionReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TalkMicActionReq& default_instance();

  static inline const TalkMicActionReq* internal_default_instance() {
    return reinterpret_cast<const TalkMicActionReq*>(
               &_TalkMicActionReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(TalkMicActionReq* other);

  // implements Message ----------------------------------------------

  inline TalkMicActionReq* New() const PROTOBUF_FINAL { return New(NULL); }

  TalkMicActionReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TalkMicActionReq& from);
  void MergeFrom(const TalkMicActionReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TalkMicActionReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required int64 RoomKey = 3;
  bool has_roomkey() const;
  void clear_roomkey();
  static const int kRoomKeyFieldNumber = 3;
  ::google::protobuf::int64 roomkey() const;
  void set_roomkey(::google::protobuf::int64 value);

  // required int32 RoomId = 2;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 2;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // required uint32 ActionType = 4;
  bool has_actiontype() const;
  void clear_actiontype();
  static const int kActionTypeFieldNumber = 4;
  ::google::protobuf::uint32 actiontype() const;
  void set_actiontype(::google::protobuf::uint32 value);

  // optional uint32 UpdateTime = 5;
  bool has_updatetime() const;
  void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 5;
  ::google::protobuf::uint32 updatetime() const;
  void set_updatetime(::google::protobuf::uint32 value);

  // optional uint32 Scene = 6;
  bool has_scene() const;
  void clear_scene();
  static const int kSceneFieldNumber = 6;
  ::google::protobuf::uint32 scene() const;
  void set_scene(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.TalkMicActionReq)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_roomid();
  void clear_has_roomid();
  void set_has_roomkey();
  void clear_has_roomkey();
  void set_has_actiontype();
  void clear_has_actiontype();
  void set_has_updatetime();
  void clear_has_updatetime();
  void set_has_scene();
  void clear_has_scene();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::int64 roomkey_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::uint32 actiontype_;
  ::google::protobuf::uint32 updatetime_;
  ::google::protobuf::uint32 scene_;
  friend struct protobuf_mmtalk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TalkMicActionResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.TalkMicActionResp) */ {
 public:
  TalkMicActionResp();
  virtual ~TalkMicActionResp();

  TalkMicActionResp(const TalkMicActionResp& from);

  inline TalkMicActionResp& operator=(const TalkMicActionResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TalkMicActionResp& default_instance();

  static inline const TalkMicActionResp* internal_default_instance() {
    return reinterpret_cast<const TalkMicActionResp*>(
               &_TalkMicActionResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(TalkMicActionResp* other);

  // implements Message ----------------------------------------------

  inline TalkMicActionResp* New() const PROTOBUF_FINAL { return New(NULL); }

  TalkMicActionResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TalkMicActionResp& from);
  void MergeFrom(const TalkMicActionResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TalkMicActionResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required int32 MicSeq = 2;
  bool has_micseq() const;
  void clear_micseq();
  static const int kMicSeqFieldNumber = 2;
  ::google::protobuf::int32 micseq() const;
  void set_micseq(::google::protobuf::int32 value);

  // optional uint32 ChannelId = 3;
  bool has_channelid() const;
  void clear_channelid();
  static const int kChannelIdFieldNumber = 3;
  ::google::protobuf::uint32 channelid() const;
  void set_channelid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.TalkMicActionResp)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_micseq();
  void clear_has_micseq();
  void set_has_channelid();
  void clear_has_channelid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::int32 micseq_;
  ::google::protobuf::uint32 channelid_;
  friend struct protobuf_mmtalk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TalkNoopReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.TalkNoopReq) */ {
 public:
  TalkNoopReq();
  virtual ~TalkNoopReq();

  TalkNoopReq(const TalkNoopReq& from);

  inline TalkNoopReq& operator=(const TalkNoopReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TalkNoopReq& default_instance();

  static inline const TalkNoopReq* internal_default_instance() {
    return reinterpret_cast<const TalkNoopReq*>(
               &_TalkNoopReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(TalkNoopReq* other);

  // implements Message ----------------------------------------------

  inline TalkNoopReq* New() const PROTOBUF_FINAL { return New(NULL); }

  TalkNoopReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TalkNoopReq& from);
  void MergeFrom(const TalkNoopReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TalkNoopReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required int64 RoomKey = 3;
  bool has_roomkey() const;
  void clear_roomkey();
  static const int kRoomKeyFieldNumber = 3;
  ::google::protobuf::int64 roomkey() const;
  void set_roomkey(::google::protobuf::int64 value);

  // required int32 RoomId = 2;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 2;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // optional uint32 UpdateTime = 4;
  bool has_updatetime() const;
  void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 4;
  ::google::protobuf::uint32 updatetime() const;
  void set_updatetime(::google::protobuf::uint32 value);

  // optional uint32 Scene = 5;
  bool has_scene() const;
  void clear_scene();
  static const int kSceneFieldNumber = 5;
  ::google::protobuf::uint32 scene() const;
  void set_scene(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.TalkNoopReq)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_roomid();
  void clear_has_roomid();
  void set_has_roomkey();
  void clear_has_roomkey();
  void set_has_updatetime();
  void clear_has_updatetime();
  void set_has_scene();
  void clear_has_scene();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::int64 roomkey_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::uint32 updatetime_;
  ::google::protobuf::uint32 scene_;
  friend struct protobuf_mmtalk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TalkNoopResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.TalkNoopResp) */ {
 public:
  TalkNoopResp();
  virtual ~TalkNoopResp();

  TalkNoopResp(const TalkNoopResp& from);

  inline TalkNoopResp& operator=(const TalkNoopResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TalkNoopResp& default_instance();

  static inline const TalkNoopResp* internal_default_instance() {
    return reinterpret_cast<const TalkNoopResp*>(
               &_TalkNoopResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(TalkNoopResp* other);

  // implements Message ----------------------------------------------

  inline TalkNoopResp* New() const PROTOBUF_FINAL { return New(NULL); }

  TalkNoopResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TalkNoopResp& from);
  void MergeFrom(const TalkNoopResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TalkNoopResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // @@protoc_insertion_point(class_scope:micromsg.TalkNoopResp)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseResponse* baseresponse_;
  friend struct protobuf_mmtalk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetTalkRoomMemberReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GetTalkRoomMemberReq) */ {
 public:
  GetTalkRoomMemberReq();
  virtual ~GetTalkRoomMemberReq();

  GetTalkRoomMemberReq(const GetTalkRoomMemberReq& from);

  inline GetTalkRoomMemberReq& operator=(const GetTalkRoomMemberReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTalkRoomMemberReq& default_instance();

  static inline const GetTalkRoomMemberReq* internal_default_instance() {
    return reinterpret_cast<const GetTalkRoomMemberReq*>(
               &_GetTalkRoomMemberReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(GetTalkRoomMemberReq* other);

  // implements Message ----------------------------------------------

  inline GetTalkRoomMemberReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetTalkRoomMemberReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetTalkRoomMemberReq& from);
  void MergeFrom(const GetTalkRoomMemberReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetTalkRoomMemberReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required int64 RoomKey = 3;
  bool has_roomkey() const;
  void clear_roomkey();
  static const int kRoomKeyFieldNumber = 3;
  ::google::protobuf::int64 roomkey() const;
  void set_roomkey(::google::protobuf::int64 value);

  // required int32 RoomId = 2;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 2;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // optional uint32 Scene = 4;
  bool has_scene() const;
  void clear_scene();
  static const int kSceneFieldNumber = 4;
  ::google::protobuf::uint32 scene() const;
  void set_scene(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GetTalkRoomMemberReq)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_roomid();
  void clear_has_roomid();
  void set_has_roomkey();
  void clear_has_roomkey();
  void set_has_scene();
  void clear_has_scene();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::int64 roomkey_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::uint32 scene_;
  friend struct protobuf_mmtalk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetTalkRoomMemberResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GetTalkRoomMemberResp) */ {
 public:
  GetTalkRoomMemberResp();
  virtual ~GetTalkRoomMemberResp();

  GetTalkRoomMemberResp(const GetTalkRoomMemberResp& from);

  inline GetTalkRoomMemberResp& operator=(const GetTalkRoomMemberResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTalkRoomMemberResp& default_instance();

  static inline const GetTalkRoomMemberResp* internal_default_instance() {
    return reinterpret_cast<const GetTalkRoomMemberResp*>(
               &_GetTalkRoomMemberResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(GetTalkRoomMemberResp* other);

  // implements Message ----------------------------------------------

  inline GetTalkRoomMemberResp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetTalkRoomMemberResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetTalkRoomMemberResp& from);
  void MergeFrom(const GetTalkRoomMemberResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetTalkRoomMemberResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.TalkRoomMember MemberList = 4;
  int memberlist_size() const;
  void clear_memberlist();
  static const int kMemberListFieldNumber = 4;
  const ::micromsg::TalkRoomMember& memberlist(int index) const;
  ::micromsg::TalkRoomMember* mutable_memberlist(int index);
  ::micromsg::TalkRoomMember* add_memberlist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::TalkRoomMember >*
      mutable_memberlist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::TalkRoomMember >&
      memberlist() const;

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required int32 MicSeq = 2;
  bool has_micseq() const;
  void clear_micseq();
  static const int kMicSeqFieldNumber = 2;
  ::google::protobuf::int32 micseq() const;
  void set_micseq(::google::protobuf::int32 value);

  // required int32 MemberNum = 3;
  bool has_membernum() const;
  void clear_membernum();
  static const int kMemberNumFieldNumber = 3;
  ::google::protobuf::int32 membernum() const;
  void set_membernum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GetTalkRoomMemberResp)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_micseq();
  void clear_has_micseq();
  void set_has_membernum();
  void clear_has_membernum();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::TalkRoomMember > memberlist_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::int32 micseq_;
  ::google::protobuf::int32 membernum_;
  friend struct protobuf_mmtalk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TalkInviteReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.TalkInviteReq) */ {
 public:
  TalkInviteReq();
  virtual ~TalkInviteReq();

  TalkInviteReq(const TalkInviteReq& from);

  inline TalkInviteReq& operator=(const TalkInviteReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TalkInviteReq& default_instance();

  static inline const TalkInviteReq* internal_default_instance() {
    return reinterpret_cast<const TalkInviteReq*>(
               &_TalkInviteReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(TalkInviteReq* other);

  // implements Message ----------------------------------------------

  inline TalkInviteReq* New() const PROTOBUF_FINAL { return New(NULL); }

  TalkInviteReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TalkInviteReq& from);
  void MergeFrom(const TalkInviteReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TalkInviteReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required int64 RoomKey = 3;
  bool has_roomkey() const;
  void clear_roomkey();
  static const int kRoomKeyFieldNumber = 3;
  ::google::protobuf::int64 roomkey() const;
  void set_roomkey(::google::protobuf::int64 value);

  // required int32 RoomId = 2;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 2;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // optional uint32 Scene = 4;
  bool has_scene() const;
  void clear_scene();
  static const int kSceneFieldNumber = 4;
  ::google::protobuf::uint32 scene() const;
  void set_scene(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.TalkInviteReq)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_roomid();
  void clear_has_roomid();
  void set_has_roomkey();
  void clear_has_roomkey();
  void set_has_scene();
  void clear_has_scene();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::int64 roomkey_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::uint32 scene_;
  friend struct protobuf_mmtalk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TalkInviteResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.TalkInviteResp) */ {
 public:
  TalkInviteResp();
  virtual ~TalkInviteResp();

  TalkInviteResp(const TalkInviteResp& from);

  inline TalkInviteResp& operator=(const TalkInviteResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TalkInviteResp& default_instance();

  static inline const TalkInviteResp* internal_default_instance() {
    return reinterpret_cast<const TalkInviteResp*>(
               &_TalkInviteResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(TalkInviteResp* other);

  // implements Message ----------------------------------------------

  inline TalkInviteResp* New() const PROTOBUF_FINAL { return New(NULL); }

  TalkInviteResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TalkInviteResp& from);
  void MergeFrom(const TalkInviteResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TalkInviteResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // @@protoc_insertion_point(class_scope:micromsg.TalkInviteResp)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseResponse* baseresponse_;
  friend struct protobuf_mmtalk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TalkStatReportData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.TalkStatReportData) */ {
 public:
  TalkStatReportData();
  virtual ~TalkStatReportData();

  TalkStatReportData(const TalkStatReportData& from);

  inline TalkStatReportData& operator=(const TalkStatReportData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TalkStatReportData& default_instance();

  static inline const TalkStatReportData* internal_default_instance() {
    return reinterpret_cast<const TalkStatReportData*>(
               &_TalkStatReportData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(TalkStatReportData* other);

  // implements Message ----------------------------------------------

  inline TalkStatReportData* New() const PROTOBUF_FINAL { return New(NULL); }

  TalkStatReportData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TalkStatReportData& from);
  void MergeFrom(const TalkStatReportData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TalkStatReportData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.SKBuiltinString_t StatReport = 2;
  bool has_statreport() const;
  void clear_statreport();
  static const int kStatReportFieldNumber = 2;
  const ::micromsg::SKBuiltinString_t& statreport() const;
  ::micromsg::SKBuiltinString_t* mutable_statreport();
  ::micromsg::SKBuiltinString_t* release_statreport();
  void set_allocated_statreport(::micromsg::SKBuiltinString_t* statreport);

  // required int32 LogID = 1;
  bool has_logid() const;
  void clear_logid();
  static const int kLogIDFieldNumber = 1;
  ::google::protobuf::int32 logid() const;
  void set_logid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.TalkStatReportData)
 private:
  void set_has_logid();
  void clear_has_logid();
  void set_has_statreport();
  void clear_has_statreport();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::SKBuiltinString_t* statreport_;
  ::google::protobuf::int32 logid_;
  friend struct protobuf_mmtalk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TalkStatReportReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.TalkStatReportReq) */ {
 public:
  TalkStatReportReq();
  virtual ~TalkStatReportReq();

  TalkStatReportReq(const TalkStatReportReq& from);

  inline TalkStatReportReq& operator=(const TalkStatReportReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TalkStatReportReq& default_instance();

  static inline const TalkStatReportReq* internal_default_instance() {
    return reinterpret_cast<const TalkStatReportReq*>(
               &_TalkStatReportReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(TalkStatReportReq* other);

  // implements Message ----------------------------------------------

  inline TalkStatReportReq* New() const PROTOBUF_FINAL { return New(NULL); }

  TalkStatReportReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TalkStatReportReq& from);
  void MergeFrom(const TalkStatReportReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TalkStatReportReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.TalkStatReportData ReportData = 3;
  int reportdata_size() const;
  void clear_reportdata();
  static const int kReportDataFieldNumber = 3;
  const ::micromsg::TalkStatReportData& reportdata(int index) const;
  ::micromsg::TalkStatReportData* mutable_reportdata(int index);
  ::micromsg::TalkStatReportData* add_reportdata();
  ::google::protobuf::RepeatedPtrField< ::micromsg::TalkStatReportData >*
      mutable_reportdata();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::TalkStatReportData >&
      reportdata() const;

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required int32 DataNum = 2;
  bool has_datanum() const;
  void clear_datanum();
  static const int kDataNumFieldNumber = 2;
  ::google::protobuf::int32 datanum() const;
  void set_datanum(::google::protobuf::int32 value);

  // optional uint32 Scene = 4;
  bool has_scene() const;
  void clear_scene();
  static const int kSceneFieldNumber = 4;
  ::google::protobuf::uint32 scene() const;
  void set_scene(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.TalkStatReportReq)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_datanum();
  void clear_has_datanum();
  void set_has_scene();
  void clear_has_scene();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::TalkStatReportData > reportdata_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::int32 datanum_;
  ::google::protobuf::uint32 scene_;
  friend struct protobuf_mmtalk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TalkStatReportResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.TalkStatReportResp) */ {
 public:
  TalkStatReportResp();
  virtual ~TalkStatReportResp();

  TalkStatReportResp(const TalkStatReportResp& from);

  inline TalkStatReportResp& operator=(const TalkStatReportResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TalkStatReportResp& default_instance();

  static inline const TalkStatReportResp* internal_default_instance() {
    return reinterpret_cast<const TalkStatReportResp*>(
               &_TalkStatReportResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(TalkStatReportResp* other);

  // implements Message ----------------------------------------------

  inline TalkStatReportResp* New() const PROTOBUF_FINAL { return New(NULL); }

  TalkStatReportResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TalkStatReportResp& from);
  void MergeFrom(const TalkStatReportResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TalkStatReportResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // @@protoc_insertion_point(class_scope:micromsg.TalkStatReportResp)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseResponse* baseresponse_;
  friend struct protobuf_mmtalk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateTalkRoomRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.CreateTalkRoomRequest) */ {
 public:
  CreateTalkRoomRequest();
  virtual ~CreateTalkRoomRequest();

  CreateTalkRoomRequest(const CreateTalkRoomRequest& from);

  inline CreateTalkRoomRequest& operator=(const CreateTalkRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateTalkRoomRequest& default_instance();

  static inline const CreateTalkRoomRequest* internal_default_instance() {
    return reinterpret_cast<const CreateTalkRoomRequest*>(
               &_CreateTalkRoomRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(CreateTalkRoomRequest* other);

  // implements Message ----------------------------------------------

  inline CreateTalkRoomRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateTalkRoomRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateTalkRoomRequest& from);
  void MergeFrom(const CreateTalkRoomRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateTalkRoomRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.MemberReq MemberList = 4;
  int memberlist_size() const;
  void clear_memberlist();
  static const int kMemberListFieldNumber = 4;
  const ::micromsg::MemberReq& memberlist(int index) const;
  ::micromsg::MemberReq* mutable_memberlist(int index);
  ::micromsg::MemberReq* add_memberlist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::MemberReq >*
      mutable_memberlist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::MemberReq >&
      memberlist() const;

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required .micromsg.SKBuiltinString_t Topic = 2;
  bool has_topic() const;
  void clear_topic();
  static const int kTopicFieldNumber = 2;
  const ::micromsg::SKBuiltinString_t& topic() const;
  ::micromsg::SKBuiltinString_t* mutable_topic();
  ::micromsg::SKBuiltinString_t* release_topic();
  void set_allocated_topic(::micromsg::SKBuiltinString_t* topic);

  // required uint32 MemberCount = 3;
  bool has_membercount() const;
  void clear_membercount();
  static const int kMemberCountFieldNumber = 3;
  ::google::protobuf::uint32 membercount() const;
  void set_membercount(::google::protobuf::uint32 value);

  // optional uint32 Scene = 5;
  bool has_scene() const;
  void clear_scene();
  static const int kSceneFieldNumber = 5;
  ::google::protobuf::uint32 scene() const;
  void set_scene(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.CreateTalkRoomRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_topic();
  void clear_has_topic();
  void set_has_membercount();
  void clear_has_membercount();
  void set_has_scene();
  void clear_has_scene();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::MemberReq > memberlist_;
  ::micromsg::BaseRequest* baserequest_;
  ::micromsg::SKBuiltinString_t* topic_;
  ::google::protobuf::uint32 membercount_;
  ::google::protobuf::uint32 scene_;
  friend struct protobuf_mmtalk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateTalkRoomResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.CreateTalkRoomResponse) */ {
 public:
  CreateTalkRoomResponse();
  virtual ~CreateTalkRoomResponse();

  CreateTalkRoomResponse(const CreateTalkRoomResponse& from);

  inline CreateTalkRoomResponse& operator=(const CreateTalkRoomResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateTalkRoomResponse& default_instance();

  static inline const CreateTalkRoomResponse* internal_default_instance() {
    return reinterpret_cast<const CreateTalkRoomResponse*>(
               &_CreateTalkRoomResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(CreateTalkRoomResponse* other);

  // implements Message ----------------------------------------------

  inline CreateTalkRoomResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateTalkRoomResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateTalkRoomResponse& from);
  void MergeFrom(const CreateTalkRoomResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateTalkRoomResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.MemberResp MemberList = 6;
  int memberlist_size() const;
  void clear_memberlist();
  static const int kMemberListFieldNumber = 6;
  const ::micromsg::MemberResp& memberlist(int index) const;
  ::micromsg::MemberResp* mutable_memberlist(int index);
  ::micromsg::MemberResp* add_memberlist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::MemberResp >*
      mutable_memberlist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::MemberResp >&
      memberlist() const;

  // optional string BigHeadImgUrl = 9;
  bool has_bigheadimgurl() const;
  void clear_bigheadimgurl();
  static const int kBigHeadImgUrlFieldNumber = 9;
  const ::std::string& bigheadimgurl() const;
  void set_bigheadimgurl(const ::std::string& value);
  #if LANG_CXX11
  void set_bigheadimgurl(::std::string&& value);
  #endif
  void set_bigheadimgurl(const char* value);
  void set_bigheadimgurl(const char* value, size_t size);
  ::std::string* mutable_bigheadimgurl();
  ::std::string* release_bigheadimgurl();
  void set_allocated_bigheadimgurl(::std::string* bigheadimgurl);

  // optional string SmallHeadImgUrl = 10;
  bool has_smallheadimgurl() const;
  void clear_smallheadimgurl();
  static const int kSmallHeadImgUrlFieldNumber = 10;
  const ::std::string& smallheadimgurl() const;
  void set_smallheadimgurl(const ::std::string& value);
  #if LANG_CXX11
  void set_smallheadimgurl(::std::string&& value);
  #endif
  void set_smallheadimgurl(const char* value);
  void set_smallheadimgurl(const char* value, size_t size);
  ::std::string* mutable_smallheadimgurl();
  ::std::string* release_smallheadimgurl();
  void set_allocated_smallheadimgurl(::std::string* smallheadimgurl);

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required .micromsg.SKBuiltinString_t Topic = 2;
  bool has_topic() const;
  void clear_topic();
  static const int kTopicFieldNumber = 2;
  const ::micromsg::SKBuiltinString_t& topic() const;
  ::micromsg::SKBuiltinString_t* mutable_topic();
  ::micromsg::SKBuiltinString_t* release_topic();
  void set_allocated_topic(::micromsg::SKBuiltinString_t* topic);

  // required .micromsg.SKBuiltinString_t PYInitial = 3;
  bool has_pyinitial() const;
  void clear_pyinitial();
  static const int kPYInitialFieldNumber = 3;
  const ::micromsg::SKBuiltinString_t& pyinitial() const;
  ::micromsg::SKBuiltinString_t* mutable_pyinitial();
  ::micromsg::SKBuiltinString_t* release_pyinitial();
  void set_allocated_pyinitial(::micromsg::SKBuiltinString_t* pyinitial);

  // required .micromsg.SKBuiltinString_t QuanPin = 4;
  bool has_quanpin() const;
  void clear_quanpin();
  static const int kQuanPinFieldNumber = 4;
  const ::micromsg::SKBuiltinString_t& quanpin() const;
  ::micromsg::SKBuiltinString_t* mutable_quanpin();
  ::micromsg::SKBuiltinString_t* release_quanpin();
  void set_allocated_quanpin(::micromsg::SKBuiltinString_t* quanpin);

  // required .micromsg.SKBuiltinString_t TalkRoomName = 7;
  bool has_talkroomname() const;
  void clear_talkroomname();
  static const int kTalkRoomNameFieldNumber = 7;
  const ::micromsg::SKBuiltinString_t& talkroomname() const;
  ::micromsg::SKBuiltinString_t* mutable_talkroomname();
  ::micromsg::SKBuiltinString_t* release_talkroomname();
  void set_allocated_talkroomname(::micromsg::SKBuiltinString_t* talkroomname);

  // required .micromsg.SKBuiltinBuffer_t ImgBuf = 8;
  bool has_imgbuf() const;
  void clear_imgbuf();
  static const int kImgBufFieldNumber = 8;
  const ::micromsg::SKBuiltinBuffer_t& imgbuf() const;
  ::micromsg::SKBuiltinBuffer_t* mutable_imgbuf();
  ::micromsg::SKBuiltinBuffer_t* release_imgbuf();
  void set_allocated_imgbuf(::micromsg::SKBuiltinBuffer_t* imgbuf);

  // required uint32 MemberCount = 5;
  bool has_membercount() const;
  void clear_membercount();
  static const int kMemberCountFieldNumber = 5;
  ::google::protobuf::uint32 membercount() const;
  void set_membercount(::google::protobuf::uint32 value);

  // required int32 RoomId = 11;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 11;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // required int64 RoomKey = 12;
  bool has_roomkey() const;
  void clear_roomkey();
  static const int kRoomKeyFieldNumber = 12;
  ::google::protobuf::int64 roomkey() const;
  void set_roomkey(::google::protobuf::int64 value);

  // required int32 MicSeq = 13;
  bool has_micseq() const;
  void clear_micseq();
  static const int kMicSeqFieldNumber = 13;
  ::google::protobuf::int32 micseq() const;
  void set_micseq(::google::protobuf::int32 value);

  // required int32 MyRoomMemberId = 14;
  bool has_myroommemberid() const;
  void clear_myroommemberid();
  static const int kMyRoomMemberIdFieldNumber = 14;
  ::google::protobuf::int32 myroommemberid() const;
  void set_myroommemberid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.CreateTalkRoomResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_topic();
  void clear_has_topic();
  void set_has_pyinitial();
  void clear_has_pyinitial();
  void set_has_quanpin();
  void clear_has_quanpin();
  void set_has_membercount();
  void clear_has_membercount();
  void set_has_talkroomname();
  void clear_has_talkroomname();
  void set_has_imgbuf();
  void clear_has_imgbuf();
  void set_has_bigheadimgurl();
  void clear_has_bigheadimgurl();
  void set_has_smallheadimgurl();
  void clear_has_smallheadimgurl();
  void set_has_roomid();
  void clear_has_roomid();
  void set_has_roomkey();
  void clear_has_roomkey();
  void set_has_micseq();
  void clear_has_micseq();
  void set_has_myroommemberid();
  void clear_has_myroommemberid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::MemberResp > memberlist_;
  ::google::protobuf::internal::ArenaStringPtr bigheadimgurl_;
  ::google::protobuf::internal::ArenaStringPtr smallheadimgurl_;
  ::micromsg::BaseResponse* baseresponse_;
  ::micromsg::SKBuiltinString_t* topic_;
  ::micromsg::SKBuiltinString_t* pyinitial_;
  ::micromsg::SKBuiltinString_t* quanpin_;
  ::micromsg::SKBuiltinString_t* talkroomname_;
  ::micromsg::SKBuiltinBuffer_t* imgbuf_;
  ::google::protobuf::uint32 membercount_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int64 roomkey_;
  ::google::protobuf::int32 micseq_;
  ::google::protobuf::int32 myroommemberid_;
  friend struct protobuf_mmtalk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddTalkRoomMemberRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.AddTalkRoomMemberRequest) */ {
 public:
  AddTalkRoomMemberRequest();
  virtual ~AddTalkRoomMemberRequest();

  AddTalkRoomMemberRequest(const AddTalkRoomMemberRequest& from);

  inline AddTalkRoomMemberRequest& operator=(const AddTalkRoomMemberRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddTalkRoomMemberRequest& default_instance();

  static inline const AddTalkRoomMemberRequest* internal_default_instance() {
    return reinterpret_cast<const AddTalkRoomMemberRequest*>(
               &_AddTalkRoomMemberRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(AddTalkRoomMemberRequest* other);

  // implements Message ----------------------------------------------

  inline AddTalkRoomMemberRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  AddTalkRoomMemberRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddTalkRoomMemberRequest& from);
  void MergeFrom(const AddTalkRoomMemberRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddTalkRoomMemberRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.MemberReq MemberList = 3;
  int memberlist_size() const;
  void clear_memberlist();
  static const int kMemberListFieldNumber = 3;
  const ::micromsg::MemberReq& memberlist(int index) const;
  ::micromsg::MemberReq* mutable_memberlist(int index);
  ::micromsg::MemberReq* add_memberlist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::MemberReq >*
      mutable_memberlist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::MemberReq >&
      memberlist() const;

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required .micromsg.SKBuiltinString_t TalkRoomName = 4;
  bool has_talkroomname() const;
  void clear_talkroomname();
  static const int kTalkRoomNameFieldNumber = 4;
  const ::micromsg::SKBuiltinString_t& talkroomname() const;
  ::micromsg::SKBuiltinString_t* mutable_talkroomname();
  ::micromsg::SKBuiltinString_t* release_talkroomname();
  void set_allocated_talkroomname(::micromsg::SKBuiltinString_t* talkroomname);

  // required uint32 MemberCount = 2;
  bool has_membercount() const;
  void clear_membercount();
  static const int kMemberCountFieldNumber = 2;
  ::google::protobuf::uint32 membercount() const;
  void set_membercount(::google::protobuf::uint32 value);

  // optional uint32 Scene = 5;
  bool has_scene() const;
  void clear_scene();
  static const int kSceneFieldNumber = 5;
  ::google::protobuf::uint32 scene() const;
  void set_scene(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.AddTalkRoomMemberRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_membercount();
  void clear_has_membercount();
  void set_has_talkroomname();
  void clear_has_talkroomname();
  void set_has_scene();
  void clear_has_scene();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::MemberReq > memberlist_;
  ::micromsg::BaseRequest* baserequest_;
  ::micromsg::SKBuiltinString_t* talkroomname_;
  ::google::protobuf::uint32 membercount_;
  ::google::protobuf::uint32 scene_;
  friend struct protobuf_mmtalk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddTalkRoomMemberResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.AddTalkRoomMemberResponse) */ {
 public:
  AddTalkRoomMemberResponse();
  virtual ~AddTalkRoomMemberResponse();

  AddTalkRoomMemberResponse(const AddTalkRoomMemberResponse& from);

  inline AddTalkRoomMemberResponse& operator=(const AddTalkRoomMemberResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddTalkRoomMemberResponse& default_instance();

  static inline const AddTalkRoomMemberResponse* internal_default_instance() {
    return reinterpret_cast<const AddTalkRoomMemberResponse*>(
               &_AddTalkRoomMemberResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(AddTalkRoomMemberResponse* other);

  // implements Message ----------------------------------------------

  inline AddTalkRoomMemberResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  AddTalkRoomMemberResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddTalkRoomMemberResponse& from);
  void MergeFrom(const AddTalkRoomMemberResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddTalkRoomMemberResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.MemberResp MemberList = 3;
  int memberlist_size() const;
  void clear_memberlist();
  static const int kMemberListFieldNumber = 3;
  const ::micromsg::MemberResp& memberlist(int index) const;
  ::micromsg::MemberResp* mutable_memberlist(int index);
  ::micromsg::MemberResp* add_memberlist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::MemberResp >*
      mutable_memberlist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::MemberResp >&
      memberlist() const;

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required uint32 MemberCount = 2;
  bool has_membercount() const;
  void clear_membercount();
  static const int kMemberCountFieldNumber = 2;
  ::google::protobuf::uint32 membercount() const;
  void set_membercount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.AddTalkRoomMemberResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_membercount();
  void clear_has_membercount();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::MemberResp > memberlist_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::uint32 membercount_;
  friend struct protobuf_mmtalk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DelTalkRoomMemberRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.DelTalkRoomMemberRequest) */ {
 public:
  DelTalkRoomMemberRequest();
  virtual ~DelTalkRoomMemberRequest();

  DelTalkRoomMemberRequest(const DelTalkRoomMemberRequest& from);

  inline DelTalkRoomMemberRequest& operator=(const DelTalkRoomMemberRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DelTalkRoomMemberRequest& default_instance();

  static inline const DelTalkRoomMemberRequest* internal_default_instance() {
    return reinterpret_cast<const DelTalkRoomMemberRequest*>(
               &_DelTalkRoomMemberRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(DelTalkRoomMemberRequest* other);

  // implements Message ----------------------------------------------

  inline DelTalkRoomMemberRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DelTalkRoomMemberRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DelTalkRoomMemberRequest& from);
  void MergeFrom(const DelTalkRoomMemberRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DelTalkRoomMemberRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.DelMemberReq MemberList = 3;
  int memberlist_size() const;
  void clear_memberlist();
  static const int kMemberListFieldNumber = 3;
  const ::micromsg::DelMemberReq& memberlist(int index) const;
  ::micromsg::DelMemberReq* mutable_memberlist(int index);
  ::micromsg::DelMemberReq* add_memberlist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::DelMemberReq >*
      mutable_memberlist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::DelMemberReq >&
      memberlist() const;

  // optional string TalkRoomName = 4;
  bool has_talkroomname() const;
  void clear_talkroomname();
  static const int kTalkRoomNameFieldNumber = 4;
  const ::std::string& talkroomname() const;
  void set_talkroomname(const ::std::string& value);
  #if LANG_CXX11
  void set_talkroomname(::std::string&& value);
  #endif
  void set_talkroomname(const char* value);
  void set_talkroomname(const char* value, size_t size);
  ::std::string* mutable_talkroomname();
  ::std::string* release_talkroomname();
  void set_allocated_talkroomname(::std::string* talkroomname);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required uint32 MemberCount = 2;
  bool has_membercount() const;
  void clear_membercount();
  static const int kMemberCountFieldNumber = 2;
  ::google::protobuf::uint32 membercount() const;
  void set_membercount(::google::protobuf::uint32 value);

  // optional uint32 Scene = 5;
  bool has_scene() const;
  void clear_scene();
  static const int kSceneFieldNumber = 5;
  ::google::protobuf::uint32 scene() const;
  void set_scene(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.DelTalkRoomMemberRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_membercount();
  void clear_has_membercount();
  void set_has_talkroomname();
  void clear_has_talkroomname();
  void set_has_scene();
  void clear_has_scene();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::DelMemberReq > memberlist_;
  ::google::protobuf::internal::ArenaStringPtr talkroomname_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::uint32 membercount_;
  ::google::protobuf::uint32 scene_;
  friend struct protobuf_mmtalk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DelTalkRoomMemberResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.DelTalkRoomMemberResponse) */ {
 public:
  DelTalkRoomMemberResponse();
  virtual ~DelTalkRoomMemberResponse();

  DelTalkRoomMemberResponse(const DelTalkRoomMemberResponse& from);

  inline DelTalkRoomMemberResponse& operator=(const DelTalkRoomMemberResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DelTalkRoomMemberResponse& default_instance();

  static inline const DelTalkRoomMemberResponse* internal_default_instance() {
    return reinterpret_cast<const DelTalkRoomMemberResponse*>(
               &_DelTalkRoomMemberResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(DelTalkRoomMemberResponse* other);

  // implements Message ----------------------------------------------

  inline DelTalkRoomMemberResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DelTalkRoomMemberResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DelTalkRoomMemberResponse& from);
  void MergeFrom(const DelTalkRoomMemberResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DelTalkRoomMemberResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.DelMemberResp MemberList = 3;
  int memberlist_size() const;
  void clear_memberlist();
  static const int kMemberListFieldNumber = 3;
  const ::micromsg::DelMemberResp& memberlist(int index) const;
  ::micromsg::DelMemberResp* mutable_memberlist(int index);
  ::micromsg::DelMemberResp* add_memberlist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::DelMemberResp >*
      mutable_memberlist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::DelMemberResp >&
      memberlist() const;

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required uint32 MemberCount = 2;
  bool has_membercount() const;
  void clear_membercount();
  static const int kMemberCountFieldNumber = 2;
  ::google::protobuf::uint32 membercount() const;
  void set_membercount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.DelTalkRoomMemberResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_membercount();
  void clear_has_membercount();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::DelMemberResp > memberlist_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::uint32 membercount_;
  friend struct protobuf_mmtalk_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TalkRoomMember

// required int32 MemberID = 1;
inline bool TalkRoomMember::has_memberid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TalkRoomMember::set_has_memberid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TalkRoomMember::clear_has_memberid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TalkRoomMember::clear_memberid() {
  memberid_ = 0;
  clear_has_memberid();
}
inline ::google::protobuf::int32 TalkRoomMember::memberid() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkRoomMember.MemberID)
  return memberid_;
}
inline void TalkRoomMember::set_memberid(::google::protobuf::int32 value) {
  set_has_memberid();
  memberid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.TalkRoomMember.MemberID)
}

// optional string UserName = 2;
inline bool TalkRoomMember::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TalkRoomMember::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TalkRoomMember::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TalkRoomMember::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& TalkRoomMember::username() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkRoomMember.UserName)
  return username_.GetNoArena();
}
inline void TalkRoomMember::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.TalkRoomMember.UserName)
}
#if LANG_CXX11
inline void TalkRoomMember::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.TalkRoomMember.UserName)
}
#endif
inline void TalkRoomMember::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.TalkRoomMember.UserName)
}
inline void TalkRoomMember::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.TalkRoomMember.UserName)
}
inline ::std::string* TalkRoomMember::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.TalkRoomMember.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TalkRoomMember::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.TalkRoomMember.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TalkRoomMember::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.TalkRoomMember.UserName)
}

// -------------------------------------------------------------------

// TalkRelayAddr

// required uint32 Ip = 1;
inline bool TalkRelayAddr::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TalkRelayAddr::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TalkRelayAddr::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TalkRelayAddr::clear_ip() {
  ip_ = 0u;
  clear_has_ip();
}
inline ::google::protobuf::uint32 TalkRelayAddr::ip() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkRelayAddr.Ip)
  return ip_;
}
inline void TalkRelayAddr::set_ip(::google::protobuf::uint32 value) {
  set_has_ip();
  ip_ = value;
  // @@protoc_insertion_point(field_set:micromsg.TalkRelayAddr.Ip)
}

// required uint32 Port = 2;
inline bool TalkRelayAddr::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TalkRelayAddr::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TalkRelayAddr::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TalkRelayAddr::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 TalkRelayAddr::port() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkRelayAddr.Port)
  return port_;
}
inline void TalkRelayAddr::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:micromsg.TalkRelayAddr.Port)
}

// -------------------------------------------------------------------

// EnterTalkRoomReq

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool EnterTalkRoomReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EnterTalkRoomReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EnterTalkRoomReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EnterTalkRoomReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& EnterTalkRoomReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.EnterTalkRoomReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* EnterTalkRoomReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.EnterTalkRoomReq.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* EnterTalkRoomReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.EnterTalkRoomReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void EnterTalkRoomReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.EnterTalkRoomReq.BaseRequest)
}

// optional string ToUsername = 2;
inline bool EnterTalkRoomReq::has_tousername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnterTalkRoomReq::set_has_tousername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnterTalkRoomReq::clear_has_tousername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnterTalkRoomReq::clear_tousername() {
  tousername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tousername();
}
inline const ::std::string& EnterTalkRoomReq::tousername() const {
  // @@protoc_insertion_point(field_get:micromsg.EnterTalkRoomReq.ToUsername)
  return tousername_.GetNoArena();
}
inline void EnterTalkRoomReq::set_tousername(const ::std::string& value) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.EnterTalkRoomReq.ToUsername)
}
#if LANG_CXX11
inline void EnterTalkRoomReq::set_tousername(::std::string&& value) {
  set_has_tousername();
  tousername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.EnterTalkRoomReq.ToUsername)
}
#endif
inline void EnterTalkRoomReq::set_tousername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.EnterTalkRoomReq.ToUsername)
}
inline void EnterTalkRoomReq::set_tousername(const char* value, size_t size) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.EnterTalkRoomReq.ToUsername)
}
inline ::std::string* EnterTalkRoomReq::mutable_tousername() {
  set_has_tousername();
  // @@protoc_insertion_point(field_mutable:micromsg.EnterTalkRoomReq.ToUsername)
  return tousername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EnterTalkRoomReq::release_tousername() {
  // @@protoc_insertion_point(field_release:micromsg.EnterTalkRoomReq.ToUsername)
  clear_has_tousername();
  return tousername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnterTalkRoomReq::set_allocated_tousername(::std::string* tousername) {
  if (tousername != NULL) {
    set_has_tousername();
  } else {
    clear_has_tousername();
  }
  tousername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tousername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.EnterTalkRoomReq.ToUsername)
}

// optional uint32 Scene = 3;
inline bool EnterTalkRoomReq::has_scene() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EnterTalkRoomReq::set_has_scene() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EnterTalkRoomReq::clear_has_scene() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EnterTalkRoomReq::clear_scene() {
  scene_ = 0u;
  clear_has_scene();
}
inline ::google::protobuf::uint32 EnterTalkRoomReq::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.EnterTalkRoomReq.Scene)
  return scene_;
}
inline void EnterTalkRoomReq::set_scene(::google::protobuf::uint32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EnterTalkRoomReq.Scene)
}

// -------------------------------------------------------------------

// EnterTalkRoomResp

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool EnterTalkRoomResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnterTalkRoomResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnterTalkRoomResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnterTalkRoomResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& EnterTalkRoomResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.EnterTalkRoomResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* EnterTalkRoomResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.EnterTalkRoomResp.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* EnterTalkRoomResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.EnterTalkRoomResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void EnterTalkRoomResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.EnterTalkRoomResp.BaseResponse)
}

// required int32 RoomId = 2;
inline bool EnterTalkRoomResp::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EnterTalkRoomResp::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EnterTalkRoomResp::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EnterTalkRoomResp::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 EnterTalkRoomResp::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.EnterTalkRoomResp.RoomId)
  return roomid_;
}
inline void EnterTalkRoomResp::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EnterTalkRoomResp.RoomId)
}

// required int64 RoomKey = 3;
inline bool EnterTalkRoomResp::has_roomkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EnterTalkRoomResp::set_has_roomkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EnterTalkRoomResp::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EnterTalkRoomResp::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
inline ::google::protobuf::int64 EnterTalkRoomResp::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.EnterTalkRoomResp.RoomKey)
  return roomkey_;
}
inline void EnterTalkRoomResp::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EnterTalkRoomResp.RoomKey)
}

// required int32 MicSeq = 4;
inline bool EnterTalkRoomResp::has_micseq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EnterTalkRoomResp::set_has_micseq() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EnterTalkRoomResp::clear_has_micseq() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EnterTalkRoomResp::clear_micseq() {
  micseq_ = 0;
  clear_has_micseq();
}
inline ::google::protobuf::int32 EnterTalkRoomResp::micseq() const {
  // @@protoc_insertion_point(field_get:micromsg.EnterTalkRoomResp.MicSeq)
  return micseq_;
}
inline void EnterTalkRoomResp::set_micseq(::google::protobuf::int32 value) {
  set_has_micseq();
  micseq_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EnterTalkRoomResp.MicSeq)
}

// required int32 MemberNum = 5;
inline bool EnterTalkRoomResp::has_membernum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EnterTalkRoomResp::set_has_membernum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EnterTalkRoomResp::clear_has_membernum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EnterTalkRoomResp::clear_membernum() {
  membernum_ = 0;
  clear_has_membernum();
}
inline ::google::protobuf::int32 EnterTalkRoomResp::membernum() const {
  // @@protoc_insertion_point(field_get:micromsg.EnterTalkRoomResp.MemberNum)
  return membernum_;
}
inline void EnterTalkRoomResp::set_membernum(::google::protobuf::int32 value) {
  set_has_membernum();
  membernum_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EnterTalkRoomResp.MemberNum)
}

// repeated .micromsg.TalkRoomMember MemberList = 6;
inline int EnterTalkRoomResp::memberlist_size() const {
  return memberlist_.size();
}
inline void EnterTalkRoomResp::clear_memberlist() {
  memberlist_.Clear();
}
inline const ::micromsg::TalkRoomMember& EnterTalkRoomResp::memberlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.EnterTalkRoomResp.MemberList)
  return memberlist_.Get(index);
}
inline ::micromsg::TalkRoomMember* EnterTalkRoomResp::mutable_memberlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.EnterTalkRoomResp.MemberList)
  return memberlist_.Mutable(index);
}
inline ::micromsg::TalkRoomMember* EnterTalkRoomResp::add_memberlist() {
  // @@protoc_insertion_point(field_add:micromsg.EnterTalkRoomResp.MemberList)
  return memberlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::TalkRoomMember >*
EnterTalkRoomResp::mutable_memberlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.EnterTalkRoomResp.MemberList)
  return &memberlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::TalkRoomMember >&
EnterTalkRoomResp::memberlist() const {
  // @@protoc_insertion_point(field_list:micromsg.EnterTalkRoomResp.MemberList)
  return memberlist_;
}

// required int32 MyRoomMemberId = 7;
inline bool EnterTalkRoomResp::has_myroommemberid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EnterTalkRoomResp::set_has_myroommemberid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EnterTalkRoomResp::clear_has_myroommemberid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EnterTalkRoomResp::clear_myroommemberid() {
  myroommemberid_ = 0;
  clear_has_myroommemberid();
}
inline ::google::protobuf::int32 EnterTalkRoomResp::myroommemberid() const {
  // @@protoc_insertion_point(field_get:micromsg.EnterTalkRoomResp.MyRoomMemberId)
  return myroommemberid_;
}
inline void EnterTalkRoomResp::set_myroommemberid(::google::protobuf::int32 value) {
  set_has_myroommemberid();
  myroommemberid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EnterTalkRoomResp.MyRoomMemberId)
}

// optional int32 AddrCount = 8;
inline bool EnterTalkRoomResp::has_addrcount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EnterTalkRoomResp::set_has_addrcount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EnterTalkRoomResp::clear_has_addrcount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EnterTalkRoomResp::clear_addrcount() {
  addrcount_ = 0;
  clear_has_addrcount();
}
inline ::google::protobuf::int32 EnterTalkRoomResp::addrcount() const {
  // @@protoc_insertion_point(field_get:micromsg.EnterTalkRoomResp.AddrCount)
  return addrcount_;
}
inline void EnterTalkRoomResp::set_addrcount(::google::protobuf::int32 value) {
  set_has_addrcount();
  addrcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.EnterTalkRoomResp.AddrCount)
}

// repeated .micromsg.TalkRelayAddr AddrList = 9;
inline int EnterTalkRoomResp::addrlist_size() const {
  return addrlist_.size();
}
inline void EnterTalkRoomResp::clear_addrlist() {
  addrlist_.Clear();
}
inline const ::micromsg::TalkRelayAddr& EnterTalkRoomResp::addrlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.EnterTalkRoomResp.AddrList)
  return addrlist_.Get(index);
}
inline ::micromsg::TalkRelayAddr* EnterTalkRoomResp::mutable_addrlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.EnterTalkRoomResp.AddrList)
  return addrlist_.Mutable(index);
}
inline ::micromsg::TalkRelayAddr* EnterTalkRoomResp::add_addrlist() {
  // @@protoc_insertion_point(field_add:micromsg.EnterTalkRoomResp.AddrList)
  return addrlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::TalkRelayAddr >*
EnterTalkRoomResp::mutable_addrlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.EnterTalkRoomResp.AddrList)
  return &addrlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::TalkRelayAddr >&
EnterTalkRoomResp::addrlist() const {
  // @@protoc_insertion_point(field_list:micromsg.EnterTalkRoomResp.AddrList)
  return addrlist_;
}

// -------------------------------------------------------------------

// ExitTalkRoomReq

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool ExitTalkRoomReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExitTalkRoomReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExitTalkRoomReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExitTalkRoomReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& ExitTalkRoomReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.ExitTalkRoomReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* ExitTalkRoomReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ExitTalkRoomReq.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* ExitTalkRoomReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.ExitTalkRoomReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void ExitTalkRoomReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ExitTalkRoomReq.BaseRequest)
}

// required int32 RoomId = 2;
inline bool ExitTalkRoomReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ExitTalkRoomReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ExitTalkRoomReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ExitTalkRoomReq::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 ExitTalkRoomReq::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.ExitTalkRoomReq.RoomId)
  return roomid_;
}
inline void ExitTalkRoomReq::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ExitTalkRoomReq.RoomId)
}

// required int64 RoomKey = 3;
inline bool ExitTalkRoomReq::has_roomkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExitTalkRoomReq::set_has_roomkey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExitTalkRoomReq::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExitTalkRoomReq::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
inline ::google::protobuf::int64 ExitTalkRoomReq::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.ExitTalkRoomReq.RoomKey)
  return roomkey_;
}
inline void ExitTalkRoomReq::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ExitTalkRoomReq.RoomKey)
}

// optional string ToUsername = 4;
inline bool ExitTalkRoomReq::has_tousername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExitTalkRoomReq::set_has_tousername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExitTalkRoomReq::clear_has_tousername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExitTalkRoomReq::clear_tousername() {
  tousername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tousername();
}
inline const ::std::string& ExitTalkRoomReq::tousername() const {
  // @@protoc_insertion_point(field_get:micromsg.ExitTalkRoomReq.ToUsername)
  return tousername_.GetNoArena();
}
inline void ExitTalkRoomReq::set_tousername(const ::std::string& value) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ExitTalkRoomReq.ToUsername)
}
#if LANG_CXX11
inline void ExitTalkRoomReq::set_tousername(::std::string&& value) {
  set_has_tousername();
  tousername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ExitTalkRoomReq.ToUsername)
}
#endif
inline void ExitTalkRoomReq::set_tousername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ExitTalkRoomReq.ToUsername)
}
inline void ExitTalkRoomReq::set_tousername(const char* value, size_t size) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ExitTalkRoomReq.ToUsername)
}
inline ::std::string* ExitTalkRoomReq::mutable_tousername() {
  set_has_tousername();
  // @@protoc_insertion_point(field_mutable:micromsg.ExitTalkRoomReq.ToUsername)
  return tousername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExitTalkRoomReq::release_tousername() {
  // @@protoc_insertion_point(field_release:micromsg.ExitTalkRoomReq.ToUsername)
  clear_has_tousername();
  return tousername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExitTalkRoomReq::set_allocated_tousername(::std::string* tousername) {
  if (tousername != NULL) {
    set_has_tousername();
  } else {
    clear_has_tousername();
  }
  tousername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tousername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ExitTalkRoomReq.ToUsername)
}

// optional uint32 Scene = 5;
inline bool ExitTalkRoomReq::has_scene() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ExitTalkRoomReq::set_has_scene() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ExitTalkRoomReq::clear_has_scene() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ExitTalkRoomReq::clear_scene() {
  scene_ = 0u;
  clear_has_scene();
}
inline ::google::protobuf::uint32 ExitTalkRoomReq::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.ExitTalkRoomReq.Scene)
  return scene_;
}
inline void ExitTalkRoomReq::set_scene(::google::protobuf::uint32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ExitTalkRoomReq.Scene)
}

// -------------------------------------------------------------------

// ExitTalkRoomResp

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool ExitTalkRoomResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExitTalkRoomResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExitTalkRoomResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExitTalkRoomResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& ExitTalkRoomResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.ExitTalkRoomResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* ExitTalkRoomResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ExitTalkRoomResp.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* ExitTalkRoomResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.ExitTalkRoomResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void ExitTalkRoomResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ExitTalkRoomResp.BaseResponse)
}

// -------------------------------------------------------------------

// TalkMicActionReq

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool TalkMicActionReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TalkMicActionReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TalkMicActionReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TalkMicActionReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& TalkMicActionReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkMicActionReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* TalkMicActionReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.TalkMicActionReq.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* TalkMicActionReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.TalkMicActionReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void TalkMicActionReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.TalkMicActionReq.BaseRequest)
}

// required int32 RoomId = 2;
inline bool TalkMicActionReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TalkMicActionReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TalkMicActionReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TalkMicActionReq::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 TalkMicActionReq::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkMicActionReq.RoomId)
  return roomid_;
}
inline void TalkMicActionReq::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.TalkMicActionReq.RoomId)
}

// required int64 RoomKey = 3;
inline bool TalkMicActionReq::has_roomkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TalkMicActionReq::set_has_roomkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TalkMicActionReq::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TalkMicActionReq::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
inline ::google::protobuf::int64 TalkMicActionReq::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkMicActionReq.RoomKey)
  return roomkey_;
}
inline void TalkMicActionReq::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.TalkMicActionReq.RoomKey)
}

// required uint32 ActionType = 4;
inline bool TalkMicActionReq::has_actiontype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TalkMicActionReq::set_has_actiontype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TalkMicActionReq::clear_has_actiontype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TalkMicActionReq::clear_actiontype() {
  actiontype_ = 0u;
  clear_has_actiontype();
}
inline ::google::protobuf::uint32 TalkMicActionReq::actiontype() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkMicActionReq.ActionType)
  return actiontype_;
}
inline void TalkMicActionReq::set_actiontype(::google::protobuf::uint32 value) {
  set_has_actiontype();
  actiontype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.TalkMicActionReq.ActionType)
}

// optional uint32 UpdateTime = 5;
inline bool TalkMicActionReq::has_updatetime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TalkMicActionReq::set_has_updatetime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TalkMicActionReq::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TalkMicActionReq::clear_updatetime() {
  updatetime_ = 0u;
  clear_has_updatetime();
}
inline ::google::protobuf::uint32 TalkMicActionReq::updatetime() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkMicActionReq.UpdateTime)
  return updatetime_;
}
inline void TalkMicActionReq::set_updatetime(::google::protobuf::uint32 value) {
  set_has_updatetime();
  updatetime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.TalkMicActionReq.UpdateTime)
}

// optional uint32 Scene = 6;
inline bool TalkMicActionReq::has_scene() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TalkMicActionReq::set_has_scene() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TalkMicActionReq::clear_has_scene() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TalkMicActionReq::clear_scene() {
  scene_ = 0u;
  clear_has_scene();
}
inline ::google::protobuf::uint32 TalkMicActionReq::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkMicActionReq.Scene)
  return scene_;
}
inline void TalkMicActionReq::set_scene(::google::protobuf::uint32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.TalkMicActionReq.Scene)
}

// -------------------------------------------------------------------

// TalkMicActionResp

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool TalkMicActionResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TalkMicActionResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TalkMicActionResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TalkMicActionResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& TalkMicActionResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkMicActionResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* TalkMicActionResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.TalkMicActionResp.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* TalkMicActionResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.TalkMicActionResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void TalkMicActionResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.TalkMicActionResp.BaseResponse)
}

// required int32 MicSeq = 2;
inline bool TalkMicActionResp::has_micseq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TalkMicActionResp::set_has_micseq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TalkMicActionResp::clear_has_micseq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TalkMicActionResp::clear_micseq() {
  micseq_ = 0;
  clear_has_micseq();
}
inline ::google::protobuf::int32 TalkMicActionResp::micseq() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkMicActionResp.MicSeq)
  return micseq_;
}
inline void TalkMicActionResp::set_micseq(::google::protobuf::int32 value) {
  set_has_micseq();
  micseq_ = value;
  // @@protoc_insertion_point(field_set:micromsg.TalkMicActionResp.MicSeq)
}

// optional uint32 ChannelId = 3;
inline bool TalkMicActionResp::has_channelid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TalkMicActionResp::set_has_channelid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TalkMicActionResp::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TalkMicActionResp::clear_channelid() {
  channelid_ = 0u;
  clear_has_channelid();
}
inline ::google::protobuf::uint32 TalkMicActionResp::channelid() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkMicActionResp.ChannelId)
  return channelid_;
}
inline void TalkMicActionResp::set_channelid(::google::protobuf::uint32 value) {
  set_has_channelid();
  channelid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.TalkMicActionResp.ChannelId)
}

// -------------------------------------------------------------------

// TalkNoopReq

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool TalkNoopReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TalkNoopReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TalkNoopReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TalkNoopReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& TalkNoopReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkNoopReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* TalkNoopReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.TalkNoopReq.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* TalkNoopReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.TalkNoopReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void TalkNoopReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.TalkNoopReq.BaseRequest)
}

// required int32 RoomId = 2;
inline bool TalkNoopReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TalkNoopReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TalkNoopReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TalkNoopReq::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 TalkNoopReq::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkNoopReq.RoomId)
  return roomid_;
}
inline void TalkNoopReq::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.TalkNoopReq.RoomId)
}

// required int64 RoomKey = 3;
inline bool TalkNoopReq::has_roomkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TalkNoopReq::set_has_roomkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TalkNoopReq::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TalkNoopReq::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
inline ::google::protobuf::int64 TalkNoopReq::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkNoopReq.RoomKey)
  return roomkey_;
}
inline void TalkNoopReq::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.TalkNoopReq.RoomKey)
}

// optional uint32 UpdateTime = 4;
inline bool TalkNoopReq::has_updatetime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TalkNoopReq::set_has_updatetime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TalkNoopReq::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TalkNoopReq::clear_updatetime() {
  updatetime_ = 0u;
  clear_has_updatetime();
}
inline ::google::protobuf::uint32 TalkNoopReq::updatetime() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkNoopReq.UpdateTime)
  return updatetime_;
}
inline void TalkNoopReq::set_updatetime(::google::protobuf::uint32 value) {
  set_has_updatetime();
  updatetime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.TalkNoopReq.UpdateTime)
}

// optional uint32 Scene = 5;
inline bool TalkNoopReq::has_scene() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TalkNoopReq::set_has_scene() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TalkNoopReq::clear_has_scene() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TalkNoopReq::clear_scene() {
  scene_ = 0u;
  clear_has_scene();
}
inline ::google::protobuf::uint32 TalkNoopReq::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkNoopReq.Scene)
  return scene_;
}
inline void TalkNoopReq::set_scene(::google::protobuf::uint32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.TalkNoopReq.Scene)
}

// -------------------------------------------------------------------

// TalkNoopResp

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool TalkNoopResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TalkNoopResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TalkNoopResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TalkNoopResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& TalkNoopResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkNoopResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* TalkNoopResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.TalkNoopResp.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* TalkNoopResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.TalkNoopResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void TalkNoopResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.TalkNoopResp.BaseResponse)
}

// -------------------------------------------------------------------

// GetTalkRoomMemberReq

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool GetTalkRoomMemberReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetTalkRoomMemberReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetTalkRoomMemberReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetTalkRoomMemberReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& GetTalkRoomMemberReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetTalkRoomMemberReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* GetTalkRoomMemberReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetTalkRoomMemberReq.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* GetTalkRoomMemberReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetTalkRoomMemberReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void GetTalkRoomMemberReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetTalkRoomMemberReq.BaseRequest)
}

// required int32 RoomId = 2;
inline bool GetTalkRoomMemberReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetTalkRoomMemberReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetTalkRoomMemberReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetTalkRoomMemberReq::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 GetTalkRoomMemberReq::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.GetTalkRoomMemberReq.RoomId)
  return roomid_;
}
inline void GetTalkRoomMemberReq::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetTalkRoomMemberReq.RoomId)
}

// required int64 RoomKey = 3;
inline bool GetTalkRoomMemberReq::has_roomkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetTalkRoomMemberReq::set_has_roomkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetTalkRoomMemberReq::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetTalkRoomMemberReq::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
inline ::google::protobuf::int64 GetTalkRoomMemberReq::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.GetTalkRoomMemberReq.RoomKey)
  return roomkey_;
}
inline void GetTalkRoomMemberReq::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetTalkRoomMemberReq.RoomKey)
}

// optional uint32 Scene = 4;
inline bool GetTalkRoomMemberReq::has_scene() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetTalkRoomMemberReq::set_has_scene() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetTalkRoomMemberReq::clear_has_scene() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetTalkRoomMemberReq::clear_scene() {
  scene_ = 0u;
  clear_has_scene();
}
inline ::google::protobuf::uint32 GetTalkRoomMemberReq::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.GetTalkRoomMemberReq.Scene)
  return scene_;
}
inline void GetTalkRoomMemberReq::set_scene(::google::protobuf::uint32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetTalkRoomMemberReq.Scene)
}

// -------------------------------------------------------------------

// GetTalkRoomMemberResp

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool GetTalkRoomMemberResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetTalkRoomMemberResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetTalkRoomMemberResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetTalkRoomMemberResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& GetTalkRoomMemberResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetTalkRoomMemberResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* GetTalkRoomMemberResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetTalkRoomMemberResp.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* GetTalkRoomMemberResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetTalkRoomMemberResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void GetTalkRoomMemberResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetTalkRoomMemberResp.BaseResponse)
}

// required int32 MicSeq = 2;
inline bool GetTalkRoomMemberResp::has_micseq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetTalkRoomMemberResp::set_has_micseq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetTalkRoomMemberResp::clear_has_micseq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetTalkRoomMemberResp::clear_micseq() {
  micseq_ = 0;
  clear_has_micseq();
}
inline ::google::protobuf::int32 GetTalkRoomMemberResp::micseq() const {
  // @@protoc_insertion_point(field_get:micromsg.GetTalkRoomMemberResp.MicSeq)
  return micseq_;
}
inline void GetTalkRoomMemberResp::set_micseq(::google::protobuf::int32 value) {
  set_has_micseq();
  micseq_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetTalkRoomMemberResp.MicSeq)
}

// required int32 MemberNum = 3;
inline bool GetTalkRoomMemberResp::has_membernum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetTalkRoomMemberResp::set_has_membernum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetTalkRoomMemberResp::clear_has_membernum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetTalkRoomMemberResp::clear_membernum() {
  membernum_ = 0;
  clear_has_membernum();
}
inline ::google::protobuf::int32 GetTalkRoomMemberResp::membernum() const {
  // @@protoc_insertion_point(field_get:micromsg.GetTalkRoomMemberResp.MemberNum)
  return membernum_;
}
inline void GetTalkRoomMemberResp::set_membernum(::google::protobuf::int32 value) {
  set_has_membernum();
  membernum_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetTalkRoomMemberResp.MemberNum)
}

// repeated .micromsg.TalkRoomMember MemberList = 4;
inline int GetTalkRoomMemberResp::memberlist_size() const {
  return memberlist_.size();
}
inline void GetTalkRoomMemberResp::clear_memberlist() {
  memberlist_.Clear();
}
inline const ::micromsg::TalkRoomMember& GetTalkRoomMemberResp::memberlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GetTalkRoomMemberResp.MemberList)
  return memberlist_.Get(index);
}
inline ::micromsg::TalkRoomMember* GetTalkRoomMemberResp::mutable_memberlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GetTalkRoomMemberResp.MemberList)
  return memberlist_.Mutable(index);
}
inline ::micromsg::TalkRoomMember* GetTalkRoomMemberResp::add_memberlist() {
  // @@protoc_insertion_point(field_add:micromsg.GetTalkRoomMemberResp.MemberList)
  return memberlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::TalkRoomMember >*
GetTalkRoomMemberResp::mutable_memberlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GetTalkRoomMemberResp.MemberList)
  return &memberlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::TalkRoomMember >&
GetTalkRoomMemberResp::memberlist() const {
  // @@protoc_insertion_point(field_list:micromsg.GetTalkRoomMemberResp.MemberList)
  return memberlist_;
}

// -------------------------------------------------------------------

// TalkInviteReq

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool TalkInviteReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TalkInviteReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TalkInviteReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TalkInviteReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& TalkInviteReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkInviteReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* TalkInviteReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.TalkInviteReq.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* TalkInviteReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.TalkInviteReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void TalkInviteReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.TalkInviteReq.BaseRequest)
}

// required int32 RoomId = 2;
inline bool TalkInviteReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TalkInviteReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TalkInviteReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TalkInviteReq::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 TalkInviteReq::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkInviteReq.RoomId)
  return roomid_;
}
inline void TalkInviteReq::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.TalkInviteReq.RoomId)
}

// required int64 RoomKey = 3;
inline bool TalkInviteReq::has_roomkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TalkInviteReq::set_has_roomkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TalkInviteReq::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TalkInviteReq::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
inline ::google::protobuf::int64 TalkInviteReq::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkInviteReq.RoomKey)
  return roomkey_;
}
inline void TalkInviteReq::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.TalkInviteReq.RoomKey)
}

// optional uint32 Scene = 4;
inline bool TalkInviteReq::has_scene() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TalkInviteReq::set_has_scene() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TalkInviteReq::clear_has_scene() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TalkInviteReq::clear_scene() {
  scene_ = 0u;
  clear_has_scene();
}
inline ::google::protobuf::uint32 TalkInviteReq::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkInviteReq.Scene)
  return scene_;
}
inline void TalkInviteReq::set_scene(::google::protobuf::uint32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.TalkInviteReq.Scene)
}

// -------------------------------------------------------------------

// TalkInviteResp

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool TalkInviteResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TalkInviteResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TalkInviteResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TalkInviteResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& TalkInviteResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkInviteResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* TalkInviteResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.TalkInviteResp.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* TalkInviteResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.TalkInviteResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void TalkInviteResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.TalkInviteResp.BaseResponse)
}

// -------------------------------------------------------------------

// TalkStatReportData

// required int32 LogID = 1;
inline bool TalkStatReportData::has_logid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TalkStatReportData::set_has_logid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TalkStatReportData::clear_has_logid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TalkStatReportData::clear_logid() {
  logid_ = 0;
  clear_has_logid();
}
inline ::google::protobuf::int32 TalkStatReportData::logid() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkStatReportData.LogID)
  return logid_;
}
inline void TalkStatReportData::set_logid(::google::protobuf::int32 value) {
  set_has_logid();
  logid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.TalkStatReportData.LogID)
}

// required .micromsg.SKBuiltinString_t StatReport = 2;
inline bool TalkStatReportData::has_statreport() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TalkStatReportData::set_has_statreport() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TalkStatReportData::clear_has_statreport() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TalkStatReportData::clear_statreport() {
  if (statreport_ != NULL) statreport_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_statreport();
}
inline const ::micromsg::SKBuiltinString_t& TalkStatReportData::statreport() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkStatReportData.StatReport)
  return statreport_ != NULL ? *statreport_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* TalkStatReportData::mutable_statreport() {
  set_has_statreport();
  if (statreport_ == NULL) {
    statreport_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.TalkStatReportData.StatReport)
  return statreport_;
}
inline ::micromsg::SKBuiltinString_t* TalkStatReportData::release_statreport() {
  // @@protoc_insertion_point(field_release:micromsg.TalkStatReportData.StatReport)
  clear_has_statreport();
  ::micromsg::SKBuiltinString_t* temp = statreport_;
  statreport_ = NULL;
  return temp;
}
inline void TalkStatReportData::set_allocated_statreport(::micromsg::SKBuiltinString_t* statreport) {
  delete statreport_;
  statreport_ = statreport;
  if (statreport) {
    set_has_statreport();
  } else {
    clear_has_statreport();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.TalkStatReportData.StatReport)
}

// -------------------------------------------------------------------

// TalkStatReportReq

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool TalkStatReportReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TalkStatReportReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TalkStatReportReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TalkStatReportReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& TalkStatReportReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkStatReportReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* TalkStatReportReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.TalkStatReportReq.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* TalkStatReportReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.TalkStatReportReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void TalkStatReportReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.TalkStatReportReq.BaseRequest)
}

// required int32 DataNum = 2;
inline bool TalkStatReportReq::has_datanum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TalkStatReportReq::set_has_datanum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TalkStatReportReq::clear_has_datanum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TalkStatReportReq::clear_datanum() {
  datanum_ = 0;
  clear_has_datanum();
}
inline ::google::protobuf::int32 TalkStatReportReq::datanum() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkStatReportReq.DataNum)
  return datanum_;
}
inline void TalkStatReportReq::set_datanum(::google::protobuf::int32 value) {
  set_has_datanum();
  datanum_ = value;
  // @@protoc_insertion_point(field_set:micromsg.TalkStatReportReq.DataNum)
}

// repeated .micromsg.TalkStatReportData ReportData = 3;
inline int TalkStatReportReq::reportdata_size() const {
  return reportdata_.size();
}
inline void TalkStatReportReq::clear_reportdata() {
  reportdata_.Clear();
}
inline const ::micromsg::TalkStatReportData& TalkStatReportReq::reportdata(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.TalkStatReportReq.ReportData)
  return reportdata_.Get(index);
}
inline ::micromsg::TalkStatReportData* TalkStatReportReq::mutable_reportdata(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.TalkStatReportReq.ReportData)
  return reportdata_.Mutable(index);
}
inline ::micromsg::TalkStatReportData* TalkStatReportReq::add_reportdata() {
  // @@protoc_insertion_point(field_add:micromsg.TalkStatReportReq.ReportData)
  return reportdata_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::TalkStatReportData >*
TalkStatReportReq::mutable_reportdata() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.TalkStatReportReq.ReportData)
  return &reportdata_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::TalkStatReportData >&
TalkStatReportReq::reportdata() const {
  // @@protoc_insertion_point(field_list:micromsg.TalkStatReportReq.ReportData)
  return reportdata_;
}

// optional uint32 Scene = 4;
inline bool TalkStatReportReq::has_scene() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TalkStatReportReq::set_has_scene() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TalkStatReportReq::clear_has_scene() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TalkStatReportReq::clear_scene() {
  scene_ = 0u;
  clear_has_scene();
}
inline ::google::protobuf::uint32 TalkStatReportReq::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkStatReportReq.Scene)
  return scene_;
}
inline void TalkStatReportReq::set_scene(::google::protobuf::uint32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.TalkStatReportReq.Scene)
}

// -------------------------------------------------------------------

// TalkStatReportResp

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool TalkStatReportResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TalkStatReportResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TalkStatReportResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TalkStatReportResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& TalkStatReportResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.TalkStatReportResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* TalkStatReportResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.TalkStatReportResp.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* TalkStatReportResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.TalkStatReportResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void TalkStatReportResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.TalkStatReportResp.BaseResponse)
}

// -------------------------------------------------------------------

// CreateTalkRoomRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool CreateTalkRoomRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateTalkRoomRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateTalkRoomRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateTalkRoomRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& CreateTalkRoomRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateTalkRoomRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* CreateTalkRoomRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CreateTalkRoomRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* CreateTalkRoomRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.CreateTalkRoomRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void CreateTalkRoomRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CreateTalkRoomRequest.BaseRequest)
}

// required .micromsg.SKBuiltinString_t Topic = 2;
inline bool CreateTalkRoomRequest::has_topic() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateTalkRoomRequest::set_has_topic() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateTalkRoomRequest::clear_has_topic() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateTalkRoomRequest::clear_topic() {
  if (topic_ != NULL) topic_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_topic();
}
inline const ::micromsg::SKBuiltinString_t& CreateTalkRoomRequest::topic() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateTalkRoomRequest.Topic)
  return topic_ != NULL ? *topic_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* CreateTalkRoomRequest::mutable_topic() {
  set_has_topic();
  if (topic_ == NULL) {
    topic_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CreateTalkRoomRequest.Topic)
  return topic_;
}
inline ::micromsg::SKBuiltinString_t* CreateTalkRoomRequest::release_topic() {
  // @@protoc_insertion_point(field_release:micromsg.CreateTalkRoomRequest.Topic)
  clear_has_topic();
  ::micromsg::SKBuiltinString_t* temp = topic_;
  topic_ = NULL;
  return temp;
}
inline void CreateTalkRoomRequest::set_allocated_topic(::micromsg::SKBuiltinString_t* topic) {
  delete topic_;
  topic_ = topic;
  if (topic) {
    set_has_topic();
  } else {
    clear_has_topic();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CreateTalkRoomRequest.Topic)
}

// required uint32 MemberCount = 3;
inline bool CreateTalkRoomRequest::has_membercount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreateTalkRoomRequest::set_has_membercount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreateTalkRoomRequest::clear_has_membercount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreateTalkRoomRequest::clear_membercount() {
  membercount_ = 0u;
  clear_has_membercount();
}
inline ::google::protobuf::uint32 CreateTalkRoomRequest::membercount() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateTalkRoomRequest.MemberCount)
  return membercount_;
}
inline void CreateTalkRoomRequest::set_membercount(::google::protobuf::uint32 value) {
  set_has_membercount();
  membercount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CreateTalkRoomRequest.MemberCount)
}

// repeated .micromsg.MemberReq MemberList = 4;
inline int CreateTalkRoomRequest::memberlist_size() const {
  return memberlist_.size();
}
inline void CreateTalkRoomRequest::clear_memberlist() {
  memberlist_.Clear();
}
inline const ::micromsg::MemberReq& CreateTalkRoomRequest::memberlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.CreateTalkRoomRequest.MemberList)
  return memberlist_.Get(index);
}
inline ::micromsg::MemberReq* CreateTalkRoomRequest::mutable_memberlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.CreateTalkRoomRequest.MemberList)
  return memberlist_.Mutable(index);
}
inline ::micromsg::MemberReq* CreateTalkRoomRequest::add_memberlist() {
  // @@protoc_insertion_point(field_add:micromsg.CreateTalkRoomRequest.MemberList)
  return memberlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::MemberReq >*
CreateTalkRoomRequest::mutable_memberlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.CreateTalkRoomRequest.MemberList)
  return &memberlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::MemberReq >&
CreateTalkRoomRequest::memberlist() const {
  // @@protoc_insertion_point(field_list:micromsg.CreateTalkRoomRequest.MemberList)
  return memberlist_;
}

// optional uint32 Scene = 5;
inline bool CreateTalkRoomRequest::has_scene() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CreateTalkRoomRequest::set_has_scene() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CreateTalkRoomRequest::clear_has_scene() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CreateTalkRoomRequest::clear_scene() {
  scene_ = 0u;
  clear_has_scene();
}
inline ::google::protobuf::uint32 CreateTalkRoomRequest::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateTalkRoomRequest.Scene)
  return scene_;
}
inline void CreateTalkRoomRequest::set_scene(::google::protobuf::uint32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CreateTalkRoomRequest.Scene)
}

// -------------------------------------------------------------------

// CreateTalkRoomResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool CreateTalkRoomResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreateTalkRoomResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreateTalkRoomResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreateTalkRoomResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& CreateTalkRoomResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateTalkRoomResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* CreateTalkRoomResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CreateTalkRoomResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* CreateTalkRoomResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.CreateTalkRoomResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void CreateTalkRoomResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CreateTalkRoomResponse.BaseResponse)
}

// required .micromsg.SKBuiltinString_t Topic = 2;
inline bool CreateTalkRoomResponse::has_topic() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CreateTalkRoomResponse::set_has_topic() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CreateTalkRoomResponse::clear_has_topic() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CreateTalkRoomResponse::clear_topic() {
  if (topic_ != NULL) topic_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_topic();
}
inline const ::micromsg::SKBuiltinString_t& CreateTalkRoomResponse::topic() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateTalkRoomResponse.Topic)
  return topic_ != NULL ? *topic_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* CreateTalkRoomResponse::mutable_topic() {
  set_has_topic();
  if (topic_ == NULL) {
    topic_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CreateTalkRoomResponse.Topic)
  return topic_;
}
inline ::micromsg::SKBuiltinString_t* CreateTalkRoomResponse::release_topic() {
  // @@protoc_insertion_point(field_release:micromsg.CreateTalkRoomResponse.Topic)
  clear_has_topic();
  ::micromsg::SKBuiltinString_t* temp = topic_;
  topic_ = NULL;
  return temp;
}
inline void CreateTalkRoomResponse::set_allocated_topic(::micromsg::SKBuiltinString_t* topic) {
  delete topic_;
  topic_ = topic;
  if (topic) {
    set_has_topic();
  } else {
    clear_has_topic();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CreateTalkRoomResponse.Topic)
}

// required .micromsg.SKBuiltinString_t PYInitial = 3;
inline bool CreateTalkRoomResponse::has_pyinitial() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CreateTalkRoomResponse::set_has_pyinitial() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CreateTalkRoomResponse::clear_has_pyinitial() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CreateTalkRoomResponse::clear_pyinitial() {
  if (pyinitial_ != NULL) pyinitial_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_pyinitial();
}
inline const ::micromsg::SKBuiltinString_t& CreateTalkRoomResponse::pyinitial() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateTalkRoomResponse.PYInitial)
  return pyinitial_ != NULL ? *pyinitial_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* CreateTalkRoomResponse::mutable_pyinitial() {
  set_has_pyinitial();
  if (pyinitial_ == NULL) {
    pyinitial_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CreateTalkRoomResponse.PYInitial)
  return pyinitial_;
}
inline ::micromsg::SKBuiltinString_t* CreateTalkRoomResponse::release_pyinitial() {
  // @@protoc_insertion_point(field_release:micromsg.CreateTalkRoomResponse.PYInitial)
  clear_has_pyinitial();
  ::micromsg::SKBuiltinString_t* temp = pyinitial_;
  pyinitial_ = NULL;
  return temp;
}
inline void CreateTalkRoomResponse::set_allocated_pyinitial(::micromsg::SKBuiltinString_t* pyinitial) {
  delete pyinitial_;
  pyinitial_ = pyinitial;
  if (pyinitial) {
    set_has_pyinitial();
  } else {
    clear_has_pyinitial();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CreateTalkRoomResponse.PYInitial)
}

// required .micromsg.SKBuiltinString_t QuanPin = 4;
inline bool CreateTalkRoomResponse::has_quanpin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CreateTalkRoomResponse::set_has_quanpin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CreateTalkRoomResponse::clear_has_quanpin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CreateTalkRoomResponse::clear_quanpin() {
  if (quanpin_ != NULL) quanpin_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_quanpin();
}
inline const ::micromsg::SKBuiltinString_t& CreateTalkRoomResponse::quanpin() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateTalkRoomResponse.QuanPin)
  return quanpin_ != NULL ? *quanpin_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* CreateTalkRoomResponse::mutable_quanpin() {
  set_has_quanpin();
  if (quanpin_ == NULL) {
    quanpin_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CreateTalkRoomResponse.QuanPin)
  return quanpin_;
}
inline ::micromsg::SKBuiltinString_t* CreateTalkRoomResponse::release_quanpin() {
  // @@protoc_insertion_point(field_release:micromsg.CreateTalkRoomResponse.QuanPin)
  clear_has_quanpin();
  ::micromsg::SKBuiltinString_t* temp = quanpin_;
  quanpin_ = NULL;
  return temp;
}
inline void CreateTalkRoomResponse::set_allocated_quanpin(::micromsg::SKBuiltinString_t* quanpin) {
  delete quanpin_;
  quanpin_ = quanpin;
  if (quanpin) {
    set_has_quanpin();
  } else {
    clear_has_quanpin();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CreateTalkRoomResponse.QuanPin)
}

// required uint32 MemberCount = 5;
inline bool CreateTalkRoomResponse::has_membercount() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CreateTalkRoomResponse::set_has_membercount() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CreateTalkRoomResponse::clear_has_membercount() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CreateTalkRoomResponse::clear_membercount() {
  membercount_ = 0u;
  clear_has_membercount();
}
inline ::google::protobuf::uint32 CreateTalkRoomResponse::membercount() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateTalkRoomResponse.MemberCount)
  return membercount_;
}
inline void CreateTalkRoomResponse::set_membercount(::google::protobuf::uint32 value) {
  set_has_membercount();
  membercount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CreateTalkRoomResponse.MemberCount)
}

// repeated .micromsg.MemberResp MemberList = 6;
inline int CreateTalkRoomResponse::memberlist_size() const {
  return memberlist_.size();
}
inline void CreateTalkRoomResponse::clear_memberlist() {
  memberlist_.Clear();
}
inline const ::micromsg::MemberResp& CreateTalkRoomResponse::memberlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.CreateTalkRoomResponse.MemberList)
  return memberlist_.Get(index);
}
inline ::micromsg::MemberResp* CreateTalkRoomResponse::mutable_memberlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.CreateTalkRoomResponse.MemberList)
  return memberlist_.Mutable(index);
}
inline ::micromsg::MemberResp* CreateTalkRoomResponse::add_memberlist() {
  // @@protoc_insertion_point(field_add:micromsg.CreateTalkRoomResponse.MemberList)
  return memberlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::MemberResp >*
CreateTalkRoomResponse::mutable_memberlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.CreateTalkRoomResponse.MemberList)
  return &memberlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::MemberResp >&
CreateTalkRoomResponse::memberlist() const {
  // @@protoc_insertion_point(field_list:micromsg.CreateTalkRoomResponse.MemberList)
  return memberlist_;
}

// required .micromsg.SKBuiltinString_t TalkRoomName = 7;
inline bool CreateTalkRoomResponse::has_talkroomname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CreateTalkRoomResponse::set_has_talkroomname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CreateTalkRoomResponse::clear_has_talkroomname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CreateTalkRoomResponse::clear_talkroomname() {
  if (talkroomname_ != NULL) talkroomname_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_talkroomname();
}
inline const ::micromsg::SKBuiltinString_t& CreateTalkRoomResponse::talkroomname() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateTalkRoomResponse.TalkRoomName)
  return talkroomname_ != NULL ? *talkroomname_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* CreateTalkRoomResponse::mutable_talkroomname() {
  set_has_talkroomname();
  if (talkroomname_ == NULL) {
    talkroomname_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CreateTalkRoomResponse.TalkRoomName)
  return talkroomname_;
}
inline ::micromsg::SKBuiltinString_t* CreateTalkRoomResponse::release_talkroomname() {
  // @@protoc_insertion_point(field_release:micromsg.CreateTalkRoomResponse.TalkRoomName)
  clear_has_talkroomname();
  ::micromsg::SKBuiltinString_t* temp = talkroomname_;
  talkroomname_ = NULL;
  return temp;
}
inline void CreateTalkRoomResponse::set_allocated_talkroomname(::micromsg::SKBuiltinString_t* talkroomname) {
  delete talkroomname_;
  talkroomname_ = talkroomname;
  if (talkroomname) {
    set_has_talkroomname();
  } else {
    clear_has_talkroomname();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CreateTalkRoomResponse.TalkRoomName)
}

// required .micromsg.SKBuiltinBuffer_t ImgBuf = 8;
inline bool CreateTalkRoomResponse::has_imgbuf() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CreateTalkRoomResponse::set_has_imgbuf() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CreateTalkRoomResponse::clear_has_imgbuf() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CreateTalkRoomResponse::clear_imgbuf() {
  if (imgbuf_ != NULL) imgbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_imgbuf();
}
inline const ::micromsg::SKBuiltinBuffer_t& CreateTalkRoomResponse::imgbuf() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateTalkRoomResponse.ImgBuf)
  return imgbuf_ != NULL ? *imgbuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinBuffer_t* CreateTalkRoomResponse::mutable_imgbuf() {
  set_has_imgbuf();
  if (imgbuf_ == NULL) {
    imgbuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CreateTalkRoomResponse.ImgBuf)
  return imgbuf_;
}
inline ::micromsg::SKBuiltinBuffer_t* CreateTalkRoomResponse::release_imgbuf() {
  // @@protoc_insertion_point(field_release:micromsg.CreateTalkRoomResponse.ImgBuf)
  clear_has_imgbuf();
  ::micromsg::SKBuiltinBuffer_t* temp = imgbuf_;
  imgbuf_ = NULL;
  return temp;
}
inline void CreateTalkRoomResponse::set_allocated_imgbuf(::micromsg::SKBuiltinBuffer_t* imgbuf) {
  delete imgbuf_;
  imgbuf_ = imgbuf;
  if (imgbuf) {
    set_has_imgbuf();
  } else {
    clear_has_imgbuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CreateTalkRoomResponse.ImgBuf)
}

// optional string BigHeadImgUrl = 9;
inline bool CreateTalkRoomResponse::has_bigheadimgurl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateTalkRoomResponse::set_has_bigheadimgurl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateTalkRoomResponse::clear_has_bigheadimgurl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateTalkRoomResponse::clear_bigheadimgurl() {
  bigheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bigheadimgurl();
}
inline const ::std::string& CreateTalkRoomResponse::bigheadimgurl() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateTalkRoomResponse.BigHeadImgUrl)
  return bigheadimgurl_.GetNoArena();
}
inline void CreateTalkRoomResponse::set_bigheadimgurl(const ::std::string& value) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CreateTalkRoomResponse.BigHeadImgUrl)
}
#if LANG_CXX11
inline void CreateTalkRoomResponse::set_bigheadimgurl(::std::string&& value) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CreateTalkRoomResponse.BigHeadImgUrl)
}
#endif
inline void CreateTalkRoomResponse::set_bigheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CreateTalkRoomResponse.BigHeadImgUrl)
}
inline void CreateTalkRoomResponse::set_bigheadimgurl(const char* value, size_t size) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CreateTalkRoomResponse.BigHeadImgUrl)
}
inline ::std::string* CreateTalkRoomResponse::mutable_bigheadimgurl() {
  set_has_bigheadimgurl();
  // @@protoc_insertion_point(field_mutable:micromsg.CreateTalkRoomResponse.BigHeadImgUrl)
  return bigheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateTalkRoomResponse::release_bigheadimgurl() {
  // @@protoc_insertion_point(field_release:micromsg.CreateTalkRoomResponse.BigHeadImgUrl)
  clear_has_bigheadimgurl();
  return bigheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateTalkRoomResponse::set_allocated_bigheadimgurl(::std::string* bigheadimgurl) {
  if (bigheadimgurl != NULL) {
    set_has_bigheadimgurl();
  } else {
    clear_has_bigheadimgurl();
  }
  bigheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bigheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CreateTalkRoomResponse.BigHeadImgUrl)
}

// optional string SmallHeadImgUrl = 10;
inline bool CreateTalkRoomResponse::has_smallheadimgurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateTalkRoomResponse::set_has_smallheadimgurl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateTalkRoomResponse::clear_has_smallheadimgurl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateTalkRoomResponse::clear_smallheadimgurl() {
  smallheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_smallheadimgurl();
}
inline const ::std::string& CreateTalkRoomResponse::smallheadimgurl() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateTalkRoomResponse.SmallHeadImgUrl)
  return smallheadimgurl_.GetNoArena();
}
inline void CreateTalkRoomResponse::set_smallheadimgurl(const ::std::string& value) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CreateTalkRoomResponse.SmallHeadImgUrl)
}
#if LANG_CXX11
inline void CreateTalkRoomResponse::set_smallheadimgurl(::std::string&& value) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CreateTalkRoomResponse.SmallHeadImgUrl)
}
#endif
inline void CreateTalkRoomResponse::set_smallheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CreateTalkRoomResponse.SmallHeadImgUrl)
}
inline void CreateTalkRoomResponse::set_smallheadimgurl(const char* value, size_t size) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CreateTalkRoomResponse.SmallHeadImgUrl)
}
inline ::std::string* CreateTalkRoomResponse::mutable_smallheadimgurl() {
  set_has_smallheadimgurl();
  // @@protoc_insertion_point(field_mutable:micromsg.CreateTalkRoomResponse.SmallHeadImgUrl)
  return smallheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateTalkRoomResponse::release_smallheadimgurl() {
  // @@protoc_insertion_point(field_release:micromsg.CreateTalkRoomResponse.SmallHeadImgUrl)
  clear_has_smallheadimgurl();
  return smallheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateTalkRoomResponse::set_allocated_smallheadimgurl(::std::string* smallheadimgurl) {
  if (smallheadimgurl != NULL) {
    set_has_smallheadimgurl();
  } else {
    clear_has_smallheadimgurl();
  }
  smallheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smallheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CreateTalkRoomResponse.SmallHeadImgUrl)
}

// required int32 RoomId = 11;
inline bool CreateTalkRoomResponse::has_roomid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CreateTalkRoomResponse::set_has_roomid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CreateTalkRoomResponse::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CreateTalkRoomResponse::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 CreateTalkRoomResponse::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateTalkRoomResponse.RoomId)
  return roomid_;
}
inline void CreateTalkRoomResponse::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CreateTalkRoomResponse.RoomId)
}

// required int64 RoomKey = 12;
inline bool CreateTalkRoomResponse::has_roomkey() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CreateTalkRoomResponse::set_has_roomkey() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CreateTalkRoomResponse::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CreateTalkRoomResponse::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
inline ::google::protobuf::int64 CreateTalkRoomResponse::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateTalkRoomResponse.RoomKey)
  return roomkey_;
}
inline void CreateTalkRoomResponse::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CreateTalkRoomResponse.RoomKey)
}

// required int32 MicSeq = 13;
inline bool CreateTalkRoomResponse::has_micseq() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CreateTalkRoomResponse::set_has_micseq() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CreateTalkRoomResponse::clear_has_micseq() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CreateTalkRoomResponse::clear_micseq() {
  micseq_ = 0;
  clear_has_micseq();
}
inline ::google::protobuf::int32 CreateTalkRoomResponse::micseq() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateTalkRoomResponse.MicSeq)
  return micseq_;
}
inline void CreateTalkRoomResponse::set_micseq(::google::protobuf::int32 value) {
  set_has_micseq();
  micseq_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CreateTalkRoomResponse.MicSeq)
}

// required int32 MyRoomMemberId = 14;
inline bool CreateTalkRoomResponse::has_myroommemberid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CreateTalkRoomResponse::set_has_myroommemberid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CreateTalkRoomResponse::clear_has_myroommemberid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CreateTalkRoomResponse::clear_myroommemberid() {
  myroommemberid_ = 0;
  clear_has_myroommemberid();
}
inline ::google::protobuf::int32 CreateTalkRoomResponse::myroommemberid() const {
  // @@protoc_insertion_point(field_get:micromsg.CreateTalkRoomResponse.MyRoomMemberId)
  return myroommemberid_;
}
inline void CreateTalkRoomResponse::set_myroommemberid(::google::protobuf::int32 value) {
  set_has_myroommemberid();
  myroommemberid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CreateTalkRoomResponse.MyRoomMemberId)
}

// -------------------------------------------------------------------

// AddTalkRoomMemberRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool AddTalkRoomMemberRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddTalkRoomMemberRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddTalkRoomMemberRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddTalkRoomMemberRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& AddTalkRoomMemberRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.AddTalkRoomMemberRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* AddTalkRoomMemberRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AddTalkRoomMemberRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* AddTalkRoomMemberRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.AddTalkRoomMemberRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void AddTalkRoomMemberRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AddTalkRoomMemberRequest.BaseRequest)
}

// required uint32 MemberCount = 2;
inline bool AddTalkRoomMemberRequest::has_membercount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddTalkRoomMemberRequest::set_has_membercount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddTalkRoomMemberRequest::clear_has_membercount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AddTalkRoomMemberRequest::clear_membercount() {
  membercount_ = 0u;
  clear_has_membercount();
}
inline ::google::protobuf::uint32 AddTalkRoomMemberRequest::membercount() const {
  // @@protoc_insertion_point(field_get:micromsg.AddTalkRoomMemberRequest.MemberCount)
  return membercount_;
}
inline void AddTalkRoomMemberRequest::set_membercount(::google::protobuf::uint32 value) {
  set_has_membercount();
  membercount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AddTalkRoomMemberRequest.MemberCount)
}

// repeated .micromsg.MemberReq MemberList = 3;
inline int AddTalkRoomMemberRequest::memberlist_size() const {
  return memberlist_.size();
}
inline void AddTalkRoomMemberRequest::clear_memberlist() {
  memberlist_.Clear();
}
inline const ::micromsg::MemberReq& AddTalkRoomMemberRequest::memberlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.AddTalkRoomMemberRequest.MemberList)
  return memberlist_.Get(index);
}
inline ::micromsg::MemberReq* AddTalkRoomMemberRequest::mutable_memberlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.AddTalkRoomMemberRequest.MemberList)
  return memberlist_.Mutable(index);
}
inline ::micromsg::MemberReq* AddTalkRoomMemberRequest::add_memberlist() {
  // @@protoc_insertion_point(field_add:micromsg.AddTalkRoomMemberRequest.MemberList)
  return memberlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::MemberReq >*
AddTalkRoomMemberRequest::mutable_memberlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.AddTalkRoomMemberRequest.MemberList)
  return &memberlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::MemberReq >&
AddTalkRoomMemberRequest::memberlist() const {
  // @@protoc_insertion_point(field_list:micromsg.AddTalkRoomMemberRequest.MemberList)
  return memberlist_;
}

// required .micromsg.SKBuiltinString_t TalkRoomName = 4;
inline bool AddTalkRoomMemberRequest::has_talkroomname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddTalkRoomMemberRequest::set_has_talkroomname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddTalkRoomMemberRequest::clear_has_talkroomname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddTalkRoomMemberRequest::clear_talkroomname() {
  if (talkroomname_ != NULL) talkroomname_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_talkroomname();
}
inline const ::micromsg::SKBuiltinString_t& AddTalkRoomMemberRequest::talkroomname() const {
  // @@protoc_insertion_point(field_get:micromsg.AddTalkRoomMemberRequest.TalkRoomName)
  return talkroomname_ != NULL ? *talkroomname_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* AddTalkRoomMemberRequest::mutable_talkroomname() {
  set_has_talkroomname();
  if (talkroomname_ == NULL) {
    talkroomname_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AddTalkRoomMemberRequest.TalkRoomName)
  return talkroomname_;
}
inline ::micromsg::SKBuiltinString_t* AddTalkRoomMemberRequest::release_talkroomname() {
  // @@protoc_insertion_point(field_release:micromsg.AddTalkRoomMemberRequest.TalkRoomName)
  clear_has_talkroomname();
  ::micromsg::SKBuiltinString_t* temp = talkroomname_;
  talkroomname_ = NULL;
  return temp;
}
inline void AddTalkRoomMemberRequest::set_allocated_talkroomname(::micromsg::SKBuiltinString_t* talkroomname) {
  delete talkroomname_;
  talkroomname_ = talkroomname;
  if (talkroomname) {
    set_has_talkroomname();
  } else {
    clear_has_talkroomname();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AddTalkRoomMemberRequest.TalkRoomName)
}

// optional uint32 Scene = 5;
inline bool AddTalkRoomMemberRequest::has_scene() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AddTalkRoomMemberRequest::set_has_scene() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AddTalkRoomMemberRequest::clear_has_scene() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AddTalkRoomMemberRequest::clear_scene() {
  scene_ = 0u;
  clear_has_scene();
}
inline ::google::protobuf::uint32 AddTalkRoomMemberRequest::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.AddTalkRoomMemberRequest.Scene)
  return scene_;
}
inline void AddTalkRoomMemberRequest::set_scene(::google::protobuf::uint32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AddTalkRoomMemberRequest.Scene)
}

// -------------------------------------------------------------------

// AddTalkRoomMemberResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool AddTalkRoomMemberResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddTalkRoomMemberResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddTalkRoomMemberResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddTalkRoomMemberResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& AddTalkRoomMemberResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.AddTalkRoomMemberResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* AddTalkRoomMemberResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AddTalkRoomMemberResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* AddTalkRoomMemberResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.AddTalkRoomMemberResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void AddTalkRoomMemberResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AddTalkRoomMemberResponse.BaseResponse)
}

// required uint32 MemberCount = 2;
inline bool AddTalkRoomMemberResponse::has_membercount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddTalkRoomMemberResponse::set_has_membercount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddTalkRoomMemberResponse::clear_has_membercount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddTalkRoomMemberResponse::clear_membercount() {
  membercount_ = 0u;
  clear_has_membercount();
}
inline ::google::protobuf::uint32 AddTalkRoomMemberResponse::membercount() const {
  // @@protoc_insertion_point(field_get:micromsg.AddTalkRoomMemberResponse.MemberCount)
  return membercount_;
}
inline void AddTalkRoomMemberResponse::set_membercount(::google::protobuf::uint32 value) {
  set_has_membercount();
  membercount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AddTalkRoomMemberResponse.MemberCount)
}

// repeated .micromsg.MemberResp MemberList = 3;
inline int AddTalkRoomMemberResponse::memberlist_size() const {
  return memberlist_.size();
}
inline void AddTalkRoomMemberResponse::clear_memberlist() {
  memberlist_.Clear();
}
inline const ::micromsg::MemberResp& AddTalkRoomMemberResponse::memberlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.AddTalkRoomMemberResponse.MemberList)
  return memberlist_.Get(index);
}
inline ::micromsg::MemberResp* AddTalkRoomMemberResponse::mutable_memberlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.AddTalkRoomMemberResponse.MemberList)
  return memberlist_.Mutable(index);
}
inline ::micromsg::MemberResp* AddTalkRoomMemberResponse::add_memberlist() {
  // @@protoc_insertion_point(field_add:micromsg.AddTalkRoomMemberResponse.MemberList)
  return memberlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::MemberResp >*
AddTalkRoomMemberResponse::mutable_memberlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.AddTalkRoomMemberResponse.MemberList)
  return &memberlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::MemberResp >&
AddTalkRoomMemberResponse::memberlist() const {
  // @@protoc_insertion_point(field_list:micromsg.AddTalkRoomMemberResponse.MemberList)
  return memberlist_;
}

// -------------------------------------------------------------------

// DelTalkRoomMemberRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool DelTalkRoomMemberRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DelTalkRoomMemberRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DelTalkRoomMemberRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DelTalkRoomMemberRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& DelTalkRoomMemberRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.DelTalkRoomMemberRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* DelTalkRoomMemberRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DelTalkRoomMemberRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* DelTalkRoomMemberRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.DelTalkRoomMemberRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void DelTalkRoomMemberRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DelTalkRoomMemberRequest.BaseRequest)
}

// required uint32 MemberCount = 2;
inline bool DelTalkRoomMemberRequest::has_membercount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DelTalkRoomMemberRequest::set_has_membercount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DelTalkRoomMemberRequest::clear_has_membercount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DelTalkRoomMemberRequest::clear_membercount() {
  membercount_ = 0u;
  clear_has_membercount();
}
inline ::google::protobuf::uint32 DelTalkRoomMemberRequest::membercount() const {
  // @@protoc_insertion_point(field_get:micromsg.DelTalkRoomMemberRequest.MemberCount)
  return membercount_;
}
inline void DelTalkRoomMemberRequest::set_membercount(::google::protobuf::uint32 value) {
  set_has_membercount();
  membercount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DelTalkRoomMemberRequest.MemberCount)
}

// repeated .micromsg.DelMemberReq MemberList = 3;
inline int DelTalkRoomMemberRequest::memberlist_size() const {
  return memberlist_.size();
}
inline void DelTalkRoomMemberRequest::clear_memberlist() {
  memberlist_.Clear();
}
inline const ::micromsg::DelMemberReq& DelTalkRoomMemberRequest::memberlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.DelTalkRoomMemberRequest.MemberList)
  return memberlist_.Get(index);
}
inline ::micromsg::DelMemberReq* DelTalkRoomMemberRequest::mutable_memberlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.DelTalkRoomMemberRequest.MemberList)
  return memberlist_.Mutable(index);
}
inline ::micromsg::DelMemberReq* DelTalkRoomMemberRequest::add_memberlist() {
  // @@protoc_insertion_point(field_add:micromsg.DelTalkRoomMemberRequest.MemberList)
  return memberlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::DelMemberReq >*
DelTalkRoomMemberRequest::mutable_memberlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.DelTalkRoomMemberRequest.MemberList)
  return &memberlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::DelMemberReq >&
DelTalkRoomMemberRequest::memberlist() const {
  // @@protoc_insertion_point(field_list:micromsg.DelTalkRoomMemberRequest.MemberList)
  return memberlist_;
}

// optional string TalkRoomName = 4;
inline bool DelTalkRoomMemberRequest::has_talkroomname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DelTalkRoomMemberRequest::set_has_talkroomname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DelTalkRoomMemberRequest::clear_has_talkroomname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DelTalkRoomMemberRequest::clear_talkroomname() {
  talkroomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_talkroomname();
}
inline const ::std::string& DelTalkRoomMemberRequest::talkroomname() const {
  // @@protoc_insertion_point(field_get:micromsg.DelTalkRoomMemberRequest.TalkRoomName)
  return talkroomname_.GetNoArena();
}
inline void DelTalkRoomMemberRequest::set_talkroomname(const ::std::string& value) {
  set_has_talkroomname();
  talkroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.DelTalkRoomMemberRequest.TalkRoomName)
}
#if LANG_CXX11
inline void DelTalkRoomMemberRequest::set_talkroomname(::std::string&& value) {
  set_has_talkroomname();
  talkroomname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.DelTalkRoomMemberRequest.TalkRoomName)
}
#endif
inline void DelTalkRoomMemberRequest::set_talkroomname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_talkroomname();
  talkroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.DelTalkRoomMemberRequest.TalkRoomName)
}
inline void DelTalkRoomMemberRequest::set_talkroomname(const char* value, size_t size) {
  set_has_talkroomname();
  talkroomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.DelTalkRoomMemberRequest.TalkRoomName)
}
inline ::std::string* DelTalkRoomMemberRequest::mutable_talkroomname() {
  set_has_talkroomname();
  // @@protoc_insertion_point(field_mutable:micromsg.DelTalkRoomMemberRequest.TalkRoomName)
  return talkroomname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DelTalkRoomMemberRequest::release_talkroomname() {
  // @@protoc_insertion_point(field_release:micromsg.DelTalkRoomMemberRequest.TalkRoomName)
  clear_has_talkroomname();
  return talkroomname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DelTalkRoomMemberRequest::set_allocated_talkroomname(::std::string* talkroomname) {
  if (talkroomname != NULL) {
    set_has_talkroomname();
  } else {
    clear_has_talkroomname();
  }
  talkroomname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), talkroomname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.DelTalkRoomMemberRequest.TalkRoomName)
}

// optional uint32 Scene = 5;
inline bool DelTalkRoomMemberRequest::has_scene() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DelTalkRoomMemberRequest::set_has_scene() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DelTalkRoomMemberRequest::clear_has_scene() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DelTalkRoomMemberRequest::clear_scene() {
  scene_ = 0u;
  clear_has_scene();
}
inline ::google::protobuf::uint32 DelTalkRoomMemberRequest::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.DelTalkRoomMemberRequest.Scene)
  return scene_;
}
inline void DelTalkRoomMemberRequest::set_scene(::google::protobuf::uint32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DelTalkRoomMemberRequest.Scene)
}

// -------------------------------------------------------------------

// DelTalkRoomMemberResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool DelTalkRoomMemberResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DelTalkRoomMemberResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DelTalkRoomMemberResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DelTalkRoomMemberResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& DelTalkRoomMemberResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.DelTalkRoomMemberResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* DelTalkRoomMemberResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DelTalkRoomMemberResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* DelTalkRoomMemberResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.DelTalkRoomMemberResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void DelTalkRoomMemberResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DelTalkRoomMemberResponse.BaseResponse)
}

// required uint32 MemberCount = 2;
inline bool DelTalkRoomMemberResponse::has_membercount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DelTalkRoomMemberResponse::set_has_membercount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DelTalkRoomMemberResponse::clear_has_membercount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DelTalkRoomMemberResponse::clear_membercount() {
  membercount_ = 0u;
  clear_has_membercount();
}
inline ::google::protobuf::uint32 DelTalkRoomMemberResponse::membercount() const {
  // @@protoc_insertion_point(field_get:micromsg.DelTalkRoomMemberResponse.MemberCount)
  return membercount_;
}
inline void DelTalkRoomMemberResponse::set_membercount(::google::protobuf::uint32 value) {
  set_has_membercount();
  membercount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DelTalkRoomMemberResponse.MemberCount)
}

// repeated .micromsg.DelMemberResp MemberList = 3;
inline int DelTalkRoomMemberResponse::memberlist_size() const {
  return memberlist_.size();
}
inline void DelTalkRoomMemberResponse::clear_memberlist() {
  memberlist_.Clear();
}
inline const ::micromsg::DelMemberResp& DelTalkRoomMemberResponse::memberlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.DelTalkRoomMemberResponse.MemberList)
  return memberlist_.Get(index);
}
inline ::micromsg::DelMemberResp* DelTalkRoomMemberResponse::mutable_memberlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.DelTalkRoomMemberResponse.MemberList)
  return memberlist_.Mutable(index);
}
inline ::micromsg::DelMemberResp* DelTalkRoomMemberResponse::add_memberlist() {
  // @@protoc_insertion_point(field_add:micromsg.DelTalkRoomMemberResponse.MemberList)
  return memberlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::DelMemberResp >*
DelTalkRoomMemberResponse::mutable_memberlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.DelTalkRoomMemberResponse.MemberList)
  return &memberlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::DelMemberResp >&
DelTalkRoomMemberResponse::memberlist() const {
  // @@protoc_insertion_point(field_list:micromsg.DelTalkRoomMemberResponse.MemberList)
  return memberlist_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace micromsg

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mmtalk_2eproto__INCLUDED
