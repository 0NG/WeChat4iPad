// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmtrack.proto

#ifndef PROTOBUF_mmtrack_2eproto__INCLUDED
#define PROTOBUF_mmtrack_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "mmbuiltintype.pb.h"
#include "mmbase.pb.h"
// @@protoc_insertion_point(includes)
namespace micromsg {
class AdditionalContactList;
class AdditionalContactListDefaultTypeInternal;
extern AdditionalContactListDefaultTypeInternal _AdditionalContactList_default_instance_;
class BaseRequest;
class BaseRequestDefaultTypeInternal;
extern BaseRequestDefaultTypeInternal _BaseRequest_default_instance_;
class BaseResponse;
class BaseResponseDefaultTypeInternal;
extern BaseResponseDefaultTypeInternal _BaseResponse_default_instance_;
class BindEmailRequest;
class BindEmailRequestDefaultTypeInternal;
extern BindEmailRequestDefaultTypeInternal _BindEmailRequest_default_instance_;
class BindEmailResponse;
class BindEmailResponseDefaultTypeInternal;
extern BindEmailResponseDefaultTypeInternal _BindEmailResponse_default_instance_;
class BuiltinIP;
class BuiltinIPDefaultTypeInternal;
extern BuiltinIPDefaultTypeInternal _BuiltinIP_default_instance_;
class BuiltinIPList;
class BuiltinIPListDefaultTypeInternal;
extern BuiltinIPListDefaultTypeInternal _BuiltinIPList_default_instance_;
class CDNDnsInfo;
class CDNDnsInfoDefaultTypeInternal;
extern CDNDnsInfoDefaultTypeInternal _CDNDnsInfo_default_instance_;
class ChatRoomMemberData;
class ChatRoomMemberDataDefaultTypeInternal;
extern ChatRoomMemberDataDefaultTypeInternal _ChatRoomMemberData_default_instance_;
class ChatRoomMemberInfo;
class ChatRoomMemberInfoDefaultTypeInternal;
extern ChatRoomMemberInfoDefaultTypeInternal _ChatRoomMemberInfo_default_instance_;
class CmdItem;
class CmdItemDefaultTypeInternal;
extern CmdItemDefaultTypeInternal _CmdItem_default_instance_;
class CmdList;
class CmdListDefaultTypeInternal;
extern CmdListDefaultTypeInternal _CmdList_default_instance_;
class CustomizedInfo;
class CustomizedInfoDefaultTypeInternal;
extern CustomizedInfoDefaultTypeInternal _CustomizedInfo_default_instance_;
class DelMemberReq;
class DelMemberReqDefaultTypeInternal;
extern DelMemberReqDefaultTypeInternal _DelMemberReq_default_instance_;
class DelMemberResp;
class DelMemberRespDefaultTypeInternal;
extern DelMemberRespDefaultTypeInternal _DelMemberResp_default_instance_;
class DisturbSetting;
class DisturbSettingDefaultTypeInternal;
extern DisturbSettingDefaultTypeInternal _DisturbSetting_default_instance_;
class DisturbTimeSpan;
class DisturbTimeSpanDefaultTypeInternal;
extern DisturbTimeSpanDefaultTypeInternal _DisturbTimeSpan_default_instance_;
class ExitTrackRoomRequest;
class ExitTrackRoomRequestDefaultTypeInternal;
extern ExitTrackRoomRequestDefaultTypeInternal _ExitTrackRoomRequest_default_instance_;
class ExitTrackRoomResponse;
class ExitTrackRoomResponseDefaultTypeInternal;
extern ExitTrackRoomResponseDefaultTypeInternal _ExitTrackRoomResponse_default_instance_;
class GetLocationRequest;
class GetLocationRequestDefaultTypeInternal;
extern GetLocationRequestDefaultTypeInternal _GetLocationRequest_default_instance_;
class GetLocationResponse;
class GetLocationResponseDefaultTypeInternal;
extern GetLocationResponseDefaultTypeInternal _GetLocationResponse_default_instance_;
class GmailInfo;
class GmailInfoDefaultTypeInternal;
extern GmailInfoDefaultTypeInternal _GmailInfo_default_instance_;
class GmailList;
class GmailListDefaultTypeInternal;
extern GmailListDefaultTypeInternal _GmailList_default_instance_;
class HardDevice;
class HardDeviceDefaultTypeInternal;
extern HardDeviceDefaultTypeInternal _HardDevice_default_instance_;
class Host;
class HostDefaultTypeInternal;
extern HostDefaultTypeInternal _Host_default_instance_;
class HostList;
class HostListDefaultTypeInternal;
extern HostListDefaultTypeInternal _HostList_default_instance_;
class JoinTrackRoomRequest;
class JoinTrackRoomRequestDefaultTypeInternal;
extern JoinTrackRoomRequestDefaultTypeInternal _JoinTrackRoomRequest_default_instance_;
class JoinTrackRoomResponse;
class JoinTrackRoomResponseDefaultTypeInternal;
extern JoinTrackRoomResponseDefaultTypeInternal _JoinTrackRoomResponse_default_instance_;
class LinkedinContactItem;
class LinkedinContactItemDefaultTypeInternal;
extern LinkedinContactItemDefaultTypeInternal _LinkedinContactItem_default_instance_;
class MemberReq;
class MemberReqDefaultTypeInternal;
extern MemberReqDefaultTypeInternal _MemberReq_default_instance_;
class MemberResp;
class MemberRespDefaultTypeInternal;
extern MemberRespDefaultTypeInternal _MemberResp_default_instance_;
class ModContact;
class ModContactDefaultTypeInternal;
extern ModContactDefaultTypeInternal _ModContact_default_instance_;
class ModUserInfo;
class ModUserInfoDefaultTypeInternal;
extern ModUserInfoDefaultTypeInternal _ModUserInfo_default_instance_;
class NetworkControl;
class NetworkControlDefaultTypeInternal;
extern NetworkControlDefaultTypeInternal _NetworkControl_default_instance_;
class PatternLockInfo;
class PatternLockInfoDefaultTypeInternal;
extern PatternLockInfoDefaultTypeInternal _PatternLockInfo_default_instance_;
class PluginKey;
class PluginKeyDefaultTypeInternal;
extern PluginKeyDefaultTypeInternal _PluginKey_default_instance_;
class PluginKeyList;
class PluginKeyListDefaultTypeInternal;
extern PluginKeyListDefaultTypeInternal _PluginKeyList_default_instance_;
class PositionInfo;
class PositionInfoDefaultTypeInternal;
extern PositionInfoDefaultTypeInternal _PositionInfo_default_instance_;
class PositionItem;
class PositionItemDefaultTypeInternal;
extern PositionItemDefaultTypeInternal _PositionItem_default_instance_;
class RefreshTrackRoomRequest;
class RefreshTrackRoomRequestDefaultTypeInternal;
extern RefreshTrackRoomRequestDefaultTypeInternal _RefreshTrackRoomRequest_default_instance_;
class RefreshTrackRoomResponse;
class RefreshTrackRoomResponseDefaultTypeInternal;
extern RefreshTrackRoomResponseDefaultTypeInternal _RefreshTrackRoomResponse_default_instance_;
class RoomInfo;
class RoomInfoDefaultTypeInternal;
extern RoomInfoDefaultTypeInternal _RoomInfo_default_instance_;
class SKBuiltinBuffer_t;
class SKBuiltinBuffer_tDefaultTypeInternal;
extern SKBuiltinBuffer_tDefaultTypeInternal _SKBuiltinBuffer_t_default_instance_;
class SKBuiltinChar_t;
class SKBuiltinChar_tDefaultTypeInternal;
extern SKBuiltinChar_tDefaultTypeInternal _SKBuiltinChar_t_default_instance_;
class SKBuiltinDouble64_t;
class SKBuiltinDouble64_tDefaultTypeInternal;
extern SKBuiltinDouble64_tDefaultTypeInternal _SKBuiltinDouble64_t_default_instance_;
class SKBuiltinFloat32_t;
class SKBuiltinFloat32_tDefaultTypeInternal;
extern SKBuiltinFloat32_tDefaultTypeInternal _SKBuiltinFloat32_t_default_instance_;
class SKBuiltinInt16_t;
class SKBuiltinInt16_tDefaultTypeInternal;
extern SKBuiltinInt16_tDefaultTypeInternal _SKBuiltinInt16_t_default_instance_;
class SKBuiltinInt32_t;
class SKBuiltinInt32_tDefaultTypeInternal;
extern SKBuiltinInt32_tDefaultTypeInternal _SKBuiltinInt32_t_default_instance_;
class SKBuiltinInt64_t;
class SKBuiltinInt64_tDefaultTypeInternal;
extern SKBuiltinInt64_tDefaultTypeInternal _SKBuiltinInt64_t_default_instance_;
class SKBuiltinInt8_t;
class SKBuiltinInt8_tDefaultTypeInternal;
extern SKBuiltinInt8_tDefaultTypeInternal _SKBuiltinInt8_t_default_instance_;
class SKBuiltinString_t;
class SKBuiltinString_tDefaultTypeInternal;
extern SKBuiltinString_tDefaultTypeInternal _SKBuiltinString_t_default_instance_;
class SKBuiltinUchar_t;
class SKBuiltinUchar_tDefaultTypeInternal;
extern SKBuiltinUchar_tDefaultTypeInternal _SKBuiltinUchar_t_default_instance_;
class SKBuiltinUint16_t;
class SKBuiltinUint16_tDefaultTypeInternal;
extern SKBuiltinUint16_tDefaultTypeInternal _SKBuiltinUint16_t_default_instance_;
class SKBuiltinUint32_t;
class SKBuiltinUint32_tDefaultTypeInternal;
extern SKBuiltinUint32_tDefaultTypeInternal _SKBuiltinUint32_t_default_instance_;
class SKBuiltinUint64_t;
class SKBuiltinUint64_tDefaultTypeInternal;
extern SKBuiltinUint64_tDefaultTypeInternal _SKBuiltinUint64_t_default_instance_;
class SKBuiltinUint8_t;
class SKBuiltinUint8_tDefaultTypeInternal;
extern SKBuiltinUint8_tDefaultTypeInternal _SKBuiltinUint8_t_default_instance_;
class SafeDevice;
class SafeDeviceDefaultTypeInternal;
extern SafeDeviceDefaultTypeInternal _SafeDevice_default_instance_;
class SafeDeviceList;
class SafeDeviceListDefaultTypeInternal;
extern SafeDeviceListDefaultTypeInternal _SafeDeviceList_default_instance_;
class ShakeSyncRequest;
class ShakeSyncRequestDefaultTypeInternal;
extern ShakeSyncRequestDefaultTypeInternal _ShakeSyncRequest_default_instance_;
class ShakeSyncResponse;
class ShakeSyncResponseDefaultTypeInternal;
extern ShakeSyncResponseDefaultTypeInternal _ShakeSyncResponse_default_instance_;
class ShowStyleKey;
class ShowStyleKeyDefaultTypeInternal;
extern ShowStyleKeyDefaultTypeInternal _ShowStyleKey_default_instance_;
class SnsUserInfo;
class SnsUserInfoDefaultTypeInternal;
extern SnsUserInfoDefaultTypeInternal _SnsUserInfo_default_instance_;
class StyleKeyVal;
class StyleKeyValDefaultTypeInternal;
extern StyleKeyValDefaultTypeInternal _StyleKeyVal_default_instance_;
class TrackPOIItem;
class TrackPOIItemDefaultTypeInternal;
extern TrackPOIItemDefaultTypeInternal _TrackPOIItem_default_instance_;
class UserInfoExt;
class UserInfoExtDefaultTypeInternal;
extern UserInfoExtDefaultTypeInternal _UserInfoExt_default_instance_;
class UserPositionItem;
class UserPositionItemDefaultTypeInternal;
extern UserPositionItemDefaultTypeInternal _UserPositionItem_default_instance_;
}  // namespace micromsg

namespace micromsg {

namespace protobuf_mmtrack_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_mmtrack_2eproto

// ===================================================================

class PositionItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.PositionItem) */ {
 public:
  PositionItem();
  virtual ~PositionItem();

  PositionItem(const PositionItem& from);

  inline PositionItem& operator=(const PositionItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PositionItem& default_instance();

  static inline const PositionItem* internal_default_instance() {
    return reinterpret_cast<const PositionItem*>(
               &_PositionItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PositionItem* other);

  // implements Message ----------------------------------------------

  inline PositionItem* New() const PROTOBUF_FINAL { return New(NULL); }

  PositionItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PositionItem& from);
  void MergeFrom(const PositionItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PositionItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double Latitude = 1;
  bool has_latitude() const;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 1;
  double latitude() const;
  void set_latitude(double value);

  // required double Longitude = 2;
  bool has_longitude() const;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 2;
  double longitude() const;
  void set_longitude(double value);

  // required double Heading = 3;
  bool has_heading() const;
  void clear_heading();
  static const int kHeadingFieldNumber = 3;
  double heading() const;
  void set_heading(double value);

  // @@protoc_insertion_point(class_scope:micromsg.PositionItem)
 private:
  void set_has_latitude();
  void clear_has_latitude();
  void set_has_longitude();
  void clear_has_longitude();
  void set_has_heading();
  void clear_has_heading();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double latitude_;
  double longitude_;
  double heading_;
  friend struct protobuf_mmtrack_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackPOIItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.TrackPOIItem) */ {
 public:
  TrackPOIItem();
  virtual ~TrackPOIItem();

  TrackPOIItem(const TrackPOIItem& from);

  inline TrackPOIItem& operator=(const TrackPOIItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackPOIItem& default_instance();

  static inline const TrackPOIItem* internal_default_instance() {
    return reinterpret_cast<const TrackPOIItem*>(
               &_TrackPOIItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(TrackPOIItem* other);

  // implements Message ----------------------------------------------

  inline TrackPOIItem* New() const PROTOBUF_FINAL { return New(NULL); }

  TrackPOIItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrackPOIItem& from);
  void MergeFrom(const TrackPOIItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrackPOIItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string Addr = 4;
  bool has_addr() const;
  void clear_addr();
  static const int kAddrFieldNumber = 4;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_addr(::std::string&& value);
  #endif
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);

  // required double Latitude = 1;
  bool has_latitude() const;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 1;
  double latitude() const;
  void set_latitude(double value);

  // required double Longitude = 2;
  bool has_longitude() const;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 2;
  double longitude() const;
  void set_longitude(double value);

  // @@protoc_insertion_point(class_scope:micromsg.TrackPOIItem)
 private:
  void set_has_latitude();
  void clear_has_latitude();
  void set_has_longitude();
  void clear_has_longitude();
  void set_has_name();
  void clear_has_name();
  void set_has_addr();
  void clear_has_addr();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  double latitude_;
  double longitude_;
  friend struct protobuf_mmtrack_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserPositionItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.UserPositionItem) */ {
 public:
  UserPositionItem();
  virtual ~UserPositionItem();

  UserPositionItem(const UserPositionItem& from);

  inline UserPositionItem& operator=(const UserPositionItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserPositionItem& default_instance();

  static inline const UserPositionItem* internal_default_instance() {
    return reinterpret_cast<const UserPositionItem*>(
               &_UserPositionItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(UserPositionItem* other);

  // implements Message ----------------------------------------------

  inline UserPositionItem* New() const PROTOBUF_FINAL { return New(NULL); }

  UserPositionItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserPositionItem& from);
  void MergeFrom(const UserPositionItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserPositionItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Username = 1;
  bool has_username() const;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // required .micromsg.PositionItem Position = 2;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  const ::micromsg::PositionItem& position() const;
  ::micromsg::PositionItem* mutable_position();
  ::micromsg::PositionItem* release_position();
  void set_allocated_position(::micromsg::PositionItem* position);

  // @@protoc_insertion_point(class_scope:micromsg.UserPositionItem)
 private:
  void set_has_username();
  void clear_has_username();
  void set_has_position();
  void clear_has_position();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::micromsg::PositionItem* position_;
  friend struct protobuf_mmtrack_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RefreshTrackRoomRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.RefreshTrackRoomRequest) */ {
 public:
  RefreshTrackRoomRequest();
  virtual ~RefreshTrackRoomRequest();

  RefreshTrackRoomRequest(const RefreshTrackRoomRequest& from);

  inline RefreshTrackRoomRequest& operator=(const RefreshTrackRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RefreshTrackRoomRequest& default_instance();

  static inline const RefreshTrackRoomRequest* internal_default_instance() {
    return reinterpret_cast<const RefreshTrackRoomRequest*>(
               &_RefreshTrackRoomRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(RefreshTrackRoomRequest* other);

  // implements Message ----------------------------------------------

  inline RefreshTrackRoomRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RefreshTrackRoomRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RefreshTrackRoomRequest& from);
  void MergeFrom(const RefreshTrackRoomRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RefreshTrackRoomRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string TrackRoomID = 2;
  bool has_trackroomid() const;
  void clear_trackroomid();
  static const int kTrackRoomIDFieldNumber = 2;
  const ::std::string& trackroomid() const;
  void set_trackroomid(const ::std::string& value);
  #if LANG_CXX11
  void set_trackroomid(::std::string&& value);
  #endif
  void set_trackroomid(const char* value);
  void set_trackroomid(const char* value, size_t size);
  ::std::string* mutable_trackroomid();
  ::std::string* release_trackroomid();
  void set_allocated_trackroomid(::std::string* trackroomid);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required .micromsg.UserPositionItem UserPosition = 4;
  bool has_userposition() const;
  void clear_userposition();
  static const int kUserPositionFieldNumber = 4;
  const ::micromsg::UserPositionItem& userposition() const;
  ::micromsg::UserPositionItem* mutable_userposition();
  ::micromsg::UserPositionItem* release_userposition();
  void set_allocated_userposition(::micromsg::UserPositionItem* userposition);

  // optional .micromsg.TrackPOIItem UserPoi = 6;
  bool has_userpoi() const;
  void clear_userpoi();
  static const int kUserPoiFieldNumber = 6;
  const ::micromsg::TrackPOIItem& userpoi() const;
  ::micromsg::TrackPOIItem* mutable_userpoi();
  ::micromsg::TrackPOIItem* release_userpoi();
  void set_allocated_userpoi(::micromsg::TrackPOIItem* userpoi);

  // required int32 Type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional uint32 TimeStamp = 5;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimeStampFieldNumber = 5;
  ::google::protobuf::uint32 timestamp() const;
  void set_timestamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.RefreshTrackRoomRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_trackroomid();
  void clear_has_trackroomid();
  void set_has_type();
  void clear_has_type();
  void set_has_userposition();
  void clear_has_userposition();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_userpoi();
  void clear_has_userpoi();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr trackroomid_;
  ::micromsg::BaseRequest* baserequest_;
  ::micromsg::UserPositionItem* userposition_;
  ::micromsg::TrackPOIItem* userpoi_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::uint32 timestamp_;
  friend struct protobuf_mmtrack_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RefreshTrackRoomResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.RefreshTrackRoomResponse) */ {
 public:
  RefreshTrackRoomResponse();
  virtual ~RefreshTrackRoomResponse();

  RefreshTrackRoomResponse(const RefreshTrackRoomResponse& from);

  inline RefreshTrackRoomResponse& operator=(const RefreshTrackRoomResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RefreshTrackRoomResponse& default_instance();

  static inline const RefreshTrackRoomResponse* internal_default_instance() {
    return reinterpret_cast<const RefreshTrackRoomResponse*>(
               &_RefreshTrackRoomResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(RefreshTrackRoomResponse* other);

  // implements Message ----------------------------------------------

  inline RefreshTrackRoomResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  RefreshTrackRoomResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RefreshTrackRoomResponse& from);
  void MergeFrom(const RefreshTrackRoomResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RefreshTrackRoomResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.UserPositionItem Positions = 3;
  int positions_size() const;
  void clear_positions();
  static const int kPositionsFieldNumber = 3;
  const ::micromsg::UserPositionItem& positions(int index) const;
  ::micromsg::UserPositionItem* mutable_positions(int index);
  ::micromsg::UserPositionItem* add_positions();
  ::google::protobuf::RepeatedPtrField< ::micromsg::UserPositionItem >*
      mutable_positions();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::UserPositionItem >&
      positions() const;

  // optional string RetMsg = 4;
  bool has_retmsg() const;
  void clear_retmsg();
  static const int kRetMsgFieldNumber = 4;
  const ::std::string& retmsg() const;
  void set_retmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_retmsg(::std::string&& value);
  #endif
  void set_retmsg(const char* value);
  void set_retmsg(const char* value, size_t size);
  ::std::string* mutable_retmsg();
  ::std::string* release_retmsg();
  void set_allocated_retmsg(::std::string* retmsg);

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // optional .micromsg.TrackPOIItem RoomPoi = 6;
  bool has_roompoi() const;
  void clear_roompoi();
  static const int kRoomPoiFieldNumber = 6;
  const ::micromsg::TrackPOIItem& roompoi() const;
  ::micromsg::TrackPOIItem* mutable_roompoi();
  ::micromsg::TrackPOIItem* release_roompoi();
  void set_allocated_roompoi(::micromsg::TrackPOIItem* roompoi);

  // required uint32 Count = 2;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // optional uint32 RefreshTime = 5;
  bool has_refreshtime() const;
  void clear_refreshtime();
  static const int kRefreshTimeFieldNumber = 5;
  ::google::protobuf::uint32 refreshtime() const;
  void set_refreshtime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.RefreshTrackRoomResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_count();
  void clear_has_count();
  void set_has_retmsg();
  void clear_has_retmsg();
  void set_has_refreshtime();
  void clear_has_refreshtime();
  void set_has_roompoi();
  void clear_has_roompoi();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::UserPositionItem > positions_;
  ::google::protobuf::internal::ArenaStringPtr retmsg_;
  ::micromsg::BaseResponse* baseresponse_;
  ::micromsg::TrackPOIItem* roompoi_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 refreshtime_;
  friend struct protobuf_mmtrack_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class JoinTrackRoomRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.JoinTrackRoomRequest) */ {
 public:
  JoinTrackRoomRequest();
  virtual ~JoinTrackRoomRequest();

  JoinTrackRoomRequest(const JoinTrackRoomRequest& from);

  inline JoinTrackRoomRequest& operator=(const JoinTrackRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JoinTrackRoomRequest& default_instance();

  static inline const JoinTrackRoomRequest* internal_default_instance() {
    return reinterpret_cast<const JoinTrackRoomRequest*>(
               &_JoinTrackRoomRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(JoinTrackRoomRequest* other);

  // implements Message ----------------------------------------------

  inline JoinTrackRoomRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  JoinTrackRoomRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const JoinTrackRoomRequest& from);
  void MergeFrom(const JoinTrackRoomRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(JoinTrackRoomRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Chatname = 2;
  bool has_chatname() const;
  void clear_chatname();
  static const int kChatnameFieldNumber = 2;
  const ::std::string& chatname() const;
  void set_chatname(const ::std::string& value);
  #if LANG_CXX11
  void set_chatname(::std::string&& value);
  #endif
  void set_chatname(const char* value);
  void set_chatname(const char* value, size_t size);
  ::std::string* mutable_chatname();
  ::std::string* release_chatname();
  void set_allocated_chatname(::std::string* chatname);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // optional uint32 Scene = 3;
  bool has_scene() const;
  void clear_scene();
  static const int kSceneFieldNumber = 3;
  ::google::protobuf::uint32 scene() const;
  void set_scene(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.JoinTrackRoomRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_chatname();
  void clear_has_chatname();
  void set_has_scene();
  void clear_has_scene();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr chatname_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::uint32 scene_;
  friend struct protobuf_mmtrack_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class JoinTrackRoomResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.JoinTrackRoomResponse) */ {
 public:
  JoinTrackRoomResponse();
  virtual ~JoinTrackRoomResponse();

  JoinTrackRoomResponse(const JoinTrackRoomResponse& from);

  inline JoinTrackRoomResponse& operator=(const JoinTrackRoomResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JoinTrackRoomResponse& default_instance();

  static inline const JoinTrackRoomResponse* internal_default_instance() {
    return reinterpret_cast<const JoinTrackRoomResponse*>(
               &_JoinTrackRoomResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(JoinTrackRoomResponse* other);

  // implements Message ----------------------------------------------

  inline JoinTrackRoomResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  JoinTrackRoomResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const JoinTrackRoomResponse& from);
  void MergeFrom(const JoinTrackRoomResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(JoinTrackRoomResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string TrackRoomID = 2;
  bool has_trackroomid() const;
  void clear_trackroomid();
  static const int kTrackRoomIDFieldNumber = 2;
  const ::std::string& trackroomid() const;
  void set_trackroomid(const ::std::string& value);
  #if LANG_CXX11
  void set_trackroomid(::std::string&& value);
  #endif
  void set_trackroomid(const char* value);
  void set_trackroomid(const char* value, size_t size);
  ::std::string* mutable_trackroomid();
  ::std::string* release_trackroomid();
  void set_allocated_trackroomid(::std::string* trackroomid);

  // optional string RetMsg = 3;
  bool has_retmsg() const;
  void clear_retmsg();
  static const int kRetMsgFieldNumber = 3;
  const ::std::string& retmsg() const;
  void set_retmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_retmsg(::std::string&& value);
  #endif
  void set_retmsg(const char* value);
  void set_retmsg(const char* value, size_t size);
  ::std::string* mutable_retmsg();
  ::std::string* release_retmsg();
  void set_allocated_retmsg(::std::string* retmsg);

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // @@protoc_insertion_point(class_scope:micromsg.JoinTrackRoomResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_trackroomid();
  void clear_has_trackroomid();
  void set_has_retmsg();
  void clear_has_retmsg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr trackroomid_;
  ::google::protobuf::internal::ArenaStringPtr retmsg_;
  ::micromsg::BaseResponse* baseresponse_;
  friend struct protobuf_mmtrack_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExitTrackRoomRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.ExitTrackRoomRequest) */ {
 public:
  ExitTrackRoomRequest();
  virtual ~ExitTrackRoomRequest();

  ExitTrackRoomRequest(const ExitTrackRoomRequest& from);

  inline ExitTrackRoomRequest& operator=(const ExitTrackRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExitTrackRoomRequest& default_instance();

  static inline const ExitTrackRoomRequest* internal_default_instance() {
    return reinterpret_cast<const ExitTrackRoomRequest*>(
               &_ExitTrackRoomRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(ExitTrackRoomRequest* other);

  // implements Message ----------------------------------------------

  inline ExitTrackRoomRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ExitTrackRoomRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExitTrackRoomRequest& from);
  void MergeFrom(const ExitTrackRoomRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExitTrackRoomRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string TrackRoomID = 2;
  bool has_trackroomid() const;
  void clear_trackroomid();
  static const int kTrackRoomIDFieldNumber = 2;
  const ::std::string& trackroomid() const;
  void set_trackroomid(const ::std::string& value);
  #if LANG_CXX11
  void set_trackroomid(::std::string&& value);
  #endif
  void set_trackroomid(const char* value);
  void set_trackroomid(const char* value, size_t size);
  ::std::string* mutable_trackroomid();
  ::std::string* release_trackroomid();
  void set_allocated_trackroomid(::std::string* trackroomid);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // optional uint32 Scene = 3;
  bool has_scene() const;
  void clear_scene();
  static const int kSceneFieldNumber = 3;
  ::google::protobuf::uint32 scene() const;
  void set_scene(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.ExitTrackRoomRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_trackroomid();
  void clear_has_trackroomid();
  void set_has_scene();
  void clear_has_scene();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr trackroomid_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::uint32 scene_;
  friend struct protobuf_mmtrack_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExitTrackRoomResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.ExitTrackRoomResponse) */ {
 public:
  ExitTrackRoomResponse();
  virtual ~ExitTrackRoomResponse();

  ExitTrackRoomResponse(const ExitTrackRoomResponse& from);

  inline ExitTrackRoomResponse& operator=(const ExitTrackRoomResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExitTrackRoomResponse& default_instance();

  static inline const ExitTrackRoomResponse* internal_default_instance() {
    return reinterpret_cast<const ExitTrackRoomResponse*>(
               &_ExitTrackRoomResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(ExitTrackRoomResponse* other);

  // implements Message ----------------------------------------------

  inline ExitTrackRoomResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ExitTrackRoomResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExitTrackRoomResponse& from);
  void MergeFrom(const ExitTrackRoomResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExitTrackRoomResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string RetMsg = 2;
  bool has_retmsg() const;
  void clear_retmsg();
  static const int kRetMsgFieldNumber = 2;
  const ::std::string& retmsg() const;
  void set_retmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_retmsg(::std::string&& value);
  #endif
  void set_retmsg(const char* value);
  void set_retmsg(const char* value, size_t size);
  ::std::string* mutable_retmsg();
  ::std::string* release_retmsg();
  void set_allocated_retmsg(::std::string* retmsg);

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // @@protoc_insertion_point(class_scope:micromsg.ExitTrackRoomResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_retmsg();
  void clear_has_retmsg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr retmsg_;
  ::micromsg::BaseResponse* baseresponse_;
  friend struct protobuf_mmtrack_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PositionItem

// required double Latitude = 1;
inline bool PositionItem::has_latitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PositionItem::set_has_latitude() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PositionItem::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PositionItem::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double PositionItem::latitude() const {
  // @@protoc_insertion_point(field_get:micromsg.PositionItem.Latitude)
  return latitude_;
}
inline void PositionItem::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PositionItem.Latitude)
}

// required double Longitude = 2;
inline bool PositionItem::has_longitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PositionItem::set_has_longitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PositionItem::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PositionItem::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double PositionItem::longitude() const {
  // @@protoc_insertion_point(field_get:micromsg.PositionItem.Longitude)
  return longitude_;
}
inline void PositionItem::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PositionItem.Longitude)
}

// required double Heading = 3;
inline bool PositionItem::has_heading() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PositionItem::set_has_heading() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PositionItem::clear_has_heading() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PositionItem::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
inline double PositionItem::heading() const {
  // @@protoc_insertion_point(field_get:micromsg.PositionItem.Heading)
  return heading_;
}
inline void PositionItem::set_heading(double value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PositionItem.Heading)
}

// -------------------------------------------------------------------

// TrackPOIItem

// required double Latitude = 1;
inline bool TrackPOIItem::has_latitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrackPOIItem::set_has_latitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrackPOIItem::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrackPOIItem::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double TrackPOIItem::latitude() const {
  // @@protoc_insertion_point(field_get:micromsg.TrackPOIItem.Latitude)
  return latitude_;
}
inline void TrackPOIItem::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:micromsg.TrackPOIItem.Latitude)
}

// required double Longitude = 2;
inline bool TrackPOIItem::has_longitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrackPOIItem::set_has_longitude() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrackPOIItem::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrackPOIItem::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double TrackPOIItem::longitude() const {
  // @@protoc_insertion_point(field_get:micromsg.TrackPOIItem.Longitude)
  return longitude_;
}
inline void TrackPOIItem::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:micromsg.TrackPOIItem.Longitude)
}

// optional string Name = 3;
inline bool TrackPOIItem::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrackPOIItem::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrackPOIItem::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrackPOIItem::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& TrackPOIItem::name() const {
  // @@protoc_insertion_point(field_get:micromsg.TrackPOIItem.Name)
  return name_.GetNoArena();
}
inline void TrackPOIItem::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.TrackPOIItem.Name)
}
#if LANG_CXX11
inline void TrackPOIItem::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.TrackPOIItem.Name)
}
#endif
inline void TrackPOIItem::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.TrackPOIItem.Name)
}
inline void TrackPOIItem::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.TrackPOIItem.Name)
}
inline ::std::string* TrackPOIItem::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:micromsg.TrackPOIItem.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrackPOIItem::release_name() {
  // @@protoc_insertion_point(field_release:micromsg.TrackPOIItem.Name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrackPOIItem::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:micromsg.TrackPOIItem.Name)
}

// optional string Addr = 4;
inline bool TrackPOIItem::has_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrackPOIItem::set_has_addr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrackPOIItem::clear_has_addr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrackPOIItem::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_addr();
}
inline const ::std::string& TrackPOIItem::addr() const {
  // @@protoc_insertion_point(field_get:micromsg.TrackPOIItem.Addr)
  return addr_.GetNoArena();
}
inline void TrackPOIItem::set_addr(const ::std::string& value) {
  set_has_addr();
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.TrackPOIItem.Addr)
}
#if LANG_CXX11
inline void TrackPOIItem::set_addr(::std::string&& value) {
  set_has_addr();
  addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.TrackPOIItem.Addr)
}
#endif
inline void TrackPOIItem::set_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_addr();
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.TrackPOIItem.Addr)
}
inline void TrackPOIItem::set_addr(const char* value, size_t size) {
  set_has_addr();
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.TrackPOIItem.Addr)
}
inline ::std::string* TrackPOIItem::mutable_addr() {
  set_has_addr();
  // @@protoc_insertion_point(field_mutable:micromsg.TrackPOIItem.Addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrackPOIItem::release_addr() {
  // @@protoc_insertion_point(field_release:micromsg.TrackPOIItem.Addr)
  clear_has_addr();
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrackPOIItem::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    set_has_addr();
  } else {
    clear_has_addr();
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:micromsg.TrackPOIItem.Addr)
}

// -------------------------------------------------------------------

// UserPositionItem

// optional string Username = 1;
inline bool UserPositionItem::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserPositionItem::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserPositionItem::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserPositionItem::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& UserPositionItem::username() const {
  // @@protoc_insertion_point(field_get:micromsg.UserPositionItem.Username)
  return username_.GetNoArena();
}
inline void UserPositionItem::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UserPositionItem.Username)
}
#if LANG_CXX11
inline void UserPositionItem::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UserPositionItem.Username)
}
#endif
inline void UserPositionItem::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UserPositionItem.Username)
}
inline void UserPositionItem::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UserPositionItem.Username)
}
inline ::std::string* UserPositionItem::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.UserPositionItem.Username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserPositionItem::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.UserPositionItem.Username)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserPositionItem::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserPositionItem.Username)
}

// required .micromsg.PositionItem Position = 2;
inline bool UserPositionItem::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserPositionItem::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserPositionItem::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserPositionItem::clear_position() {
  if (position_ != NULL) position_->::micromsg::PositionItem::Clear();
  clear_has_position();
}
inline const ::micromsg::PositionItem& UserPositionItem::position() const {
  // @@protoc_insertion_point(field_get:micromsg.UserPositionItem.Position)
  return position_ != NULL ? *position_
                         : *::micromsg::PositionItem::internal_default_instance();
}
inline ::micromsg::PositionItem* UserPositionItem::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::micromsg::PositionItem;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UserPositionItem.Position)
  return position_;
}
inline ::micromsg::PositionItem* UserPositionItem::release_position() {
  // @@protoc_insertion_point(field_release:micromsg.UserPositionItem.Position)
  clear_has_position();
  ::micromsg::PositionItem* temp = position_;
  position_ = NULL;
  return temp;
}
inline void UserPositionItem::set_allocated_position(::micromsg::PositionItem* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserPositionItem.Position)
}

// -------------------------------------------------------------------

// RefreshTrackRoomRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool RefreshTrackRoomRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RefreshTrackRoomRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RefreshTrackRoomRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RefreshTrackRoomRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& RefreshTrackRoomRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.RefreshTrackRoomRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* RefreshTrackRoomRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.RefreshTrackRoomRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* RefreshTrackRoomRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.RefreshTrackRoomRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void RefreshTrackRoomRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.RefreshTrackRoomRequest.BaseRequest)
}

// optional string TrackRoomID = 2;
inline bool RefreshTrackRoomRequest::has_trackroomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RefreshTrackRoomRequest::set_has_trackroomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RefreshTrackRoomRequest::clear_has_trackroomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RefreshTrackRoomRequest::clear_trackroomid() {
  trackroomid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trackroomid();
}
inline const ::std::string& RefreshTrackRoomRequest::trackroomid() const {
  // @@protoc_insertion_point(field_get:micromsg.RefreshTrackRoomRequest.TrackRoomID)
  return trackroomid_.GetNoArena();
}
inline void RefreshTrackRoomRequest::set_trackroomid(const ::std::string& value) {
  set_has_trackroomid();
  trackroomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.RefreshTrackRoomRequest.TrackRoomID)
}
#if LANG_CXX11
inline void RefreshTrackRoomRequest::set_trackroomid(::std::string&& value) {
  set_has_trackroomid();
  trackroomid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.RefreshTrackRoomRequest.TrackRoomID)
}
#endif
inline void RefreshTrackRoomRequest::set_trackroomid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trackroomid();
  trackroomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.RefreshTrackRoomRequest.TrackRoomID)
}
inline void RefreshTrackRoomRequest::set_trackroomid(const char* value, size_t size) {
  set_has_trackroomid();
  trackroomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.RefreshTrackRoomRequest.TrackRoomID)
}
inline ::std::string* RefreshTrackRoomRequest::mutable_trackroomid() {
  set_has_trackroomid();
  // @@protoc_insertion_point(field_mutable:micromsg.RefreshTrackRoomRequest.TrackRoomID)
  return trackroomid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RefreshTrackRoomRequest::release_trackroomid() {
  // @@protoc_insertion_point(field_release:micromsg.RefreshTrackRoomRequest.TrackRoomID)
  clear_has_trackroomid();
  return trackroomid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RefreshTrackRoomRequest::set_allocated_trackroomid(::std::string* trackroomid) {
  if (trackroomid != NULL) {
    set_has_trackroomid();
  } else {
    clear_has_trackroomid();
  }
  trackroomid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trackroomid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.RefreshTrackRoomRequest.TrackRoomID)
}

// required int32 Type = 3;
inline bool RefreshTrackRoomRequest::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RefreshTrackRoomRequest::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RefreshTrackRoomRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RefreshTrackRoomRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 RefreshTrackRoomRequest::type() const {
  // @@protoc_insertion_point(field_get:micromsg.RefreshTrackRoomRequest.Type)
  return type_;
}
inline void RefreshTrackRoomRequest::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.RefreshTrackRoomRequest.Type)
}

// required .micromsg.UserPositionItem UserPosition = 4;
inline bool RefreshTrackRoomRequest::has_userposition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RefreshTrackRoomRequest::set_has_userposition() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RefreshTrackRoomRequest::clear_has_userposition() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RefreshTrackRoomRequest::clear_userposition() {
  if (userposition_ != NULL) userposition_->::micromsg::UserPositionItem::Clear();
  clear_has_userposition();
}
inline const ::micromsg::UserPositionItem& RefreshTrackRoomRequest::userposition() const {
  // @@protoc_insertion_point(field_get:micromsg.RefreshTrackRoomRequest.UserPosition)
  return userposition_ != NULL ? *userposition_
                         : *::micromsg::UserPositionItem::internal_default_instance();
}
inline ::micromsg::UserPositionItem* RefreshTrackRoomRequest::mutable_userposition() {
  set_has_userposition();
  if (userposition_ == NULL) {
    userposition_ = new ::micromsg::UserPositionItem;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.RefreshTrackRoomRequest.UserPosition)
  return userposition_;
}
inline ::micromsg::UserPositionItem* RefreshTrackRoomRequest::release_userposition() {
  // @@protoc_insertion_point(field_release:micromsg.RefreshTrackRoomRequest.UserPosition)
  clear_has_userposition();
  ::micromsg::UserPositionItem* temp = userposition_;
  userposition_ = NULL;
  return temp;
}
inline void RefreshTrackRoomRequest::set_allocated_userposition(::micromsg::UserPositionItem* userposition) {
  delete userposition_;
  userposition_ = userposition;
  if (userposition) {
    set_has_userposition();
  } else {
    clear_has_userposition();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.RefreshTrackRoomRequest.UserPosition)
}

// optional uint32 TimeStamp = 5;
inline bool RefreshTrackRoomRequest::has_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RefreshTrackRoomRequest::set_has_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RefreshTrackRoomRequest::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RefreshTrackRoomRequest::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
inline ::google::protobuf::uint32 RefreshTrackRoomRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:micromsg.RefreshTrackRoomRequest.TimeStamp)
  return timestamp_;
}
inline void RefreshTrackRoomRequest::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:micromsg.RefreshTrackRoomRequest.TimeStamp)
}

// optional .micromsg.TrackPOIItem UserPoi = 6;
inline bool RefreshTrackRoomRequest::has_userpoi() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RefreshTrackRoomRequest::set_has_userpoi() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RefreshTrackRoomRequest::clear_has_userpoi() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RefreshTrackRoomRequest::clear_userpoi() {
  if (userpoi_ != NULL) userpoi_->::micromsg::TrackPOIItem::Clear();
  clear_has_userpoi();
}
inline const ::micromsg::TrackPOIItem& RefreshTrackRoomRequest::userpoi() const {
  // @@protoc_insertion_point(field_get:micromsg.RefreshTrackRoomRequest.UserPoi)
  return userpoi_ != NULL ? *userpoi_
                         : *::micromsg::TrackPOIItem::internal_default_instance();
}
inline ::micromsg::TrackPOIItem* RefreshTrackRoomRequest::mutable_userpoi() {
  set_has_userpoi();
  if (userpoi_ == NULL) {
    userpoi_ = new ::micromsg::TrackPOIItem;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.RefreshTrackRoomRequest.UserPoi)
  return userpoi_;
}
inline ::micromsg::TrackPOIItem* RefreshTrackRoomRequest::release_userpoi() {
  // @@protoc_insertion_point(field_release:micromsg.RefreshTrackRoomRequest.UserPoi)
  clear_has_userpoi();
  ::micromsg::TrackPOIItem* temp = userpoi_;
  userpoi_ = NULL;
  return temp;
}
inline void RefreshTrackRoomRequest::set_allocated_userpoi(::micromsg::TrackPOIItem* userpoi) {
  delete userpoi_;
  userpoi_ = userpoi;
  if (userpoi) {
    set_has_userpoi();
  } else {
    clear_has_userpoi();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.RefreshTrackRoomRequest.UserPoi)
}

// -------------------------------------------------------------------

// RefreshTrackRoomResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool RefreshTrackRoomResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RefreshTrackRoomResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RefreshTrackRoomResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RefreshTrackRoomResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& RefreshTrackRoomResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.RefreshTrackRoomResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* RefreshTrackRoomResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.RefreshTrackRoomResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* RefreshTrackRoomResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.RefreshTrackRoomResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void RefreshTrackRoomResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.RefreshTrackRoomResponse.BaseResponse)
}

// required uint32 Count = 2;
inline bool RefreshTrackRoomResponse::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RefreshTrackRoomResponse::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RefreshTrackRoomResponse::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RefreshTrackRoomResponse::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 RefreshTrackRoomResponse::count() const {
  // @@protoc_insertion_point(field_get:micromsg.RefreshTrackRoomResponse.Count)
  return count_;
}
inline void RefreshTrackRoomResponse::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.RefreshTrackRoomResponse.Count)
}

// repeated .micromsg.UserPositionItem Positions = 3;
inline int RefreshTrackRoomResponse::positions_size() const {
  return positions_.size();
}
inline void RefreshTrackRoomResponse::clear_positions() {
  positions_.Clear();
}
inline const ::micromsg::UserPositionItem& RefreshTrackRoomResponse::positions(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.RefreshTrackRoomResponse.Positions)
  return positions_.Get(index);
}
inline ::micromsg::UserPositionItem* RefreshTrackRoomResponse::mutable_positions(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.RefreshTrackRoomResponse.Positions)
  return positions_.Mutable(index);
}
inline ::micromsg::UserPositionItem* RefreshTrackRoomResponse::add_positions() {
  // @@protoc_insertion_point(field_add:micromsg.RefreshTrackRoomResponse.Positions)
  return positions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::UserPositionItem >*
RefreshTrackRoomResponse::mutable_positions() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.RefreshTrackRoomResponse.Positions)
  return &positions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::UserPositionItem >&
RefreshTrackRoomResponse::positions() const {
  // @@protoc_insertion_point(field_list:micromsg.RefreshTrackRoomResponse.Positions)
  return positions_;
}

// optional string RetMsg = 4;
inline bool RefreshTrackRoomResponse::has_retmsg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RefreshTrackRoomResponse::set_has_retmsg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RefreshTrackRoomResponse::clear_has_retmsg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RefreshTrackRoomResponse::clear_retmsg() {
  retmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_retmsg();
}
inline const ::std::string& RefreshTrackRoomResponse::retmsg() const {
  // @@protoc_insertion_point(field_get:micromsg.RefreshTrackRoomResponse.RetMsg)
  return retmsg_.GetNoArena();
}
inline void RefreshTrackRoomResponse::set_retmsg(const ::std::string& value) {
  set_has_retmsg();
  retmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.RefreshTrackRoomResponse.RetMsg)
}
#if LANG_CXX11
inline void RefreshTrackRoomResponse::set_retmsg(::std::string&& value) {
  set_has_retmsg();
  retmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.RefreshTrackRoomResponse.RetMsg)
}
#endif
inline void RefreshTrackRoomResponse::set_retmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_retmsg();
  retmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.RefreshTrackRoomResponse.RetMsg)
}
inline void RefreshTrackRoomResponse::set_retmsg(const char* value, size_t size) {
  set_has_retmsg();
  retmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.RefreshTrackRoomResponse.RetMsg)
}
inline ::std::string* RefreshTrackRoomResponse::mutable_retmsg() {
  set_has_retmsg();
  // @@protoc_insertion_point(field_mutable:micromsg.RefreshTrackRoomResponse.RetMsg)
  return retmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RefreshTrackRoomResponse::release_retmsg() {
  // @@protoc_insertion_point(field_release:micromsg.RefreshTrackRoomResponse.RetMsg)
  clear_has_retmsg();
  return retmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RefreshTrackRoomResponse::set_allocated_retmsg(::std::string* retmsg) {
  if (retmsg != NULL) {
    set_has_retmsg();
  } else {
    clear_has_retmsg();
  }
  retmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), retmsg);
  // @@protoc_insertion_point(field_set_allocated:micromsg.RefreshTrackRoomResponse.RetMsg)
}

// optional uint32 RefreshTime = 5;
inline bool RefreshTrackRoomResponse::has_refreshtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RefreshTrackRoomResponse::set_has_refreshtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RefreshTrackRoomResponse::clear_has_refreshtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RefreshTrackRoomResponse::clear_refreshtime() {
  refreshtime_ = 0u;
  clear_has_refreshtime();
}
inline ::google::protobuf::uint32 RefreshTrackRoomResponse::refreshtime() const {
  // @@protoc_insertion_point(field_get:micromsg.RefreshTrackRoomResponse.RefreshTime)
  return refreshtime_;
}
inline void RefreshTrackRoomResponse::set_refreshtime(::google::protobuf::uint32 value) {
  set_has_refreshtime();
  refreshtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.RefreshTrackRoomResponse.RefreshTime)
}

// optional .micromsg.TrackPOIItem RoomPoi = 6;
inline bool RefreshTrackRoomResponse::has_roompoi() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RefreshTrackRoomResponse::set_has_roompoi() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RefreshTrackRoomResponse::clear_has_roompoi() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RefreshTrackRoomResponse::clear_roompoi() {
  if (roompoi_ != NULL) roompoi_->::micromsg::TrackPOIItem::Clear();
  clear_has_roompoi();
}
inline const ::micromsg::TrackPOIItem& RefreshTrackRoomResponse::roompoi() const {
  // @@protoc_insertion_point(field_get:micromsg.RefreshTrackRoomResponse.RoomPoi)
  return roompoi_ != NULL ? *roompoi_
                         : *::micromsg::TrackPOIItem::internal_default_instance();
}
inline ::micromsg::TrackPOIItem* RefreshTrackRoomResponse::mutable_roompoi() {
  set_has_roompoi();
  if (roompoi_ == NULL) {
    roompoi_ = new ::micromsg::TrackPOIItem;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.RefreshTrackRoomResponse.RoomPoi)
  return roompoi_;
}
inline ::micromsg::TrackPOIItem* RefreshTrackRoomResponse::release_roompoi() {
  // @@protoc_insertion_point(field_release:micromsg.RefreshTrackRoomResponse.RoomPoi)
  clear_has_roompoi();
  ::micromsg::TrackPOIItem* temp = roompoi_;
  roompoi_ = NULL;
  return temp;
}
inline void RefreshTrackRoomResponse::set_allocated_roompoi(::micromsg::TrackPOIItem* roompoi) {
  delete roompoi_;
  roompoi_ = roompoi;
  if (roompoi) {
    set_has_roompoi();
  } else {
    clear_has_roompoi();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.RefreshTrackRoomResponse.RoomPoi)
}

// -------------------------------------------------------------------

// JoinTrackRoomRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool JoinTrackRoomRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JoinTrackRoomRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JoinTrackRoomRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JoinTrackRoomRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& JoinTrackRoomRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.JoinTrackRoomRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* JoinTrackRoomRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.JoinTrackRoomRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* JoinTrackRoomRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.JoinTrackRoomRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void JoinTrackRoomRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.JoinTrackRoomRequest.BaseRequest)
}

// optional string Chatname = 2;
inline bool JoinTrackRoomRequest::has_chatname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JoinTrackRoomRequest::set_has_chatname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JoinTrackRoomRequest::clear_has_chatname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JoinTrackRoomRequest::clear_chatname() {
  chatname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatname();
}
inline const ::std::string& JoinTrackRoomRequest::chatname() const {
  // @@protoc_insertion_point(field_get:micromsg.JoinTrackRoomRequest.Chatname)
  return chatname_.GetNoArena();
}
inline void JoinTrackRoomRequest::set_chatname(const ::std::string& value) {
  set_has_chatname();
  chatname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.JoinTrackRoomRequest.Chatname)
}
#if LANG_CXX11
inline void JoinTrackRoomRequest::set_chatname(::std::string&& value) {
  set_has_chatname();
  chatname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.JoinTrackRoomRequest.Chatname)
}
#endif
inline void JoinTrackRoomRequest::set_chatname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatname();
  chatname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.JoinTrackRoomRequest.Chatname)
}
inline void JoinTrackRoomRequest::set_chatname(const char* value, size_t size) {
  set_has_chatname();
  chatname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.JoinTrackRoomRequest.Chatname)
}
inline ::std::string* JoinTrackRoomRequest::mutable_chatname() {
  set_has_chatname();
  // @@protoc_insertion_point(field_mutable:micromsg.JoinTrackRoomRequest.Chatname)
  return chatname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JoinTrackRoomRequest::release_chatname() {
  // @@protoc_insertion_point(field_release:micromsg.JoinTrackRoomRequest.Chatname)
  clear_has_chatname();
  return chatname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JoinTrackRoomRequest::set_allocated_chatname(::std::string* chatname) {
  if (chatname != NULL) {
    set_has_chatname();
  } else {
    clear_has_chatname();
  }
  chatname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.JoinTrackRoomRequest.Chatname)
}

// optional uint32 Scene = 3;
inline bool JoinTrackRoomRequest::has_scene() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JoinTrackRoomRequest::set_has_scene() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JoinTrackRoomRequest::clear_has_scene() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JoinTrackRoomRequest::clear_scene() {
  scene_ = 0u;
  clear_has_scene();
}
inline ::google::protobuf::uint32 JoinTrackRoomRequest::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.JoinTrackRoomRequest.Scene)
  return scene_;
}
inline void JoinTrackRoomRequest::set_scene(::google::protobuf::uint32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.JoinTrackRoomRequest.Scene)
}

// -------------------------------------------------------------------

// JoinTrackRoomResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool JoinTrackRoomResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JoinTrackRoomResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JoinTrackRoomResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JoinTrackRoomResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& JoinTrackRoomResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.JoinTrackRoomResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* JoinTrackRoomResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.JoinTrackRoomResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* JoinTrackRoomResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.JoinTrackRoomResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void JoinTrackRoomResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.JoinTrackRoomResponse.BaseResponse)
}

// optional string TrackRoomID = 2;
inline bool JoinTrackRoomResponse::has_trackroomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JoinTrackRoomResponse::set_has_trackroomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JoinTrackRoomResponse::clear_has_trackroomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JoinTrackRoomResponse::clear_trackroomid() {
  trackroomid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trackroomid();
}
inline const ::std::string& JoinTrackRoomResponse::trackroomid() const {
  // @@protoc_insertion_point(field_get:micromsg.JoinTrackRoomResponse.TrackRoomID)
  return trackroomid_.GetNoArena();
}
inline void JoinTrackRoomResponse::set_trackroomid(const ::std::string& value) {
  set_has_trackroomid();
  trackroomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.JoinTrackRoomResponse.TrackRoomID)
}
#if LANG_CXX11
inline void JoinTrackRoomResponse::set_trackroomid(::std::string&& value) {
  set_has_trackroomid();
  trackroomid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.JoinTrackRoomResponse.TrackRoomID)
}
#endif
inline void JoinTrackRoomResponse::set_trackroomid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trackroomid();
  trackroomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.JoinTrackRoomResponse.TrackRoomID)
}
inline void JoinTrackRoomResponse::set_trackroomid(const char* value, size_t size) {
  set_has_trackroomid();
  trackroomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.JoinTrackRoomResponse.TrackRoomID)
}
inline ::std::string* JoinTrackRoomResponse::mutable_trackroomid() {
  set_has_trackroomid();
  // @@protoc_insertion_point(field_mutable:micromsg.JoinTrackRoomResponse.TrackRoomID)
  return trackroomid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JoinTrackRoomResponse::release_trackroomid() {
  // @@protoc_insertion_point(field_release:micromsg.JoinTrackRoomResponse.TrackRoomID)
  clear_has_trackroomid();
  return trackroomid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JoinTrackRoomResponse::set_allocated_trackroomid(::std::string* trackroomid) {
  if (trackroomid != NULL) {
    set_has_trackroomid();
  } else {
    clear_has_trackroomid();
  }
  trackroomid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trackroomid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.JoinTrackRoomResponse.TrackRoomID)
}

// optional string RetMsg = 3;
inline bool JoinTrackRoomResponse::has_retmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JoinTrackRoomResponse::set_has_retmsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JoinTrackRoomResponse::clear_has_retmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JoinTrackRoomResponse::clear_retmsg() {
  retmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_retmsg();
}
inline const ::std::string& JoinTrackRoomResponse::retmsg() const {
  // @@protoc_insertion_point(field_get:micromsg.JoinTrackRoomResponse.RetMsg)
  return retmsg_.GetNoArena();
}
inline void JoinTrackRoomResponse::set_retmsg(const ::std::string& value) {
  set_has_retmsg();
  retmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.JoinTrackRoomResponse.RetMsg)
}
#if LANG_CXX11
inline void JoinTrackRoomResponse::set_retmsg(::std::string&& value) {
  set_has_retmsg();
  retmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.JoinTrackRoomResponse.RetMsg)
}
#endif
inline void JoinTrackRoomResponse::set_retmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_retmsg();
  retmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.JoinTrackRoomResponse.RetMsg)
}
inline void JoinTrackRoomResponse::set_retmsg(const char* value, size_t size) {
  set_has_retmsg();
  retmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.JoinTrackRoomResponse.RetMsg)
}
inline ::std::string* JoinTrackRoomResponse::mutable_retmsg() {
  set_has_retmsg();
  // @@protoc_insertion_point(field_mutable:micromsg.JoinTrackRoomResponse.RetMsg)
  return retmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JoinTrackRoomResponse::release_retmsg() {
  // @@protoc_insertion_point(field_release:micromsg.JoinTrackRoomResponse.RetMsg)
  clear_has_retmsg();
  return retmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JoinTrackRoomResponse::set_allocated_retmsg(::std::string* retmsg) {
  if (retmsg != NULL) {
    set_has_retmsg();
  } else {
    clear_has_retmsg();
  }
  retmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), retmsg);
  // @@protoc_insertion_point(field_set_allocated:micromsg.JoinTrackRoomResponse.RetMsg)
}

// -------------------------------------------------------------------

// ExitTrackRoomRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool ExitTrackRoomRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExitTrackRoomRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExitTrackRoomRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExitTrackRoomRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& ExitTrackRoomRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.ExitTrackRoomRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* ExitTrackRoomRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ExitTrackRoomRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* ExitTrackRoomRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.ExitTrackRoomRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void ExitTrackRoomRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ExitTrackRoomRequest.BaseRequest)
}

// optional string TrackRoomID = 2;
inline bool ExitTrackRoomRequest::has_trackroomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExitTrackRoomRequest::set_has_trackroomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExitTrackRoomRequest::clear_has_trackroomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExitTrackRoomRequest::clear_trackroomid() {
  trackroomid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trackroomid();
}
inline const ::std::string& ExitTrackRoomRequest::trackroomid() const {
  // @@protoc_insertion_point(field_get:micromsg.ExitTrackRoomRequest.TrackRoomID)
  return trackroomid_.GetNoArena();
}
inline void ExitTrackRoomRequest::set_trackroomid(const ::std::string& value) {
  set_has_trackroomid();
  trackroomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ExitTrackRoomRequest.TrackRoomID)
}
#if LANG_CXX11
inline void ExitTrackRoomRequest::set_trackroomid(::std::string&& value) {
  set_has_trackroomid();
  trackroomid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ExitTrackRoomRequest.TrackRoomID)
}
#endif
inline void ExitTrackRoomRequest::set_trackroomid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trackroomid();
  trackroomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ExitTrackRoomRequest.TrackRoomID)
}
inline void ExitTrackRoomRequest::set_trackroomid(const char* value, size_t size) {
  set_has_trackroomid();
  trackroomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ExitTrackRoomRequest.TrackRoomID)
}
inline ::std::string* ExitTrackRoomRequest::mutable_trackroomid() {
  set_has_trackroomid();
  // @@protoc_insertion_point(field_mutable:micromsg.ExitTrackRoomRequest.TrackRoomID)
  return trackroomid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExitTrackRoomRequest::release_trackroomid() {
  // @@protoc_insertion_point(field_release:micromsg.ExitTrackRoomRequest.TrackRoomID)
  clear_has_trackroomid();
  return trackroomid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExitTrackRoomRequest::set_allocated_trackroomid(::std::string* trackroomid) {
  if (trackroomid != NULL) {
    set_has_trackroomid();
  } else {
    clear_has_trackroomid();
  }
  trackroomid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trackroomid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ExitTrackRoomRequest.TrackRoomID)
}

// optional uint32 Scene = 3;
inline bool ExitTrackRoomRequest::has_scene() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExitTrackRoomRequest::set_has_scene() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExitTrackRoomRequest::clear_has_scene() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExitTrackRoomRequest::clear_scene() {
  scene_ = 0u;
  clear_has_scene();
}
inline ::google::protobuf::uint32 ExitTrackRoomRequest::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.ExitTrackRoomRequest.Scene)
  return scene_;
}
inline void ExitTrackRoomRequest::set_scene(::google::protobuf::uint32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ExitTrackRoomRequest.Scene)
}

// -------------------------------------------------------------------

// ExitTrackRoomResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool ExitTrackRoomResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExitTrackRoomResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExitTrackRoomResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExitTrackRoomResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& ExitTrackRoomResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.ExitTrackRoomResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* ExitTrackRoomResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ExitTrackRoomResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* ExitTrackRoomResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.ExitTrackRoomResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void ExitTrackRoomResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ExitTrackRoomResponse.BaseResponse)
}

// optional string RetMsg = 2;
inline bool ExitTrackRoomResponse::has_retmsg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExitTrackRoomResponse::set_has_retmsg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExitTrackRoomResponse::clear_has_retmsg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExitTrackRoomResponse::clear_retmsg() {
  retmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_retmsg();
}
inline const ::std::string& ExitTrackRoomResponse::retmsg() const {
  // @@protoc_insertion_point(field_get:micromsg.ExitTrackRoomResponse.RetMsg)
  return retmsg_.GetNoArena();
}
inline void ExitTrackRoomResponse::set_retmsg(const ::std::string& value) {
  set_has_retmsg();
  retmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ExitTrackRoomResponse.RetMsg)
}
#if LANG_CXX11
inline void ExitTrackRoomResponse::set_retmsg(::std::string&& value) {
  set_has_retmsg();
  retmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ExitTrackRoomResponse.RetMsg)
}
#endif
inline void ExitTrackRoomResponse::set_retmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_retmsg();
  retmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ExitTrackRoomResponse.RetMsg)
}
inline void ExitTrackRoomResponse::set_retmsg(const char* value, size_t size) {
  set_has_retmsg();
  retmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ExitTrackRoomResponse.RetMsg)
}
inline ::std::string* ExitTrackRoomResponse::mutable_retmsg() {
  set_has_retmsg();
  // @@protoc_insertion_point(field_mutable:micromsg.ExitTrackRoomResponse.RetMsg)
  return retmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExitTrackRoomResponse::release_retmsg() {
  // @@protoc_insertion_point(field_release:micromsg.ExitTrackRoomResponse.RetMsg)
  clear_has_retmsg();
  return retmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExitTrackRoomResponse::set_allocated_retmsg(::std::string* retmsg) {
  if (retmsg != NULL) {
    set_has_retmsg();
  } else {
    clear_has_retmsg();
  }
  retmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), retmsg);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ExitTrackRoomResponse.RetMsg)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace micromsg

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mmtrack_2eproto__INCLUDED
