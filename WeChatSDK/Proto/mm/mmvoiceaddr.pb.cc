// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmvoiceaddr.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mmvoiceaddr.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace micromsg {
class VoiceAddrRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoiceAddrRequest> {
} _VoiceAddrRequest_default_instance_;
class VoiceAddrResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoiceAddrResponse> {
} _VoiceAddrResponse_default_instance_;
class VoiceAddrReportRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoiceAddrReportRequest> {
} _VoiceAddrReportRequest_default_instance_;
class VoiceAddrReportResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoiceAddrReportResponse> {
} _VoiceAddrReportResponse_default_instance_;
class ScanBarcodeRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ScanBarcodeRequest> {
} _ScanBarcodeRequest_default_instance_;
class ScanBarcodeResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ScanBarcodeResponse> {
} _ScanBarcodeResponse_default_instance_;
class ScanImageRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ScanImageRequest> {
} _ScanImageRequest_default_instance_;
class ScanImageResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ScanImageResponse> {
} _ScanImageResponse_default_instance_;
class GetProductInfoRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetProductInfoRequest> {
} _GetProductInfoRequest_default_instance_;
class GetProductInfoResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetProductInfoResponse> {
} _GetProductInfoResponse_default_instance_;
class OCRTranslationRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OCRTranslationRequest> {
} _OCRTranslationRequest_default_instance_;
class OCRTranslationResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OCRTranslationResponse> {
} _OCRTranslationResponse_default_instance_;
class ShakeTVRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ShakeTVRequest> {
} _ShakeTVRequest_default_instance_;
class ShakeTVResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ShakeTVResponse> {
} _ShakeTVResponse_default_instance_;
class GetTVInfoRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetTVInfoRequest> {
} _GetTVInfoRequest_default_instance_;
class GetTVInfoResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetTVInfoResponse> {
} _GetTVInfoResponse_default_instance_;
class ShakeMusicRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ShakeMusicRequest> {
} _ShakeMusicRequest_default_instance_;
class ShakeMusicResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ShakeMusicResponse> {
} _ShakeMusicResponse_default_instance_;
class GetQQMusicLyricRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetQQMusicLyricRequest> {
} _GetQQMusicLyricRequest_default_instance_;
class GetQQMusicLyricResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetQQMusicLyricResponse> {
} _GetQQMusicLyricResponse_default_instance_;
class UploadInputVoiceRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UploadInputVoiceRequest> {
} _UploadInputVoiceRequest_default_instance_;
class UploadInputVoiceResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UploadInputVoiceResponse> {
} _UploadInputVoiceResponse_default_instance_;

namespace protobuf_mmvoiceaddr_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[22];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceAddrRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceAddrRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceAddrRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceAddrRequest, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceAddrRequest, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceAddrRequest, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceAddrRequest, clientvoiceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceAddrRequest, endflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceAddrRequest, samplepersec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceAddrRequest, bitspersample_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceAddrRequest, voiceencodetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceAddrRequest, filetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceAddrRequest, searchtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceAddrRequest, extranamecount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceAddrRequest, extranameusernamelist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceAddrRequest, extranameremarknamelist_),
  2,
  0,
  3,
  4,
  1,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceAddrResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceAddrResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceAddrResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceAddrResponse, endflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceAddrResponse, usercount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceAddrResponse, usernamelist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceAddrResponse, reportfiled_),
  1,
  2,
  3,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceAddrReportRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceAddrReportRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceAddrReportRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceAddrReportRequest, hitpos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceAddrReportRequest, hitusername_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceAddrReportResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceAddrReportResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceAddrReportResponse, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanBarcodeRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanBarcodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanBarcodeRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanBarcodeRequest, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanBarcodeRequest, barcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanBarcodeRequest, scene_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanBarcodeResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanBarcodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanBarcodeResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanBarcodeResponse, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanBarcodeResponse, descxml_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanImageRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanImageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanImageRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanImageRequest, clientscanid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanImageRequest, imagebuffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanImageRequest, totallength_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanImageRequest, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanImageRequest, endflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanImageRequest, imagetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanImageRequest, opcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanImageRequest, sessionid_),
  0,
  2,
  1,
  3,
  4,
  5,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanImageResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanImageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanImageResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanImageResponse, clientscanid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanImageResponse, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanImageResponse, descriptionxml_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanImageResponse, endflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanImageResponse, imagetype_),
  1,
  2,
  3,
  0,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProductInfoRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProductInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProductInfoRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProductInfoRequest, productid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProductInfoRequest, scene_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProductInfoRequest, qrurl_),
  2,
  0,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProductInfoResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProductInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProductInfoResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProductInfoResponse, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProductInfoResponse, descxml_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProductInfoResponse, productid_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCRTranslationRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCRTranslationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCRTranslationRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCRTranslationRequest, clientscanid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCRTranslationRequest, imagebuffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCRTranslationRequest, imagetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCRTranslationRequest, fromlanguage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCRTranslationRequest, tolanguage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCRTranslationRequest, sessionid_),
  2,
  4,
  3,
  5,
  0,
  1,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCRTranslationResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCRTranslationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCRTranslationResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCRTranslationResponse, clientscanid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCRTranslationResponse, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCRTranslationResponse, translation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCRTranslationResponse, imagetype_),
  2,
  3,
  0,
  1,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeTVRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeTVRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeTVRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeTVRequest, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeTVRequest, dataid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeTVRequest, endflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeTVRequest, voicelen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeTVRequest, nettype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeTVRequest, sdkversion_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeTVResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeTVResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeTVResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeTVResponse, endflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeTVResponse, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeTVResponse, descriptionxml_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTVInfoRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTVInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTVInfoRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTVInfoRequest, tvid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTVInfoRequest, scene_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTVInfoResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTVInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTVInfoResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTVInfoResponse, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTVInfoResponse, descriptionxml_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTVInfoResponse, tvid_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeMusicRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeMusicRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeMusicRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeMusicRequest, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeMusicRequest, dataid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeMusicRequest, endflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeMusicRequest, voicelen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeMusicRequest, nettype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeMusicRequest, sdkversion_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeMusicResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeMusicResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeMusicResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeMusicResponse, endflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeMusicResponse, musicid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeMusicResponse, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeMusicResponse, songname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeMusicResponse, songsinger_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeMusicResponse, songalbum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeMusicResponse, songalbumurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeMusicResponse, songwifiurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeMusicResponse, songwaplinkurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeMusicResponse, songweburl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeMusicResponse, songlyric_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeMusicResponse, resulttype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeMusicResponse, tvtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeMusicResponse, tvdescriptionxml_),
  1,
  10,
  11,
  12,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  13,
  14,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQQMusicLyricRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQQMusicLyricRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQQMusicLyricRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQQMusicLyricRequest, songid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQQMusicLyricRequest, url_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQQMusicLyricResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQQMusicLyricResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQQMusicLyricResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQQMusicLyricResponse, songlyric_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadInputVoiceRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadInputVoiceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadInputVoiceRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadInputVoiceRequest, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadInputVoiceRequest, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadInputVoiceRequest, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadInputVoiceRequest, clientvoiceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadInputVoiceRequest, endflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadInputVoiceRequest, samplepersec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadInputVoiceRequest, bitspersample_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadInputVoiceRequest, voiceencodetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadInputVoiceRequest, filetype_),
  2,
  0,
  3,
  4,
  1,
  5,
  6,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadInputVoiceResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadInputVoiceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadInputVoiceResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadInputVoiceResponse, endflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadInputVoiceResponse, text_),
  0,
  2,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 19, sizeof(VoiceAddrRequest)},
  { 33, 43, sizeof(VoiceAddrResponse)},
  { 48, 56, sizeof(VoiceAddrReportRequest)},
  { 59, 65, sizeof(VoiceAddrReportResponse)},
  { 66, 75, sizeof(ScanBarcodeRequest)},
  { 79, 87, sizeof(ScanBarcodeResponse)},
  { 90, 104, sizeof(ScanImageRequest)},
  { 113, 124, sizeof(ScanImageResponse)},
  { 130, 139, sizeof(GetProductInfoRequest)},
  { 143, 152, sizeof(GetProductInfoResponse)},
  { 156, 168, sizeof(OCRTranslationRequest)},
  { 175, 185, sizeof(OCRTranslationResponse)},
  { 190, 202, sizeof(ShakeTVRequest)},
  { 209, 218, sizeof(ShakeTVResponse)},
  { 222, 230, sizeof(GetTVInfoRequest)},
  { 233, 242, sizeof(GetTVInfoResponse)},
  { 246, 258, sizeof(ShakeMusicRequest)},
  { 265, 285, sizeof(ShakeMusicResponse)},
  { 300, 308, sizeof(GetQQMusicLyricRequest)},
  { 311, 318, sizeof(GetQQMusicLyricResponse)},
  { 320, 335, sizeof(UploadInputVoiceRequest)},
  { 345, 353, sizeof(UploadInputVoiceResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoiceAddrRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoiceAddrResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoiceAddrReportRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoiceAddrReportResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ScanBarcodeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ScanBarcodeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ScanImageRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ScanImageResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetProductInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetProductInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OCRTranslationRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OCRTranslationResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ShakeTVRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ShakeTVResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetTVInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetTVInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ShakeMusicRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ShakeMusicResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetQQMusicLyricRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetQQMusicLyricResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UploadInputVoiceRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UploadInputVoiceResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "mmvoiceaddr.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 22);
}

}  // namespace

void TableStruct::Shutdown() {
  _VoiceAddrRequest_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _VoiceAddrResponse_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _VoiceAddrReportRequest_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _VoiceAddrReportResponse_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _ScanBarcodeRequest_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _ScanBarcodeResponse_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _ScanImageRequest_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _ScanImageResponse_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _GetProductInfoRequest_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _GetProductInfoResponse_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _OCRTranslationRequest_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _OCRTranslationResponse_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _ShakeTVRequest_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _ShakeTVResponse_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _GetTVInfoRequest_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _GetTVInfoResponse_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _ShakeMusicRequest_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _ShakeMusicResponse_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _GetQQMusicLyricRequest_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _GetQQMusicLyricResponse_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _UploadInputVoiceRequest_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _UploadInputVoiceResponse_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::micromsg::protobuf_mmbuiltintype_2eproto::InitDefaults();
  ::micromsg::protobuf_mmbase_2eproto::InitDefaults();
  _VoiceAddrRequest_default_instance_.DefaultConstruct();
  _VoiceAddrResponse_default_instance_.DefaultConstruct();
  _VoiceAddrReportRequest_default_instance_.DefaultConstruct();
  _VoiceAddrReportResponse_default_instance_.DefaultConstruct();
  _ScanBarcodeRequest_default_instance_.DefaultConstruct();
  _ScanBarcodeResponse_default_instance_.DefaultConstruct();
  _ScanImageRequest_default_instance_.DefaultConstruct();
  _ScanImageResponse_default_instance_.DefaultConstruct();
  _GetProductInfoRequest_default_instance_.DefaultConstruct();
  _GetProductInfoResponse_default_instance_.DefaultConstruct();
  _OCRTranslationRequest_default_instance_.DefaultConstruct();
  _OCRTranslationResponse_default_instance_.DefaultConstruct();
  _ShakeTVRequest_default_instance_.DefaultConstruct();
  _ShakeTVResponse_default_instance_.DefaultConstruct();
  _GetTVInfoRequest_default_instance_.DefaultConstruct();
  _GetTVInfoResponse_default_instance_.DefaultConstruct();
  _ShakeMusicRequest_default_instance_.DefaultConstruct();
  _ShakeMusicResponse_default_instance_.DefaultConstruct();
  _GetQQMusicLyricRequest_default_instance_.DefaultConstruct();
  _GetQQMusicLyricResponse_default_instance_.DefaultConstruct();
  _UploadInputVoiceRequest_default_instance_.DefaultConstruct();
  _UploadInputVoiceResponse_default_instance_.DefaultConstruct();
  _VoiceAddrRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _VoiceAddrRequest_default_instance_.get_mutable()->data_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _VoiceAddrResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _VoiceAddrReportRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _VoiceAddrReportResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _ScanBarcodeRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _ScanBarcodeResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _ScanImageRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _ScanImageRequest_default_instance_.get_mutable()->imagebuffer_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _ScanImageResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetProductInfoRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GetProductInfoResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _OCRTranslationRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _OCRTranslationRequest_default_instance_.get_mutable()->imagebuffer_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _OCRTranslationResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _ShakeTVRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _ShakeTVRequest_default_instance_.get_mutable()->data_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _ShakeTVResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetTVInfoRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GetTVInfoResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _ShakeMusicRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _ShakeMusicRequest_default_instance_.get_mutable()->data_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _ShakeMusicResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _ShakeMusicResponse_default_instance_.get_mutable()->songname_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _ShakeMusicResponse_default_instance_.get_mutable()->songsinger_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _ShakeMusicResponse_default_instance_.get_mutable()->songalbum_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _ShakeMusicResponse_default_instance_.get_mutable()->songalbumurl_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _ShakeMusicResponse_default_instance_.get_mutable()->songwifiurl_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _ShakeMusicResponse_default_instance_.get_mutable()->songwaplinkurl_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _ShakeMusicResponse_default_instance_.get_mutable()->songweburl_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _ShakeMusicResponse_default_instance_.get_mutable()->songlyric_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _GetQQMusicLyricRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GetQQMusicLyricRequest_default_instance_.get_mutable()->url_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _GetQQMusicLyricResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetQQMusicLyricResponse_default_instance_.get_mutable()->songlyric_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _UploadInputVoiceRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _UploadInputVoiceRequest_default_instance_.get_mutable()->data_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _UploadInputVoiceResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _UploadInputVoiceResponse_default_instance_.get_mutable()->text_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\021mmvoiceaddr.proto\022\010micromsg\032\023mmbuiltin"
      "type.proto\032\014mmbase.proto\"\261\003\n\020VoiceAddrRe"
      "quest\022*\n\013BaseRequest\030\001 \002(\0132\025.micromsg.Ba"
      "seRequest\022\020\n\010UserName\030\002 \001(\t\022)\n\004Data\030\003 \002("
      "\0132\033.micromsg.SKBuiltinBuffer_t\022\016\n\006Offset"
      "\030\004 \002(\r\022\025\n\rClientVoiceId\030\005 \001(\t\022\017\n\007EndFlag"
      "\030\006 \002(\r\022\024\n\014SamplePerSec\030\007 \002(\r\022\025\n\rBitsPerS"
      "ample\030\010 \002(\r\022\027\n\017VoiceEncodeType\030\t \002(\r\022\020\n\010"
      "FileType\030\n \002(\r\022\022\n\nSearchType\030\013 \001(\r\022\026\n\016Ex"
      "traNameCount\030\014 \001(\r\022:\n\025ExtraNameUserNameL"
      "ist\030\r \003(\0132\033.micromsg.SKBuiltinString_t\022<"
      "\n\027ExtraNameRemarkNameList\030\016 \003(\0132\033.microm"
      "sg.SKBuiltinBuffer_t\"\255\001\n\021VoiceAddrRespon"
      "se\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg.Base"
      "Response\022\017\n\007EndFlag\030\002 \002(\r\022\021\n\tUserCount\030\003"
      " \002(\005\0221\n\014UserNameList\030\004 \003(\0132\033.micromsg.SK"
      "BuiltinString_t\022\023\n\013ReportFiled\030\005 \001(\t\"i\n\026"
      "VoiceAddrReportRequest\022*\n\013BaseRequest\030\001 "
      "\002(\0132\025.micromsg.BaseRequest\022\016\n\006HitPos\030\002 \002"
      "(\r\022\023\n\013HitUserName\030\003 \001(\t\"G\n\027VoiceAddrRepo"
      "rtResponse\022,\n\014BaseResponse\030\001 \002(\0132\026.micro"
      "msg.BaseResponse\"n\n\022ScanBarcodeRequest\022*"
      "\n\013BaseRequest\030\001 \002(\0132\025.micromsg.BaseReque"
      "st\022\014\n\004Type\030\002 \002(\r\022\017\n\007Barcode\030\003 \001(\t\022\r\n\005Sce"
      "ne\030\004 \001(\r\"b\n\023ScanBarcodeResponse\022,\n\014BaseR"
      "esponse\030\001 \002(\0132\026.micromsg.BaseResponse\022\014\n"
      "\004Type\030\002 \002(\r\022\017\n\007DescXML\030\003 \001(\t\"\362\001\n\020ScanIma"
      "geRequest\022*\n\013BaseRequest\030\001 \002(\0132\025.microms"
      "g.BaseRequest\022\024\n\014ClientScanID\030\002 \002(\r\0220\n\013I"
      "mageBuffer\030\003 \002(\0132\033.micromsg.SKBuiltinBuf"
      "fer_t\022\023\n\013TotalLength\030\004 \002(\r\022\016\n\006Offset\030\005 \002"
      "(\r\022\017\n\007EndFlag\030\006 \002(\r\022\021\n\tImageType\030\007 \002(\r\022\016"
      "\n\006OPCode\030\010 \001(\r\022\021\n\tSessionID\030\t \001(\r\"\241\001\n\021Sc"
      "anImageResponse\022,\n\014BaseResponse\030\001 \002(\0132\026."
      "micromsg.BaseResponse\022\024\n\014ClientScanID\030\002 "
      "\002(\r\022\014\n\004Type\030\003 \002(\r\022\026\n\016DescriptionXML\030\004 \001("
      "\t\022\017\n\007EndFlag\030\005 \002(\r\022\021\n\tImageType\030\006 \002(\r\"t\n"
      "\025GetProductInfoRequest\022*\n\013BaseRequest\030\001 "
      "\002(\0132\025.micromsg.BaseRequest\022\021\n\tProductID\030"
      "\002 \001(\t\022\r\n\005Scene\030\003 \002(\r\022\r\n\005QrUrl\030\004 \001(\t\"x\n\026G"
      "etProductInfoResponse\022,\n\014BaseResponse\030\001 "
      "\002(\0132\026.micromsg.BaseResponse\022\014\n\004Type\030\002 \002("
      "\r\022\017\n\007DescXML\030\003 \001(\t\022\021\n\tProductID\030\004 \001(\t\"\333\001"
      "\n\025OCRTranslationRequest\022*\n\013BaseRequest\030\001"
      " \002(\0132\025.micromsg.BaseRequest\022\024\n\014ClientSca"
      "nID\030\002 \002(\r\0220\n\013ImageBuffer\030\003 \002(\0132\033.microms"
      "g.SKBuiltinBuffer_t\022\021\n\tImageType\030\004 \002(\r\022\024"
      "\n\014FromLanguage\030\005 \001(\t\022\022\n\nToLanguage\030\006 \001(\t"
      "\022\021\n\tSessionID\030\007 \001(\r\"\224\001\n\026OCRTranslationRe"
      "sponse\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg."
      "BaseResponse\022\024\n\014ClientScanID\030\002 \002(\r\022\016\n\006So"
      "urce\030\003 \001(\t\022\023\n\013Translation\030\004 \001(\t\022\021\n\tImage"
      "Type\030\005 \002(\r\"\277\001\n\016ShakeTVRequest\022*\n\013BaseReq"
      "uest\030\001 \002(\0132\025.micromsg.BaseRequest\022)\n\004Dat"
      "a\030\002 \002(\0132\033.micromsg.SKBuiltinBuffer_t\022\016\n\006"
      "DataId\030\003 \002(\r\022\017\n\007EndFlag\030\004 \002(\r\022\020\n\010VoiceLe"
      "n\030\005 \002(\002\022\017\n\007NetType\030\006 \002(\r\022\022\n\nSdkVersion\030\007"
      " \002(\r\"v\n\017ShakeTVResponse\022,\n\014BaseResponse\030"
      "\001 \002(\0132\026.micromsg.BaseResponse\022\017\n\007EndFlag"
      "\030\002 \002(\r\022\014\n\004Type\030\003 \002(\r\022\026\n\016DescriptionXML\030\004"
      " \001(\t\"[\n\020GetTVInfoRequest\022*\n\013BaseRequest\030"
      "\001 \002(\0132\025.micromsg.BaseRequest\022\014\n\004TVID\030\002 \001"
      "(\t\022\r\n\005Scene\030\003 \002(\r\"u\n\021GetTVInfoResponse\022,"
      "\n\014BaseResponse\030\001 \002(\0132\026.micromsg.BaseResp"
      "onse\022\014\n\004Type\030\002 \002(\r\022\026\n\016DescriptionXML\030\003 \001"
      "(\t\022\014\n\004TVID\030\004 \001(\t\"\302\001\n\021ShakeMusicRequest\022*"
      "\n\013BaseRequest\030\001 \002(\0132\025.micromsg.BaseReque"
      "st\022)\n\004Data\030\002 \002(\0132\033.micromsg.SKBuiltinBuf"
      "fer_t\022\016\n\006DataId\030\003 \002(\r\022\017\n\007EndFlag\030\004 \002(\r\022\020"
      "\n\010VoiceLen\030\005 \002(\002\022\017\n\007NetType\030\006 \002(\r\022\022\n\nSdk"
      "Version\030\007 \002(\r\"\275\004\n\022ShakeMusicResponse\022,\n\014"
      "BaseResponse\030\001 \002(\0132\026.micromsg.BaseRespon"
      "se\022\017\n\007EndFlag\030\002 \002(\r\022\017\n\007MusicId\030\003 \002(\r\022\016\n\006"
      "Offset\030\004 \002(\002\022-\n\010SongName\030\005 \002(\0132\033.microms"
      "g.SKBuiltinBuffer_t\022/\n\nSongSinger\030\006 \002(\0132"
      "\033.micromsg.SKBuiltinBuffer_t\022.\n\tSongAlbu"
      "m\030\007 \002(\0132\033.micromsg.SKBuiltinBuffer_t\0221\n\014"
      "SongAlbumUrl\030\010 \002(\0132\033.micromsg.SKBuiltinB"
      "uffer_t\0220\n\013SongWifiUrl\030\t \002(\0132\033.micromsg."
      "SKBuiltinBuffer_t\0223\n\016SongWapLinkUrl\030\n \002("
      "\0132\033.micromsg.SKBuiltinBuffer_t\022/\n\nSongWe"
      "bUrl\030\013 \002(\0132\033.micromsg.SKBuiltinBuffer_t\022"
      ".\n\tSongLyric\030\014 \002(\0132\033.micromsg.SKBuiltinB"
      "uffer_t\022\022\n\nResultType\030\r \001(\r\022\016\n\006TVType\030\016 "
      "\001(\r\022\030\n\020TVDescriptionXML\030\017 \001(\t\"~\n\026GetQQMu"
      "sicLyricRequest\022*\n\013BaseRequest\030\001 \002(\0132\025.m"
      "icromsg.BaseRequest\022\016\n\006SongId\030\002 \002(\r\022(\n\003U"
      "rl\030\003 \002(\0132\033.micromsg.SKBuiltinBuffer_t\"w\n"
      "\027GetQQMusicLyricResponse\022,\n\014BaseResponse"
      "\030\001 \002(\0132\026.micromsg.BaseResponse\022.\n\tSongLy"
      "ric\030\002 \002(\0132\033.micromsg.SKBuiltinBuffer_t\"\222"
      "\002\n\027UploadInputVoiceRequest\022*\n\013BaseReques"
      "t\030\001 \002(\0132\025.micromsg.BaseRequest\022\020\n\010UserNa"
      "me\030\002 \001(\t\022)\n\004Data\030\003 \002(\0132\033.micromsg.SKBuil"
      "tinBuffer_t\022\016\n\006Offset\030\004 \002(\r\022\025\n\rClientVoi"
      "ceId\030\005 \001(\t\022\017\n\007EndFlag\030\006 \002(\r\022\024\n\014SamplePer"
      "Sec\030\007 \002(\r\022\025\n\rBitsPerSample\030\010 \002(\r\022\027\n\017Voic"
      "eEncodeType\030\t \002(\r\022\020\n\010FileType\030\n \002(\r\"\204\001\n\030"
      "UploadInputVoiceResponse\022,\n\014BaseResponse"
      "\030\001 \002(\0132\026.micromsg.BaseResponse\022\017\n\007EndFla"
      "g\030\002 \002(\r\022)\n\004Text\030\003 \002(\0132\033.micromsg.SKBuilt"
      "inBuffer_t"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4050);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mmvoiceaddr.proto", &protobuf_RegisterTypes);
  ::micromsg::protobuf_mmbuiltintype_2eproto::AddDescriptors();
  ::micromsg::protobuf_mmbase_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_mmvoiceaddr_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoiceAddrRequest::kBaseRequestFieldNumber;
const int VoiceAddrRequest::kUserNameFieldNumber;
const int VoiceAddrRequest::kDataFieldNumber;
const int VoiceAddrRequest::kOffsetFieldNumber;
const int VoiceAddrRequest::kClientVoiceIdFieldNumber;
const int VoiceAddrRequest::kEndFlagFieldNumber;
const int VoiceAddrRequest::kSamplePerSecFieldNumber;
const int VoiceAddrRequest::kBitsPerSampleFieldNumber;
const int VoiceAddrRequest::kVoiceEncodeTypeFieldNumber;
const int VoiceAddrRequest::kFileTypeFieldNumber;
const int VoiceAddrRequest::kSearchTypeFieldNumber;
const int VoiceAddrRequest::kExtraNameCountFieldNumber;
const int VoiceAddrRequest::kExtraNameUserNameListFieldNumber;
const int VoiceAddrRequest::kExtraNameRemarkNameListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoiceAddrRequest::VoiceAddrRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoiceaddr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VoiceAddrRequest)
}
VoiceAddrRequest::VoiceAddrRequest(const VoiceAddrRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      extranameusernamelist_(from.extranameusernamelist_),
      extranameremarknamelist_(from.extranameremarknamelist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  clientvoiceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientvoiceid()) {
    clientvoiceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientvoiceid_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_data()) {
    data_ = new ::micromsg::SKBuiltinBuffer_t(*from.data_);
  } else {
    data_ = NULL;
  }
  ::memcpy(&offset_, &from.offset_,
    reinterpret_cast<char*>(&extranamecount_) -
    reinterpret_cast<char*>(&offset_) + sizeof(extranamecount_));
  // @@protoc_insertion_point(copy_constructor:micromsg.VoiceAddrRequest)
}

void VoiceAddrRequest::SharedCtor() {
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientvoiceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&extranamecount_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(extranamecount_));
}

VoiceAddrRequest::~VoiceAddrRequest() {
  // @@protoc_insertion_point(destructor:micromsg.VoiceAddrRequest)
  SharedDtor();
}

void VoiceAddrRequest::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientvoiceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete data_;
  }
}

void VoiceAddrRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoiceAddrRequest::descriptor() {
  protobuf_mmvoiceaddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiceaddr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoiceAddrRequest& VoiceAddrRequest::default_instance() {
  protobuf_mmvoiceaddr_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoiceAddrRequest* VoiceAddrRequest::New(::google::protobuf::Arena* arena) const {
  VoiceAddrRequest* n = new VoiceAddrRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoiceAddrRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VoiceAddrRequest)
  extranameusernamelist_.Clear();
  extranameremarknamelist_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    if (has_username()) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
    if (has_clientvoiceid()) {
      GOOGLE_DCHECK(!clientvoiceid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*clientvoiceid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_data()) {
      GOOGLE_DCHECK(data_ != NULL);
      data_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&offset_, 0, reinterpret_cast<char*>(&bitspersample_) -
      reinterpret_cast<char*>(&offset_) + sizeof(bitspersample_));
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ::memset(&voiceencodetype_, 0, reinterpret_cast<char*>(&extranamecount_) -
      reinterpret_cast<char*>(&voiceencodetype_) + sizeof(extranamecount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoiceAddrRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VoiceAddrRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string UserName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.VoiceAddrRequest.UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t Data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Offset = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ClientVoiceId = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientvoiceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientvoiceid().data(), this->clientvoiceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.VoiceAddrRequest.ClientVoiceId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 EndFlag = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_endflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 SamplePerSec = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_samplepersec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &samplepersec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 BitsPerSample = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_bitspersample();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bitspersample_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 VoiceEncodeType = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_voiceencodetype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &voiceencodetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 FileType = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_filetype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 SearchType = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_searchtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &searchtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ExtraNameCount = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_extranamecount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extranamecount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.SKBuiltinString_t ExtraNameUserNameList = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extranameusernamelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.SKBuiltinBuffer_t ExtraNameRemarkNameList = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extranameremarknamelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VoiceAddrRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VoiceAddrRequest)
  return false;
#undef DO_
}

void VoiceAddrRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VoiceAddrRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string UserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VoiceAddrRequest.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t Data = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->data_, output);
  }

  // required uint32 Offset = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->offset(), output);
  }

  // optional string ClientVoiceId = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientvoiceid().data(), this->clientvoiceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VoiceAddrRequest.ClientVoiceId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->clientvoiceid(), output);
  }

  // required uint32 EndFlag = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->endflag(), output);
  }

  // required uint32 SamplePerSec = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->samplepersec(), output);
  }

  // required uint32 BitsPerSample = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->bitspersample(), output);
  }

  // required uint32 VoiceEncodeType = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->voiceencodetype(), output);
  }

  // required uint32 FileType = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->filetype(), output);
  }

  // optional uint32 SearchType = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->searchtype(), output);
  }

  // optional uint32 ExtraNameCount = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->extranamecount(), output);
  }

  // repeated .micromsg.SKBuiltinString_t ExtraNameUserNameList = 13;
  for (unsigned int i = 0, n = this->extranameusernamelist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->extranameusernamelist(i), output);
  }

  // repeated .micromsg.SKBuiltinBuffer_t ExtraNameRemarkNameList = 14;
  for (unsigned int i = 0, n = this->extranameremarknamelist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->extranameremarknamelist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VoiceAddrRequest)
}

::google::protobuf::uint8* VoiceAddrRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VoiceAddrRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string UserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VoiceAddrRequest.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t Data = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->data_, deterministic, target);
  }

  // required uint32 Offset = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->offset(), target);
  }

  // optional string ClientVoiceId = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientvoiceid().data(), this->clientvoiceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VoiceAddrRequest.ClientVoiceId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->clientvoiceid(), target);
  }

  // required uint32 EndFlag = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->endflag(), target);
  }

  // required uint32 SamplePerSec = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->samplepersec(), target);
  }

  // required uint32 BitsPerSample = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->bitspersample(), target);
  }

  // required uint32 VoiceEncodeType = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->voiceencodetype(), target);
  }

  // required uint32 FileType = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->filetype(), target);
  }

  // optional uint32 SearchType = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->searchtype(), target);
  }

  // optional uint32 ExtraNameCount = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->extranamecount(), target);
  }

  // repeated .micromsg.SKBuiltinString_t ExtraNameUserNameList = 13;
  for (unsigned int i = 0, n = this->extranameusernamelist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->extranameusernamelist(i), deterministic, target);
  }

  // repeated .micromsg.SKBuiltinBuffer_t ExtraNameRemarkNameList = 14;
  for (unsigned int i = 0, n = this->extranameremarknamelist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, this->extranameremarknamelist(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VoiceAddrRequest)
  return target;
}

size_t VoiceAddrRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.VoiceAddrRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_data()) {
    // required .micromsg.SKBuiltinBuffer_t Data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  if (has_offset()) {
    // required uint32 Offset = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->offset());
  }

  if (has_endflag()) {
    // required uint32 EndFlag = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->endflag());
  }

  if (has_samplepersec()) {
    // required uint32 SamplePerSec = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->samplepersec());
  }

  if (has_bitspersample()) {
    // required uint32 BitsPerSample = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bitspersample());
  }

  if (has_voiceencodetype()) {
    // required uint32 VoiceEncodeType = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->voiceencodetype());
  }

  if (has_filetype()) {
    // required uint32 FileType = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->filetype());
  }

  return total_size;
}
size_t VoiceAddrRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VoiceAddrRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000003fc) ^ 0x000003fc) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.SKBuiltinBuffer_t Data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);

    // required uint32 Offset = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->offset());

    // required uint32 EndFlag = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->endflag());

    // required uint32 SamplePerSec = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->samplepersec());

    // required uint32 BitsPerSample = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bitspersample());

    // required uint32 VoiceEncodeType = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->voiceencodetype());

    // required uint32 FileType = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->filetype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.SKBuiltinString_t ExtraNameUserNameList = 13;
  {
    unsigned int count = this->extranameusernamelist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extranameusernamelist(i));
    }
  }

  // repeated .micromsg.SKBuiltinBuffer_t ExtraNameRemarkNameList = 14;
  {
    unsigned int count = this->extranameremarknamelist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extranameremarknamelist(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string UserName = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string ClientVoiceId = 5;
    if (has_clientvoiceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientvoiceid());
    }

  }
  if (_has_bits_[8 / 32] & 3072u) {
    // optional uint32 SearchType = 11;
    if (has_searchtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->searchtype());
    }

    // optional uint32 ExtraNameCount = 12;
    if (has_extranamecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extranamecount());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoiceAddrRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VoiceAddrRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const VoiceAddrRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoiceAddrRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VoiceAddrRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VoiceAddrRequest)
    MergeFrom(*source);
  }
}

void VoiceAddrRequest::MergeFrom(const VoiceAddrRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VoiceAddrRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  extranameusernamelist_.MergeFrom(from.extranameusernamelist_);
  extranameremarknamelist_.MergeFrom(from.extranameremarknamelist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_clientvoiceid();
      clientvoiceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientvoiceid_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_data()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.data());
    }
    if (cached_has_bits & 0x00000010u) {
      offset_ = from.offset_;
    }
    if (cached_has_bits & 0x00000020u) {
      endflag_ = from.endflag_;
    }
    if (cached_has_bits & 0x00000040u) {
      samplepersec_ = from.samplepersec_;
    }
    if (cached_has_bits & 0x00000080u) {
      bitspersample_ = from.bitspersample_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      voiceencodetype_ = from.voiceencodetype_;
    }
    if (cached_has_bits & 0x00000200u) {
      filetype_ = from.filetype_;
    }
    if (cached_has_bits & 0x00000400u) {
      searchtype_ = from.searchtype_;
    }
    if (cached_has_bits & 0x00000800u) {
      extranamecount_ = from.extranamecount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VoiceAddrRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VoiceAddrRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoiceAddrRequest::CopyFrom(const VoiceAddrRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VoiceAddrRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoiceAddrRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003fc) != 0x000003fc) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->extranameremarknamelist())) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_data()) {
    if (!this->data_->IsInitialized()) return false;
  }
  return true;
}

void VoiceAddrRequest::Swap(VoiceAddrRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoiceAddrRequest::InternalSwap(VoiceAddrRequest* other) {
  extranameusernamelist_.InternalSwap(&other->extranameusernamelist_);
  extranameremarknamelist_.InternalSwap(&other->extranameremarknamelist_);
  username_.Swap(&other->username_);
  clientvoiceid_.Swap(&other->clientvoiceid_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(data_, other->data_);
  std::swap(offset_, other->offset_);
  std::swap(endflag_, other->endflag_);
  std::swap(samplepersec_, other->samplepersec_);
  std::swap(bitspersample_, other->bitspersample_);
  std::swap(voiceencodetype_, other->voiceencodetype_);
  std::swap(filetype_, other->filetype_);
  std::swap(searchtype_, other->searchtype_);
  std::swap(extranamecount_, other->extranamecount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoiceAddrRequest::GetMetadata() const {
  protobuf_mmvoiceaddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiceaddr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoiceAddrRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool VoiceAddrRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VoiceAddrRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
void VoiceAddrRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
void VoiceAddrRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& VoiceAddrRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.VoiceAddrRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* VoiceAddrRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoiceAddrRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* VoiceAddrRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.VoiceAddrRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void VoiceAddrRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoiceAddrRequest.BaseRequest)
}

// optional string UserName = 2;
bool VoiceAddrRequest::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoiceAddrRequest::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void VoiceAddrRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoiceAddrRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& VoiceAddrRequest::username() const {
  // @@protoc_insertion_point(field_get:micromsg.VoiceAddrRequest.UserName)
  return username_.GetNoArena();
}
void VoiceAddrRequest::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VoiceAddrRequest.UserName)
}
#if LANG_CXX11
void VoiceAddrRequest::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VoiceAddrRequest.UserName)
}
#endif
void VoiceAddrRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VoiceAddrRequest.UserName)
}
void VoiceAddrRequest::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VoiceAddrRequest.UserName)
}
::std::string* VoiceAddrRequest::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.VoiceAddrRequest.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VoiceAddrRequest::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.VoiceAddrRequest.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VoiceAddrRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoiceAddrRequest.UserName)
}

// required .micromsg.SKBuiltinBuffer_t Data = 3;
bool VoiceAddrRequest::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VoiceAddrRequest::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
void VoiceAddrRequest::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
void VoiceAddrRequest::clear_data() {
  if (data_ != NULL) data_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_data();
}
const ::micromsg::SKBuiltinBuffer_t& VoiceAddrRequest::data() const {
  // @@protoc_insertion_point(field_get:micromsg.VoiceAddrRequest.Data)
  return data_ != NULL ? *data_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* VoiceAddrRequest::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoiceAddrRequest.Data)
  return data_;
}
::micromsg::SKBuiltinBuffer_t* VoiceAddrRequest::release_data() {
  // @@protoc_insertion_point(field_release:micromsg.VoiceAddrRequest.Data)
  clear_has_data();
  ::micromsg::SKBuiltinBuffer_t* temp = data_;
  data_ = NULL;
  return temp;
}
void VoiceAddrRequest::set_allocated_data(::micromsg::SKBuiltinBuffer_t* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoiceAddrRequest.Data)
}

// required uint32 Offset = 4;
bool VoiceAddrRequest::has_offset() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VoiceAddrRequest::set_has_offset() {
  _has_bits_[0] |= 0x00000010u;
}
void VoiceAddrRequest::clear_has_offset() {
  _has_bits_[0] &= ~0x00000010u;
}
void VoiceAddrRequest::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
::google::protobuf::uint32 VoiceAddrRequest::offset() const {
  // @@protoc_insertion_point(field_get:micromsg.VoiceAddrRequest.Offset)
  return offset_;
}
void VoiceAddrRequest::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoiceAddrRequest.Offset)
}

// optional string ClientVoiceId = 5;
bool VoiceAddrRequest::has_clientvoiceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VoiceAddrRequest::set_has_clientvoiceid() {
  _has_bits_[0] |= 0x00000002u;
}
void VoiceAddrRequest::clear_has_clientvoiceid() {
  _has_bits_[0] &= ~0x00000002u;
}
void VoiceAddrRequest::clear_clientvoiceid() {
  clientvoiceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientvoiceid();
}
const ::std::string& VoiceAddrRequest::clientvoiceid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoiceAddrRequest.ClientVoiceId)
  return clientvoiceid_.GetNoArena();
}
void VoiceAddrRequest::set_clientvoiceid(const ::std::string& value) {
  set_has_clientvoiceid();
  clientvoiceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VoiceAddrRequest.ClientVoiceId)
}
#if LANG_CXX11
void VoiceAddrRequest::set_clientvoiceid(::std::string&& value) {
  set_has_clientvoiceid();
  clientvoiceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VoiceAddrRequest.ClientVoiceId)
}
#endif
void VoiceAddrRequest::set_clientvoiceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientvoiceid();
  clientvoiceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VoiceAddrRequest.ClientVoiceId)
}
void VoiceAddrRequest::set_clientvoiceid(const char* value, size_t size) {
  set_has_clientvoiceid();
  clientvoiceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VoiceAddrRequest.ClientVoiceId)
}
::std::string* VoiceAddrRequest::mutable_clientvoiceid() {
  set_has_clientvoiceid();
  // @@protoc_insertion_point(field_mutable:micromsg.VoiceAddrRequest.ClientVoiceId)
  return clientvoiceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VoiceAddrRequest::release_clientvoiceid() {
  // @@protoc_insertion_point(field_release:micromsg.VoiceAddrRequest.ClientVoiceId)
  clear_has_clientvoiceid();
  return clientvoiceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VoiceAddrRequest::set_allocated_clientvoiceid(::std::string* clientvoiceid) {
  if (clientvoiceid != NULL) {
    set_has_clientvoiceid();
  } else {
    clear_has_clientvoiceid();
  }
  clientvoiceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientvoiceid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoiceAddrRequest.ClientVoiceId)
}

// required uint32 EndFlag = 6;
bool VoiceAddrRequest::has_endflag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VoiceAddrRequest::set_has_endflag() {
  _has_bits_[0] |= 0x00000020u;
}
void VoiceAddrRequest::clear_has_endflag() {
  _has_bits_[0] &= ~0x00000020u;
}
void VoiceAddrRequest::clear_endflag() {
  endflag_ = 0u;
  clear_has_endflag();
}
::google::protobuf::uint32 VoiceAddrRequest::endflag() const {
  // @@protoc_insertion_point(field_get:micromsg.VoiceAddrRequest.EndFlag)
  return endflag_;
}
void VoiceAddrRequest::set_endflag(::google::protobuf::uint32 value) {
  set_has_endflag();
  endflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoiceAddrRequest.EndFlag)
}

// required uint32 SamplePerSec = 7;
bool VoiceAddrRequest::has_samplepersec() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VoiceAddrRequest::set_has_samplepersec() {
  _has_bits_[0] |= 0x00000040u;
}
void VoiceAddrRequest::clear_has_samplepersec() {
  _has_bits_[0] &= ~0x00000040u;
}
void VoiceAddrRequest::clear_samplepersec() {
  samplepersec_ = 0u;
  clear_has_samplepersec();
}
::google::protobuf::uint32 VoiceAddrRequest::samplepersec() const {
  // @@protoc_insertion_point(field_get:micromsg.VoiceAddrRequest.SamplePerSec)
  return samplepersec_;
}
void VoiceAddrRequest::set_samplepersec(::google::protobuf::uint32 value) {
  set_has_samplepersec();
  samplepersec_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoiceAddrRequest.SamplePerSec)
}

// required uint32 BitsPerSample = 8;
bool VoiceAddrRequest::has_bitspersample() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VoiceAddrRequest::set_has_bitspersample() {
  _has_bits_[0] |= 0x00000080u;
}
void VoiceAddrRequest::clear_has_bitspersample() {
  _has_bits_[0] &= ~0x00000080u;
}
void VoiceAddrRequest::clear_bitspersample() {
  bitspersample_ = 0u;
  clear_has_bitspersample();
}
::google::protobuf::uint32 VoiceAddrRequest::bitspersample() const {
  // @@protoc_insertion_point(field_get:micromsg.VoiceAddrRequest.BitsPerSample)
  return bitspersample_;
}
void VoiceAddrRequest::set_bitspersample(::google::protobuf::uint32 value) {
  set_has_bitspersample();
  bitspersample_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoiceAddrRequest.BitsPerSample)
}

// required uint32 VoiceEncodeType = 9;
bool VoiceAddrRequest::has_voiceencodetype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void VoiceAddrRequest::set_has_voiceencodetype() {
  _has_bits_[0] |= 0x00000100u;
}
void VoiceAddrRequest::clear_has_voiceencodetype() {
  _has_bits_[0] &= ~0x00000100u;
}
void VoiceAddrRequest::clear_voiceencodetype() {
  voiceencodetype_ = 0u;
  clear_has_voiceencodetype();
}
::google::protobuf::uint32 VoiceAddrRequest::voiceencodetype() const {
  // @@protoc_insertion_point(field_get:micromsg.VoiceAddrRequest.VoiceEncodeType)
  return voiceencodetype_;
}
void VoiceAddrRequest::set_voiceencodetype(::google::protobuf::uint32 value) {
  set_has_voiceencodetype();
  voiceencodetype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoiceAddrRequest.VoiceEncodeType)
}

// required uint32 FileType = 10;
bool VoiceAddrRequest::has_filetype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void VoiceAddrRequest::set_has_filetype() {
  _has_bits_[0] |= 0x00000200u;
}
void VoiceAddrRequest::clear_has_filetype() {
  _has_bits_[0] &= ~0x00000200u;
}
void VoiceAddrRequest::clear_filetype() {
  filetype_ = 0u;
  clear_has_filetype();
}
::google::protobuf::uint32 VoiceAddrRequest::filetype() const {
  // @@protoc_insertion_point(field_get:micromsg.VoiceAddrRequest.FileType)
  return filetype_;
}
void VoiceAddrRequest::set_filetype(::google::protobuf::uint32 value) {
  set_has_filetype();
  filetype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoiceAddrRequest.FileType)
}

// optional uint32 SearchType = 11;
bool VoiceAddrRequest::has_searchtype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void VoiceAddrRequest::set_has_searchtype() {
  _has_bits_[0] |= 0x00000400u;
}
void VoiceAddrRequest::clear_has_searchtype() {
  _has_bits_[0] &= ~0x00000400u;
}
void VoiceAddrRequest::clear_searchtype() {
  searchtype_ = 0u;
  clear_has_searchtype();
}
::google::protobuf::uint32 VoiceAddrRequest::searchtype() const {
  // @@protoc_insertion_point(field_get:micromsg.VoiceAddrRequest.SearchType)
  return searchtype_;
}
void VoiceAddrRequest::set_searchtype(::google::protobuf::uint32 value) {
  set_has_searchtype();
  searchtype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoiceAddrRequest.SearchType)
}

// optional uint32 ExtraNameCount = 12;
bool VoiceAddrRequest::has_extranamecount() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void VoiceAddrRequest::set_has_extranamecount() {
  _has_bits_[0] |= 0x00000800u;
}
void VoiceAddrRequest::clear_has_extranamecount() {
  _has_bits_[0] &= ~0x00000800u;
}
void VoiceAddrRequest::clear_extranamecount() {
  extranamecount_ = 0u;
  clear_has_extranamecount();
}
::google::protobuf::uint32 VoiceAddrRequest::extranamecount() const {
  // @@protoc_insertion_point(field_get:micromsg.VoiceAddrRequest.ExtraNameCount)
  return extranamecount_;
}
void VoiceAddrRequest::set_extranamecount(::google::protobuf::uint32 value) {
  set_has_extranamecount();
  extranamecount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoiceAddrRequest.ExtraNameCount)
}

// repeated .micromsg.SKBuiltinString_t ExtraNameUserNameList = 13;
int VoiceAddrRequest::extranameusernamelist_size() const {
  return extranameusernamelist_.size();
}
void VoiceAddrRequest::clear_extranameusernamelist() {
  extranameusernamelist_.Clear();
}
const ::micromsg::SKBuiltinString_t& VoiceAddrRequest::extranameusernamelist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.VoiceAddrRequest.ExtraNameUserNameList)
  return extranameusernamelist_.Get(index);
}
::micromsg::SKBuiltinString_t* VoiceAddrRequest::mutable_extranameusernamelist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.VoiceAddrRequest.ExtraNameUserNameList)
  return extranameusernamelist_.Mutable(index);
}
::micromsg::SKBuiltinString_t* VoiceAddrRequest::add_extranameusernamelist() {
  // @@protoc_insertion_point(field_add:micromsg.VoiceAddrRequest.ExtraNameUserNameList)
  return extranameusernamelist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >*
VoiceAddrRequest::mutable_extranameusernamelist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.VoiceAddrRequest.ExtraNameUserNameList)
  return &extranameusernamelist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >&
VoiceAddrRequest::extranameusernamelist() const {
  // @@protoc_insertion_point(field_list:micromsg.VoiceAddrRequest.ExtraNameUserNameList)
  return extranameusernamelist_;
}

// repeated .micromsg.SKBuiltinBuffer_t ExtraNameRemarkNameList = 14;
int VoiceAddrRequest::extranameremarknamelist_size() const {
  return extranameremarknamelist_.size();
}
void VoiceAddrRequest::clear_extranameremarknamelist() {
  extranameremarknamelist_.Clear();
}
const ::micromsg::SKBuiltinBuffer_t& VoiceAddrRequest::extranameremarknamelist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.VoiceAddrRequest.ExtraNameRemarkNameList)
  return extranameremarknamelist_.Get(index);
}
::micromsg::SKBuiltinBuffer_t* VoiceAddrRequest::mutable_extranameremarknamelist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.VoiceAddrRequest.ExtraNameRemarkNameList)
  return extranameremarknamelist_.Mutable(index);
}
::micromsg::SKBuiltinBuffer_t* VoiceAddrRequest::add_extranameremarknamelist() {
  // @@protoc_insertion_point(field_add:micromsg.VoiceAddrRequest.ExtraNameRemarkNameList)
  return extranameremarknamelist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinBuffer_t >*
VoiceAddrRequest::mutable_extranameremarknamelist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.VoiceAddrRequest.ExtraNameRemarkNameList)
  return &extranameremarknamelist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinBuffer_t >&
VoiceAddrRequest::extranameremarknamelist() const {
  // @@protoc_insertion_point(field_list:micromsg.VoiceAddrRequest.ExtraNameRemarkNameList)
  return extranameremarknamelist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoiceAddrResponse::kBaseResponseFieldNumber;
const int VoiceAddrResponse::kEndFlagFieldNumber;
const int VoiceAddrResponse::kUserCountFieldNumber;
const int VoiceAddrResponse::kUserNameListFieldNumber;
const int VoiceAddrResponse::kReportFiledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoiceAddrResponse::VoiceAddrResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoiceaddr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VoiceAddrResponse)
}
VoiceAddrResponse::VoiceAddrResponse(const VoiceAddrResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      usernamelist_(from.usernamelist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reportfiled_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reportfiled()) {
    reportfiled_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reportfiled_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  ::memcpy(&endflag_, &from.endflag_,
    reinterpret_cast<char*>(&usercount_) -
    reinterpret_cast<char*>(&endflag_) + sizeof(usercount_));
  // @@protoc_insertion_point(copy_constructor:micromsg.VoiceAddrResponse)
}

void VoiceAddrResponse::SharedCtor() {
  _cached_size_ = 0;
  reportfiled_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&usercount_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(usercount_));
}

VoiceAddrResponse::~VoiceAddrResponse() {
  // @@protoc_insertion_point(destructor:micromsg.VoiceAddrResponse)
  SharedDtor();
}

void VoiceAddrResponse::SharedDtor() {
  reportfiled_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void VoiceAddrResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoiceAddrResponse::descriptor() {
  protobuf_mmvoiceaddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiceaddr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoiceAddrResponse& VoiceAddrResponse::default_instance() {
  protobuf_mmvoiceaddr_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoiceAddrResponse* VoiceAddrResponse::New(::google::protobuf::Arena* arena) const {
  VoiceAddrResponse* n = new VoiceAddrResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoiceAddrResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VoiceAddrResponse)
  usernamelist_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_reportfiled()) {
      GOOGLE_DCHECK(!reportfiled_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*reportfiled_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&endflag_, 0, reinterpret_cast<char*>(&usercount_) -
      reinterpret_cast<char*>(&endflag_) + sizeof(usercount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoiceAddrResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VoiceAddrResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 EndFlag = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_endflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 UserCount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_usercount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usercount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.SKBuiltinString_t UserNameList = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_usernamelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ReportFiled = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reportfiled()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reportfiled().data(), this->reportfiled().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.VoiceAddrResponse.ReportFiled");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VoiceAddrResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VoiceAddrResponse)
  return false;
#undef DO_
}

void VoiceAddrResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VoiceAddrResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 EndFlag = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->endflag(), output);
  }

  // required int32 UserCount = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->usercount(), output);
  }

  // repeated .micromsg.SKBuiltinString_t UserNameList = 4;
  for (unsigned int i = 0, n = this->usernamelist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->usernamelist(i), output);
  }

  // optional string ReportFiled = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reportfiled().data(), this->reportfiled().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VoiceAddrResponse.ReportFiled");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->reportfiled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VoiceAddrResponse)
}

::google::protobuf::uint8* VoiceAddrResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VoiceAddrResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 EndFlag = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->endflag(), target);
  }

  // required int32 UserCount = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->usercount(), target);
  }

  // repeated .micromsg.SKBuiltinString_t UserNameList = 4;
  for (unsigned int i = 0, n = this->usernamelist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->usernamelist(i), deterministic, target);
  }

  // optional string ReportFiled = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reportfiled().data(), this->reportfiled().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VoiceAddrResponse.ReportFiled");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->reportfiled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VoiceAddrResponse)
  return target;
}

size_t VoiceAddrResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.VoiceAddrResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_endflag()) {
    // required uint32 EndFlag = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->endflag());
  }

  if (has_usercount()) {
    // required int32 UserCount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->usercount());
  }

  return total_size;
}
size_t VoiceAddrResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VoiceAddrResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 EndFlag = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->endflag());

    // required int32 UserCount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->usercount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.SKBuiltinString_t UserNameList = 4;
  {
    unsigned int count = this->usernamelist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->usernamelist(i));
    }
  }

  // optional string ReportFiled = 5;
  if (has_reportfiled()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reportfiled());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoiceAddrResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VoiceAddrResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const VoiceAddrResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoiceAddrResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VoiceAddrResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VoiceAddrResponse)
    MergeFrom(*source);
  }
}

void VoiceAddrResponse::MergeFrom(const VoiceAddrResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VoiceAddrResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  usernamelist_.MergeFrom(from.usernamelist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_reportfiled();
      reportfiled_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reportfiled_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000004u) {
      endflag_ = from.endflag_;
    }
    if (cached_has_bits & 0x00000008u) {
      usercount_ = from.usercount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VoiceAddrResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VoiceAddrResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoiceAddrResponse::CopyFrom(const VoiceAddrResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VoiceAddrResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoiceAddrResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void VoiceAddrResponse::Swap(VoiceAddrResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoiceAddrResponse::InternalSwap(VoiceAddrResponse* other) {
  usernamelist_.InternalSwap(&other->usernamelist_);
  reportfiled_.Swap(&other->reportfiled_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(endflag_, other->endflag_);
  std::swap(usercount_, other->usercount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoiceAddrResponse::GetMetadata() const {
  protobuf_mmvoiceaddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiceaddr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoiceAddrResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool VoiceAddrResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VoiceAddrResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
void VoiceAddrResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
void VoiceAddrResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& VoiceAddrResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.VoiceAddrResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* VoiceAddrResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoiceAddrResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* VoiceAddrResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.VoiceAddrResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void VoiceAddrResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoiceAddrResponse.BaseResponse)
}

// required uint32 EndFlag = 2;
bool VoiceAddrResponse::has_endflag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VoiceAddrResponse::set_has_endflag() {
  _has_bits_[0] |= 0x00000004u;
}
void VoiceAddrResponse::clear_has_endflag() {
  _has_bits_[0] &= ~0x00000004u;
}
void VoiceAddrResponse::clear_endflag() {
  endflag_ = 0u;
  clear_has_endflag();
}
::google::protobuf::uint32 VoiceAddrResponse::endflag() const {
  // @@protoc_insertion_point(field_get:micromsg.VoiceAddrResponse.EndFlag)
  return endflag_;
}
void VoiceAddrResponse::set_endflag(::google::protobuf::uint32 value) {
  set_has_endflag();
  endflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoiceAddrResponse.EndFlag)
}

// required int32 UserCount = 3;
bool VoiceAddrResponse::has_usercount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VoiceAddrResponse::set_has_usercount() {
  _has_bits_[0] |= 0x00000008u;
}
void VoiceAddrResponse::clear_has_usercount() {
  _has_bits_[0] &= ~0x00000008u;
}
void VoiceAddrResponse::clear_usercount() {
  usercount_ = 0;
  clear_has_usercount();
}
::google::protobuf::int32 VoiceAddrResponse::usercount() const {
  // @@protoc_insertion_point(field_get:micromsg.VoiceAddrResponse.UserCount)
  return usercount_;
}
void VoiceAddrResponse::set_usercount(::google::protobuf::int32 value) {
  set_has_usercount();
  usercount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoiceAddrResponse.UserCount)
}

// repeated .micromsg.SKBuiltinString_t UserNameList = 4;
int VoiceAddrResponse::usernamelist_size() const {
  return usernamelist_.size();
}
void VoiceAddrResponse::clear_usernamelist() {
  usernamelist_.Clear();
}
const ::micromsg::SKBuiltinString_t& VoiceAddrResponse::usernamelist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.VoiceAddrResponse.UserNameList)
  return usernamelist_.Get(index);
}
::micromsg::SKBuiltinString_t* VoiceAddrResponse::mutable_usernamelist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.VoiceAddrResponse.UserNameList)
  return usernamelist_.Mutable(index);
}
::micromsg::SKBuiltinString_t* VoiceAddrResponse::add_usernamelist() {
  // @@protoc_insertion_point(field_add:micromsg.VoiceAddrResponse.UserNameList)
  return usernamelist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >*
VoiceAddrResponse::mutable_usernamelist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.VoiceAddrResponse.UserNameList)
  return &usernamelist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >&
VoiceAddrResponse::usernamelist() const {
  // @@protoc_insertion_point(field_list:micromsg.VoiceAddrResponse.UserNameList)
  return usernamelist_;
}

// optional string ReportFiled = 5;
bool VoiceAddrResponse::has_reportfiled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoiceAddrResponse::set_has_reportfiled() {
  _has_bits_[0] |= 0x00000001u;
}
void VoiceAddrResponse::clear_has_reportfiled() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoiceAddrResponse::clear_reportfiled() {
  reportfiled_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reportfiled();
}
const ::std::string& VoiceAddrResponse::reportfiled() const {
  // @@protoc_insertion_point(field_get:micromsg.VoiceAddrResponse.ReportFiled)
  return reportfiled_.GetNoArena();
}
void VoiceAddrResponse::set_reportfiled(const ::std::string& value) {
  set_has_reportfiled();
  reportfiled_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VoiceAddrResponse.ReportFiled)
}
#if LANG_CXX11
void VoiceAddrResponse::set_reportfiled(::std::string&& value) {
  set_has_reportfiled();
  reportfiled_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VoiceAddrResponse.ReportFiled)
}
#endif
void VoiceAddrResponse::set_reportfiled(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reportfiled();
  reportfiled_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VoiceAddrResponse.ReportFiled)
}
void VoiceAddrResponse::set_reportfiled(const char* value, size_t size) {
  set_has_reportfiled();
  reportfiled_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VoiceAddrResponse.ReportFiled)
}
::std::string* VoiceAddrResponse::mutable_reportfiled() {
  set_has_reportfiled();
  // @@protoc_insertion_point(field_mutable:micromsg.VoiceAddrResponse.ReportFiled)
  return reportfiled_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VoiceAddrResponse::release_reportfiled() {
  // @@protoc_insertion_point(field_release:micromsg.VoiceAddrResponse.ReportFiled)
  clear_has_reportfiled();
  return reportfiled_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VoiceAddrResponse::set_allocated_reportfiled(::std::string* reportfiled) {
  if (reportfiled != NULL) {
    set_has_reportfiled();
  } else {
    clear_has_reportfiled();
  }
  reportfiled_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reportfiled);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoiceAddrResponse.ReportFiled)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoiceAddrReportRequest::kBaseRequestFieldNumber;
const int VoiceAddrReportRequest::kHitPosFieldNumber;
const int VoiceAddrReportRequest::kHitUserNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoiceAddrReportRequest::VoiceAddrReportRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoiceaddr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VoiceAddrReportRequest)
}
VoiceAddrReportRequest::VoiceAddrReportRequest(const VoiceAddrReportRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hitusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hitusername()) {
    hitusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hitusername_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  hitpos_ = from.hitpos_;
  // @@protoc_insertion_point(copy_constructor:micromsg.VoiceAddrReportRequest)
}

void VoiceAddrReportRequest::SharedCtor() {
  _cached_size_ = 0;
  hitusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&hitpos_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(hitpos_));
}

VoiceAddrReportRequest::~VoiceAddrReportRequest() {
  // @@protoc_insertion_point(destructor:micromsg.VoiceAddrReportRequest)
  SharedDtor();
}

void VoiceAddrReportRequest::SharedDtor() {
  hitusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void VoiceAddrReportRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoiceAddrReportRequest::descriptor() {
  protobuf_mmvoiceaddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiceaddr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoiceAddrReportRequest& VoiceAddrReportRequest::default_instance() {
  protobuf_mmvoiceaddr_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoiceAddrReportRequest* VoiceAddrReportRequest::New(::google::protobuf::Arena* arena) const {
  VoiceAddrReportRequest* n = new VoiceAddrReportRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoiceAddrReportRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VoiceAddrReportRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_hitusername()) {
      GOOGLE_DCHECK(!hitusername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*hitusername_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  hitpos_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoiceAddrReportRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VoiceAddrReportRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 HitPos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_hitpos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hitpos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string HitUserName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hitusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hitusername().data(), this->hitusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.VoiceAddrReportRequest.HitUserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VoiceAddrReportRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VoiceAddrReportRequest)
  return false;
#undef DO_
}

void VoiceAddrReportRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VoiceAddrReportRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 HitPos = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hitpos(), output);
  }

  // optional string HitUserName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hitusername().data(), this->hitusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VoiceAddrReportRequest.HitUserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->hitusername(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VoiceAddrReportRequest)
}

::google::protobuf::uint8* VoiceAddrReportRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VoiceAddrReportRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 HitPos = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hitpos(), target);
  }

  // optional string HitUserName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hitusername().data(), this->hitusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VoiceAddrReportRequest.HitUserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hitusername(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VoiceAddrReportRequest)
  return target;
}

size_t VoiceAddrReportRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.VoiceAddrReportRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_hitpos()) {
    // required uint32 HitPos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hitpos());
  }

  return total_size;
}
size_t VoiceAddrReportRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VoiceAddrReportRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 HitPos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hitpos());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string HitUserName = 3;
  if (has_hitusername()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hitusername());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoiceAddrReportRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VoiceAddrReportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const VoiceAddrReportRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoiceAddrReportRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VoiceAddrReportRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VoiceAddrReportRequest)
    MergeFrom(*source);
  }
}

void VoiceAddrReportRequest::MergeFrom(const VoiceAddrReportRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VoiceAddrReportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_hitusername();
      hitusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hitusername_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000004u) {
      hitpos_ = from.hitpos_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VoiceAddrReportRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VoiceAddrReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoiceAddrReportRequest::CopyFrom(const VoiceAddrReportRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VoiceAddrReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoiceAddrReportRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void VoiceAddrReportRequest::Swap(VoiceAddrReportRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoiceAddrReportRequest::InternalSwap(VoiceAddrReportRequest* other) {
  hitusername_.Swap(&other->hitusername_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(hitpos_, other->hitpos_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoiceAddrReportRequest::GetMetadata() const {
  protobuf_mmvoiceaddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiceaddr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoiceAddrReportRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool VoiceAddrReportRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VoiceAddrReportRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void VoiceAddrReportRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void VoiceAddrReportRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& VoiceAddrReportRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.VoiceAddrReportRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* VoiceAddrReportRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoiceAddrReportRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* VoiceAddrReportRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.VoiceAddrReportRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void VoiceAddrReportRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoiceAddrReportRequest.BaseRequest)
}

// required uint32 HitPos = 2;
bool VoiceAddrReportRequest::has_hitpos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VoiceAddrReportRequest::set_has_hitpos() {
  _has_bits_[0] |= 0x00000004u;
}
void VoiceAddrReportRequest::clear_has_hitpos() {
  _has_bits_[0] &= ~0x00000004u;
}
void VoiceAddrReportRequest::clear_hitpos() {
  hitpos_ = 0u;
  clear_has_hitpos();
}
::google::protobuf::uint32 VoiceAddrReportRequest::hitpos() const {
  // @@protoc_insertion_point(field_get:micromsg.VoiceAddrReportRequest.HitPos)
  return hitpos_;
}
void VoiceAddrReportRequest::set_hitpos(::google::protobuf::uint32 value) {
  set_has_hitpos();
  hitpos_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoiceAddrReportRequest.HitPos)
}

// optional string HitUserName = 3;
bool VoiceAddrReportRequest::has_hitusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoiceAddrReportRequest::set_has_hitusername() {
  _has_bits_[0] |= 0x00000001u;
}
void VoiceAddrReportRequest::clear_has_hitusername() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoiceAddrReportRequest::clear_hitusername() {
  hitusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hitusername();
}
const ::std::string& VoiceAddrReportRequest::hitusername() const {
  // @@protoc_insertion_point(field_get:micromsg.VoiceAddrReportRequest.HitUserName)
  return hitusername_.GetNoArena();
}
void VoiceAddrReportRequest::set_hitusername(const ::std::string& value) {
  set_has_hitusername();
  hitusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VoiceAddrReportRequest.HitUserName)
}
#if LANG_CXX11
void VoiceAddrReportRequest::set_hitusername(::std::string&& value) {
  set_has_hitusername();
  hitusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VoiceAddrReportRequest.HitUserName)
}
#endif
void VoiceAddrReportRequest::set_hitusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hitusername();
  hitusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VoiceAddrReportRequest.HitUserName)
}
void VoiceAddrReportRequest::set_hitusername(const char* value, size_t size) {
  set_has_hitusername();
  hitusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VoiceAddrReportRequest.HitUserName)
}
::std::string* VoiceAddrReportRequest::mutable_hitusername() {
  set_has_hitusername();
  // @@protoc_insertion_point(field_mutable:micromsg.VoiceAddrReportRequest.HitUserName)
  return hitusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VoiceAddrReportRequest::release_hitusername() {
  // @@protoc_insertion_point(field_release:micromsg.VoiceAddrReportRequest.HitUserName)
  clear_has_hitusername();
  return hitusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VoiceAddrReportRequest::set_allocated_hitusername(::std::string* hitusername) {
  if (hitusername != NULL) {
    set_has_hitusername();
  } else {
    clear_has_hitusername();
  }
  hitusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hitusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoiceAddrReportRequest.HitUserName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoiceAddrReportResponse::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoiceAddrReportResponse::VoiceAddrReportResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoiceaddr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VoiceAddrReportResponse)
}
VoiceAddrReportResponse::VoiceAddrReportResponse(const VoiceAddrReportResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.VoiceAddrReportResponse)
}

void VoiceAddrReportResponse::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

VoiceAddrReportResponse::~VoiceAddrReportResponse() {
  // @@protoc_insertion_point(destructor:micromsg.VoiceAddrReportResponse)
  SharedDtor();
}

void VoiceAddrReportResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void VoiceAddrReportResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoiceAddrReportResponse::descriptor() {
  protobuf_mmvoiceaddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiceaddr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoiceAddrReportResponse& VoiceAddrReportResponse::default_instance() {
  protobuf_mmvoiceaddr_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoiceAddrReportResponse* VoiceAddrReportResponse::New(::google::protobuf::Arena* arena) const {
  VoiceAddrReportResponse* n = new VoiceAddrReportResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoiceAddrReportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VoiceAddrReportResponse)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoiceAddrReportResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VoiceAddrReportResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VoiceAddrReportResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VoiceAddrReportResponse)
  return false;
#undef DO_
}

void VoiceAddrReportResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VoiceAddrReportResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VoiceAddrReportResponse)
}

::google::protobuf::uint8* VoiceAddrReportResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VoiceAddrReportResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VoiceAddrReportResponse)
  return target;
}

size_t VoiceAddrReportResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VoiceAddrReportResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoiceAddrReportResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VoiceAddrReportResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const VoiceAddrReportResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoiceAddrReportResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VoiceAddrReportResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VoiceAddrReportResponse)
    MergeFrom(*source);
  }
}

void VoiceAddrReportResponse::MergeFrom(const VoiceAddrReportResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VoiceAddrReportResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void VoiceAddrReportResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VoiceAddrReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoiceAddrReportResponse::CopyFrom(const VoiceAddrReportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VoiceAddrReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoiceAddrReportResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void VoiceAddrReportResponse::Swap(VoiceAddrReportResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoiceAddrReportResponse::InternalSwap(VoiceAddrReportResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoiceAddrReportResponse::GetMetadata() const {
  protobuf_mmvoiceaddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiceaddr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoiceAddrReportResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool VoiceAddrReportResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoiceAddrReportResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void VoiceAddrReportResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoiceAddrReportResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& VoiceAddrReportResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.VoiceAddrReportResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* VoiceAddrReportResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoiceAddrReportResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* VoiceAddrReportResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.VoiceAddrReportResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void VoiceAddrReportResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoiceAddrReportResponse.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScanBarcodeRequest::kBaseRequestFieldNumber;
const int ScanBarcodeRequest::kTypeFieldNumber;
const int ScanBarcodeRequest::kBarcodeFieldNumber;
const int ScanBarcodeRequest::kSceneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScanBarcodeRequest::ScanBarcodeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoiceaddr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ScanBarcodeRequest)
}
ScanBarcodeRequest::ScanBarcodeRequest(const ScanBarcodeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  barcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_barcode()) {
    barcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.barcode_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&scene_) -
    reinterpret_cast<char*>(&type_) + sizeof(scene_));
  // @@protoc_insertion_point(copy_constructor:micromsg.ScanBarcodeRequest)
}

void ScanBarcodeRequest::SharedCtor() {
  _cached_size_ = 0;
  barcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&scene_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(scene_));
}

ScanBarcodeRequest::~ScanBarcodeRequest() {
  // @@protoc_insertion_point(destructor:micromsg.ScanBarcodeRequest)
  SharedDtor();
}

void ScanBarcodeRequest::SharedDtor() {
  barcode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void ScanBarcodeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScanBarcodeRequest::descriptor() {
  protobuf_mmvoiceaddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiceaddr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScanBarcodeRequest& ScanBarcodeRequest::default_instance() {
  protobuf_mmvoiceaddr_2eproto::InitDefaults();
  return *internal_default_instance();
}

ScanBarcodeRequest* ScanBarcodeRequest::New(::google::protobuf::Arena* arena) const {
  ScanBarcodeRequest* n = new ScanBarcodeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScanBarcodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ScanBarcodeRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_barcode()) {
      GOOGLE_DCHECK(!barcode_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*barcode_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&type_, 0, reinterpret_cast<char*>(&scene_) -
      reinterpret_cast<char*>(&type_) + sizeof(scene_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ScanBarcodeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ScanBarcodeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Barcode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_barcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->barcode().data(), this->barcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ScanBarcodeRequest.Barcode");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Scene = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_scene();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ScanBarcodeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ScanBarcodeRequest)
  return false;
#undef DO_
}

void ScanBarcodeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ScanBarcodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 Type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional string Barcode = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->barcode().data(), this->barcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ScanBarcodeRequest.Barcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->barcode(), output);
  }

  // optional uint32 Scene = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->scene(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ScanBarcodeRequest)
}

::google::protobuf::uint8* ScanBarcodeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ScanBarcodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 Type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional string Barcode = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->barcode().data(), this->barcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ScanBarcodeRequest.Barcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->barcode(), target);
  }

  // optional uint32 Scene = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->scene(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ScanBarcodeRequest)
  return target;
}

size_t ScanBarcodeRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.ScanBarcodeRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_type()) {
    // required uint32 Type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  return total_size;
}
size_t ScanBarcodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ScanBarcodeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 Type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string Barcode = 3;
  if (has_barcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->barcode());
  }

  // optional uint32 Scene = 4;
  if (has_scene()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScanBarcodeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ScanBarcodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ScanBarcodeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScanBarcodeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ScanBarcodeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ScanBarcodeRequest)
    MergeFrom(*source);
  }
}

void ScanBarcodeRequest::MergeFrom(const ScanBarcodeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ScanBarcodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_barcode();
      barcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.barcode_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      scene_ = from.scene_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScanBarcodeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ScanBarcodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanBarcodeRequest::CopyFrom(const ScanBarcodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ScanBarcodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanBarcodeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void ScanBarcodeRequest::Swap(ScanBarcodeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScanBarcodeRequest::InternalSwap(ScanBarcodeRequest* other) {
  barcode_.Swap(&other->barcode_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(type_, other->type_);
  std::swap(scene_, other->scene_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScanBarcodeRequest::GetMetadata() const {
  protobuf_mmvoiceaddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiceaddr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScanBarcodeRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool ScanBarcodeRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ScanBarcodeRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void ScanBarcodeRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void ScanBarcodeRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& ScanBarcodeRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.ScanBarcodeRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* ScanBarcodeRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ScanBarcodeRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* ScanBarcodeRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.ScanBarcodeRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void ScanBarcodeRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ScanBarcodeRequest.BaseRequest)
}

// required uint32 Type = 2;
bool ScanBarcodeRequest::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ScanBarcodeRequest::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void ScanBarcodeRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void ScanBarcodeRequest::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 ScanBarcodeRequest::type() const {
  // @@protoc_insertion_point(field_get:micromsg.ScanBarcodeRequest.Type)
  return type_;
}
void ScanBarcodeRequest::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ScanBarcodeRequest.Type)
}

// optional string Barcode = 3;
bool ScanBarcodeRequest::has_barcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ScanBarcodeRequest::set_has_barcode() {
  _has_bits_[0] |= 0x00000001u;
}
void ScanBarcodeRequest::clear_has_barcode() {
  _has_bits_[0] &= ~0x00000001u;
}
void ScanBarcodeRequest::clear_barcode() {
  barcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_barcode();
}
const ::std::string& ScanBarcodeRequest::barcode() const {
  // @@protoc_insertion_point(field_get:micromsg.ScanBarcodeRequest.Barcode)
  return barcode_.GetNoArena();
}
void ScanBarcodeRequest::set_barcode(const ::std::string& value) {
  set_has_barcode();
  barcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ScanBarcodeRequest.Barcode)
}
#if LANG_CXX11
void ScanBarcodeRequest::set_barcode(::std::string&& value) {
  set_has_barcode();
  barcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ScanBarcodeRequest.Barcode)
}
#endif
void ScanBarcodeRequest::set_barcode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_barcode();
  barcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ScanBarcodeRequest.Barcode)
}
void ScanBarcodeRequest::set_barcode(const char* value, size_t size) {
  set_has_barcode();
  barcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ScanBarcodeRequest.Barcode)
}
::std::string* ScanBarcodeRequest::mutable_barcode() {
  set_has_barcode();
  // @@protoc_insertion_point(field_mutable:micromsg.ScanBarcodeRequest.Barcode)
  return barcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ScanBarcodeRequest::release_barcode() {
  // @@protoc_insertion_point(field_release:micromsg.ScanBarcodeRequest.Barcode)
  clear_has_barcode();
  return barcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ScanBarcodeRequest::set_allocated_barcode(::std::string* barcode) {
  if (barcode != NULL) {
    set_has_barcode();
  } else {
    clear_has_barcode();
  }
  barcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), barcode);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ScanBarcodeRequest.Barcode)
}

// optional uint32 Scene = 4;
bool ScanBarcodeRequest::has_scene() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ScanBarcodeRequest::set_has_scene() {
  _has_bits_[0] |= 0x00000008u;
}
void ScanBarcodeRequest::clear_has_scene() {
  _has_bits_[0] &= ~0x00000008u;
}
void ScanBarcodeRequest::clear_scene() {
  scene_ = 0u;
  clear_has_scene();
}
::google::protobuf::uint32 ScanBarcodeRequest::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.ScanBarcodeRequest.Scene)
  return scene_;
}
void ScanBarcodeRequest::set_scene(::google::protobuf::uint32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ScanBarcodeRequest.Scene)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScanBarcodeResponse::kBaseResponseFieldNumber;
const int ScanBarcodeResponse::kTypeFieldNumber;
const int ScanBarcodeResponse::kDescXMLFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScanBarcodeResponse::ScanBarcodeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoiceaddr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ScanBarcodeResponse)
}
ScanBarcodeResponse::ScanBarcodeResponse(const ScanBarcodeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  descxml_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_descxml()) {
    descxml_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.descxml_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:micromsg.ScanBarcodeResponse)
}

void ScanBarcodeResponse::SharedCtor() {
  _cached_size_ = 0;
  descxml_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(type_));
}

ScanBarcodeResponse::~ScanBarcodeResponse() {
  // @@protoc_insertion_point(destructor:micromsg.ScanBarcodeResponse)
  SharedDtor();
}

void ScanBarcodeResponse::SharedDtor() {
  descxml_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void ScanBarcodeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScanBarcodeResponse::descriptor() {
  protobuf_mmvoiceaddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiceaddr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScanBarcodeResponse& ScanBarcodeResponse::default_instance() {
  protobuf_mmvoiceaddr_2eproto::InitDefaults();
  return *internal_default_instance();
}

ScanBarcodeResponse* ScanBarcodeResponse::New(::google::protobuf::Arena* arena) const {
  ScanBarcodeResponse* n = new ScanBarcodeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScanBarcodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ScanBarcodeResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_descxml()) {
      GOOGLE_DCHECK(!descxml_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*descxml_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ScanBarcodeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ScanBarcodeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string DescXML = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_descxml()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->descxml().data(), this->descxml().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ScanBarcodeResponse.DescXML");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ScanBarcodeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ScanBarcodeResponse)
  return false;
#undef DO_
}

void ScanBarcodeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ScanBarcodeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 Type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional string DescXML = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->descxml().data(), this->descxml().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ScanBarcodeResponse.DescXML");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->descxml(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ScanBarcodeResponse)
}

::google::protobuf::uint8* ScanBarcodeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ScanBarcodeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 Type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional string DescXML = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->descxml().data(), this->descxml().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ScanBarcodeResponse.DescXML");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->descxml(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ScanBarcodeResponse)
  return target;
}

size_t ScanBarcodeResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.ScanBarcodeResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_type()) {
    // required uint32 Type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  return total_size;
}
size_t ScanBarcodeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ScanBarcodeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 Type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string DescXML = 3;
  if (has_descxml()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->descxml());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScanBarcodeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ScanBarcodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ScanBarcodeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScanBarcodeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ScanBarcodeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ScanBarcodeResponse)
    MergeFrom(*source);
  }
}

void ScanBarcodeResponse::MergeFrom(const ScanBarcodeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ScanBarcodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_descxml();
      descxml_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.descxml_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScanBarcodeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ScanBarcodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanBarcodeResponse::CopyFrom(const ScanBarcodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ScanBarcodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanBarcodeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void ScanBarcodeResponse::Swap(ScanBarcodeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScanBarcodeResponse::InternalSwap(ScanBarcodeResponse* other) {
  descxml_.Swap(&other->descxml_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScanBarcodeResponse::GetMetadata() const {
  protobuf_mmvoiceaddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiceaddr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScanBarcodeResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool ScanBarcodeResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ScanBarcodeResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
void ScanBarcodeResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
void ScanBarcodeResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& ScanBarcodeResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.ScanBarcodeResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* ScanBarcodeResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ScanBarcodeResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* ScanBarcodeResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.ScanBarcodeResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void ScanBarcodeResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ScanBarcodeResponse.BaseResponse)
}

// required uint32 Type = 2;
bool ScanBarcodeResponse::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ScanBarcodeResponse::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void ScanBarcodeResponse::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void ScanBarcodeResponse::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 ScanBarcodeResponse::type() const {
  // @@protoc_insertion_point(field_get:micromsg.ScanBarcodeResponse.Type)
  return type_;
}
void ScanBarcodeResponse::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ScanBarcodeResponse.Type)
}

// optional string DescXML = 3;
bool ScanBarcodeResponse::has_descxml() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ScanBarcodeResponse::set_has_descxml() {
  _has_bits_[0] |= 0x00000001u;
}
void ScanBarcodeResponse::clear_has_descxml() {
  _has_bits_[0] &= ~0x00000001u;
}
void ScanBarcodeResponse::clear_descxml() {
  descxml_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_descxml();
}
const ::std::string& ScanBarcodeResponse::descxml() const {
  // @@protoc_insertion_point(field_get:micromsg.ScanBarcodeResponse.DescXML)
  return descxml_.GetNoArena();
}
void ScanBarcodeResponse::set_descxml(const ::std::string& value) {
  set_has_descxml();
  descxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ScanBarcodeResponse.DescXML)
}
#if LANG_CXX11
void ScanBarcodeResponse::set_descxml(::std::string&& value) {
  set_has_descxml();
  descxml_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ScanBarcodeResponse.DescXML)
}
#endif
void ScanBarcodeResponse::set_descxml(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_descxml();
  descxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ScanBarcodeResponse.DescXML)
}
void ScanBarcodeResponse::set_descxml(const char* value, size_t size) {
  set_has_descxml();
  descxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ScanBarcodeResponse.DescXML)
}
::std::string* ScanBarcodeResponse::mutable_descxml() {
  set_has_descxml();
  // @@protoc_insertion_point(field_mutable:micromsg.ScanBarcodeResponse.DescXML)
  return descxml_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ScanBarcodeResponse::release_descxml() {
  // @@protoc_insertion_point(field_release:micromsg.ScanBarcodeResponse.DescXML)
  clear_has_descxml();
  return descxml_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ScanBarcodeResponse::set_allocated_descxml(::std::string* descxml) {
  if (descxml != NULL) {
    set_has_descxml();
  } else {
    clear_has_descxml();
  }
  descxml_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), descxml);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ScanBarcodeResponse.DescXML)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScanImageRequest::kBaseRequestFieldNumber;
const int ScanImageRequest::kClientScanIDFieldNumber;
const int ScanImageRequest::kImageBufferFieldNumber;
const int ScanImageRequest::kTotalLengthFieldNumber;
const int ScanImageRequest::kOffsetFieldNumber;
const int ScanImageRequest::kEndFlagFieldNumber;
const int ScanImageRequest::kImageTypeFieldNumber;
const int ScanImageRequest::kOPCodeFieldNumber;
const int ScanImageRequest::kSessionIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScanImageRequest::ScanImageRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoiceaddr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ScanImageRequest)
}
ScanImageRequest::ScanImageRequest(const ScanImageRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_imagebuffer()) {
    imagebuffer_ = new ::micromsg::SKBuiltinBuffer_t(*from.imagebuffer_);
  } else {
    imagebuffer_ = NULL;
  }
  ::memcpy(&clientscanid_, &from.clientscanid_,
    reinterpret_cast<char*>(&sessionid_) -
    reinterpret_cast<char*>(&clientscanid_) + sizeof(sessionid_));
  // @@protoc_insertion_point(copy_constructor:micromsg.ScanImageRequest)
}

void ScanImageRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&sessionid_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(sessionid_));
}

ScanImageRequest::~ScanImageRequest() {
  // @@protoc_insertion_point(destructor:micromsg.ScanImageRequest)
  SharedDtor();
}

void ScanImageRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete imagebuffer_;
  }
}

void ScanImageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScanImageRequest::descriptor() {
  protobuf_mmvoiceaddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiceaddr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScanImageRequest& ScanImageRequest::default_instance() {
  protobuf_mmvoiceaddr_2eproto::InitDefaults();
  return *internal_default_instance();
}

ScanImageRequest* ScanImageRequest::New(::google::protobuf::Arena* arena) const {
  ScanImageRequest* n = new ScanImageRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScanImageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ScanImageRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_imagebuffer()) {
      GOOGLE_DCHECK(imagebuffer_ != NULL);
      imagebuffer_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&clientscanid_, 0, reinterpret_cast<char*>(&opcode_) -
      reinterpret_cast<char*>(&clientscanid_) + sizeof(opcode_));
  }
  sessionid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ScanImageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ScanImageRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ClientScanID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_clientscanid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientscanid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t ImageBuffer = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imagebuffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 TotalLength = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_totallength();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totallength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Offset = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 EndFlag = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_endflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ImageType = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_imagetype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &imagetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 OPCode = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_opcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 SessionID = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_sessionid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ScanImageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ScanImageRequest)
  return false;
#undef DO_
}

void ScanImageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ScanImageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 ClientScanID = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->clientscanid(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t ImageBuffer = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->imagebuffer_, output);
  }

  // required uint32 TotalLength = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->totallength(), output);
  }

  // required uint32 Offset = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->offset(), output);
  }

  // required uint32 EndFlag = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->endflag(), output);
  }

  // required uint32 ImageType = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->imagetype(), output);
  }

  // optional uint32 OPCode = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->opcode(), output);
  }

  // optional uint32 SessionID = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->sessionid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ScanImageRequest)
}

::google::protobuf::uint8* ScanImageRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ScanImageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 ClientScanID = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->clientscanid(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t ImageBuffer = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->imagebuffer_, deterministic, target);
  }

  // required uint32 TotalLength = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->totallength(), target);
  }

  // required uint32 Offset = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->offset(), target);
  }

  // required uint32 EndFlag = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->endflag(), target);
  }

  // required uint32 ImageType = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->imagetype(), target);
  }

  // optional uint32 OPCode = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->opcode(), target);
  }

  // optional uint32 SessionID = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->sessionid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ScanImageRequest)
  return target;
}

size_t ScanImageRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.ScanImageRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_imagebuffer()) {
    // required .micromsg.SKBuiltinBuffer_t ImageBuffer = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imagebuffer_);
  }

  if (has_clientscanid()) {
    // required uint32 ClientScanID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->clientscanid());
  }

  if (has_totallength()) {
    // required uint32 TotalLength = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totallength());
  }

  if (has_offset()) {
    // required uint32 Offset = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->offset());
  }

  if (has_endflag()) {
    // required uint32 EndFlag = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->endflag());
  }

  if (has_imagetype()) {
    // required uint32 ImageType = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->imagetype());
  }

  return total_size;
}
size_t ScanImageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ScanImageRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.SKBuiltinBuffer_t ImageBuffer = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imagebuffer_);

    // required uint32 ClientScanID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->clientscanid());

    // required uint32 TotalLength = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totallength());

    // required uint32 Offset = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->offset());

    // required uint32 EndFlag = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->endflag());

    // required uint32 ImageType = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->imagetype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint32 OPCode = 8;
  if (has_opcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());
  }

  // optional uint32 SessionID = 9;
  if (has_sessionid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sessionid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScanImageRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ScanImageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ScanImageRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScanImageRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ScanImageRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ScanImageRequest)
    MergeFrom(*source);
  }
}

void ScanImageRequest::MergeFrom(const ScanImageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ScanImageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_imagebuffer()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.imagebuffer());
    }
    if (cached_has_bits & 0x00000004u) {
      clientscanid_ = from.clientscanid_;
    }
    if (cached_has_bits & 0x00000008u) {
      totallength_ = from.totallength_;
    }
    if (cached_has_bits & 0x00000010u) {
      offset_ = from.offset_;
    }
    if (cached_has_bits & 0x00000020u) {
      endflag_ = from.endflag_;
    }
    if (cached_has_bits & 0x00000040u) {
      imagetype_ = from.imagetype_;
    }
    if (cached_has_bits & 0x00000080u) {
      opcode_ = from.opcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_sessionid(from.sessionid());
  }
}

void ScanImageRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ScanImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanImageRequest::CopyFrom(const ScanImageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ScanImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanImageRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_imagebuffer()) {
    if (!this->imagebuffer_->IsInitialized()) return false;
  }
  return true;
}

void ScanImageRequest::Swap(ScanImageRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScanImageRequest::InternalSwap(ScanImageRequest* other) {
  std::swap(baserequest_, other->baserequest_);
  std::swap(imagebuffer_, other->imagebuffer_);
  std::swap(clientscanid_, other->clientscanid_);
  std::swap(totallength_, other->totallength_);
  std::swap(offset_, other->offset_);
  std::swap(endflag_, other->endflag_);
  std::swap(imagetype_, other->imagetype_);
  std::swap(opcode_, other->opcode_);
  std::swap(sessionid_, other->sessionid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScanImageRequest::GetMetadata() const {
  protobuf_mmvoiceaddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiceaddr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScanImageRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool ScanImageRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ScanImageRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void ScanImageRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void ScanImageRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& ScanImageRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.ScanImageRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* ScanImageRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ScanImageRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* ScanImageRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.ScanImageRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void ScanImageRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ScanImageRequest.BaseRequest)
}

// required uint32 ClientScanID = 2;
bool ScanImageRequest::has_clientscanid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ScanImageRequest::set_has_clientscanid() {
  _has_bits_[0] |= 0x00000004u;
}
void ScanImageRequest::clear_has_clientscanid() {
  _has_bits_[0] &= ~0x00000004u;
}
void ScanImageRequest::clear_clientscanid() {
  clientscanid_ = 0u;
  clear_has_clientscanid();
}
::google::protobuf::uint32 ScanImageRequest::clientscanid() const {
  // @@protoc_insertion_point(field_get:micromsg.ScanImageRequest.ClientScanID)
  return clientscanid_;
}
void ScanImageRequest::set_clientscanid(::google::protobuf::uint32 value) {
  set_has_clientscanid();
  clientscanid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ScanImageRequest.ClientScanID)
}

// required .micromsg.SKBuiltinBuffer_t ImageBuffer = 3;
bool ScanImageRequest::has_imagebuffer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ScanImageRequest::set_has_imagebuffer() {
  _has_bits_[0] |= 0x00000002u;
}
void ScanImageRequest::clear_has_imagebuffer() {
  _has_bits_[0] &= ~0x00000002u;
}
void ScanImageRequest::clear_imagebuffer() {
  if (imagebuffer_ != NULL) imagebuffer_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_imagebuffer();
}
const ::micromsg::SKBuiltinBuffer_t& ScanImageRequest::imagebuffer() const {
  // @@protoc_insertion_point(field_get:micromsg.ScanImageRequest.ImageBuffer)
  return imagebuffer_ != NULL ? *imagebuffer_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* ScanImageRequest::mutable_imagebuffer() {
  set_has_imagebuffer();
  if (imagebuffer_ == NULL) {
    imagebuffer_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ScanImageRequest.ImageBuffer)
  return imagebuffer_;
}
::micromsg::SKBuiltinBuffer_t* ScanImageRequest::release_imagebuffer() {
  // @@protoc_insertion_point(field_release:micromsg.ScanImageRequest.ImageBuffer)
  clear_has_imagebuffer();
  ::micromsg::SKBuiltinBuffer_t* temp = imagebuffer_;
  imagebuffer_ = NULL;
  return temp;
}
void ScanImageRequest::set_allocated_imagebuffer(::micromsg::SKBuiltinBuffer_t* imagebuffer) {
  delete imagebuffer_;
  imagebuffer_ = imagebuffer;
  if (imagebuffer) {
    set_has_imagebuffer();
  } else {
    clear_has_imagebuffer();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ScanImageRequest.ImageBuffer)
}

// required uint32 TotalLength = 4;
bool ScanImageRequest::has_totallength() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ScanImageRequest::set_has_totallength() {
  _has_bits_[0] |= 0x00000008u;
}
void ScanImageRequest::clear_has_totallength() {
  _has_bits_[0] &= ~0x00000008u;
}
void ScanImageRequest::clear_totallength() {
  totallength_ = 0u;
  clear_has_totallength();
}
::google::protobuf::uint32 ScanImageRequest::totallength() const {
  // @@protoc_insertion_point(field_get:micromsg.ScanImageRequest.TotalLength)
  return totallength_;
}
void ScanImageRequest::set_totallength(::google::protobuf::uint32 value) {
  set_has_totallength();
  totallength_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ScanImageRequest.TotalLength)
}

// required uint32 Offset = 5;
bool ScanImageRequest::has_offset() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ScanImageRequest::set_has_offset() {
  _has_bits_[0] |= 0x00000010u;
}
void ScanImageRequest::clear_has_offset() {
  _has_bits_[0] &= ~0x00000010u;
}
void ScanImageRequest::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
::google::protobuf::uint32 ScanImageRequest::offset() const {
  // @@protoc_insertion_point(field_get:micromsg.ScanImageRequest.Offset)
  return offset_;
}
void ScanImageRequest::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ScanImageRequest.Offset)
}

// required uint32 EndFlag = 6;
bool ScanImageRequest::has_endflag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ScanImageRequest::set_has_endflag() {
  _has_bits_[0] |= 0x00000020u;
}
void ScanImageRequest::clear_has_endflag() {
  _has_bits_[0] &= ~0x00000020u;
}
void ScanImageRequest::clear_endflag() {
  endflag_ = 0u;
  clear_has_endflag();
}
::google::protobuf::uint32 ScanImageRequest::endflag() const {
  // @@protoc_insertion_point(field_get:micromsg.ScanImageRequest.EndFlag)
  return endflag_;
}
void ScanImageRequest::set_endflag(::google::protobuf::uint32 value) {
  set_has_endflag();
  endflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ScanImageRequest.EndFlag)
}

// required uint32 ImageType = 7;
bool ScanImageRequest::has_imagetype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ScanImageRequest::set_has_imagetype() {
  _has_bits_[0] |= 0x00000040u;
}
void ScanImageRequest::clear_has_imagetype() {
  _has_bits_[0] &= ~0x00000040u;
}
void ScanImageRequest::clear_imagetype() {
  imagetype_ = 0u;
  clear_has_imagetype();
}
::google::protobuf::uint32 ScanImageRequest::imagetype() const {
  // @@protoc_insertion_point(field_get:micromsg.ScanImageRequest.ImageType)
  return imagetype_;
}
void ScanImageRequest::set_imagetype(::google::protobuf::uint32 value) {
  set_has_imagetype();
  imagetype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ScanImageRequest.ImageType)
}

// optional uint32 OPCode = 8;
bool ScanImageRequest::has_opcode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ScanImageRequest::set_has_opcode() {
  _has_bits_[0] |= 0x00000080u;
}
void ScanImageRequest::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000080u;
}
void ScanImageRequest::clear_opcode() {
  opcode_ = 0u;
  clear_has_opcode();
}
::google::protobuf::uint32 ScanImageRequest::opcode() const {
  // @@protoc_insertion_point(field_get:micromsg.ScanImageRequest.OPCode)
  return opcode_;
}
void ScanImageRequest::set_opcode(::google::protobuf::uint32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ScanImageRequest.OPCode)
}

// optional uint32 SessionID = 9;
bool ScanImageRequest::has_sessionid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ScanImageRequest::set_has_sessionid() {
  _has_bits_[0] |= 0x00000100u;
}
void ScanImageRequest::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000100u;
}
void ScanImageRequest::clear_sessionid() {
  sessionid_ = 0u;
  clear_has_sessionid();
}
::google::protobuf::uint32 ScanImageRequest::sessionid() const {
  // @@protoc_insertion_point(field_get:micromsg.ScanImageRequest.SessionID)
  return sessionid_;
}
void ScanImageRequest::set_sessionid(::google::protobuf::uint32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ScanImageRequest.SessionID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScanImageResponse::kBaseResponseFieldNumber;
const int ScanImageResponse::kClientScanIDFieldNumber;
const int ScanImageResponse::kTypeFieldNumber;
const int ScanImageResponse::kDescriptionXMLFieldNumber;
const int ScanImageResponse::kEndFlagFieldNumber;
const int ScanImageResponse::kImageTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScanImageResponse::ScanImageResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoiceaddr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ScanImageResponse)
}
ScanImageResponse::ScanImageResponse(const ScanImageResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  descriptionxml_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_descriptionxml()) {
    descriptionxml_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.descriptionxml_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  ::memcpy(&clientscanid_, &from.clientscanid_,
    reinterpret_cast<char*>(&imagetype_) -
    reinterpret_cast<char*>(&clientscanid_) + sizeof(imagetype_));
  // @@protoc_insertion_point(copy_constructor:micromsg.ScanImageResponse)
}

void ScanImageResponse::SharedCtor() {
  _cached_size_ = 0;
  descriptionxml_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&imagetype_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(imagetype_));
}

ScanImageResponse::~ScanImageResponse() {
  // @@protoc_insertion_point(destructor:micromsg.ScanImageResponse)
  SharedDtor();
}

void ScanImageResponse::SharedDtor() {
  descriptionxml_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void ScanImageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScanImageResponse::descriptor() {
  protobuf_mmvoiceaddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiceaddr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScanImageResponse& ScanImageResponse::default_instance() {
  protobuf_mmvoiceaddr_2eproto::InitDefaults();
  return *internal_default_instance();
}

ScanImageResponse* ScanImageResponse::New(::google::protobuf::Arena* arena) const {
  ScanImageResponse* n = new ScanImageResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScanImageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ScanImageResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_descriptionxml()) {
      GOOGLE_DCHECK(!descriptionxml_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*descriptionxml_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 60u) {
    ::memset(&clientscanid_, 0, reinterpret_cast<char*>(&imagetype_) -
      reinterpret_cast<char*>(&clientscanid_) + sizeof(imagetype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ScanImageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ScanImageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ClientScanID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_clientscanid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientscanid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string DescriptionXML = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_descriptionxml()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->descriptionxml().data(), this->descriptionxml().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ScanImageResponse.DescriptionXML");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 EndFlag = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_endflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ImageType = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_imagetype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &imagetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ScanImageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ScanImageResponse)
  return false;
#undef DO_
}

void ScanImageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ScanImageResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 ClientScanID = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->clientscanid(), output);
  }

  // required uint32 Type = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // optional string DescriptionXML = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->descriptionxml().data(), this->descriptionxml().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ScanImageResponse.DescriptionXML");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->descriptionxml(), output);
  }

  // required uint32 EndFlag = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->endflag(), output);
  }

  // required uint32 ImageType = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->imagetype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ScanImageResponse)
}

::google::protobuf::uint8* ScanImageResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ScanImageResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 ClientScanID = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->clientscanid(), target);
  }

  // required uint32 Type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // optional string DescriptionXML = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->descriptionxml().data(), this->descriptionxml().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ScanImageResponse.DescriptionXML");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->descriptionxml(), target);
  }

  // required uint32 EndFlag = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->endflag(), target);
  }

  // required uint32 ImageType = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->imagetype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ScanImageResponse)
  return target;
}

size_t ScanImageResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.ScanImageResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_clientscanid()) {
    // required uint32 ClientScanID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->clientscanid());
  }

  if (has_type()) {
    // required uint32 Type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_endflag()) {
    // required uint32 EndFlag = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->endflag());
  }

  if (has_imagetype()) {
    // required uint32 ImageType = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->imagetype());
  }

  return total_size;
}
size_t ScanImageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ScanImageResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003e) ^ 0x0000003e) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 ClientScanID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->clientscanid());

    // required uint32 Type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required uint32 EndFlag = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->endflag());

    // required uint32 ImageType = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->imagetype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string DescriptionXML = 4;
  if (has_descriptionxml()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->descriptionxml());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScanImageResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ScanImageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ScanImageResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScanImageResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ScanImageResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ScanImageResponse)
    MergeFrom(*source);
  }
}

void ScanImageResponse::MergeFrom(const ScanImageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ScanImageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_descriptionxml();
      descriptionxml_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.descriptionxml_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000004u) {
      clientscanid_ = from.clientscanid_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      endflag_ = from.endflag_;
    }
    if (cached_has_bits & 0x00000020u) {
      imagetype_ = from.imagetype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScanImageResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ScanImageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanImageResponse::CopyFrom(const ScanImageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ScanImageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanImageResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003e) != 0x0000003e) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void ScanImageResponse::Swap(ScanImageResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScanImageResponse::InternalSwap(ScanImageResponse* other) {
  descriptionxml_.Swap(&other->descriptionxml_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(clientscanid_, other->clientscanid_);
  std::swap(type_, other->type_);
  std::swap(endflag_, other->endflag_);
  std::swap(imagetype_, other->imagetype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScanImageResponse::GetMetadata() const {
  protobuf_mmvoiceaddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiceaddr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScanImageResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool ScanImageResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ScanImageResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
void ScanImageResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
void ScanImageResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& ScanImageResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.ScanImageResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* ScanImageResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ScanImageResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* ScanImageResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.ScanImageResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void ScanImageResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ScanImageResponse.BaseResponse)
}

// required uint32 ClientScanID = 2;
bool ScanImageResponse::has_clientscanid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ScanImageResponse::set_has_clientscanid() {
  _has_bits_[0] |= 0x00000004u;
}
void ScanImageResponse::clear_has_clientscanid() {
  _has_bits_[0] &= ~0x00000004u;
}
void ScanImageResponse::clear_clientscanid() {
  clientscanid_ = 0u;
  clear_has_clientscanid();
}
::google::protobuf::uint32 ScanImageResponse::clientscanid() const {
  // @@protoc_insertion_point(field_get:micromsg.ScanImageResponse.ClientScanID)
  return clientscanid_;
}
void ScanImageResponse::set_clientscanid(::google::protobuf::uint32 value) {
  set_has_clientscanid();
  clientscanid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ScanImageResponse.ClientScanID)
}

// required uint32 Type = 3;
bool ScanImageResponse::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ScanImageResponse::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void ScanImageResponse::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void ScanImageResponse::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 ScanImageResponse::type() const {
  // @@protoc_insertion_point(field_get:micromsg.ScanImageResponse.Type)
  return type_;
}
void ScanImageResponse::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ScanImageResponse.Type)
}

// optional string DescriptionXML = 4;
bool ScanImageResponse::has_descriptionxml() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ScanImageResponse::set_has_descriptionxml() {
  _has_bits_[0] |= 0x00000001u;
}
void ScanImageResponse::clear_has_descriptionxml() {
  _has_bits_[0] &= ~0x00000001u;
}
void ScanImageResponse::clear_descriptionxml() {
  descriptionxml_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_descriptionxml();
}
const ::std::string& ScanImageResponse::descriptionxml() const {
  // @@protoc_insertion_point(field_get:micromsg.ScanImageResponse.DescriptionXML)
  return descriptionxml_.GetNoArena();
}
void ScanImageResponse::set_descriptionxml(const ::std::string& value) {
  set_has_descriptionxml();
  descriptionxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ScanImageResponse.DescriptionXML)
}
#if LANG_CXX11
void ScanImageResponse::set_descriptionxml(::std::string&& value) {
  set_has_descriptionxml();
  descriptionxml_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ScanImageResponse.DescriptionXML)
}
#endif
void ScanImageResponse::set_descriptionxml(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_descriptionxml();
  descriptionxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ScanImageResponse.DescriptionXML)
}
void ScanImageResponse::set_descriptionxml(const char* value, size_t size) {
  set_has_descriptionxml();
  descriptionxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ScanImageResponse.DescriptionXML)
}
::std::string* ScanImageResponse::mutable_descriptionxml() {
  set_has_descriptionxml();
  // @@protoc_insertion_point(field_mutable:micromsg.ScanImageResponse.DescriptionXML)
  return descriptionxml_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ScanImageResponse::release_descriptionxml() {
  // @@protoc_insertion_point(field_release:micromsg.ScanImageResponse.DescriptionXML)
  clear_has_descriptionxml();
  return descriptionxml_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ScanImageResponse::set_allocated_descriptionxml(::std::string* descriptionxml) {
  if (descriptionxml != NULL) {
    set_has_descriptionxml();
  } else {
    clear_has_descriptionxml();
  }
  descriptionxml_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), descriptionxml);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ScanImageResponse.DescriptionXML)
}

// required uint32 EndFlag = 5;
bool ScanImageResponse::has_endflag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ScanImageResponse::set_has_endflag() {
  _has_bits_[0] |= 0x00000010u;
}
void ScanImageResponse::clear_has_endflag() {
  _has_bits_[0] &= ~0x00000010u;
}
void ScanImageResponse::clear_endflag() {
  endflag_ = 0u;
  clear_has_endflag();
}
::google::protobuf::uint32 ScanImageResponse::endflag() const {
  // @@protoc_insertion_point(field_get:micromsg.ScanImageResponse.EndFlag)
  return endflag_;
}
void ScanImageResponse::set_endflag(::google::protobuf::uint32 value) {
  set_has_endflag();
  endflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ScanImageResponse.EndFlag)
}

// required uint32 ImageType = 6;
bool ScanImageResponse::has_imagetype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ScanImageResponse::set_has_imagetype() {
  _has_bits_[0] |= 0x00000020u;
}
void ScanImageResponse::clear_has_imagetype() {
  _has_bits_[0] &= ~0x00000020u;
}
void ScanImageResponse::clear_imagetype() {
  imagetype_ = 0u;
  clear_has_imagetype();
}
::google::protobuf::uint32 ScanImageResponse::imagetype() const {
  // @@protoc_insertion_point(field_get:micromsg.ScanImageResponse.ImageType)
  return imagetype_;
}
void ScanImageResponse::set_imagetype(::google::protobuf::uint32 value) {
  set_has_imagetype();
  imagetype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ScanImageResponse.ImageType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetProductInfoRequest::kBaseRequestFieldNumber;
const int GetProductInfoRequest::kProductIDFieldNumber;
const int GetProductInfoRequest::kSceneFieldNumber;
const int GetProductInfoRequest::kQrUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetProductInfoRequest::GetProductInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoiceaddr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetProductInfoRequest)
}
GetProductInfoRequest::GetProductInfoRequest(const GetProductInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_productid()) {
    productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
  }
  qrurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_qrurl()) {
    qrurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qrurl_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  scene_ = from.scene_;
  // @@protoc_insertion_point(copy_constructor:micromsg.GetProductInfoRequest)
}

void GetProductInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qrurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&scene_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(scene_));
}

GetProductInfoRequest::~GetProductInfoRequest() {
  // @@protoc_insertion_point(destructor:micromsg.GetProductInfoRequest)
  SharedDtor();
}

void GetProductInfoRequest::SharedDtor() {
  productid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qrurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GetProductInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetProductInfoRequest::descriptor() {
  protobuf_mmvoiceaddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiceaddr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetProductInfoRequest& GetProductInfoRequest::default_instance() {
  protobuf_mmvoiceaddr_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetProductInfoRequest* GetProductInfoRequest::New(::google::protobuf::Arena* arena) const {
  GetProductInfoRequest* n = new GetProductInfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetProductInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetProductInfoRequest)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_productid()) {
      GOOGLE_DCHECK(!productid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*productid_.UnsafeRawStringPointer())->clear();
    }
    if (has_qrurl()) {
      GOOGLE_DCHECK(!qrurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*qrurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  scene_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetProductInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetProductInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ProductID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->productid().data(), this->productid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetProductInfoRequest.ProductID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Scene = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_scene();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string QrUrl = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qrurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->qrurl().data(), this->qrurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetProductInfoRequest.QrUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetProductInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetProductInfoRequest)
  return false;
#undef DO_
}

void GetProductInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetProductInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string ProductID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetProductInfoRequest.ProductID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->productid(), output);
  }

  // required uint32 Scene = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->scene(), output);
  }

  // optional string QrUrl = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qrurl().data(), this->qrurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetProductInfoRequest.QrUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->qrurl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetProductInfoRequest)
}

::google::protobuf::uint8* GetProductInfoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetProductInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string ProductID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetProductInfoRequest.ProductID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->productid(), target);
  }

  // required uint32 Scene = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->scene(), target);
  }

  // optional string QrUrl = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qrurl().data(), this->qrurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetProductInfoRequest.QrUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->qrurl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetProductInfoRequest)
  return target;
}

size_t GetProductInfoRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetProductInfoRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_scene()) {
    // required uint32 Scene = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene());
  }

  return total_size;
}
size_t GetProductInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetProductInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 Scene = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string ProductID = 2;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productid());
    }

    // optional string QrUrl = 4;
    if (has_qrurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qrurl());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetProductInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetProductInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetProductInfoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetProductInfoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetProductInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetProductInfoRequest)
    MergeFrom(*source);
  }
}

void GetProductInfoRequest::MergeFrom(const GetProductInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetProductInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_productid();
      productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_qrurl();
      qrurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qrurl_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000008u) {
      scene_ = from.scene_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetProductInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetProductInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProductInfoRequest::CopyFrom(const GetProductInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetProductInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProductInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GetProductInfoRequest::Swap(GetProductInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetProductInfoRequest::InternalSwap(GetProductInfoRequest* other) {
  productid_.Swap(&other->productid_);
  qrurl_.Swap(&other->qrurl_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(scene_, other->scene_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetProductInfoRequest::GetMetadata() const {
  protobuf_mmvoiceaddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiceaddr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetProductInfoRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool GetProductInfoRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetProductInfoRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
void GetProductInfoRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetProductInfoRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GetProductInfoRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetProductInfoRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GetProductInfoRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetProductInfoRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GetProductInfoRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetProductInfoRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GetProductInfoRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetProductInfoRequest.BaseRequest)
}

// optional string ProductID = 2;
bool GetProductInfoRequest::has_productid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetProductInfoRequest::set_has_productid() {
  _has_bits_[0] |= 0x00000001u;
}
void GetProductInfoRequest::clear_has_productid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetProductInfoRequest::clear_productid() {
  productid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_productid();
}
const ::std::string& GetProductInfoRequest::productid() const {
  // @@protoc_insertion_point(field_get:micromsg.GetProductInfoRequest.ProductID)
  return productid_.GetNoArena();
}
void GetProductInfoRequest::set_productid(const ::std::string& value) {
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetProductInfoRequest.ProductID)
}
#if LANG_CXX11
void GetProductInfoRequest::set_productid(::std::string&& value) {
  set_has_productid();
  productid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetProductInfoRequest.ProductID)
}
#endif
void GetProductInfoRequest::set_productid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetProductInfoRequest.ProductID)
}
void GetProductInfoRequest::set_productid(const char* value, size_t size) {
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetProductInfoRequest.ProductID)
}
::std::string* GetProductInfoRequest::mutable_productid() {
  set_has_productid();
  // @@protoc_insertion_point(field_mutable:micromsg.GetProductInfoRequest.ProductID)
  return productid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetProductInfoRequest::release_productid() {
  // @@protoc_insertion_point(field_release:micromsg.GetProductInfoRequest.ProductID)
  clear_has_productid();
  return productid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetProductInfoRequest::set_allocated_productid(::std::string* productid) {
  if (productid != NULL) {
    set_has_productid();
  } else {
    clear_has_productid();
  }
  productid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetProductInfoRequest.ProductID)
}

// required uint32 Scene = 3;
bool GetProductInfoRequest::has_scene() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetProductInfoRequest::set_has_scene() {
  _has_bits_[0] |= 0x00000008u;
}
void GetProductInfoRequest::clear_has_scene() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetProductInfoRequest::clear_scene() {
  scene_ = 0u;
  clear_has_scene();
}
::google::protobuf::uint32 GetProductInfoRequest::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.GetProductInfoRequest.Scene)
  return scene_;
}
void GetProductInfoRequest::set_scene(::google::protobuf::uint32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetProductInfoRequest.Scene)
}

// optional string QrUrl = 4;
bool GetProductInfoRequest::has_qrurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetProductInfoRequest::set_has_qrurl() {
  _has_bits_[0] |= 0x00000002u;
}
void GetProductInfoRequest::clear_has_qrurl() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetProductInfoRequest::clear_qrurl() {
  qrurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_qrurl();
}
const ::std::string& GetProductInfoRequest::qrurl() const {
  // @@protoc_insertion_point(field_get:micromsg.GetProductInfoRequest.QrUrl)
  return qrurl_.GetNoArena();
}
void GetProductInfoRequest::set_qrurl(const ::std::string& value) {
  set_has_qrurl();
  qrurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetProductInfoRequest.QrUrl)
}
#if LANG_CXX11
void GetProductInfoRequest::set_qrurl(::std::string&& value) {
  set_has_qrurl();
  qrurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetProductInfoRequest.QrUrl)
}
#endif
void GetProductInfoRequest::set_qrurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_qrurl();
  qrurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetProductInfoRequest.QrUrl)
}
void GetProductInfoRequest::set_qrurl(const char* value, size_t size) {
  set_has_qrurl();
  qrurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetProductInfoRequest.QrUrl)
}
::std::string* GetProductInfoRequest::mutable_qrurl() {
  set_has_qrurl();
  // @@protoc_insertion_point(field_mutable:micromsg.GetProductInfoRequest.QrUrl)
  return qrurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetProductInfoRequest::release_qrurl() {
  // @@protoc_insertion_point(field_release:micromsg.GetProductInfoRequest.QrUrl)
  clear_has_qrurl();
  return qrurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetProductInfoRequest::set_allocated_qrurl(::std::string* qrurl) {
  if (qrurl != NULL) {
    set_has_qrurl();
  } else {
    clear_has_qrurl();
  }
  qrurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qrurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetProductInfoRequest.QrUrl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetProductInfoResponse::kBaseResponseFieldNumber;
const int GetProductInfoResponse::kTypeFieldNumber;
const int GetProductInfoResponse::kDescXMLFieldNumber;
const int GetProductInfoResponse::kProductIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetProductInfoResponse::GetProductInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoiceaddr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetProductInfoResponse)
}
GetProductInfoResponse::GetProductInfoResponse(const GetProductInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  descxml_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_descxml()) {
    descxml_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.descxml_);
  }
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_productid()) {
    productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:micromsg.GetProductInfoResponse)
}

void GetProductInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  descxml_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(type_));
}

GetProductInfoResponse::~GetProductInfoResponse() {
  // @@protoc_insertion_point(destructor:micromsg.GetProductInfoResponse)
  SharedDtor();
}

void GetProductInfoResponse::SharedDtor() {
  descxml_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void GetProductInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetProductInfoResponse::descriptor() {
  protobuf_mmvoiceaddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiceaddr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetProductInfoResponse& GetProductInfoResponse::default_instance() {
  protobuf_mmvoiceaddr_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetProductInfoResponse* GetProductInfoResponse::New(::google::protobuf::Arena* arena) const {
  GetProductInfoResponse* n = new GetProductInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetProductInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetProductInfoResponse)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_descxml()) {
      GOOGLE_DCHECK(!descxml_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*descxml_.UnsafeRawStringPointer())->clear();
    }
    if (has_productid()) {
      GOOGLE_DCHECK(!productid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*productid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetProductInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetProductInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string DescXML = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_descxml()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->descxml().data(), this->descxml().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetProductInfoResponse.DescXML");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ProductID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->productid().data(), this->productid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetProductInfoResponse.ProductID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetProductInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetProductInfoResponse)
  return false;
#undef DO_
}

void GetProductInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetProductInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 Type = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional string DescXML = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->descxml().data(), this->descxml().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetProductInfoResponse.DescXML");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->descxml(), output);
  }

  // optional string ProductID = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetProductInfoResponse.ProductID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->productid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetProductInfoResponse)
}

::google::protobuf::uint8* GetProductInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetProductInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 Type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional string DescXML = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->descxml().data(), this->descxml().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetProductInfoResponse.DescXML");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->descxml(), target);
  }

  // optional string ProductID = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetProductInfoResponse.ProductID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->productid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetProductInfoResponse)
  return target;
}

size_t GetProductInfoResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetProductInfoResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_type()) {
    // required uint32 Type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  return total_size;
}
size_t GetProductInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetProductInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 Type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string DescXML = 3;
    if (has_descxml()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->descxml());
    }

    // optional string ProductID = 4;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetProductInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetProductInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetProductInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetProductInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetProductInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetProductInfoResponse)
    MergeFrom(*source);
  }
}

void GetProductInfoResponse::MergeFrom(const GetProductInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetProductInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_descxml();
      descxml_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.descxml_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_productid();
      productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetProductInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetProductInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProductInfoResponse::CopyFrom(const GetProductInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetProductInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProductInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void GetProductInfoResponse::Swap(GetProductInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetProductInfoResponse::InternalSwap(GetProductInfoResponse* other) {
  descxml_.Swap(&other->descxml_);
  productid_.Swap(&other->productid_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetProductInfoResponse::GetMetadata() const {
  protobuf_mmvoiceaddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiceaddr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetProductInfoResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetProductInfoResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetProductInfoResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000004u;
}
void GetProductInfoResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetProductInfoResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetProductInfoResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetProductInfoResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetProductInfoResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetProductInfoResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetProductInfoResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetProductInfoResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetProductInfoResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetProductInfoResponse.BaseResponse)
}

// required uint32 Type = 2;
bool GetProductInfoResponse::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetProductInfoResponse::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void GetProductInfoResponse::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetProductInfoResponse::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 GetProductInfoResponse::type() const {
  // @@protoc_insertion_point(field_get:micromsg.GetProductInfoResponse.Type)
  return type_;
}
void GetProductInfoResponse::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetProductInfoResponse.Type)
}

// optional string DescXML = 3;
bool GetProductInfoResponse::has_descxml() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetProductInfoResponse::set_has_descxml() {
  _has_bits_[0] |= 0x00000001u;
}
void GetProductInfoResponse::clear_has_descxml() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetProductInfoResponse::clear_descxml() {
  descxml_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_descxml();
}
const ::std::string& GetProductInfoResponse::descxml() const {
  // @@protoc_insertion_point(field_get:micromsg.GetProductInfoResponse.DescXML)
  return descxml_.GetNoArena();
}
void GetProductInfoResponse::set_descxml(const ::std::string& value) {
  set_has_descxml();
  descxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetProductInfoResponse.DescXML)
}
#if LANG_CXX11
void GetProductInfoResponse::set_descxml(::std::string&& value) {
  set_has_descxml();
  descxml_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetProductInfoResponse.DescXML)
}
#endif
void GetProductInfoResponse::set_descxml(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_descxml();
  descxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetProductInfoResponse.DescXML)
}
void GetProductInfoResponse::set_descxml(const char* value, size_t size) {
  set_has_descxml();
  descxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetProductInfoResponse.DescXML)
}
::std::string* GetProductInfoResponse::mutable_descxml() {
  set_has_descxml();
  // @@protoc_insertion_point(field_mutable:micromsg.GetProductInfoResponse.DescXML)
  return descxml_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetProductInfoResponse::release_descxml() {
  // @@protoc_insertion_point(field_release:micromsg.GetProductInfoResponse.DescXML)
  clear_has_descxml();
  return descxml_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetProductInfoResponse::set_allocated_descxml(::std::string* descxml) {
  if (descxml != NULL) {
    set_has_descxml();
  } else {
    clear_has_descxml();
  }
  descxml_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), descxml);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetProductInfoResponse.DescXML)
}

// optional string ProductID = 4;
bool GetProductInfoResponse::has_productid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetProductInfoResponse::set_has_productid() {
  _has_bits_[0] |= 0x00000002u;
}
void GetProductInfoResponse::clear_has_productid() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetProductInfoResponse::clear_productid() {
  productid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_productid();
}
const ::std::string& GetProductInfoResponse::productid() const {
  // @@protoc_insertion_point(field_get:micromsg.GetProductInfoResponse.ProductID)
  return productid_.GetNoArena();
}
void GetProductInfoResponse::set_productid(const ::std::string& value) {
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetProductInfoResponse.ProductID)
}
#if LANG_CXX11
void GetProductInfoResponse::set_productid(::std::string&& value) {
  set_has_productid();
  productid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetProductInfoResponse.ProductID)
}
#endif
void GetProductInfoResponse::set_productid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetProductInfoResponse.ProductID)
}
void GetProductInfoResponse::set_productid(const char* value, size_t size) {
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetProductInfoResponse.ProductID)
}
::std::string* GetProductInfoResponse::mutable_productid() {
  set_has_productid();
  // @@protoc_insertion_point(field_mutable:micromsg.GetProductInfoResponse.ProductID)
  return productid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetProductInfoResponse::release_productid() {
  // @@protoc_insertion_point(field_release:micromsg.GetProductInfoResponse.ProductID)
  clear_has_productid();
  return productid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetProductInfoResponse::set_allocated_productid(::std::string* productid) {
  if (productid != NULL) {
    set_has_productid();
  } else {
    clear_has_productid();
  }
  productid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetProductInfoResponse.ProductID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OCRTranslationRequest::kBaseRequestFieldNumber;
const int OCRTranslationRequest::kClientScanIDFieldNumber;
const int OCRTranslationRequest::kImageBufferFieldNumber;
const int OCRTranslationRequest::kImageTypeFieldNumber;
const int OCRTranslationRequest::kFromLanguageFieldNumber;
const int OCRTranslationRequest::kToLanguageFieldNumber;
const int OCRTranslationRequest::kSessionIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OCRTranslationRequest::OCRTranslationRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoiceaddr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.OCRTranslationRequest)
}
OCRTranslationRequest::OCRTranslationRequest(const OCRTranslationRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fromlanguage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fromlanguage()) {
    fromlanguage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromlanguage_);
  }
  tolanguage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tolanguage()) {
    tolanguage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tolanguage_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_imagebuffer()) {
    imagebuffer_ = new ::micromsg::SKBuiltinBuffer_t(*from.imagebuffer_);
  } else {
    imagebuffer_ = NULL;
  }
  ::memcpy(&clientscanid_, &from.clientscanid_,
    reinterpret_cast<char*>(&sessionid_) -
    reinterpret_cast<char*>(&clientscanid_) + sizeof(sessionid_));
  // @@protoc_insertion_point(copy_constructor:micromsg.OCRTranslationRequest)
}

void OCRTranslationRequest::SharedCtor() {
  _cached_size_ = 0;
  fromlanguage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tolanguage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&sessionid_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(sessionid_));
}

OCRTranslationRequest::~OCRTranslationRequest() {
  // @@protoc_insertion_point(destructor:micromsg.OCRTranslationRequest)
  SharedDtor();
}

void OCRTranslationRequest::SharedDtor() {
  fromlanguage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tolanguage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete imagebuffer_;
  }
}

void OCRTranslationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OCRTranslationRequest::descriptor() {
  protobuf_mmvoiceaddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiceaddr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OCRTranslationRequest& OCRTranslationRequest::default_instance() {
  protobuf_mmvoiceaddr_2eproto::InitDefaults();
  return *internal_default_instance();
}

OCRTranslationRequest* OCRTranslationRequest::New(::google::protobuf::Arena* arena) const {
  OCRTranslationRequest* n = new OCRTranslationRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OCRTranslationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.OCRTranslationRequest)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_fromlanguage()) {
      GOOGLE_DCHECK(!fromlanguage_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fromlanguage_.UnsafeRawStringPointer())->clear();
    }
    if (has_tolanguage()) {
      GOOGLE_DCHECK(!tolanguage_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tolanguage_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_imagebuffer()) {
      GOOGLE_DCHECK(imagebuffer_ != NULL);
      imagebuffer_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 112u) {
    ::memset(&clientscanid_, 0, reinterpret_cast<char*>(&sessionid_) -
      reinterpret_cast<char*>(&clientscanid_) + sizeof(sessionid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OCRTranslationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.OCRTranslationRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ClientScanID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_clientscanid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientscanid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t ImageBuffer = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imagebuffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ImageType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_imagetype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &imagetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FromLanguage = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromlanguage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fromlanguage().data(), this->fromlanguage().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.OCRTranslationRequest.FromLanguage");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ToLanguage = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tolanguage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tolanguage().data(), this->tolanguage().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.OCRTranslationRequest.ToLanguage");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 SessionID = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_sessionid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.OCRTranslationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.OCRTranslationRequest)
  return false;
#undef DO_
}

void OCRTranslationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.OCRTranslationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 ClientScanID = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->clientscanid(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t ImageBuffer = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->imagebuffer_, output);
  }

  // required uint32 ImageType = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->imagetype(), output);
  }

  // optional string FromLanguage = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromlanguage().data(), this->fromlanguage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.OCRTranslationRequest.FromLanguage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->fromlanguage(), output);
  }

  // optional string ToLanguage = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tolanguage().data(), this->tolanguage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.OCRTranslationRequest.ToLanguage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->tolanguage(), output);
  }

  // optional uint32 SessionID = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->sessionid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.OCRTranslationRequest)
}

::google::protobuf::uint8* OCRTranslationRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.OCRTranslationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 ClientScanID = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->clientscanid(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t ImageBuffer = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->imagebuffer_, deterministic, target);
  }

  // required uint32 ImageType = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->imagetype(), target);
  }

  // optional string FromLanguage = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromlanguage().data(), this->fromlanguage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.OCRTranslationRequest.FromLanguage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->fromlanguage(), target);
  }

  // optional string ToLanguage = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tolanguage().data(), this->tolanguage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.OCRTranslationRequest.ToLanguage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->tolanguage(), target);
  }

  // optional uint32 SessionID = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->sessionid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.OCRTranslationRequest)
  return target;
}

size_t OCRTranslationRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.OCRTranslationRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_imagebuffer()) {
    // required .micromsg.SKBuiltinBuffer_t ImageBuffer = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imagebuffer_);
  }

  if (has_clientscanid()) {
    // required uint32 ClientScanID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->clientscanid());
  }

  if (has_imagetype()) {
    // required uint32 ImageType = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->imagetype());
  }

  return total_size;
}
size_t OCRTranslationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.OCRTranslationRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003c) ^ 0x0000003c) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.SKBuiltinBuffer_t ImageBuffer = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imagebuffer_);

    // required uint32 ClientScanID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->clientscanid());

    // required uint32 ImageType = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->imagetype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string FromLanguage = 5;
    if (has_fromlanguage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromlanguage());
    }

    // optional string ToLanguage = 6;
    if (has_tolanguage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tolanguage());
    }

  }
  // optional uint32 SessionID = 7;
  if (has_sessionid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sessionid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OCRTranslationRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.OCRTranslationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OCRTranslationRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OCRTranslationRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.OCRTranslationRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.OCRTranslationRequest)
    MergeFrom(*source);
  }
}

void OCRTranslationRequest::MergeFrom(const OCRTranslationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.OCRTranslationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_fromlanguage();
      fromlanguage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromlanguage_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_tolanguage();
      tolanguage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tolanguage_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_imagebuffer()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.imagebuffer());
    }
    if (cached_has_bits & 0x00000010u) {
      clientscanid_ = from.clientscanid_;
    }
    if (cached_has_bits & 0x00000020u) {
      imagetype_ = from.imagetype_;
    }
    if (cached_has_bits & 0x00000040u) {
      sessionid_ = from.sessionid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OCRTranslationRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.OCRTranslationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OCRTranslationRequest::CopyFrom(const OCRTranslationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.OCRTranslationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OCRTranslationRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003c) != 0x0000003c) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_imagebuffer()) {
    if (!this->imagebuffer_->IsInitialized()) return false;
  }
  return true;
}

void OCRTranslationRequest::Swap(OCRTranslationRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OCRTranslationRequest::InternalSwap(OCRTranslationRequest* other) {
  fromlanguage_.Swap(&other->fromlanguage_);
  tolanguage_.Swap(&other->tolanguage_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(imagebuffer_, other->imagebuffer_);
  std::swap(clientscanid_, other->clientscanid_);
  std::swap(imagetype_, other->imagetype_);
  std::swap(sessionid_, other->sessionid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OCRTranslationRequest::GetMetadata() const {
  protobuf_mmvoiceaddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiceaddr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OCRTranslationRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool OCRTranslationRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OCRTranslationRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
void OCRTranslationRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
void OCRTranslationRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& OCRTranslationRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.OCRTranslationRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* OCRTranslationRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.OCRTranslationRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* OCRTranslationRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.OCRTranslationRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void OCRTranslationRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.OCRTranslationRequest.BaseRequest)
}

// required uint32 ClientScanID = 2;
bool OCRTranslationRequest::has_clientscanid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void OCRTranslationRequest::set_has_clientscanid() {
  _has_bits_[0] |= 0x00000010u;
}
void OCRTranslationRequest::clear_has_clientscanid() {
  _has_bits_[0] &= ~0x00000010u;
}
void OCRTranslationRequest::clear_clientscanid() {
  clientscanid_ = 0u;
  clear_has_clientscanid();
}
::google::protobuf::uint32 OCRTranslationRequest::clientscanid() const {
  // @@protoc_insertion_point(field_get:micromsg.OCRTranslationRequest.ClientScanID)
  return clientscanid_;
}
void OCRTranslationRequest::set_clientscanid(::google::protobuf::uint32 value) {
  set_has_clientscanid();
  clientscanid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.OCRTranslationRequest.ClientScanID)
}

// required .micromsg.SKBuiltinBuffer_t ImageBuffer = 3;
bool OCRTranslationRequest::has_imagebuffer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OCRTranslationRequest::set_has_imagebuffer() {
  _has_bits_[0] |= 0x00000008u;
}
void OCRTranslationRequest::clear_has_imagebuffer() {
  _has_bits_[0] &= ~0x00000008u;
}
void OCRTranslationRequest::clear_imagebuffer() {
  if (imagebuffer_ != NULL) imagebuffer_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_imagebuffer();
}
const ::micromsg::SKBuiltinBuffer_t& OCRTranslationRequest::imagebuffer() const {
  // @@protoc_insertion_point(field_get:micromsg.OCRTranslationRequest.ImageBuffer)
  return imagebuffer_ != NULL ? *imagebuffer_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* OCRTranslationRequest::mutable_imagebuffer() {
  set_has_imagebuffer();
  if (imagebuffer_ == NULL) {
    imagebuffer_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.OCRTranslationRequest.ImageBuffer)
  return imagebuffer_;
}
::micromsg::SKBuiltinBuffer_t* OCRTranslationRequest::release_imagebuffer() {
  // @@protoc_insertion_point(field_release:micromsg.OCRTranslationRequest.ImageBuffer)
  clear_has_imagebuffer();
  ::micromsg::SKBuiltinBuffer_t* temp = imagebuffer_;
  imagebuffer_ = NULL;
  return temp;
}
void OCRTranslationRequest::set_allocated_imagebuffer(::micromsg::SKBuiltinBuffer_t* imagebuffer) {
  delete imagebuffer_;
  imagebuffer_ = imagebuffer;
  if (imagebuffer) {
    set_has_imagebuffer();
  } else {
    clear_has_imagebuffer();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.OCRTranslationRequest.ImageBuffer)
}

// required uint32 ImageType = 4;
bool OCRTranslationRequest::has_imagetype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void OCRTranslationRequest::set_has_imagetype() {
  _has_bits_[0] |= 0x00000020u;
}
void OCRTranslationRequest::clear_has_imagetype() {
  _has_bits_[0] &= ~0x00000020u;
}
void OCRTranslationRequest::clear_imagetype() {
  imagetype_ = 0u;
  clear_has_imagetype();
}
::google::protobuf::uint32 OCRTranslationRequest::imagetype() const {
  // @@protoc_insertion_point(field_get:micromsg.OCRTranslationRequest.ImageType)
  return imagetype_;
}
void OCRTranslationRequest::set_imagetype(::google::protobuf::uint32 value) {
  set_has_imagetype();
  imagetype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.OCRTranslationRequest.ImageType)
}

// optional string FromLanguage = 5;
bool OCRTranslationRequest::has_fromlanguage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OCRTranslationRequest::set_has_fromlanguage() {
  _has_bits_[0] |= 0x00000001u;
}
void OCRTranslationRequest::clear_has_fromlanguage() {
  _has_bits_[0] &= ~0x00000001u;
}
void OCRTranslationRequest::clear_fromlanguage() {
  fromlanguage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fromlanguage();
}
const ::std::string& OCRTranslationRequest::fromlanguage() const {
  // @@protoc_insertion_point(field_get:micromsg.OCRTranslationRequest.FromLanguage)
  return fromlanguage_.GetNoArena();
}
void OCRTranslationRequest::set_fromlanguage(const ::std::string& value) {
  set_has_fromlanguage();
  fromlanguage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.OCRTranslationRequest.FromLanguage)
}
#if LANG_CXX11
void OCRTranslationRequest::set_fromlanguage(::std::string&& value) {
  set_has_fromlanguage();
  fromlanguage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.OCRTranslationRequest.FromLanguage)
}
#endif
void OCRTranslationRequest::set_fromlanguage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fromlanguage();
  fromlanguage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.OCRTranslationRequest.FromLanguage)
}
void OCRTranslationRequest::set_fromlanguage(const char* value, size_t size) {
  set_has_fromlanguage();
  fromlanguage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.OCRTranslationRequest.FromLanguage)
}
::std::string* OCRTranslationRequest::mutable_fromlanguage() {
  set_has_fromlanguage();
  // @@protoc_insertion_point(field_mutable:micromsg.OCRTranslationRequest.FromLanguage)
  return fromlanguage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OCRTranslationRequest::release_fromlanguage() {
  // @@protoc_insertion_point(field_release:micromsg.OCRTranslationRequest.FromLanguage)
  clear_has_fromlanguage();
  return fromlanguage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OCRTranslationRequest::set_allocated_fromlanguage(::std::string* fromlanguage) {
  if (fromlanguage != NULL) {
    set_has_fromlanguage();
  } else {
    clear_has_fromlanguage();
  }
  fromlanguage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromlanguage);
  // @@protoc_insertion_point(field_set_allocated:micromsg.OCRTranslationRequest.FromLanguage)
}

// optional string ToLanguage = 6;
bool OCRTranslationRequest::has_tolanguage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OCRTranslationRequest::set_has_tolanguage() {
  _has_bits_[0] |= 0x00000002u;
}
void OCRTranslationRequest::clear_has_tolanguage() {
  _has_bits_[0] &= ~0x00000002u;
}
void OCRTranslationRequest::clear_tolanguage() {
  tolanguage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tolanguage();
}
const ::std::string& OCRTranslationRequest::tolanguage() const {
  // @@protoc_insertion_point(field_get:micromsg.OCRTranslationRequest.ToLanguage)
  return tolanguage_.GetNoArena();
}
void OCRTranslationRequest::set_tolanguage(const ::std::string& value) {
  set_has_tolanguage();
  tolanguage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.OCRTranslationRequest.ToLanguage)
}
#if LANG_CXX11
void OCRTranslationRequest::set_tolanguage(::std::string&& value) {
  set_has_tolanguage();
  tolanguage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.OCRTranslationRequest.ToLanguage)
}
#endif
void OCRTranslationRequest::set_tolanguage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tolanguage();
  tolanguage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.OCRTranslationRequest.ToLanguage)
}
void OCRTranslationRequest::set_tolanguage(const char* value, size_t size) {
  set_has_tolanguage();
  tolanguage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.OCRTranslationRequest.ToLanguage)
}
::std::string* OCRTranslationRequest::mutable_tolanguage() {
  set_has_tolanguage();
  // @@protoc_insertion_point(field_mutable:micromsg.OCRTranslationRequest.ToLanguage)
  return tolanguage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OCRTranslationRequest::release_tolanguage() {
  // @@protoc_insertion_point(field_release:micromsg.OCRTranslationRequest.ToLanguage)
  clear_has_tolanguage();
  return tolanguage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OCRTranslationRequest::set_allocated_tolanguage(::std::string* tolanguage) {
  if (tolanguage != NULL) {
    set_has_tolanguage();
  } else {
    clear_has_tolanguage();
  }
  tolanguage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tolanguage);
  // @@protoc_insertion_point(field_set_allocated:micromsg.OCRTranslationRequest.ToLanguage)
}

// optional uint32 SessionID = 7;
bool OCRTranslationRequest::has_sessionid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void OCRTranslationRequest::set_has_sessionid() {
  _has_bits_[0] |= 0x00000040u;
}
void OCRTranslationRequest::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000040u;
}
void OCRTranslationRequest::clear_sessionid() {
  sessionid_ = 0u;
  clear_has_sessionid();
}
::google::protobuf::uint32 OCRTranslationRequest::sessionid() const {
  // @@protoc_insertion_point(field_get:micromsg.OCRTranslationRequest.SessionID)
  return sessionid_;
}
void OCRTranslationRequest::set_sessionid(::google::protobuf::uint32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.OCRTranslationRequest.SessionID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OCRTranslationResponse::kBaseResponseFieldNumber;
const int OCRTranslationResponse::kClientScanIDFieldNumber;
const int OCRTranslationResponse::kSourceFieldNumber;
const int OCRTranslationResponse::kTranslationFieldNumber;
const int OCRTranslationResponse::kImageTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OCRTranslationResponse::OCRTranslationResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoiceaddr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.OCRTranslationResponse)
}
OCRTranslationResponse::OCRTranslationResponse(const OCRTranslationResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source()) {
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  translation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_translation()) {
    translation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.translation_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  ::memcpy(&clientscanid_, &from.clientscanid_,
    reinterpret_cast<char*>(&imagetype_) -
    reinterpret_cast<char*>(&clientscanid_) + sizeof(imagetype_));
  // @@protoc_insertion_point(copy_constructor:micromsg.OCRTranslationResponse)
}

void OCRTranslationResponse::SharedCtor() {
  _cached_size_ = 0;
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  translation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&imagetype_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(imagetype_));
}

OCRTranslationResponse::~OCRTranslationResponse() {
  // @@protoc_insertion_point(destructor:micromsg.OCRTranslationResponse)
  SharedDtor();
}

void OCRTranslationResponse::SharedDtor() {
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  translation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void OCRTranslationResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OCRTranslationResponse::descriptor() {
  protobuf_mmvoiceaddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiceaddr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OCRTranslationResponse& OCRTranslationResponse::default_instance() {
  protobuf_mmvoiceaddr_2eproto::InitDefaults();
  return *internal_default_instance();
}

OCRTranslationResponse* OCRTranslationResponse::New(::google::protobuf::Arena* arena) const {
  OCRTranslationResponse* n = new OCRTranslationResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OCRTranslationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.OCRTranslationResponse)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_source()) {
      GOOGLE_DCHECK(!source_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*source_.UnsafeRawStringPointer())->clear();
    }
    if (has_translation()) {
      GOOGLE_DCHECK(!translation_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*translation_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&clientscanid_, 0, reinterpret_cast<char*>(&imagetype_) -
      reinterpret_cast<char*>(&clientscanid_) + sizeof(imagetype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OCRTranslationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.OCRTranslationResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ClientScanID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_clientscanid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientscanid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Source = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.OCRTranslationResponse.Source");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Translation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_translation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->translation().data(), this->translation().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.OCRTranslationResponse.Translation");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ImageType = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_imagetype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &imagetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.OCRTranslationResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.OCRTranslationResponse)
  return false;
#undef DO_
}

void OCRTranslationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.OCRTranslationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 ClientScanID = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->clientscanid(), output);
  }

  // optional string Source = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.OCRTranslationResponse.Source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->source(), output);
  }

  // optional string Translation = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->translation().data(), this->translation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.OCRTranslationResponse.Translation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->translation(), output);
  }

  // required uint32 ImageType = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->imagetype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.OCRTranslationResponse)
}

::google::protobuf::uint8* OCRTranslationResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.OCRTranslationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 ClientScanID = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->clientscanid(), target);
  }

  // optional string Source = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.OCRTranslationResponse.Source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->source(), target);
  }

  // optional string Translation = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->translation().data(), this->translation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.OCRTranslationResponse.Translation");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->translation(), target);
  }

  // required uint32 ImageType = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->imagetype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.OCRTranslationResponse)
  return target;
}

size_t OCRTranslationResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.OCRTranslationResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_clientscanid()) {
    // required uint32 ClientScanID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->clientscanid());
  }

  if (has_imagetype()) {
    // required uint32 ImageType = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->imagetype());
  }

  return total_size;
}
size_t OCRTranslationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.OCRTranslationResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001c) ^ 0x0000001c) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 ClientScanID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->clientscanid());

    // required uint32 ImageType = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->imagetype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string Source = 3;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional string Translation = 4;
    if (has_translation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->translation());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OCRTranslationResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.OCRTranslationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OCRTranslationResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OCRTranslationResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.OCRTranslationResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.OCRTranslationResponse)
    MergeFrom(*source);
  }
}

void OCRTranslationResponse::MergeFrom(const OCRTranslationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.OCRTranslationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_translation();
      translation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.translation_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000008u) {
      clientscanid_ = from.clientscanid_;
    }
    if (cached_has_bits & 0x00000010u) {
      imagetype_ = from.imagetype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OCRTranslationResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.OCRTranslationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OCRTranslationResponse::CopyFrom(const OCRTranslationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.OCRTranslationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OCRTranslationResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001c) != 0x0000001c) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void OCRTranslationResponse::Swap(OCRTranslationResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OCRTranslationResponse::InternalSwap(OCRTranslationResponse* other) {
  source_.Swap(&other->source_);
  translation_.Swap(&other->translation_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(clientscanid_, other->clientscanid_);
  std::swap(imagetype_, other->imagetype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OCRTranslationResponse::GetMetadata() const {
  protobuf_mmvoiceaddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiceaddr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OCRTranslationResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool OCRTranslationResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OCRTranslationResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000004u;
}
void OCRTranslationResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000004u;
}
void OCRTranslationResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& OCRTranslationResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.OCRTranslationResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* OCRTranslationResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.OCRTranslationResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* OCRTranslationResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.OCRTranslationResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void OCRTranslationResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.OCRTranslationResponse.BaseResponse)
}

// required uint32 ClientScanID = 2;
bool OCRTranslationResponse::has_clientscanid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OCRTranslationResponse::set_has_clientscanid() {
  _has_bits_[0] |= 0x00000008u;
}
void OCRTranslationResponse::clear_has_clientscanid() {
  _has_bits_[0] &= ~0x00000008u;
}
void OCRTranslationResponse::clear_clientscanid() {
  clientscanid_ = 0u;
  clear_has_clientscanid();
}
::google::protobuf::uint32 OCRTranslationResponse::clientscanid() const {
  // @@protoc_insertion_point(field_get:micromsg.OCRTranslationResponse.ClientScanID)
  return clientscanid_;
}
void OCRTranslationResponse::set_clientscanid(::google::protobuf::uint32 value) {
  set_has_clientscanid();
  clientscanid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.OCRTranslationResponse.ClientScanID)
}

// optional string Source = 3;
bool OCRTranslationResponse::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OCRTranslationResponse::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
void OCRTranslationResponse::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
void OCRTranslationResponse::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
const ::std::string& OCRTranslationResponse::source() const {
  // @@protoc_insertion_point(field_get:micromsg.OCRTranslationResponse.Source)
  return source_.GetNoArena();
}
void OCRTranslationResponse::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.OCRTranslationResponse.Source)
}
#if LANG_CXX11
void OCRTranslationResponse::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.OCRTranslationResponse.Source)
}
#endif
void OCRTranslationResponse::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.OCRTranslationResponse.Source)
}
void OCRTranslationResponse::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.OCRTranslationResponse.Source)
}
::std::string* OCRTranslationResponse::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:micromsg.OCRTranslationResponse.Source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OCRTranslationResponse::release_source() {
  // @@protoc_insertion_point(field_release:micromsg.OCRTranslationResponse.Source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OCRTranslationResponse::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:micromsg.OCRTranslationResponse.Source)
}

// optional string Translation = 4;
bool OCRTranslationResponse::has_translation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OCRTranslationResponse::set_has_translation() {
  _has_bits_[0] |= 0x00000002u;
}
void OCRTranslationResponse::clear_has_translation() {
  _has_bits_[0] &= ~0x00000002u;
}
void OCRTranslationResponse::clear_translation() {
  translation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_translation();
}
const ::std::string& OCRTranslationResponse::translation() const {
  // @@protoc_insertion_point(field_get:micromsg.OCRTranslationResponse.Translation)
  return translation_.GetNoArena();
}
void OCRTranslationResponse::set_translation(const ::std::string& value) {
  set_has_translation();
  translation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.OCRTranslationResponse.Translation)
}
#if LANG_CXX11
void OCRTranslationResponse::set_translation(::std::string&& value) {
  set_has_translation();
  translation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.OCRTranslationResponse.Translation)
}
#endif
void OCRTranslationResponse::set_translation(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_translation();
  translation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.OCRTranslationResponse.Translation)
}
void OCRTranslationResponse::set_translation(const char* value, size_t size) {
  set_has_translation();
  translation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.OCRTranslationResponse.Translation)
}
::std::string* OCRTranslationResponse::mutable_translation() {
  set_has_translation();
  // @@protoc_insertion_point(field_mutable:micromsg.OCRTranslationResponse.Translation)
  return translation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OCRTranslationResponse::release_translation() {
  // @@protoc_insertion_point(field_release:micromsg.OCRTranslationResponse.Translation)
  clear_has_translation();
  return translation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OCRTranslationResponse::set_allocated_translation(::std::string* translation) {
  if (translation != NULL) {
    set_has_translation();
  } else {
    clear_has_translation();
  }
  translation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), translation);
  // @@protoc_insertion_point(field_set_allocated:micromsg.OCRTranslationResponse.Translation)
}

// required uint32 ImageType = 5;
bool OCRTranslationResponse::has_imagetype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void OCRTranslationResponse::set_has_imagetype() {
  _has_bits_[0] |= 0x00000010u;
}
void OCRTranslationResponse::clear_has_imagetype() {
  _has_bits_[0] &= ~0x00000010u;
}
void OCRTranslationResponse::clear_imagetype() {
  imagetype_ = 0u;
  clear_has_imagetype();
}
::google::protobuf::uint32 OCRTranslationResponse::imagetype() const {
  // @@protoc_insertion_point(field_get:micromsg.OCRTranslationResponse.ImageType)
  return imagetype_;
}
void OCRTranslationResponse::set_imagetype(::google::protobuf::uint32 value) {
  set_has_imagetype();
  imagetype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.OCRTranslationResponse.ImageType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShakeTVRequest::kBaseRequestFieldNumber;
const int ShakeTVRequest::kDataFieldNumber;
const int ShakeTVRequest::kDataIdFieldNumber;
const int ShakeTVRequest::kEndFlagFieldNumber;
const int ShakeTVRequest::kVoiceLenFieldNumber;
const int ShakeTVRequest::kNetTypeFieldNumber;
const int ShakeTVRequest::kSdkVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShakeTVRequest::ShakeTVRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoiceaddr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ShakeTVRequest)
}
ShakeTVRequest::ShakeTVRequest(const ShakeTVRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_data()) {
    data_ = new ::micromsg::SKBuiltinBuffer_t(*from.data_);
  } else {
    data_ = NULL;
  }
  ::memcpy(&dataid_, &from.dataid_,
    reinterpret_cast<char*>(&sdkversion_) -
    reinterpret_cast<char*>(&dataid_) + sizeof(sdkversion_));
  // @@protoc_insertion_point(copy_constructor:micromsg.ShakeTVRequest)
}

void ShakeTVRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&sdkversion_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(sdkversion_));
}

ShakeTVRequest::~ShakeTVRequest() {
  // @@protoc_insertion_point(destructor:micromsg.ShakeTVRequest)
  SharedDtor();
}

void ShakeTVRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete data_;
  }
}

void ShakeTVRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShakeTVRequest::descriptor() {
  protobuf_mmvoiceaddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiceaddr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShakeTVRequest& ShakeTVRequest::default_instance() {
  protobuf_mmvoiceaddr_2eproto::InitDefaults();
  return *internal_default_instance();
}

ShakeTVRequest* ShakeTVRequest::New(::google::protobuf::Arena* arena) const {
  ShakeTVRequest* n = new ShakeTVRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShakeTVRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ShakeTVRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_data()) {
      GOOGLE_DCHECK(data_ != NULL);
      data_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 124u) {
    ::memset(&dataid_, 0, reinterpret_cast<char*>(&sdkversion_) -
      reinterpret_cast<char*>(&dataid_) + sizeof(sdkversion_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ShakeTVRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ShakeTVRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t Data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 DataId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_dataid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dataid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 EndFlag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_endflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float VoiceLen = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_voicelen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &voicelen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 NetType = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_nettype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nettype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 SdkVersion = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_sdkversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sdkversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ShakeTVRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ShakeTVRequest)
  return false;
#undef DO_
}

void ShakeTVRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ShakeTVRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required .micromsg.SKBuiltinBuffer_t Data = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->data_, output);
  }

  // required uint32 DataId = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dataid(), output);
  }

  // required uint32 EndFlag = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->endflag(), output);
  }

  // required float VoiceLen = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->voicelen(), output);
  }

  // required uint32 NetType = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->nettype(), output);
  }

  // required uint32 SdkVersion = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->sdkversion(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ShakeTVRequest)
}

::google::protobuf::uint8* ShakeTVRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ShakeTVRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t Data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->data_, deterministic, target);
  }

  // required uint32 DataId = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dataid(), target);
  }

  // required uint32 EndFlag = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->endflag(), target);
  }

  // required float VoiceLen = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->voicelen(), target);
  }

  // required uint32 NetType = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->nettype(), target);
  }

  // required uint32 SdkVersion = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->sdkversion(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ShakeTVRequest)
  return target;
}

size_t ShakeTVRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.ShakeTVRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_data()) {
    // required .micromsg.SKBuiltinBuffer_t Data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  if (has_dataid()) {
    // required uint32 DataId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dataid());
  }

  if (has_endflag()) {
    // required uint32 EndFlag = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->endflag());
  }

  if (has_voicelen()) {
    // required float VoiceLen = 5;
    total_size += 1 + 4;
  }

  if (has_nettype()) {
    // required uint32 NetType = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nettype());
  }

  if (has_sdkversion()) {
    // required uint32 SdkVersion = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sdkversion());
  }

  return total_size;
}
size_t ShakeTVRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ShakeTVRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.SKBuiltinBuffer_t Data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);

    // required uint32 DataId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dataid());

    // required uint32 EndFlag = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->endflag());

    // required float VoiceLen = 5;
    total_size += 1 + 4;

    // required uint32 NetType = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nettype());

    // required uint32 SdkVersion = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sdkversion());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShakeTVRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ShakeTVRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ShakeTVRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShakeTVRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ShakeTVRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ShakeTVRequest)
    MergeFrom(*source);
  }
}

void ShakeTVRequest::MergeFrom(const ShakeTVRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ShakeTVRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_data()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.data());
    }
    if (cached_has_bits & 0x00000004u) {
      dataid_ = from.dataid_;
    }
    if (cached_has_bits & 0x00000008u) {
      endflag_ = from.endflag_;
    }
    if (cached_has_bits & 0x00000010u) {
      voicelen_ = from.voicelen_;
    }
    if (cached_has_bits & 0x00000020u) {
      nettype_ = from.nettype_;
    }
    if (cached_has_bits & 0x00000040u) {
      sdkversion_ = from.sdkversion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShakeTVRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ShakeTVRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShakeTVRequest::CopyFrom(const ShakeTVRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ShakeTVRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShakeTVRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_data()) {
    if (!this->data_->IsInitialized()) return false;
  }
  return true;
}

void ShakeTVRequest::Swap(ShakeTVRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShakeTVRequest::InternalSwap(ShakeTVRequest* other) {
  std::swap(baserequest_, other->baserequest_);
  std::swap(data_, other->data_);
  std::swap(dataid_, other->dataid_);
  std::swap(endflag_, other->endflag_);
  std::swap(voicelen_, other->voicelen_);
  std::swap(nettype_, other->nettype_);
  std::swap(sdkversion_, other->sdkversion_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShakeTVRequest::GetMetadata() const {
  protobuf_mmvoiceaddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiceaddr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShakeTVRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool ShakeTVRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ShakeTVRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void ShakeTVRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void ShakeTVRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& ShakeTVRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeTVRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* ShakeTVRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ShakeTVRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* ShakeTVRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.ShakeTVRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void ShakeTVRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ShakeTVRequest.BaseRequest)
}

// required .micromsg.SKBuiltinBuffer_t Data = 2;
bool ShakeTVRequest::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ShakeTVRequest::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void ShakeTVRequest::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void ShakeTVRequest::clear_data() {
  if (data_ != NULL) data_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_data();
}
const ::micromsg::SKBuiltinBuffer_t& ShakeTVRequest::data() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeTVRequest.Data)
  return data_ != NULL ? *data_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* ShakeTVRequest::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ShakeTVRequest.Data)
  return data_;
}
::micromsg::SKBuiltinBuffer_t* ShakeTVRequest::release_data() {
  // @@protoc_insertion_point(field_release:micromsg.ShakeTVRequest.Data)
  clear_has_data();
  ::micromsg::SKBuiltinBuffer_t* temp = data_;
  data_ = NULL;
  return temp;
}
void ShakeTVRequest::set_allocated_data(::micromsg::SKBuiltinBuffer_t* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ShakeTVRequest.Data)
}

// required uint32 DataId = 3;
bool ShakeTVRequest::has_dataid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ShakeTVRequest::set_has_dataid() {
  _has_bits_[0] |= 0x00000004u;
}
void ShakeTVRequest::clear_has_dataid() {
  _has_bits_[0] &= ~0x00000004u;
}
void ShakeTVRequest::clear_dataid() {
  dataid_ = 0u;
  clear_has_dataid();
}
::google::protobuf::uint32 ShakeTVRequest::dataid() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeTVRequest.DataId)
  return dataid_;
}
void ShakeTVRequest::set_dataid(::google::protobuf::uint32 value) {
  set_has_dataid();
  dataid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ShakeTVRequest.DataId)
}

// required uint32 EndFlag = 4;
bool ShakeTVRequest::has_endflag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ShakeTVRequest::set_has_endflag() {
  _has_bits_[0] |= 0x00000008u;
}
void ShakeTVRequest::clear_has_endflag() {
  _has_bits_[0] &= ~0x00000008u;
}
void ShakeTVRequest::clear_endflag() {
  endflag_ = 0u;
  clear_has_endflag();
}
::google::protobuf::uint32 ShakeTVRequest::endflag() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeTVRequest.EndFlag)
  return endflag_;
}
void ShakeTVRequest::set_endflag(::google::protobuf::uint32 value) {
  set_has_endflag();
  endflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ShakeTVRequest.EndFlag)
}

// required float VoiceLen = 5;
bool ShakeTVRequest::has_voicelen() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ShakeTVRequest::set_has_voicelen() {
  _has_bits_[0] |= 0x00000010u;
}
void ShakeTVRequest::clear_has_voicelen() {
  _has_bits_[0] &= ~0x00000010u;
}
void ShakeTVRequest::clear_voicelen() {
  voicelen_ = 0;
  clear_has_voicelen();
}
float ShakeTVRequest::voicelen() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeTVRequest.VoiceLen)
  return voicelen_;
}
void ShakeTVRequest::set_voicelen(float value) {
  set_has_voicelen();
  voicelen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ShakeTVRequest.VoiceLen)
}

// required uint32 NetType = 6;
bool ShakeTVRequest::has_nettype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ShakeTVRequest::set_has_nettype() {
  _has_bits_[0] |= 0x00000020u;
}
void ShakeTVRequest::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000020u;
}
void ShakeTVRequest::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
::google::protobuf::uint32 ShakeTVRequest::nettype() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeTVRequest.NetType)
  return nettype_;
}
void ShakeTVRequest::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ShakeTVRequest.NetType)
}

// required uint32 SdkVersion = 7;
bool ShakeTVRequest::has_sdkversion() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ShakeTVRequest::set_has_sdkversion() {
  _has_bits_[0] |= 0x00000040u;
}
void ShakeTVRequest::clear_has_sdkversion() {
  _has_bits_[0] &= ~0x00000040u;
}
void ShakeTVRequest::clear_sdkversion() {
  sdkversion_ = 0u;
  clear_has_sdkversion();
}
::google::protobuf::uint32 ShakeTVRequest::sdkversion() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeTVRequest.SdkVersion)
  return sdkversion_;
}
void ShakeTVRequest::set_sdkversion(::google::protobuf::uint32 value) {
  set_has_sdkversion();
  sdkversion_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ShakeTVRequest.SdkVersion)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShakeTVResponse::kBaseResponseFieldNumber;
const int ShakeTVResponse::kEndFlagFieldNumber;
const int ShakeTVResponse::kTypeFieldNumber;
const int ShakeTVResponse::kDescriptionXMLFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShakeTVResponse::ShakeTVResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoiceaddr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ShakeTVResponse)
}
ShakeTVResponse::ShakeTVResponse(const ShakeTVResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  descriptionxml_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_descriptionxml()) {
    descriptionxml_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.descriptionxml_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  ::memcpy(&endflag_, &from.endflag_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&endflag_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:micromsg.ShakeTVResponse)
}

void ShakeTVResponse::SharedCtor() {
  _cached_size_ = 0;
  descriptionxml_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(type_));
}

ShakeTVResponse::~ShakeTVResponse() {
  // @@protoc_insertion_point(destructor:micromsg.ShakeTVResponse)
  SharedDtor();
}

void ShakeTVResponse::SharedDtor() {
  descriptionxml_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void ShakeTVResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShakeTVResponse::descriptor() {
  protobuf_mmvoiceaddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiceaddr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShakeTVResponse& ShakeTVResponse::default_instance() {
  protobuf_mmvoiceaddr_2eproto::InitDefaults();
  return *internal_default_instance();
}

ShakeTVResponse* ShakeTVResponse::New(::google::protobuf::Arena* arena) const {
  ShakeTVResponse* n = new ShakeTVResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShakeTVResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ShakeTVResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_descriptionxml()) {
      GOOGLE_DCHECK(!descriptionxml_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*descriptionxml_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&endflag_, 0, reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&endflag_) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ShakeTVResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ShakeTVResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 EndFlag = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_endflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string DescriptionXML = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_descriptionxml()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->descriptionxml().data(), this->descriptionxml().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ShakeTVResponse.DescriptionXML");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ShakeTVResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ShakeTVResponse)
  return false;
#undef DO_
}

void ShakeTVResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ShakeTVResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 EndFlag = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->endflag(), output);
  }

  // required uint32 Type = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // optional string DescriptionXML = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->descriptionxml().data(), this->descriptionxml().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ShakeTVResponse.DescriptionXML");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->descriptionxml(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ShakeTVResponse)
}

::google::protobuf::uint8* ShakeTVResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ShakeTVResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 EndFlag = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->endflag(), target);
  }

  // required uint32 Type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // optional string DescriptionXML = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->descriptionxml().data(), this->descriptionxml().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ShakeTVResponse.DescriptionXML");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->descriptionxml(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ShakeTVResponse)
  return target;
}

size_t ShakeTVResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.ShakeTVResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_endflag()) {
    // required uint32 EndFlag = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->endflag());
  }

  if (has_type()) {
    // required uint32 Type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  return total_size;
}
size_t ShakeTVResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ShakeTVResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 EndFlag = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->endflag());

    // required uint32 Type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string DescriptionXML = 4;
  if (has_descriptionxml()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->descriptionxml());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShakeTVResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ShakeTVResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ShakeTVResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShakeTVResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ShakeTVResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ShakeTVResponse)
    MergeFrom(*source);
  }
}

void ShakeTVResponse::MergeFrom(const ShakeTVResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ShakeTVResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_descriptionxml();
      descriptionxml_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.descriptionxml_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000004u) {
      endflag_ = from.endflag_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShakeTVResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ShakeTVResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShakeTVResponse::CopyFrom(const ShakeTVResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ShakeTVResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShakeTVResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void ShakeTVResponse::Swap(ShakeTVResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShakeTVResponse::InternalSwap(ShakeTVResponse* other) {
  descriptionxml_.Swap(&other->descriptionxml_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(endflag_, other->endflag_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShakeTVResponse::GetMetadata() const {
  protobuf_mmvoiceaddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiceaddr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShakeTVResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool ShakeTVResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ShakeTVResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
void ShakeTVResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
void ShakeTVResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& ShakeTVResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeTVResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* ShakeTVResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ShakeTVResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* ShakeTVResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.ShakeTVResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void ShakeTVResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ShakeTVResponse.BaseResponse)
}

// required uint32 EndFlag = 2;
bool ShakeTVResponse::has_endflag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ShakeTVResponse::set_has_endflag() {
  _has_bits_[0] |= 0x00000004u;
}
void ShakeTVResponse::clear_has_endflag() {
  _has_bits_[0] &= ~0x00000004u;
}
void ShakeTVResponse::clear_endflag() {
  endflag_ = 0u;
  clear_has_endflag();
}
::google::protobuf::uint32 ShakeTVResponse::endflag() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeTVResponse.EndFlag)
  return endflag_;
}
void ShakeTVResponse::set_endflag(::google::protobuf::uint32 value) {
  set_has_endflag();
  endflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ShakeTVResponse.EndFlag)
}

// required uint32 Type = 3;
bool ShakeTVResponse::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ShakeTVResponse::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void ShakeTVResponse::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void ShakeTVResponse::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 ShakeTVResponse::type() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeTVResponse.Type)
  return type_;
}
void ShakeTVResponse::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ShakeTVResponse.Type)
}

// optional string DescriptionXML = 4;
bool ShakeTVResponse::has_descriptionxml() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ShakeTVResponse::set_has_descriptionxml() {
  _has_bits_[0] |= 0x00000001u;
}
void ShakeTVResponse::clear_has_descriptionxml() {
  _has_bits_[0] &= ~0x00000001u;
}
void ShakeTVResponse::clear_descriptionxml() {
  descriptionxml_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_descriptionxml();
}
const ::std::string& ShakeTVResponse::descriptionxml() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeTVResponse.DescriptionXML)
  return descriptionxml_.GetNoArena();
}
void ShakeTVResponse::set_descriptionxml(const ::std::string& value) {
  set_has_descriptionxml();
  descriptionxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ShakeTVResponse.DescriptionXML)
}
#if LANG_CXX11
void ShakeTVResponse::set_descriptionxml(::std::string&& value) {
  set_has_descriptionxml();
  descriptionxml_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ShakeTVResponse.DescriptionXML)
}
#endif
void ShakeTVResponse::set_descriptionxml(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_descriptionxml();
  descriptionxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ShakeTVResponse.DescriptionXML)
}
void ShakeTVResponse::set_descriptionxml(const char* value, size_t size) {
  set_has_descriptionxml();
  descriptionxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ShakeTVResponse.DescriptionXML)
}
::std::string* ShakeTVResponse::mutable_descriptionxml() {
  set_has_descriptionxml();
  // @@protoc_insertion_point(field_mutable:micromsg.ShakeTVResponse.DescriptionXML)
  return descriptionxml_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ShakeTVResponse::release_descriptionxml() {
  // @@protoc_insertion_point(field_release:micromsg.ShakeTVResponse.DescriptionXML)
  clear_has_descriptionxml();
  return descriptionxml_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ShakeTVResponse::set_allocated_descriptionxml(::std::string* descriptionxml) {
  if (descriptionxml != NULL) {
    set_has_descriptionxml();
  } else {
    clear_has_descriptionxml();
  }
  descriptionxml_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), descriptionxml);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ShakeTVResponse.DescriptionXML)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTVInfoRequest::kBaseRequestFieldNumber;
const int GetTVInfoRequest::kTVIDFieldNumber;
const int GetTVInfoRequest::kSceneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTVInfoRequest::GetTVInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoiceaddr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetTVInfoRequest)
}
GetTVInfoRequest::GetTVInfoRequest(const GetTVInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tvid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tvid()) {
    tvid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tvid_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  scene_ = from.scene_;
  // @@protoc_insertion_point(copy_constructor:micromsg.GetTVInfoRequest)
}

void GetTVInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  tvid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&scene_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(scene_));
}

GetTVInfoRequest::~GetTVInfoRequest() {
  // @@protoc_insertion_point(destructor:micromsg.GetTVInfoRequest)
  SharedDtor();
}

void GetTVInfoRequest::SharedDtor() {
  tvid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GetTVInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTVInfoRequest::descriptor() {
  protobuf_mmvoiceaddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiceaddr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetTVInfoRequest& GetTVInfoRequest::default_instance() {
  protobuf_mmvoiceaddr_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetTVInfoRequest* GetTVInfoRequest::New(::google::protobuf::Arena* arena) const {
  GetTVInfoRequest* n = new GetTVInfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetTVInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetTVInfoRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_tvid()) {
      GOOGLE_DCHECK(!tvid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tvid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  scene_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetTVInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetTVInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string TVID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tvid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tvid().data(), this->tvid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetTVInfoRequest.TVID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Scene = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_scene();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetTVInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetTVInfoRequest)
  return false;
#undef DO_
}

void GetTVInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetTVInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string TVID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tvid().data(), this->tvid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetTVInfoRequest.TVID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tvid(), output);
  }

  // required uint32 Scene = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->scene(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetTVInfoRequest)
}

::google::protobuf::uint8* GetTVInfoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetTVInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string TVID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tvid().data(), this->tvid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetTVInfoRequest.TVID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tvid(), target);
  }

  // required uint32 Scene = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->scene(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetTVInfoRequest)
  return target;
}

size_t GetTVInfoRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetTVInfoRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_scene()) {
    // required uint32 Scene = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene());
  }

  return total_size;
}
size_t GetTVInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetTVInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 Scene = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string TVID = 2;
  if (has_tvid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tvid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTVInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetTVInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTVInfoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTVInfoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetTVInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetTVInfoRequest)
    MergeFrom(*source);
  }
}

void GetTVInfoRequest::MergeFrom(const GetTVInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetTVInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_tvid();
      tvid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tvid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000004u) {
      scene_ = from.scene_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetTVInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetTVInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTVInfoRequest::CopyFrom(const GetTVInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetTVInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTVInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GetTVInfoRequest::Swap(GetTVInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTVInfoRequest::InternalSwap(GetTVInfoRequest* other) {
  tvid_.Swap(&other->tvid_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(scene_, other->scene_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetTVInfoRequest::GetMetadata() const {
  protobuf_mmvoiceaddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiceaddr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetTVInfoRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool GetTVInfoRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetTVInfoRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void GetTVInfoRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetTVInfoRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GetTVInfoRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetTVInfoRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GetTVInfoRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetTVInfoRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GetTVInfoRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetTVInfoRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GetTVInfoRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetTVInfoRequest.BaseRequest)
}

// optional string TVID = 2;
bool GetTVInfoRequest::has_tvid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetTVInfoRequest::set_has_tvid() {
  _has_bits_[0] |= 0x00000001u;
}
void GetTVInfoRequest::clear_has_tvid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetTVInfoRequest::clear_tvid() {
  tvid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tvid();
}
const ::std::string& GetTVInfoRequest::tvid() const {
  // @@protoc_insertion_point(field_get:micromsg.GetTVInfoRequest.TVID)
  return tvid_.GetNoArena();
}
void GetTVInfoRequest::set_tvid(const ::std::string& value) {
  set_has_tvid();
  tvid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetTVInfoRequest.TVID)
}
#if LANG_CXX11
void GetTVInfoRequest::set_tvid(::std::string&& value) {
  set_has_tvid();
  tvid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetTVInfoRequest.TVID)
}
#endif
void GetTVInfoRequest::set_tvid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tvid();
  tvid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetTVInfoRequest.TVID)
}
void GetTVInfoRequest::set_tvid(const char* value, size_t size) {
  set_has_tvid();
  tvid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetTVInfoRequest.TVID)
}
::std::string* GetTVInfoRequest::mutable_tvid() {
  set_has_tvid();
  // @@protoc_insertion_point(field_mutable:micromsg.GetTVInfoRequest.TVID)
  return tvid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetTVInfoRequest::release_tvid() {
  // @@protoc_insertion_point(field_release:micromsg.GetTVInfoRequest.TVID)
  clear_has_tvid();
  return tvid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetTVInfoRequest::set_allocated_tvid(::std::string* tvid) {
  if (tvid != NULL) {
    set_has_tvid();
  } else {
    clear_has_tvid();
  }
  tvid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tvid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetTVInfoRequest.TVID)
}

// required uint32 Scene = 3;
bool GetTVInfoRequest::has_scene() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetTVInfoRequest::set_has_scene() {
  _has_bits_[0] |= 0x00000004u;
}
void GetTVInfoRequest::clear_has_scene() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetTVInfoRequest::clear_scene() {
  scene_ = 0u;
  clear_has_scene();
}
::google::protobuf::uint32 GetTVInfoRequest::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.GetTVInfoRequest.Scene)
  return scene_;
}
void GetTVInfoRequest::set_scene(::google::protobuf::uint32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetTVInfoRequest.Scene)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTVInfoResponse::kBaseResponseFieldNumber;
const int GetTVInfoResponse::kTypeFieldNumber;
const int GetTVInfoResponse::kDescriptionXMLFieldNumber;
const int GetTVInfoResponse::kTVIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTVInfoResponse::GetTVInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoiceaddr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetTVInfoResponse)
}
GetTVInfoResponse::GetTVInfoResponse(const GetTVInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  descriptionxml_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_descriptionxml()) {
    descriptionxml_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.descriptionxml_);
  }
  tvid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tvid()) {
    tvid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tvid_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:micromsg.GetTVInfoResponse)
}

void GetTVInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  descriptionxml_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tvid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(type_));
}

GetTVInfoResponse::~GetTVInfoResponse() {
  // @@protoc_insertion_point(destructor:micromsg.GetTVInfoResponse)
  SharedDtor();
}

void GetTVInfoResponse::SharedDtor() {
  descriptionxml_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tvid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void GetTVInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTVInfoResponse::descriptor() {
  protobuf_mmvoiceaddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiceaddr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetTVInfoResponse& GetTVInfoResponse::default_instance() {
  protobuf_mmvoiceaddr_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetTVInfoResponse* GetTVInfoResponse::New(::google::protobuf::Arena* arena) const {
  GetTVInfoResponse* n = new GetTVInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetTVInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetTVInfoResponse)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_descriptionxml()) {
      GOOGLE_DCHECK(!descriptionxml_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*descriptionxml_.UnsafeRawStringPointer())->clear();
    }
    if (has_tvid()) {
      GOOGLE_DCHECK(!tvid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tvid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetTVInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetTVInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string DescriptionXML = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_descriptionxml()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->descriptionxml().data(), this->descriptionxml().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetTVInfoResponse.DescriptionXML");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string TVID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tvid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tvid().data(), this->tvid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetTVInfoResponse.TVID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetTVInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetTVInfoResponse)
  return false;
#undef DO_
}

void GetTVInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetTVInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 Type = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional string DescriptionXML = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->descriptionxml().data(), this->descriptionxml().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetTVInfoResponse.DescriptionXML");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->descriptionxml(), output);
  }

  // optional string TVID = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tvid().data(), this->tvid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetTVInfoResponse.TVID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->tvid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetTVInfoResponse)
}

::google::protobuf::uint8* GetTVInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetTVInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 Type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional string DescriptionXML = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->descriptionxml().data(), this->descriptionxml().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetTVInfoResponse.DescriptionXML");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->descriptionxml(), target);
  }

  // optional string TVID = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tvid().data(), this->tvid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetTVInfoResponse.TVID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->tvid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetTVInfoResponse)
  return target;
}

size_t GetTVInfoResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetTVInfoResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_type()) {
    // required uint32 Type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  return total_size;
}
size_t GetTVInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetTVInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint32 Type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string DescriptionXML = 3;
    if (has_descriptionxml()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->descriptionxml());
    }

    // optional string TVID = 4;
    if (has_tvid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tvid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTVInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetTVInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTVInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTVInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetTVInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetTVInfoResponse)
    MergeFrom(*source);
  }
}

void GetTVInfoResponse::MergeFrom(const GetTVInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetTVInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_descriptionxml();
      descriptionxml_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.descriptionxml_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_tvid();
      tvid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tvid_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetTVInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetTVInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTVInfoResponse::CopyFrom(const GetTVInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetTVInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTVInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void GetTVInfoResponse::Swap(GetTVInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTVInfoResponse::InternalSwap(GetTVInfoResponse* other) {
  descriptionxml_.Swap(&other->descriptionxml_);
  tvid_.Swap(&other->tvid_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetTVInfoResponse::GetMetadata() const {
  protobuf_mmvoiceaddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiceaddr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetTVInfoResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetTVInfoResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetTVInfoResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000004u;
}
void GetTVInfoResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetTVInfoResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetTVInfoResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetTVInfoResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetTVInfoResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetTVInfoResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetTVInfoResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetTVInfoResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetTVInfoResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetTVInfoResponse.BaseResponse)
}

// required uint32 Type = 2;
bool GetTVInfoResponse::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetTVInfoResponse::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void GetTVInfoResponse::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetTVInfoResponse::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 GetTVInfoResponse::type() const {
  // @@protoc_insertion_point(field_get:micromsg.GetTVInfoResponse.Type)
  return type_;
}
void GetTVInfoResponse::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetTVInfoResponse.Type)
}

// optional string DescriptionXML = 3;
bool GetTVInfoResponse::has_descriptionxml() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetTVInfoResponse::set_has_descriptionxml() {
  _has_bits_[0] |= 0x00000001u;
}
void GetTVInfoResponse::clear_has_descriptionxml() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetTVInfoResponse::clear_descriptionxml() {
  descriptionxml_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_descriptionxml();
}
const ::std::string& GetTVInfoResponse::descriptionxml() const {
  // @@protoc_insertion_point(field_get:micromsg.GetTVInfoResponse.DescriptionXML)
  return descriptionxml_.GetNoArena();
}
void GetTVInfoResponse::set_descriptionxml(const ::std::string& value) {
  set_has_descriptionxml();
  descriptionxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetTVInfoResponse.DescriptionXML)
}
#if LANG_CXX11
void GetTVInfoResponse::set_descriptionxml(::std::string&& value) {
  set_has_descriptionxml();
  descriptionxml_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetTVInfoResponse.DescriptionXML)
}
#endif
void GetTVInfoResponse::set_descriptionxml(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_descriptionxml();
  descriptionxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetTVInfoResponse.DescriptionXML)
}
void GetTVInfoResponse::set_descriptionxml(const char* value, size_t size) {
  set_has_descriptionxml();
  descriptionxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetTVInfoResponse.DescriptionXML)
}
::std::string* GetTVInfoResponse::mutable_descriptionxml() {
  set_has_descriptionxml();
  // @@protoc_insertion_point(field_mutable:micromsg.GetTVInfoResponse.DescriptionXML)
  return descriptionxml_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetTVInfoResponse::release_descriptionxml() {
  // @@protoc_insertion_point(field_release:micromsg.GetTVInfoResponse.DescriptionXML)
  clear_has_descriptionxml();
  return descriptionxml_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetTVInfoResponse::set_allocated_descriptionxml(::std::string* descriptionxml) {
  if (descriptionxml != NULL) {
    set_has_descriptionxml();
  } else {
    clear_has_descriptionxml();
  }
  descriptionxml_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), descriptionxml);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetTVInfoResponse.DescriptionXML)
}

// optional string TVID = 4;
bool GetTVInfoResponse::has_tvid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetTVInfoResponse::set_has_tvid() {
  _has_bits_[0] |= 0x00000002u;
}
void GetTVInfoResponse::clear_has_tvid() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetTVInfoResponse::clear_tvid() {
  tvid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tvid();
}
const ::std::string& GetTVInfoResponse::tvid() const {
  // @@protoc_insertion_point(field_get:micromsg.GetTVInfoResponse.TVID)
  return tvid_.GetNoArena();
}
void GetTVInfoResponse::set_tvid(const ::std::string& value) {
  set_has_tvid();
  tvid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetTVInfoResponse.TVID)
}
#if LANG_CXX11
void GetTVInfoResponse::set_tvid(::std::string&& value) {
  set_has_tvid();
  tvid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetTVInfoResponse.TVID)
}
#endif
void GetTVInfoResponse::set_tvid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tvid();
  tvid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetTVInfoResponse.TVID)
}
void GetTVInfoResponse::set_tvid(const char* value, size_t size) {
  set_has_tvid();
  tvid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetTVInfoResponse.TVID)
}
::std::string* GetTVInfoResponse::mutable_tvid() {
  set_has_tvid();
  // @@protoc_insertion_point(field_mutable:micromsg.GetTVInfoResponse.TVID)
  return tvid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetTVInfoResponse::release_tvid() {
  // @@protoc_insertion_point(field_release:micromsg.GetTVInfoResponse.TVID)
  clear_has_tvid();
  return tvid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetTVInfoResponse::set_allocated_tvid(::std::string* tvid) {
  if (tvid != NULL) {
    set_has_tvid();
  } else {
    clear_has_tvid();
  }
  tvid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tvid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetTVInfoResponse.TVID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShakeMusicRequest::kBaseRequestFieldNumber;
const int ShakeMusicRequest::kDataFieldNumber;
const int ShakeMusicRequest::kDataIdFieldNumber;
const int ShakeMusicRequest::kEndFlagFieldNumber;
const int ShakeMusicRequest::kVoiceLenFieldNumber;
const int ShakeMusicRequest::kNetTypeFieldNumber;
const int ShakeMusicRequest::kSdkVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShakeMusicRequest::ShakeMusicRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoiceaddr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ShakeMusicRequest)
}
ShakeMusicRequest::ShakeMusicRequest(const ShakeMusicRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_data()) {
    data_ = new ::micromsg::SKBuiltinBuffer_t(*from.data_);
  } else {
    data_ = NULL;
  }
  ::memcpy(&dataid_, &from.dataid_,
    reinterpret_cast<char*>(&sdkversion_) -
    reinterpret_cast<char*>(&dataid_) + sizeof(sdkversion_));
  // @@protoc_insertion_point(copy_constructor:micromsg.ShakeMusicRequest)
}

void ShakeMusicRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&sdkversion_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(sdkversion_));
}

ShakeMusicRequest::~ShakeMusicRequest() {
  // @@protoc_insertion_point(destructor:micromsg.ShakeMusicRequest)
  SharedDtor();
}

void ShakeMusicRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete data_;
  }
}

void ShakeMusicRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShakeMusicRequest::descriptor() {
  protobuf_mmvoiceaddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiceaddr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShakeMusicRequest& ShakeMusicRequest::default_instance() {
  protobuf_mmvoiceaddr_2eproto::InitDefaults();
  return *internal_default_instance();
}

ShakeMusicRequest* ShakeMusicRequest::New(::google::protobuf::Arena* arena) const {
  ShakeMusicRequest* n = new ShakeMusicRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShakeMusicRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ShakeMusicRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_data()) {
      GOOGLE_DCHECK(data_ != NULL);
      data_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 124u) {
    ::memset(&dataid_, 0, reinterpret_cast<char*>(&sdkversion_) -
      reinterpret_cast<char*>(&dataid_) + sizeof(sdkversion_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ShakeMusicRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ShakeMusicRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t Data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 DataId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_dataid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dataid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 EndFlag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_endflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float VoiceLen = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_voicelen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &voicelen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 NetType = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_nettype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nettype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 SdkVersion = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_sdkversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sdkversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ShakeMusicRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ShakeMusicRequest)
  return false;
#undef DO_
}

void ShakeMusicRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ShakeMusicRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required .micromsg.SKBuiltinBuffer_t Data = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->data_, output);
  }

  // required uint32 DataId = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dataid(), output);
  }

  // required uint32 EndFlag = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->endflag(), output);
  }

  // required float VoiceLen = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->voicelen(), output);
  }

  // required uint32 NetType = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->nettype(), output);
  }

  // required uint32 SdkVersion = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->sdkversion(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ShakeMusicRequest)
}

::google::protobuf::uint8* ShakeMusicRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ShakeMusicRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t Data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->data_, deterministic, target);
  }

  // required uint32 DataId = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dataid(), target);
  }

  // required uint32 EndFlag = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->endflag(), target);
  }

  // required float VoiceLen = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->voicelen(), target);
  }

  // required uint32 NetType = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->nettype(), target);
  }

  // required uint32 SdkVersion = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->sdkversion(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ShakeMusicRequest)
  return target;
}

size_t ShakeMusicRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.ShakeMusicRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_data()) {
    // required .micromsg.SKBuiltinBuffer_t Data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  if (has_dataid()) {
    // required uint32 DataId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dataid());
  }

  if (has_endflag()) {
    // required uint32 EndFlag = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->endflag());
  }

  if (has_voicelen()) {
    // required float VoiceLen = 5;
    total_size += 1 + 4;
  }

  if (has_nettype()) {
    // required uint32 NetType = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nettype());
  }

  if (has_sdkversion()) {
    // required uint32 SdkVersion = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sdkversion());
  }

  return total_size;
}
size_t ShakeMusicRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ShakeMusicRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.SKBuiltinBuffer_t Data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);

    // required uint32 DataId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dataid());

    // required uint32 EndFlag = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->endflag());

    // required float VoiceLen = 5;
    total_size += 1 + 4;

    // required uint32 NetType = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nettype());

    // required uint32 SdkVersion = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sdkversion());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShakeMusicRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ShakeMusicRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ShakeMusicRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShakeMusicRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ShakeMusicRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ShakeMusicRequest)
    MergeFrom(*source);
  }
}

void ShakeMusicRequest::MergeFrom(const ShakeMusicRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ShakeMusicRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_data()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.data());
    }
    if (cached_has_bits & 0x00000004u) {
      dataid_ = from.dataid_;
    }
    if (cached_has_bits & 0x00000008u) {
      endflag_ = from.endflag_;
    }
    if (cached_has_bits & 0x00000010u) {
      voicelen_ = from.voicelen_;
    }
    if (cached_has_bits & 0x00000020u) {
      nettype_ = from.nettype_;
    }
    if (cached_has_bits & 0x00000040u) {
      sdkversion_ = from.sdkversion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShakeMusicRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ShakeMusicRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShakeMusicRequest::CopyFrom(const ShakeMusicRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ShakeMusicRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShakeMusicRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_data()) {
    if (!this->data_->IsInitialized()) return false;
  }
  return true;
}

void ShakeMusicRequest::Swap(ShakeMusicRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShakeMusicRequest::InternalSwap(ShakeMusicRequest* other) {
  std::swap(baserequest_, other->baserequest_);
  std::swap(data_, other->data_);
  std::swap(dataid_, other->dataid_);
  std::swap(endflag_, other->endflag_);
  std::swap(voicelen_, other->voicelen_);
  std::swap(nettype_, other->nettype_);
  std::swap(sdkversion_, other->sdkversion_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShakeMusicRequest::GetMetadata() const {
  protobuf_mmvoiceaddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiceaddr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShakeMusicRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool ShakeMusicRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ShakeMusicRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void ShakeMusicRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void ShakeMusicRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& ShakeMusicRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeMusicRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* ShakeMusicRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ShakeMusicRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* ShakeMusicRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.ShakeMusicRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void ShakeMusicRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ShakeMusicRequest.BaseRequest)
}

// required .micromsg.SKBuiltinBuffer_t Data = 2;
bool ShakeMusicRequest::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ShakeMusicRequest::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void ShakeMusicRequest::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void ShakeMusicRequest::clear_data() {
  if (data_ != NULL) data_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_data();
}
const ::micromsg::SKBuiltinBuffer_t& ShakeMusicRequest::data() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeMusicRequest.Data)
  return data_ != NULL ? *data_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* ShakeMusicRequest::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ShakeMusicRequest.Data)
  return data_;
}
::micromsg::SKBuiltinBuffer_t* ShakeMusicRequest::release_data() {
  // @@protoc_insertion_point(field_release:micromsg.ShakeMusicRequest.Data)
  clear_has_data();
  ::micromsg::SKBuiltinBuffer_t* temp = data_;
  data_ = NULL;
  return temp;
}
void ShakeMusicRequest::set_allocated_data(::micromsg::SKBuiltinBuffer_t* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ShakeMusicRequest.Data)
}

// required uint32 DataId = 3;
bool ShakeMusicRequest::has_dataid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ShakeMusicRequest::set_has_dataid() {
  _has_bits_[0] |= 0x00000004u;
}
void ShakeMusicRequest::clear_has_dataid() {
  _has_bits_[0] &= ~0x00000004u;
}
void ShakeMusicRequest::clear_dataid() {
  dataid_ = 0u;
  clear_has_dataid();
}
::google::protobuf::uint32 ShakeMusicRequest::dataid() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeMusicRequest.DataId)
  return dataid_;
}
void ShakeMusicRequest::set_dataid(::google::protobuf::uint32 value) {
  set_has_dataid();
  dataid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ShakeMusicRequest.DataId)
}

// required uint32 EndFlag = 4;
bool ShakeMusicRequest::has_endflag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ShakeMusicRequest::set_has_endflag() {
  _has_bits_[0] |= 0x00000008u;
}
void ShakeMusicRequest::clear_has_endflag() {
  _has_bits_[0] &= ~0x00000008u;
}
void ShakeMusicRequest::clear_endflag() {
  endflag_ = 0u;
  clear_has_endflag();
}
::google::protobuf::uint32 ShakeMusicRequest::endflag() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeMusicRequest.EndFlag)
  return endflag_;
}
void ShakeMusicRequest::set_endflag(::google::protobuf::uint32 value) {
  set_has_endflag();
  endflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ShakeMusicRequest.EndFlag)
}

// required float VoiceLen = 5;
bool ShakeMusicRequest::has_voicelen() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ShakeMusicRequest::set_has_voicelen() {
  _has_bits_[0] |= 0x00000010u;
}
void ShakeMusicRequest::clear_has_voicelen() {
  _has_bits_[0] &= ~0x00000010u;
}
void ShakeMusicRequest::clear_voicelen() {
  voicelen_ = 0;
  clear_has_voicelen();
}
float ShakeMusicRequest::voicelen() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeMusicRequest.VoiceLen)
  return voicelen_;
}
void ShakeMusicRequest::set_voicelen(float value) {
  set_has_voicelen();
  voicelen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ShakeMusicRequest.VoiceLen)
}

// required uint32 NetType = 6;
bool ShakeMusicRequest::has_nettype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ShakeMusicRequest::set_has_nettype() {
  _has_bits_[0] |= 0x00000020u;
}
void ShakeMusicRequest::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000020u;
}
void ShakeMusicRequest::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
::google::protobuf::uint32 ShakeMusicRequest::nettype() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeMusicRequest.NetType)
  return nettype_;
}
void ShakeMusicRequest::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ShakeMusicRequest.NetType)
}

// required uint32 SdkVersion = 7;
bool ShakeMusicRequest::has_sdkversion() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ShakeMusicRequest::set_has_sdkversion() {
  _has_bits_[0] |= 0x00000040u;
}
void ShakeMusicRequest::clear_has_sdkversion() {
  _has_bits_[0] &= ~0x00000040u;
}
void ShakeMusicRequest::clear_sdkversion() {
  sdkversion_ = 0u;
  clear_has_sdkversion();
}
::google::protobuf::uint32 ShakeMusicRequest::sdkversion() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeMusicRequest.SdkVersion)
  return sdkversion_;
}
void ShakeMusicRequest::set_sdkversion(::google::protobuf::uint32 value) {
  set_has_sdkversion();
  sdkversion_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ShakeMusicRequest.SdkVersion)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShakeMusicResponse::kBaseResponseFieldNumber;
const int ShakeMusicResponse::kEndFlagFieldNumber;
const int ShakeMusicResponse::kMusicIdFieldNumber;
const int ShakeMusicResponse::kOffsetFieldNumber;
const int ShakeMusicResponse::kSongNameFieldNumber;
const int ShakeMusicResponse::kSongSingerFieldNumber;
const int ShakeMusicResponse::kSongAlbumFieldNumber;
const int ShakeMusicResponse::kSongAlbumUrlFieldNumber;
const int ShakeMusicResponse::kSongWifiUrlFieldNumber;
const int ShakeMusicResponse::kSongWapLinkUrlFieldNumber;
const int ShakeMusicResponse::kSongWebUrlFieldNumber;
const int ShakeMusicResponse::kSongLyricFieldNumber;
const int ShakeMusicResponse::kResultTypeFieldNumber;
const int ShakeMusicResponse::kTVTypeFieldNumber;
const int ShakeMusicResponse::kTVDescriptionXMLFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShakeMusicResponse::ShakeMusicResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoiceaddr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ShakeMusicResponse)
}
ShakeMusicResponse::ShakeMusicResponse(const ShakeMusicResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tvdescriptionxml_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tvdescriptionxml()) {
    tvdescriptionxml_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tvdescriptionxml_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_songname()) {
    songname_ = new ::micromsg::SKBuiltinBuffer_t(*from.songname_);
  } else {
    songname_ = NULL;
  }
  if (from.has_songsinger()) {
    songsinger_ = new ::micromsg::SKBuiltinBuffer_t(*from.songsinger_);
  } else {
    songsinger_ = NULL;
  }
  if (from.has_songalbum()) {
    songalbum_ = new ::micromsg::SKBuiltinBuffer_t(*from.songalbum_);
  } else {
    songalbum_ = NULL;
  }
  if (from.has_songalbumurl()) {
    songalbumurl_ = new ::micromsg::SKBuiltinBuffer_t(*from.songalbumurl_);
  } else {
    songalbumurl_ = NULL;
  }
  if (from.has_songwifiurl()) {
    songwifiurl_ = new ::micromsg::SKBuiltinBuffer_t(*from.songwifiurl_);
  } else {
    songwifiurl_ = NULL;
  }
  if (from.has_songwaplinkurl()) {
    songwaplinkurl_ = new ::micromsg::SKBuiltinBuffer_t(*from.songwaplinkurl_);
  } else {
    songwaplinkurl_ = NULL;
  }
  if (from.has_songweburl()) {
    songweburl_ = new ::micromsg::SKBuiltinBuffer_t(*from.songweburl_);
  } else {
    songweburl_ = NULL;
  }
  if (from.has_songlyric()) {
    songlyric_ = new ::micromsg::SKBuiltinBuffer_t(*from.songlyric_);
  } else {
    songlyric_ = NULL;
  }
  ::memcpy(&endflag_, &from.endflag_,
    reinterpret_cast<char*>(&tvtype_) -
    reinterpret_cast<char*>(&endflag_) + sizeof(tvtype_));
  // @@protoc_insertion_point(copy_constructor:micromsg.ShakeMusicResponse)
}

void ShakeMusicResponse::SharedCtor() {
  _cached_size_ = 0;
  tvdescriptionxml_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&tvtype_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(tvtype_));
}

ShakeMusicResponse::~ShakeMusicResponse() {
  // @@protoc_insertion_point(destructor:micromsg.ShakeMusicResponse)
  SharedDtor();
}

void ShakeMusicResponse::SharedDtor() {
  tvdescriptionxml_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete songname_;
  }
  if (this != internal_default_instance()) {
    delete songsinger_;
  }
  if (this != internal_default_instance()) {
    delete songalbum_;
  }
  if (this != internal_default_instance()) {
    delete songalbumurl_;
  }
  if (this != internal_default_instance()) {
    delete songwifiurl_;
  }
  if (this != internal_default_instance()) {
    delete songwaplinkurl_;
  }
  if (this != internal_default_instance()) {
    delete songweburl_;
  }
  if (this != internal_default_instance()) {
    delete songlyric_;
  }
}

void ShakeMusicResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShakeMusicResponse::descriptor() {
  protobuf_mmvoiceaddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiceaddr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShakeMusicResponse& ShakeMusicResponse::default_instance() {
  protobuf_mmvoiceaddr_2eproto::InitDefaults();
  return *internal_default_instance();
}

ShakeMusicResponse* ShakeMusicResponse::New(::google::protobuf::Arena* arena) const {
  ShakeMusicResponse* n = new ShakeMusicResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShakeMusicResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ShakeMusicResponse)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_tvdescriptionxml()) {
      GOOGLE_DCHECK(!tvdescriptionxml_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tvdescriptionxml_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_songname()) {
      GOOGLE_DCHECK(songname_ != NULL);
      songname_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_songsinger()) {
      GOOGLE_DCHECK(songsinger_ != NULL);
      songsinger_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_songalbum()) {
      GOOGLE_DCHECK(songalbum_ != NULL);
      songalbum_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_songalbumurl()) {
      GOOGLE_DCHECK(songalbumurl_ != NULL);
      songalbumurl_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_songwifiurl()) {
      GOOGLE_DCHECK(songwifiurl_ != NULL);
      songwifiurl_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_songwaplinkurl()) {
      GOOGLE_DCHECK(songwaplinkurl_ != NULL);
      songwaplinkurl_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 768u) {
    if (has_songweburl()) {
      GOOGLE_DCHECK(songweburl_ != NULL);
      songweburl_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_songlyric()) {
      GOOGLE_DCHECK(songlyric_ != NULL);
      songlyric_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 31744u) {
    ::memset(&endflag_, 0, reinterpret_cast<char*>(&tvtype_) -
      reinterpret_cast<char*>(&endflag_) + sizeof(tvtype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ShakeMusicResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ShakeMusicResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 EndFlag = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_endflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 MusicId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_musicid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &musicid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float Offset = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t SongName = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_songname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t SongSinger = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_songsinger()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t SongAlbum = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_songalbum()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t SongAlbumUrl = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_songalbumurl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t SongWifiUrl = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_songwifiurl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t SongWapLinkUrl = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_songwaplinkurl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t SongWebUrl = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_songweburl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t SongLyric = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_songlyric()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ResultType = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_resulttype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resulttype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 TVType = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_tvtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tvtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string TVDescriptionXML = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tvdescriptionxml()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tvdescriptionxml().data(), this->tvdescriptionxml().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ShakeMusicResponse.TVDescriptionXML");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ShakeMusicResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ShakeMusicResponse)
  return false;
#undef DO_
}

void ShakeMusicResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ShakeMusicResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 EndFlag = 2;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->endflag(), output);
  }

  // required uint32 MusicId = 3;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->musicid(), output);
  }

  // required float Offset = 4;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->offset(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t SongName = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->songname_, output);
  }

  // required .micromsg.SKBuiltinBuffer_t SongSinger = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->songsinger_, output);
  }

  // required .micromsg.SKBuiltinBuffer_t SongAlbum = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->songalbum_, output);
  }

  // required .micromsg.SKBuiltinBuffer_t SongAlbumUrl = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->songalbumurl_, output);
  }

  // required .micromsg.SKBuiltinBuffer_t SongWifiUrl = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->songwifiurl_, output);
  }

  // required .micromsg.SKBuiltinBuffer_t SongWapLinkUrl = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->songwaplinkurl_, output);
  }

  // required .micromsg.SKBuiltinBuffer_t SongWebUrl = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->songweburl_, output);
  }

  // required .micromsg.SKBuiltinBuffer_t SongLyric = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->songlyric_, output);
  }

  // optional uint32 ResultType = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->resulttype(), output);
  }

  // optional uint32 TVType = 14;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->tvtype(), output);
  }

  // optional string TVDescriptionXML = 15;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tvdescriptionxml().data(), this->tvdescriptionxml().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ShakeMusicResponse.TVDescriptionXML");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->tvdescriptionxml(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ShakeMusicResponse)
}

::google::protobuf::uint8* ShakeMusicResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ShakeMusicResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 EndFlag = 2;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->endflag(), target);
  }

  // required uint32 MusicId = 3;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->musicid(), target);
  }

  // required float Offset = 4;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->offset(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t SongName = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->songname_, deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t SongSinger = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->songsinger_, deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t SongAlbum = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->songalbum_, deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t SongAlbumUrl = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->songalbumurl_, deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t SongWifiUrl = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->songwifiurl_, deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t SongWapLinkUrl = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->songwaplinkurl_, deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t SongWebUrl = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->songweburl_, deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t SongLyric = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->songlyric_, deterministic, target);
  }

  // optional uint32 ResultType = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->resulttype(), target);
  }

  // optional uint32 TVType = 14;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->tvtype(), target);
  }

  // optional string TVDescriptionXML = 15;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tvdescriptionxml().data(), this->tvdescriptionxml().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ShakeMusicResponse.TVDescriptionXML");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->tvdescriptionxml(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ShakeMusicResponse)
  return target;
}

size_t ShakeMusicResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.ShakeMusicResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_songname()) {
    // required .micromsg.SKBuiltinBuffer_t SongName = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->songname_);
  }

  if (has_songsinger()) {
    // required .micromsg.SKBuiltinBuffer_t SongSinger = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->songsinger_);
  }

  if (has_songalbum()) {
    // required .micromsg.SKBuiltinBuffer_t SongAlbum = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->songalbum_);
  }

  if (has_songalbumurl()) {
    // required .micromsg.SKBuiltinBuffer_t SongAlbumUrl = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->songalbumurl_);
  }

  if (has_songwifiurl()) {
    // required .micromsg.SKBuiltinBuffer_t SongWifiUrl = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->songwifiurl_);
  }

  if (has_songwaplinkurl()) {
    // required .micromsg.SKBuiltinBuffer_t SongWapLinkUrl = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->songwaplinkurl_);
  }

  if (has_songweburl()) {
    // required .micromsg.SKBuiltinBuffer_t SongWebUrl = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->songweburl_);
  }

  if (has_songlyric()) {
    // required .micromsg.SKBuiltinBuffer_t SongLyric = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->songlyric_);
  }

  if (has_endflag()) {
    // required uint32 EndFlag = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->endflag());
  }

  if (has_musicid()) {
    // required uint32 MusicId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->musicid());
  }

  if (has_offset()) {
    // required float Offset = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t ShakeMusicResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ShakeMusicResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00001ffe) ^ 0x00001ffe) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required .micromsg.SKBuiltinBuffer_t SongName = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->songname_);

    // required .micromsg.SKBuiltinBuffer_t SongSinger = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->songsinger_);

    // required .micromsg.SKBuiltinBuffer_t SongAlbum = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->songalbum_);

    // required .micromsg.SKBuiltinBuffer_t SongAlbumUrl = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->songalbumurl_);

    // required .micromsg.SKBuiltinBuffer_t SongWifiUrl = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->songwifiurl_);

    // required .micromsg.SKBuiltinBuffer_t SongWapLinkUrl = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->songwaplinkurl_);

    // required .micromsg.SKBuiltinBuffer_t SongWebUrl = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->songweburl_);

    // required .micromsg.SKBuiltinBuffer_t SongLyric = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->songlyric_);

    // required uint32 EndFlag = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->endflag());

    // required uint32 MusicId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->musicid());

    // required float Offset = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string TVDescriptionXML = 15;
  if (has_tvdescriptionxml()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tvdescriptionxml());
  }

  if (_has_bits_[8 / 32] & 24576u) {
    // optional uint32 ResultType = 13;
    if (has_resulttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resulttype());
    }

    // optional uint32 TVType = 14;
    if (has_tvtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tvtype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShakeMusicResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ShakeMusicResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ShakeMusicResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShakeMusicResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ShakeMusicResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ShakeMusicResponse)
    MergeFrom(*source);
  }
}

void ShakeMusicResponse::MergeFrom(const ShakeMusicResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ShakeMusicResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_tvdescriptionxml();
      tvdescriptionxml_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tvdescriptionxml_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_songname()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.songname());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_songsinger()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.songsinger());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_songalbum()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.songalbum());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_songalbumurl()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.songalbumurl());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_songwifiurl()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.songwifiurl());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_songwaplinkurl()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.songwaplinkurl());
    }
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_songweburl()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.songweburl());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_songlyric()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.songlyric());
    }
    if (cached_has_bits & 0x00000400u) {
      endflag_ = from.endflag_;
    }
    if (cached_has_bits & 0x00000800u) {
      musicid_ = from.musicid_;
    }
    if (cached_has_bits & 0x00001000u) {
      offset_ = from.offset_;
    }
    if (cached_has_bits & 0x00002000u) {
      resulttype_ = from.resulttype_;
    }
    if (cached_has_bits & 0x00004000u) {
      tvtype_ = from.tvtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShakeMusicResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ShakeMusicResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShakeMusicResponse::CopyFrom(const ShakeMusicResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ShakeMusicResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShakeMusicResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001ffe) != 0x00001ffe) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_songname()) {
    if (!this->songname_->IsInitialized()) return false;
  }
  if (has_songsinger()) {
    if (!this->songsinger_->IsInitialized()) return false;
  }
  if (has_songalbum()) {
    if (!this->songalbum_->IsInitialized()) return false;
  }
  if (has_songalbumurl()) {
    if (!this->songalbumurl_->IsInitialized()) return false;
  }
  if (has_songwifiurl()) {
    if (!this->songwifiurl_->IsInitialized()) return false;
  }
  if (has_songwaplinkurl()) {
    if (!this->songwaplinkurl_->IsInitialized()) return false;
  }
  if (has_songweburl()) {
    if (!this->songweburl_->IsInitialized()) return false;
  }
  if (has_songlyric()) {
    if (!this->songlyric_->IsInitialized()) return false;
  }
  return true;
}

void ShakeMusicResponse::Swap(ShakeMusicResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShakeMusicResponse::InternalSwap(ShakeMusicResponse* other) {
  tvdescriptionxml_.Swap(&other->tvdescriptionxml_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(songname_, other->songname_);
  std::swap(songsinger_, other->songsinger_);
  std::swap(songalbum_, other->songalbum_);
  std::swap(songalbumurl_, other->songalbumurl_);
  std::swap(songwifiurl_, other->songwifiurl_);
  std::swap(songwaplinkurl_, other->songwaplinkurl_);
  std::swap(songweburl_, other->songweburl_);
  std::swap(songlyric_, other->songlyric_);
  std::swap(endflag_, other->endflag_);
  std::swap(musicid_, other->musicid_);
  std::swap(offset_, other->offset_);
  std::swap(resulttype_, other->resulttype_);
  std::swap(tvtype_, other->tvtype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShakeMusicResponse::GetMetadata() const {
  protobuf_mmvoiceaddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiceaddr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShakeMusicResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool ShakeMusicResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ShakeMusicResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
void ShakeMusicResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
void ShakeMusicResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& ShakeMusicResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeMusicResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* ShakeMusicResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ShakeMusicResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* ShakeMusicResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.ShakeMusicResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void ShakeMusicResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ShakeMusicResponse.BaseResponse)
}

// required uint32 EndFlag = 2;
bool ShakeMusicResponse::has_endflag() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ShakeMusicResponse::set_has_endflag() {
  _has_bits_[0] |= 0x00000400u;
}
void ShakeMusicResponse::clear_has_endflag() {
  _has_bits_[0] &= ~0x00000400u;
}
void ShakeMusicResponse::clear_endflag() {
  endflag_ = 0u;
  clear_has_endflag();
}
::google::protobuf::uint32 ShakeMusicResponse::endflag() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeMusicResponse.EndFlag)
  return endflag_;
}
void ShakeMusicResponse::set_endflag(::google::protobuf::uint32 value) {
  set_has_endflag();
  endflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ShakeMusicResponse.EndFlag)
}

// required uint32 MusicId = 3;
bool ShakeMusicResponse::has_musicid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ShakeMusicResponse::set_has_musicid() {
  _has_bits_[0] |= 0x00000800u;
}
void ShakeMusicResponse::clear_has_musicid() {
  _has_bits_[0] &= ~0x00000800u;
}
void ShakeMusicResponse::clear_musicid() {
  musicid_ = 0u;
  clear_has_musicid();
}
::google::protobuf::uint32 ShakeMusicResponse::musicid() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeMusicResponse.MusicId)
  return musicid_;
}
void ShakeMusicResponse::set_musicid(::google::protobuf::uint32 value) {
  set_has_musicid();
  musicid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ShakeMusicResponse.MusicId)
}

// required float Offset = 4;
bool ShakeMusicResponse::has_offset() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ShakeMusicResponse::set_has_offset() {
  _has_bits_[0] |= 0x00001000u;
}
void ShakeMusicResponse::clear_has_offset() {
  _has_bits_[0] &= ~0x00001000u;
}
void ShakeMusicResponse::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
float ShakeMusicResponse::offset() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeMusicResponse.Offset)
  return offset_;
}
void ShakeMusicResponse::set_offset(float value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ShakeMusicResponse.Offset)
}

// required .micromsg.SKBuiltinBuffer_t SongName = 5;
bool ShakeMusicResponse::has_songname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ShakeMusicResponse::set_has_songname() {
  _has_bits_[0] |= 0x00000004u;
}
void ShakeMusicResponse::clear_has_songname() {
  _has_bits_[0] &= ~0x00000004u;
}
void ShakeMusicResponse::clear_songname() {
  if (songname_ != NULL) songname_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_songname();
}
const ::micromsg::SKBuiltinBuffer_t& ShakeMusicResponse::songname() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeMusicResponse.SongName)
  return songname_ != NULL ? *songname_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* ShakeMusicResponse::mutable_songname() {
  set_has_songname();
  if (songname_ == NULL) {
    songname_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ShakeMusicResponse.SongName)
  return songname_;
}
::micromsg::SKBuiltinBuffer_t* ShakeMusicResponse::release_songname() {
  // @@protoc_insertion_point(field_release:micromsg.ShakeMusicResponse.SongName)
  clear_has_songname();
  ::micromsg::SKBuiltinBuffer_t* temp = songname_;
  songname_ = NULL;
  return temp;
}
void ShakeMusicResponse::set_allocated_songname(::micromsg::SKBuiltinBuffer_t* songname) {
  delete songname_;
  songname_ = songname;
  if (songname) {
    set_has_songname();
  } else {
    clear_has_songname();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ShakeMusicResponse.SongName)
}

// required .micromsg.SKBuiltinBuffer_t SongSinger = 6;
bool ShakeMusicResponse::has_songsinger() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ShakeMusicResponse::set_has_songsinger() {
  _has_bits_[0] |= 0x00000008u;
}
void ShakeMusicResponse::clear_has_songsinger() {
  _has_bits_[0] &= ~0x00000008u;
}
void ShakeMusicResponse::clear_songsinger() {
  if (songsinger_ != NULL) songsinger_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_songsinger();
}
const ::micromsg::SKBuiltinBuffer_t& ShakeMusicResponse::songsinger() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeMusicResponse.SongSinger)
  return songsinger_ != NULL ? *songsinger_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* ShakeMusicResponse::mutable_songsinger() {
  set_has_songsinger();
  if (songsinger_ == NULL) {
    songsinger_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ShakeMusicResponse.SongSinger)
  return songsinger_;
}
::micromsg::SKBuiltinBuffer_t* ShakeMusicResponse::release_songsinger() {
  // @@protoc_insertion_point(field_release:micromsg.ShakeMusicResponse.SongSinger)
  clear_has_songsinger();
  ::micromsg::SKBuiltinBuffer_t* temp = songsinger_;
  songsinger_ = NULL;
  return temp;
}
void ShakeMusicResponse::set_allocated_songsinger(::micromsg::SKBuiltinBuffer_t* songsinger) {
  delete songsinger_;
  songsinger_ = songsinger;
  if (songsinger) {
    set_has_songsinger();
  } else {
    clear_has_songsinger();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ShakeMusicResponse.SongSinger)
}

// required .micromsg.SKBuiltinBuffer_t SongAlbum = 7;
bool ShakeMusicResponse::has_songalbum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ShakeMusicResponse::set_has_songalbum() {
  _has_bits_[0] |= 0x00000010u;
}
void ShakeMusicResponse::clear_has_songalbum() {
  _has_bits_[0] &= ~0x00000010u;
}
void ShakeMusicResponse::clear_songalbum() {
  if (songalbum_ != NULL) songalbum_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_songalbum();
}
const ::micromsg::SKBuiltinBuffer_t& ShakeMusicResponse::songalbum() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeMusicResponse.SongAlbum)
  return songalbum_ != NULL ? *songalbum_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* ShakeMusicResponse::mutable_songalbum() {
  set_has_songalbum();
  if (songalbum_ == NULL) {
    songalbum_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ShakeMusicResponse.SongAlbum)
  return songalbum_;
}
::micromsg::SKBuiltinBuffer_t* ShakeMusicResponse::release_songalbum() {
  // @@protoc_insertion_point(field_release:micromsg.ShakeMusicResponse.SongAlbum)
  clear_has_songalbum();
  ::micromsg::SKBuiltinBuffer_t* temp = songalbum_;
  songalbum_ = NULL;
  return temp;
}
void ShakeMusicResponse::set_allocated_songalbum(::micromsg::SKBuiltinBuffer_t* songalbum) {
  delete songalbum_;
  songalbum_ = songalbum;
  if (songalbum) {
    set_has_songalbum();
  } else {
    clear_has_songalbum();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ShakeMusicResponse.SongAlbum)
}

// required .micromsg.SKBuiltinBuffer_t SongAlbumUrl = 8;
bool ShakeMusicResponse::has_songalbumurl() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ShakeMusicResponse::set_has_songalbumurl() {
  _has_bits_[0] |= 0x00000020u;
}
void ShakeMusicResponse::clear_has_songalbumurl() {
  _has_bits_[0] &= ~0x00000020u;
}
void ShakeMusicResponse::clear_songalbumurl() {
  if (songalbumurl_ != NULL) songalbumurl_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_songalbumurl();
}
const ::micromsg::SKBuiltinBuffer_t& ShakeMusicResponse::songalbumurl() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeMusicResponse.SongAlbumUrl)
  return songalbumurl_ != NULL ? *songalbumurl_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* ShakeMusicResponse::mutable_songalbumurl() {
  set_has_songalbumurl();
  if (songalbumurl_ == NULL) {
    songalbumurl_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ShakeMusicResponse.SongAlbumUrl)
  return songalbumurl_;
}
::micromsg::SKBuiltinBuffer_t* ShakeMusicResponse::release_songalbumurl() {
  // @@protoc_insertion_point(field_release:micromsg.ShakeMusicResponse.SongAlbumUrl)
  clear_has_songalbumurl();
  ::micromsg::SKBuiltinBuffer_t* temp = songalbumurl_;
  songalbumurl_ = NULL;
  return temp;
}
void ShakeMusicResponse::set_allocated_songalbumurl(::micromsg::SKBuiltinBuffer_t* songalbumurl) {
  delete songalbumurl_;
  songalbumurl_ = songalbumurl;
  if (songalbumurl) {
    set_has_songalbumurl();
  } else {
    clear_has_songalbumurl();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ShakeMusicResponse.SongAlbumUrl)
}

// required .micromsg.SKBuiltinBuffer_t SongWifiUrl = 9;
bool ShakeMusicResponse::has_songwifiurl() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ShakeMusicResponse::set_has_songwifiurl() {
  _has_bits_[0] |= 0x00000040u;
}
void ShakeMusicResponse::clear_has_songwifiurl() {
  _has_bits_[0] &= ~0x00000040u;
}
void ShakeMusicResponse::clear_songwifiurl() {
  if (songwifiurl_ != NULL) songwifiurl_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_songwifiurl();
}
const ::micromsg::SKBuiltinBuffer_t& ShakeMusicResponse::songwifiurl() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeMusicResponse.SongWifiUrl)
  return songwifiurl_ != NULL ? *songwifiurl_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* ShakeMusicResponse::mutable_songwifiurl() {
  set_has_songwifiurl();
  if (songwifiurl_ == NULL) {
    songwifiurl_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ShakeMusicResponse.SongWifiUrl)
  return songwifiurl_;
}
::micromsg::SKBuiltinBuffer_t* ShakeMusicResponse::release_songwifiurl() {
  // @@protoc_insertion_point(field_release:micromsg.ShakeMusicResponse.SongWifiUrl)
  clear_has_songwifiurl();
  ::micromsg::SKBuiltinBuffer_t* temp = songwifiurl_;
  songwifiurl_ = NULL;
  return temp;
}
void ShakeMusicResponse::set_allocated_songwifiurl(::micromsg::SKBuiltinBuffer_t* songwifiurl) {
  delete songwifiurl_;
  songwifiurl_ = songwifiurl;
  if (songwifiurl) {
    set_has_songwifiurl();
  } else {
    clear_has_songwifiurl();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ShakeMusicResponse.SongWifiUrl)
}

// required .micromsg.SKBuiltinBuffer_t SongWapLinkUrl = 10;
bool ShakeMusicResponse::has_songwaplinkurl() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ShakeMusicResponse::set_has_songwaplinkurl() {
  _has_bits_[0] |= 0x00000080u;
}
void ShakeMusicResponse::clear_has_songwaplinkurl() {
  _has_bits_[0] &= ~0x00000080u;
}
void ShakeMusicResponse::clear_songwaplinkurl() {
  if (songwaplinkurl_ != NULL) songwaplinkurl_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_songwaplinkurl();
}
const ::micromsg::SKBuiltinBuffer_t& ShakeMusicResponse::songwaplinkurl() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeMusicResponse.SongWapLinkUrl)
  return songwaplinkurl_ != NULL ? *songwaplinkurl_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* ShakeMusicResponse::mutable_songwaplinkurl() {
  set_has_songwaplinkurl();
  if (songwaplinkurl_ == NULL) {
    songwaplinkurl_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ShakeMusicResponse.SongWapLinkUrl)
  return songwaplinkurl_;
}
::micromsg::SKBuiltinBuffer_t* ShakeMusicResponse::release_songwaplinkurl() {
  // @@protoc_insertion_point(field_release:micromsg.ShakeMusicResponse.SongWapLinkUrl)
  clear_has_songwaplinkurl();
  ::micromsg::SKBuiltinBuffer_t* temp = songwaplinkurl_;
  songwaplinkurl_ = NULL;
  return temp;
}
void ShakeMusicResponse::set_allocated_songwaplinkurl(::micromsg::SKBuiltinBuffer_t* songwaplinkurl) {
  delete songwaplinkurl_;
  songwaplinkurl_ = songwaplinkurl;
  if (songwaplinkurl) {
    set_has_songwaplinkurl();
  } else {
    clear_has_songwaplinkurl();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ShakeMusicResponse.SongWapLinkUrl)
}

// required .micromsg.SKBuiltinBuffer_t SongWebUrl = 11;
bool ShakeMusicResponse::has_songweburl() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ShakeMusicResponse::set_has_songweburl() {
  _has_bits_[0] |= 0x00000100u;
}
void ShakeMusicResponse::clear_has_songweburl() {
  _has_bits_[0] &= ~0x00000100u;
}
void ShakeMusicResponse::clear_songweburl() {
  if (songweburl_ != NULL) songweburl_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_songweburl();
}
const ::micromsg::SKBuiltinBuffer_t& ShakeMusicResponse::songweburl() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeMusicResponse.SongWebUrl)
  return songweburl_ != NULL ? *songweburl_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* ShakeMusicResponse::mutable_songweburl() {
  set_has_songweburl();
  if (songweburl_ == NULL) {
    songweburl_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ShakeMusicResponse.SongWebUrl)
  return songweburl_;
}
::micromsg::SKBuiltinBuffer_t* ShakeMusicResponse::release_songweburl() {
  // @@protoc_insertion_point(field_release:micromsg.ShakeMusicResponse.SongWebUrl)
  clear_has_songweburl();
  ::micromsg::SKBuiltinBuffer_t* temp = songweburl_;
  songweburl_ = NULL;
  return temp;
}
void ShakeMusicResponse::set_allocated_songweburl(::micromsg::SKBuiltinBuffer_t* songweburl) {
  delete songweburl_;
  songweburl_ = songweburl;
  if (songweburl) {
    set_has_songweburl();
  } else {
    clear_has_songweburl();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ShakeMusicResponse.SongWebUrl)
}

// required .micromsg.SKBuiltinBuffer_t SongLyric = 12;
bool ShakeMusicResponse::has_songlyric() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ShakeMusicResponse::set_has_songlyric() {
  _has_bits_[0] |= 0x00000200u;
}
void ShakeMusicResponse::clear_has_songlyric() {
  _has_bits_[0] &= ~0x00000200u;
}
void ShakeMusicResponse::clear_songlyric() {
  if (songlyric_ != NULL) songlyric_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_songlyric();
}
const ::micromsg::SKBuiltinBuffer_t& ShakeMusicResponse::songlyric() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeMusicResponse.SongLyric)
  return songlyric_ != NULL ? *songlyric_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* ShakeMusicResponse::mutable_songlyric() {
  set_has_songlyric();
  if (songlyric_ == NULL) {
    songlyric_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ShakeMusicResponse.SongLyric)
  return songlyric_;
}
::micromsg::SKBuiltinBuffer_t* ShakeMusicResponse::release_songlyric() {
  // @@protoc_insertion_point(field_release:micromsg.ShakeMusicResponse.SongLyric)
  clear_has_songlyric();
  ::micromsg::SKBuiltinBuffer_t* temp = songlyric_;
  songlyric_ = NULL;
  return temp;
}
void ShakeMusicResponse::set_allocated_songlyric(::micromsg::SKBuiltinBuffer_t* songlyric) {
  delete songlyric_;
  songlyric_ = songlyric;
  if (songlyric) {
    set_has_songlyric();
  } else {
    clear_has_songlyric();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ShakeMusicResponse.SongLyric)
}

// optional uint32 ResultType = 13;
bool ShakeMusicResponse::has_resulttype() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ShakeMusicResponse::set_has_resulttype() {
  _has_bits_[0] |= 0x00002000u;
}
void ShakeMusicResponse::clear_has_resulttype() {
  _has_bits_[0] &= ~0x00002000u;
}
void ShakeMusicResponse::clear_resulttype() {
  resulttype_ = 0u;
  clear_has_resulttype();
}
::google::protobuf::uint32 ShakeMusicResponse::resulttype() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeMusicResponse.ResultType)
  return resulttype_;
}
void ShakeMusicResponse::set_resulttype(::google::protobuf::uint32 value) {
  set_has_resulttype();
  resulttype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ShakeMusicResponse.ResultType)
}

// optional uint32 TVType = 14;
bool ShakeMusicResponse::has_tvtype() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ShakeMusicResponse::set_has_tvtype() {
  _has_bits_[0] |= 0x00004000u;
}
void ShakeMusicResponse::clear_has_tvtype() {
  _has_bits_[0] &= ~0x00004000u;
}
void ShakeMusicResponse::clear_tvtype() {
  tvtype_ = 0u;
  clear_has_tvtype();
}
::google::protobuf::uint32 ShakeMusicResponse::tvtype() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeMusicResponse.TVType)
  return tvtype_;
}
void ShakeMusicResponse::set_tvtype(::google::protobuf::uint32 value) {
  set_has_tvtype();
  tvtype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ShakeMusicResponse.TVType)
}

// optional string TVDescriptionXML = 15;
bool ShakeMusicResponse::has_tvdescriptionxml() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ShakeMusicResponse::set_has_tvdescriptionxml() {
  _has_bits_[0] |= 0x00000001u;
}
void ShakeMusicResponse::clear_has_tvdescriptionxml() {
  _has_bits_[0] &= ~0x00000001u;
}
void ShakeMusicResponse::clear_tvdescriptionxml() {
  tvdescriptionxml_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tvdescriptionxml();
}
const ::std::string& ShakeMusicResponse::tvdescriptionxml() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeMusicResponse.TVDescriptionXML)
  return tvdescriptionxml_.GetNoArena();
}
void ShakeMusicResponse::set_tvdescriptionxml(const ::std::string& value) {
  set_has_tvdescriptionxml();
  tvdescriptionxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ShakeMusicResponse.TVDescriptionXML)
}
#if LANG_CXX11
void ShakeMusicResponse::set_tvdescriptionxml(::std::string&& value) {
  set_has_tvdescriptionxml();
  tvdescriptionxml_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ShakeMusicResponse.TVDescriptionXML)
}
#endif
void ShakeMusicResponse::set_tvdescriptionxml(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tvdescriptionxml();
  tvdescriptionxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ShakeMusicResponse.TVDescriptionXML)
}
void ShakeMusicResponse::set_tvdescriptionxml(const char* value, size_t size) {
  set_has_tvdescriptionxml();
  tvdescriptionxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ShakeMusicResponse.TVDescriptionXML)
}
::std::string* ShakeMusicResponse::mutable_tvdescriptionxml() {
  set_has_tvdescriptionxml();
  // @@protoc_insertion_point(field_mutable:micromsg.ShakeMusicResponse.TVDescriptionXML)
  return tvdescriptionxml_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ShakeMusicResponse::release_tvdescriptionxml() {
  // @@protoc_insertion_point(field_release:micromsg.ShakeMusicResponse.TVDescriptionXML)
  clear_has_tvdescriptionxml();
  return tvdescriptionxml_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ShakeMusicResponse::set_allocated_tvdescriptionxml(::std::string* tvdescriptionxml) {
  if (tvdescriptionxml != NULL) {
    set_has_tvdescriptionxml();
  } else {
    clear_has_tvdescriptionxml();
  }
  tvdescriptionxml_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tvdescriptionxml);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ShakeMusicResponse.TVDescriptionXML)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetQQMusicLyricRequest::kBaseRequestFieldNumber;
const int GetQQMusicLyricRequest::kSongIdFieldNumber;
const int GetQQMusicLyricRequest::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetQQMusicLyricRequest::GetQQMusicLyricRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoiceaddr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetQQMusicLyricRequest)
}
GetQQMusicLyricRequest::GetQQMusicLyricRequest(const GetQQMusicLyricRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_url()) {
    url_ = new ::micromsg::SKBuiltinBuffer_t(*from.url_);
  } else {
    url_ = NULL;
  }
  songid_ = from.songid_;
  // @@protoc_insertion_point(copy_constructor:micromsg.GetQQMusicLyricRequest)
}

void GetQQMusicLyricRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&songid_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(songid_));
}

GetQQMusicLyricRequest::~GetQQMusicLyricRequest() {
  // @@protoc_insertion_point(destructor:micromsg.GetQQMusicLyricRequest)
  SharedDtor();
}

void GetQQMusicLyricRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete url_;
  }
}

void GetQQMusicLyricRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetQQMusicLyricRequest::descriptor() {
  protobuf_mmvoiceaddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiceaddr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetQQMusicLyricRequest& GetQQMusicLyricRequest::default_instance() {
  protobuf_mmvoiceaddr_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetQQMusicLyricRequest* GetQQMusicLyricRequest::New(::google::protobuf::Arena* arena) const {
  GetQQMusicLyricRequest* n = new GetQQMusicLyricRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetQQMusicLyricRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetQQMusicLyricRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_url()) {
      GOOGLE_DCHECK(url_ != NULL);
      url_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  songid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetQQMusicLyricRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetQQMusicLyricRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 SongId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_songid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &songid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t Url = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetQQMusicLyricRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetQQMusicLyricRequest)
  return false;
#undef DO_
}

void GetQQMusicLyricRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetQQMusicLyricRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 SongId = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->songid(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t Url = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->url_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetQQMusicLyricRequest)
}

::google::protobuf::uint8* GetQQMusicLyricRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetQQMusicLyricRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 SongId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->songid(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t Url = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->url_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetQQMusicLyricRequest)
  return target;
}

size_t GetQQMusicLyricRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetQQMusicLyricRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_url()) {
    // required .micromsg.SKBuiltinBuffer_t Url = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->url_);
  }

  if (has_songid()) {
    // required uint32 SongId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->songid());
  }

  return total_size;
}
size_t GetQQMusicLyricRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetQQMusicLyricRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.SKBuiltinBuffer_t Url = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->url_);

    // required uint32 SongId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->songid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetQQMusicLyricRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetQQMusicLyricRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetQQMusicLyricRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetQQMusicLyricRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetQQMusicLyricRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetQQMusicLyricRequest)
    MergeFrom(*source);
  }
}

void GetQQMusicLyricRequest::MergeFrom(const GetQQMusicLyricRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetQQMusicLyricRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_url()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.url());
    }
    if (cached_has_bits & 0x00000004u) {
      songid_ = from.songid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetQQMusicLyricRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetQQMusicLyricRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetQQMusicLyricRequest::CopyFrom(const GetQQMusicLyricRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetQQMusicLyricRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetQQMusicLyricRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_url()) {
    if (!this->url_->IsInitialized()) return false;
  }
  return true;
}

void GetQQMusicLyricRequest::Swap(GetQQMusicLyricRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetQQMusicLyricRequest::InternalSwap(GetQQMusicLyricRequest* other) {
  std::swap(baserequest_, other->baserequest_);
  std::swap(url_, other->url_);
  std::swap(songid_, other->songid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetQQMusicLyricRequest::GetMetadata() const {
  protobuf_mmvoiceaddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiceaddr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetQQMusicLyricRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool GetQQMusicLyricRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetQQMusicLyricRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void GetQQMusicLyricRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetQQMusicLyricRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GetQQMusicLyricRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetQQMusicLyricRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GetQQMusicLyricRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetQQMusicLyricRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GetQQMusicLyricRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetQQMusicLyricRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GetQQMusicLyricRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetQQMusicLyricRequest.BaseRequest)
}

// required uint32 SongId = 2;
bool GetQQMusicLyricRequest::has_songid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetQQMusicLyricRequest::set_has_songid() {
  _has_bits_[0] |= 0x00000004u;
}
void GetQQMusicLyricRequest::clear_has_songid() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetQQMusicLyricRequest::clear_songid() {
  songid_ = 0u;
  clear_has_songid();
}
::google::protobuf::uint32 GetQQMusicLyricRequest::songid() const {
  // @@protoc_insertion_point(field_get:micromsg.GetQQMusicLyricRequest.SongId)
  return songid_;
}
void GetQQMusicLyricRequest::set_songid(::google::protobuf::uint32 value) {
  set_has_songid();
  songid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetQQMusicLyricRequest.SongId)
}

// required .micromsg.SKBuiltinBuffer_t Url = 3;
bool GetQQMusicLyricRequest::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetQQMusicLyricRequest::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
void GetQQMusicLyricRequest::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetQQMusicLyricRequest::clear_url() {
  if (url_ != NULL) url_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_url();
}
const ::micromsg::SKBuiltinBuffer_t& GetQQMusicLyricRequest::url() const {
  // @@protoc_insertion_point(field_get:micromsg.GetQQMusicLyricRequest.Url)
  return url_ != NULL ? *url_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* GetQQMusicLyricRequest::mutable_url() {
  set_has_url();
  if (url_ == NULL) {
    url_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetQQMusicLyricRequest.Url)
  return url_;
}
::micromsg::SKBuiltinBuffer_t* GetQQMusicLyricRequest::release_url() {
  // @@protoc_insertion_point(field_release:micromsg.GetQQMusicLyricRequest.Url)
  clear_has_url();
  ::micromsg::SKBuiltinBuffer_t* temp = url_;
  url_ = NULL;
  return temp;
}
void GetQQMusicLyricRequest::set_allocated_url(::micromsg::SKBuiltinBuffer_t* url) {
  delete url_;
  url_ = url;
  if (url) {
    set_has_url();
  } else {
    clear_has_url();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetQQMusicLyricRequest.Url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetQQMusicLyricResponse::kBaseResponseFieldNumber;
const int GetQQMusicLyricResponse::kSongLyricFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetQQMusicLyricResponse::GetQQMusicLyricResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoiceaddr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetQQMusicLyricResponse)
}
GetQQMusicLyricResponse::GetQQMusicLyricResponse(const GetQQMusicLyricResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_songlyric()) {
    songlyric_ = new ::micromsg::SKBuiltinBuffer_t(*from.songlyric_);
  } else {
    songlyric_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GetQQMusicLyricResponse)
}

void GetQQMusicLyricResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&songlyric_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(songlyric_));
}

GetQQMusicLyricResponse::~GetQQMusicLyricResponse() {
  // @@protoc_insertion_point(destructor:micromsg.GetQQMusicLyricResponse)
  SharedDtor();
}

void GetQQMusicLyricResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete songlyric_;
  }
}

void GetQQMusicLyricResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetQQMusicLyricResponse::descriptor() {
  protobuf_mmvoiceaddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiceaddr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetQQMusicLyricResponse& GetQQMusicLyricResponse::default_instance() {
  protobuf_mmvoiceaddr_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetQQMusicLyricResponse* GetQQMusicLyricResponse::New(::google::protobuf::Arena* arena) const {
  GetQQMusicLyricResponse* n = new GetQQMusicLyricResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetQQMusicLyricResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetQQMusicLyricResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_songlyric()) {
      GOOGLE_DCHECK(songlyric_ != NULL);
      songlyric_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetQQMusicLyricResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetQQMusicLyricResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t SongLyric = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_songlyric()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetQQMusicLyricResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetQQMusicLyricResponse)
  return false;
#undef DO_
}

void GetQQMusicLyricResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetQQMusicLyricResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required .micromsg.SKBuiltinBuffer_t SongLyric = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->songlyric_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetQQMusicLyricResponse)
}

::google::protobuf::uint8* GetQQMusicLyricResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetQQMusicLyricResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t SongLyric = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->songlyric_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetQQMusicLyricResponse)
  return target;
}

size_t GetQQMusicLyricResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetQQMusicLyricResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_songlyric()) {
    // required .micromsg.SKBuiltinBuffer_t SongLyric = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->songlyric_);
  }

  return total_size;
}
size_t GetQQMusicLyricResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetQQMusicLyricResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required .micromsg.SKBuiltinBuffer_t SongLyric = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->songlyric_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetQQMusicLyricResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetQQMusicLyricResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetQQMusicLyricResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetQQMusicLyricResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetQQMusicLyricResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetQQMusicLyricResponse)
    MergeFrom(*source);
  }
}

void GetQQMusicLyricResponse::MergeFrom(const GetQQMusicLyricResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetQQMusicLyricResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_songlyric()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.songlyric());
    }
  }
}

void GetQQMusicLyricResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetQQMusicLyricResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetQQMusicLyricResponse::CopyFrom(const GetQQMusicLyricResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetQQMusicLyricResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetQQMusicLyricResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_songlyric()) {
    if (!this->songlyric_->IsInitialized()) return false;
  }
  return true;
}

void GetQQMusicLyricResponse::Swap(GetQQMusicLyricResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetQQMusicLyricResponse::InternalSwap(GetQQMusicLyricResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(songlyric_, other->songlyric_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetQQMusicLyricResponse::GetMetadata() const {
  protobuf_mmvoiceaddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiceaddr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetQQMusicLyricResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetQQMusicLyricResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetQQMusicLyricResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void GetQQMusicLyricResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetQQMusicLyricResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetQQMusicLyricResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetQQMusicLyricResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetQQMusicLyricResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetQQMusicLyricResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetQQMusicLyricResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetQQMusicLyricResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetQQMusicLyricResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetQQMusicLyricResponse.BaseResponse)
}

// required .micromsg.SKBuiltinBuffer_t SongLyric = 2;
bool GetQQMusicLyricResponse::has_songlyric() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetQQMusicLyricResponse::set_has_songlyric() {
  _has_bits_[0] |= 0x00000002u;
}
void GetQQMusicLyricResponse::clear_has_songlyric() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetQQMusicLyricResponse::clear_songlyric() {
  if (songlyric_ != NULL) songlyric_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_songlyric();
}
const ::micromsg::SKBuiltinBuffer_t& GetQQMusicLyricResponse::songlyric() const {
  // @@protoc_insertion_point(field_get:micromsg.GetQQMusicLyricResponse.SongLyric)
  return songlyric_ != NULL ? *songlyric_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* GetQQMusicLyricResponse::mutable_songlyric() {
  set_has_songlyric();
  if (songlyric_ == NULL) {
    songlyric_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetQQMusicLyricResponse.SongLyric)
  return songlyric_;
}
::micromsg::SKBuiltinBuffer_t* GetQQMusicLyricResponse::release_songlyric() {
  // @@protoc_insertion_point(field_release:micromsg.GetQQMusicLyricResponse.SongLyric)
  clear_has_songlyric();
  ::micromsg::SKBuiltinBuffer_t* temp = songlyric_;
  songlyric_ = NULL;
  return temp;
}
void GetQQMusicLyricResponse::set_allocated_songlyric(::micromsg::SKBuiltinBuffer_t* songlyric) {
  delete songlyric_;
  songlyric_ = songlyric;
  if (songlyric) {
    set_has_songlyric();
  } else {
    clear_has_songlyric();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetQQMusicLyricResponse.SongLyric)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UploadInputVoiceRequest::kBaseRequestFieldNumber;
const int UploadInputVoiceRequest::kUserNameFieldNumber;
const int UploadInputVoiceRequest::kDataFieldNumber;
const int UploadInputVoiceRequest::kOffsetFieldNumber;
const int UploadInputVoiceRequest::kClientVoiceIdFieldNumber;
const int UploadInputVoiceRequest::kEndFlagFieldNumber;
const int UploadInputVoiceRequest::kSamplePerSecFieldNumber;
const int UploadInputVoiceRequest::kBitsPerSampleFieldNumber;
const int UploadInputVoiceRequest::kVoiceEncodeTypeFieldNumber;
const int UploadInputVoiceRequest::kFileTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UploadInputVoiceRequest::UploadInputVoiceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoiceaddr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.UploadInputVoiceRequest)
}
UploadInputVoiceRequest::UploadInputVoiceRequest(const UploadInputVoiceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  clientvoiceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientvoiceid()) {
    clientvoiceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientvoiceid_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_data()) {
    data_ = new ::micromsg::SKBuiltinBuffer_t(*from.data_);
  } else {
    data_ = NULL;
  }
  ::memcpy(&offset_, &from.offset_,
    reinterpret_cast<char*>(&filetype_) -
    reinterpret_cast<char*>(&offset_) + sizeof(filetype_));
  // @@protoc_insertion_point(copy_constructor:micromsg.UploadInputVoiceRequest)
}

void UploadInputVoiceRequest::SharedCtor() {
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientvoiceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&filetype_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(filetype_));
}

UploadInputVoiceRequest::~UploadInputVoiceRequest() {
  // @@protoc_insertion_point(destructor:micromsg.UploadInputVoiceRequest)
  SharedDtor();
}

void UploadInputVoiceRequest::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientvoiceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete data_;
  }
}

void UploadInputVoiceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadInputVoiceRequest::descriptor() {
  protobuf_mmvoiceaddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiceaddr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UploadInputVoiceRequest& UploadInputVoiceRequest::default_instance() {
  protobuf_mmvoiceaddr_2eproto::InitDefaults();
  return *internal_default_instance();
}

UploadInputVoiceRequest* UploadInputVoiceRequest::New(::google::protobuf::Arena* arena) const {
  UploadInputVoiceRequest* n = new UploadInputVoiceRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UploadInputVoiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.UploadInputVoiceRequest)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_username()) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
    if (has_clientvoiceid()) {
      GOOGLE_DCHECK(!clientvoiceid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*clientvoiceid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_data()) {
      GOOGLE_DCHECK(data_ != NULL);
      data_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&offset_, 0, reinterpret_cast<char*>(&bitspersample_) -
      reinterpret_cast<char*>(&offset_) + sizeof(bitspersample_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&voiceencodetype_, 0, reinterpret_cast<char*>(&filetype_) -
      reinterpret_cast<char*>(&voiceencodetype_) + sizeof(filetype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UploadInputVoiceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.UploadInputVoiceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string UserName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UploadInputVoiceRequest.UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t Data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Offset = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ClientVoiceId = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientvoiceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientvoiceid().data(), this->clientvoiceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UploadInputVoiceRequest.ClientVoiceId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 EndFlag = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_endflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 SamplePerSec = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_samplepersec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &samplepersec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 BitsPerSample = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_bitspersample();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bitspersample_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 VoiceEncodeType = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_voiceencodetype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &voiceencodetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 FileType = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_filetype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.UploadInputVoiceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.UploadInputVoiceRequest)
  return false;
#undef DO_
}

void UploadInputVoiceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.UploadInputVoiceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string UserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadInputVoiceRequest.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t Data = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->data_, output);
  }

  // required uint32 Offset = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->offset(), output);
  }

  // optional string ClientVoiceId = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientvoiceid().data(), this->clientvoiceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadInputVoiceRequest.ClientVoiceId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->clientvoiceid(), output);
  }

  // required uint32 EndFlag = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->endflag(), output);
  }

  // required uint32 SamplePerSec = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->samplepersec(), output);
  }

  // required uint32 BitsPerSample = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->bitspersample(), output);
  }

  // required uint32 VoiceEncodeType = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->voiceencodetype(), output);
  }

  // required uint32 FileType = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->filetype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.UploadInputVoiceRequest)
}

::google::protobuf::uint8* UploadInputVoiceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.UploadInputVoiceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string UserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadInputVoiceRequest.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t Data = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->data_, deterministic, target);
  }

  // required uint32 Offset = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->offset(), target);
  }

  // optional string ClientVoiceId = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientvoiceid().data(), this->clientvoiceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UploadInputVoiceRequest.ClientVoiceId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->clientvoiceid(), target);
  }

  // required uint32 EndFlag = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->endflag(), target);
  }

  // required uint32 SamplePerSec = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->samplepersec(), target);
  }

  // required uint32 BitsPerSample = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->bitspersample(), target);
  }

  // required uint32 VoiceEncodeType = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->voiceencodetype(), target);
  }

  // required uint32 FileType = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->filetype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.UploadInputVoiceRequest)
  return target;
}

size_t UploadInputVoiceRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.UploadInputVoiceRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_data()) {
    // required .micromsg.SKBuiltinBuffer_t Data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  if (has_offset()) {
    // required uint32 Offset = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->offset());
  }

  if (has_endflag()) {
    // required uint32 EndFlag = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->endflag());
  }

  if (has_samplepersec()) {
    // required uint32 SamplePerSec = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->samplepersec());
  }

  if (has_bitspersample()) {
    // required uint32 BitsPerSample = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bitspersample());
  }

  if (has_voiceencodetype()) {
    // required uint32 VoiceEncodeType = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->voiceencodetype());
  }

  if (has_filetype()) {
    // required uint32 FileType = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->filetype());
  }

  return total_size;
}
size_t UploadInputVoiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.UploadInputVoiceRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000003fc) ^ 0x000003fc) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.SKBuiltinBuffer_t Data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);

    // required uint32 Offset = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->offset());

    // required uint32 EndFlag = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->endflag());

    // required uint32 SamplePerSec = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->samplepersec());

    // required uint32 BitsPerSample = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bitspersample());

    // required uint32 VoiceEncodeType = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->voiceencodetype());

    // required uint32 FileType = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->filetype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string UserName = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string ClientVoiceId = 5;
    if (has_clientvoiceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientvoiceid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadInputVoiceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.UploadInputVoiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UploadInputVoiceRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UploadInputVoiceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.UploadInputVoiceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.UploadInputVoiceRequest)
    MergeFrom(*source);
  }
}

void UploadInputVoiceRequest::MergeFrom(const UploadInputVoiceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.UploadInputVoiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_clientvoiceid();
      clientvoiceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientvoiceid_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_data()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.data());
    }
    if (cached_has_bits & 0x00000010u) {
      offset_ = from.offset_;
    }
    if (cached_has_bits & 0x00000020u) {
      endflag_ = from.endflag_;
    }
    if (cached_has_bits & 0x00000040u) {
      samplepersec_ = from.samplepersec_;
    }
    if (cached_has_bits & 0x00000080u) {
      bitspersample_ = from.bitspersample_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      voiceencodetype_ = from.voiceencodetype_;
    }
    if (cached_has_bits & 0x00000200u) {
      filetype_ = from.filetype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UploadInputVoiceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.UploadInputVoiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadInputVoiceRequest::CopyFrom(const UploadInputVoiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.UploadInputVoiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadInputVoiceRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003fc) != 0x000003fc) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_data()) {
    if (!this->data_->IsInitialized()) return false;
  }
  return true;
}

void UploadInputVoiceRequest::Swap(UploadInputVoiceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UploadInputVoiceRequest::InternalSwap(UploadInputVoiceRequest* other) {
  username_.Swap(&other->username_);
  clientvoiceid_.Swap(&other->clientvoiceid_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(data_, other->data_);
  std::swap(offset_, other->offset_);
  std::swap(endflag_, other->endflag_);
  std::swap(samplepersec_, other->samplepersec_);
  std::swap(bitspersample_, other->bitspersample_);
  std::swap(voiceencodetype_, other->voiceencodetype_);
  std::swap(filetype_, other->filetype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UploadInputVoiceRequest::GetMetadata() const {
  protobuf_mmvoiceaddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiceaddr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UploadInputVoiceRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool UploadInputVoiceRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UploadInputVoiceRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
void UploadInputVoiceRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
void UploadInputVoiceRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& UploadInputVoiceRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadInputVoiceRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* UploadInputVoiceRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadInputVoiceRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* UploadInputVoiceRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.UploadInputVoiceRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void UploadInputVoiceRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadInputVoiceRequest.BaseRequest)
}

// optional string UserName = 2;
bool UploadInputVoiceRequest::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UploadInputVoiceRequest::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void UploadInputVoiceRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void UploadInputVoiceRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& UploadInputVoiceRequest::username() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadInputVoiceRequest.UserName)
  return username_.GetNoArena();
}
void UploadInputVoiceRequest::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadInputVoiceRequest.UserName)
}
#if LANG_CXX11
void UploadInputVoiceRequest::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadInputVoiceRequest.UserName)
}
#endif
void UploadInputVoiceRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadInputVoiceRequest.UserName)
}
void UploadInputVoiceRequest::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadInputVoiceRequest.UserName)
}
::std::string* UploadInputVoiceRequest::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadInputVoiceRequest.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadInputVoiceRequest::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.UploadInputVoiceRequest.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadInputVoiceRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadInputVoiceRequest.UserName)
}

// required .micromsg.SKBuiltinBuffer_t Data = 3;
bool UploadInputVoiceRequest::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UploadInputVoiceRequest::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
void UploadInputVoiceRequest::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
void UploadInputVoiceRequest::clear_data() {
  if (data_ != NULL) data_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_data();
}
const ::micromsg::SKBuiltinBuffer_t& UploadInputVoiceRequest::data() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadInputVoiceRequest.Data)
  return data_ != NULL ? *data_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* UploadInputVoiceRequest::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadInputVoiceRequest.Data)
  return data_;
}
::micromsg::SKBuiltinBuffer_t* UploadInputVoiceRequest::release_data() {
  // @@protoc_insertion_point(field_release:micromsg.UploadInputVoiceRequest.Data)
  clear_has_data();
  ::micromsg::SKBuiltinBuffer_t* temp = data_;
  data_ = NULL;
  return temp;
}
void UploadInputVoiceRequest::set_allocated_data(::micromsg::SKBuiltinBuffer_t* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadInputVoiceRequest.Data)
}

// required uint32 Offset = 4;
bool UploadInputVoiceRequest::has_offset() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UploadInputVoiceRequest::set_has_offset() {
  _has_bits_[0] |= 0x00000010u;
}
void UploadInputVoiceRequest::clear_has_offset() {
  _has_bits_[0] &= ~0x00000010u;
}
void UploadInputVoiceRequest::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
::google::protobuf::uint32 UploadInputVoiceRequest::offset() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadInputVoiceRequest.Offset)
  return offset_;
}
void UploadInputVoiceRequest::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadInputVoiceRequest.Offset)
}

// optional string ClientVoiceId = 5;
bool UploadInputVoiceRequest::has_clientvoiceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UploadInputVoiceRequest::set_has_clientvoiceid() {
  _has_bits_[0] |= 0x00000002u;
}
void UploadInputVoiceRequest::clear_has_clientvoiceid() {
  _has_bits_[0] &= ~0x00000002u;
}
void UploadInputVoiceRequest::clear_clientvoiceid() {
  clientvoiceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientvoiceid();
}
const ::std::string& UploadInputVoiceRequest::clientvoiceid() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadInputVoiceRequest.ClientVoiceId)
  return clientvoiceid_.GetNoArena();
}
void UploadInputVoiceRequest::set_clientvoiceid(const ::std::string& value) {
  set_has_clientvoiceid();
  clientvoiceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UploadInputVoiceRequest.ClientVoiceId)
}
#if LANG_CXX11
void UploadInputVoiceRequest::set_clientvoiceid(::std::string&& value) {
  set_has_clientvoiceid();
  clientvoiceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UploadInputVoiceRequest.ClientVoiceId)
}
#endif
void UploadInputVoiceRequest::set_clientvoiceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientvoiceid();
  clientvoiceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UploadInputVoiceRequest.ClientVoiceId)
}
void UploadInputVoiceRequest::set_clientvoiceid(const char* value, size_t size) {
  set_has_clientvoiceid();
  clientvoiceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UploadInputVoiceRequest.ClientVoiceId)
}
::std::string* UploadInputVoiceRequest::mutable_clientvoiceid() {
  set_has_clientvoiceid();
  // @@protoc_insertion_point(field_mutable:micromsg.UploadInputVoiceRequest.ClientVoiceId)
  return clientvoiceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadInputVoiceRequest::release_clientvoiceid() {
  // @@protoc_insertion_point(field_release:micromsg.UploadInputVoiceRequest.ClientVoiceId)
  clear_has_clientvoiceid();
  return clientvoiceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadInputVoiceRequest::set_allocated_clientvoiceid(::std::string* clientvoiceid) {
  if (clientvoiceid != NULL) {
    set_has_clientvoiceid();
  } else {
    clear_has_clientvoiceid();
  }
  clientvoiceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientvoiceid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadInputVoiceRequest.ClientVoiceId)
}

// required uint32 EndFlag = 6;
bool UploadInputVoiceRequest::has_endflag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UploadInputVoiceRequest::set_has_endflag() {
  _has_bits_[0] |= 0x00000020u;
}
void UploadInputVoiceRequest::clear_has_endflag() {
  _has_bits_[0] &= ~0x00000020u;
}
void UploadInputVoiceRequest::clear_endflag() {
  endflag_ = 0u;
  clear_has_endflag();
}
::google::protobuf::uint32 UploadInputVoiceRequest::endflag() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadInputVoiceRequest.EndFlag)
  return endflag_;
}
void UploadInputVoiceRequest::set_endflag(::google::protobuf::uint32 value) {
  set_has_endflag();
  endflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadInputVoiceRequest.EndFlag)
}

// required uint32 SamplePerSec = 7;
bool UploadInputVoiceRequest::has_samplepersec() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void UploadInputVoiceRequest::set_has_samplepersec() {
  _has_bits_[0] |= 0x00000040u;
}
void UploadInputVoiceRequest::clear_has_samplepersec() {
  _has_bits_[0] &= ~0x00000040u;
}
void UploadInputVoiceRequest::clear_samplepersec() {
  samplepersec_ = 0u;
  clear_has_samplepersec();
}
::google::protobuf::uint32 UploadInputVoiceRequest::samplepersec() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadInputVoiceRequest.SamplePerSec)
  return samplepersec_;
}
void UploadInputVoiceRequest::set_samplepersec(::google::protobuf::uint32 value) {
  set_has_samplepersec();
  samplepersec_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadInputVoiceRequest.SamplePerSec)
}

// required uint32 BitsPerSample = 8;
bool UploadInputVoiceRequest::has_bitspersample() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void UploadInputVoiceRequest::set_has_bitspersample() {
  _has_bits_[0] |= 0x00000080u;
}
void UploadInputVoiceRequest::clear_has_bitspersample() {
  _has_bits_[0] &= ~0x00000080u;
}
void UploadInputVoiceRequest::clear_bitspersample() {
  bitspersample_ = 0u;
  clear_has_bitspersample();
}
::google::protobuf::uint32 UploadInputVoiceRequest::bitspersample() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadInputVoiceRequest.BitsPerSample)
  return bitspersample_;
}
void UploadInputVoiceRequest::set_bitspersample(::google::protobuf::uint32 value) {
  set_has_bitspersample();
  bitspersample_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadInputVoiceRequest.BitsPerSample)
}

// required uint32 VoiceEncodeType = 9;
bool UploadInputVoiceRequest::has_voiceencodetype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void UploadInputVoiceRequest::set_has_voiceencodetype() {
  _has_bits_[0] |= 0x00000100u;
}
void UploadInputVoiceRequest::clear_has_voiceencodetype() {
  _has_bits_[0] &= ~0x00000100u;
}
void UploadInputVoiceRequest::clear_voiceencodetype() {
  voiceencodetype_ = 0u;
  clear_has_voiceencodetype();
}
::google::protobuf::uint32 UploadInputVoiceRequest::voiceencodetype() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadInputVoiceRequest.VoiceEncodeType)
  return voiceencodetype_;
}
void UploadInputVoiceRequest::set_voiceencodetype(::google::protobuf::uint32 value) {
  set_has_voiceencodetype();
  voiceencodetype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadInputVoiceRequest.VoiceEncodeType)
}

// required uint32 FileType = 10;
bool UploadInputVoiceRequest::has_filetype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void UploadInputVoiceRequest::set_has_filetype() {
  _has_bits_[0] |= 0x00000200u;
}
void UploadInputVoiceRequest::clear_has_filetype() {
  _has_bits_[0] &= ~0x00000200u;
}
void UploadInputVoiceRequest::clear_filetype() {
  filetype_ = 0u;
  clear_has_filetype();
}
::google::protobuf::uint32 UploadInputVoiceRequest::filetype() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadInputVoiceRequest.FileType)
  return filetype_;
}
void UploadInputVoiceRequest::set_filetype(::google::protobuf::uint32 value) {
  set_has_filetype();
  filetype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadInputVoiceRequest.FileType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UploadInputVoiceResponse::kBaseResponseFieldNumber;
const int UploadInputVoiceResponse::kEndFlagFieldNumber;
const int UploadInputVoiceResponse::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UploadInputVoiceResponse::UploadInputVoiceResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoiceaddr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.UploadInputVoiceResponse)
}
UploadInputVoiceResponse::UploadInputVoiceResponse(const UploadInputVoiceResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_text()) {
    text_ = new ::micromsg::SKBuiltinBuffer_t(*from.text_);
  } else {
    text_ = NULL;
  }
  endflag_ = from.endflag_;
  // @@protoc_insertion_point(copy_constructor:micromsg.UploadInputVoiceResponse)
}

void UploadInputVoiceResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&endflag_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(endflag_));
}

UploadInputVoiceResponse::~UploadInputVoiceResponse() {
  // @@protoc_insertion_point(destructor:micromsg.UploadInputVoiceResponse)
  SharedDtor();
}

void UploadInputVoiceResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete text_;
  }
}

void UploadInputVoiceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadInputVoiceResponse::descriptor() {
  protobuf_mmvoiceaddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiceaddr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UploadInputVoiceResponse& UploadInputVoiceResponse::default_instance() {
  protobuf_mmvoiceaddr_2eproto::InitDefaults();
  return *internal_default_instance();
}

UploadInputVoiceResponse* UploadInputVoiceResponse::New(::google::protobuf::Arena* arena) const {
  UploadInputVoiceResponse* n = new UploadInputVoiceResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UploadInputVoiceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.UploadInputVoiceResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_text()) {
      GOOGLE_DCHECK(text_ != NULL);
      text_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  endflag_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UploadInputVoiceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.UploadInputVoiceResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 EndFlag = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_endflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t Text = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_text()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.UploadInputVoiceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.UploadInputVoiceResponse)
  return false;
#undef DO_
}

void UploadInputVoiceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.UploadInputVoiceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 EndFlag = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->endflag(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t Text = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->text_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.UploadInputVoiceResponse)
}

::google::protobuf::uint8* UploadInputVoiceResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.UploadInputVoiceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 EndFlag = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->endflag(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t Text = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->text_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.UploadInputVoiceResponse)
  return target;
}

size_t UploadInputVoiceResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.UploadInputVoiceResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_text()) {
    // required .micromsg.SKBuiltinBuffer_t Text = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->text_);
  }

  if (has_endflag()) {
    // required uint32 EndFlag = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->endflag());
  }

  return total_size;
}
size_t UploadInputVoiceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.UploadInputVoiceResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required .micromsg.SKBuiltinBuffer_t Text = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->text_);

    // required uint32 EndFlag = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->endflag());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadInputVoiceResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.UploadInputVoiceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UploadInputVoiceResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UploadInputVoiceResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.UploadInputVoiceResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.UploadInputVoiceResponse)
    MergeFrom(*source);
  }
}

void UploadInputVoiceResponse::MergeFrom(const UploadInputVoiceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.UploadInputVoiceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_text()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.text());
    }
    if (cached_has_bits & 0x00000004u) {
      endflag_ = from.endflag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UploadInputVoiceResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.UploadInputVoiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadInputVoiceResponse::CopyFrom(const UploadInputVoiceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.UploadInputVoiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadInputVoiceResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_text()) {
    if (!this->text_->IsInitialized()) return false;
  }
  return true;
}

void UploadInputVoiceResponse::Swap(UploadInputVoiceResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UploadInputVoiceResponse::InternalSwap(UploadInputVoiceResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(text_, other->text_);
  std::swap(endflag_, other->endflag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UploadInputVoiceResponse::GetMetadata() const {
  protobuf_mmvoiceaddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiceaddr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UploadInputVoiceResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool UploadInputVoiceResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UploadInputVoiceResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void UploadInputVoiceResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void UploadInputVoiceResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& UploadInputVoiceResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadInputVoiceResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* UploadInputVoiceResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadInputVoiceResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* UploadInputVoiceResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.UploadInputVoiceResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void UploadInputVoiceResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadInputVoiceResponse.BaseResponse)
}

// required uint32 EndFlag = 2;
bool UploadInputVoiceResponse::has_endflag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UploadInputVoiceResponse::set_has_endflag() {
  _has_bits_[0] |= 0x00000004u;
}
void UploadInputVoiceResponse::clear_has_endflag() {
  _has_bits_[0] &= ~0x00000004u;
}
void UploadInputVoiceResponse::clear_endflag() {
  endflag_ = 0u;
  clear_has_endflag();
}
::google::protobuf::uint32 UploadInputVoiceResponse::endflag() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadInputVoiceResponse.EndFlag)
  return endflag_;
}
void UploadInputVoiceResponse::set_endflag(::google::protobuf::uint32 value) {
  set_has_endflag();
  endflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UploadInputVoiceResponse.EndFlag)
}

// required .micromsg.SKBuiltinBuffer_t Text = 3;
bool UploadInputVoiceResponse::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UploadInputVoiceResponse::set_has_text() {
  _has_bits_[0] |= 0x00000002u;
}
void UploadInputVoiceResponse::clear_has_text() {
  _has_bits_[0] &= ~0x00000002u;
}
void UploadInputVoiceResponse::clear_text() {
  if (text_ != NULL) text_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_text();
}
const ::micromsg::SKBuiltinBuffer_t& UploadInputVoiceResponse::text() const {
  // @@protoc_insertion_point(field_get:micromsg.UploadInputVoiceResponse.Text)
  return text_ != NULL ? *text_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* UploadInputVoiceResponse::mutable_text() {
  set_has_text();
  if (text_ == NULL) {
    text_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UploadInputVoiceResponse.Text)
  return text_;
}
::micromsg::SKBuiltinBuffer_t* UploadInputVoiceResponse::release_text() {
  // @@protoc_insertion_point(field_release:micromsg.UploadInputVoiceResponse.Text)
  clear_has_text();
  ::micromsg::SKBuiltinBuffer_t* temp = text_;
  text_ = NULL;
  return temp;
}
void UploadInputVoiceResponse::set_allocated_text(::micromsg::SKBuiltinBuffer_t* text) {
  delete text_;
  text_ = text;
  if (text) {
    set_has_text();
  } else {
    clear_has_text();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UploadInputVoiceResponse.Text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace micromsg

// @@protoc_insertion_point(global_scope)
