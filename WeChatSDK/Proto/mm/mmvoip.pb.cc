// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmvoip.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mmvoip.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace micromsg {
class VoipRelayDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoipRelayData> {
} _VoipRelayData_default_instance_;
class VoipAddrDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoipAddr> {
} _VoipAddr_default_instance_;
class VoipAddrSetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoipAddrSet> {
} _VoipAddrSet_default_instance_;
class VoipMultiRelayDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoipMultiRelayData> {
} _VoipMultiRelayData_default_instance_;
class VoipStatReportDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoipStatReportData> {
} _VoipStatReportData_default_instance_;
class VoipNetQualityDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoipNetQuality> {
} _VoipNetQuality_default_instance_;
class VoipInviteRemindReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoipInviteRemindReq> {
} _VoipInviteRemindReq_default_instance_;
class VoipInviteRemindRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoipInviteRemindResp> {
} _VoipInviteRemindResp_default_instance_;
class VoipInviteReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoipInviteReq> {
} _VoipInviteReq_default_instance_;
class VoipInviteRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoipInviteResp> {
} _VoipInviteResp_default_instance_;
class VoipCancelInviteReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoipCancelInviteReq> {
} _VoipCancelInviteReq_default_instance_;
class VoipCancelInviteRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoipCancelInviteResp> {
} _VoipCancelInviteResp_default_instance_;
class VoipAnswerReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoipAnswerReq> {
} _VoipAnswerReq_default_instance_;
class VoipAnswerRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoipAnswerResp> {
} _VoipAnswerResp_default_instance_;
class VoipShutDownReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoipShutDownReq> {
} _VoipShutDownReq_default_instance_;
class VoipShutDownRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoipShutDownResp> {
} _VoipShutDownResp_default_instance_;
class VoipCmdItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoipCmdItem> {
} _VoipCmdItem_default_instance_;
class VoipCmdListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoipCmdList> {
} _VoipCmdList_default_instance_;
class VoipSyncReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoipSyncReq> {
} _VoipSyncReq_default_instance_;
class VoipHeartBeatReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoipHeartBeatReq> {
} _VoipHeartBeatReq_default_instance_;
class VoipHeartBeatRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoipHeartBeatResp> {
} _VoipHeartBeatResp_default_instance_;
class VoipSyncRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoipSyncResp> {
} _VoipSyncResp_default_instance_;
class VoipStatusItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoipStatusItem> {
} _VoipStatusItem_default_instance_;
class VoipGetRoomInfoReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoipGetRoomInfoReq> {
} _VoipGetRoomInfoReq_default_instance_;
class VoipGetRoomInfoRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoipGetRoomInfoResp> {
} _VoipGetRoomInfoResp_default_instance_;
class VoipAckReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoipAckReq> {
} _VoipAckReq_default_instance_;
class VoipAckRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoipAckResp> {
} _VoipAckResp_default_instance_;
class VoipStatReportReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoipStatReportReq> {
} _VoipStatReportReq_default_instance_;
class VoipStatReportRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoipStatReportResp> {
} _VoipStatReportResp_default_instance_;
class VoipCompleteStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoipCompleteStatus> {
} _VoipCompleteStatus_default_instance_;
class VoipCompleteStatusListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoipCompleteStatusList> {
} _VoipCompleteStatusList_default_instance_;
class VoipRedirectReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoipRedirectReq> {
} _VoipRedirectReq_default_instance_;
class VoipRedirectRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoipRedirectResp> {
} _VoipRedirectResp_default_instance_;
class VoipDoubleLinkSwitchReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoipDoubleLinkSwitchReq> {
} _VoipDoubleLinkSwitchReq_default_instance_;
class VoipDoubleLinkSwitchRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoipDoubleLinkSwitchRsp> {
} _VoipDoubleLinkSwitchRsp_default_instance_;
class VoipSpeedTestReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoipSpeedTestReq> {
} _VoipSpeedTestReq_default_instance_;
class SpeedTestSvrDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SpeedTestSvr> {
} _SpeedTestSvr_default_instance_;
class VoipSpeedTestRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoipSpeedTestRsp> {
} _VoipSpeedTestRsp_default_instance_;
class SpeedResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SpeedResult> {
} _SpeedResult_default_instance_;
class VoipSpeedResultReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoipSpeedResultReq> {
} _VoipSpeedResultReq_default_instance_;
class VoipSpeedResultRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoipSpeedResultRsp> {
} _VoipSpeedResultRsp_default_instance_;

namespace protobuf_mmvoip_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[41];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipRelayData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipRelayData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipRelayData, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipRelayData, buffer_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAddr, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAddr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAddr, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAddr, port_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAddrSet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAddrSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAddrSet, cnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAddrSet, addrs_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipMultiRelayData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipMultiRelayData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipMultiRelayData, peerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipMultiRelayData, capinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipMultiRelayData, sendingtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipMultiRelayData, voipsvraddr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipMultiRelayData, punchsvraddr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipMultiRelayData, voipnetquality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipMultiRelayData, linkdisconnecthbinterval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipMultiRelayData, linkdisconnecthbcnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipMultiRelayData, protocolencryptlength_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipMultiRelayData, clientheadsigns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipMultiRelayData, oppositeclientversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipMultiRelayData, tcpsvraddr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipMultiRelayData, arqstrategy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipMultiRelayData, arqcachelen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipMultiRelayData, arqrttthreshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipMultiRelayData, arqusedratethreshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipMultiRelayData, arqrespratethreshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipMultiRelayData, encryptstrategy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipMultiRelayData, fecsvrctr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipMultiRelayData, feckeypara1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipMultiRelayData, feckeypara2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipMultiRelayData, qosstrategy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipMultiRelayData, encryptkeybuf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipMultiRelayData, oppositedevicetype_),
  0,
  1,
  9,
  2,
  3,
  10,
  11,
  12,
  13,
  4,
  14,
  5,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  6,
  7,
  22,
  8,
  23,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipStatReportData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipStatReportData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipStatReportData, statreport_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipNetQuality, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipNetQuality, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipNetQuality, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipNetQuality, begin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipNetQuality, end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipNetQuality, hitcnt_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipInviteRemindReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipInviteRemindReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipInviteRemindReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipInviteRemindReq, listcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipInviteRemindReq, tousernamelist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipInviteRemindReq, invitetype_),
  0,
  1,
  ~0u,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipInviteRemindResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipInviteRemindResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipInviteRemindResp, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipInviteReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipInviteReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipInviteReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipInviteReq, fromusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipInviteReq, inviteusercount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipInviteReq, tousernamelist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipInviteReq, peerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipInviteReq, capinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipInviteReq, nettype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipInviteReq, calltype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipInviteReq, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipInviteReq, roomkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipInviteReq, invitetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipInviteReq, timestamp64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipInviteReq, hdvideo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipInviteReq, inviteid_),
  1,
  0,
  4,
  ~0u,
  2,
  3,
  5,
  6,
  7,
  8,
  10,
  9,
  11,
  12,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipInviteResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipInviteResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipInviteResp, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipInviteResp, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipInviteResp, addrcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipInviteResp, addrlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipInviteResp, roomkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipInviteResp, roommemberid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipInviteResp, relaydata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipInviteResp, netqualitycnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipInviteResp, netqualitylist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipInviteResp, audiotsdfbeyond3g_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipInviteResp, audiotsdfedge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipInviteResp, passthroughqosalgorithm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipInviteResp, fastplayrepair_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipInviteResp, voipsyncinterval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipInviteResp, newp2s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipInviteResp, audiodtx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipInviteResp, tcpcnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipInviteResp, switchinterval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipInviteResp, hw264svrcfg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipInviteResp, audioenablermioands3a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipInviteResp, audioenablespkec_),
  0,
  2,
  3,
  ~0u,
  4,
  5,
  1,
  6,
  ~0u,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipCancelInviteReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipCancelInviteReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipCancelInviteReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipCancelInviteReq, fromusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipCancelInviteReq, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipCancelInviteReq, roomkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipCancelInviteReq, tousername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipCancelInviteReq, reportdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipCancelInviteReq, invitetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipCancelInviteReq, timestamp64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipCancelInviteReq, inviteid_),
  2,
  0,
  5,
  4,
  1,
  3,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipCancelInviteResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipCancelInviteResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipCancelInviteResp, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipCancelInviteResp, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipCancelInviteResp, roomkey_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAnswerReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAnswerReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAnswerReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAnswerReq, fromusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAnswerReq, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAnswerReq, answer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAnswerReq, peerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAnswerReq, capinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAnswerReq, roomkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAnswerReq, nettype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAnswerReq, timestamp64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAnswerReq, onlyaudio_),
  1,
  0,
  4,
  5,
  2,
  3,
  6,
  8,
  7,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAnswerResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAnswerResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAnswerResp, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAnswerResp, addrcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAnswerResp, addrlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAnswerResp, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAnswerResp, roomkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAnswerResp, roommemberid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAnswerResp, relaydata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAnswerResp, netqualitycnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAnswerResp, netqualitylist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAnswerResp, audiotsdfbeyond3g_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAnswerResp, audiotsdfedge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAnswerResp, passthroughqosalgorithm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAnswerResp, fastplayrepair_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAnswerResp, newp2s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAnswerResp, audiodtx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAnswerResp, tcpcnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAnswerResp, switchinterval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAnswerResp, hw264svrcfg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAnswerResp, audioenablermioands3a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAnswerResp, audioenablespkec_),
  0,
  2,
  ~0u,
  3,
  4,
  5,
  1,
  6,
  ~0u,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipShutDownReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipShutDownReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipShutDownReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipShutDownReq, fromusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipShutDownReq, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipShutDownReq, roomkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipShutDownReq, reportdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipShutDownReq, timestamp64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipShutDownReq, duration_),
  1,
  0,
  4,
  3,
  2,
  6,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipShutDownResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipShutDownResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipShutDownResp, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipShutDownResp, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipShutDownResp, roomkey_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipCmdItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipCmdItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipCmdItem, cmdid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipCmdItem, cmdbuf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipCmdItem, fromusername_),
  2,
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipCmdList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipCmdList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipCmdList, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipCmdList, list_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSyncReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSyncReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSyncReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSyncReq, fromusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSyncReq, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSyncReq, keybuf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSyncReq, oplog_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSyncReq, roomkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSyncReq, selector_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSyncReq, timestamp64_),
  1,
  0,
  4,
  2,
  3,
  6,
  5,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipHeartBeatReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipHeartBeatReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipHeartBeatReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipHeartBeatReq, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipHeartBeatReq, roomkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipHeartBeatReq, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipHeartBeatReq, timestamp64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipHeartBeatReq, connectiontype_),
  0,
  2,
  1,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipHeartBeatResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipHeartBeatResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipHeartBeatResp, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipHeartBeatResp, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipHeartBeatResp, roomkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipHeartBeatResp, timestamp_),
  0,
  2,
  1,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSyncResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSyncResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSyncResp, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSyncResp, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSyncResp, keybuf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSyncResp, cmdlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSyncResp, continueflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSyncResp, roomkey_),
  0,
  3,
  1,
  2,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipStatusItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipStatusItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipStatusItem, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipStatusItem, status_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipGetRoomInfoReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipGetRoomInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipGetRoomInfoReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipGetRoomInfoReq, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipGetRoomInfoReq, roomkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipGetRoomInfoReq, callerusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipGetRoomInfoReq, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipGetRoomInfoReq, timestamp64_),
  1,
  3,
  2,
  0,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipGetRoomInfoResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipGetRoomInfoResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipGetRoomInfoResp, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipGetRoomInfoResp, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipGetRoomInfoResp, roomkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipGetRoomInfoResp, createtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipGetRoomInfoResp, membercount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipGetRoomInfoResp, memberstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipGetRoomInfoResp, callerusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipGetRoomInfoResp, invitetype_),
  1,
  3,
  2,
  4,
  5,
  ~0u,
  0,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAckReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAckReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAckReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAckReq, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAckReq, roomkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAckReq, fromusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAckReq, preconnect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAckReq, peerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAckReq, capinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAckReq, nettype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAckReq, callername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAckReq, ackstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAckReq, timestamp64_),
  2,
  6,
  5,
  0,
  7,
  3,
  4,
  8,
  1,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAckResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAckResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAckResp, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAckResp, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAckResp, roomkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAckResp, roommemberid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAckResp, relaydata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAckResp, preconnect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAckResp, tcpcnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipAckResp, audioenablermioands3a_),
  0,
  3,
  2,
  4,
  1,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipStatReportReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipStatReportReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipStatReportReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipStatReportReq, reportdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipStatReportReq, channelreportdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipStatReportReq, dialreportdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipStatReportReq, enginereportdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipStatReportReq, timestamp64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipStatReportReq, engineextreportdata_),
  0,
  1,
  2,
  3,
  4,
  6,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipStatReportResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipStatReportResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipStatReportResp, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipCompleteStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipCompleteStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipCompleteStatus, cmdid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipCompleteStatus, uin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipCompleteStatus, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipCompleteStatus, buffer_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipCompleteStatusList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipCompleteStatusList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipCompleteStatusList, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipCompleteStatusList, completestatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipCompleteStatusList, seq_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipRedirectReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipRedirectReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipRedirectReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipRedirectReq, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipRedirectReq, roomkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipRedirectReq, roommemberid_),
  0,
  2,
  1,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipRedirectResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipRedirectResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipRedirectResp, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipRedirectResp, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipRedirectResp, relayaddrcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipRedirectResp, relayaddrlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipRedirectResp, punchaddrcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipRedirectResp, punchaddrlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipRedirectResp, roomkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipRedirectResp, roommemberid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipRedirectResp, tcpaddrcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipRedirectResp, tcpaddrlist_),
  0,
  1,
  2,
  ~0u,
  3,
  ~0u,
  5,
  4,
  6,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipDoubleLinkSwitchReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipDoubleLinkSwitchReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipDoubleLinkSwitchReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipDoubleLinkSwitchReq, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipDoubleLinkSwitchReq, roomkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipDoubleLinkSwitchReq, roommemberid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipDoubleLinkSwitchReq, curlinktype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipDoubleLinkSwitchReq, isrelayconnready_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipDoubleLinkSwitchReq, isdirectconnready_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipDoubleLinkSwitchReq, curstrategy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipDoubleLinkSwitchReq, bufferversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipDoubleLinkSwitchReq, buffer_),
  0,
  3,
  2,
  4,
  5,
  6,
  7,
  8,
  9,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipDoubleLinkSwitchRsp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipDoubleLinkSwitchRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipDoubleLinkSwitchRsp, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipDoubleLinkSwitchRsp, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipDoubleLinkSwitchRsp, roomkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipDoubleLinkSwitchRsp, roommemberid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipDoubleLinkSwitchRsp, reportflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipDoubleLinkSwitchRsp, switchtolinktype_),
  0,
  2,
  1,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSpeedTestReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSpeedTestReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSpeedTestReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSpeedTestReq, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSpeedTestReq, calltype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSpeedTestReq, nettype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSpeedTestReq, isconnecting_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSpeedTestReq, isconnected_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSpeedTestReq, c2clossrate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSpeedTestReq, c2crttcnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSpeedTestReq, c2crtt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSpeedTestReq, c2sdownlossrate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSpeedTestReq, c2srttcnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSpeedTestReq, c2srtt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSpeedTestReq, sendpkts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSpeedTestReq, rcvpkts_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  ~0u,
  8,
  9,
  ~0u,
  10,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedTestSvr, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedTestSvr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedTestSvr, addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedTestSvr, testcnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedTestSvr, testgap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedTestSvr, timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedTestSvr, pktsize_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSpeedTestRsp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSpeedTestRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSpeedTestRsp, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSpeedTestRsp, needtest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSpeedTestRsp, testid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSpeedTestRsp, svrlistcnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSpeedTestRsp, svrlist_),
  0,
  2,
  1,
  3,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedResult, clientip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedResult, testpktsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedResult, testcnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedResult, addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedResult, avgrtt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedResult, minrtt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedResult, maxrtt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedResult, rttcnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedResult, rtt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedResult, downseqcnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedResult, downseq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedResult, upseqcnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedResult, upseq_),
  1,
  2,
  3,
  0,
  4,
  5,
  6,
  7,
  ~0u,
  8,
  ~0u,
  9,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSpeedResultReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSpeedResultReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSpeedResultReq, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSpeedResultReq, testid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSpeedResultReq, roomkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSpeedResultReq, nettype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSpeedResultReq, netname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSpeedResultReq, wifiname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSpeedResultReq, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSpeedResultReq, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSpeedResultReq, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSpeedResultReq, resultcnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSpeedResultReq, result_),
  0,
  3,
  4,
  5,
  1,
  2,
  7,
  8,
  6,
  9,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSpeedResultRsp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSpeedResultRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoipSpeedResultRsp, baseresponse_),
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(VoipRelayData)},
  { 9, 16, sizeof(VoipAddr)},
  { 18, 25, sizeof(VoipAddrSet)},
  { 27, 56, sizeof(VoipMultiRelayData)},
  { 80, 86, sizeof(VoipStatReportData)},
  { 87, 96, sizeof(VoipNetQuality)},
  { 100, 109, sizeof(VoipInviteRemindReq)},
  { 113, 119, sizeof(VoipInviteRemindResp)},
  { 120, 139, sizeof(VoipInviteReq)},
  { 153, 179, sizeof(VoipInviteResp)},
  { 200, 214, sizeof(VoipCancelInviteReq)},
  { 223, 231, sizeof(VoipCancelInviteResp)},
  { 234, 249, sizeof(VoipAnswerReq)},
  { 259, 284, sizeof(VoipAnswerResp)},
  { 304, 316, sizeof(VoipShutDownReq)},
  { 323, 331, sizeof(VoipShutDownResp)},
  { 334, 342, sizeof(VoipCmdItem)},
  { 345, 352, sizeof(VoipCmdList)},
  { 354, 367, sizeof(VoipSyncReq)},
  { 375, 386, sizeof(VoipHeartBeatReq)},
  { 392, 401, sizeof(VoipHeartBeatResp)},
  { 405, 416, sizeof(VoipSyncResp)},
  { 422, 429, sizeof(VoipStatusItem)},
  { 431, 442, sizeof(VoipGetRoomInfoReq)},
  { 448, 461, sizeof(VoipGetRoomInfoResp)},
  { 469, 485, sizeof(VoipAckReq)},
  { 496, 509, sizeof(VoipAckResp)},
  { 517, 529, sizeof(VoipStatReportReq)},
  { 536, 542, sizeof(VoipStatReportResp)},
  { 543, 552, sizeof(VoipCompleteStatus)},
  { 556, 564, sizeof(VoipCompleteStatusList)},
  { 567, 576, sizeof(VoipRedirectReq)},
  { 580, 595, sizeof(VoipRedirectResp)},
  { 605, 620, sizeof(VoipDoubleLinkSwitchReq)},
  { 630, 641, sizeof(VoipDoubleLinkSwitchRsp)},
  { 647, 666, sizeof(VoipSpeedTestReq)},
  { 680, 690, sizeof(SpeedTestSvr)},
  { 695, 705, sizeof(VoipSpeedTestRsp)},
  { 710, 728, sizeof(SpeedResult)},
  { 741, 757, sizeof(VoipSpeedResultReq)},
  { 768, 774, sizeof(VoipSpeedResultRsp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoipRelayData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoipAddr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoipAddrSet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoipMultiRelayData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoipStatReportData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoipNetQuality_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoipInviteRemindReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoipInviteRemindResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoipInviteReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoipInviteResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoipCancelInviteReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoipCancelInviteResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoipAnswerReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoipAnswerResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoipShutDownReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoipShutDownResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoipCmdItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoipCmdList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoipSyncReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoipHeartBeatReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoipHeartBeatResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoipSyncResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoipStatusItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoipGetRoomInfoReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoipGetRoomInfoResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoipAckReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoipAckResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoipStatReportReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoipStatReportResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoipCompleteStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoipCompleteStatusList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoipRedirectReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoipRedirectResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoipDoubleLinkSwitchReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoipDoubleLinkSwitchRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoipSpeedTestReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SpeedTestSvr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoipSpeedTestRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SpeedResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoipSpeedResultReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoipSpeedResultRsp_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "mmvoip.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 41);
}

}  // namespace

void TableStruct::Shutdown() {
  _VoipRelayData_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _VoipAddr_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _VoipAddrSet_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _VoipMultiRelayData_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _VoipStatReportData_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _VoipNetQuality_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _VoipInviteRemindReq_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _VoipInviteRemindResp_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _VoipInviteReq_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _VoipInviteResp_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _VoipCancelInviteReq_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _VoipCancelInviteResp_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _VoipAnswerReq_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _VoipAnswerResp_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _VoipShutDownReq_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _VoipShutDownResp_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _VoipCmdItem_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _VoipCmdList_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _VoipSyncReq_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _VoipHeartBeatReq_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _VoipHeartBeatResp_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _VoipSyncResp_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _VoipStatusItem_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _VoipGetRoomInfoReq_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _VoipGetRoomInfoResp_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _VoipAckReq_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _VoipAckResp_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _VoipStatReportReq_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _VoipStatReportResp_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _VoipCompleteStatus_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _VoipCompleteStatusList_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _VoipRedirectReq_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _VoipRedirectResp_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _VoipDoubleLinkSwitchReq_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _VoipDoubleLinkSwitchRsp_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
  _VoipSpeedTestReq_default_instance_.Shutdown();
  delete file_level_metadata[35].reflection;
  _SpeedTestSvr_default_instance_.Shutdown();
  delete file_level_metadata[36].reflection;
  _VoipSpeedTestRsp_default_instance_.Shutdown();
  delete file_level_metadata[37].reflection;
  _SpeedResult_default_instance_.Shutdown();
  delete file_level_metadata[38].reflection;
  _VoipSpeedResultReq_default_instance_.Shutdown();
  delete file_level_metadata[39].reflection;
  _VoipSpeedResultRsp_default_instance_.Shutdown();
  delete file_level_metadata[40].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::micromsg::protobuf_mmbuiltintype_2eproto::InitDefaults();
  ::micromsg::protobuf_mmbase_2eproto::InitDefaults();
  _VoipRelayData_default_instance_.DefaultConstruct();
  _VoipAddr_default_instance_.DefaultConstruct();
  _VoipAddrSet_default_instance_.DefaultConstruct();
  _VoipMultiRelayData_default_instance_.DefaultConstruct();
  _VoipStatReportData_default_instance_.DefaultConstruct();
  _VoipNetQuality_default_instance_.DefaultConstruct();
  _VoipInviteRemindReq_default_instance_.DefaultConstruct();
  _VoipInviteRemindResp_default_instance_.DefaultConstruct();
  _VoipInviteReq_default_instance_.DefaultConstruct();
  _VoipInviteResp_default_instance_.DefaultConstruct();
  _VoipCancelInviteReq_default_instance_.DefaultConstruct();
  _VoipCancelInviteResp_default_instance_.DefaultConstruct();
  _VoipAnswerReq_default_instance_.DefaultConstruct();
  _VoipAnswerResp_default_instance_.DefaultConstruct();
  _VoipShutDownReq_default_instance_.DefaultConstruct();
  _VoipShutDownResp_default_instance_.DefaultConstruct();
  _VoipCmdItem_default_instance_.DefaultConstruct();
  _VoipCmdList_default_instance_.DefaultConstruct();
  _VoipSyncReq_default_instance_.DefaultConstruct();
  _VoipHeartBeatReq_default_instance_.DefaultConstruct();
  _VoipHeartBeatResp_default_instance_.DefaultConstruct();
  _VoipSyncResp_default_instance_.DefaultConstruct();
  _VoipStatusItem_default_instance_.DefaultConstruct();
  _VoipGetRoomInfoReq_default_instance_.DefaultConstruct();
  _VoipGetRoomInfoResp_default_instance_.DefaultConstruct();
  _VoipAckReq_default_instance_.DefaultConstruct();
  _VoipAckResp_default_instance_.DefaultConstruct();
  _VoipStatReportReq_default_instance_.DefaultConstruct();
  _VoipStatReportResp_default_instance_.DefaultConstruct();
  _VoipCompleteStatus_default_instance_.DefaultConstruct();
  _VoipCompleteStatusList_default_instance_.DefaultConstruct();
  _VoipRedirectReq_default_instance_.DefaultConstruct();
  _VoipRedirectResp_default_instance_.DefaultConstruct();
  _VoipDoubleLinkSwitchReq_default_instance_.DefaultConstruct();
  _VoipDoubleLinkSwitchRsp_default_instance_.DefaultConstruct();
  _VoipSpeedTestReq_default_instance_.DefaultConstruct();
  _SpeedTestSvr_default_instance_.DefaultConstruct();
  _VoipSpeedTestRsp_default_instance_.DefaultConstruct();
  _SpeedResult_default_instance_.DefaultConstruct();
  _VoipSpeedResultReq_default_instance_.DefaultConstruct();
  _VoipSpeedResultRsp_default_instance_.DefaultConstruct();
  _VoipRelayData_default_instance_.get_mutable()->buffer_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _VoipMultiRelayData_default_instance_.get_mutable()->peerid_ = const_cast< ::micromsg::VoipRelayData*>(
      ::micromsg::VoipRelayData::internal_default_instance());
  _VoipMultiRelayData_default_instance_.get_mutable()->capinfo_ = const_cast< ::micromsg::VoipRelayData*>(
      ::micromsg::VoipRelayData::internal_default_instance());
  _VoipMultiRelayData_default_instance_.get_mutable()->voipsvraddr_ = const_cast< ::micromsg::VoipAddrSet*>(
      ::micromsg::VoipAddrSet::internal_default_instance());
  _VoipMultiRelayData_default_instance_.get_mutable()->punchsvraddr_ = const_cast< ::micromsg::VoipAddrSet*>(
      ::micromsg::VoipAddrSet::internal_default_instance());
  _VoipMultiRelayData_default_instance_.get_mutable()->clientheadsigns_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _VoipMultiRelayData_default_instance_.get_mutable()->tcpsvraddr_ = const_cast< ::micromsg::VoipAddrSet*>(
      ::micromsg::VoipAddrSet::internal_default_instance());
  _VoipMultiRelayData_default_instance_.get_mutable()->feckeypara1_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _VoipMultiRelayData_default_instance_.get_mutable()->feckeypara2_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _VoipMultiRelayData_default_instance_.get_mutable()->encryptkeybuf_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _VoipStatReportData_default_instance_.get_mutable()->statreport_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _VoipInviteRemindReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _VoipInviteRemindResp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _VoipInviteReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _VoipInviteReq_default_instance_.get_mutable()->peerid_ = const_cast< ::micromsg::VoipRelayData*>(
      ::micromsg::VoipRelayData::internal_default_instance());
  _VoipInviteReq_default_instance_.get_mutable()->capinfo_ = const_cast< ::micromsg::VoipRelayData*>(
      ::micromsg::VoipRelayData::internal_default_instance());
  _VoipInviteResp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _VoipInviteResp_default_instance_.get_mutable()->relaydata_ = const_cast< ::micromsg::VoipMultiRelayData*>(
      ::micromsg::VoipMultiRelayData::internal_default_instance());
  _VoipCancelInviteReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _VoipCancelInviteReq_default_instance_.get_mutable()->reportdata_ = const_cast< ::micromsg::VoipStatReportData*>(
      ::micromsg::VoipStatReportData::internal_default_instance());
  _VoipCancelInviteResp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _VoipAnswerReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _VoipAnswerReq_default_instance_.get_mutable()->peerid_ = const_cast< ::micromsg::VoipRelayData*>(
      ::micromsg::VoipRelayData::internal_default_instance());
  _VoipAnswerReq_default_instance_.get_mutable()->capinfo_ = const_cast< ::micromsg::VoipRelayData*>(
      ::micromsg::VoipRelayData::internal_default_instance());
  _VoipAnswerResp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _VoipAnswerResp_default_instance_.get_mutable()->relaydata_ = const_cast< ::micromsg::VoipMultiRelayData*>(
      ::micromsg::VoipMultiRelayData::internal_default_instance());
  _VoipShutDownReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _VoipShutDownReq_default_instance_.get_mutable()->reportdata_ = const_cast< ::micromsg::VoipStatReportData*>(
      ::micromsg::VoipStatReportData::internal_default_instance());
  _VoipShutDownResp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _VoipCmdItem_default_instance_.get_mutable()->cmdbuf_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _VoipSyncReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _VoipSyncReq_default_instance_.get_mutable()->keybuf_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _VoipSyncReq_default_instance_.get_mutable()->oplog_ = const_cast< ::micromsg::VoipCmdList*>(
      ::micromsg::VoipCmdList::internal_default_instance());
  _VoipHeartBeatReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _VoipHeartBeatResp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _VoipSyncResp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _VoipSyncResp_default_instance_.get_mutable()->keybuf_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _VoipSyncResp_default_instance_.get_mutable()->cmdlist_ = const_cast< ::micromsg::VoipCmdList*>(
      ::micromsg::VoipCmdList::internal_default_instance());
  _VoipGetRoomInfoReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _VoipGetRoomInfoResp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _VoipAckReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _VoipAckReq_default_instance_.get_mutable()->peerid_ = const_cast< ::micromsg::VoipRelayData*>(
      ::micromsg::VoipRelayData::internal_default_instance());
  _VoipAckReq_default_instance_.get_mutable()->capinfo_ = const_cast< ::micromsg::VoipRelayData*>(
      ::micromsg::VoipRelayData::internal_default_instance());
  _VoipAckResp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _VoipAckResp_default_instance_.get_mutable()->relaydata_ = const_cast< ::micromsg::VoipMultiRelayData*>(
      ::micromsg::VoipMultiRelayData::internal_default_instance());
  _VoipStatReportReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _VoipStatReportReq_default_instance_.get_mutable()->reportdata_ = const_cast< ::micromsg::VoipStatReportData*>(
      ::micromsg::VoipStatReportData::internal_default_instance());
  _VoipStatReportReq_default_instance_.get_mutable()->channelreportdata_ = const_cast< ::micromsg::VoipStatReportData*>(
      ::micromsg::VoipStatReportData::internal_default_instance());
  _VoipStatReportReq_default_instance_.get_mutable()->dialreportdata_ = const_cast< ::micromsg::VoipStatReportData*>(
      ::micromsg::VoipStatReportData::internal_default_instance());
  _VoipStatReportReq_default_instance_.get_mutable()->enginereportdata_ = const_cast< ::micromsg::VoipStatReportData*>(
      ::micromsg::VoipStatReportData::internal_default_instance());
  _VoipStatReportReq_default_instance_.get_mutable()->engineextreportdata_ = const_cast< ::micromsg::VoipStatReportData*>(
      ::micromsg::VoipStatReportData::internal_default_instance());
  _VoipStatReportResp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _VoipCompleteStatus_default_instance_.get_mutable()->buffer_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _VoipRedirectReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _VoipRedirectResp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _VoipDoubleLinkSwitchReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _VoipDoubleLinkSwitchReq_default_instance_.get_mutable()->buffer_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _VoipDoubleLinkSwitchRsp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _VoipSpeedTestReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _SpeedTestSvr_default_instance_.get_mutable()->addr_ = const_cast< ::micromsg::VoipAddr*>(
      ::micromsg::VoipAddr::internal_default_instance());
  _VoipSpeedTestRsp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _SpeedResult_default_instance_.get_mutable()->addr_ = const_cast< ::micromsg::VoipAddr*>(
      ::micromsg::VoipAddr::internal_default_instance());
  _VoipSpeedResultReq_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _VoipSpeedResultReq_default_instance_.get_mutable()->netname_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _VoipSpeedResultReq_default_instance_.get_mutable()->wifiname_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _VoipSpeedResultRsp_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\014mmvoip.proto\022\010micromsg\032\023mmbuiltintype."
      "proto\032\014mmbase.proto\"J\n\rVoipRelayData\022\014\n\004"
      "Type\030\001 \002(\005\022+\n\006Buffer\030\002 \002(\0132\033.micromsg.SK"
      "BuiltinBuffer_t\"$\n\010VoipAddr\022\n\n\002Ip\030\001 \002(\005\022"
      "\014\n\004Port\030\002 \002(\005\"=\n\013VoipAddrSet\022\013\n\003Cnt\030\001 \002("
      "\005\022!\n\005Addrs\030\002 \003(\0132\022.micromsg.VoipAddr\"\277\006\n"
      "\022VoipMultiRelayData\022\'\n\006PeerId\030\001 \002(\0132\027.mi"
      "cromsg.VoipRelayData\022(\n\007CapInfo\030\002 \002(\0132\027."
      "micromsg.VoipRelayData\022\023\n\013SendingType\030\003 "
      "\002(\005\022*\n\013VoipSvrAddr\030\004 \001(\0132\025.micromsg.Voip"
      "AddrSet\022+\n\014PunchSvrAddr\030\005 \001(\0132\025.micromsg"
      ".VoipAddrSet\022\026\n\016VoipNetQuality\030\006 \001(\005\022 \n\030"
      "LinkDisconnectHbInterval\030\007 \001(\005\022\033\n\023LinkDi"
      "sconnectHbCnt\030\010 \001(\005\022\035\n\025ProtocolEncryptLe"
      "ngth\030\t \001(\r\0224\n\017ClientHeadSigns\030\n \001(\0132\033.mi"
      "cromsg.SKBuiltinBuffer_t\022\035\n\025OppositeClie"
      "ntVersion\030\013 \001(\r\022)\n\nTcpSvrAddr\030\014 \001(\0132\025.mi"
      "cromsg.VoipAddrSet\022\023\n\013ARQStrategy\030\r \001(\005\022"
      "\023\n\013ARQCacheLen\030\016 \001(\005\022\027\n\017ARQRttThreshold\030"
      "\017 \001(\005\022\034\n\024ARQUsedRateThreshold\030\020 \001(\005\022\034\n\024A"
      "RQRespRateThreshold\030\021 \001(\005\022\027\n\017EncryptStra"
      "tegy\030\022 \001(\005\022\021\n\tFECSvrCtr\030\023 \001(\005\0220\n\013FECKeyP"
      "ara1\030\024 \001(\0132\033.micromsg.SKBuiltinBuffer_t\022"
      "0\n\013FECKeyPara2\030\025 \001(\0132\033.micromsg.SKBuilti"
      "nBuffer_t\022\023\n\013QosStrategy\030\026 \001(\005\0222\n\rEncryp"
      "tKeyBuf\030\027 \001(\0132\033.micromsg.SKBuiltinBuffer"
      "_t\022\032\n\022OppositeDeviceType\030\030 \001(\r\"E\n\022VoipSt"
      "atReportData\022/\n\nStatReport\030\001 \002(\0132\033.micro"
      "msg.SKBuiltinString_t\"J\n\016VoipNetQuality\022"
      "\014\n\004Type\030\001 \002(\005\022\r\n\005Begin\030\002 \002(\005\022\013\n\003End\030\003 \002("
      "\005\022\016\n\006HitCnt\030\004 \002(\005\"\235\001\n\023VoipInviteRemindRe"
      "q\022*\n\013BaseRequest\030\001 \002(\0132\025.micromsg.BaseRe"
      "quest\022\021\n\tListCount\030\002 \002(\r\0223\n\016ToUserNameLi"
      "st\030\003 \003(\0132\033.micromsg.SKBuiltinString_t\022\022\n"
      "\nInviteType\030\004 \001(\r\"D\n\024VoipInviteRemindRes"
      "p\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg.BaseR"
      "esponse\"\202\003\n\rVoipInviteReq\022*\n\013BaseRequest"
      "\030\001 \002(\0132\025.micromsg.BaseRequest\022\024\n\014FromUse"
      "rname\030\002 \001(\t\022\027\n\017InviteUserCount\030\003 \002(\005\0223\n\016"
      "ToUsernameList\030\004 \003(\0132\033.micromsg.SKBuilti"
      "nString_t\022\'\n\006PeerId\030\006 \002(\0132\027.micromsg.Voi"
      "pRelayData\022(\n\007CapInfo\030\007 \002(\0132\027.micromsg.V"
      "oipRelayData\022\017\n\007NetType\030\010 \002(\005\022\020\n\010CallTyp"
      "e\030\t \002(\005\022\016\n\006RoomId\030\n \001(\005\022\017\n\007RoomKey\030\013 \001(\003"
      "\022\022\n\nInviteType\030\014 \001(\r\022\023\n\013Timestamp64\030\r \001("
      "\004\022\017\n\007HDVideo\030\016 \001(\005\022\020\n\010InviteId\030\017 \001(\r\"\305\004\n"
      "\016VoipInviteResp\022,\n\014BaseResponse\030\001 \002(\0132\026."
      "micromsg.BaseResponse\022\016\n\006RoomId\030\002 \002(\005\022\021\n"
      "\tAddrCount\030\003 \002(\005\022$\n\010AddrList\030\004 \003(\0132\022.mic"
      "romsg.VoipAddr\022\017\n\007RoomKey\030\005 \002(\003\022\024\n\014RoomM"
      "emberId\030\006 \002(\005\022/\n\tRelayData\030\007 \001(\0132\034.micro"
      "msg.VoipMultiRelayData\022\025\n\rNetQualityCnt\030"
      "\010 \001(\005\0220\n\016NetQualityList\030\t \003(\0132\030.micromsg"
      ".VoipNetQuality\022\031\n\021AudioTsdfBeyond3G\030\n \001"
      "(\005\022\025\n\rAudioTsdfEdge\030\013 \001(\005\022\037\n\027Passthrough"
      "QosAlgorithm\030\014 \001(\005\022\026\n\016FastPlayRepair\030\r \001"
      "(\005\022\030\n\020VoipSyncInterval\030\016 \001(\005\022\016\n\006NewP2S\030\017"
      " \001(\005\022\020\n\010AudioDTX\030\020 \001(\005\022\016\n\006TcpCnt\030\021 \001(\r\022\026"
      "\n\016SwitchInterval\030\022 \001(\r\022\023\n\013Hw264SvrCfg\030\023 "
      "\001(\005\022\035\n\025AudioEnableRmioAndS3A\030\024 \001(\005\022\030\n\020Au"
      "dioEnableSpkec\030\025 \001(\005\"\371\001\n\023VoipCancelInvit"
      "eReq\022*\n\013BaseRequest\030\001 \002(\0132\025.micromsg.Bas"
      "eRequest\022\024\n\014FromUsername\030\002 \001(\t\022\016\n\006RoomId"
      "\030\003 \002(\005\022\017\n\007RoomKey\030\004 \002(\003\022\022\n\nToUserName\030\006 "
      "\001(\t\0220\n\nReportData\030\010 \002(\0132\034.micromsg.VoipS"
      "tatReportData\022\022\n\nInviteType\030\t \001(\r\022\023\n\013Tim"
      "estamp64\030\n \001(\004\022\020\n\010InviteId\030\013 \001(\r\"e\n\024Voip"
      "CancelInviteResp\022,\n\014BaseResponse\030\001 \002(\0132\026"
      ".micromsg.BaseResponse\022\016\n\006RoomId\030\002 \002(\005\022\017"
      "\n\007RoomKey\030\003 \002(\003\"\216\002\n\rVoipAnswerReq\022*\n\013Bas"
      "eRequest\030\001 \002(\0132\025.micromsg.BaseRequest\022\024\n"
      "\014FromUsername\030\002 \001(\t\022\016\n\006RoomId\030\003 \002(\005\022\016\n\006A"
      "nswer\030\004 \002(\005\022\'\n\006PeerId\030\005 \001(\0132\027.micromsg.V"
      "oipRelayData\022(\n\007CapInfo\030\006 \001(\0132\027.micromsg"
      ".VoipRelayData\022\017\n\007RoomKey\030\007 \002(\003\022\017\n\007NetTy"
      "pe\030\010 \002(\005\022\023\n\013Timestamp64\030\t \001(\004\022\021\n\tOnlyAud"
      "io\030\n \001(\005\"\253\004\n\016VoipAnswerResp\022,\n\014BaseRespo"
      "nse\030\001 \002(\0132\026.micromsg.BaseResponse\022\021\n\tAdd"
      "rCount\030\002 \002(\005\022$\n\010AddrList\030\003 \003(\0132\022.microms"
      "g.VoipAddr\022\016\n\006RoomId\030\004 \002(\005\022\017\n\007RoomKey\030\005 "
      "\002(\003\022\024\n\014RoomMemberID\030\006 \002(\005\022/\n\tRelayData\030\007"
      " \002(\0132\034.micromsg.VoipMultiRelayData\022\025\n\rNe"
      "tQualityCnt\030\010 \001(\005\0220\n\016NetQualityList\030\t \003("
      "\0132\030.micromsg.VoipNetQuality\022\031\n\021AudioTsdf"
      "Beyond3G\030\n \001(\005\022\025\n\rAudioTsdfEdge\030\013 \001(\005\022\037\n"
      "\027PassthroughQosAlgorithm\030\014 \001(\005\022\026\n\016FastPl"
      "ayRepair\030\r \001(\005\022\016\n\006NewP2S\030\016 \001(\005\022\020\n\010AudioD"
      "TX\030\017 \001(\005\022\016\n\006TcpCnt\030\020 \001(\r\022\026\n\016SwitchInterv"
      "al\030\021 \001(\r\022\023\n\013Hw264SvrCfg\030\022 \001(\005\022\035\n\025AudioEn"
      "ableRmioAndS3A\030\023 \001(\005\022\030\n\020AudioEnableSpkec"
      "\030\024 \001(\005\"\315\001\n\017VoipShutDownReq\022*\n\013BaseReques"
      "t\030\001 \002(\0132\025.micromsg.BaseRequest\022\024\n\014FromUs"
      "ername\030\002 \001(\t\022\016\n\006RoomId\030\003 \002(\005\022\017\n\007RoomKey\030"
      "\004 \002(\003\0220\n\nReportData\030\005 \002(\0132\034.micromsg.Voi"
      "pStatReportData\022\023\n\013Timestamp64\030\006 \001(\004\022\020\n\010"
      "Duration\030\007 \001(\r\"a\n\020VoipShutDownResp\022,\n\014Ba"
      "seResponse\030\001 \002(\0132\026.micromsg.BaseResponse"
      "\022\016\n\006RoomId\030\002 \002(\005\022\017\n\007RoomKey\030\003 \002(\003\"_\n\013Voi"
      "pCmdItem\022\r\n\005CmdId\030\001 \002(\005\022+\n\006CmdBuf\030\002 \002(\0132"
      "\033.micromsg.SKBuiltinBuffer_t\022\024\n\014FromUser"
      "Name\030\003 \001(\t\"A\n\013VoipCmdList\022\r\n\005Count\030\001 \002(\r"
      "\022#\n\004List\030\002 \003(\0132\025.micromsg.VoipCmdItem\"\352\001"
      "\n\013VoipSyncReq\022*\n\013BaseRequest\030\001 \002(\0132\025.mic"
      "romsg.BaseRequest\022\024\n\014FromUsername\030\002 \001(\t\022"
      "\016\n\006RoomId\030\003 \002(\005\022+\n\006KeyBuf\030\004 \002(\0132\033.microm"
      "sg.SKBuiltinBuffer_t\022$\n\005OpLog\030\005 \002(\0132\025.mi"
      "cromsg.VoipCmdList\022\017\n\007RoomKey\030\006 \002(\003\022\020\n\010S"
      "elector\030\007 \002(\005\022\023\n\013Timestamp64\030\010 \001(\004\"\237\001\n\020V"
      "oipHeartBeatReq\022*\n\013BaseRequest\030\001 \002(\0132\025.m"
      "icromsg.BaseRequest\022\016\n\006RoomId\030\002 \002(\005\022\017\n\007R"
      "oomKey\030\003 \002(\003\022\021\n\tTimestamp\030\004 \001(\r\022\023\n\013Times"
      "tamp64\030\005 \001(\004\022\026\n\016ConnectionType\030\006 \001(\005\"u\n\021"
      "VoipHeartBeatResp\022,\n\014BaseResponse\030\001 \002(\0132"
      "\026.micromsg.BaseResponse\022\016\n\006RoomId\030\002 \002(\005\022"
      "\017\n\007RoomKey\030\003 \002(\003\022\021\n\tTimestamp\030\004 \001(\r\"\310\001\n\014"
      "VoipSyncResp\022,\n\014BaseResponse\030\001 \002(\0132\026.mic"
      "romsg.BaseResponse\022\016\n\006RoomId\030\003 \002(\005\022+\n\006Ke"
      "yBuf\030\004 \002(\0132\033.micromsg.SKBuiltinBuffer_t\022"
      "&\n\007CmdList\030\005 \002(\0132\025.micromsg.VoipCmdList\022"
      "\024\n\014ContinueFlag\030\007 \002(\005\022\017\n\007RoomKey\030\010 \002(\003\"2"
      "\n\016VoipStatusItem\022\020\n\010Username\030\001 \001(\t\022\016\n\006St"
      "atus\030\002 \002(\005\"\234\001\n\022VoipGetRoomInfoReq\022*\n\013Bas"
      "eRequest\030\001 \002(\0132\025.micromsg.BaseRequest\022\016\n"
      "\006RoomId\030\002 \002(\005\022\017\n\007RoomKey\030\003 \002(\003\022\026\n\016Caller"
      "UserName\030\004 \001(\t\022\014\n\004Type\030\005 \001(\r\022\023\n\013Timestam"
      "p64\030\006 \001(\004\"\351\001\n\023VoipGetRoomInfoResp\022,\n\014Bas"
      "eResponse\030\001 \002(\0132\026.micromsg.BaseResponse\022"
      "\016\n\006RoomId\030\002 \002(\005\022\017\n\007RoomKey\030\003 \002(\003\022\022\n\nCrea"
      "teTime\030\004 \002(\r\022\023\n\013MemberCount\030\006 \002(\005\022.\n\014Mem"
      "berStatus\030\007 \003(\0132\030.micromsg.VoipStatusIte"
      "m\022\026\n\016CallerUserName\030\010 \001(\t\022\022\n\nInviteType\030"
      "\t \001(\r\"\243\002\n\nVoipAckReq\022*\n\013BaseRequest\030\001 \002("
      "\0132\025.micromsg.BaseRequest\022\016\n\006RoomId\030\002 \002(\005"
      "\022\017\n\007RoomKey\030\003 \002(\003\022\024\n\014FromUsername\030\004 \001(\t\022"
      "\022\n\nPreConnect\030\005 \001(\005\022\'\n\006PeerId\030\006 \001(\0132\027.mi"
      "cromsg.VoipRelayData\022(\n\007CapInfo\030\007 \001(\0132\027."
      "micromsg.VoipRelayData\022\017\n\007NetType\030\010 \001(\005\022"
      "\022\n\nCallerName\030\t \001(\t\022\021\n\tAckStatus\030\n \001(\005\022\023"
      "\n\013Timestamp64\030\013 \001(\004\"\346\001\n\013VoipAckResp\022,\n\014B"
      "aseResponse\030\001 \002(\0132\026.micromsg.BaseRespons"
      "e\022\016\n\006RoomId\030\002 \002(\005\022\017\n\007RoomKey\030\003 \002(\003\022\024\n\014Ro"
      "omMemberID\030\004 \001(\005\022/\n\tRelayData\030\005 \001(\0132\034.mi"
      "cromsg.VoipMultiRelayData\022\022\n\nPreConnect\030"
      "\006 \001(\005\022\016\n\006TcpCnt\030\007 \001(\r\022\035\n\025AudioEnableRmio"
      "AndS3A\030\010 \001(\005\"\350\002\n\021VoipStatReportReq\022*\n\013Ba"
      "seRequest\030\001 \002(\0132\025.micromsg.BaseRequest\0220"
      "\n\nReportData\030\002 \002(\0132\034.micromsg.VoipStatRe"
      "portData\0227\n\021ChannelReportData\030\003 \001(\0132\034.mi"
      "cromsg.VoipStatReportData\0224\n\016DialReportD"
      "ata\030\004 \001(\0132\034.micromsg.VoipStatReportData\022"
      "6\n\020EngineReportData\030\005 \001(\0132\034.micromsg.Voi"
      "pStatReportData\022\023\n\013Timestamp64\030\006 \001(\004\0229\n\023"
      "EngineExtReportData\030\007 \001(\0132\034.micromsg.Voi"
      "pStatReportData\"B\n\022VoipStatReportResp\022,\n"
      "\014BaseResponse\030\001 \002(\0132\026.micromsg.BaseRespo"
      "nse\"j\n\022VoipCompleteStatus\022\r\n\005CmdId\030\001 \002(\005"
      "\022\013\n\003Uin\030\002 \002(\r\022\013\n\003Key\030\003 \002(\r\022+\n\006Buffer\030\004 \002"
      "(\0132\033.micromsg.SKBuiltinBuffer_t\"j\n\026VoipC"
      "ompleteStatusList\022\r\n\005Count\030\001 \002(\005\0224\n\016Comp"
      "leteStatus\030\002 \003(\0132\034.micromsg.VoipComplete"
      "Status\022\013\n\003Seq\030\003 \002(\r\"t\n\017VoipRedirectReq\022*"
      "\n\013BaseRequest\030\001 \002(\0132\025.micromsg.BaseReque"
      "st\022\016\n\006RoomId\030\002 \002(\005\022\017\n\007RoomKey\030\003 \002(\003\022\024\n\014R"
      "oomMemberId\030\004 \002(\005\"\274\002\n\020VoipRedirectResp\022,"
      "\n\014BaseResponse\030\001 \002(\0132\026.micromsg.BaseResp"
      "onse\022\016\n\006RoomId\030\002 \002(\005\022\026\n\016RelayAddrCount\030\003"
      " \002(\005\022)\n\rRelayAddrList\030\004 \003(\0132\022.micromsg.V"
      "oipAddr\022\026\n\016PunchAddrCount\030\005 \002(\005\022)\n\rPunch"
      "AddrList\030\006 \003(\0132\022.micromsg.VoipAddr\022\017\n\007Ro"
      "omKey\030\007 \002(\003\022\024\n\014RoomMemberId\030\010 \002(\005\022\024\n\014Tcp"
      "AddrCount\030\t \001(\005\022\'\n\013TcpAddrList\030\n \003(\0132\022.m"
      "icromsg.VoipAddr\"\237\002\n\027VoipDoubleLinkSwitc"
      "hReq\022*\n\013BaseRequest\030\001 \002(\0132\025.micromsg.Bas"
      "eRequest\022\016\n\006RoomId\030\002 \002(\005\022\017\n\007RoomKey\030\003 \002("
      "\003\022\024\n\014RoomMemberId\030\004 \002(\005\022\023\n\013CurLinkType\030\005"
      " \002(\005\022\030\n\020IsRelayConnReady\030\006 \002(\005\022\031\n\021IsDire"
      "ctConnReady\030\007 \002(\005\022\023\n\013CurStrategy\030\010 \002(\005\022\025"
      "\n\rBufferVersion\030\t \002(\005\022+\n\006Buffer\030\n \002(\0132\033."
      "micromsg.SKBuiltinBuffer_t\"\254\001\n\027VoipDoubl"
      "eLinkSwitchRsp\022,\n\014BaseResponse\030\001 \002(\0132\026.m"
      "icromsg.BaseResponse\022\016\n\006RoomId\030\002 \002(\005\022\017\n\007"
      "RoomKey\030\003 \002(\003\022\024\n\014RoomMemberId\030\004 \002(\005\022\022\n\nR"
      "eportFlag\030\005 \002(\005\022\030\n\020SwitchToLinkType\030\006 \002("
      "\005\"\273\002\n\020VoipSpeedTestReq\022*\n\013BaseRequest\030\001 "
      "\002(\0132\025.micromsg.BaseRequest\022\016\n\006RoomId\030\002 \002"
      "(\005\022\020\n\010CallType\030\003 \002(\r\022\017\n\007NetType\030\004 \002(\r\022\024\n"
      "\014IsConnecting\030\005 \002(\r\022\023\n\013IsConnected\030\006 \002(\r"
      "\022\023\n\013C2CLossrate\030\007 \002(\r\022\021\n\tC2CRttCnt\030\010 \002(\r"
      "\022\022\n\006C2CRtt\030\t \003(\rB\002\020\001\022\027\n\017C2SDownLossRate\030"
      "\n \002(\r\022\021\n\tC2SRttCnt\030\013 \002(\r\022\022\n\006C2SRtt\030\014 \003(\r"
      "B\002\020\001\022\020\n\010SendPkts\030\r \002(\r\022\017\n\007RcvPkts\030\016 \002(\r\""
      "t\n\014SpeedTestSvr\022 \n\004Addr\030\001 \002(\0132\022.micromsg"
      ".VoipAddr\022\017\n\007TestCnt\030\002 \002(\r\022\017\n\007TestGap\030\003 "
      "\002(\r\022\017\n\007Timeout\030\004 \002(\r\022\017\n\007PktSize\030\005 \002(\r\"\237\001"
      "\n\020VoipSpeedTestRsp\022,\n\014BaseResponse\030\001 \002(\013"
      "2\026.micromsg.BaseResponse\022\020\n\010NeedTest\030\002 \002"
      "(\r\022\016\n\006TestId\030\003 \002(\004\022\022\n\nSvrListCnt\030\004 \002(\r\022\'"
      "\n\007SvrList\030\005 \003(\0132\026.micromsg.SpeedTestSvr\""
      "\206\002\n\013SpeedResult\022\020\n\010ClientIp\030\001 \002(\r\022\023\n\013Tes"
      "tPktSize\030\002 \002(\r\022\017\n\007TestCnt\030\003 \002(\r\022 \n\004Addr\030"
      "\004 \002(\0132\022.micromsg.VoipAddr\022\016\n\006AvgRtt\030\005 \002("
      "\r\022\016\n\006MinRtt\030\006 \002(\r\022\016\n\006MaxRtt\030\007 \002(\r\022\016\n\006Rtt"
      "Cnt\030\010 \002(\r\022\017\n\003Rtt\030\t \003(\rB\002\020\001\022\022\n\nDownSeqCnt"
      "\030\n \002(\r\022\023\n\007DownSeq\030\013 \003(\rB\002\020\001\022\020\n\010UpSeqCnt\030"
      "\014 \002(\r\022\021\n\005UpSeq\030\r \003(\rB\002\020\001\"\276\002\n\022VoipSpeedRe"
      "sultReq\022*\n\013BaseRequest\030\001 \002(\0132\025.micromsg."
      "BaseRequest\022\016\n\006TestId\030\002 \002(\004\022\017\n\007RoomKey\030\003"
      " \002(\004\022\017\n\007NetType\030\004 \002(\r\022,\n\007NetName\030\005 \002(\0132\033"
      ".micromsg.SKBuiltinString_t\022-\n\010WifiName\030"
      "\006 \002(\0132\033.micromsg.SKBuiltinString_t\022\021\n\tLo"
      "ngitude\030\007 \002(\001\022\020\n\010Latitude\030\010 \002(\001\022\016\n\006RoomI"
      "d\030\t \002(\r\022\021\n\tResultCnt\030\n \002(\r\022%\n\006Result\030\013 \003"
      "(\0132\025.micromsg.SpeedResult\"B\n\022VoipSpeedRe"
      "sultRsp\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg"
      ".BaseResponse"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 8573);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mmvoip.proto", &protobuf_RegisterTypes);
  ::micromsg::protobuf_mmbuiltintype_2eproto::AddDescriptors();
  ::micromsg::protobuf_mmbase_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_mmvoip_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoipRelayData::kTypeFieldNumber;
const int VoipRelayData::kBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoipRelayData::VoipRelayData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VoipRelayData)
}
VoipRelayData::VoipRelayData(const VoipRelayData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_buffer()) {
    buffer_ = new ::micromsg::SKBuiltinBuffer_t(*from.buffer_);
  } else {
    buffer_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:micromsg.VoipRelayData)
}

void VoipRelayData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&buffer_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&buffer_) + sizeof(type_));
}

VoipRelayData::~VoipRelayData() {
  // @@protoc_insertion_point(destructor:micromsg.VoipRelayData)
  SharedDtor();
}

void VoipRelayData::SharedDtor() {
  if (this != internal_default_instance()) {
    delete buffer_;
  }
}

void VoipRelayData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoipRelayData::descriptor() {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoipRelayData& VoipRelayData::default_instance() {
  protobuf_mmvoip_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoipRelayData* VoipRelayData::New(::google::protobuf::Arena* arena) const {
  VoipRelayData* n = new VoipRelayData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoipRelayData::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VoipRelayData)
  if (has_buffer()) {
    GOOGLE_DCHECK(buffer_ != NULL);
    buffer_->::micromsg::SKBuiltinBuffer_t::Clear();
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoipRelayData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VoipRelayData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t Buffer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VoipRelayData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VoipRelayData)
  return false;
#undef DO_
}

void VoipRelayData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VoipRelayData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t Buffer = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->buffer_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VoipRelayData)
}

::google::protobuf::uint8* VoipRelayData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VoipRelayData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t Buffer = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->buffer_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VoipRelayData)
  return target;
}

size_t VoipRelayData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.VoipRelayData)
  size_t total_size = 0;

  if (has_buffer()) {
    // required .micromsg.SKBuiltinBuffer_t Buffer = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->buffer_);
  }

  if (has_type()) {
    // required int32 Type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  return total_size;
}
size_t VoipRelayData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VoipRelayData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.SKBuiltinBuffer_t Buffer = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->buffer_);

    // required int32 Type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoipRelayData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VoipRelayData)
  GOOGLE_DCHECK_NE(&from, this);
  const VoipRelayData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoipRelayData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VoipRelayData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VoipRelayData)
    MergeFrom(*source);
  }
}

void VoipRelayData::MergeFrom(const VoipRelayData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VoipRelayData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_buffer()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.buffer());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VoipRelayData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VoipRelayData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoipRelayData::CopyFrom(const VoipRelayData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VoipRelayData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoipRelayData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_buffer()) {
    if (!this->buffer_->IsInitialized()) return false;
  }
  return true;
}

void VoipRelayData::Swap(VoipRelayData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoipRelayData::InternalSwap(VoipRelayData* other) {
  std::swap(buffer_, other->buffer_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoipRelayData::GetMetadata() const {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoipRelayData

// required int32 Type = 1;
bool VoipRelayData::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VoipRelayData::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void VoipRelayData::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void VoipRelayData::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 VoipRelayData::type() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipRelayData.Type)
  return type_;
}
void VoipRelayData::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipRelayData.Type)
}

// required .micromsg.SKBuiltinBuffer_t Buffer = 2;
bool VoipRelayData::has_buffer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoipRelayData::set_has_buffer() {
  _has_bits_[0] |= 0x00000001u;
}
void VoipRelayData::clear_has_buffer() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoipRelayData::clear_buffer() {
  if (buffer_ != NULL) buffer_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_buffer();
}
const ::micromsg::SKBuiltinBuffer_t& VoipRelayData::buffer() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipRelayData.Buffer)
  return buffer_ != NULL ? *buffer_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* VoipRelayData::mutable_buffer() {
  set_has_buffer();
  if (buffer_ == NULL) {
    buffer_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipRelayData.Buffer)
  return buffer_;
}
::micromsg::SKBuiltinBuffer_t* VoipRelayData::release_buffer() {
  // @@protoc_insertion_point(field_release:micromsg.VoipRelayData.Buffer)
  clear_has_buffer();
  ::micromsg::SKBuiltinBuffer_t* temp = buffer_;
  buffer_ = NULL;
  return temp;
}
void VoipRelayData::set_allocated_buffer(::micromsg::SKBuiltinBuffer_t* buffer) {
  delete buffer_;
  buffer_ = buffer;
  if (buffer) {
    set_has_buffer();
  } else {
    clear_has_buffer();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipRelayData.Buffer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoipAddr::kIpFieldNumber;
const int VoipAddr::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoipAddr::VoipAddr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VoipAddr)
}
VoipAddr::VoipAddr(const VoipAddr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ip_, &from.ip_,
    reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&ip_) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:micromsg.VoipAddr)
}

void VoipAddr::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ip_, 0, reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&ip_) + sizeof(port_));
}

VoipAddr::~VoipAddr() {
  // @@protoc_insertion_point(destructor:micromsg.VoipAddr)
  SharedDtor();
}

void VoipAddr::SharedDtor() {
}

void VoipAddr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoipAddr::descriptor() {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoipAddr& VoipAddr::default_instance() {
  protobuf_mmvoip_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoipAddr* VoipAddr::New(::google::protobuf::Arena* arena) const {
  VoipAddr* n = new VoipAddr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoipAddr::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VoipAddr)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&ip_, 0, reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&ip_) + sizeof(port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoipAddr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VoipAddr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VoipAddr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VoipAddr)
  return false;
#undef DO_
}

void VoipAddr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VoipAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ip(), output);
  }

  // required int32 Port = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VoipAddr)
}

::google::protobuf::uint8* VoipAddr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VoipAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Ip = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ip(), target);
  }

  // required int32 Port = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VoipAddr)
  return target;
}

size_t VoipAddr::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.VoipAddr)
  size_t total_size = 0;

  if (has_ip()) {
    // required int32 Ip = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ip());
  }

  if (has_port()) {
    // required int32 Port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  return total_size;
}
size_t VoipAddr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VoipAddr)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 Ip = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ip());

    // required int32 Port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoipAddr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VoipAddr)
  GOOGLE_DCHECK_NE(&from, this);
  const VoipAddr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoipAddr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VoipAddr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VoipAddr)
    MergeFrom(*source);
  }
}

void VoipAddr::MergeFrom(const VoipAddr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VoipAddr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      ip_ = from.ip_;
    }
    if (cached_has_bits & 0x00000002u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VoipAddr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VoipAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoipAddr::CopyFrom(const VoipAddr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VoipAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoipAddr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void VoipAddr::Swap(VoipAddr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoipAddr::InternalSwap(VoipAddr* other) {
  std::swap(ip_, other->ip_);
  std::swap(port_, other->port_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoipAddr::GetMetadata() const {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoipAddr

// required int32 Ip = 1;
bool VoipAddr::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoipAddr::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
void VoipAddr::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoipAddr::clear_ip() {
  ip_ = 0;
  clear_has_ip();
}
::google::protobuf::int32 VoipAddr::ip() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAddr.Ip)
  return ip_;
}
void VoipAddr::set_ip(::google::protobuf::int32 value) {
  set_has_ip();
  ip_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAddr.Ip)
}

// required int32 Port = 2;
bool VoipAddr::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VoipAddr::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
void VoipAddr::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
void VoipAddr::clear_port() {
  port_ = 0;
  clear_has_port();
}
::google::protobuf::int32 VoipAddr::port() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAddr.Port)
  return port_;
}
void VoipAddr::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAddr.Port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoipAddrSet::kCntFieldNumber;
const int VoipAddrSet::kAddrsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoipAddrSet::VoipAddrSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VoipAddrSet)
}
VoipAddrSet::VoipAddrSet(const VoipAddrSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      addrs_(from.addrs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cnt_ = from.cnt_;
  // @@protoc_insertion_point(copy_constructor:micromsg.VoipAddrSet)
}

void VoipAddrSet::SharedCtor() {
  _cached_size_ = 0;
  cnt_ = 0;
}

VoipAddrSet::~VoipAddrSet() {
  // @@protoc_insertion_point(destructor:micromsg.VoipAddrSet)
  SharedDtor();
}

void VoipAddrSet::SharedDtor() {
}

void VoipAddrSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoipAddrSet::descriptor() {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoipAddrSet& VoipAddrSet::default_instance() {
  protobuf_mmvoip_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoipAddrSet* VoipAddrSet::New(::google::protobuf::Arena* arena) const {
  VoipAddrSet* n = new VoipAddrSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoipAddrSet::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VoipAddrSet)
  addrs_.Clear();
  cnt_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoipAddrSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VoipAddrSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Cnt = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_cnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.VoipAddr Addrs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_addrs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VoipAddrSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VoipAddrSet)
  return false;
#undef DO_
}

void VoipAddrSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VoipAddrSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Cnt = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cnt(), output);
  }

  // repeated .micromsg.VoipAddr Addrs = 2;
  for (unsigned int i = 0, n = this->addrs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->addrs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VoipAddrSet)
}

::google::protobuf::uint8* VoipAddrSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VoipAddrSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Cnt = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cnt(), target);
  }

  // repeated .micromsg.VoipAddr Addrs = 2;
  for (unsigned int i = 0, n = this->addrs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->addrs(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VoipAddrSet)
  return target;
}

size_t VoipAddrSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VoipAddrSet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required int32 Cnt = 1;
  if (has_cnt()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cnt());
  }
  // repeated .micromsg.VoipAddr Addrs = 2;
  {
    unsigned int count = this->addrs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->addrs(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoipAddrSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VoipAddrSet)
  GOOGLE_DCHECK_NE(&from, this);
  const VoipAddrSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoipAddrSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VoipAddrSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VoipAddrSet)
    MergeFrom(*source);
  }
}

void VoipAddrSet::MergeFrom(const VoipAddrSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VoipAddrSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  addrs_.MergeFrom(from.addrs_);
  if (from.has_cnt()) {
    set_cnt(from.cnt());
  }
}

void VoipAddrSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VoipAddrSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoipAddrSet::CopyFrom(const VoipAddrSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VoipAddrSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoipAddrSet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->addrs())) return false;
  return true;
}

void VoipAddrSet::Swap(VoipAddrSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoipAddrSet::InternalSwap(VoipAddrSet* other) {
  addrs_.InternalSwap(&other->addrs_);
  std::swap(cnt_, other->cnt_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoipAddrSet::GetMetadata() const {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoipAddrSet

// required int32 Cnt = 1;
bool VoipAddrSet::has_cnt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoipAddrSet::set_has_cnt() {
  _has_bits_[0] |= 0x00000001u;
}
void VoipAddrSet::clear_has_cnt() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoipAddrSet::clear_cnt() {
  cnt_ = 0;
  clear_has_cnt();
}
::google::protobuf::int32 VoipAddrSet::cnt() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAddrSet.Cnt)
  return cnt_;
}
void VoipAddrSet::set_cnt(::google::protobuf::int32 value) {
  set_has_cnt();
  cnt_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAddrSet.Cnt)
}

// repeated .micromsg.VoipAddr Addrs = 2;
int VoipAddrSet::addrs_size() const {
  return addrs_.size();
}
void VoipAddrSet::clear_addrs() {
  addrs_.Clear();
}
const ::micromsg::VoipAddr& VoipAddrSet::addrs(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAddrSet.Addrs)
  return addrs_.Get(index);
}
::micromsg::VoipAddr* VoipAddrSet::mutable_addrs(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.VoipAddrSet.Addrs)
  return addrs_.Mutable(index);
}
::micromsg::VoipAddr* VoipAddrSet::add_addrs() {
  // @@protoc_insertion_point(field_add:micromsg.VoipAddrSet.Addrs)
  return addrs_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::VoipAddr >*
VoipAddrSet::mutable_addrs() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.VoipAddrSet.Addrs)
  return &addrs_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::VoipAddr >&
VoipAddrSet::addrs() const {
  // @@protoc_insertion_point(field_list:micromsg.VoipAddrSet.Addrs)
  return addrs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoipMultiRelayData::kPeerIdFieldNumber;
const int VoipMultiRelayData::kCapInfoFieldNumber;
const int VoipMultiRelayData::kSendingTypeFieldNumber;
const int VoipMultiRelayData::kVoipSvrAddrFieldNumber;
const int VoipMultiRelayData::kPunchSvrAddrFieldNumber;
const int VoipMultiRelayData::kVoipNetQualityFieldNumber;
const int VoipMultiRelayData::kLinkDisconnectHbIntervalFieldNumber;
const int VoipMultiRelayData::kLinkDisconnectHbCntFieldNumber;
const int VoipMultiRelayData::kProtocolEncryptLengthFieldNumber;
const int VoipMultiRelayData::kClientHeadSignsFieldNumber;
const int VoipMultiRelayData::kOppositeClientVersionFieldNumber;
const int VoipMultiRelayData::kTcpSvrAddrFieldNumber;
const int VoipMultiRelayData::kARQStrategyFieldNumber;
const int VoipMultiRelayData::kARQCacheLenFieldNumber;
const int VoipMultiRelayData::kARQRttThresholdFieldNumber;
const int VoipMultiRelayData::kARQUsedRateThresholdFieldNumber;
const int VoipMultiRelayData::kARQRespRateThresholdFieldNumber;
const int VoipMultiRelayData::kEncryptStrategyFieldNumber;
const int VoipMultiRelayData::kFECSvrCtrFieldNumber;
const int VoipMultiRelayData::kFECKeyPara1FieldNumber;
const int VoipMultiRelayData::kFECKeyPara2FieldNumber;
const int VoipMultiRelayData::kQosStrategyFieldNumber;
const int VoipMultiRelayData::kEncryptKeyBufFieldNumber;
const int VoipMultiRelayData::kOppositeDeviceTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoipMultiRelayData::VoipMultiRelayData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VoipMultiRelayData)
}
VoipMultiRelayData::VoipMultiRelayData(const VoipMultiRelayData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_peerid()) {
    peerid_ = new ::micromsg::VoipRelayData(*from.peerid_);
  } else {
    peerid_ = NULL;
  }
  if (from.has_capinfo()) {
    capinfo_ = new ::micromsg::VoipRelayData(*from.capinfo_);
  } else {
    capinfo_ = NULL;
  }
  if (from.has_voipsvraddr()) {
    voipsvraddr_ = new ::micromsg::VoipAddrSet(*from.voipsvraddr_);
  } else {
    voipsvraddr_ = NULL;
  }
  if (from.has_punchsvraddr()) {
    punchsvraddr_ = new ::micromsg::VoipAddrSet(*from.punchsvraddr_);
  } else {
    punchsvraddr_ = NULL;
  }
  if (from.has_clientheadsigns()) {
    clientheadsigns_ = new ::micromsg::SKBuiltinBuffer_t(*from.clientheadsigns_);
  } else {
    clientheadsigns_ = NULL;
  }
  if (from.has_tcpsvraddr()) {
    tcpsvraddr_ = new ::micromsg::VoipAddrSet(*from.tcpsvraddr_);
  } else {
    tcpsvraddr_ = NULL;
  }
  if (from.has_feckeypara1()) {
    feckeypara1_ = new ::micromsg::SKBuiltinBuffer_t(*from.feckeypara1_);
  } else {
    feckeypara1_ = NULL;
  }
  if (from.has_feckeypara2()) {
    feckeypara2_ = new ::micromsg::SKBuiltinBuffer_t(*from.feckeypara2_);
  } else {
    feckeypara2_ = NULL;
  }
  if (from.has_encryptkeybuf()) {
    encryptkeybuf_ = new ::micromsg::SKBuiltinBuffer_t(*from.encryptkeybuf_);
  } else {
    encryptkeybuf_ = NULL;
  }
  ::memcpy(&sendingtype_, &from.sendingtype_,
    reinterpret_cast<char*>(&oppositedevicetype_) -
    reinterpret_cast<char*>(&sendingtype_) + sizeof(oppositedevicetype_));
  // @@protoc_insertion_point(copy_constructor:micromsg.VoipMultiRelayData)
}

void VoipMultiRelayData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&peerid_, 0, reinterpret_cast<char*>(&oppositedevicetype_) -
    reinterpret_cast<char*>(&peerid_) + sizeof(oppositedevicetype_));
}

VoipMultiRelayData::~VoipMultiRelayData() {
  // @@protoc_insertion_point(destructor:micromsg.VoipMultiRelayData)
  SharedDtor();
}

void VoipMultiRelayData::SharedDtor() {
  if (this != internal_default_instance()) {
    delete peerid_;
  }
  if (this != internal_default_instance()) {
    delete capinfo_;
  }
  if (this != internal_default_instance()) {
    delete voipsvraddr_;
  }
  if (this != internal_default_instance()) {
    delete punchsvraddr_;
  }
  if (this != internal_default_instance()) {
    delete clientheadsigns_;
  }
  if (this != internal_default_instance()) {
    delete tcpsvraddr_;
  }
  if (this != internal_default_instance()) {
    delete feckeypara1_;
  }
  if (this != internal_default_instance()) {
    delete feckeypara2_;
  }
  if (this != internal_default_instance()) {
    delete encryptkeybuf_;
  }
}

void VoipMultiRelayData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoipMultiRelayData::descriptor() {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoipMultiRelayData& VoipMultiRelayData::default_instance() {
  protobuf_mmvoip_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoipMultiRelayData* VoipMultiRelayData::New(::google::protobuf::Arena* arena) const {
  VoipMultiRelayData* n = new VoipMultiRelayData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoipMultiRelayData::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VoipMultiRelayData)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_peerid()) {
      GOOGLE_DCHECK(peerid_ != NULL);
      peerid_->::micromsg::VoipRelayData::Clear();
    }
    if (has_capinfo()) {
      GOOGLE_DCHECK(capinfo_ != NULL);
      capinfo_->::micromsg::VoipRelayData::Clear();
    }
    if (has_voipsvraddr()) {
      GOOGLE_DCHECK(voipsvraddr_ != NULL);
      voipsvraddr_->::micromsg::VoipAddrSet::Clear();
    }
    if (has_punchsvraddr()) {
      GOOGLE_DCHECK(punchsvraddr_ != NULL);
      punchsvraddr_->::micromsg::VoipAddrSet::Clear();
    }
    if (has_clientheadsigns()) {
      GOOGLE_DCHECK(clientheadsigns_ != NULL);
      clientheadsigns_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_tcpsvraddr()) {
      GOOGLE_DCHECK(tcpsvraddr_ != NULL);
      tcpsvraddr_->::micromsg::VoipAddrSet::Clear();
    }
    if (has_feckeypara1()) {
      GOOGLE_DCHECK(feckeypara1_ != NULL);
      feckeypara1_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_feckeypara2()) {
      GOOGLE_DCHECK(feckeypara2_ != NULL);
      feckeypara2_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (has_encryptkeybuf()) {
    GOOGLE_DCHECK(encryptkeybuf_ != NULL);
    encryptkeybuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  }
  if (_has_bits_[8 / 32] & 65024u) {
    ::memset(&sendingtype_, 0, reinterpret_cast<char*>(&arqstrategy_) -
      reinterpret_cast<char*>(&sendingtype_) + sizeof(arqstrategy_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&arqcachelen_, 0, reinterpret_cast<char*>(&oppositedevicetype_) -
      reinterpret_cast<char*>(&arqcachelen_) + sizeof(oppositedevicetype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoipMultiRelayData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VoipMultiRelayData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.VoipRelayData PeerId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peerid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.VoipRelayData CapInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_capinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 SendingType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_sendingtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sendingtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.VoipAddrSet VoipSvrAddr = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_voipsvraddr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.VoipAddrSet PunchSvrAddr = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_punchsvraddr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 VoipNetQuality = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_voipnetquality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &voipnetquality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 LinkDisconnectHbInterval = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_linkdisconnecthbinterval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &linkdisconnecthbinterval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 LinkDisconnectHbCnt = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_linkdisconnecthbcnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &linkdisconnecthbcnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ProtocolEncryptLength = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_protocolencryptlength();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocolencryptlength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t ClientHeadSigns = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clientheadsigns()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 OppositeClientVersion = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_oppositeclientversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oppositeclientversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.VoipAddrSet TcpSvrAddr = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tcpsvraddr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ARQStrategy = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_arqstrategy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arqstrategy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ARQCacheLen = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_arqcachelen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arqcachelen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ARQRttThreshold = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_arqrttthreshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arqrttthreshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ARQUsedRateThreshold = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_arqusedratethreshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arqusedratethreshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ARQRespRateThreshold = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_arqrespratethreshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arqrespratethreshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 EncryptStrategy = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_encryptstrategy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &encryptstrategy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 FECSvrCtr = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_fecsvrctr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fecsvrctr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t FECKeyPara1 = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_feckeypara1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t FECKeyPara2 = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_feckeypara2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 QosStrategy = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_qosstrategy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qosstrategy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t EncryptKeyBuf = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_encryptkeybuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 OppositeDeviceType = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          set_has_oppositedevicetype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oppositedevicetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VoipMultiRelayData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VoipMultiRelayData)
  return false;
#undef DO_
}

void VoipMultiRelayData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VoipMultiRelayData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.VoipRelayData PeerId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->peerid_, output);
  }

  // required .micromsg.VoipRelayData CapInfo = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->capinfo_, output);
  }

  // required int32 SendingType = 3;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sendingtype(), output);
  }

  // optional .micromsg.VoipAddrSet VoipSvrAddr = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->voipsvraddr_, output);
  }

  // optional .micromsg.VoipAddrSet PunchSvrAddr = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->punchsvraddr_, output);
  }

  // optional int32 VoipNetQuality = 6;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->voipnetquality(), output);
  }

  // optional int32 LinkDisconnectHbInterval = 7;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->linkdisconnecthbinterval(), output);
  }

  // optional int32 LinkDisconnectHbCnt = 8;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->linkdisconnecthbcnt(), output);
  }

  // optional uint32 ProtocolEncryptLength = 9;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->protocolencryptlength(), output);
  }

  // optional .micromsg.SKBuiltinBuffer_t ClientHeadSigns = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->clientheadsigns_, output);
  }

  // optional uint32 OppositeClientVersion = 11;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->oppositeclientversion(), output);
  }

  // optional .micromsg.VoipAddrSet TcpSvrAddr = 12;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->tcpsvraddr_, output);
  }

  // optional int32 ARQStrategy = 13;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->arqstrategy(), output);
  }

  // optional int32 ARQCacheLen = 14;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->arqcachelen(), output);
  }

  // optional int32 ARQRttThreshold = 15;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->arqrttthreshold(), output);
  }

  // optional int32 ARQUsedRateThreshold = 16;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->arqusedratethreshold(), output);
  }

  // optional int32 ARQRespRateThreshold = 17;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->arqrespratethreshold(), output);
  }

  // optional int32 EncryptStrategy = 18;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->encryptstrategy(), output);
  }

  // optional int32 FECSvrCtr = 19;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->fecsvrctr(), output);
  }

  // optional .micromsg.SKBuiltinBuffer_t FECKeyPara1 = 20;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->feckeypara1_, output);
  }

  // optional .micromsg.SKBuiltinBuffer_t FECKeyPara2 = 21;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->feckeypara2_, output);
  }

  // optional int32 QosStrategy = 22;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->qosstrategy(), output);
  }

  // optional .micromsg.SKBuiltinBuffer_t EncryptKeyBuf = 23;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *this->encryptkeybuf_, output);
  }

  // optional uint32 OppositeDeviceType = 24;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->oppositedevicetype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VoipMultiRelayData)
}

::google::protobuf::uint8* VoipMultiRelayData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VoipMultiRelayData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.VoipRelayData PeerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->peerid_, deterministic, target);
  }

  // required .micromsg.VoipRelayData CapInfo = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->capinfo_, deterministic, target);
  }

  // required int32 SendingType = 3;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sendingtype(), target);
  }

  // optional .micromsg.VoipAddrSet VoipSvrAddr = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->voipsvraddr_, deterministic, target);
  }

  // optional .micromsg.VoipAddrSet PunchSvrAddr = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->punchsvraddr_, deterministic, target);
  }

  // optional int32 VoipNetQuality = 6;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->voipnetquality(), target);
  }

  // optional int32 LinkDisconnectHbInterval = 7;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->linkdisconnecthbinterval(), target);
  }

  // optional int32 LinkDisconnectHbCnt = 8;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->linkdisconnecthbcnt(), target);
  }

  // optional uint32 ProtocolEncryptLength = 9;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->protocolencryptlength(), target);
  }

  // optional .micromsg.SKBuiltinBuffer_t ClientHeadSigns = 10;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->clientheadsigns_, deterministic, target);
  }

  // optional uint32 OppositeClientVersion = 11;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->oppositeclientversion(), target);
  }

  // optional .micromsg.VoipAddrSet TcpSvrAddr = 12;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->tcpsvraddr_, deterministic, target);
  }

  // optional int32 ARQStrategy = 13;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->arqstrategy(), target);
  }

  // optional int32 ARQCacheLen = 14;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->arqcachelen(), target);
  }

  // optional int32 ARQRttThreshold = 15;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->arqrttthreshold(), target);
  }

  // optional int32 ARQUsedRateThreshold = 16;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->arqusedratethreshold(), target);
  }

  // optional int32 ARQRespRateThreshold = 17;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->arqrespratethreshold(), target);
  }

  // optional int32 EncryptStrategy = 18;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->encryptstrategy(), target);
  }

  // optional int32 FECSvrCtr = 19;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->fecsvrctr(), target);
  }

  // optional .micromsg.SKBuiltinBuffer_t FECKeyPara1 = 20;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->feckeypara1_, deterministic, target);
  }

  // optional .micromsg.SKBuiltinBuffer_t FECKeyPara2 = 21;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->feckeypara2_, deterministic, target);
  }

  // optional int32 QosStrategy = 22;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->qosstrategy(), target);
  }

  // optional .micromsg.SKBuiltinBuffer_t EncryptKeyBuf = 23;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, *this->encryptkeybuf_, deterministic, target);
  }

  // optional uint32 OppositeDeviceType = 24;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->oppositedevicetype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VoipMultiRelayData)
  return target;
}

size_t VoipMultiRelayData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.VoipMultiRelayData)
  size_t total_size = 0;

  if (has_peerid()) {
    // required .micromsg.VoipRelayData PeerId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->peerid_);
  }

  if (has_capinfo()) {
    // required .micromsg.VoipRelayData CapInfo = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->capinfo_);
  }

  if (has_sendingtype()) {
    // required int32 SendingType = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sendingtype());
  }

  return total_size;
}
size_t VoipMultiRelayData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VoipMultiRelayData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000203) ^ 0x00000203) == 0) {  // All required fields are present.
    // required .micromsg.VoipRelayData PeerId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->peerid_);

    // required .micromsg.VoipRelayData CapInfo = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->capinfo_);

    // required int32 SendingType = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sendingtype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 252u) {
    // optional .micromsg.VoipAddrSet VoipSvrAddr = 4;
    if (has_voipsvraddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->voipsvraddr_);
    }

    // optional .micromsg.VoipAddrSet PunchSvrAddr = 5;
    if (has_punchsvraddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->punchsvraddr_);
    }

    // optional .micromsg.SKBuiltinBuffer_t ClientHeadSigns = 10;
    if (has_clientheadsigns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->clientheadsigns_);
    }

    // optional .micromsg.VoipAddrSet TcpSvrAddr = 12;
    if (has_tcpsvraddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tcpsvraddr_);
    }

    // optional .micromsg.SKBuiltinBuffer_t FECKeyPara1 = 20;
    if (has_feckeypara1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->feckeypara1_);
    }

    // optional .micromsg.SKBuiltinBuffer_t FECKeyPara2 = 21;
    if (has_feckeypara2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->feckeypara2_);
    }

  }
  // optional .micromsg.SKBuiltinBuffer_t EncryptKeyBuf = 23;
  if (has_encryptkeybuf()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->encryptkeybuf_);
  }

  if (_has_bits_[8 / 32] & 64512u) {
    // optional int32 VoipNetQuality = 6;
    if (has_voipnetquality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->voipnetquality());
    }

    // optional int32 LinkDisconnectHbInterval = 7;
    if (has_linkdisconnecthbinterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->linkdisconnecthbinterval());
    }

    // optional int32 LinkDisconnectHbCnt = 8;
    if (has_linkdisconnecthbcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->linkdisconnecthbcnt());
    }

    // optional uint32 ProtocolEncryptLength = 9;
    if (has_protocolencryptlength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocolencryptlength());
    }

    // optional uint32 OppositeClientVersion = 11;
    if (has_oppositeclientversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oppositeclientversion());
    }

    // optional int32 ARQStrategy = 13;
    if (has_arqstrategy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arqstrategy());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional int32 ARQCacheLen = 14;
    if (has_arqcachelen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arqcachelen());
    }

    // optional int32 ARQRttThreshold = 15;
    if (has_arqrttthreshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arqrttthreshold());
    }

    // optional int32 ARQUsedRateThreshold = 16;
    if (has_arqusedratethreshold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arqusedratethreshold());
    }

    // optional int32 ARQRespRateThreshold = 17;
    if (has_arqrespratethreshold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arqrespratethreshold());
    }

    // optional int32 EncryptStrategy = 18;
    if (has_encryptstrategy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->encryptstrategy());
    }

    // optional int32 FECSvrCtr = 19;
    if (has_fecsvrctr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fecsvrctr());
    }

    // optional int32 QosStrategy = 22;
    if (has_qosstrategy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qosstrategy());
    }

    // optional uint32 OppositeDeviceType = 24;
    if (has_oppositedevicetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oppositedevicetype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoipMultiRelayData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VoipMultiRelayData)
  GOOGLE_DCHECK_NE(&from, this);
  const VoipMultiRelayData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoipMultiRelayData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VoipMultiRelayData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VoipMultiRelayData)
    MergeFrom(*source);
  }
}

void VoipMultiRelayData::MergeFrom(const VoipMultiRelayData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VoipMultiRelayData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_peerid()->::micromsg::VoipRelayData::MergeFrom(from.peerid());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_capinfo()->::micromsg::VoipRelayData::MergeFrom(from.capinfo());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_voipsvraddr()->::micromsg::VoipAddrSet::MergeFrom(from.voipsvraddr());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_punchsvraddr()->::micromsg::VoipAddrSet::MergeFrom(from.punchsvraddr());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_clientheadsigns()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.clientheadsigns());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_tcpsvraddr()->::micromsg::VoipAddrSet::MergeFrom(from.tcpsvraddr());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_feckeypara1()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.feckeypara1());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_feckeypara2()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.feckeypara2());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_encryptkeybuf()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.encryptkeybuf());
    }
    if (cached_has_bits & 0x00000200u) {
      sendingtype_ = from.sendingtype_;
    }
    if (cached_has_bits & 0x00000400u) {
      voipnetquality_ = from.voipnetquality_;
    }
    if (cached_has_bits & 0x00000800u) {
      linkdisconnecthbinterval_ = from.linkdisconnecthbinterval_;
    }
    if (cached_has_bits & 0x00001000u) {
      linkdisconnecthbcnt_ = from.linkdisconnecthbcnt_;
    }
    if (cached_has_bits & 0x00002000u) {
      protocolencryptlength_ = from.protocolencryptlength_;
    }
    if (cached_has_bits & 0x00004000u) {
      oppositeclientversion_ = from.oppositeclientversion_;
    }
    if (cached_has_bits & 0x00008000u) {
      arqstrategy_ = from.arqstrategy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      arqcachelen_ = from.arqcachelen_;
    }
    if (cached_has_bits & 0x00020000u) {
      arqrttthreshold_ = from.arqrttthreshold_;
    }
    if (cached_has_bits & 0x00040000u) {
      arqusedratethreshold_ = from.arqusedratethreshold_;
    }
    if (cached_has_bits & 0x00080000u) {
      arqrespratethreshold_ = from.arqrespratethreshold_;
    }
    if (cached_has_bits & 0x00100000u) {
      encryptstrategy_ = from.encryptstrategy_;
    }
    if (cached_has_bits & 0x00200000u) {
      fecsvrctr_ = from.fecsvrctr_;
    }
    if (cached_has_bits & 0x00400000u) {
      qosstrategy_ = from.qosstrategy_;
    }
    if (cached_has_bits & 0x00800000u) {
      oppositedevicetype_ = from.oppositedevicetype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VoipMultiRelayData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VoipMultiRelayData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoipMultiRelayData::CopyFrom(const VoipMultiRelayData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VoipMultiRelayData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoipMultiRelayData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000203) != 0x00000203) return false;
  if (has_peerid()) {
    if (!this->peerid_->IsInitialized()) return false;
  }
  if (has_capinfo()) {
    if (!this->capinfo_->IsInitialized()) return false;
  }
  if (has_voipsvraddr()) {
    if (!this->voipsvraddr_->IsInitialized()) return false;
  }
  if (has_punchsvraddr()) {
    if (!this->punchsvraddr_->IsInitialized()) return false;
  }
  if (has_clientheadsigns()) {
    if (!this->clientheadsigns_->IsInitialized()) return false;
  }
  if (has_tcpsvraddr()) {
    if (!this->tcpsvraddr_->IsInitialized()) return false;
  }
  if (has_feckeypara1()) {
    if (!this->feckeypara1_->IsInitialized()) return false;
  }
  if (has_feckeypara2()) {
    if (!this->feckeypara2_->IsInitialized()) return false;
  }
  if (has_encryptkeybuf()) {
    if (!this->encryptkeybuf_->IsInitialized()) return false;
  }
  return true;
}

void VoipMultiRelayData::Swap(VoipMultiRelayData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoipMultiRelayData::InternalSwap(VoipMultiRelayData* other) {
  std::swap(peerid_, other->peerid_);
  std::swap(capinfo_, other->capinfo_);
  std::swap(voipsvraddr_, other->voipsvraddr_);
  std::swap(punchsvraddr_, other->punchsvraddr_);
  std::swap(clientheadsigns_, other->clientheadsigns_);
  std::swap(tcpsvraddr_, other->tcpsvraddr_);
  std::swap(feckeypara1_, other->feckeypara1_);
  std::swap(feckeypara2_, other->feckeypara2_);
  std::swap(encryptkeybuf_, other->encryptkeybuf_);
  std::swap(sendingtype_, other->sendingtype_);
  std::swap(voipnetquality_, other->voipnetquality_);
  std::swap(linkdisconnecthbinterval_, other->linkdisconnecthbinterval_);
  std::swap(linkdisconnecthbcnt_, other->linkdisconnecthbcnt_);
  std::swap(protocolencryptlength_, other->protocolencryptlength_);
  std::swap(oppositeclientversion_, other->oppositeclientversion_);
  std::swap(arqstrategy_, other->arqstrategy_);
  std::swap(arqcachelen_, other->arqcachelen_);
  std::swap(arqrttthreshold_, other->arqrttthreshold_);
  std::swap(arqusedratethreshold_, other->arqusedratethreshold_);
  std::swap(arqrespratethreshold_, other->arqrespratethreshold_);
  std::swap(encryptstrategy_, other->encryptstrategy_);
  std::swap(fecsvrctr_, other->fecsvrctr_);
  std::swap(qosstrategy_, other->qosstrategy_);
  std::swap(oppositedevicetype_, other->oppositedevicetype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoipMultiRelayData::GetMetadata() const {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoipMultiRelayData

// required .micromsg.VoipRelayData PeerId = 1;
bool VoipMultiRelayData::has_peerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoipMultiRelayData::set_has_peerid() {
  _has_bits_[0] |= 0x00000001u;
}
void VoipMultiRelayData::clear_has_peerid() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoipMultiRelayData::clear_peerid() {
  if (peerid_ != NULL) peerid_->::micromsg::VoipRelayData::Clear();
  clear_has_peerid();
}
const ::micromsg::VoipRelayData& VoipMultiRelayData::peerid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipMultiRelayData.PeerId)
  return peerid_ != NULL ? *peerid_
                         : *::micromsg::VoipRelayData::internal_default_instance();
}
::micromsg::VoipRelayData* VoipMultiRelayData::mutable_peerid() {
  set_has_peerid();
  if (peerid_ == NULL) {
    peerid_ = new ::micromsg::VoipRelayData;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipMultiRelayData.PeerId)
  return peerid_;
}
::micromsg::VoipRelayData* VoipMultiRelayData::release_peerid() {
  // @@protoc_insertion_point(field_release:micromsg.VoipMultiRelayData.PeerId)
  clear_has_peerid();
  ::micromsg::VoipRelayData* temp = peerid_;
  peerid_ = NULL;
  return temp;
}
void VoipMultiRelayData::set_allocated_peerid(::micromsg::VoipRelayData* peerid) {
  delete peerid_;
  peerid_ = peerid;
  if (peerid) {
    set_has_peerid();
  } else {
    clear_has_peerid();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipMultiRelayData.PeerId)
}

// required .micromsg.VoipRelayData CapInfo = 2;
bool VoipMultiRelayData::has_capinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VoipMultiRelayData::set_has_capinfo() {
  _has_bits_[0] |= 0x00000002u;
}
void VoipMultiRelayData::clear_has_capinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
void VoipMultiRelayData::clear_capinfo() {
  if (capinfo_ != NULL) capinfo_->::micromsg::VoipRelayData::Clear();
  clear_has_capinfo();
}
const ::micromsg::VoipRelayData& VoipMultiRelayData::capinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipMultiRelayData.CapInfo)
  return capinfo_ != NULL ? *capinfo_
                         : *::micromsg::VoipRelayData::internal_default_instance();
}
::micromsg::VoipRelayData* VoipMultiRelayData::mutable_capinfo() {
  set_has_capinfo();
  if (capinfo_ == NULL) {
    capinfo_ = new ::micromsg::VoipRelayData;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipMultiRelayData.CapInfo)
  return capinfo_;
}
::micromsg::VoipRelayData* VoipMultiRelayData::release_capinfo() {
  // @@protoc_insertion_point(field_release:micromsg.VoipMultiRelayData.CapInfo)
  clear_has_capinfo();
  ::micromsg::VoipRelayData* temp = capinfo_;
  capinfo_ = NULL;
  return temp;
}
void VoipMultiRelayData::set_allocated_capinfo(::micromsg::VoipRelayData* capinfo) {
  delete capinfo_;
  capinfo_ = capinfo;
  if (capinfo) {
    set_has_capinfo();
  } else {
    clear_has_capinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipMultiRelayData.CapInfo)
}

// required int32 SendingType = 3;
bool VoipMultiRelayData::has_sendingtype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void VoipMultiRelayData::set_has_sendingtype() {
  _has_bits_[0] |= 0x00000200u;
}
void VoipMultiRelayData::clear_has_sendingtype() {
  _has_bits_[0] &= ~0x00000200u;
}
void VoipMultiRelayData::clear_sendingtype() {
  sendingtype_ = 0;
  clear_has_sendingtype();
}
::google::protobuf::int32 VoipMultiRelayData::sendingtype() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipMultiRelayData.SendingType)
  return sendingtype_;
}
void VoipMultiRelayData::set_sendingtype(::google::protobuf::int32 value) {
  set_has_sendingtype();
  sendingtype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipMultiRelayData.SendingType)
}

// optional .micromsg.VoipAddrSet VoipSvrAddr = 4;
bool VoipMultiRelayData::has_voipsvraddr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VoipMultiRelayData::set_has_voipsvraddr() {
  _has_bits_[0] |= 0x00000004u;
}
void VoipMultiRelayData::clear_has_voipsvraddr() {
  _has_bits_[0] &= ~0x00000004u;
}
void VoipMultiRelayData::clear_voipsvraddr() {
  if (voipsvraddr_ != NULL) voipsvraddr_->::micromsg::VoipAddrSet::Clear();
  clear_has_voipsvraddr();
}
const ::micromsg::VoipAddrSet& VoipMultiRelayData::voipsvraddr() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipMultiRelayData.VoipSvrAddr)
  return voipsvraddr_ != NULL ? *voipsvraddr_
                         : *::micromsg::VoipAddrSet::internal_default_instance();
}
::micromsg::VoipAddrSet* VoipMultiRelayData::mutable_voipsvraddr() {
  set_has_voipsvraddr();
  if (voipsvraddr_ == NULL) {
    voipsvraddr_ = new ::micromsg::VoipAddrSet;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipMultiRelayData.VoipSvrAddr)
  return voipsvraddr_;
}
::micromsg::VoipAddrSet* VoipMultiRelayData::release_voipsvraddr() {
  // @@protoc_insertion_point(field_release:micromsg.VoipMultiRelayData.VoipSvrAddr)
  clear_has_voipsvraddr();
  ::micromsg::VoipAddrSet* temp = voipsvraddr_;
  voipsvraddr_ = NULL;
  return temp;
}
void VoipMultiRelayData::set_allocated_voipsvraddr(::micromsg::VoipAddrSet* voipsvraddr) {
  delete voipsvraddr_;
  voipsvraddr_ = voipsvraddr;
  if (voipsvraddr) {
    set_has_voipsvraddr();
  } else {
    clear_has_voipsvraddr();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipMultiRelayData.VoipSvrAddr)
}

// optional .micromsg.VoipAddrSet PunchSvrAddr = 5;
bool VoipMultiRelayData::has_punchsvraddr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VoipMultiRelayData::set_has_punchsvraddr() {
  _has_bits_[0] |= 0x00000008u;
}
void VoipMultiRelayData::clear_has_punchsvraddr() {
  _has_bits_[0] &= ~0x00000008u;
}
void VoipMultiRelayData::clear_punchsvraddr() {
  if (punchsvraddr_ != NULL) punchsvraddr_->::micromsg::VoipAddrSet::Clear();
  clear_has_punchsvraddr();
}
const ::micromsg::VoipAddrSet& VoipMultiRelayData::punchsvraddr() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipMultiRelayData.PunchSvrAddr)
  return punchsvraddr_ != NULL ? *punchsvraddr_
                         : *::micromsg::VoipAddrSet::internal_default_instance();
}
::micromsg::VoipAddrSet* VoipMultiRelayData::mutable_punchsvraddr() {
  set_has_punchsvraddr();
  if (punchsvraddr_ == NULL) {
    punchsvraddr_ = new ::micromsg::VoipAddrSet;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipMultiRelayData.PunchSvrAddr)
  return punchsvraddr_;
}
::micromsg::VoipAddrSet* VoipMultiRelayData::release_punchsvraddr() {
  // @@protoc_insertion_point(field_release:micromsg.VoipMultiRelayData.PunchSvrAddr)
  clear_has_punchsvraddr();
  ::micromsg::VoipAddrSet* temp = punchsvraddr_;
  punchsvraddr_ = NULL;
  return temp;
}
void VoipMultiRelayData::set_allocated_punchsvraddr(::micromsg::VoipAddrSet* punchsvraddr) {
  delete punchsvraddr_;
  punchsvraddr_ = punchsvraddr;
  if (punchsvraddr) {
    set_has_punchsvraddr();
  } else {
    clear_has_punchsvraddr();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipMultiRelayData.PunchSvrAddr)
}

// optional int32 VoipNetQuality = 6;
bool VoipMultiRelayData::has_voipnetquality() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void VoipMultiRelayData::set_has_voipnetquality() {
  _has_bits_[0] |= 0x00000400u;
}
void VoipMultiRelayData::clear_has_voipnetquality() {
  _has_bits_[0] &= ~0x00000400u;
}
void VoipMultiRelayData::clear_voipnetquality() {
  voipnetquality_ = 0;
  clear_has_voipnetquality();
}
::google::protobuf::int32 VoipMultiRelayData::voipnetquality() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipMultiRelayData.VoipNetQuality)
  return voipnetquality_;
}
void VoipMultiRelayData::set_voipnetquality(::google::protobuf::int32 value) {
  set_has_voipnetquality();
  voipnetquality_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipMultiRelayData.VoipNetQuality)
}

// optional int32 LinkDisconnectHbInterval = 7;
bool VoipMultiRelayData::has_linkdisconnecthbinterval() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void VoipMultiRelayData::set_has_linkdisconnecthbinterval() {
  _has_bits_[0] |= 0x00000800u;
}
void VoipMultiRelayData::clear_has_linkdisconnecthbinterval() {
  _has_bits_[0] &= ~0x00000800u;
}
void VoipMultiRelayData::clear_linkdisconnecthbinterval() {
  linkdisconnecthbinterval_ = 0;
  clear_has_linkdisconnecthbinterval();
}
::google::protobuf::int32 VoipMultiRelayData::linkdisconnecthbinterval() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipMultiRelayData.LinkDisconnectHbInterval)
  return linkdisconnecthbinterval_;
}
void VoipMultiRelayData::set_linkdisconnecthbinterval(::google::protobuf::int32 value) {
  set_has_linkdisconnecthbinterval();
  linkdisconnecthbinterval_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipMultiRelayData.LinkDisconnectHbInterval)
}

// optional int32 LinkDisconnectHbCnt = 8;
bool VoipMultiRelayData::has_linkdisconnecthbcnt() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void VoipMultiRelayData::set_has_linkdisconnecthbcnt() {
  _has_bits_[0] |= 0x00001000u;
}
void VoipMultiRelayData::clear_has_linkdisconnecthbcnt() {
  _has_bits_[0] &= ~0x00001000u;
}
void VoipMultiRelayData::clear_linkdisconnecthbcnt() {
  linkdisconnecthbcnt_ = 0;
  clear_has_linkdisconnecthbcnt();
}
::google::protobuf::int32 VoipMultiRelayData::linkdisconnecthbcnt() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipMultiRelayData.LinkDisconnectHbCnt)
  return linkdisconnecthbcnt_;
}
void VoipMultiRelayData::set_linkdisconnecthbcnt(::google::protobuf::int32 value) {
  set_has_linkdisconnecthbcnt();
  linkdisconnecthbcnt_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipMultiRelayData.LinkDisconnectHbCnt)
}

// optional uint32 ProtocolEncryptLength = 9;
bool VoipMultiRelayData::has_protocolencryptlength() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void VoipMultiRelayData::set_has_protocolencryptlength() {
  _has_bits_[0] |= 0x00002000u;
}
void VoipMultiRelayData::clear_has_protocolencryptlength() {
  _has_bits_[0] &= ~0x00002000u;
}
void VoipMultiRelayData::clear_protocolencryptlength() {
  protocolencryptlength_ = 0u;
  clear_has_protocolencryptlength();
}
::google::protobuf::uint32 VoipMultiRelayData::protocolencryptlength() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipMultiRelayData.ProtocolEncryptLength)
  return protocolencryptlength_;
}
void VoipMultiRelayData::set_protocolencryptlength(::google::protobuf::uint32 value) {
  set_has_protocolencryptlength();
  protocolencryptlength_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipMultiRelayData.ProtocolEncryptLength)
}

// optional .micromsg.SKBuiltinBuffer_t ClientHeadSigns = 10;
bool VoipMultiRelayData::has_clientheadsigns() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VoipMultiRelayData::set_has_clientheadsigns() {
  _has_bits_[0] |= 0x00000010u;
}
void VoipMultiRelayData::clear_has_clientheadsigns() {
  _has_bits_[0] &= ~0x00000010u;
}
void VoipMultiRelayData::clear_clientheadsigns() {
  if (clientheadsigns_ != NULL) clientheadsigns_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_clientheadsigns();
}
const ::micromsg::SKBuiltinBuffer_t& VoipMultiRelayData::clientheadsigns() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipMultiRelayData.ClientHeadSigns)
  return clientheadsigns_ != NULL ? *clientheadsigns_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* VoipMultiRelayData::mutable_clientheadsigns() {
  set_has_clientheadsigns();
  if (clientheadsigns_ == NULL) {
    clientheadsigns_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipMultiRelayData.ClientHeadSigns)
  return clientheadsigns_;
}
::micromsg::SKBuiltinBuffer_t* VoipMultiRelayData::release_clientheadsigns() {
  // @@protoc_insertion_point(field_release:micromsg.VoipMultiRelayData.ClientHeadSigns)
  clear_has_clientheadsigns();
  ::micromsg::SKBuiltinBuffer_t* temp = clientheadsigns_;
  clientheadsigns_ = NULL;
  return temp;
}
void VoipMultiRelayData::set_allocated_clientheadsigns(::micromsg::SKBuiltinBuffer_t* clientheadsigns) {
  delete clientheadsigns_;
  clientheadsigns_ = clientheadsigns;
  if (clientheadsigns) {
    set_has_clientheadsigns();
  } else {
    clear_has_clientheadsigns();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipMultiRelayData.ClientHeadSigns)
}

// optional uint32 OppositeClientVersion = 11;
bool VoipMultiRelayData::has_oppositeclientversion() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void VoipMultiRelayData::set_has_oppositeclientversion() {
  _has_bits_[0] |= 0x00004000u;
}
void VoipMultiRelayData::clear_has_oppositeclientversion() {
  _has_bits_[0] &= ~0x00004000u;
}
void VoipMultiRelayData::clear_oppositeclientversion() {
  oppositeclientversion_ = 0u;
  clear_has_oppositeclientversion();
}
::google::protobuf::uint32 VoipMultiRelayData::oppositeclientversion() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipMultiRelayData.OppositeClientVersion)
  return oppositeclientversion_;
}
void VoipMultiRelayData::set_oppositeclientversion(::google::protobuf::uint32 value) {
  set_has_oppositeclientversion();
  oppositeclientversion_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipMultiRelayData.OppositeClientVersion)
}

// optional .micromsg.VoipAddrSet TcpSvrAddr = 12;
bool VoipMultiRelayData::has_tcpsvraddr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VoipMultiRelayData::set_has_tcpsvraddr() {
  _has_bits_[0] |= 0x00000020u;
}
void VoipMultiRelayData::clear_has_tcpsvraddr() {
  _has_bits_[0] &= ~0x00000020u;
}
void VoipMultiRelayData::clear_tcpsvraddr() {
  if (tcpsvraddr_ != NULL) tcpsvraddr_->::micromsg::VoipAddrSet::Clear();
  clear_has_tcpsvraddr();
}
const ::micromsg::VoipAddrSet& VoipMultiRelayData::tcpsvraddr() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipMultiRelayData.TcpSvrAddr)
  return tcpsvraddr_ != NULL ? *tcpsvraddr_
                         : *::micromsg::VoipAddrSet::internal_default_instance();
}
::micromsg::VoipAddrSet* VoipMultiRelayData::mutable_tcpsvraddr() {
  set_has_tcpsvraddr();
  if (tcpsvraddr_ == NULL) {
    tcpsvraddr_ = new ::micromsg::VoipAddrSet;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipMultiRelayData.TcpSvrAddr)
  return tcpsvraddr_;
}
::micromsg::VoipAddrSet* VoipMultiRelayData::release_tcpsvraddr() {
  // @@protoc_insertion_point(field_release:micromsg.VoipMultiRelayData.TcpSvrAddr)
  clear_has_tcpsvraddr();
  ::micromsg::VoipAddrSet* temp = tcpsvraddr_;
  tcpsvraddr_ = NULL;
  return temp;
}
void VoipMultiRelayData::set_allocated_tcpsvraddr(::micromsg::VoipAddrSet* tcpsvraddr) {
  delete tcpsvraddr_;
  tcpsvraddr_ = tcpsvraddr;
  if (tcpsvraddr) {
    set_has_tcpsvraddr();
  } else {
    clear_has_tcpsvraddr();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipMultiRelayData.TcpSvrAddr)
}

// optional int32 ARQStrategy = 13;
bool VoipMultiRelayData::has_arqstrategy() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void VoipMultiRelayData::set_has_arqstrategy() {
  _has_bits_[0] |= 0x00008000u;
}
void VoipMultiRelayData::clear_has_arqstrategy() {
  _has_bits_[0] &= ~0x00008000u;
}
void VoipMultiRelayData::clear_arqstrategy() {
  arqstrategy_ = 0;
  clear_has_arqstrategy();
}
::google::protobuf::int32 VoipMultiRelayData::arqstrategy() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipMultiRelayData.ARQStrategy)
  return arqstrategy_;
}
void VoipMultiRelayData::set_arqstrategy(::google::protobuf::int32 value) {
  set_has_arqstrategy();
  arqstrategy_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipMultiRelayData.ARQStrategy)
}

// optional int32 ARQCacheLen = 14;
bool VoipMultiRelayData::has_arqcachelen() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void VoipMultiRelayData::set_has_arqcachelen() {
  _has_bits_[0] |= 0x00010000u;
}
void VoipMultiRelayData::clear_has_arqcachelen() {
  _has_bits_[0] &= ~0x00010000u;
}
void VoipMultiRelayData::clear_arqcachelen() {
  arqcachelen_ = 0;
  clear_has_arqcachelen();
}
::google::protobuf::int32 VoipMultiRelayData::arqcachelen() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipMultiRelayData.ARQCacheLen)
  return arqcachelen_;
}
void VoipMultiRelayData::set_arqcachelen(::google::protobuf::int32 value) {
  set_has_arqcachelen();
  arqcachelen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipMultiRelayData.ARQCacheLen)
}

// optional int32 ARQRttThreshold = 15;
bool VoipMultiRelayData::has_arqrttthreshold() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void VoipMultiRelayData::set_has_arqrttthreshold() {
  _has_bits_[0] |= 0x00020000u;
}
void VoipMultiRelayData::clear_has_arqrttthreshold() {
  _has_bits_[0] &= ~0x00020000u;
}
void VoipMultiRelayData::clear_arqrttthreshold() {
  arqrttthreshold_ = 0;
  clear_has_arqrttthreshold();
}
::google::protobuf::int32 VoipMultiRelayData::arqrttthreshold() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipMultiRelayData.ARQRttThreshold)
  return arqrttthreshold_;
}
void VoipMultiRelayData::set_arqrttthreshold(::google::protobuf::int32 value) {
  set_has_arqrttthreshold();
  arqrttthreshold_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipMultiRelayData.ARQRttThreshold)
}

// optional int32 ARQUsedRateThreshold = 16;
bool VoipMultiRelayData::has_arqusedratethreshold() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void VoipMultiRelayData::set_has_arqusedratethreshold() {
  _has_bits_[0] |= 0x00040000u;
}
void VoipMultiRelayData::clear_has_arqusedratethreshold() {
  _has_bits_[0] &= ~0x00040000u;
}
void VoipMultiRelayData::clear_arqusedratethreshold() {
  arqusedratethreshold_ = 0;
  clear_has_arqusedratethreshold();
}
::google::protobuf::int32 VoipMultiRelayData::arqusedratethreshold() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipMultiRelayData.ARQUsedRateThreshold)
  return arqusedratethreshold_;
}
void VoipMultiRelayData::set_arqusedratethreshold(::google::protobuf::int32 value) {
  set_has_arqusedratethreshold();
  arqusedratethreshold_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipMultiRelayData.ARQUsedRateThreshold)
}

// optional int32 ARQRespRateThreshold = 17;
bool VoipMultiRelayData::has_arqrespratethreshold() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void VoipMultiRelayData::set_has_arqrespratethreshold() {
  _has_bits_[0] |= 0x00080000u;
}
void VoipMultiRelayData::clear_has_arqrespratethreshold() {
  _has_bits_[0] &= ~0x00080000u;
}
void VoipMultiRelayData::clear_arqrespratethreshold() {
  arqrespratethreshold_ = 0;
  clear_has_arqrespratethreshold();
}
::google::protobuf::int32 VoipMultiRelayData::arqrespratethreshold() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipMultiRelayData.ARQRespRateThreshold)
  return arqrespratethreshold_;
}
void VoipMultiRelayData::set_arqrespratethreshold(::google::protobuf::int32 value) {
  set_has_arqrespratethreshold();
  arqrespratethreshold_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipMultiRelayData.ARQRespRateThreshold)
}

// optional int32 EncryptStrategy = 18;
bool VoipMultiRelayData::has_encryptstrategy() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void VoipMultiRelayData::set_has_encryptstrategy() {
  _has_bits_[0] |= 0x00100000u;
}
void VoipMultiRelayData::clear_has_encryptstrategy() {
  _has_bits_[0] &= ~0x00100000u;
}
void VoipMultiRelayData::clear_encryptstrategy() {
  encryptstrategy_ = 0;
  clear_has_encryptstrategy();
}
::google::protobuf::int32 VoipMultiRelayData::encryptstrategy() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipMultiRelayData.EncryptStrategy)
  return encryptstrategy_;
}
void VoipMultiRelayData::set_encryptstrategy(::google::protobuf::int32 value) {
  set_has_encryptstrategy();
  encryptstrategy_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipMultiRelayData.EncryptStrategy)
}

// optional int32 FECSvrCtr = 19;
bool VoipMultiRelayData::has_fecsvrctr() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void VoipMultiRelayData::set_has_fecsvrctr() {
  _has_bits_[0] |= 0x00200000u;
}
void VoipMultiRelayData::clear_has_fecsvrctr() {
  _has_bits_[0] &= ~0x00200000u;
}
void VoipMultiRelayData::clear_fecsvrctr() {
  fecsvrctr_ = 0;
  clear_has_fecsvrctr();
}
::google::protobuf::int32 VoipMultiRelayData::fecsvrctr() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipMultiRelayData.FECSvrCtr)
  return fecsvrctr_;
}
void VoipMultiRelayData::set_fecsvrctr(::google::protobuf::int32 value) {
  set_has_fecsvrctr();
  fecsvrctr_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipMultiRelayData.FECSvrCtr)
}

// optional .micromsg.SKBuiltinBuffer_t FECKeyPara1 = 20;
bool VoipMultiRelayData::has_feckeypara1() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VoipMultiRelayData::set_has_feckeypara1() {
  _has_bits_[0] |= 0x00000040u;
}
void VoipMultiRelayData::clear_has_feckeypara1() {
  _has_bits_[0] &= ~0x00000040u;
}
void VoipMultiRelayData::clear_feckeypara1() {
  if (feckeypara1_ != NULL) feckeypara1_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_feckeypara1();
}
const ::micromsg::SKBuiltinBuffer_t& VoipMultiRelayData::feckeypara1() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipMultiRelayData.FECKeyPara1)
  return feckeypara1_ != NULL ? *feckeypara1_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* VoipMultiRelayData::mutable_feckeypara1() {
  set_has_feckeypara1();
  if (feckeypara1_ == NULL) {
    feckeypara1_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipMultiRelayData.FECKeyPara1)
  return feckeypara1_;
}
::micromsg::SKBuiltinBuffer_t* VoipMultiRelayData::release_feckeypara1() {
  // @@protoc_insertion_point(field_release:micromsg.VoipMultiRelayData.FECKeyPara1)
  clear_has_feckeypara1();
  ::micromsg::SKBuiltinBuffer_t* temp = feckeypara1_;
  feckeypara1_ = NULL;
  return temp;
}
void VoipMultiRelayData::set_allocated_feckeypara1(::micromsg::SKBuiltinBuffer_t* feckeypara1) {
  delete feckeypara1_;
  feckeypara1_ = feckeypara1;
  if (feckeypara1) {
    set_has_feckeypara1();
  } else {
    clear_has_feckeypara1();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipMultiRelayData.FECKeyPara1)
}

// optional .micromsg.SKBuiltinBuffer_t FECKeyPara2 = 21;
bool VoipMultiRelayData::has_feckeypara2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VoipMultiRelayData::set_has_feckeypara2() {
  _has_bits_[0] |= 0x00000080u;
}
void VoipMultiRelayData::clear_has_feckeypara2() {
  _has_bits_[0] &= ~0x00000080u;
}
void VoipMultiRelayData::clear_feckeypara2() {
  if (feckeypara2_ != NULL) feckeypara2_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_feckeypara2();
}
const ::micromsg::SKBuiltinBuffer_t& VoipMultiRelayData::feckeypara2() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipMultiRelayData.FECKeyPara2)
  return feckeypara2_ != NULL ? *feckeypara2_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* VoipMultiRelayData::mutable_feckeypara2() {
  set_has_feckeypara2();
  if (feckeypara2_ == NULL) {
    feckeypara2_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipMultiRelayData.FECKeyPara2)
  return feckeypara2_;
}
::micromsg::SKBuiltinBuffer_t* VoipMultiRelayData::release_feckeypara2() {
  // @@protoc_insertion_point(field_release:micromsg.VoipMultiRelayData.FECKeyPara2)
  clear_has_feckeypara2();
  ::micromsg::SKBuiltinBuffer_t* temp = feckeypara2_;
  feckeypara2_ = NULL;
  return temp;
}
void VoipMultiRelayData::set_allocated_feckeypara2(::micromsg::SKBuiltinBuffer_t* feckeypara2) {
  delete feckeypara2_;
  feckeypara2_ = feckeypara2;
  if (feckeypara2) {
    set_has_feckeypara2();
  } else {
    clear_has_feckeypara2();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipMultiRelayData.FECKeyPara2)
}

// optional int32 QosStrategy = 22;
bool VoipMultiRelayData::has_qosstrategy() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void VoipMultiRelayData::set_has_qosstrategy() {
  _has_bits_[0] |= 0x00400000u;
}
void VoipMultiRelayData::clear_has_qosstrategy() {
  _has_bits_[0] &= ~0x00400000u;
}
void VoipMultiRelayData::clear_qosstrategy() {
  qosstrategy_ = 0;
  clear_has_qosstrategy();
}
::google::protobuf::int32 VoipMultiRelayData::qosstrategy() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipMultiRelayData.QosStrategy)
  return qosstrategy_;
}
void VoipMultiRelayData::set_qosstrategy(::google::protobuf::int32 value) {
  set_has_qosstrategy();
  qosstrategy_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipMultiRelayData.QosStrategy)
}

// optional .micromsg.SKBuiltinBuffer_t EncryptKeyBuf = 23;
bool VoipMultiRelayData::has_encryptkeybuf() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void VoipMultiRelayData::set_has_encryptkeybuf() {
  _has_bits_[0] |= 0x00000100u;
}
void VoipMultiRelayData::clear_has_encryptkeybuf() {
  _has_bits_[0] &= ~0x00000100u;
}
void VoipMultiRelayData::clear_encryptkeybuf() {
  if (encryptkeybuf_ != NULL) encryptkeybuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_encryptkeybuf();
}
const ::micromsg::SKBuiltinBuffer_t& VoipMultiRelayData::encryptkeybuf() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipMultiRelayData.EncryptKeyBuf)
  return encryptkeybuf_ != NULL ? *encryptkeybuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* VoipMultiRelayData::mutable_encryptkeybuf() {
  set_has_encryptkeybuf();
  if (encryptkeybuf_ == NULL) {
    encryptkeybuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipMultiRelayData.EncryptKeyBuf)
  return encryptkeybuf_;
}
::micromsg::SKBuiltinBuffer_t* VoipMultiRelayData::release_encryptkeybuf() {
  // @@protoc_insertion_point(field_release:micromsg.VoipMultiRelayData.EncryptKeyBuf)
  clear_has_encryptkeybuf();
  ::micromsg::SKBuiltinBuffer_t* temp = encryptkeybuf_;
  encryptkeybuf_ = NULL;
  return temp;
}
void VoipMultiRelayData::set_allocated_encryptkeybuf(::micromsg::SKBuiltinBuffer_t* encryptkeybuf) {
  delete encryptkeybuf_;
  encryptkeybuf_ = encryptkeybuf;
  if (encryptkeybuf) {
    set_has_encryptkeybuf();
  } else {
    clear_has_encryptkeybuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipMultiRelayData.EncryptKeyBuf)
}

// optional uint32 OppositeDeviceType = 24;
bool VoipMultiRelayData::has_oppositedevicetype() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void VoipMultiRelayData::set_has_oppositedevicetype() {
  _has_bits_[0] |= 0x00800000u;
}
void VoipMultiRelayData::clear_has_oppositedevicetype() {
  _has_bits_[0] &= ~0x00800000u;
}
void VoipMultiRelayData::clear_oppositedevicetype() {
  oppositedevicetype_ = 0u;
  clear_has_oppositedevicetype();
}
::google::protobuf::uint32 VoipMultiRelayData::oppositedevicetype() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipMultiRelayData.OppositeDeviceType)
  return oppositedevicetype_;
}
void VoipMultiRelayData::set_oppositedevicetype(::google::protobuf::uint32 value) {
  set_has_oppositedevicetype();
  oppositedevicetype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipMultiRelayData.OppositeDeviceType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoipStatReportData::kStatReportFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoipStatReportData::VoipStatReportData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VoipStatReportData)
}
VoipStatReportData::VoipStatReportData(const VoipStatReportData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_statreport()) {
    statreport_ = new ::micromsg::SKBuiltinString_t(*from.statreport_);
  } else {
    statreport_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.VoipStatReportData)
}

void VoipStatReportData::SharedCtor() {
  _cached_size_ = 0;
  statreport_ = NULL;
}

VoipStatReportData::~VoipStatReportData() {
  // @@protoc_insertion_point(destructor:micromsg.VoipStatReportData)
  SharedDtor();
}

void VoipStatReportData::SharedDtor() {
  if (this != internal_default_instance()) {
    delete statreport_;
  }
}

void VoipStatReportData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoipStatReportData::descriptor() {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoipStatReportData& VoipStatReportData::default_instance() {
  protobuf_mmvoip_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoipStatReportData* VoipStatReportData::New(::google::protobuf::Arena* arena) const {
  VoipStatReportData* n = new VoipStatReportData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoipStatReportData::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VoipStatReportData)
  if (has_statreport()) {
    GOOGLE_DCHECK(statreport_ != NULL);
    statreport_->::micromsg::SKBuiltinString_t::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoipStatReportData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VoipStatReportData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.SKBuiltinString_t StatReport = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statreport()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VoipStatReportData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VoipStatReportData)
  return false;
#undef DO_
}

void VoipStatReportData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VoipStatReportData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t StatReport = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->statreport_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VoipStatReportData)
}

::google::protobuf::uint8* VoipStatReportData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VoipStatReportData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t StatReport = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->statreport_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VoipStatReportData)
  return target;
}

size_t VoipStatReportData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VoipStatReportData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.SKBuiltinString_t StatReport = 1;
  if (has_statreport()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->statreport_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoipStatReportData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VoipStatReportData)
  GOOGLE_DCHECK_NE(&from, this);
  const VoipStatReportData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoipStatReportData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VoipStatReportData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VoipStatReportData)
    MergeFrom(*source);
  }
}

void VoipStatReportData::MergeFrom(const VoipStatReportData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VoipStatReportData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_statreport()) {
    mutable_statreport()->::micromsg::SKBuiltinString_t::MergeFrom(from.statreport());
  }
}

void VoipStatReportData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VoipStatReportData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoipStatReportData::CopyFrom(const VoipStatReportData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VoipStatReportData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoipStatReportData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void VoipStatReportData::Swap(VoipStatReportData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoipStatReportData::InternalSwap(VoipStatReportData* other) {
  std::swap(statreport_, other->statreport_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoipStatReportData::GetMetadata() const {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoipStatReportData

// required .micromsg.SKBuiltinString_t StatReport = 1;
bool VoipStatReportData::has_statreport() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoipStatReportData::set_has_statreport() {
  _has_bits_[0] |= 0x00000001u;
}
void VoipStatReportData::clear_has_statreport() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoipStatReportData::clear_statreport() {
  if (statreport_ != NULL) statreport_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_statreport();
}
const ::micromsg::SKBuiltinString_t& VoipStatReportData::statreport() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipStatReportData.StatReport)
  return statreport_ != NULL ? *statreport_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* VoipStatReportData::mutable_statreport() {
  set_has_statreport();
  if (statreport_ == NULL) {
    statreport_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipStatReportData.StatReport)
  return statreport_;
}
::micromsg::SKBuiltinString_t* VoipStatReportData::release_statreport() {
  // @@protoc_insertion_point(field_release:micromsg.VoipStatReportData.StatReport)
  clear_has_statreport();
  ::micromsg::SKBuiltinString_t* temp = statreport_;
  statreport_ = NULL;
  return temp;
}
void VoipStatReportData::set_allocated_statreport(::micromsg::SKBuiltinString_t* statreport) {
  delete statreport_;
  statreport_ = statreport;
  if (statreport) {
    set_has_statreport();
  } else {
    clear_has_statreport();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipStatReportData.StatReport)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoipNetQuality::kTypeFieldNumber;
const int VoipNetQuality::kBeginFieldNumber;
const int VoipNetQuality::kEndFieldNumber;
const int VoipNetQuality::kHitCntFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoipNetQuality::VoipNetQuality()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VoipNetQuality)
}
VoipNetQuality::VoipNetQuality(const VoipNetQuality& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&hitcnt_) -
    reinterpret_cast<char*>(&type_) + sizeof(hitcnt_));
  // @@protoc_insertion_point(copy_constructor:micromsg.VoipNetQuality)
}

void VoipNetQuality::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&type_, 0, reinterpret_cast<char*>(&hitcnt_) -
    reinterpret_cast<char*>(&type_) + sizeof(hitcnt_));
}

VoipNetQuality::~VoipNetQuality() {
  // @@protoc_insertion_point(destructor:micromsg.VoipNetQuality)
  SharedDtor();
}

void VoipNetQuality::SharedDtor() {
}

void VoipNetQuality::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoipNetQuality::descriptor() {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoipNetQuality& VoipNetQuality::default_instance() {
  protobuf_mmvoip_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoipNetQuality* VoipNetQuality::New(::google::protobuf::Arena* arena) const {
  VoipNetQuality* n = new VoipNetQuality;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoipNetQuality::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VoipNetQuality)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&type_, 0, reinterpret_cast<char*>(&hitcnt_) -
      reinterpret_cast<char*>(&type_) + sizeof(hitcnt_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoipNetQuality::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VoipNetQuality)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Begin = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_begin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &begin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 End = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_end();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 HitCnt = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_hitcnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hitcnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VoipNetQuality)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VoipNetQuality)
  return false;
#undef DO_
}

void VoipNetQuality::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VoipNetQuality)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 Begin = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->begin(), output);
  }

  // required int32 End = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->end(), output);
  }

  // required int32 HitCnt = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hitcnt(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VoipNetQuality)
}

::google::protobuf::uint8* VoipNetQuality::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VoipNetQuality)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 Begin = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->begin(), target);
  }

  // required int32 End = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->end(), target);
  }

  // required int32 HitCnt = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hitcnt(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VoipNetQuality)
  return target;
}

size_t VoipNetQuality::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.VoipNetQuality)
  size_t total_size = 0;

  if (has_type()) {
    // required int32 Type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_begin()) {
    // required int32 Begin = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->begin());
  }

  if (has_end()) {
    // required int32 End = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->end());
  }

  if (has_hitcnt()) {
    // required int32 HitCnt = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hitcnt());
  }

  return total_size;
}
size_t VoipNetQuality::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VoipNetQuality)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 Type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 Begin = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->begin());

    // required int32 End = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->end());

    // required int32 HitCnt = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hitcnt());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoipNetQuality::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VoipNetQuality)
  GOOGLE_DCHECK_NE(&from, this);
  const VoipNetQuality* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoipNetQuality>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VoipNetQuality)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VoipNetQuality)
    MergeFrom(*source);
  }
}

void VoipNetQuality::MergeFrom(const VoipNetQuality& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VoipNetQuality)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      begin_ = from.begin_;
    }
    if (cached_has_bits & 0x00000004u) {
      end_ = from.end_;
    }
    if (cached_has_bits & 0x00000008u) {
      hitcnt_ = from.hitcnt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VoipNetQuality::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VoipNetQuality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoipNetQuality::CopyFrom(const VoipNetQuality& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VoipNetQuality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoipNetQuality::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void VoipNetQuality::Swap(VoipNetQuality* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoipNetQuality::InternalSwap(VoipNetQuality* other) {
  std::swap(type_, other->type_);
  std::swap(begin_, other->begin_);
  std::swap(end_, other->end_);
  std::swap(hitcnt_, other->hitcnt_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoipNetQuality::GetMetadata() const {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoipNetQuality

// required int32 Type = 1;
bool VoipNetQuality::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoipNetQuality::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void VoipNetQuality::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoipNetQuality::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 VoipNetQuality::type() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipNetQuality.Type)
  return type_;
}
void VoipNetQuality::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipNetQuality.Type)
}

// required int32 Begin = 2;
bool VoipNetQuality::has_begin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VoipNetQuality::set_has_begin() {
  _has_bits_[0] |= 0x00000002u;
}
void VoipNetQuality::clear_has_begin() {
  _has_bits_[0] &= ~0x00000002u;
}
void VoipNetQuality::clear_begin() {
  begin_ = 0;
  clear_has_begin();
}
::google::protobuf::int32 VoipNetQuality::begin() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipNetQuality.Begin)
  return begin_;
}
void VoipNetQuality::set_begin(::google::protobuf::int32 value) {
  set_has_begin();
  begin_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipNetQuality.Begin)
}

// required int32 End = 3;
bool VoipNetQuality::has_end() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VoipNetQuality::set_has_end() {
  _has_bits_[0] |= 0x00000004u;
}
void VoipNetQuality::clear_has_end() {
  _has_bits_[0] &= ~0x00000004u;
}
void VoipNetQuality::clear_end() {
  end_ = 0;
  clear_has_end();
}
::google::protobuf::int32 VoipNetQuality::end() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipNetQuality.End)
  return end_;
}
void VoipNetQuality::set_end(::google::protobuf::int32 value) {
  set_has_end();
  end_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipNetQuality.End)
}

// required int32 HitCnt = 4;
bool VoipNetQuality::has_hitcnt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VoipNetQuality::set_has_hitcnt() {
  _has_bits_[0] |= 0x00000008u;
}
void VoipNetQuality::clear_has_hitcnt() {
  _has_bits_[0] &= ~0x00000008u;
}
void VoipNetQuality::clear_hitcnt() {
  hitcnt_ = 0;
  clear_has_hitcnt();
}
::google::protobuf::int32 VoipNetQuality::hitcnt() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipNetQuality.HitCnt)
  return hitcnt_;
}
void VoipNetQuality::set_hitcnt(::google::protobuf::int32 value) {
  set_has_hitcnt();
  hitcnt_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipNetQuality.HitCnt)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoipInviteRemindReq::kBaseRequestFieldNumber;
const int VoipInviteRemindReq::kListCountFieldNumber;
const int VoipInviteRemindReq::kToUserNameListFieldNumber;
const int VoipInviteRemindReq::kInviteTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoipInviteRemindReq::VoipInviteRemindReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VoipInviteRemindReq)
}
VoipInviteRemindReq::VoipInviteRemindReq(const VoipInviteRemindReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      tousernamelist_(from.tousernamelist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&listcount_, &from.listcount_,
    reinterpret_cast<char*>(&invitetype_) -
    reinterpret_cast<char*>(&listcount_) + sizeof(invitetype_));
  // @@protoc_insertion_point(copy_constructor:micromsg.VoipInviteRemindReq)
}

void VoipInviteRemindReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&invitetype_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(invitetype_));
}

VoipInviteRemindReq::~VoipInviteRemindReq() {
  // @@protoc_insertion_point(destructor:micromsg.VoipInviteRemindReq)
  SharedDtor();
}

void VoipInviteRemindReq::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void VoipInviteRemindReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoipInviteRemindReq::descriptor() {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoipInviteRemindReq& VoipInviteRemindReq::default_instance() {
  protobuf_mmvoip_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoipInviteRemindReq* VoipInviteRemindReq::New(::google::protobuf::Arena* arena) const {
  VoipInviteRemindReq* n = new VoipInviteRemindReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoipInviteRemindReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VoipInviteRemindReq)
  tousernamelist_.Clear();
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&listcount_, 0, reinterpret_cast<char*>(&invitetype_) -
      reinterpret_cast<char*>(&listcount_) + sizeof(invitetype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoipInviteRemindReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VoipInviteRemindReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ListCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_listcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &listcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.SKBuiltinString_t ToUserNameList = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tousernamelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 InviteType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_invitetype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invitetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VoipInviteRemindReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VoipInviteRemindReq)
  return false;
#undef DO_
}

void VoipInviteRemindReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VoipInviteRemindReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 ListCount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->listcount(), output);
  }

  // repeated .micromsg.SKBuiltinString_t ToUserNameList = 3;
  for (unsigned int i = 0, n = this->tousernamelist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tousernamelist(i), output);
  }

  // optional uint32 InviteType = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->invitetype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VoipInviteRemindReq)
}

::google::protobuf::uint8* VoipInviteRemindReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VoipInviteRemindReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 ListCount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->listcount(), target);
  }

  // repeated .micromsg.SKBuiltinString_t ToUserNameList = 3;
  for (unsigned int i = 0, n = this->tousernamelist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->tousernamelist(i), deterministic, target);
  }

  // optional uint32 InviteType = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->invitetype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VoipInviteRemindReq)
  return target;
}

size_t VoipInviteRemindReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.VoipInviteRemindReq)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_listcount()) {
    // required uint32 ListCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->listcount());
  }

  return total_size;
}
size_t VoipInviteRemindReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VoipInviteRemindReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 ListCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->listcount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.SKBuiltinString_t ToUserNameList = 3;
  {
    unsigned int count = this->tousernamelist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tousernamelist(i));
    }
  }

  // optional uint32 InviteType = 4;
  if (has_invitetype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->invitetype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoipInviteRemindReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VoipInviteRemindReq)
  GOOGLE_DCHECK_NE(&from, this);
  const VoipInviteRemindReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoipInviteRemindReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VoipInviteRemindReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VoipInviteRemindReq)
    MergeFrom(*source);
  }
}

void VoipInviteRemindReq::MergeFrom(const VoipInviteRemindReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VoipInviteRemindReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tousernamelist_.MergeFrom(from.tousernamelist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      listcount_ = from.listcount_;
    }
    if (cached_has_bits & 0x00000004u) {
      invitetype_ = from.invitetype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VoipInviteRemindReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VoipInviteRemindReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoipInviteRemindReq::CopyFrom(const VoipInviteRemindReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VoipInviteRemindReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoipInviteRemindReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void VoipInviteRemindReq::Swap(VoipInviteRemindReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoipInviteRemindReq::InternalSwap(VoipInviteRemindReq* other) {
  tousernamelist_.InternalSwap(&other->tousernamelist_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(listcount_, other->listcount_);
  std::swap(invitetype_, other->invitetype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoipInviteRemindReq::GetMetadata() const {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoipInviteRemindReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool VoipInviteRemindReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoipInviteRemindReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void VoipInviteRemindReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoipInviteRemindReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& VoipInviteRemindReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteRemindReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* VoipInviteRemindReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipInviteRemindReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* VoipInviteRemindReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.VoipInviteRemindReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void VoipInviteRemindReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipInviteRemindReq.BaseRequest)
}

// required uint32 ListCount = 2;
bool VoipInviteRemindReq::has_listcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VoipInviteRemindReq::set_has_listcount() {
  _has_bits_[0] |= 0x00000002u;
}
void VoipInviteRemindReq::clear_has_listcount() {
  _has_bits_[0] &= ~0x00000002u;
}
void VoipInviteRemindReq::clear_listcount() {
  listcount_ = 0u;
  clear_has_listcount();
}
::google::protobuf::uint32 VoipInviteRemindReq::listcount() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteRemindReq.ListCount)
  return listcount_;
}
void VoipInviteRemindReq::set_listcount(::google::protobuf::uint32 value) {
  set_has_listcount();
  listcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteRemindReq.ListCount)
}

// repeated .micromsg.SKBuiltinString_t ToUserNameList = 3;
int VoipInviteRemindReq::tousernamelist_size() const {
  return tousernamelist_.size();
}
void VoipInviteRemindReq::clear_tousernamelist() {
  tousernamelist_.Clear();
}
const ::micromsg::SKBuiltinString_t& VoipInviteRemindReq::tousernamelist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteRemindReq.ToUserNameList)
  return tousernamelist_.Get(index);
}
::micromsg::SKBuiltinString_t* VoipInviteRemindReq::mutable_tousernamelist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.VoipInviteRemindReq.ToUserNameList)
  return tousernamelist_.Mutable(index);
}
::micromsg::SKBuiltinString_t* VoipInviteRemindReq::add_tousernamelist() {
  // @@protoc_insertion_point(field_add:micromsg.VoipInviteRemindReq.ToUserNameList)
  return tousernamelist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >*
VoipInviteRemindReq::mutable_tousernamelist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.VoipInviteRemindReq.ToUserNameList)
  return &tousernamelist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >&
VoipInviteRemindReq::tousernamelist() const {
  // @@protoc_insertion_point(field_list:micromsg.VoipInviteRemindReq.ToUserNameList)
  return tousernamelist_;
}

// optional uint32 InviteType = 4;
bool VoipInviteRemindReq::has_invitetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VoipInviteRemindReq::set_has_invitetype() {
  _has_bits_[0] |= 0x00000004u;
}
void VoipInviteRemindReq::clear_has_invitetype() {
  _has_bits_[0] &= ~0x00000004u;
}
void VoipInviteRemindReq::clear_invitetype() {
  invitetype_ = 0u;
  clear_has_invitetype();
}
::google::protobuf::uint32 VoipInviteRemindReq::invitetype() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteRemindReq.InviteType)
  return invitetype_;
}
void VoipInviteRemindReq::set_invitetype(::google::protobuf::uint32 value) {
  set_has_invitetype();
  invitetype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteRemindReq.InviteType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoipInviteRemindResp::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoipInviteRemindResp::VoipInviteRemindResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VoipInviteRemindResp)
}
VoipInviteRemindResp::VoipInviteRemindResp(const VoipInviteRemindResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.VoipInviteRemindResp)
}

void VoipInviteRemindResp::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

VoipInviteRemindResp::~VoipInviteRemindResp() {
  // @@protoc_insertion_point(destructor:micromsg.VoipInviteRemindResp)
  SharedDtor();
}

void VoipInviteRemindResp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void VoipInviteRemindResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoipInviteRemindResp::descriptor() {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoipInviteRemindResp& VoipInviteRemindResp::default_instance() {
  protobuf_mmvoip_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoipInviteRemindResp* VoipInviteRemindResp::New(::google::protobuf::Arena* arena) const {
  VoipInviteRemindResp* n = new VoipInviteRemindResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoipInviteRemindResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VoipInviteRemindResp)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoipInviteRemindResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VoipInviteRemindResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VoipInviteRemindResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VoipInviteRemindResp)
  return false;
#undef DO_
}

void VoipInviteRemindResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VoipInviteRemindResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VoipInviteRemindResp)
}

::google::protobuf::uint8* VoipInviteRemindResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VoipInviteRemindResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VoipInviteRemindResp)
  return target;
}

size_t VoipInviteRemindResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VoipInviteRemindResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoipInviteRemindResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VoipInviteRemindResp)
  GOOGLE_DCHECK_NE(&from, this);
  const VoipInviteRemindResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoipInviteRemindResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VoipInviteRemindResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VoipInviteRemindResp)
    MergeFrom(*source);
  }
}

void VoipInviteRemindResp::MergeFrom(const VoipInviteRemindResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VoipInviteRemindResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void VoipInviteRemindResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VoipInviteRemindResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoipInviteRemindResp::CopyFrom(const VoipInviteRemindResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VoipInviteRemindResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoipInviteRemindResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void VoipInviteRemindResp::Swap(VoipInviteRemindResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoipInviteRemindResp::InternalSwap(VoipInviteRemindResp* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoipInviteRemindResp::GetMetadata() const {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoipInviteRemindResp

// required .micromsg.BaseResponse BaseResponse = 1;
bool VoipInviteRemindResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoipInviteRemindResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void VoipInviteRemindResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoipInviteRemindResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& VoipInviteRemindResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteRemindResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* VoipInviteRemindResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipInviteRemindResp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* VoipInviteRemindResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.VoipInviteRemindResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void VoipInviteRemindResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipInviteRemindResp.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoipInviteReq::kBaseRequestFieldNumber;
const int VoipInviteReq::kFromUsernameFieldNumber;
const int VoipInviteReq::kInviteUserCountFieldNumber;
const int VoipInviteReq::kToUsernameListFieldNumber;
const int VoipInviteReq::kPeerIdFieldNumber;
const int VoipInviteReq::kCapInfoFieldNumber;
const int VoipInviteReq::kNetTypeFieldNumber;
const int VoipInviteReq::kCallTypeFieldNumber;
const int VoipInviteReq::kRoomIdFieldNumber;
const int VoipInviteReq::kRoomKeyFieldNumber;
const int VoipInviteReq::kInviteTypeFieldNumber;
const int VoipInviteReq::kTimestamp64FieldNumber;
const int VoipInviteReq::kHDVideoFieldNumber;
const int VoipInviteReq::kInviteIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoipInviteReq::VoipInviteReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VoipInviteReq)
}
VoipInviteReq::VoipInviteReq(const VoipInviteReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      tousernamelist_(from.tousernamelist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fromusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fromusername()) {
    fromusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromusername_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_peerid()) {
    peerid_ = new ::micromsg::VoipRelayData(*from.peerid_);
  } else {
    peerid_ = NULL;
  }
  if (from.has_capinfo()) {
    capinfo_ = new ::micromsg::VoipRelayData(*from.capinfo_);
  } else {
    capinfo_ = NULL;
  }
  ::memcpy(&inviteusercount_, &from.inviteusercount_,
    reinterpret_cast<char*>(&inviteid_) -
    reinterpret_cast<char*>(&inviteusercount_) + sizeof(inviteid_));
  // @@protoc_insertion_point(copy_constructor:micromsg.VoipInviteReq)
}

void VoipInviteReq::SharedCtor() {
  _cached_size_ = 0;
  fromusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&inviteid_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(inviteid_));
}

VoipInviteReq::~VoipInviteReq() {
  // @@protoc_insertion_point(destructor:micromsg.VoipInviteReq)
  SharedDtor();
}

void VoipInviteReq::SharedDtor() {
  fromusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete peerid_;
  }
  if (this != internal_default_instance()) {
    delete capinfo_;
  }
}

void VoipInviteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoipInviteReq::descriptor() {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoipInviteReq& VoipInviteReq::default_instance() {
  protobuf_mmvoip_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoipInviteReq* VoipInviteReq::New(::google::protobuf::Arena* arena) const {
  VoipInviteReq* n = new VoipInviteReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoipInviteReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VoipInviteReq)
  tousernamelist_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    if (has_fromusername()) {
      GOOGLE_DCHECK(!fromusername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fromusername_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_peerid()) {
      GOOGLE_DCHECK(peerid_ != NULL);
      peerid_->::micromsg::VoipRelayData::Clear();
    }
    if (has_capinfo()) {
      GOOGLE_DCHECK(capinfo_ != NULL);
      capinfo_->::micromsg::VoipRelayData::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&inviteusercount_, 0, reinterpret_cast<char*>(&roomid_) -
      reinterpret_cast<char*>(&inviteusercount_) + sizeof(roomid_));
  }
  if (_has_bits_[8 / 32] & 7936u) {
    ::memset(&roomkey_, 0, reinterpret_cast<char*>(&inviteid_) -
      reinterpret_cast<char*>(&roomkey_) + sizeof(inviteid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoipInviteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VoipInviteReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FromUsername = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fromusername().data(), this->fromusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.VoipInviteReq.FromUsername");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 InviteUserCount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_inviteusercount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inviteusercount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.SKBuiltinString_t ToUsernameList = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tousernamelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.VoipRelayData PeerId = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peerid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.VoipRelayData CapInfo = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_capinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 NetType = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_nettype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nettype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 CallType = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_calltype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &calltype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 RoomId = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_roomid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 RoomKey = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_roomkey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roomkey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 InviteType = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_invitetype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invitetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 Timestamp64 = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_timestamp64();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 HDVideo = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_hdvideo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hdvideo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 InviteId = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_inviteid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inviteid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VoipInviteReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VoipInviteReq)
  return false;
#undef DO_
}

void VoipInviteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VoipInviteReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string FromUsername = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromusername().data(), this->fromusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VoipInviteReq.FromUsername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fromusername(), output);
  }

  // required int32 InviteUserCount = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->inviteusercount(), output);
  }

  // repeated .micromsg.SKBuiltinString_t ToUsernameList = 4;
  for (unsigned int i = 0, n = this->tousernamelist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tousernamelist(i), output);
  }

  // required .micromsg.VoipRelayData PeerId = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->peerid_, output);
  }

  // required .micromsg.VoipRelayData CapInfo = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->capinfo_, output);
  }

  // required int32 NetType = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->nettype(), output);
  }

  // required int32 CallType = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->calltype(), output);
  }

  // optional int32 RoomId = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->roomid(), output);
  }

  // optional int64 RoomKey = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->roomkey(), output);
  }

  // optional uint32 InviteType = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->invitetype(), output);
  }

  // optional uint64 Timestamp64 = 13;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->timestamp64(), output);
  }

  // optional int32 HDVideo = 14;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->hdvideo(), output);
  }

  // optional uint32 InviteId = 15;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->inviteid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VoipInviteReq)
}

::google::protobuf::uint8* VoipInviteReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VoipInviteReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string FromUsername = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromusername().data(), this->fromusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VoipInviteReq.FromUsername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fromusername(), target);
  }

  // required int32 InviteUserCount = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->inviteusercount(), target);
  }

  // repeated .micromsg.SKBuiltinString_t ToUsernameList = 4;
  for (unsigned int i = 0, n = this->tousernamelist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->tousernamelist(i), deterministic, target);
  }

  // required .micromsg.VoipRelayData PeerId = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->peerid_, deterministic, target);
  }

  // required .micromsg.VoipRelayData CapInfo = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->capinfo_, deterministic, target);
  }

  // required int32 NetType = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->nettype(), target);
  }

  // required int32 CallType = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->calltype(), target);
  }

  // optional int32 RoomId = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->roomid(), target);
  }

  // optional int64 RoomKey = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->roomkey(), target);
  }

  // optional uint32 InviteType = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->invitetype(), target);
  }

  // optional uint64 Timestamp64 = 13;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->timestamp64(), target);
  }

  // optional int32 HDVideo = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->hdvideo(), target);
  }

  // optional uint32 InviteId = 15;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->inviteid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VoipInviteReq)
  return target;
}

size_t VoipInviteReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.VoipInviteReq)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_peerid()) {
    // required .micromsg.VoipRelayData PeerId = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->peerid_);
  }

  if (has_capinfo()) {
    // required .micromsg.VoipRelayData CapInfo = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->capinfo_);
  }

  if (has_inviteusercount()) {
    // required int32 InviteUserCount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->inviteusercount());
  }

  if (has_nettype()) {
    // required int32 NetType = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nettype());
  }

  if (has_calltype()) {
    // required int32 CallType = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->calltype());
  }

  return total_size;
}
size_t VoipInviteReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VoipInviteReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007e) ^ 0x0000007e) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.VoipRelayData PeerId = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->peerid_);

    // required .micromsg.VoipRelayData CapInfo = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->capinfo_);

    // required int32 InviteUserCount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->inviteusercount());

    // required int32 NetType = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nettype());

    // required int32 CallType = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->calltype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.SKBuiltinString_t ToUsernameList = 4;
  {
    unsigned int count = this->tousernamelist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tousernamelist(i));
    }
  }

  // optional string FromUsername = 2;
  if (has_fromusername()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fromusername());
  }

  // optional int32 RoomId = 10;
  if (has_roomid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  if (_has_bits_[8 / 32] & 7936u) {
    // optional int64 RoomKey = 11;
    if (has_roomkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roomkey());
    }

    // optional uint64 Timestamp64 = 13;
    if (has_timestamp64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp64());
    }

    // optional uint32 InviteType = 12;
    if (has_invitetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->invitetype());
    }

    // optional int32 HDVideo = 14;
    if (has_hdvideo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hdvideo());
    }

    // optional uint32 InviteId = 15;
    if (has_inviteid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inviteid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoipInviteReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VoipInviteReq)
  GOOGLE_DCHECK_NE(&from, this);
  const VoipInviteReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoipInviteReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VoipInviteReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VoipInviteReq)
    MergeFrom(*source);
  }
}

void VoipInviteReq::MergeFrom(const VoipInviteReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VoipInviteReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tousernamelist_.MergeFrom(from.tousernamelist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_fromusername();
      fromusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromusername_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_peerid()->::micromsg::VoipRelayData::MergeFrom(from.peerid());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_capinfo()->::micromsg::VoipRelayData::MergeFrom(from.capinfo());
    }
    if (cached_has_bits & 0x00000010u) {
      inviteusercount_ = from.inviteusercount_;
    }
    if (cached_has_bits & 0x00000020u) {
      nettype_ = from.nettype_;
    }
    if (cached_has_bits & 0x00000040u) {
      calltype_ = from.calltype_;
    }
    if (cached_has_bits & 0x00000080u) {
      roomid_ = from.roomid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      roomkey_ = from.roomkey_;
    }
    if (cached_has_bits & 0x00000200u) {
      timestamp64_ = from.timestamp64_;
    }
    if (cached_has_bits & 0x00000400u) {
      invitetype_ = from.invitetype_;
    }
    if (cached_has_bits & 0x00000800u) {
      hdvideo_ = from.hdvideo_;
    }
    if (cached_has_bits & 0x00001000u) {
      inviteid_ = from.inviteid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VoipInviteReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VoipInviteReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoipInviteReq::CopyFrom(const VoipInviteReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VoipInviteReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoipInviteReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007e) != 0x0000007e) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_peerid()) {
    if (!this->peerid_->IsInitialized()) return false;
  }
  if (has_capinfo()) {
    if (!this->capinfo_->IsInitialized()) return false;
  }
  return true;
}

void VoipInviteReq::Swap(VoipInviteReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoipInviteReq::InternalSwap(VoipInviteReq* other) {
  tousernamelist_.InternalSwap(&other->tousernamelist_);
  fromusername_.Swap(&other->fromusername_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(peerid_, other->peerid_);
  std::swap(capinfo_, other->capinfo_);
  std::swap(inviteusercount_, other->inviteusercount_);
  std::swap(nettype_, other->nettype_);
  std::swap(calltype_, other->calltype_);
  std::swap(roomid_, other->roomid_);
  std::swap(roomkey_, other->roomkey_);
  std::swap(timestamp64_, other->timestamp64_);
  std::swap(invitetype_, other->invitetype_);
  std::swap(hdvideo_, other->hdvideo_);
  std::swap(inviteid_, other->inviteid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoipInviteReq::GetMetadata() const {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoipInviteReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool VoipInviteReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VoipInviteReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void VoipInviteReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void VoipInviteReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& VoipInviteReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* VoipInviteReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipInviteReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* VoipInviteReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.VoipInviteReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void VoipInviteReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipInviteReq.BaseRequest)
}

// optional string FromUsername = 2;
bool VoipInviteReq::has_fromusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoipInviteReq::set_has_fromusername() {
  _has_bits_[0] |= 0x00000001u;
}
void VoipInviteReq::clear_has_fromusername() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoipInviteReq::clear_fromusername() {
  fromusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fromusername();
}
const ::std::string& VoipInviteReq::fromusername() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteReq.FromUsername)
  return fromusername_.GetNoArena();
}
void VoipInviteReq::set_fromusername(const ::std::string& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteReq.FromUsername)
}
#if LANG_CXX11
void VoipInviteReq::set_fromusername(::std::string&& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VoipInviteReq.FromUsername)
}
#endif
void VoipInviteReq::set_fromusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VoipInviteReq.FromUsername)
}
void VoipInviteReq::set_fromusername(const char* value, size_t size) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VoipInviteReq.FromUsername)
}
::std::string* VoipInviteReq::mutable_fromusername() {
  set_has_fromusername();
  // @@protoc_insertion_point(field_mutable:micromsg.VoipInviteReq.FromUsername)
  return fromusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VoipInviteReq::release_fromusername() {
  // @@protoc_insertion_point(field_release:micromsg.VoipInviteReq.FromUsername)
  clear_has_fromusername();
  return fromusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VoipInviteReq::set_allocated_fromusername(::std::string* fromusername) {
  if (fromusername != NULL) {
    set_has_fromusername();
  } else {
    clear_has_fromusername();
  }
  fromusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipInviteReq.FromUsername)
}

// required int32 InviteUserCount = 3;
bool VoipInviteReq::has_inviteusercount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VoipInviteReq::set_has_inviteusercount() {
  _has_bits_[0] |= 0x00000010u;
}
void VoipInviteReq::clear_has_inviteusercount() {
  _has_bits_[0] &= ~0x00000010u;
}
void VoipInviteReq::clear_inviteusercount() {
  inviteusercount_ = 0;
  clear_has_inviteusercount();
}
::google::protobuf::int32 VoipInviteReq::inviteusercount() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteReq.InviteUserCount)
  return inviteusercount_;
}
void VoipInviteReq::set_inviteusercount(::google::protobuf::int32 value) {
  set_has_inviteusercount();
  inviteusercount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteReq.InviteUserCount)
}

// repeated .micromsg.SKBuiltinString_t ToUsernameList = 4;
int VoipInviteReq::tousernamelist_size() const {
  return tousernamelist_.size();
}
void VoipInviteReq::clear_tousernamelist() {
  tousernamelist_.Clear();
}
const ::micromsg::SKBuiltinString_t& VoipInviteReq::tousernamelist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteReq.ToUsernameList)
  return tousernamelist_.Get(index);
}
::micromsg::SKBuiltinString_t* VoipInviteReq::mutable_tousernamelist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.VoipInviteReq.ToUsernameList)
  return tousernamelist_.Mutable(index);
}
::micromsg::SKBuiltinString_t* VoipInviteReq::add_tousernamelist() {
  // @@protoc_insertion_point(field_add:micromsg.VoipInviteReq.ToUsernameList)
  return tousernamelist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >*
VoipInviteReq::mutable_tousernamelist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.VoipInviteReq.ToUsernameList)
  return &tousernamelist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >&
VoipInviteReq::tousernamelist() const {
  // @@protoc_insertion_point(field_list:micromsg.VoipInviteReq.ToUsernameList)
  return tousernamelist_;
}

// required .micromsg.VoipRelayData PeerId = 6;
bool VoipInviteReq::has_peerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VoipInviteReq::set_has_peerid() {
  _has_bits_[0] |= 0x00000004u;
}
void VoipInviteReq::clear_has_peerid() {
  _has_bits_[0] &= ~0x00000004u;
}
void VoipInviteReq::clear_peerid() {
  if (peerid_ != NULL) peerid_->::micromsg::VoipRelayData::Clear();
  clear_has_peerid();
}
const ::micromsg::VoipRelayData& VoipInviteReq::peerid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteReq.PeerId)
  return peerid_ != NULL ? *peerid_
                         : *::micromsg::VoipRelayData::internal_default_instance();
}
::micromsg::VoipRelayData* VoipInviteReq::mutable_peerid() {
  set_has_peerid();
  if (peerid_ == NULL) {
    peerid_ = new ::micromsg::VoipRelayData;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipInviteReq.PeerId)
  return peerid_;
}
::micromsg::VoipRelayData* VoipInviteReq::release_peerid() {
  // @@protoc_insertion_point(field_release:micromsg.VoipInviteReq.PeerId)
  clear_has_peerid();
  ::micromsg::VoipRelayData* temp = peerid_;
  peerid_ = NULL;
  return temp;
}
void VoipInviteReq::set_allocated_peerid(::micromsg::VoipRelayData* peerid) {
  delete peerid_;
  peerid_ = peerid;
  if (peerid) {
    set_has_peerid();
  } else {
    clear_has_peerid();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipInviteReq.PeerId)
}

// required .micromsg.VoipRelayData CapInfo = 7;
bool VoipInviteReq::has_capinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VoipInviteReq::set_has_capinfo() {
  _has_bits_[0] |= 0x00000008u;
}
void VoipInviteReq::clear_has_capinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
void VoipInviteReq::clear_capinfo() {
  if (capinfo_ != NULL) capinfo_->::micromsg::VoipRelayData::Clear();
  clear_has_capinfo();
}
const ::micromsg::VoipRelayData& VoipInviteReq::capinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteReq.CapInfo)
  return capinfo_ != NULL ? *capinfo_
                         : *::micromsg::VoipRelayData::internal_default_instance();
}
::micromsg::VoipRelayData* VoipInviteReq::mutable_capinfo() {
  set_has_capinfo();
  if (capinfo_ == NULL) {
    capinfo_ = new ::micromsg::VoipRelayData;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipInviteReq.CapInfo)
  return capinfo_;
}
::micromsg::VoipRelayData* VoipInviteReq::release_capinfo() {
  // @@protoc_insertion_point(field_release:micromsg.VoipInviteReq.CapInfo)
  clear_has_capinfo();
  ::micromsg::VoipRelayData* temp = capinfo_;
  capinfo_ = NULL;
  return temp;
}
void VoipInviteReq::set_allocated_capinfo(::micromsg::VoipRelayData* capinfo) {
  delete capinfo_;
  capinfo_ = capinfo;
  if (capinfo) {
    set_has_capinfo();
  } else {
    clear_has_capinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipInviteReq.CapInfo)
}

// required int32 NetType = 8;
bool VoipInviteReq::has_nettype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VoipInviteReq::set_has_nettype() {
  _has_bits_[0] |= 0x00000020u;
}
void VoipInviteReq::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000020u;
}
void VoipInviteReq::clear_nettype() {
  nettype_ = 0;
  clear_has_nettype();
}
::google::protobuf::int32 VoipInviteReq::nettype() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteReq.NetType)
  return nettype_;
}
void VoipInviteReq::set_nettype(::google::protobuf::int32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteReq.NetType)
}

// required int32 CallType = 9;
bool VoipInviteReq::has_calltype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VoipInviteReq::set_has_calltype() {
  _has_bits_[0] |= 0x00000040u;
}
void VoipInviteReq::clear_has_calltype() {
  _has_bits_[0] &= ~0x00000040u;
}
void VoipInviteReq::clear_calltype() {
  calltype_ = 0;
  clear_has_calltype();
}
::google::protobuf::int32 VoipInviteReq::calltype() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteReq.CallType)
  return calltype_;
}
void VoipInviteReq::set_calltype(::google::protobuf::int32 value) {
  set_has_calltype();
  calltype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteReq.CallType)
}

// optional int32 RoomId = 10;
bool VoipInviteReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VoipInviteReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000080u;
}
void VoipInviteReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000080u;
}
void VoipInviteReq::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
::google::protobuf::int32 VoipInviteReq::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteReq.RoomId)
  return roomid_;
}
void VoipInviteReq::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteReq.RoomId)
}

// optional int64 RoomKey = 11;
bool VoipInviteReq::has_roomkey() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void VoipInviteReq::set_has_roomkey() {
  _has_bits_[0] |= 0x00000100u;
}
void VoipInviteReq::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000100u;
}
void VoipInviteReq::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
::google::protobuf::int64 VoipInviteReq::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteReq.RoomKey)
  return roomkey_;
}
void VoipInviteReq::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteReq.RoomKey)
}

// optional uint32 InviteType = 12;
bool VoipInviteReq::has_invitetype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void VoipInviteReq::set_has_invitetype() {
  _has_bits_[0] |= 0x00000400u;
}
void VoipInviteReq::clear_has_invitetype() {
  _has_bits_[0] &= ~0x00000400u;
}
void VoipInviteReq::clear_invitetype() {
  invitetype_ = 0u;
  clear_has_invitetype();
}
::google::protobuf::uint32 VoipInviteReq::invitetype() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteReq.InviteType)
  return invitetype_;
}
void VoipInviteReq::set_invitetype(::google::protobuf::uint32 value) {
  set_has_invitetype();
  invitetype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteReq.InviteType)
}

// optional uint64 Timestamp64 = 13;
bool VoipInviteReq::has_timestamp64() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void VoipInviteReq::set_has_timestamp64() {
  _has_bits_[0] |= 0x00000200u;
}
void VoipInviteReq::clear_has_timestamp64() {
  _has_bits_[0] &= ~0x00000200u;
}
void VoipInviteReq::clear_timestamp64() {
  timestamp64_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp64();
}
::google::protobuf::uint64 VoipInviteReq::timestamp64() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteReq.Timestamp64)
  return timestamp64_;
}
void VoipInviteReq::set_timestamp64(::google::protobuf::uint64 value) {
  set_has_timestamp64();
  timestamp64_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteReq.Timestamp64)
}

// optional int32 HDVideo = 14;
bool VoipInviteReq::has_hdvideo() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void VoipInviteReq::set_has_hdvideo() {
  _has_bits_[0] |= 0x00000800u;
}
void VoipInviteReq::clear_has_hdvideo() {
  _has_bits_[0] &= ~0x00000800u;
}
void VoipInviteReq::clear_hdvideo() {
  hdvideo_ = 0;
  clear_has_hdvideo();
}
::google::protobuf::int32 VoipInviteReq::hdvideo() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteReq.HDVideo)
  return hdvideo_;
}
void VoipInviteReq::set_hdvideo(::google::protobuf::int32 value) {
  set_has_hdvideo();
  hdvideo_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteReq.HDVideo)
}

// optional uint32 InviteId = 15;
bool VoipInviteReq::has_inviteid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void VoipInviteReq::set_has_inviteid() {
  _has_bits_[0] |= 0x00001000u;
}
void VoipInviteReq::clear_has_inviteid() {
  _has_bits_[0] &= ~0x00001000u;
}
void VoipInviteReq::clear_inviteid() {
  inviteid_ = 0u;
  clear_has_inviteid();
}
::google::protobuf::uint32 VoipInviteReq::inviteid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteReq.InviteId)
  return inviteid_;
}
void VoipInviteReq::set_inviteid(::google::protobuf::uint32 value) {
  set_has_inviteid();
  inviteid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteReq.InviteId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoipInviteResp::kBaseResponseFieldNumber;
const int VoipInviteResp::kRoomIdFieldNumber;
const int VoipInviteResp::kAddrCountFieldNumber;
const int VoipInviteResp::kAddrListFieldNumber;
const int VoipInviteResp::kRoomKeyFieldNumber;
const int VoipInviteResp::kRoomMemberIdFieldNumber;
const int VoipInviteResp::kRelayDataFieldNumber;
const int VoipInviteResp::kNetQualityCntFieldNumber;
const int VoipInviteResp::kNetQualityListFieldNumber;
const int VoipInviteResp::kAudioTsdfBeyond3GFieldNumber;
const int VoipInviteResp::kAudioTsdfEdgeFieldNumber;
const int VoipInviteResp::kPassthroughQosAlgorithmFieldNumber;
const int VoipInviteResp::kFastPlayRepairFieldNumber;
const int VoipInviteResp::kVoipSyncIntervalFieldNumber;
const int VoipInviteResp::kNewP2SFieldNumber;
const int VoipInviteResp::kAudioDTXFieldNumber;
const int VoipInviteResp::kTcpCntFieldNumber;
const int VoipInviteResp::kSwitchIntervalFieldNumber;
const int VoipInviteResp::kHw264SvrCfgFieldNumber;
const int VoipInviteResp::kAudioEnableRmioAndS3AFieldNumber;
const int VoipInviteResp::kAudioEnableSpkecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoipInviteResp::VoipInviteResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VoipInviteResp)
}
VoipInviteResp::VoipInviteResp(const VoipInviteResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      addrlist_(from.addrlist_),
      netqualitylist_(from.netqualitylist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_relaydata()) {
    relaydata_ = new ::micromsg::VoipMultiRelayData(*from.relaydata_);
  } else {
    relaydata_ = NULL;
  }
  ::memcpy(&roomid_, &from.roomid_,
    reinterpret_cast<char*>(&audioenablespkec_) -
    reinterpret_cast<char*>(&roomid_) + sizeof(audioenablespkec_));
  // @@protoc_insertion_point(copy_constructor:micromsg.VoipInviteResp)
}

void VoipInviteResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&audioenablespkec_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(audioenablespkec_));
}

VoipInviteResp::~VoipInviteResp() {
  // @@protoc_insertion_point(destructor:micromsg.VoipInviteResp)
  SharedDtor();
}

void VoipInviteResp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete relaydata_;
  }
}

void VoipInviteResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoipInviteResp::descriptor() {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoipInviteResp& VoipInviteResp::default_instance() {
  protobuf_mmvoip_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoipInviteResp* VoipInviteResp::New(::google::protobuf::Arena* arena) const {
  VoipInviteResp* n = new VoipInviteResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoipInviteResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VoipInviteResp)
  addrlist_.Clear();
  netqualitylist_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_relaydata()) {
      GOOGLE_DCHECK(relaydata_ != NULL);
      relaydata_->::micromsg::VoipMultiRelayData::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&roomid_, 0, reinterpret_cast<char*>(&audiotsdfbeyond3g_) -
      reinterpret_cast<char*>(&roomid_) + sizeof(audiotsdfbeyond3g_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&audiotsdfedge_, 0, reinterpret_cast<char*>(&switchinterval_) -
      reinterpret_cast<char*>(&audiotsdfedge_) + sizeof(switchinterval_));
  }
  if (_has_bits_[16 / 32] & 458752u) {
    ::memset(&hw264svrcfg_, 0, reinterpret_cast<char*>(&audioenablespkec_) -
      reinterpret_cast<char*>(&hw264svrcfg_) + sizeof(audioenablespkec_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoipInviteResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VoipInviteResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 RoomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_roomid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 AddrCount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_addrcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addrcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.VoipAddr AddrList = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_addrlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 RoomKey = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_roomkey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roomkey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 RoomMemberId = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_roommemberid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roommemberid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.VoipMultiRelayData RelayData = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relaydata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 NetQualityCnt = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_netqualitycnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &netqualitycnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.VoipNetQuality NetQualityList = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_netqualitylist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 AudioTsdfBeyond3G = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_audiotsdfbeyond3g();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &audiotsdfbeyond3g_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 AudioTsdfEdge = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_audiotsdfedge();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &audiotsdfedge_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 PassthroughQosAlgorithm = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_passthroughqosalgorithm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &passthroughqosalgorithm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 FastPlayRepair = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_fastplayrepair();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fastplayrepair_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 VoipSyncInterval = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_voipsyncinterval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &voipsyncinterval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 NewP2S = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_newp2s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newp2s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 AudioDTX = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_audiodtx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &audiodtx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 TcpCnt = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_tcpcnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcpcnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 SwitchInterval = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_switchinterval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &switchinterval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Hw264SvrCfg = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_hw264svrcfg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hw264svrcfg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 AudioEnableRmioAndS3A = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_audioenablermioands3a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &audioenablermioands3a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 AudioEnableSpkec = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          set_has_audioenablespkec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &audioenablespkec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VoipInviteResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VoipInviteResp)
  return false;
#undef DO_
}

void VoipInviteResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VoipInviteResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required int32 RoomId = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // required int32 AddrCount = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->addrcount(), output);
  }

  // repeated .micromsg.VoipAddr AddrList = 4;
  for (unsigned int i = 0, n = this->addrlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->addrlist(i), output);
  }

  // required int64 RoomKey = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->roomkey(), output);
  }

  // required int32 RoomMemberId = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->roommemberid(), output);
  }

  // optional .micromsg.VoipMultiRelayData RelayData = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->relaydata_, output);
  }

  // optional int32 NetQualityCnt = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->netqualitycnt(), output);
  }

  // repeated .micromsg.VoipNetQuality NetQualityList = 9;
  for (unsigned int i = 0, n = this->netqualitylist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->netqualitylist(i), output);
  }

  // optional int32 AudioTsdfBeyond3G = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->audiotsdfbeyond3g(), output);
  }

  // optional int32 AudioTsdfEdge = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->audiotsdfedge(), output);
  }

  // optional int32 PassthroughQosAlgorithm = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->passthroughqosalgorithm(), output);
  }

  // optional int32 FastPlayRepair = 13;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->fastplayrepair(), output);
  }

  // optional int32 VoipSyncInterval = 14;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->voipsyncinterval(), output);
  }

  // optional int32 NewP2S = 15;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->newp2s(), output);
  }

  // optional int32 AudioDTX = 16;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->audiodtx(), output);
  }

  // optional uint32 TcpCnt = 17;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->tcpcnt(), output);
  }

  // optional uint32 SwitchInterval = 18;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->switchinterval(), output);
  }

  // optional int32 Hw264SvrCfg = 19;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->hw264svrcfg(), output);
  }

  // optional int32 AudioEnableRmioAndS3A = 20;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->audioenablermioands3a(), output);
  }

  // optional int32 AudioEnableSpkec = 21;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->audioenablespkec(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VoipInviteResp)
}

::google::protobuf::uint8* VoipInviteResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VoipInviteResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required int32 RoomId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // required int32 AddrCount = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->addrcount(), target);
  }

  // repeated .micromsg.VoipAddr AddrList = 4;
  for (unsigned int i = 0, n = this->addrlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->addrlist(i), deterministic, target);
  }

  // required int64 RoomKey = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->roomkey(), target);
  }

  // required int32 RoomMemberId = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->roommemberid(), target);
  }

  // optional .micromsg.VoipMultiRelayData RelayData = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->relaydata_, deterministic, target);
  }

  // optional int32 NetQualityCnt = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->netqualitycnt(), target);
  }

  // repeated .micromsg.VoipNetQuality NetQualityList = 9;
  for (unsigned int i = 0, n = this->netqualitylist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->netqualitylist(i), deterministic, target);
  }

  // optional int32 AudioTsdfBeyond3G = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->audiotsdfbeyond3g(), target);
  }

  // optional int32 AudioTsdfEdge = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->audiotsdfedge(), target);
  }

  // optional int32 PassthroughQosAlgorithm = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->passthroughqosalgorithm(), target);
  }

  // optional int32 FastPlayRepair = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->fastplayrepair(), target);
  }

  // optional int32 VoipSyncInterval = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->voipsyncinterval(), target);
  }

  // optional int32 NewP2S = 15;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->newp2s(), target);
  }

  // optional int32 AudioDTX = 16;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->audiodtx(), target);
  }

  // optional uint32 TcpCnt = 17;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->tcpcnt(), target);
  }

  // optional uint32 SwitchInterval = 18;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->switchinterval(), target);
  }

  // optional int32 Hw264SvrCfg = 19;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->hw264svrcfg(), target);
  }

  // optional int32 AudioEnableRmioAndS3A = 20;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->audioenablermioands3a(), target);
  }

  // optional int32 AudioEnableSpkec = 21;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->audioenablespkec(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VoipInviteResp)
  return target;
}

size_t VoipInviteResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.VoipInviteResp)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_roomid()) {
    // required int32 RoomId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  if (has_addrcount()) {
    // required int32 AddrCount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->addrcount());
  }

  if (has_roomkey()) {
    // required int64 RoomKey = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());
  }

  if (has_roommemberid()) {
    // required int32 RoomMemberId = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roommemberid());
  }

  return total_size;
}
size_t VoipInviteResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VoipInviteResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003d) ^ 0x0000003d) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required int32 RoomId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());

    // required int32 AddrCount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->addrcount());

    // required int64 RoomKey = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());

    // required int32 RoomMemberId = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roommemberid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.VoipAddr AddrList = 4;
  {
    unsigned int count = this->addrlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->addrlist(i));
    }
  }

  // repeated .micromsg.VoipNetQuality NetQualityList = 9;
  {
    unsigned int count = this->netqualitylist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->netqualitylist(i));
    }
  }

  // optional .micromsg.VoipMultiRelayData RelayData = 7;
  if (has_relaydata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->relaydata_);
  }

  if (_has_bits_[0 / 32] & 192u) {
    // optional int32 NetQualityCnt = 8;
    if (has_netqualitycnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->netqualitycnt());
    }

    // optional int32 AudioTsdfBeyond3G = 10;
    if (has_audiotsdfbeyond3g()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->audiotsdfbeyond3g());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 AudioTsdfEdge = 11;
    if (has_audiotsdfedge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->audiotsdfedge());
    }

    // optional int32 PassthroughQosAlgorithm = 12;
    if (has_passthroughqosalgorithm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->passthroughqosalgorithm());
    }

    // optional int32 FastPlayRepair = 13;
    if (has_fastplayrepair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fastplayrepair());
    }

    // optional int32 VoipSyncInterval = 14;
    if (has_voipsyncinterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->voipsyncinterval());
    }

    // optional int32 NewP2S = 15;
    if (has_newp2s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->newp2s());
    }

    // optional int32 AudioDTX = 16;
    if (has_audiodtx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->audiodtx());
    }

    // optional uint32 TcpCnt = 17;
    if (has_tcpcnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tcpcnt());
    }

    // optional uint32 SwitchInterval = 18;
    if (has_switchinterval()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->switchinterval());
    }

  }
  if (_has_bits_[16 / 32] & 458752u) {
    // optional int32 Hw264SvrCfg = 19;
    if (has_hw264svrcfg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hw264svrcfg());
    }

    // optional int32 AudioEnableRmioAndS3A = 20;
    if (has_audioenablermioands3a()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->audioenablermioands3a());
    }

    // optional int32 AudioEnableSpkec = 21;
    if (has_audioenablespkec()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->audioenablespkec());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoipInviteResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VoipInviteResp)
  GOOGLE_DCHECK_NE(&from, this);
  const VoipInviteResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoipInviteResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VoipInviteResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VoipInviteResp)
    MergeFrom(*source);
  }
}

void VoipInviteResp::MergeFrom(const VoipInviteResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VoipInviteResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  addrlist_.MergeFrom(from.addrlist_);
  netqualitylist_.MergeFrom(from.netqualitylist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_relaydata()->::micromsg::VoipMultiRelayData::MergeFrom(from.relaydata());
    }
    if (cached_has_bits & 0x00000004u) {
      roomid_ = from.roomid_;
    }
    if (cached_has_bits & 0x00000008u) {
      addrcount_ = from.addrcount_;
    }
    if (cached_has_bits & 0x00000010u) {
      roomkey_ = from.roomkey_;
    }
    if (cached_has_bits & 0x00000020u) {
      roommemberid_ = from.roommemberid_;
    }
    if (cached_has_bits & 0x00000040u) {
      netqualitycnt_ = from.netqualitycnt_;
    }
    if (cached_has_bits & 0x00000080u) {
      audiotsdfbeyond3g_ = from.audiotsdfbeyond3g_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      audiotsdfedge_ = from.audiotsdfedge_;
    }
    if (cached_has_bits & 0x00000200u) {
      passthroughqosalgorithm_ = from.passthroughqosalgorithm_;
    }
    if (cached_has_bits & 0x00000400u) {
      fastplayrepair_ = from.fastplayrepair_;
    }
    if (cached_has_bits & 0x00000800u) {
      voipsyncinterval_ = from.voipsyncinterval_;
    }
    if (cached_has_bits & 0x00001000u) {
      newp2s_ = from.newp2s_;
    }
    if (cached_has_bits & 0x00002000u) {
      audiodtx_ = from.audiodtx_;
    }
    if (cached_has_bits & 0x00004000u) {
      tcpcnt_ = from.tcpcnt_;
    }
    if (cached_has_bits & 0x00008000u) {
      switchinterval_ = from.switchinterval_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 458752u) {
    if (cached_has_bits & 0x00010000u) {
      hw264svrcfg_ = from.hw264svrcfg_;
    }
    if (cached_has_bits & 0x00020000u) {
      audioenablermioands3a_ = from.audioenablermioands3a_;
    }
    if (cached_has_bits & 0x00040000u) {
      audioenablespkec_ = from.audioenablespkec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VoipInviteResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VoipInviteResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoipInviteResp::CopyFrom(const VoipInviteResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VoipInviteResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoipInviteResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003d) != 0x0000003d) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->addrlist())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->netqualitylist())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_relaydata()) {
    if (!this->relaydata_->IsInitialized()) return false;
  }
  return true;
}

void VoipInviteResp::Swap(VoipInviteResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoipInviteResp::InternalSwap(VoipInviteResp* other) {
  addrlist_.InternalSwap(&other->addrlist_);
  netqualitylist_.InternalSwap(&other->netqualitylist_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(relaydata_, other->relaydata_);
  std::swap(roomid_, other->roomid_);
  std::swap(addrcount_, other->addrcount_);
  std::swap(roomkey_, other->roomkey_);
  std::swap(roommemberid_, other->roommemberid_);
  std::swap(netqualitycnt_, other->netqualitycnt_);
  std::swap(audiotsdfbeyond3g_, other->audiotsdfbeyond3g_);
  std::swap(audiotsdfedge_, other->audiotsdfedge_);
  std::swap(passthroughqosalgorithm_, other->passthroughqosalgorithm_);
  std::swap(fastplayrepair_, other->fastplayrepair_);
  std::swap(voipsyncinterval_, other->voipsyncinterval_);
  std::swap(newp2s_, other->newp2s_);
  std::swap(audiodtx_, other->audiodtx_);
  std::swap(tcpcnt_, other->tcpcnt_);
  std::swap(switchinterval_, other->switchinterval_);
  std::swap(hw264svrcfg_, other->hw264svrcfg_);
  std::swap(audioenablermioands3a_, other->audioenablermioands3a_);
  std::swap(audioenablespkec_, other->audioenablespkec_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoipInviteResp::GetMetadata() const {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoipInviteResp

// required .micromsg.BaseResponse BaseResponse = 1;
bool VoipInviteResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoipInviteResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void VoipInviteResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoipInviteResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& VoipInviteResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* VoipInviteResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipInviteResp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* VoipInviteResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.VoipInviteResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void VoipInviteResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipInviteResp.BaseResponse)
}

// required int32 RoomId = 2;
bool VoipInviteResp::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VoipInviteResp::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
void VoipInviteResp::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
void VoipInviteResp::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
::google::protobuf::int32 VoipInviteResp::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteResp.RoomId)
  return roomid_;
}
void VoipInviteResp::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteResp.RoomId)
}

// required int32 AddrCount = 3;
bool VoipInviteResp::has_addrcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VoipInviteResp::set_has_addrcount() {
  _has_bits_[0] |= 0x00000008u;
}
void VoipInviteResp::clear_has_addrcount() {
  _has_bits_[0] &= ~0x00000008u;
}
void VoipInviteResp::clear_addrcount() {
  addrcount_ = 0;
  clear_has_addrcount();
}
::google::protobuf::int32 VoipInviteResp::addrcount() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteResp.AddrCount)
  return addrcount_;
}
void VoipInviteResp::set_addrcount(::google::protobuf::int32 value) {
  set_has_addrcount();
  addrcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteResp.AddrCount)
}

// repeated .micromsg.VoipAddr AddrList = 4;
int VoipInviteResp::addrlist_size() const {
  return addrlist_.size();
}
void VoipInviteResp::clear_addrlist() {
  addrlist_.Clear();
}
const ::micromsg::VoipAddr& VoipInviteResp::addrlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteResp.AddrList)
  return addrlist_.Get(index);
}
::micromsg::VoipAddr* VoipInviteResp::mutable_addrlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.VoipInviteResp.AddrList)
  return addrlist_.Mutable(index);
}
::micromsg::VoipAddr* VoipInviteResp::add_addrlist() {
  // @@protoc_insertion_point(field_add:micromsg.VoipInviteResp.AddrList)
  return addrlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::VoipAddr >*
VoipInviteResp::mutable_addrlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.VoipInviteResp.AddrList)
  return &addrlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::VoipAddr >&
VoipInviteResp::addrlist() const {
  // @@protoc_insertion_point(field_list:micromsg.VoipInviteResp.AddrList)
  return addrlist_;
}

// required int64 RoomKey = 5;
bool VoipInviteResp::has_roomkey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VoipInviteResp::set_has_roomkey() {
  _has_bits_[0] |= 0x00000010u;
}
void VoipInviteResp::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000010u;
}
void VoipInviteResp::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
::google::protobuf::int64 VoipInviteResp::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteResp.RoomKey)
  return roomkey_;
}
void VoipInviteResp::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteResp.RoomKey)
}

// required int32 RoomMemberId = 6;
bool VoipInviteResp::has_roommemberid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VoipInviteResp::set_has_roommemberid() {
  _has_bits_[0] |= 0x00000020u;
}
void VoipInviteResp::clear_has_roommemberid() {
  _has_bits_[0] &= ~0x00000020u;
}
void VoipInviteResp::clear_roommemberid() {
  roommemberid_ = 0;
  clear_has_roommemberid();
}
::google::protobuf::int32 VoipInviteResp::roommemberid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteResp.RoomMemberId)
  return roommemberid_;
}
void VoipInviteResp::set_roommemberid(::google::protobuf::int32 value) {
  set_has_roommemberid();
  roommemberid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteResp.RoomMemberId)
}

// optional .micromsg.VoipMultiRelayData RelayData = 7;
bool VoipInviteResp::has_relaydata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VoipInviteResp::set_has_relaydata() {
  _has_bits_[0] |= 0x00000002u;
}
void VoipInviteResp::clear_has_relaydata() {
  _has_bits_[0] &= ~0x00000002u;
}
void VoipInviteResp::clear_relaydata() {
  if (relaydata_ != NULL) relaydata_->::micromsg::VoipMultiRelayData::Clear();
  clear_has_relaydata();
}
const ::micromsg::VoipMultiRelayData& VoipInviteResp::relaydata() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteResp.RelayData)
  return relaydata_ != NULL ? *relaydata_
                         : *::micromsg::VoipMultiRelayData::internal_default_instance();
}
::micromsg::VoipMultiRelayData* VoipInviteResp::mutable_relaydata() {
  set_has_relaydata();
  if (relaydata_ == NULL) {
    relaydata_ = new ::micromsg::VoipMultiRelayData;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipInviteResp.RelayData)
  return relaydata_;
}
::micromsg::VoipMultiRelayData* VoipInviteResp::release_relaydata() {
  // @@protoc_insertion_point(field_release:micromsg.VoipInviteResp.RelayData)
  clear_has_relaydata();
  ::micromsg::VoipMultiRelayData* temp = relaydata_;
  relaydata_ = NULL;
  return temp;
}
void VoipInviteResp::set_allocated_relaydata(::micromsg::VoipMultiRelayData* relaydata) {
  delete relaydata_;
  relaydata_ = relaydata;
  if (relaydata) {
    set_has_relaydata();
  } else {
    clear_has_relaydata();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipInviteResp.RelayData)
}

// optional int32 NetQualityCnt = 8;
bool VoipInviteResp::has_netqualitycnt() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VoipInviteResp::set_has_netqualitycnt() {
  _has_bits_[0] |= 0x00000040u;
}
void VoipInviteResp::clear_has_netqualitycnt() {
  _has_bits_[0] &= ~0x00000040u;
}
void VoipInviteResp::clear_netqualitycnt() {
  netqualitycnt_ = 0;
  clear_has_netqualitycnt();
}
::google::protobuf::int32 VoipInviteResp::netqualitycnt() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteResp.NetQualityCnt)
  return netqualitycnt_;
}
void VoipInviteResp::set_netqualitycnt(::google::protobuf::int32 value) {
  set_has_netqualitycnt();
  netqualitycnt_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteResp.NetQualityCnt)
}

// repeated .micromsg.VoipNetQuality NetQualityList = 9;
int VoipInviteResp::netqualitylist_size() const {
  return netqualitylist_.size();
}
void VoipInviteResp::clear_netqualitylist() {
  netqualitylist_.Clear();
}
const ::micromsg::VoipNetQuality& VoipInviteResp::netqualitylist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteResp.NetQualityList)
  return netqualitylist_.Get(index);
}
::micromsg::VoipNetQuality* VoipInviteResp::mutable_netqualitylist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.VoipInviteResp.NetQualityList)
  return netqualitylist_.Mutable(index);
}
::micromsg::VoipNetQuality* VoipInviteResp::add_netqualitylist() {
  // @@protoc_insertion_point(field_add:micromsg.VoipInviteResp.NetQualityList)
  return netqualitylist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::VoipNetQuality >*
VoipInviteResp::mutable_netqualitylist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.VoipInviteResp.NetQualityList)
  return &netqualitylist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::VoipNetQuality >&
VoipInviteResp::netqualitylist() const {
  // @@protoc_insertion_point(field_list:micromsg.VoipInviteResp.NetQualityList)
  return netqualitylist_;
}

// optional int32 AudioTsdfBeyond3G = 10;
bool VoipInviteResp::has_audiotsdfbeyond3g() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VoipInviteResp::set_has_audiotsdfbeyond3g() {
  _has_bits_[0] |= 0x00000080u;
}
void VoipInviteResp::clear_has_audiotsdfbeyond3g() {
  _has_bits_[0] &= ~0x00000080u;
}
void VoipInviteResp::clear_audiotsdfbeyond3g() {
  audiotsdfbeyond3g_ = 0;
  clear_has_audiotsdfbeyond3g();
}
::google::protobuf::int32 VoipInviteResp::audiotsdfbeyond3g() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteResp.AudioTsdfBeyond3G)
  return audiotsdfbeyond3g_;
}
void VoipInviteResp::set_audiotsdfbeyond3g(::google::protobuf::int32 value) {
  set_has_audiotsdfbeyond3g();
  audiotsdfbeyond3g_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteResp.AudioTsdfBeyond3G)
}

// optional int32 AudioTsdfEdge = 11;
bool VoipInviteResp::has_audiotsdfedge() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void VoipInviteResp::set_has_audiotsdfedge() {
  _has_bits_[0] |= 0x00000100u;
}
void VoipInviteResp::clear_has_audiotsdfedge() {
  _has_bits_[0] &= ~0x00000100u;
}
void VoipInviteResp::clear_audiotsdfedge() {
  audiotsdfedge_ = 0;
  clear_has_audiotsdfedge();
}
::google::protobuf::int32 VoipInviteResp::audiotsdfedge() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteResp.AudioTsdfEdge)
  return audiotsdfedge_;
}
void VoipInviteResp::set_audiotsdfedge(::google::protobuf::int32 value) {
  set_has_audiotsdfedge();
  audiotsdfedge_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteResp.AudioTsdfEdge)
}

// optional int32 PassthroughQosAlgorithm = 12;
bool VoipInviteResp::has_passthroughqosalgorithm() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void VoipInviteResp::set_has_passthroughqosalgorithm() {
  _has_bits_[0] |= 0x00000200u;
}
void VoipInviteResp::clear_has_passthroughqosalgorithm() {
  _has_bits_[0] &= ~0x00000200u;
}
void VoipInviteResp::clear_passthroughqosalgorithm() {
  passthroughqosalgorithm_ = 0;
  clear_has_passthroughqosalgorithm();
}
::google::protobuf::int32 VoipInviteResp::passthroughqosalgorithm() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteResp.PassthroughQosAlgorithm)
  return passthroughqosalgorithm_;
}
void VoipInviteResp::set_passthroughqosalgorithm(::google::protobuf::int32 value) {
  set_has_passthroughqosalgorithm();
  passthroughqosalgorithm_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteResp.PassthroughQosAlgorithm)
}

// optional int32 FastPlayRepair = 13;
bool VoipInviteResp::has_fastplayrepair() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void VoipInviteResp::set_has_fastplayrepair() {
  _has_bits_[0] |= 0x00000400u;
}
void VoipInviteResp::clear_has_fastplayrepair() {
  _has_bits_[0] &= ~0x00000400u;
}
void VoipInviteResp::clear_fastplayrepair() {
  fastplayrepair_ = 0;
  clear_has_fastplayrepair();
}
::google::protobuf::int32 VoipInviteResp::fastplayrepair() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteResp.FastPlayRepair)
  return fastplayrepair_;
}
void VoipInviteResp::set_fastplayrepair(::google::protobuf::int32 value) {
  set_has_fastplayrepair();
  fastplayrepair_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteResp.FastPlayRepair)
}

// optional int32 VoipSyncInterval = 14;
bool VoipInviteResp::has_voipsyncinterval() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void VoipInviteResp::set_has_voipsyncinterval() {
  _has_bits_[0] |= 0x00000800u;
}
void VoipInviteResp::clear_has_voipsyncinterval() {
  _has_bits_[0] &= ~0x00000800u;
}
void VoipInviteResp::clear_voipsyncinterval() {
  voipsyncinterval_ = 0;
  clear_has_voipsyncinterval();
}
::google::protobuf::int32 VoipInviteResp::voipsyncinterval() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteResp.VoipSyncInterval)
  return voipsyncinterval_;
}
void VoipInviteResp::set_voipsyncinterval(::google::protobuf::int32 value) {
  set_has_voipsyncinterval();
  voipsyncinterval_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteResp.VoipSyncInterval)
}

// optional int32 NewP2S = 15;
bool VoipInviteResp::has_newp2s() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void VoipInviteResp::set_has_newp2s() {
  _has_bits_[0] |= 0x00001000u;
}
void VoipInviteResp::clear_has_newp2s() {
  _has_bits_[0] &= ~0x00001000u;
}
void VoipInviteResp::clear_newp2s() {
  newp2s_ = 0;
  clear_has_newp2s();
}
::google::protobuf::int32 VoipInviteResp::newp2s() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteResp.NewP2S)
  return newp2s_;
}
void VoipInviteResp::set_newp2s(::google::protobuf::int32 value) {
  set_has_newp2s();
  newp2s_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteResp.NewP2S)
}

// optional int32 AudioDTX = 16;
bool VoipInviteResp::has_audiodtx() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void VoipInviteResp::set_has_audiodtx() {
  _has_bits_[0] |= 0x00002000u;
}
void VoipInviteResp::clear_has_audiodtx() {
  _has_bits_[0] &= ~0x00002000u;
}
void VoipInviteResp::clear_audiodtx() {
  audiodtx_ = 0;
  clear_has_audiodtx();
}
::google::protobuf::int32 VoipInviteResp::audiodtx() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteResp.AudioDTX)
  return audiodtx_;
}
void VoipInviteResp::set_audiodtx(::google::protobuf::int32 value) {
  set_has_audiodtx();
  audiodtx_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteResp.AudioDTX)
}

// optional uint32 TcpCnt = 17;
bool VoipInviteResp::has_tcpcnt() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void VoipInviteResp::set_has_tcpcnt() {
  _has_bits_[0] |= 0x00004000u;
}
void VoipInviteResp::clear_has_tcpcnt() {
  _has_bits_[0] &= ~0x00004000u;
}
void VoipInviteResp::clear_tcpcnt() {
  tcpcnt_ = 0u;
  clear_has_tcpcnt();
}
::google::protobuf::uint32 VoipInviteResp::tcpcnt() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteResp.TcpCnt)
  return tcpcnt_;
}
void VoipInviteResp::set_tcpcnt(::google::protobuf::uint32 value) {
  set_has_tcpcnt();
  tcpcnt_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteResp.TcpCnt)
}

// optional uint32 SwitchInterval = 18;
bool VoipInviteResp::has_switchinterval() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void VoipInviteResp::set_has_switchinterval() {
  _has_bits_[0] |= 0x00008000u;
}
void VoipInviteResp::clear_has_switchinterval() {
  _has_bits_[0] &= ~0x00008000u;
}
void VoipInviteResp::clear_switchinterval() {
  switchinterval_ = 0u;
  clear_has_switchinterval();
}
::google::protobuf::uint32 VoipInviteResp::switchinterval() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteResp.SwitchInterval)
  return switchinterval_;
}
void VoipInviteResp::set_switchinterval(::google::protobuf::uint32 value) {
  set_has_switchinterval();
  switchinterval_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteResp.SwitchInterval)
}

// optional int32 Hw264SvrCfg = 19;
bool VoipInviteResp::has_hw264svrcfg() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void VoipInviteResp::set_has_hw264svrcfg() {
  _has_bits_[0] |= 0x00010000u;
}
void VoipInviteResp::clear_has_hw264svrcfg() {
  _has_bits_[0] &= ~0x00010000u;
}
void VoipInviteResp::clear_hw264svrcfg() {
  hw264svrcfg_ = 0;
  clear_has_hw264svrcfg();
}
::google::protobuf::int32 VoipInviteResp::hw264svrcfg() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteResp.Hw264SvrCfg)
  return hw264svrcfg_;
}
void VoipInviteResp::set_hw264svrcfg(::google::protobuf::int32 value) {
  set_has_hw264svrcfg();
  hw264svrcfg_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteResp.Hw264SvrCfg)
}

// optional int32 AudioEnableRmioAndS3A = 20;
bool VoipInviteResp::has_audioenablermioands3a() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void VoipInviteResp::set_has_audioenablermioands3a() {
  _has_bits_[0] |= 0x00020000u;
}
void VoipInviteResp::clear_has_audioenablermioands3a() {
  _has_bits_[0] &= ~0x00020000u;
}
void VoipInviteResp::clear_audioenablermioands3a() {
  audioenablermioands3a_ = 0;
  clear_has_audioenablermioands3a();
}
::google::protobuf::int32 VoipInviteResp::audioenablermioands3a() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteResp.AudioEnableRmioAndS3A)
  return audioenablermioands3a_;
}
void VoipInviteResp::set_audioenablermioands3a(::google::protobuf::int32 value) {
  set_has_audioenablermioands3a();
  audioenablermioands3a_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteResp.AudioEnableRmioAndS3A)
}

// optional int32 AudioEnableSpkec = 21;
bool VoipInviteResp::has_audioenablespkec() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void VoipInviteResp::set_has_audioenablespkec() {
  _has_bits_[0] |= 0x00040000u;
}
void VoipInviteResp::clear_has_audioenablespkec() {
  _has_bits_[0] &= ~0x00040000u;
}
void VoipInviteResp::clear_audioenablespkec() {
  audioenablespkec_ = 0;
  clear_has_audioenablespkec();
}
::google::protobuf::int32 VoipInviteResp::audioenablespkec() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteResp.AudioEnableSpkec)
  return audioenablespkec_;
}
void VoipInviteResp::set_audioenablespkec(::google::protobuf::int32 value) {
  set_has_audioenablespkec();
  audioenablespkec_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteResp.AudioEnableSpkec)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoipCancelInviteReq::kBaseRequestFieldNumber;
const int VoipCancelInviteReq::kFromUsernameFieldNumber;
const int VoipCancelInviteReq::kRoomIdFieldNumber;
const int VoipCancelInviteReq::kRoomKeyFieldNumber;
const int VoipCancelInviteReq::kToUserNameFieldNumber;
const int VoipCancelInviteReq::kReportDataFieldNumber;
const int VoipCancelInviteReq::kInviteTypeFieldNumber;
const int VoipCancelInviteReq::kTimestamp64FieldNumber;
const int VoipCancelInviteReq::kInviteIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoipCancelInviteReq::VoipCancelInviteReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VoipCancelInviteReq)
}
VoipCancelInviteReq::VoipCancelInviteReq(const VoipCancelInviteReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fromusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fromusername()) {
    fromusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromusername_);
  }
  tousername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tousername()) {
    tousername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tousername_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_reportdata()) {
    reportdata_ = new ::micromsg::VoipStatReportData(*from.reportdata_);
  } else {
    reportdata_ = NULL;
  }
  ::memcpy(&roomkey_, &from.roomkey_,
    reinterpret_cast<char*>(&inviteid_) -
    reinterpret_cast<char*>(&roomkey_) + sizeof(inviteid_));
  // @@protoc_insertion_point(copy_constructor:micromsg.VoipCancelInviteReq)
}

void VoipCancelInviteReq::SharedCtor() {
  _cached_size_ = 0;
  fromusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tousername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&inviteid_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(inviteid_));
}

VoipCancelInviteReq::~VoipCancelInviteReq() {
  // @@protoc_insertion_point(destructor:micromsg.VoipCancelInviteReq)
  SharedDtor();
}

void VoipCancelInviteReq::SharedDtor() {
  fromusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tousername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete reportdata_;
  }
}

void VoipCancelInviteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoipCancelInviteReq::descriptor() {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoipCancelInviteReq& VoipCancelInviteReq::default_instance() {
  protobuf_mmvoip_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoipCancelInviteReq* VoipCancelInviteReq::New(::google::protobuf::Arena* arena) const {
  VoipCancelInviteReq* n = new VoipCancelInviteReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoipCancelInviteReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VoipCancelInviteReq)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_fromusername()) {
      GOOGLE_DCHECK(!fromusername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fromusername_.UnsafeRawStringPointer())->clear();
    }
    if (has_tousername()) {
      GOOGLE_DCHECK(!tousername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tousername_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_reportdata()) {
      GOOGLE_DCHECK(reportdata_ != NULL);
      reportdata_->::micromsg::VoipStatReportData::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&roomkey_, 0, reinterpret_cast<char*>(&timestamp64_) -
      reinterpret_cast<char*>(&roomkey_) + sizeof(timestamp64_));
  }
  inviteid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoipCancelInviteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VoipCancelInviteReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FromUsername = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fromusername().data(), this->fromusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.VoipCancelInviteReq.FromUsername");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 RoomId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_roomid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 RoomKey = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_roomkey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roomkey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ToUserName = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tousername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tousername().data(), this->tousername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.VoipCancelInviteReq.ToUserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.VoipStatReportData ReportData = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reportdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 InviteType = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_invitetype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invitetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 Timestamp64 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_timestamp64();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 InviteId = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_inviteid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inviteid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VoipCancelInviteReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VoipCancelInviteReq)
  return false;
#undef DO_
}

void VoipCancelInviteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VoipCancelInviteReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string FromUsername = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromusername().data(), this->fromusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VoipCancelInviteReq.FromUsername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fromusername(), output);
  }

  // required int32 RoomId = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->roomid(), output);
  }

  // required int64 RoomKey = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->roomkey(), output);
  }

  // optional string ToUserName = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tousername().data(), this->tousername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VoipCancelInviteReq.ToUserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->tousername(), output);
  }

  // required .micromsg.VoipStatReportData ReportData = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->reportdata_, output);
  }

  // optional uint32 InviteType = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->invitetype(), output);
  }

  // optional uint64 Timestamp64 = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->timestamp64(), output);
  }

  // optional uint32 InviteId = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->inviteid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VoipCancelInviteReq)
}

::google::protobuf::uint8* VoipCancelInviteReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VoipCancelInviteReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string FromUsername = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromusername().data(), this->fromusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VoipCancelInviteReq.FromUsername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fromusername(), target);
  }

  // required int32 RoomId = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->roomid(), target);
  }

  // required int64 RoomKey = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->roomkey(), target);
  }

  // optional string ToUserName = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tousername().data(), this->tousername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VoipCancelInviteReq.ToUserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->tousername(), target);
  }

  // required .micromsg.VoipStatReportData ReportData = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->reportdata_, deterministic, target);
  }

  // optional uint32 InviteType = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->invitetype(), target);
  }

  // optional uint64 Timestamp64 = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->timestamp64(), target);
  }

  // optional uint32 InviteId = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->inviteid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VoipCancelInviteReq)
  return target;
}

size_t VoipCancelInviteReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.VoipCancelInviteReq)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_reportdata()) {
    // required .micromsg.VoipStatReportData ReportData = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->reportdata_);
  }

  if (has_roomkey()) {
    // required int64 RoomKey = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());
  }

  if (has_roomid()) {
    // required int32 RoomId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  return total_size;
}
size_t VoipCancelInviteReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VoipCancelInviteReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003c) ^ 0x0000003c) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.VoipStatReportData ReportData = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->reportdata_);

    // required int64 RoomKey = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());

    // required int32 RoomId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string FromUsername = 2;
    if (has_fromusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromusername());
    }

    // optional string ToUserName = 6;
    if (has_tousername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tousername());
    }

  }
  if (_has_bits_[0 / 32] & 192u) {
    // optional uint32 InviteType = 9;
    if (has_invitetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->invitetype());
    }

    // optional uint64 Timestamp64 = 10;
    if (has_timestamp64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp64());
    }

  }
  // optional uint32 InviteId = 11;
  if (has_inviteid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->inviteid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoipCancelInviteReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VoipCancelInviteReq)
  GOOGLE_DCHECK_NE(&from, this);
  const VoipCancelInviteReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoipCancelInviteReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VoipCancelInviteReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VoipCancelInviteReq)
    MergeFrom(*source);
  }
}

void VoipCancelInviteReq::MergeFrom(const VoipCancelInviteReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VoipCancelInviteReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_fromusername();
      fromusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromusername_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_tousername();
      tousername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tousername_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_reportdata()->::micromsg::VoipStatReportData::MergeFrom(from.reportdata());
    }
    if (cached_has_bits & 0x00000010u) {
      roomkey_ = from.roomkey_;
    }
    if (cached_has_bits & 0x00000020u) {
      roomid_ = from.roomid_;
    }
    if (cached_has_bits & 0x00000040u) {
      invitetype_ = from.invitetype_;
    }
    if (cached_has_bits & 0x00000080u) {
      timestamp64_ = from.timestamp64_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_inviteid(from.inviteid());
  }
}

void VoipCancelInviteReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VoipCancelInviteReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoipCancelInviteReq::CopyFrom(const VoipCancelInviteReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VoipCancelInviteReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoipCancelInviteReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003c) != 0x0000003c) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_reportdata()) {
    if (!this->reportdata_->IsInitialized()) return false;
  }
  return true;
}

void VoipCancelInviteReq::Swap(VoipCancelInviteReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoipCancelInviteReq::InternalSwap(VoipCancelInviteReq* other) {
  fromusername_.Swap(&other->fromusername_);
  tousername_.Swap(&other->tousername_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(reportdata_, other->reportdata_);
  std::swap(roomkey_, other->roomkey_);
  std::swap(roomid_, other->roomid_);
  std::swap(invitetype_, other->invitetype_);
  std::swap(timestamp64_, other->timestamp64_);
  std::swap(inviteid_, other->inviteid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoipCancelInviteReq::GetMetadata() const {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoipCancelInviteReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool VoipCancelInviteReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VoipCancelInviteReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
void VoipCancelInviteReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
void VoipCancelInviteReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& VoipCancelInviteReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipCancelInviteReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* VoipCancelInviteReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipCancelInviteReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* VoipCancelInviteReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.VoipCancelInviteReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void VoipCancelInviteReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipCancelInviteReq.BaseRequest)
}

// optional string FromUsername = 2;
bool VoipCancelInviteReq::has_fromusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoipCancelInviteReq::set_has_fromusername() {
  _has_bits_[0] |= 0x00000001u;
}
void VoipCancelInviteReq::clear_has_fromusername() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoipCancelInviteReq::clear_fromusername() {
  fromusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fromusername();
}
const ::std::string& VoipCancelInviteReq::fromusername() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipCancelInviteReq.FromUsername)
  return fromusername_.GetNoArena();
}
void VoipCancelInviteReq::set_fromusername(const ::std::string& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VoipCancelInviteReq.FromUsername)
}
#if LANG_CXX11
void VoipCancelInviteReq::set_fromusername(::std::string&& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VoipCancelInviteReq.FromUsername)
}
#endif
void VoipCancelInviteReq::set_fromusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VoipCancelInviteReq.FromUsername)
}
void VoipCancelInviteReq::set_fromusername(const char* value, size_t size) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VoipCancelInviteReq.FromUsername)
}
::std::string* VoipCancelInviteReq::mutable_fromusername() {
  set_has_fromusername();
  // @@protoc_insertion_point(field_mutable:micromsg.VoipCancelInviteReq.FromUsername)
  return fromusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VoipCancelInviteReq::release_fromusername() {
  // @@protoc_insertion_point(field_release:micromsg.VoipCancelInviteReq.FromUsername)
  clear_has_fromusername();
  return fromusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VoipCancelInviteReq::set_allocated_fromusername(::std::string* fromusername) {
  if (fromusername != NULL) {
    set_has_fromusername();
  } else {
    clear_has_fromusername();
  }
  fromusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipCancelInviteReq.FromUsername)
}

// required int32 RoomId = 3;
bool VoipCancelInviteReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VoipCancelInviteReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000020u;
}
void VoipCancelInviteReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000020u;
}
void VoipCancelInviteReq::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
::google::protobuf::int32 VoipCancelInviteReq::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipCancelInviteReq.RoomId)
  return roomid_;
}
void VoipCancelInviteReq::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipCancelInviteReq.RoomId)
}

// required int64 RoomKey = 4;
bool VoipCancelInviteReq::has_roomkey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VoipCancelInviteReq::set_has_roomkey() {
  _has_bits_[0] |= 0x00000010u;
}
void VoipCancelInviteReq::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000010u;
}
void VoipCancelInviteReq::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
::google::protobuf::int64 VoipCancelInviteReq::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipCancelInviteReq.RoomKey)
  return roomkey_;
}
void VoipCancelInviteReq::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipCancelInviteReq.RoomKey)
}

// optional string ToUserName = 6;
bool VoipCancelInviteReq::has_tousername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VoipCancelInviteReq::set_has_tousername() {
  _has_bits_[0] |= 0x00000002u;
}
void VoipCancelInviteReq::clear_has_tousername() {
  _has_bits_[0] &= ~0x00000002u;
}
void VoipCancelInviteReq::clear_tousername() {
  tousername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tousername();
}
const ::std::string& VoipCancelInviteReq::tousername() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipCancelInviteReq.ToUserName)
  return tousername_.GetNoArena();
}
void VoipCancelInviteReq::set_tousername(const ::std::string& value) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VoipCancelInviteReq.ToUserName)
}
#if LANG_CXX11
void VoipCancelInviteReq::set_tousername(::std::string&& value) {
  set_has_tousername();
  tousername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VoipCancelInviteReq.ToUserName)
}
#endif
void VoipCancelInviteReq::set_tousername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VoipCancelInviteReq.ToUserName)
}
void VoipCancelInviteReq::set_tousername(const char* value, size_t size) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VoipCancelInviteReq.ToUserName)
}
::std::string* VoipCancelInviteReq::mutable_tousername() {
  set_has_tousername();
  // @@protoc_insertion_point(field_mutable:micromsg.VoipCancelInviteReq.ToUserName)
  return tousername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VoipCancelInviteReq::release_tousername() {
  // @@protoc_insertion_point(field_release:micromsg.VoipCancelInviteReq.ToUserName)
  clear_has_tousername();
  return tousername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VoipCancelInviteReq::set_allocated_tousername(::std::string* tousername) {
  if (tousername != NULL) {
    set_has_tousername();
  } else {
    clear_has_tousername();
  }
  tousername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tousername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipCancelInviteReq.ToUserName)
}

// required .micromsg.VoipStatReportData ReportData = 8;
bool VoipCancelInviteReq::has_reportdata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VoipCancelInviteReq::set_has_reportdata() {
  _has_bits_[0] |= 0x00000008u;
}
void VoipCancelInviteReq::clear_has_reportdata() {
  _has_bits_[0] &= ~0x00000008u;
}
void VoipCancelInviteReq::clear_reportdata() {
  if (reportdata_ != NULL) reportdata_->::micromsg::VoipStatReportData::Clear();
  clear_has_reportdata();
}
const ::micromsg::VoipStatReportData& VoipCancelInviteReq::reportdata() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipCancelInviteReq.ReportData)
  return reportdata_ != NULL ? *reportdata_
                         : *::micromsg::VoipStatReportData::internal_default_instance();
}
::micromsg::VoipStatReportData* VoipCancelInviteReq::mutable_reportdata() {
  set_has_reportdata();
  if (reportdata_ == NULL) {
    reportdata_ = new ::micromsg::VoipStatReportData;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipCancelInviteReq.ReportData)
  return reportdata_;
}
::micromsg::VoipStatReportData* VoipCancelInviteReq::release_reportdata() {
  // @@protoc_insertion_point(field_release:micromsg.VoipCancelInviteReq.ReportData)
  clear_has_reportdata();
  ::micromsg::VoipStatReportData* temp = reportdata_;
  reportdata_ = NULL;
  return temp;
}
void VoipCancelInviteReq::set_allocated_reportdata(::micromsg::VoipStatReportData* reportdata) {
  delete reportdata_;
  reportdata_ = reportdata;
  if (reportdata) {
    set_has_reportdata();
  } else {
    clear_has_reportdata();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipCancelInviteReq.ReportData)
}

// optional uint32 InviteType = 9;
bool VoipCancelInviteReq::has_invitetype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VoipCancelInviteReq::set_has_invitetype() {
  _has_bits_[0] |= 0x00000040u;
}
void VoipCancelInviteReq::clear_has_invitetype() {
  _has_bits_[0] &= ~0x00000040u;
}
void VoipCancelInviteReq::clear_invitetype() {
  invitetype_ = 0u;
  clear_has_invitetype();
}
::google::protobuf::uint32 VoipCancelInviteReq::invitetype() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipCancelInviteReq.InviteType)
  return invitetype_;
}
void VoipCancelInviteReq::set_invitetype(::google::protobuf::uint32 value) {
  set_has_invitetype();
  invitetype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipCancelInviteReq.InviteType)
}

// optional uint64 Timestamp64 = 10;
bool VoipCancelInviteReq::has_timestamp64() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VoipCancelInviteReq::set_has_timestamp64() {
  _has_bits_[0] |= 0x00000080u;
}
void VoipCancelInviteReq::clear_has_timestamp64() {
  _has_bits_[0] &= ~0x00000080u;
}
void VoipCancelInviteReq::clear_timestamp64() {
  timestamp64_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp64();
}
::google::protobuf::uint64 VoipCancelInviteReq::timestamp64() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipCancelInviteReq.Timestamp64)
  return timestamp64_;
}
void VoipCancelInviteReq::set_timestamp64(::google::protobuf::uint64 value) {
  set_has_timestamp64();
  timestamp64_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipCancelInviteReq.Timestamp64)
}

// optional uint32 InviteId = 11;
bool VoipCancelInviteReq::has_inviteid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void VoipCancelInviteReq::set_has_inviteid() {
  _has_bits_[0] |= 0x00000100u;
}
void VoipCancelInviteReq::clear_has_inviteid() {
  _has_bits_[0] &= ~0x00000100u;
}
void VoipCancelInviteReq::clear_inviteid() {
  inviteid_ = 0u;
  clear_has_inviteid();
}
::google::protobuf::uint32 VoipCancelInviteReq::inviteid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipCancelInviteReq.InviteId)
  return inviteid_;
}
void VoipCancelInviteReq::set_inviteid(::google::protobuf::uint32 value) {
  set_has_inviteid();
  inviteid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipCancelInviteReq.InviteId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoipCancelInviteResp::kBaseResponseFieldNumber;
const int VoipCancelInviteResp::kRoomIdFieldNumber;
const int VoipCancelInviteResp::kRoomKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoipCancelInviteResp::VoipCancelInviteResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VoipCancelInviteResp)
}
VoipCancelInviteResp::VoipCancelInviteResp(const VoipCancelInviteResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  ::memcpy(&roomkey_, &from.roomkey_,
    reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&roomkey_) + sizeof(roomid_));
  // @@protoc_insertion_point(copy_constructor:micromsg.VoipCancelInviteResp)
}

void VoipCancelInviteResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(roomid_));
}

VoipCancelInviteResp::~VoipCancelInviteResp() {
  // @@protoc_insertion_point(destructor:micromsg.VoipCancelInviteResp)
  SharedDtor();
}

void VoipCancelInviteResp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void VoipCancelInviteResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoipCancelInviteResp::descriptor() {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoipCancelInviteResp& VoipCancelInviteResp::default_instance() {
  protobuf_mmvoip_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoipCancelInviteResp* VoipCancelInviteResp::New(::google::protobuf::Arena* arena) const {
  VoipCancelInviteResp* n = new VoipCancelInviteResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoipCancelInviteResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VoipCancelInviteResp)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&roomkey_, 0, reinterpret_cast<char*>(&roomid_) -
      reinterpret_cast<char*>(&roomkey_) + sizeof(roomid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoipCancelInviteResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VoipCancelInviteResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 RoomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_roomid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 RoomKey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_roomkey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roomkey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VoipCancelInviteResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VoipCancelInviteResp)
  return false;
#undef DO_
}

void VoipCancelInviteResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VoipCancelInviteResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required int32 RoomId = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // required int64 RoomKey = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->roomkey(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VoipCancelInviteResp)
}

::google::protobuf::uint8* VoipCancelInviteResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VoipCancelInviteResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required int32 RoomId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // required int64 RoomKey = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->roomkey(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VoipCancelInviteResp)
  return target;
}

size_t VoipCancelInviteResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.VoipCancelInviteResp)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_roomkey()) {
    // required int64 RoomKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());
  }

  if (has_roomid()) {
    // required int32 RoomId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  return total_size;
}
size_t VoipCancelInviteResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VoipCancelInviteResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required int64 RoomKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());

    // required int32 RoomId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoipCancelInviteResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VoipCancelInviteResp)
  GOOGLE_DCHECK_NE(&from, this);
  const VoipCancelInviteResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoipCancelInviteResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VoipCancelInviteResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VoipCancelInviteResp)
    MergeFrom(*source);
  }
}

void VoipCancelInviteResp::MergeFrom(const VoipCancelInviteResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VoipCancelInviteResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      roomkey_ = from.roomkey_;
    }
    if (cached_has_bits & 0x00000004u) {
      roomid_ = from.roomid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VoipCancelInviteResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VoipCancelInviteResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoipCancelInviteResp::CopyFrom(const VoipCancelInviteResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VoipCancelInviteResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoipCancelInviteResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void VoipCancelInviteResp::Swap(VoipCancelInviteResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoipCancelInviteResp::InternalSwap(VoipCancelInviteResp* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(roomkey_, other->roomkey_);
  std::swap(roomid_, other->roomid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoipCancelInviteResp::GetMetadata() const {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoipCancelInviteResp

// required .micromsg.BaseResponse BaseResponse = 1;
bool VoipCancelInviteResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoipCancelInviteResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void VoipCancelInviteResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoipCancelInviteResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& VoipCancelInviteResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipCancelInviteResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* VoipCancelInviteResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipCancelInviteResp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* VoipCancelInviteResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.VoipCancelInviteResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void VoipCancelInviteResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipCancelInviteResp.BaseResponse)
}

// required int32 RoomId = 2;
bool VoipCancelInviteResp::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VoipCancelInviteResp::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
void VoipCancelInviteResp::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
void VoipCancelInviteResp::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
::google::protobuf::int32 VoipCancelInviteResp::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipCancelInviteResp.RoomId)
  return roomid_;
}
void VoipCancelInviteResp::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipCancelInviteResp.RoomId)
}

// required int64 RoomKey = 3;
bool VoipCancelInviteResp::has_roomkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VoipCancelInviteResp::set_has_roomkey() {
  _has_bits_[0] |= 0x00000002u;
}
void VoipCancelInviteResp::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000002u;
}
void VoipCancelInviteResp::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
::google::protobuf::int64 VoipCancelInviteResp::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipCancelInviteResp.RoomKey)
  return roomkey_;
}
void VoipCancelInviteResp::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipCancelInviteResp.RoomKey)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoipAnswerReq::kBaseRequestFieldNumber;
const int VoipAnswerReq::kFromUsernameFieldNumber;
const int VoipAnswerReq::kRoomIdFieldNumber;
const int VoipAnswerReq::kAnswerFieldNumber;
const int VoipAnswerReq::kPeerIdFieldNumber;
const int VoipAnswerReq::kCapInfoFieldNumber;
const int VoipAnswerReq::kRoomKeyFieldNumber;
const int VoipAnswerReq::kNetTypeFieldNumber;
const int VoipAnswerReq::kTimestamp64FieldNumber;
const int VoipAnswerReq::kOnlyAudioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoipAnswerReq::VoipAnswerReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VoipAnswerReq)
}
VoipAnswerReq::VoipAnswerReq(const VoipAnswerReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fromusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fromusername()) {
    fromusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromusername_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_peerid()) {
    peerid_ = new ::micromsg::VoipRelayData(*from.peerid_);
  } else {
    peerid_ = NULL;
  }
  if (from.has_capinfo()) {
    capinfo_ = new ::micromsg::VoipRelayData(*from.capinfo_);
  } else {
    capinfo_ = NULL;
  }
  ::memcpy(&roomid_, &from.roomid_,
    reinterpret_cast<char*>(&onlyaudio_) -
    reinterpret_cast<char*>(&roomid_) + sizeof(onlyaudio_));
  // @@protoc_insertion_point(copy_constructor:micromsg.VoipAnswerReq)
}

void VoipAnswerReq::SharedCtor() {
  _cached_size_ = 0;
  fromusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&onlyaudio_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(onlyaudio_));
}

VoipAnswerReq::~VoipAnswerReq() {
  // @@protoc_insertion_point(destructor:micromsg.VoipAnswerReq)
  SharedDtor();
}

void VoipAnswerReq::SharedDtor() {
  fromusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete peerid_;
  }
  if (this != internal_default_instance()) {
    delete capinfo_;
  }
}

void VoipAnswerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoipAnswerReq::descriptor() {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoipAnswerReq& VoipAnswerReq::default_instance() {
  protobuf_mmvoip_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoipAnswerReq* VoipAnswerReq::New(::google::protobuf::Arena* arena) const {
  VoipAnswerReq* n = new VoipAnswerReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoipAnswerReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VoipAnswerReq)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_fromusername()) {
      GOOGLE_DCHECK(!fromusername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fromusername_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_peerid()) {
      GOOGLE_DCHECK(peerid_ != NULL);
      peerid_->::micromsg::VoipRelayData::Clear();
    }
    if (has_capinfo()) {
      GOOGLE_DCHECK(capinfo_ != NULL);
      capinfo_->::micromsg::VoipRelayData::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&roomid_, 0, reinterpret_cast<char*>(&timestamp64_) -
      reinterpret_cast<char*>(&roomid_) + sizeof(timestamp64_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&nettype_, 0, reinterpret_cast<char*>(&onlyaudio_) -
      reinterpret_cast<char*>(&nettype_) + sizeof(onlyaudio_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoipAnswerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VoipAnswerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FromUsername = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fromusername().data(), this->fromusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.VoipAnswerReq.FromUsername");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 RoomId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_roomid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Answer = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_answer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &answer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.VoipRelayData PeerId = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peerid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.VoipRelayData CapInfo = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_capinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 RoomKey = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_roomkey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roomkey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 NetType = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_nettype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nettype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 Timestamp64 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_timestamp64();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 OnlyAudio = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_onlyaudio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onlyaudio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VoipAnswerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VoipAnswerReq)
  return false;
#undef DO_
}

void VoipAnswerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VoipAnswerReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string FromUsername = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromusername().data(), this->fromusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VoipAnswerReq.FromUsername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fromusername(), output);
  }

  // required int32 RoomId = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->roomid(), output);
  }

  // required int32 Answer = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->answer(), output);
  }

  // optional .micromsg.VoipRelayData PeerId = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->peerid_, output);
  }

  // optional .micromsg.VoipRelayData CapInfo = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->capinfo_, output);
  }

  // required int64 RoomKey = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->roomkey(), output);
  }

  // required int32 NetType = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->nettype(), output);
  }

  // optional uint64 Timestamp64 = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->timestamp64(), output);
  }

  // optional int32 OnlyAudio = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->onlyaudio(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VoipAnswerReq)
}

::google::protobuf::uint8* VoipAnswerReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VoipAnswerReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string FromUsername = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromusername().data(), this->fromusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VoipAnswerReq.FromUsername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fromusername(), target);
  }

  // required int32 RoomId = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->roomid(), target);
  }

  // required int32 Answer = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->answer(), target);
  }

  // optional .micromsg.VoipRelayData PeerId = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->peerid_, deterministic, target);
  }

  // optional .micromsg.VoipRelayData CapInfo = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->capinfo_, deterministic, target);
  }

  // required int64 RoomKey = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->roomkey(), target);
  }

  // required int32 NetType = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->nettype(), target);
  }

  // optional uint64 Timestamp64 = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->timestamp64(), target);
  }

  // optional int32 OnlyAudio = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->onlyaudio(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VoipAnswerReq)
  return target;
}

size_t VoipAnswerReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.VoipAnswerReq)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_roomid()) {
    // required int32 RoomId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  if (has_answer()) {
    // required int32 Answer = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->answer());
  }

  if (has_roomkey()) {
    // required int64 RoomKey = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());
  }

  if (has_nettype()) {
    // required int32 NetType = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nettype());
  }

  return total_size;
}
size_t VoipAnswerReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VoipAnswerReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000172) ^ 0x00000172) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required int32 RoomId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());

    // required int32 Answer = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->answer());

    // required int64 RoomKey = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());

    // required int32 NetType = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nettype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string FromUsername = 2;
  if (has_fromusername()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fromusername());
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional .micromsg.VoipRelayData PeerId = 5;
    if (has_peerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->peerid_);
    }

    // optional .micromsg.VoipRelayData CapInfo = 6;
    if (has_capinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->capinfo_);
    }

  }
  // optional uint64 Timestamp64 = 9;
  if (has_timestamp64()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp64());
  }

  // optional int32 OnlyAudio = 10;
  if (has_onlyaudio()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->onlyaudio());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoipAnswerReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VoipAnswerReq)
  GOOGLE_DCHECK_NE(&from, this);
  const VoipAnswerReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoipAnswerReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VoipAnswerReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VoipAnswerReq)
    MergeFrom(*source);
  }
}

void VoipAnswerReq::MergeFrom(const VoipAnswerReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VoipAnswerReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_fromusername();
      fromusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromusername_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_peerid()->::micromsg::VoipRelayData::MergeFrom(from.peerid());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_capinfo()->::micromsg::VoipRelayData::MergeFrom(from.capinfo());
    }
    if (cached_has_bits & 0x00000010u) {
      roomid_ = from.roomid_;
    }
    if (cached_has_bits & 0x00000020u) {
      answer_ = from.answer_;
    }
    if (cached_has_bits & 0x00000040u) {
      roomkey_ = from.roomkey_;
    }
    if (cached_has_bits & 0x00000080u) {
      timestamp64_ = from.timestamp64_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      nettype_ = from.nettype_;
    }
    if (cached_has_bits & 0x00000200u) {
      onlyaudio_ = from.onlyaudio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VoipAnswerReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VoipAnswerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoipAnswerReq::CopyFrom(const VoipAnswerReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VoipAnswerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoipAnswerReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000172) != 0x00000172) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_peerid()) {
    if (!this->peerid_->IsInitialized()) return false;
  }
  if (has_capinfo()) {
    if (!this->capinfo_->IsInitialized()) return false;
  }
  return true;
}

void VoipAnswerReq::Swap(VoipAnswerReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoipAnswerReq::InternalSwap(VoipAnswerReq* other) {
  fromusername_.Swap(&other->fromusername_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(peerid_, other->peerid_);
  std::swap(capinfo_, other->capinfo_);
  std::swap(roomid_, other->roomid_);
  std::swap(answer_, other->answer_);
  std::swap(roomkey_, other->roomkey_);
  std::swap(timestamp64_, other->timestamp64_);
  std::swap(nettype_, other->nettype_);
  std::swap(onlyaudio_, other->onlyaudio_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoipAnswerReq::GetMetadata() const {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoipAnswerReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool VoipAnswerReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VoipAnswerReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void VoipAnswerReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void VoipAnswerReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& VoipAnswerReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* VoipAnswerReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipAnswerReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* VoipAnswerReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.VoipAnswerReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void VoipAnswerReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipAnswerReq.BaseRequest)
}

// optional string FromUsername = 2;
bool VoipAnswerReq::has_fromusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoipAnswerReq::set_has_fromusername() {
  _has_bits_[0] |= 0x00000001u;
}
void VoipAnswerReq::clear_has_fromusername() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoipAnswerReq::clear_fromusername() {
  fromusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fromusername();
}
const ::std::string& VoipAnswerReq::fromusername() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerReq.FromUsername)
  return fromusername_.GetNoArena();
}
void VoipAnswerReq::set_fromusername(const ::std::string& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VoipAnswerReq.FromUsername)
}
#if LANG_CXX11
void VoipAnswerReq::set_fromusername(::std::string&& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VoipAnswerReq.FromUsername)
}
#endif
void VoipAnswerReq::set_fromusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VoipAnswerReq.FromUsername)
}
void VoipAnswerReq::set_fromusername(const char* value, size_t size) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VoipAnswerReq.FromUsername)
}
::std::string* VoipAnswerReq::mutable_fromusername() {
  set_has_fromusername();
  // @@protoc_insertion_point(field_mutable:micromsg.VoipAnswerReq.FromUsername)
  return fromusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VoipAnswerReq::release_fromusername() {
  // @@protoc_insertion_point(field_release:micromsg.VoipAnswerReq.FromUsername)
  clear_has_fromusername();
  return fromusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VoipAnswerReq::set_allocated_fromusername(::std::string* fromusername) {
  if (fromusername != NULL) {
    set_has_fromusername();
  } else {
    clear_has_fromusername();
  }
  fromusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipAnswerReq.FromUsername)
}

// required int32 RoomId = 3;
bool VoipAnswerReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VoipAnswerReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000010u;
}
void VoipAnswerReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000010u;
}
void VoipAnswerReq::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
::google::protobuf::int32 VoipAnswerReq::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerReq.RoomId)
  return roomid_;
}
void VoipAnswerReq::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAnswerReq.RoomId)
}

// required int32 Answer = 4;
bool VoipAnswerReq::has_answer() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VoipAnswerReq::set_has_answer() {
  _has_bits_[0] |= 0x00000020u;
}
void VoipAnswerReq::clear_has_answer() {
  _has_bits_[0] &= ~0x00000020u;
}
void VoipAnswerReq::clear_answer() {
  answer_ = 0;
  clear_has_answer();
}
::google::protobuf::int32 VoipAnswerReq::answer() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerReq.Answer)
  return answer_;
}
void VoipAnswerReq::set_answer(::google::protobuf::int32 value) {
  set_has_answer();
  answer_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAnswerReq.Answer)
}

// optional .micromsg.VoipRelayData PeerId = 5;
bool VoipAnswerReq::has_peerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VoipAnswerReq::set_has_peerid() {
  _has_bits_[0] |= 0x00000004u;
}
void VoipAnswerReq::clear_has_peerid() {
  _has_bits_[0] &= ~0x00000004u;
}
void VoipAnswerReq::clear_peerid() {
  if (peerid_ != NULL) peerid_->::micromsg::VoipRelayData::Clear();
  clear_has_peerid();
}
const ::micromsg::VoipRelayData& VoipAnswerReq::peerid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerReq.PeerId)
  return peerid_ != NULL ? *peerid_
                         : *::micromsg::VoipRelayData::internal_default_instance();
}
::micromsg::VoipRelayData* VoipAnswerReq::mutable_peerid() {
  set_has_peerid();
  if (peerid_ == NULL) {
    peerid_ = new ::micromsg::VoipRelayData;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipAnswerReq.PeerId)
  return peerid_;
}
::micromsg::VoipRelayData* VoipAnswerReq::release_peerid() {
  // @@protoc_insertion_point(field_release:micromsg.VoipAnswerReq.PeerId)
  clear_has_peerid();
  ::micromsg::VoipRelayData* temp = peerid_;
  peerid_ = NULL;
  return temp;
}
void VoipAnswerReq::set_allocated_peerid(::micromsg::VoipRelayData* peerid) {
  delete peerid_;
  peerid_ = peerid;
  if (peerid) {
    set_has_peerid();
  } else {
    clear_has_peerid();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipAnswerReq.PeerId)
}

// optional .micromsg.VoipRelayData CapInfo = 6;
bool VoipAnswerReq::has_capinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VoipAnswerReq::set_has_capinfo() {
  _has_bits_[0] |= 0x00000008u;
}
void VoipAnswerReq::clear_has_capinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
void VoipAnswerReq::clear_capinfo() {
  if (capinfo_ != NULL) capinfo_->::micromsg::VoipRelayData::Clear();
  clear_has_capinfo();
}
const ::micromsg::VoipRelayData& VoipAnswerReq::capinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerReq.CapInfo)
  return capinfo_ != NULL ? *capinfo_
                         : *::micromsg::VoipRelayData::internal_default_instance();
}
::micromsg::VoipRelayData* VoipAnswerReq::mutable_capinfo() {
  set_has_capinfo();
  if (capinfo_ == NULL) {
    capinfo_ = new ::micromsg::VoipRelayData;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipAnswerReq.CapInfo)
  return capinfo_;
}
::micromsg::VoipRelayData* VoipAnswerReq::release_capinfo() {
  // @@protoc_insertion_point(field_release:micromsg.VoipAnswerReq.CapInfo)
  clear_has_capinfo();
  ::micromsg::VoipRelayData* temp = capinfo_;
  capinfo_ = NULL;
  return temp;
}
void VoipAnswerReq::set_allocated_capinfo(::micromsg::VoipRelayData* capinfo) {
  delete capinfo_;
  capinfo_ = capinfo;
  if (capinfo) {
    set_has_capinfo();
  } else {
    clear_has_capinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipAnswerReq.CapInfo)
}

// required int64 RoomKey = 7;
bool VoipAnswerReq::has_roomkey() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VoipAnswerReq::set_has_roomkey() {
  _has_bits_[0] |= 0x00000040u;
}
void VoipAnswerReq::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000040u;
}
void VoipAnswerReq::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
::google::protobuf::int64 VoipAnswerReq::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerReq.RoomKey)
  return roomkey_;
}
void VoipAnswerReq::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAnswerReq.RoomKey)
}

// required int32 NetType = 8;
bool VoipAnswerReq::has_nettype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void VoipAnswerReq::set_has_nettype() {
  _has_bits_[0] |= 0x00000100u;
}
void VoipAnswerReq::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000100u;
}
void VoipAnswerReq::clear_nettype() {
  nettype_ = 0;
  clear_has_nettype();
}
::google::protobuf::int32 VoipAnswerReq::nettype() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerReq.NetType)
  return nettype_;
}
void VoipAnswerReq::set_nettype(::google::protobuf::int32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAnswerReq.NetType)
}

// optional uint64 Timestamp64 = 9;
bool VoipAnswerReq::has_timestamp64() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VoipAnswerReq::set_has_timestamp64() {
  _has_bits_[0] |= 0x00000080u;
}
void VoipAnswerReq::clear_has_timestamp64() {
  _has_bits_[0] &= ~0x00000080u;
}
void VoipAnswerReq::clear_timestamp64() {
  timestamp64_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp64();
}
::google::protobuf::uint64 VoipAnswerReq::timestamp64() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerReq.Timestamp64)
  return timestamp64_;
}
void VoipAnswerReq::set_timestamp64(::google::protobuf::uint64 value) {
  set_has_timestamp64();
  timestamp64_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAnswerReq.Timestamp64)
}

// optional int32 OnlyAudio = 10;
bool VoipAnswerReq::has_onlyaudio() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void VoipAnswerReq::set_has_onlyaudio() {
  _has_bits_[0] |= 0x00000200u;
}
void VoipAnswerReq::clear_has_onlyaudio() {
  _has_bits_[0] &= ~0x00000200u;
}
void VoipAnswerReq::clear_onlyaudio() {
  onlyaudio_ = 0;
  clear_has_onlyaudio();
}
::google::protobuf::int32 VoipAnswerReq::onlyaudio() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerReq.OnlyAudio)
  return onlyaudio_;
}
void VoipAnswerReq::set_onlyaudio(::google::protobuf::int32 value) {
  set_has_onlyaudio();
  onlyaudio_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAnswerReq.OnlyAudio)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoipAnswerResp::kBaseResponseFieldNumber;
const int VoipAnswerResp::kAddrCountFieldNumber;
const int VoipAnswerResp::kAddrListFieldNumber;
const int VoipAnswerResp::kRoomIdFieldNumber;
const int VoipAnswerResp::kRoomKeyFieldNumber;
const int VoipAnswerResp::kRoomMemberIDFieldNumber;
const int VoipAnswerResp::kRelayDataFieldNumber;
const int VoipAnswerResp::kNetQualityCntFieldNumber;
const int VoipAnswerResp::kNetQualityListFieldNumber;
const int VoipAnswerResp::kAudioTsdfBeyond3GFieldNumber;
const int VoipAnswerResp::kAudioTsdfEdgeFieldNumber;
const int VoipAnswerResp::kPassthroughQosAlgorithmFieldNumber;
const int VoipAnswerResp::kFastPlayRepairFieldNumber;
const int VoipAnswerResp::kNewP2SFieldNumber;
const int VoipAnswerResp::kAudioDTXFieldNumber;
const int VoipAnswerResp::kTcpCntFieldNumber;
const int VoipAnswerResp::kSwitchIntervalFieldNumber;
const int VoipAnswerResp::kHw264SvrCfgFieldNumber;
const int VoipAnswerResp::kAudioEnableRmioAndS3AFieldNumber;
const int VoipAnswerResp::kAudioEnableSpkecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoipAnswerResp::VoipAnswerResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VoipAnswerResp)
}
VoipAnswerResp::VoipAnswerResp(const VoipAnswerResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      addrlist_(from.addrlist_),
      netqualitylist_(from.netqualitylist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_relaydata()) {
    relaydata_ = new ::micromsg::VoipMultiRelayData(*from.relaydata_);
  } else {
    relaydata_ = NULL;
  }
  ::memcpy(&addrcount_, &from.addrcount_,
    reinterpret_cast<char*>(&audioenablespkec_) -
    reinterpret_cast<char*>(&addrcount_) + sizeof(audioenablespkec_));
  // @@protoc_insertion_point(copy_constructor:micromsg.VoipAnswerResp)
}

void VoipAnswerResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&audioenablespkec_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(audioenablespkec_));
}

VoipAnswerResp::~VoipAnswerResp() {
  // @@protoc_insertion_point(destructor:micromsg.VoipAnswerResp)
  SharedDtor();
}

void VoipAnswerResp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete relaydata_;
  }
}

void VoipAnswerResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoipAnswerResp::descriptor() {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoipAnswerResp& VoipAnswerResp::default_instance() {
  protobuf_mmvoip_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoipAnswerResp* VoipAnswerResp::New(::google::protobuf::Arena* arena) const {
  VoipAnswerResp* n = new VoipAnswerResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoipAnswerResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VoipAnswerResp)
  addrlist_.Clear();
  netqualitylist_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_relaydata()) {
      GOOGLE_DCHECK(relaydata_ != NULL);
      relaydata_->::micromsg::VoipMultiRelayData::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&addrcount_, 0, reinterpret_cast<char*>(&audiotsdfbeyond3g_) -
      reinterpret_cast<char*>(&addrcount_) + sizeof(audiotsdfbeyond3g_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&audiotsdfedge_, 0, reinterpret_cast<char*>(&hw264svrcfg_) -
      reinterpret_cast<char*>(&audiotsdfedge_) + sizeof(hw264svrcfg_));
  }
  if (_has_bits_[16 / 32] & 196608u) {
    ::memset(&audioenablermioands3a_, 0, reinterpret_cast<char*>(&audioenablespkec_) -
      reinterpret_cast<char*>(&audioenablermioands3a_) + sizeof(audioenablespkec_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoipAnswerResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VoipAnswerResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 AddrCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_addrcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addrcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.VoipAddr AddrList = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_addrlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 RoomId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_roomid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 RoomKey = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_roomkey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roomkey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 RoomMemberID = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_roommemberid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roommemberid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.VoipMultiRelayData RelayData = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relaydata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 NetQualityCnt = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_netqualitycnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &netqualitycnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.VoipNetQuality NetQualityList = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_netqualitylist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 AudioTsdfBeyond3G = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_audiotsdfbeyond3g();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &audiotsdfbeyond3g_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 AudioTsdfEdge = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_audiotsdfedge();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &audiotsdfedge_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 PassthroughQosAlgorithm = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_passthroughqosalgorithm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &passthroughqosalgorithm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 FastPlayRepair = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_fastplayrepair();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fastplayrepair_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 NewP2S = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_newp2s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newp2s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 AudioDTX = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_audiodtx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &audiodtx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 TcpCnt = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_tcpcnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcpcnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 SwitchInterval = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_switchinterval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &switchinterval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Hw264SvrCfg = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_hw264svrcfg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hw264svrcfg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 AudioEnableRmioAndS3A = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_audioenablermioands3a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &audioenablermioands3a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 AudioEnableSpkec = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_audioenablespkec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &audioenablespkec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VoipAnswerResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VoipAnswerResp)
  return false;
#undef DO_
}

void VoipAnswerResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VoipAnswerResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required int32 AddrCount = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->addrcount(), output);
  }

  // repeated .micromsg.VoipAddr AddrList = 3;
  for (unsigned int i = 0, n = this->addrlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->addrlist(i), output);
  }

  // required int32 RoomId = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->roomid(), output);
  }

  // required int64 RoomKey = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->roomkey(), output);
  }

  // required int32 RoomMemberID = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->roommemberid(), output);
  }

  // required .micromsg.VoipMultiRelayData RelayData = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->relaydata_, output);
  }

  // optional int32 NetQualityCnt = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->netqualitycnt(), output);
  }

  // repeated .micromsg.VoipNetQuality NetQualityList = 9;
  for (unsigned int i = 0, n = this->netqualitylist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->netqualitylist(i), output);
  }

  // optional int32 AudioTsdfBeyond3G = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->audiotsdfbeyond3g(), output);
  }

  // optional int32 AudioTsdfEdge = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->audiotsdfedge(), output);
  }

  // optional int32 PassthroughQosAlgorithm = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->passthroughqosalgorithm(), output);
  }

  // optional int32 FastPlayRepair = 13;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->fastplayrepair(), output);
  }

  // optional int32 NewP2S = 14;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->newp2s(), output);
  }

  // optional int32 AudioDTX = 15;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->audiodtx(), output);
  }

  // optional uint32 TcpCnt = 16;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->tcpcnt(), output);
  }

  // optional uint32 SwitchInterval = 17;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->switchinterval(), output);
  }

  // optional int32 Hw264SvrCfg = 18;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->hw264svrcfg(), output);
  }

  // optional int32 AudioEnableRmioAndS3A = 19;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->audioenablermioands3a(), output);
  }

  // optional int32 AudioEnableSpkec = 20;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->audioenablespkec(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VoipAnswerResp)
}

::google::protobuf::uint8* VoipAnswerResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VoipAnswerResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required int32 AddrCount = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->addrcount(), target);
  }

  // repeated .micromsg.VoipAddr AddrList = 3;
  for (unsigned int i = 0, n = this->addrlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->addrlist(i), deterministic, target);
  }

  // required int32 RoomId = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->roomid(), target);
  }

  // required int64 RoomKey = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->roomkey(), target);
  }

  // required int32 RoomMemberID = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->roommemberid(), target);
  }

  // required .micromsg.VoipMultiRelayData RelayData = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->relaydata_, deterministic, target);
  }

  // optional int32 NetQualityCnt = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->netqualitycnt(), target);
  }

  // repeated .micromsg.VoipNetQuality NetQualityList = 9;
  for (unsigned int i = 0, n = this->netqualitylist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->netqualitylist(i), deterministic, target);
  }

  // optional int32 AudioTsdfBeyond3G = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->audiotsdfbeyond3g(), target);
  }

  // optional int32 AudioTsdfEdge = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->audiotsdfedge(), target);
  }

  // optional int32 PassthroughQosAlgorithm = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->passthroughqosalgorithm(), target);
  }

  // optional int32 FastPlayRepair = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->fastplayrepair(), target);
  }

  // optional int32 NewP2S = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->newp2s(), target);
  }

  // optional int32 AudioDTX = 15;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->audiodtx(), target);
  }

  // optional uint32 TcpCnt = 16;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->tcpcnt(), target);
  }

  // optional uint32 SwitchInterval = 17;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->switchinterval(), target);
  }

  // optional int32 Hw264SvrCfg = 18;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->hw264svrcfg(), target);
  }

  // optional int32 AudioEnableRmioAndS3A = 19;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->audioenablermioands3a(), target);
  }

  // optional int32 AudioEnableSpkec = 20;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->audioenablespkec(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VoipAnswerResp)
  return target;
}

size_t VoipAnswerResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.VoipAnswerResp)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_relaydata()) {
    // required .micromsg.VoipMultiRelayData RelayData = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->relaydata_);
  }

  if (has_addrcount()) {
    // required int32 AddrCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->addrcount());
  }

  if (has_roomid()) {
    // required int32 RoomId = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  if (has_roomkey()) {
    // required int64 RoomKey = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());
  }

  if (has_roommemberid()) {
    // required int32 RoomMemberID = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roommemberid());
  }

  return total_size;
}
size_t VoipAnswerResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VoipAnswerResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required .micromsg.VoipMultiRelayData RelayData = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->relaydata_);

    // required int32 AddrCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->addrcount());

    // required int32 RoomId = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());

    // required int64 RoomKey = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());

    // required int32 RoomMemberID = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roommemberid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.VoipAddr AddrList = 3;
  {
    unsigned int count = this->addrlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->addrlist(i));
    }
  }

  // repeated .micromsg.VoipNetQuality NetQualityList = 9;
  {
    unsigned int count = this->netqualitylist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->netqualitylist(i));
    }
  }

  if (_has_bits_[0 / 32] & 192u) {
    // optional int32 NetQualityCnt = 8;
    if (has_netqualitycnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->netqualitycnt());
    }

    // optional int32 AudioTsdfBeyond3G = 10;
    if (has_audiotsdfbeyond3g()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->audiotsdfbeyond3g());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 AudioTsdfEdge = 11;
    if (has_audiotsdfedge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->audiotsdfedge());
    }

    // optional int32 PassthroughQosAlgorithm = 12;
    if (has_passthroughqosalgorithm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->passthroughqosalgorithm());
    }

    // optional int32 FastPlayRepair = 13;
    if (has_fastplayrepair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fastplayrepair());
    }

    // optional int32 NewP2S = 14;
    if (has_newp2s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->newp2s());
    }

    // optional int32 AudioDTX = 15;
    if (has_audiodtx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->audiodtx());
    }

    // optional uint32 TcpCnt = 16;
    if (has_tcpcnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tcpcnt());
    }

    // optional uint32 SwitchInterval = 17;
    if (has_switchinterval()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->switchinterval());
    }

    // optional int32 Hw264SvrCfg = 18;
    if (has_hw264svrcfg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hw264svrcfg());
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional int32 AudioEnableRmioAndS3A = 19;
    if (has_audioenablermioands3a()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->audioenablermioands3a());
    }

    // optional int32 AudioEnableSpkec = 20;
    if (has_audioenablespkec()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->audioenablespkec());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoipAnswerResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VoipAnswerResp)
  GOOGLE_DCHECK_NE(&from, this);
  const VoipAnswerResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoipAnswerResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VoipAnswerResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VoipAnswerResp)
    MergeFrom(*source);
  }
}

void VoipAnswerResp::MergeFrom(const VoipAnswerResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VoipAnswerResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  addrlist_.MergeFrom(from.addrlist_);
  netqualitylist_.MergeFrom(from.netqualitylist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_relaydata()->::micromsg::VoipMultiRelayData::MergeFrom(from.relaydata());
    }
    if (cached_has_bits & 0x00000004u) {
      addrcount_ = from.addrcount_;
    }
    if (cached_has_bits & 0x00000008u) {
      roomid_ = from.roomid_;
    }
    if (cached_has_bits & 0x00000010u) {
      roomkey_ = from.roomkey_;
    }
    if (cached_has_bits & 0x00000020u) {
      roommemberid_ = from.roommemberid_;
    }
    if (cached_has_bits & 0x00000040u) {
      netqualitycnt_ = from.netqualitycnt_;
    }
    if (cached_has_bits & 0x00000080u) {
      audiotsdfbeyond3g_ = from.audiotsdfbeyond3g_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      audiotsdfedge_ = from.audiotsdfedge_;
    }
    if (cached_has_bits & 0x00000200u) {
      passthroughqosalgorithm_ = from.passthroughqosalgorithm_;
    }
    if (cached_has_bits & 0x00000400u) {
      fastplayrepair_ = from.fastplayrepair_;
    }
    if (cached_has_bits & 0x00000800u) {
      newp2s_ = from.newp2s_;
    }
    if (cached_has_bits & 0x00001000u) {
      audiodtx_ = from.audiodtx_;
    }
    if (cached_has_bits & 0x00002000u) {
      tcpcnt_ = from.tcpcnt_;
    }
    if (cached_has_bits & 0x00004000u) {
      switchinterval_ = from.switchinterval_;
    }
    if (cached_has_bits & 0x00008000u) {
      hw264svrcfg_ = from.hw264svrcfg_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 196608u) {
    if (cached_has_bits & 0x00010000u) {
      audioenablermioands3a_ = from.audioenablermioands3a_;
    }
    if (cached_has_bits & 0x00020000u) {
      audioenablespkec_ = from.audioenablespkec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VoipAnswerResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VoipAnswerResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoipAnswerResp::CopyFrom(const VoipAnswerResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VoipAnswerResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoipAnswerResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->addrlist())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->netqualitylist())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_relaydata()) {
    if (!this->relaydata_->IsInitialized()) return false;
  }
  return true;
}

void VoipAnswerResp::Swap(VoipAnswerResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoipAnswerResp::InternalSwap(VoipAnswerResp* other) {
  addrlist_.InternalSwap(&other->addrlist_);
  netqualitylist_.InternalSwap(&other->netqualitylist_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(relaydata_, other->relaydata_);
  std::swap(addrcount_, other->addrcount_);
  std::swap(roomid_, other->roomid_);
  std::swap(roomkey_, other->roomkey_);
  std::swap(roommemberid_, other->roommemberid_);
  std::swap(netqualitycnt_, other->netqualitycnt_);
  std::swap(audiotsdfbeyond3g_, other->audiotsdfbeyond3g_);
  std::swap(audiotsdfedge_, other->audiotsdfedge_);
  std::swap(passthroughqosalgorithm_, other->passthroughqosalgorithm_);
  std::swap(fastplayrepair_, other->fastplayrepair_);
  std::swap(newp2s_, other->newp2s_);
  std::swap(audiodtx_, other->audiodtx_);
  std::swap(tcpcnt_, other->tcpcnt_);
  std::swap(switchinterval_, other->switchinterval_);
  std::swap(hw264svrcfg_, other->hw264svrcfg_);
  std::swap(audioenablermioands3a_, other->audioenablermioands3a_);
  std::swap(audioenablespkec_, other->audioenablespkec_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoipAnswerResp::GetMetadata() const {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoipAnswerResp

// required .micromsg.BaseResponse BaseResponse = 1;
bool VoipAnswerResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoipAnswerResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void VoipAnswerResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoipAnswerResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& VoipAnswerResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* VoipAnswerResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipAnswerResp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* VoipAnswerResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.VoipAnswerResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void VoipAnswerResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipAnswerResp.BaseResponse)
}

// required int32 AddrCount = 2;
bool VoipAnswerResp::has_addrcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VoipAnswerResp::set_has_addrcount() {
  _has_bits_[0] |= 0x00000004u;
}
void VoipAnswerResp::clear_has_addrcount() {
  _has_bits_[0] &= ~0x00000004u;
}
void VoipAnswerResp::clear_addrcount() {
  addrcount_ = 0;
  clear_has_addrcount();
}
::google::protobuf::int32 VoipAnswerResp::addrcount() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerResp.AddrCount)
  return addrcount_;
}
void VoipAnswerResp::set_addrcount(::google::protobuf::int32 value) {
  set_has_addrcount();
  addrcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAnswerResp.AddrCount)
}

// repeated .micromsg.VoipAddr AddrList = 3;
int VoipAnswerResp::addrlist_size() const {
  return addrlist_.size();
}
void VoipAnswerResp::clear_addrlist() {
  addrlist_.Clear();
}
const ::micromsg::VoipAddr& VoipAnswerResp::addrlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerResp.AddrList)
  return addrlist_.Get(index);
}
::micromsg::VoipAddr* VoipAnswerResp::mutable_addrlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.VoipAnswerResp.AddrList)
  return addrlist_.Mutable(index);
}
::micromsg::VoipAddr* VoipAnswerResp::add_addrlist() {
  // @@protoc_insertion_point(field_add:micromsg.VoipAnswerResp.AddrList)
  return addrlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::VoipAddr >*
VoipAnswerResp::mutable_addrlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.VoipAnswerResp.AddrList)
  return &addrlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::VoipAddr >&
VoipAnswerResp::addrlist() const {
  // @@protoc_insertion_point(field_list:micromsg.VoipAnswerResp.AddrList)
  return addrlist_;
}

// required int32 RoomId = 4;
bool VoipAnswerResp::has_roomid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VoipAnswerResp::set_has_roomid() {
  _has_bits_[0] |= 0x00000008u;
}
void VoipAnswerResp::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000008u;
}
void VoipAnswerResp::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
::google::protobuf::int32 VoipAnswerResp::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerResp.RoomId)
  return roomid_;
}
void VoipAnswerResp::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAnswerResp.RoomId)
}

// required int64 RoomKey = 5;
bool VoipAnswerResp::has_roomkey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VoipAnswerResp::set_has_roomkey() {
  _has_bits_[0] |= 0x00000010u;
}
void VoipAnswerResp::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000010u;
}
void VoipAnswerResp::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
::google::protobuf::int64 VoipAnswerResp::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerResp.RoomKey)
  return roomkey_;
}
void VoipAnswerResp::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAnswerResp.RoomKey)
}

// required int32 RoomMemberID = 6;
bool VoipAnswerResp::has_roommemberid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VoipAnswerResp::set_has_roommemberid() {
  _has_bits_[0] |= 0x00000020u;
}
void VoipAnswerResp::clear_has_roommemberid() {
  _has_bits_[0] &= ~0x00000020u;
}
void VoipAnswerResp::clear_roommemberid() {
  roommemberid_ = 0;
  clear_has_roommemberid();
}
::google::protobuf::int32 VoipAnswerResp::roommemberid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerResp.RoomMemberID)
  return roommemberid_;
}
void VoipAnswerResp::set_roommemberid(::google::protobuf::int32 value) {
  set_has_roommemberid();
  roommemberid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAnswerResp.RoomMemberID)
}

// required .micromsg.VoipMultiRelayData RelayData = 7;
bool VoipAnswerResp::has_relaydata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VoipAnswerResp::set_has_relaydata() {
  _has_bits_[0] |= 0x00000002u;
}
void VoipAnswerResp::clear_has_relaydata() {
  _has_bits_[0] &= ~0x00000002u;
}
void VoipAnswerResp::clear_relaydata() {
  if (relaydata_ != NULL) relaydata_->::micromsg::VoipMultiRelayData::Clear();
  clear_has_relaydata();
}
const ::micromsg::VoipMultiRelayData& VoipAnswerResp::relaydata() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerResp.RelayData)
  return relaydata_ != NULL ? *relaydata_
                         : *::micromsg::VoipMultiRelayData::internal_default_instance();
}
::micromsg::VoipMultiRelayData* VoipAnswerResp::mutable_relaydata() {
  set_has_relaydata();
  if (relaydata_ == NULL) {
    relaydata_ = new ::micromsg::VoipMultiRelayData;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipAnswerResp.RelayData)
  return relaydata_;
}
::micromsg::VoipMultiRelayData* VoipAnswerResp::release_relaydata() {
  // @@protoc_insertion_point(field_release:micromsg.VoipAnswerResp.RelayData)
  clear_has_relaydata();
  ::micromsg::VoipMultiRelayData* temp = relaydata_;
  relaydata_ = NULL;
  return temp;
}
void VoipAnswerResp::set_allocated_relaydata(::micromsg::VoipMultiRelayData* relaydata) {
  delete relaydata_;
  relaydata_ = relaydata;
  if (relaydata) {
    set_has_relaydata();
  } else {
    clear_has_relaydata();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipAnswerResp.RelayData)
}

// optional int32 NetQualityCnt = 8;
bool VoipAnswerResp::has_netqualitycnt() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VoipAnswerResp::set_has_netqualitycnt() {
  _has_bits_[0] |= 0x00000040u;
}
void VoipAnswerResp::clear_has_netqualitycnt() {
  _has_bits_[0] &= ~0x00000040u;
}
void VoipAnswerResp::clear_netqualitycnt() {
  netqualitycnt_ = 0;
  clear_has_netqualitycnt();
}
::google::protobuf::int32 VoipAnswerResp::netqualitycnt() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerResp.NetQualityCnt)
  return netqualitycnt_;
}
void VoipAnswerResp::set_netqualitycnt(::google::protobuf::int32 value) {
  set_has_netqualitycnt();
  netqualitycnt_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAnswerResp.NetQualityCnt)
}

// repeated .micromsg.VoipNetQuality NetQualityList = 9;
int VoipAnswerResp::netqualitylist_size() const {
  return netqualitylist_.size();
}
void VoipAnswerResp::clear_netqualitylist() {
  netqualitylist_.Clear();
}
const ::micromsg::VoipNetQuality& VoipAnswerResp::netqualitylist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerResp.NetQualityList)
  return netqualitylist_.Get(index);
}
::micromsg::VoipNetQuality* VoipAnswerResp::mutable_netqualitylist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.VoipAnswerResp.NetQualityList)
  return netqualitylist_.Mutable(index);
}
::micromsg::VoipNetQuality* VoipAnswerResp::add_netqualitylist() {
  // @@protoc_insertion_point(field_add:micromsg.VoipAnswerResp.NetQualityList)
  return netqualitylist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::VoipNetQuality >*
VoipAnswerResp::mutable_netqualitylist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.VoipAnswerResp.NetQualityList)
  return &netqualitylist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::VoipNetQuality >&
VoipAnswerResp::netqualitylist() const {
  // @@protoc_insertion_point(field_list:micromsg.VoipAnswerResp.NetQualityList)
  return netqualitylist_;
}

// optional int32 AudioTsdfBeyond3G = 10;
bool VoipAnswerResp::has_audiotsdfbeyond3g() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VoipAnswerResp::set_has_audiotsdfbeyond3g() {
  _has_bits_[0] |= 0x00000080u;
}
void VoipAnswerResp::clear_has_audiotsdfbeyond3g() {
  _has_bits_[0] &= ~0x00000080u;
}
void VoipAnswerResp::clear_audiotsdfbeyond3g() {
  audiotsdfbeyond3g_ = 0;
  clear_has_audiotsdfbeyond3g();
}
::google::protobuf::int32 VoipAnswerResp::audiotsdfbeyond3g() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerResp.AudioTsdfBeyond3G)
  return audiotsdfbeyond3g_;
}
void VoipAnswerResp::set_audiotsdfbeyond3g(::google::protobuf::int32 value) {
  set_has_audiotsdfbeyond3g();
  audiotsdfbeyond3g_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAnswerResp.AudioTsdfBeyond3G)
}

// optional int32 AudioTsdfEdge = 11;
bool VoipAnswerResp::has_audiotsdfedge() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void VoipAnswerResp::set_has_audiotsdfedge() {
  _has_bits_[0] |= 0x00000100u;
}
void VoipAnswerResp::clear_has_audiotsdfedge() {
  _has_bits_[0] &= ~0x00000100u;
}
void VoipAnswerResp::clear_audiotsdfedge() {
  audiotsdfedge_ = 0;
  clear_has_audiotsdfedge();
}
::google::protobuf::int32 VoipAnswerResp::audiotsdfedge() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerResp.AudioTsdfEdge)
  return audiotsdfedge_;
}
void VoipAnswerResp::set_audiotsdfedge(::google::protobuf::int32 value) {
  set_has_audiotsdfedge();
  audiotsdfedge_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAnswerResp.AudioTsdfEdge)
}

// optional int32 PassthroughQosAlgorithm = 12;
bool VoipAnswerResp::has_passthroughqosalgorithm() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void VoipAnswerResp::set_has_passthroughqosalgorithm() {
  _has_bits_[0] |= 0x00000200u;
}
void VoipAnswerResp::clear_has_passthroughqosalgorithm() {
  _has_bits_[0] &= ~0x00000200u;
}
void VoipAnswerResp::clear_passthroughqosalgorithm() {
  passthroughqosalgorithm_ = 0;
  clear_has_passthroughqosalgorithm();
}
::google::protobuf::int32 VoipAnswerResp::passthroughqosalgorithm() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerResp.PassthroughQosAlgorithm)
  return passthroughqosalgorithm_;
}
void VoipAnswerResp::set_passthroughqosalgorithm(::google::protobuf::int32 value) {
  set_has_passthroughqosalgorithm();
  passthroughqosalgorithm_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAnswerResp.PassthroughQosAlgorithm)
}

// optional int32 FastPlayRepair = 13;
bool VoipAnswerResp::has_fastplayrepair() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void VoipAnswerResp::set_has_fastplayrepair() {
  _has_bits_[0] |= 0x00000400u;
}
void VoipAnswerResp::clear_has_fastplayrepair() {
  _has_bits_[0] &= ~0x00000400u;
}
void VoipAnswerResp::clear_fastplayrepair() {
  fastplayrepair_ = 0;
  clear_has_fastplayrepair();
}
::google::protobuf::int32 VoipAnswerResp::fastplayrepair() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerResp.FastPlayRepair)
  return fastplayrepair_;
}
void VoipAnswerResp::set_fastplayrepair(::google::protobuf::int32 value) {
  set_has_fastplayrepair();
  fastplayrepair_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAnswerResp.FastPlayRepair)
}

// optional int32 NewP2S = 14;
bool VoipAnswerResp::has_newp2s() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void VoipAnswerResp::set_has_newp2s() {
  _has_bits_[0] |= 0x00000800u;
}
void VoipAnswerResp::clear_has_newp2s() {
  _has_bits_[0] &= ~0x00000800u;
}
void VoipAnswerResp::clear_newp2s() {
  newp2s_ = 0;
  clear_has_newp2s();
}
::google::protobuf::int32 VoipAnswerResp::newp2s() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerResp.NewP2S)
  return newp2s_;
}
void VoipAnswerResp::set_newp2s(::google::protobuf::int32 value) {
  set_has_newp2s();
  newp2s_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAnswerResp.NewP2S)
}

// optional int32 AudioDTX = 15;
bool VoipAnswerResp::has_audiodtx() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void VoipAnswerResp::set_has_audiodtx() {
  _has_bits_[0] |= 0x00001000u;
}
void VoipAnswerResp::clear_has_audiodtx() {
  _has_bits_[0] &= ~0x00001000u;
}
void VoipAnswerResp::clear_audiodtx() {
  audiodtx_ = 0;
  clear_has_audiodtx();
}
::google::protobuf::int32 VoipAnswerResp::audiodtx() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerResp.AudioDTX)
  return audiodtx_;
}
void VoipAnswerResp::set_audiodtx(::google::protobuf::int32 value) {
  set_has_audiodtx();
  audiodtx_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAnswerResp.AudioDTX)
}

// optional uint32 TcpCnt = 16;
bool VoipAnswerResp::has_tcpcnt() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void VoipAnswerResp::set_has_tcpcnt() {
  _has_bits_[0] |= 0x00002000u;
}
void VoipAnswerResp::clear_has_tcpcnt() {
  _has_bits_[0] &= ~0x00002000u;
}
void VoipAnswerResp::clear_tcpcnt() {
  tcpcnt_ = 0u;
  clear_has_tcpcnt();
}
::google::protobuf::uint32 VoipAnswerResp::tcpcnt() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerResp.TcpCnt)
  return tcpcnt_;
}
void VoipAnswerResp::set_tcpcnt(::google::protobuf::uint32 value) {
  set_has_tcpcnt();
  tcpcnt_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAnswerResp.TcpCnt)
}

// optional uint32 SwitchInterval = 17;
bool VoipAnswerResp::has_switchinterval() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void VoipAnswerResp::set_has_switchinterval() {
  _has_bits_[0] |= 0x00004000u;
}
void VoipAnswerResp::clear_has_switchinterval() {
  _has_bits_[0] &= ~0x00004000u;
}
void VoipAnswerResp::clear_switchinterval() {
  switchinterval_ = 0u;
  clear_has_switchinterval();
}
::google::protobuf::uint32 VoipAnswerResp::switchinterval() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerResp.SwitchInterval)
  return switchinterval_;
}
void VoipAnswerResp::set_switchinterval(::google::protobuf::uint32 value) {
  set_has_switchinterval();
  switchinterval_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAnswerResp.SwitchInterval)
}

// optional int32 Hw264SvrCfg = 18;
bool VoipAnswerResp::has_hw264svrcfg() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void VoipAnswerResp::set_has_hw264svrcfg() {
  _has_bits_[0] |= 0x00008000u;
}
void VoipAnswerResp::clear_has_hw264svrcfg() {
  _has_bits_[0] &= ~0x00008000u;
}
void VoipAnswerResp::clear_hw264svrcfg() {
  hw264svrcfg_ = 0;
  clear_has_hw264svrcfg();
}
::google::protobuf::int32 VoipAnswerResp::hw264svrcfg() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerResp.Hw264SvrCfg)
  return hw264svrcfg_;
}
void VoipAnswerResp::set_hw264svrcfg(::google::protobuf::int32 value) {
  set_has_hw264svrcfg();
  hw264svrcfg_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAnswerResp.Hw264SvrCfg)
}

// optional int32 AudioEnableRmioAndS3A = 19;
bool VoipAnswerResp::has_audioenablermioands3a() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void VoipAnswerResp::set_has_audioenablermioands3a() {
  _has_bits_[0] |= 0x00010000u;
}
void VoipAnswerResp::clear_has_audioenablermioands3a() {
  _has_bits_[0] &= ~0x00010000u;
}
void VoipAnswerResp::clear_audioenablermioands3a() {
  audioenablermioands3a_ = 0;
  clear_has_audioenablermioands3a();
}
::google::protobuf::int32 VoipAnswerResp::audioenablermioands3a() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerResp.AudioEnableRmioAndS3A)
  return audioenablermioands3a_;
}
void VoipAnswerResp::set_audioenablermioands3a(::google::protobuf::int32 value) {
  set_has_audioenablermioands3a();
  audioenablermioands3a_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAnswerResp.AudioEnableRmioAndS3A)
}

// optional int32 AudioEnableSpkec = 20;
bool VoipAnswerResp::has_audioenablespkec() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void VoipAnswerResp::set_has_audioenablespkec() {
  _has_bits_[0] |= 0x00020000u;
}
void VoipAnswerResp::clear_has_audioenablespkec() {
  _has_bits_[0] &= ~0x00020000u;
}
void VoipAnswerResp::clear_audioenablespkec() {
  audioenablespkec_ = 0;
  clear_has_audioenablespkec();
}
::google::protobuf::int32 VoipAnswerResp::audioenablespkec() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerResp.AudioEnableSpkec)
  return audioenablespkec_;
}
void VoipAnswerResp::set_audioenablespkec(::google::protobuf::int32 value) {
  set_has_audioenablespkec();
  audioenablespkec_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAnswerResp.AudioEnableSpkec)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoipShutDownReq::kBaseRequestFieldNumber;
const int VoipShutDownReq::kFromUsernameFieldNumber;
const int VoipShutDownReq::kRoomIdFieldNumber;
const int VoipShutDownReq::kRoomKeyFieldNumber;
const int VoipShutDownReq::kReportDataFieldNumber;
const int VoipShutDownReq::kTimestamp64FieldNumber;
const int VoipShutDownReq::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoipShutDownReq::VoipShutDownReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VoipShutDownReq)
}
VoipShutDownReq::VoipShutDownReq(const VoipShutDownReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fromusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fromusername()) {
    fromusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromusername_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_reportdata()) {
    reportdata_ = new ::micromsg::VoipStatReportData(*from.reportdata_);
  } else {
    reportdata_ = NULL;
  }
  ::memcpy(&roomkey_, &from.roomkey_,
    reinterpret_cast<char*>(&timestamp64_) -
    reinterpret_cast<char*>(&roomkey_) + sizeof(timestamp64_));
  // @@protoc_insertion_point(copy_constructor:micromsg.VoipShutDownReq)
}

void VoipShutDownReq::SharedCtor() {
  _cached_size_ = 0;
  fromusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&timestamp64_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(timestamp64_));
}

VoipShutDownReq::~VoipShutDownReq() {
  // @@protoc_insertion_point(destructor:micromsg.VoipShutDownReq)
  SharedDtor();
}

void VoipShutDownReq::SharedDtor() {
  fromusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete reportdata_;
  }
}

void VoipShutDownReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoipShutDownReq::descriptor() {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoipShutDownReq& VoipShutDownReq::default_instance() {
  protobuf_mmvoip_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoipShutDownReq* VoipShutDownReq::New(::google::protobuf::Arena* arena) const {
  VoipShutDownReq* n = new VoipShutDownReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoipShutDownReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VoipShutDownReq)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_fromusername()) {
      GOOGLE_DCHECK(!fromusername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fromusername_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_reportdata()) {
      GOOGLE_DCHECK(reportdata_ != NULL);
      reportdata_->::micromsg::VoipStatReportData::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 120u) {
    ::memset(&roomkey_, 0, reinterpret_cast<char*>(&timestamp64_) -
      reinterpret_cast<char*>(&roomkey_) + sizeof(timestamp64_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoipShutDownReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VoipShutDownReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FromUsername = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fromusername().data(), this->fromusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.VoipShutDownReq.FromUsername");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 RoomId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_roomid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 RoomKey = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_roomkey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roomkey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.VoipStatReportData ReportData = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reportdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 Timestamp64 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_timestamp64();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Duration = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VoipShutDownReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VoipShutDownReq)
  return false;
#undef DO_
}

void VoipShutDownReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VoipShutDownReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string FromUsername = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromusername().data(), this->fromusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VoipShutDownReq.FromUsername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fromusername(), output);
  }

  // required int32 RoomId = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->roomid(), output);
  }

  // required int64 RoomKey = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->roomkey(), output);
  }

  // required .micromsg.VoipStatReportData ReportData = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->reportdata_, output);
  }

  // optional uint64 Timestamp64 = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->timestamp64(), output);
  }

  // optional uint32 Duration = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VoipShutDownReq)
}

::google::protobuf::uint8* VoipShutDownReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VoipShutDownReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string FromUsername = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromusername().data(), this->fromusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VoipShutDownReq.FromUsername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fromusername(), target);
  }

  // required int32 RoomId = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->roomid(), target);
  }

  // required int64 RoomKey = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->roomkey(), target);
  }

  // required .micromsg.VoipStatReportData ReportData = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->reportdata_, deterministic, target);
  }

  // optional uint64 Timestamp64 = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->timestamp64(), target);
  }

  // optional uint32 Duration = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->duration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VoipShutDownReq)
  return target;
}

size_t VoipShutDownReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.VoipShutDownReq)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_reportdata()) {
    // required .micromsg.VoipStatReportData ReportData = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->reportdata_);
  }

  if (has_roomkey()) {
    // required int64 RoomKey = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());
  }

  if (has_roomid()) {
    // required int32 RoomId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  return total_size;
}
size_t VoipShutDownReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VoipShutDownReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001e) ^ 0x0000001e) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.VoipStatReportData ReportData = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->reportdata_);

    // required int64 RoomKey = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());

    // required int32 RoomId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string FromUsername = 2;
  if (has_fromusername()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fromusername());
  }

  if (_has_bits_[0 / 32] & 96u) {
    // optional uint32 Duration = 7;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration());
    }

    // optional uint64 Timestamp64 = 6;
    if (has_timestamp64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp64());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoipShutDownReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VoipShutDownReq)
  GOOGLE_DCHECK_NE(&from, this);
  const VoipShutDownReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoipShutDownReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VoipShutDownReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VoipShutDownReq)
    MergeFrom(*source);
  }
}

void VoipShutDownReq::MergeFrom(const VoipShutDownReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VoipShutDownReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_fromusername();
      fromusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromusername_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_reportdata()->::micromsg::VoipStatReportData::MergeFrom(from.reportdata());
    }
    if (cached_has_bits & 0x00000008u) {
      roomkey_ = from.roomkey_;
    }
    if (cached_has_bits & 0x00000010u) {
      roomid_ = from.roomid_;
    }
    if (cached_has_bits & 0x00000020u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000040u) {
      timestamp64_ = from.timestamp64_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VoipShutDownReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VoipShutDownReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoipShutDownReq::CopyFrom(const VoipShutDownReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VoipShutDownReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoipShutDownReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_reportdata()) {
    if (!this->reportdata_->IsInitialized()) return false;
  }
  return true;
}

void VoipShutDownReq::Swap(VoipShutDownReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoipShutDownReq::InternalSwap(VoipShutDownReq* other) {
  fromusername_.Swap(&other->fromusername_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(reportdata_, other->reportdata_);
  std::swap(roomkey_, other->roomkey_);
  std::swap(roomid_, other->roomid_);
  std::swap(duration_, other->duration_);
  std::swap(timestamp64_, other->timestamp64_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoipShutDownReq::GetMetadata() const {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoipShutDownReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool VoipShutDownReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VoipShutDownReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void VoipShutDownReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void VoipShutDownReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& VoipShutDownReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipShutDownReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* VoipShutDownReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipShutDownReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* VoipShutDownReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.VoipShutDownReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void VoipShutDownReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipShutDownReq.BaseRequest)
}

// optional string FromUsername = 2;
bool VoipShutDownReq::has_fromusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoipShutDownReq::set_has_fromusername() {
  _has_bits_[0] |= 0x00000001u;
}
void VoipShutDownReq::clear_has_fromusername() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoipShutDownReq::clear_fromusername() {
  fromusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fromusername();
}
const ::std::string& VoipShutDownReq::fromusername() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipShutDownReq.FromUsername)
  return fromusername_.GetNoArena();
}
void VoipShutDownReq::set_fromusername(const ::std::string& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VoipShutDownReq.FromUsername)
}
#if LANG_CXX11
void VoipShutDownReq::set_fromusername(::std::string&& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VoipShutDownReq.FromUsername)
}
#endif
void VoipShutDownReq::set_fromusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VoipShutDownReq.FromUsername)
}
void VoipShutDownReq::set_fromusername(const char* value, size_t size) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VoipShutDownReq.FromUsername)
}
::std::string* VoipShutDownReq::mutable_fromusername() {
  set_has_fromusername();
  // @@protoc_insertion_point(field_mutable:micromsg.VoipShutDownReq.FromUsername)
  return fromusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VoipShutDownReq::release_fromusername() {
  // @@protoc_insertion_point(field_release:micromsg.VoipShutDownReq.FromUsername)
  clear_has_fromusername();
  return fromusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VoipShutDownReq::set_allocated_fromusername(::std::string* fromusername) {
  if (fromusername != NULL) {
    set_has_fromusername();
  } else {
    clear_has_fromusername();
  }
  fromusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipShutDownReq.FromUsername)
}

// required int32 RoomId = 3;
bool VoipShutDownReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VoipShutDownReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000010u;
}
void VoipShutDownReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000010u;
}
void VoipShutDownReq::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
::google::protobuf::int32 VoipShutDownReq::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipShutDownReq.RoomId)
  return roomid_;
}
void VoipShutDownReq::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipShutDownReq.RoomId)
}

// required int64 RoomKey = 4;
bool VoipShutDownReq::has_roomkey() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VoipShutDownReq::set_has_roomkey() {
  _has_bits_[0] |= 0x00000008u;
}
void VoipShutDownReq::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000008u;
}
void VoipShutDownReq::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
::google::protobuf::int64 VoipShutDownReq::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipShutDownReq.RoomKey)
  return roomkey_;
}
void VoipShutDownReq::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipShutDownReq.RoomKey)
}

// required .micromsg.VoipStatReportData ReportData = 5;
bool VoipShutDownReq::has_reportdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VoipShutDownReq::set_has_reportdata() {
  _has_bits_[0] |= 0x00000004u;
}
void VoipShutDownReq::clear_has_reportdata() {
  _has_bits_[0] &= ~0x00000004u;
}
void VoipShutDownReq::clear_reportdata() {
  if (reportdata_ != NULL) reportdata_->::micromsg::VoipStatReportData::Clear();
  clear_has_reportdata();
}
const ::micromsg::VoipStatReportData& VoipShutDownReq::reportdata() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipShutDownReq.ReportData)
  return reportdata_ != NULL ? *reportdata_
                         : *::micromsg::VoipStatReportData::internal_default_instance();
}
::micromsg::VoipStatReportData* VoipShutDownReq::mutable_reportdata() {
  set_has_reportdata();
  if (reportdata_ == NULL) {
    reportdata_ = new ::micromsg::VoipStatReportData;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipShutDownReq.ReportData)
  return reportdata_;
}
::micromsg::VoipStatReportData* VoipShutDownReq::release_reportdata() {
  // @@protoc_insertion_point(field_release:micromsg.VoipShutDownReq.ReportData)
  clear_has_reportdata();
  ::micromsg::VoipStatReportData* temp = reportdata_;
  reportdata_ = NULL;
  return temp;
}
void VoipShutDownReq::set_allocated_reportdata(::micromsg::VoipStatReportData* reportdata) {
  delete reportdata_;
  reportdata_ = reportdata;
  if (reportdata) {
    set_has_reportdata();
  } else {
    clear_has_reportdata();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipShutDownReq.ReportData)
}

// optional uint64 Timestamp64 = 6;
bool VoipShutDownReq::has_timestamp64() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VoipShutDownReq::set_has_timestamp64() {
  _has_bits_[0] |= 0x00000040u;
}
void VoipShutDownReq::clear_has_timestamp64() {
  _has_bits_[0] &= ~0x00000040u;
}
void VoipShutDownReq::clear_timestamp64() {
  timestamp64_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp64();
}
::google::protobuf::uint64 VoipShutDownReq::timestamp64() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipShutDownReq.Timestamp64)
  return timestamp64_;
}
void VoipShutDownReq::set_timestamp64(::google::protobuf::uint64 value) {
  set_has_timestamp64();
  timestamp64_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipShutDownReq.Timestamp64)
}

// optional uint32 Duration = 7;
bool VoipShutDownReq::has_duration() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VoipShutDownReq::set_has_duration() {
  _has_bits_[0] |= 0x00000020u;
}
void VoipShutDownReq::clear_has_duration() {
  _has_bits_[0] &= ~0x00000020u;
}
void VoipShutDownReq::clear_duration() {
  duration_ = 0u;
  clear_has_duration();
}
::google::protobuf::uint32 VoipShutDownReq::duration() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipShutDownReq.Duration)
  return duration_;
}
void VoipShutDownReq::set_duration(::google::protobuf::uint32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipShutDownReq.Duration)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoipShutDownResp::kBaseResponseFieldNumber;
const int VoipShutDownResp::kRoomIdFieldNumber;
const int VoipShutDownResp::kRoomKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoipShutDownResp::VoipShutDownResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VoipShutDownResp)
}
VoipShutDownResp::VoipShutDownResp(const VoipShutDownResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  ::memcpy(&roomkey_, &from.roomkey_,
    reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&roomkey_) + sizeof(roomid_));
  // @@protoc_insertion_point(copy_constructor:micromsg.VoipShutDownResp)
}

void VoipShutDownResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(roomid_));
}

VoipShutDownResp::~VoipShutDownResp() {
  // @@protoc_insertion_point(destructor:micromsg.VoipShutDownResp)
  SharedDtor();
}

void VoipShutDownResp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void VoipShutDownResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoipShutDownResp::descriptor() {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoipShutDownResp& VoipShutDownResp::default_instance() {
  protobuf_mmvoip_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoipShutDownResp* VoipShutDownResp::New(::google::protobuf::Arena* arena) const {
  VoipShutDownResp* n = new VoipShutDownResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoipShutDownResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VoipShutDownResp)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&roomkey_, 0, reinterpret_cast<char*>(&roomid_) -
      reinterpret_cast<char*>(&roomkey_) + sizeof(roomid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoipShutDownResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VoipShutDownResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 RoomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_roomid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 RoomKey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_roomkey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roomkey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VoipShutDownResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VoipShutDownResp)
  return false;
#undef DO_
}

void VoipShutDownResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VoipShutDownResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required int32 RoomId = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // required int64 RoomKey = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->roomkey(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VoipShutDownResp)
}

::google::protobuf::uint8* VoipShutDownResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VoipShutDownResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required int32 RoomId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // required int64 RoomKey = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->roomkey(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VoipShutDownResp)
  return target;
}

size_t VoipShutDownResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.VoipShutDownResp)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_roomkey()) {
    // required int64 RoomKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());
  }

  if (has_roomid()) {
    // required int32 RoomId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  return total_size;
}
size_t VoipShutDownResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VoipShutDownResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required int64 RoomKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());

    // required int32 RoomId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoipShutDownResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VoipShutDownResp)
  GOOGLE_DCHECK_NE(&from, this);
  const VoipShutDownResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoipShutDownResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VoipShutDownResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VoipShutDownResp)
    MergeFrom(*source);
  }
}

void VoipShutDownResp::MergeFrom(const VoipShutDownResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VoipShutDownResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      roomkey_ = from.roomkey_;
    }
    if (cached_has_bits & 0x00000004u) {
      roomid_ = from.roomid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VoipShutDownResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VoipShutDownResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoipShutDownResp::CopyFrom(const VoipShutDownResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VoipShutDownResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoipShutDownResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void VoipShutDownResp::Swap(VoipShutDownResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoipShutDownResp::InternalSwap(VoipShutDownResp* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(roomkey_, other->roomkey_);
  std::swap(roomid_, other->roomid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoipShutDownResp::GetMetadata() const {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoipShutDownResp

// required .micromsg.BaseResponse BaseResponse = 1;
bool VoipShutDownResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoipShutDownResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void VoipShutDownResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoipShutDownResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& VoipShutDownResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipShutDownResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* VoipShutDownResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipShutDownResp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* VoipShutDownResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.VoipShutDownResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void VoipShutDownResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipShutDownResp.BaseResponse)
}

// required int32 RoomId = 2;
bool VoipShutDownResp::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VoipShutDownResp::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
void VoipShutDownResp::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
void VoipShutDownResp::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
::google::protobuf::int32 VoipShutDownResp::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipShutDownResp.RoomId)
  return roomid_;
}
void VoipShutDownResp::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipShutDownResp.RoomId)
}

// required int64 RoomKey = 3;
bool VoipShutDownResp::has_roomkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VoipShutDownResp::set_has_roomkey() {
  _has_bits_[0] |= 0x00000002u;
}
void VoipShutDownResp::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000002u;
}
void VoipShutDownResp::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
::google::protobuf::int64 VoipShutDownResp::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipShutDownResp.RoomKey)
  return roomkey_;
}
void VoipShutDownResp::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipShutDownResp.RoomKey)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoipCmdItem::kCmdIdFieldNumber;
const int VoipCmdItem::kCmdBufFieldNumber;
const int VoipCmdItem::kFromUserNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoipCmdItem::VoipCmdItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VoipCmdItem)
}
VoipCmdItem::VoipCmdItem(const VoipCmdItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fromusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fromusername()) {
    fromusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromusername_);
  }
  if (from.has_cmdbuf()) {
    cmdbuf_ = new ::micromsg::SKBuiltinBuffer_t(*from.cmdbuf_);
  } else {
    cmdbuf_ = NULL;
  }
  cmdid_ = from.cmdid_;
  // @@protoc_insertion_point(copy_constructor:micromsg.VoipCmdItem)
}

void VoipCmdItem::SharedCtor() {
  _cached_size_ = 0;
  fromusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cmdbuf_, 0, reinterpret_cast<char*>(&cmdid_) -
    reinterpret_cast<char*>(&cmdbuf_) + sizeof(cmdid_));
}

VoipCmdItem::~VoipCmdItem() {
  // @@protoc_insertion_point(destructor:micromsg.VoipCmdItem)
  SharedDtor();
}

void VoipCmdItem::SharedDtor() {
  fromusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete cmdbuf_;
  }
}

void VoipCmdItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoipCmdItem::descriptor() {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoipCmdItem& VoipCmdItem::default_instance() {
  protobuf_mmvoip_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoipCmdItem* VoipCmdItem::New(::google::protobuf::Arena* arena) const {
  VoipCmdItem* n = new VoipCmdItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoipCmdItem::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VoipCmdItem)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_fromusername()) {
      GOOGLE_DCHECK(!fromusername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fromusername_.UnsafeRawStringPointer())->clear();
    }
    if (has_cmdbuf()) {
      GOOGLE_DCHECK(cmdbuf_ != NULL);
      cmdbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  cmdid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoipCmdItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VoipCmdItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CmdId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_cmdid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmdid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t CmdBuf = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmdbuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FromUserName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fromusername().data(), this->fromusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.VoipCmdItem.FromUserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VoipCmdItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VoipCmdItem)
  return false;
#undef DO_
}

void VoipCmdItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VoipCmdItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 CmdId = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmdid(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t CmdBuf = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->cmdbuf_, output);
  }

  // optional string FromUserName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromusername().data(), this->fromusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VoipCmdItem.FromUserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->fromusername(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VoipCmdItem)
}

::google::protobuf::uint8* VoipCmdItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VoipCmdItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 CmdId = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmdid(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t CmdBuf = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->cmdbuf_, deterministic, target);
  }

  // optional string FromUserName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromusername().data(), this->fromusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VoipCmdItem.FromUserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fromusername(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VoipCmdItem)
  return target;
}

size_t VoipCmdItem::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.VoipCmdItem)
  size_t total_size = 0;

  if (has_cmdbuf()) {
    // required .micromsg.SKBuiltinBuffer_t CmdBuf = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cmdbuf_);
  }

  if (has_cmdid()) {
    // required int32 CmdId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cmdid());
  }

  return total_size;
}
size_t VoipCmdItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VoipCmdItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .micromsg.SKBuiltinBuffer_t CmdBuf = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cmdbuf_);

    // required int32 CmdId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cmdid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string FromUserName = 3;
  if (has_fromusername()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fromusername());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoipCmdItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VoipCmdItem)
  GOOGLE_DCHECK_NE(&from, this);
  const VoipCmdItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoipCmdItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VoipCmdItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VoipCmdItem)
    MergeFrom(*source);
  }
}

void VoipCmdItem::MergeFrom(const VoipCmdItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VoipCmdItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_fromusername();
      fromusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromusername_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_cmdbuf()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.cmdbuf());
    }
    if (cached_has_bits & 0x00000004u) {
      cmdid_ = from.cmdid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VoipCmdItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VoipCmdItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoipCmdItem::CopyFrom(const VoipCmdItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VoipCmdItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoipCmdItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (has_cmdbuf()) {
    if (!this->cmdbuf_->IsInitialized()) return false;
  }
  return true;
}

void VoipCmdItem::Swap(VoipCmdItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoipCmdItem::InternalSwap(VoipCmdItem* other) {
  fromusername_.Swap(&other->fromusername_);
  std::swap(cmdbuf_, other->cmdbuf_);
  std::swap(cmdid_, other->cmdid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoipCmdItem::GetMetadata() const {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoipCmdItem

// required int32 CmdId = 1;
bool VoipCmdItem::has_cmdid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VoipCmdItem::set_has_cmdid() {
  _has_bits_[0] |= 0x00000004u;
}
void VoipCmdItem::clear_has_cmdid() {
  _has_bits_[0] &= ~0x00000004u;
}
void VoipCmdItem::clear_cmdid() {
  cmdid_ = 0;
  clear_has_cmdid();
}
::google::protobuf::int32 VoipCmdItem::cmdid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipCmdItem.CmdId)
  return cmdid_;
}
void VoipCmdItem::set_cmdid(::google::protobuf::int32 value) {
  set_has_cmdid();
  cmdid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipCmdItem.CmdId)
}

// required .micromsg.SKBuiltinBuffer_t CmdBuf = 2;
bool VoipCmdItem::has_cmdbuf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VoipCmdItem::set_has_cmdbuf() {
  _has_bits_[0] |= 0x00000002u;
}
void VoipCmdItem::clear_has_cmdbuf() {
  _has_bits_[0] &= ~0x00000002u;
}
void VoipCmdItem::clear_cmdbuf() {
  if (cmdbuf_ != NULL) cmdbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_cmdbuf();
}
const ::micromsg::SKBuiltinBuffer_t& VoipCmdItem::cmdbuf() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipCmdItem.CmdBuf)
  return cmdbuf_ != NULL ? *cmdbuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* VoipCmdItem::mutable_cmdbuf() {
  set_has_cmdbuf();
  if (cmdbuf_ == NULL) {
    cmdbuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipCmdItem.CmdBuf)
  return cmdbuf_;
}
::micromsg::SKBuiltinBuffer_t* VoipCmdItem::release_cmdbuf() {
  // @@protoc_insertion_point(field_release:micromsg.VoipCmdItem.CmdBuf)
  clear_has_cmdbuf();
  ::micromsg::SKBuiltinBuffer_t* temp = cmdbuf_;
  cmdbuf_ = NULL;
  return temp;
}
void VoipCmdItem::set_allocated_cmdbuf(::micromsg::SKBuiltinBuffer_t* cmdbuf) {
  delete cmdbuf_;
  cmdbuf_ = cmdbuf;
  if (cmdbuf) {
    set_has_cmdbuf();
  } else {
    clear_has_cmdbuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipCmdItem.CmdBuf)
}

// optional string FromUserName = 3;
bool VoipCmdItem::has_fromusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoipCmdItem::set_has_fromusername() {
  _has_bits_[0] |= 0x00000001u;
}
void VoipCmdItem::clear_has_fromusername() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoipCmdItem::clear_fromusername() {
  fromusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fromusername();
}
const ::std::string& VoipCmdItem::fromusername() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipCmdItem.FromUserName)
  return fromusername_.GetNoArena();
}
void VoipCmdItem::set_fromusername(const ::std::string& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VoipCmdItem.FromUserName)
}
#if LANG_CXX11
void VoipCmdItem::set_fromusername(::std::string&& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VoipCmdItem.FromUserName)
}
#endif
void VoipCmdItem::set_fromusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VoipCmdItem.FromUserName)
}
void VoipCmdItem::set_fromusername(const char* value, size_t size) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VoipCmdItem.FromUserName)
}
::std::string* VoipCmdItem::mutable_fromusername() {
  set_has_fromusername();
  // @@protoc_insertion_point(field_mutable:micromsg.VoipCmdItem.FromUserName)
  return fromusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VoipCmdItem::release_fromusername() {
  // @@protoc_insertion_point(field_release:micromsg.VoipCmdItem.FromUserName)
  clear_has_fromusername();
  return fromusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VoipCmdItem::set_allocated_fromusername(::std::string* fromusername) {
  if (fromusername != NULL) {
    set_has_fromusername();
  } else {
    clear_has_fromusername();
  }
  fromusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipCmdItem.FromUserName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoipCmdList::kCountFieldNumber;
const int VoipCmdList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoipCmdList::VoipCmdList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VoipCmdList)
}
VoipCmdList::VoipCmdList(const VoipCmdList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:micromsg.VoipCmdList)
}

void VoipCmdList::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0u;
}

VoipCmdList::~VoipCmdList() {
  // @@protoc_insertion_point(destructor:micromsg.VoipCmdList)
  SharedDtor();
}

void VoipCmdList::SharedDtor() {
}

void VoipCmdList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoipCmdList::descriptor() {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoipCmdList& VoipCmdList::default_instance() {
  protobuf_mmvoip_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoipCmdList* VoipCmdList::New(::google::protobuf::Arena* arena) const {
  VoipCmdList* n = new VoipCmdList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoipCmdList::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VoipCmdList)
  list_.Clear();
  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoipCmdList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VoipCmdList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.VoipCmdItem List = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VoipCmdList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VoipCmdList)
  return false;
#undef DO_
}

void VoipCmdList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VoipCmdList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  // repeated .micromsg.VoipCmdItem List = 2;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VoipCmdList)
}

::google::protobuf::uint8* VoipCmdList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VoipCmdList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }

  // repeated .micromsg.VoipCmdItem List = 2;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->list(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VoipCmdList)
  return target;
}

size_t VoipCmdList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VoipCmdList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 Count = 1;
  if (has_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }
  // repeated .micromsg.VoipCmdItem List = 2;
  {
    unsigned int count = this->list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoipCmdList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VoipCmdList)
  GOOGLE_DCHECK_NE(&from, this);
  const VoipCmdList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoipCmdList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VoipCmdList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VoipCmdList)
    MergeFrom(*source);
  }
}

void VoipCmdList::MergeFrom(const VoipCmdList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VoipCmdList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  if (from.has_count()) {
    set_count(from.count());
  }
}

void VoipCmdList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VoipCmdList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoipCmdList::CopyFrom(const VoipCmdList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VoipCmdList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoipCmdList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void VoipCmdList::Swap(VoipCmdList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoipCmdList::InternalSwap(VoipCmdList* other) {
  list_.InternalSwap(&other->list_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoipCmdList::GetMetadata() const {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoipCmdList

// required uint32 Count = 1;
bool VoipCmdList::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoipCmdList::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
void VoipCmdList::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoipCmdList::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 VoipCmdList::count() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipCmdList.Count)
  return count_;
}
void VoipCmdList::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipCmdList.Count)
}

// repeated .micromsg.VoipCmdItem List = 2;
int VoipCmdList::list_size() const {
  return list_.size();
}
void VoipCmdList::clear_list() {
  list_.Clear();
}
const ::micromsg::VoipCmdItem& VoipCmdList::list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.VoipCmdList.List)
  return list_.Get(index);
}
::micromsg::VoipCmdItem* VoipCmdList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.VoipCmdList.List)
  return list_.Mutable(index);
}
::micromsg::VoipCmdItem* VoipCmdList::add_list() {
  // @@protoc_insertion_point(field_add:micromsg.VoipCmdList.List)
  return list_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::VoipCmdItem >*
VoipCmdList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.VoipCmdList.List)
  return &list_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::VoipCmdItem >&
VoipCmdList::list() const {
  // @@protoc_insertion_point(field_list:micromsg.VoipCmdList.List)
  return list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoipSyncReq::kBaseRequestFieldNumber;
const int VoipSyncReq::kFromUsernameFieldNumber;
const int VoipSyncReq::kRoomIdFieldNumber;
const int VoipSyncReq::kKeyBufFieldNumber;
const int VoipSyncReq::kOpLogFieldNumber;
const int VoipSyncReq::kRoomKeyFieldNumber;
const int VoipSyncReq::kSelectorFieldNumber;
const int VoipSyncReq::kTimestamp64FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoipSyncReq::VoipSyncReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VoipSyncReq)
}
VoipSyncReq::VoipSyncReq(const VoipSyncReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fromusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fromusername()) {
    fromusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromusername_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_keybuf()) {
    keybuf_ = new ::micromsg::SKBuiltinBuffer_t(*from.keybuf_);
  } else {
    keybuf_ = NULL;
  }
  if (from.has_oplog()) {
    oplog_ = new ::micromsg::VoipCmdList(*from.oplog_);
  } else {
    oplog_ = NULL;
  }
  ::memcpy(&roomid_, &from.roomid_,
    reinterpret_cast<char*>(&timestamp64_) -
    reinterpret_cast<char*>(&roomid_) + sizeof(timestamp64_));
  // @@protoc_insertion_point(copy_constructor:micromsg.VoipSyncReq)
}

void VoipSyncReq::SharedCtor() {
  _cached_size_ = 0;
  fromusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&timestamp64_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(timestamp64_));
}

VoipSyncReq::~VoipSyncReq() {
  // @@protoc_insertion_point(destructor:micromsg.VoipSyncReq)
  SharedDtor();
}

void VoipSyncReq::SharedDtor() {
  fromusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete keybuf_;
  }
  if (this != internal_default_instance()) {
    delete oplog_;
  }
}

void VoipSyncReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoipSyncReq::descriptor() {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoipSyncReq& VoipSyncReq::default_instance() {
  protobuf_mmvoip_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoipSyncReq* VoipSyncReq::New(::google::protobuf::Arena* arena) const {
  VoipSyncReq* n = new VoipSyncReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoipSyncReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VoipSyncReq)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_fromusername()) {
      GOOGLE_DCHECK(!fromusername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fromusername_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_keybuf()) {
      GOOGLE_DCHECK(keybuf_ != NULL);
      keybuf_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_oplog()) {
      GOOGLE_DCHECK(oplog_ != NULL);
      oplog_->::micromsg::VoipCmdList::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&roomid_, 0, reinterpret_cast<char*>(&timestamp64_) -
      reinterpret_cast<char*>(&roomid_) + sizeof(timestamp64_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoipSyncReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VoipSyncReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FromUsername = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fromusername().data(), this->fromusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.VoipSyncReq.FromUsername");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 RoomId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_roomid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t KeyBuf = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keybuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.VoipCmdList OpLog = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oplog()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 RoomKey = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_roomkey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roomkey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Selector = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_selector();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selector_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 Timestamp64 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_timestamp64();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VoipSyncReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VoipSyncReq)
  return false;
#undef DO_
}

void VoipSyncReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VoipSyncReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string FromUsername = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromusername().data(), this->fromusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VoipSyncReq.FromUsername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fromusername(), output);
  }

  // required int32 RoomId = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->roomid(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t KeyBuf = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->keybuf_, output);
  }

  // required .micromsg.VoipCmdList OpLog = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->oplog_, output);
  }

  // required int64 RoomKey = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->roomkey(), output);
  }

  // required int32 Selector = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->selector(), output);
  }

  // optional uint64 Timestamp64 = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->timestamp64(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VoipSyncReq)
}

::google::protobuf::uint8* VoipSyncReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VoipSyncReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string FromUsername = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromusername().data(), this->fromusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VoipSyncReq.FromUsername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fromusername(), target);
  }

  // required int32 RoomId = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->roomid(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t KeyBuf = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->keybuf_, deterministic, target);
  }

  // required .micromsg.VoipCmdList OpLog = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->oplog_, deterministic, target);
  }

  // required int64 RoomKey = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->roomkey(), target);
  }

  // required int32 Selector = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->selector(), target);
  }

  // optional uint64 Timestamp64 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->timestamp64(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VoipSyncReq)
  return target;
}

size_t VoipSyncReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.VoipSyncReq)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_keybuf()) {
    // required .micromsg.SKBuiltinBuffer_t KeyBuf = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->keybuf_);
  }

  if (has_oplog()) {
    // required .micromsg.VoipCmdList OpLog = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->oplog_);
  }

  if (has_roomid()) {
    // required int32 RoomId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  if (has_selector()) {
    // required int32 Selector = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->selector());
  }

  if (has_roomkey()) {
    // required int64 RoomKey = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());
  }

  return total_size;
}
size_t VoipSyncReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VoipSyncReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007e) ^ 0x0000007e) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.SKBuiltinBuffer_t KeyBuf = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->keybuf_);

    // required .micromsg.VoipCmdList OpLog = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->oplog_);

    // required int32 RoomId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());

    // required int32 Selector = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->selector());

    // required int64 RoomKey = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string FromUsername = 2;
  if (has_fromusername()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fromusername());
  }

  // optional uint64 Timestamp64 = 8;
  if (has_timestamp64()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp64());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoipSyncReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VoipSyncReq)
  GOOGLE_DCHECK_NE(&from, this);
  const VoipSyncReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoipSyncReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VoipSyncReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VoipSyncReq)
    MergeFrom(*source);
  }
}

void VoipSyncReq::MergeFrom(const VoipSyncReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VoipSyncReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_fromusername();
      fromusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromusername_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_keybuf()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.keybuf());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_oplog()->::micromsg::VoipCmdList::MergeFrom(from.oplog());
    }
    if (cached_has_bits & 0x00000010u) {
      roomid_ = from.roomid_;
    }
    if (cached_has_bits & 0x00000020u) {
      selector_ = from.selector_;
    }
    if (cached_has_bits & 0x00000040u) {
      roomkey_ = from.roomkey_;
    }
    if (cached_has_bits & 0x00000080u) {
      timestamp64_ = from.timestamp64_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VoipSyncReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VoipSyncReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoipSyncReq::CopyFrom(const VoipSyncReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VoipSyncReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoipSyncReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007e) != 0x0000007e) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_keybuf()) {
    if (!this->keybuf_->IsInitialized()) return false;
  }
  if (has_oplog()) {
    if (!this->oplog_->IsInitialized()) return false;
  }
  return true;
}

void VoipSyncReq::Swap(VoipSyncReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoipSyncReq::InternalSwap(VoipSyncReq* other) {
  fromusername_.Swap(&other->fromusername_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(keybuf_, other->keybuf_);
  std::swap(oplog_, other->oplog_);
  std::swap(roomid_, other->roomid_);
  std::swap(selector_, other->selector_);
  std::swap(roomkey_, other->roomkey_);
  std::swap(timestamp64_, other->timestamp64_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoipSyncReq::GetMetadata() const {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoipSyncReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool VoipSyncReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VoipSyncReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void VoipSyncReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void VoipSyncReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& VoipSyncReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSyncReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* VoipSyncReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipSyncReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* VoipSyncReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.VoipSyncReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void VoipSyncReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipSyncReq.BaseRequest)
}

// optional string FromUsername = 2;
bool VoipSyncReq::has_fromusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoipSyncReq::set_has_fromusername() {
  _has_bits_[0] |= 0x00000001u;
}
void VoipSyncReq::clear_has_fromusername() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoipSyncReq::clear_fromusername() {
  fromusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fromusername();
}
const ::std::string& VoipSyncReq::fromusername() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSyncReq.FromUsername)
  return fromusername_.GetNoArena();
}
void VoipSyncReq::set_fromusername(const ::std::string& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VoipSyncReq.FromUsername)
}
#if LANG_CXX11
void VoipSyncReq::set_fromusername(::std::string&& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VoipSyncReq.FromUsername)
}
#endif
void VoipSyncReq::set_fromusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VoipSyncReq.FromUsername)
}
void VoipSyncReq::set_fromusername(const char* value, size_t size) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VoipSyncReq.FromUsername)
}
::std::string* VoipSyncReq::mutable_fromusername() {
  set_has_fromusername();
  // @@protoc_insertion_point(field_mutable:micromsg.VoipSyncReq.FromUsername)
  return fromusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VoipSyncReq::release_fromusername() {
  // @@protoc_insertion_point(field_release:micromsg.VoipSyncReq.FromUsername)
  clear_has_fromusername();
  return fromusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VoipSyncReq::set_allocated_fromusername(::std::string* fromusername) {
  if (fromusername != NULL) {
    set_has_fromusername();
  } else {
    clear_has_fromusername();
  }
  fromusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipSyncReq.FromUsername)
}

// required int32 RoomId = 3;
bool VoipSyncReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VoipSyncReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000010u;
}
void VoipSyncReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000010u;
}
void VoipSyncReq::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
::google::protobuf::int32 VoipSyncReq::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSyncReq.RoomId)
  return roomid_;
}
void VoipSyncReq::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSyncReq.RoomId)
}

// required .micromsg.SKBuiltinBuffer_t KeyBuf = 4;
bool VoipSyncReq::has_keybuf() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VoipSyncReq::set_has_keybuf() {
  _has_bits_[0] |= 0x00000004u;
}
void VoipSyncReq::clear_has_keybuf() {
  _has_bits_[0] &= ~0x00000004u;
}
void VoipSyncReq::clear_keybuf() {
  if (keybuf_ != NULL) keybuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_keybuf();
}
const ::micromsg::SKBuiltinBuffer_t& VoipSyncReq::keybuf() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSyncReq.KeyBuf)
  return keybuf_ != NULL ? *keybuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* VoipSyncReq::mutable_keybuf() {
  set_has_keybuf();
  if (keybuf_ == NULL) {
    keybuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipSyncReq.KeyBuf)
  return keybuf_;
}
::micromsg::SKBuiltinBuffer_t* VoipSyncReq::release_keybuf() {
  // @@protoc_insertion_point(field_release:micromsg.VoipSyncReq.KeyBuf)
  clear_has_keybuf();
  ::micromsg::SKBuiltinBuffer_t* temp = keybuf_;
  keybuf_ = NULL;
  return temp;
}
void VoipSyncReq::set_allocated_keybuf(::micromsg::SKBuiltinBuffer_t* keybuf) {
  delete keybuf_;
  keybuf_ = keybuf;
  if (keybuf) {
    set_has_keybuf();
  } else {
    clear_has_keybuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipSyncReq.KeyBuf)
}

// required .micromsg.VoipCmdList OpLog = 5;
bool VoipSyncReq::has_oplog() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VoipSyncReq::set_has_oplog() {
  _has_bits_[0] |= 0x00000008u;
}
void VoipSyncReq::clear_has_oplog() {
  _has_bits_[0] &= ~0x00000008u;
}
void VoipSyncReq::clear_oplog() {
  if (oplog_ != NULL) oplog_->::micromsg::VoipCmdList::Clear();
  clear_has_oplog();
}
const ::micromsg::VoipCmdList& VoipSyncReq::oplog() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSyncReq.OpLog)
  return oplog_ != NULL ? *oplog_
                         : *::micromsg::VoipCmdList::internal_default_instance();
}
::micromsg::VoipCmdList* VoipSyncReq::mutable_oplog() {
  set_has_oplog();
  if (oplog_ == NULL) {
    oplog_ = new ::micromsg::VoipCmdList;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipSyncReq.OpLog)
  return oplog_;
}
::micromsg::VoipCmdList* VoipSyncReq::release_oplog() {
  // @@protoc_insertion_point(field_release:micromsg.VoipSyncReq.OpLog)
  clear_has_oplog();
  ::micromsg::VoipCmdList* temp = oplog_;
  oplog_ = NULL;
  return temp;
}
void VoipSyncReq::set_allocated_oplog(::micromsg::VoipCmdList* oplog) {
  delete oplog_;
  oplog_ = oplog;
  if (oplog) {
    set_has_oplog();
  } else {
    clear_has_oplog();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipSyncReq.OpLog)
}

// required int64 RoomKey = 6;
bool VoipSyncReq::has_roomkey() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VoipSyncReq::set_has_roomkey() {
  _has_bits_[0] |= 0x00000040u;
}
void VoipSyncReq::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000040u;
}
void VoipSyncReq::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
::google::protobuf::int64 VoipSyncReq::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSyncReq.RoomKey)
  return roomkey_;
}
void VoipSyncReq::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSyncReq.RoomKey)
}

// required int32 Selector = 7;
bool VoipSyncReq::has_selector() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VoipSyncReq::set_has_selector() {
  _has_bits_[0] |= 0x00000020u;
}
void VoipSyncReq::clear_has_selector() {
  _has_bits_[0] &= ~0x00000020u;
}
void VoipSyncReq::clear_selector() {
  selector_ = 0;
  clear_has_selector();
}
::google::protobuf::int32 VoipSyncReq::selector() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSyncReq.Selector)
  return selector_;
}
void VoipSyncReq::set_selector(::google::protobuf::int32 value) {
  set_has_selector();
  selector_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSyncReq.Selector)
}

// optional uint64 Timestamp64 = 8;
bool VoipSyncReq::has_timestamp64() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VoipSyncReq::set_has_timestamp64() {
  _has_bits_[0] |= 0x00000080u;
}
void VoipSyncReq::clear_has_timestamp64() {
  _has_bits_[0] &= ~0x00000080u;
}
void VoipSyncReq::clear_timestamp64() {
  timestamp64_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp64();
}
::google::protobuf::uint64 VoipSyncReq::timestamp64() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSyncReq.Timestamp64)
  return timestamp64_;
}
void VoipSyncReq::set_timestamp64(::google::protobuf::uint64 value) {
  set_has_timestamp64();
  timestamp64_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSyncReq.Timestamp64)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoipHeartBeatReq::kBaseRequestFieldNumber;
const int VoipHeartBeatReq::kRoomIdFieldNumber;
const int VoipHeartBeatReq::kRoomKeyFieldNumber;
const int VoipHeartBeatReq::kTimestampFieldNumber;
const int VoipHeartBeatReq::kTimestamp64FieldNumber;
const int VoipHeartBeatReq::kConnectionTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoipHeartBeatReq::VoipHeartBeatReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VoipHeartBeatReq)
}
VoipHeartBeatReq::VoipHeartBeatReq(const VoipHeartBeatReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&roomkey_, &from.roomkey_,
    reinterpret_cast<char*>(&connectiontype_) -
    reinterpret_cast<char*>(&roomkey_) + sizeof(connectiontype_));
  // @@protoc_insertion_point(copy_constructor:micromsg.VoipHeartBeatReq)
}

void VoipHeartBeatReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&connectiontype_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(connectiontype_));
}

VoipHeartBeatReq::~VoipHeartBeatReq() {
  // @@protoc_insertion_point(destructor:micromsg.VoipHeartBeatReq)
  SharedDtor();
}

void VoipHeartBeatReq::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void VoipHeartBeatReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoipHeartBeatReq::descriptor() {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoipHeartBeatReq& VoipHeartBeatReq::default_instance() {
  protobuf_mmvoip_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoipHeartBeatReq* VoipHeartBeatReq::New(::google::protobuf::Arena* arena) const {
  VoipHeartBeatReq* n = new VoipHeartBeatReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoipHeartBeatReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VoipHeartBeatReq)
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  if (_has_bits_[0 / 32] & 62u) {
    ::memset(&roomkey_, 0, reinterpret_cast<char*>(&connectiontype_) -
      reinterpret_cast<char*>(&roomkey_) + sizeof(connectiontype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoipHeartBeatReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VoipHeartBeatReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 RoomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_roomid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 RoomKey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_roomkey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roomkey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 Timestamp64 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_timestamp64();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ConnectionType = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_connectiontype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &connectiontype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VoipHeartBeatReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VoipHeartBeatReq)
  return false;
#undef DO_
}

void VoipHeartBeatReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VoipHeartBeatReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required int32 RoomId = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // required int64 RoomKey = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->roomkey(), output);
  }

  // optional uint32 Timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->timestamp(), output);
  }

  // optional uint64 Timestamp64 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->timestamp64(), output);
  }

  // optional int32 ConnectionType = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->connectiontype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VoipHeartBeatReq)
}

::google::protobuf::uint8* VoipHeartBeatReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VoipHeartBeatReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required int32 RoomId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // required int64 RoomKey = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->roomkey(), target);
  }

  // optional uint32 Timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->timestamp(), target);
  }

  // optional uint64 Timestamp64 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->timestamp64(), target);
  }

  // optional int32 ConnectionType = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->connectiontype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VoipHeartBeatReq)
  return target;
}

size_t VoipHeartBeatReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.VoipHeartBeatReq)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_roomkey()) {
    // required int64 RoomKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());
  }

  if (has_roomid()) {
    // required int32 RoomId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  return total_size;
}
size_t VoipHeartBeatReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VoipHeartBeatReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required int64 RoomKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());

    // required int32 RoomId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 56u) {
    // optional uint32 Timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional uint64 Timestamp64 = 5;
    if (has_timestamp64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp64());
    }

    // optional int32 ConnectionType = 6;
    if (has_connectiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->connectiontype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoipHeartBeatReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VoipHeartBeatReq)
  GOOGLE_DCHECK_NE(&from, this);
  const VoipHeartBeatReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoipHeartBeatReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VoipHeartBeatReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VoipHeartBeatReq)
    MergeFrom(*source);
  }
}

void VoipHeartBeatReq::MergeFrom(const VoipHeartBeatReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VoipHeartBeatReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      roomkey_ = from.roomkey_;
    }
    if (cached_has_bits & 0x00000004u) {
      roomid_ = from.roomid_;
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      timestamp64_ = from.timestamp64_;
    }
    if (cached_has_bits & 0x00000020u) {
      connectiontype_ = from.connectiontype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VoipHeartBeatReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VoipHeartBeatReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoipHeartBeatReq::CopyFrom(const VoipHeartBeatReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VoipHeartBeatReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoipHeartBeatReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void VoipHeartBeatReq::Swap(VoipHeartBeatReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoipHeartBeatReq::InternalSwap(VoipHeartBeatReq* other) {
  std::swap(baserequest_, other->baserequest_);
  std::swap(roomkey_, other->roomkey_);
  std::swap(roomid_, other->roomid_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(timestamp64_, other->timestamp64_);
  std::swap(connectiontype_, other->connectiontype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoipHeartBeatReq::GetMetadata() const {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoipHeartBeatReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool VoipHeartBeatReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoipHeartBeatReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void VoipHeartBeatReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoipHeartBeatReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& VoipHeartBeatReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipHeartBeatReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* VoipHeartBeatReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipHeartBeatReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* VoipHeartBeatReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.VoipHeartBeatReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void VoipHeartBeatReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipHeartBeatReq.BaseRequest)
}

// required int32 RoomId = 2;
bool VoipHeartBeatReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VoipHeartBeatReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
void VoipHeartBeatReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
void VoipHeartBeatReq::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
::google::protobuf::int32 VoipHeartBeatReq::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipHeartBeatReq.RoomId)
  return roomid_;
}
void VoipHeartBeatReq::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipHeartBeatReq.RoomId)
}

// required int64 RoomKey = 3;
bool VoipHeartBeatReq::has_roomkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VoipHeartBeatReq::set_has_roomkey() {
  _has_bits_[0] |= 0x00000002u;
}
void VoipHeartBeatReq::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000002u;
}
void VoipHeartBeatReq::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
::google::protobuf::int64 VoipHeartBeatReq::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipHeartBeatReq.RoomKey)
  return roomkey_;
}
void VoipHeartBeatReq::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipHeartBeatReq.RoomKey)
}

// optional uint32 Timestamp = 4;
bool VoipHeartBeatReq::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VoipHeartBeatReq::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
void VoipHeartBeatReq::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
void VoipHeartBeatReq::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
::google::protobuf::uint32 VoipHeartBeatReq::timestamp() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipHeartBeatReq.Timestamp)
  return timestamp_;
}
void VoipHeartBeatReq::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipHeartBeatReq.Timestamp)
}

// optional uint64 Timestamp64 = 5;
bool VoipHeartBeatReq::has_timestamp64() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VoipHeartBeatReq::set_has_timestamp64() {
  _has_bits_[0] |= 0x00000010u;
}
void VoipHeartBeatReq::clear_has_timestamp64() {
  _has_bits_[0] &= ~0x00000010u;
}
void VoipHeartBeatReq::clear_timestamp64() {
  timestamp64_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp64();
}
::google::protobuf::uint64 VoipHeartBeatReq::timestamp64() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipHeartBeatReq.Timestamp64)
  return timestamp64_;
}
void VoipHeartBeatReq::set_timestamp64(::google::protobuf::uint64 value) {
  set_has_timestamp64();
  timestamp64_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipHeartBeatReq.Timestamp64)
}

// optional int32 ConnectionType = 6;
bool VoipHeartBeatReq::has_connectiontype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VoipHeartBeatReq::set_has_connectiontype() {
  _has_bits_[0] |= 0x00000020u;
}
void VoipHeartBeatReq::clear_has_connectiontype() {
  _has_bits_[0] &= ~0x00000020u;
}
void VoipHeartBeatReq::clear_connectiontype() {
  connectiontype_ = 0;
  clear_has_connectiontype();
}
::google::protobuf::int32 VoipHeartBeatReq::connectiontype() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipHeartBeatReq.ConnectionType)
  return connectiontype_;
}
void VoipHeartBeatReq::set_connectiontype(::google::protobuf::int32 value) {
  set_has_connectiontype();
  connectiontype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipHeartBeatReq.ConnectionType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoipHeartBeatResp::kBaseResponseFieldNumber;
const int VoipHeartBeatResp::kRoomIdFieldNumber;
const int VoipHeartBeatResp::kRoomKeyFieldNumber;
const int VoipHeartBeatResp::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoipHeartBeatResp::VoipHeartBeatResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VoipHeartBeatResp)
}
VoipHeartBeatResp::VoipHeartBeatResp(const VoipHeartBeatResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  ::memcpy(&roomkey_, &from.roomkey_,
    reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&roomkey_) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:micromsg.VoipHeartBeatResp)
}

void VoipHeartBeatResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(timestamp_));
}

VoipHeartBeatResp::~VoipHeartBeatResp() {
  // @@protoc_insertion_point(destructor:micromsg.VoipHeartBeatResp)
  SharedDtor();
}

void VoipHeartBeatResp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void VoipHeartBeatResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoipHeartBeatResp::descriptor() {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoipHeartBeatResp& VoipHeartBeatResp::default_instance() {
  protobuf_mmvoip_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoipHeartBeatResp* VoipHeartBeatResp::New(::google::protobuf::Arena* arena) const {
  VoipHeartBeatResp* n = new VoipHeartBeatResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoipHeartBeatResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VoipHeartBeatResp)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&roomkey_, 0, reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&roomkey_) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoipHeartBeatResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VoipHeartBeatResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 RoomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_roomid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 RoomKey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_roomkey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roomkey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VoipHeartBeatResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VoipHeartBeatResp)
  return false;
#undef DO_
}

void VoipHeartBeatResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VoipHeartBeatResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required int32 RoomId = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // required int64 RoomKey = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->roomkey(), output);
  }

  // optional uint32 Timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VoipHeartBeatResp)
}

::google::protobuf::uint8* VoipHeartBeatResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VoipHeartBeatResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required int32 RoomId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // required int64 RoomKey = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->roomkey(), target);
  }

  // optional uint32 Timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VoipHeartBeatResp)
  return target;
}

size_t VoipHeartBeatResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.VoipHeartBeatResp)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_roomkey()) {
    // required int64 RoomKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());
  }

  if (has_roomid()) {
    // required int32 RoomId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  return total_size;
}
size_t VoipHeartBeatResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VoipHeartBeatResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required int64 RoomKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());

    // required int32 RoomId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint32 Timestamp = 4;
  if (has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoipHeartBeatResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VoipHeartBeatResp)
  GOOGLE_DCHECK_NE(&from, this);
  const VoipHeartBeatResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoipHeartBeatResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VoipHeartBeatResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VoipHeartBeatResp)
    MergeFrom(*source);
  }
}

void VoipHeartBeatResp::MergeFrom(const VoipHeartBeatResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VoipHeartBeatResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      roomkey_ = from.roomkey_;
    }
    if (cached_has_bits & 0x00000004u) {
      roomid_ = from.roomid_;
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VoipHeartBeatResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VoipHeartBeatResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoipHeartBeatResp::CopyFrom(const VoipHeartBeatResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VoipHeartBeatResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoipHeartBeatResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void VoipHeartBeatResp::Swap(VoipHeartBeatResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoipHeartBeatResp::InternalSwap(VoipHeartBeatResp* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(roomkey_, other->roomkey_);
  std::swap(roomid_, other->roomid_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoipHeartBeatResp::GetMetadata() const {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoipHeartBeatResp

// required .micromsg.BaseResponse BaseResponse = 1;
bool VoipHeartBeatResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoipHeartBeatResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void VoipHeartBeatResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoipHeartBeatResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& VoipHeartBeatResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipHeartBeatResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* VoipHeartBeatResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipHeartBeatResp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* VoipHeartBeatResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.VoipHeartBeatResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void VoipHeartBeatResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipHeartBeatResp.BaseResponse)
}

// required int32 RoomId = 2;
bool VoipHeartBeatResp::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VoipHeartBeatResp::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
void VoipHeartBeatResp::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
void VoipHeartBeatResp::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
::google::protobuf::int32 VoipHeartBeatResp::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipHeartBeatResp.RoomId)
  return roomid_;
}
void VoipHeartBeatResp::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipHeartBeatResp.RoomId)
}

// required int64 RoomKey = 3;
bool VoipHeartBeatResp::has_roomkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VoipHeartBeatResp::set_has_roomkey() {
  _has_bits_[0] |= 0x00000002u;
}
void VoipHeartBeatResp::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000002u;
}
void VoipHeartBeatResp::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
::google::protobuf::int64 VoipHeartBeatResp::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipHeartBeatResp.RoomKey)
  return roomkey_;
}
void VoipHeartBeatResp::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipHeartBeatResp.RoomKey)
}

// optional uint32 Timestamp = 4;
bool VoipHeartBeatResp::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VoipHeartBeatResp::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
void VoipHeartBeatResp::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
void VoipHeartBeatResp::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
::google::protobuf::uint32 VoipHeartBeatResp::timestamp() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipHeartBeatResp.Timestamp)
  return timestamp_;
}
void VoipHeartBeatResp::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipHeartBeatResp.Timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoipSyncResp::kBaseResponseFieldNumber;
const int VoipSyncResp::kRoomIdFieldNumber;
const int VoipSyncResp::kKeyBufFieldNumber;
const int VoipSyncResp::kCmdListFieldNumber;
const int VoipSyncResp::kContinueFlagFieldNumber;
const int VoipSyncResp::kRoomKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoipSyncResp::VoipSyncResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VoipSyncResp)
}
VoipSyncResp::VoipSyncResp(const VoipSyncResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_keybuf()) {
    keybuf_ = new ::micromsg::SKBuiltinBuffer_t(*from.keybuf_);
  } else {
    keybuf_ = NULL;
  }
  if (from.has_cmdlist()) {
    cmdlist_ = new ::micromsg::VoipCmdList(*from.cmdlist_);
  } else {
    cmdlist_ = NULL;
  }
  ::memcpy(&roomid_, &from.roomid_,
    reinterpret_cast<char*>(&roomkey_) -
    reinterpret_cast<char*>(&roomid_) + sizeof(roomkey_));
  // @@protoc_insertion_point(copy_constructor:micromsg.VoipSyncResp)
}

void VoipSyncResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&roomkey_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(roomkey_));
}

VoipSyncResp::~VoipSyncResp() {
  // @@protoc_insertion_point(destructor:micromsg.VoipSyncResp)
  SharedDtor();
}

void VoipSyncResp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete keybuf_;
  }
  if (this != internal_default_instance()) {
    delete cmdlist_;
  }
}

void VoipSyncResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoipSyncResp::descriptor() {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoipSyncResp& VoipSyncResp::default_instance() {
  protobuf_mmvoip_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoipSyncResp* VoipSyncResp::New(::google::protobuf::Arena* arena) const {
  VoipSyncResp* n = new VoipSyncResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoipSyncResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VoipSyncResp)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_keybuf()) {
      GOOGLE_DCHECK(keybuf_ != NULL);
      keybuf_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_cmdlist()) {
      GOOGLE_DCHECK(cmdlist_ != NULL);
      cmdlist_->::micromsg::VoipCmdList::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 56u) {
    ::memset(&roomid_, 0, reinterpret_cast<char*>(&roomkey_) -
      reinterpret_cast<char*>(&roomid_) + sizeof(roomkey_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoipSyncResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VoipSyncResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 RoomId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_roomid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t KeyBuf = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keybuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.VoipCmdList CmdList = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmdlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 ContinueFlag = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_continueflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &continueflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 RoomKey = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_roomkey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roomkey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VoipSyncResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VoipSyncResp)
  return false;
#undef DO_
}

void VoipSyncResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VoipSyncResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required int32 RoomId = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->roomid(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t KeyBuf = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->keybuf_, output);
  }

  // required .micromsg.VoipCmdList CmdList = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->cmdlist_, output);
  }

  // required int32 ContinueFlag = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->continueflag(), output);
  }

  // required int64 RoomKey = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->roomkey(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VoipSyncResp)
}

::google::protobuf::uint8* VoipSyncResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VoipSyncResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required int32 RoomId = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->roomid(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t KeyBuf = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->keybuf_, deterministic, target);
  }

  // required .micromsg.VoipCmdList CmdList = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->cmdlist_, deterministic, target);
  }

  // required int32 ContinueFlag = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->continueflag(), target);
  }

  // required int64 RoomKey = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->roomkey(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VoipSyncResp)
  return target;
}

size_t VoipSyncResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.VoipSyncResp)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_keybuf()) {
    // required .micromsg.SKBuiltinBuffer_t KeyBuf = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->keybuf_);
  }

  if (has_cmdlist()) {
    // required .micromsg.VoipCmdList CmdList = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cmdlist_);
  }

  if (has_roomid()) {
    // required int32 RoomId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  if (has_continueflag()) {
    // required int32 ContinueFlag = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->continueflag());
  }

  if (has_roomkey()) {
    // required int64 RoomKey = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());
  }

  return total_size;
}
size_t VoipSyncResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VoipSyncResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required .micromsg.SKBuiltinBuffer_t KeyBuf = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->keybuf_);

    // required .micromsg.VoipCmdList CmdList = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cmdlist_);

    // required int32 RoomId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());

    // required int32 ContinueFlag = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->continueflag());

    // required int64 RoomKey = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoipSyncResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VoipSyncResp)
  GOOGLE_DCHECK_NE(&from, this);
  const VoipSyncResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoipSyncResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VoipSyncResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VoipSyncResp)
    MergeFrom(*source);
  }
}

void VoipSyncResp::MergeFrom(const VoipSyncResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VoipSyncResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_keybuf()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.keybuf());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_cmdlist()->::micromsg::VoipCmdList::MergeFrom(from.cmdlist());
    }
    if (cached_has_bits & 0x00000008u) {
      roomid_ = from.roomid_;
    }
    if (cached_has_bits & 0x00000010u) {
      continueflag_ = from.continueflag_;
    }
    if (cached_has_bits & 0x00000020u) {
      roomkey_ = from.roomkey_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VoipSyncResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VoipSyncResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoipSyncResp::CopyFrom(const VoipSyncResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VoipSyncResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoipSyncResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_keybuf()) {
    if (!this->keybuf_->IsInitialized()) return false;
  }
  if (has_cmdlist()) {
    if (!this->cmdlist_->IsInitialized()) return false;
  }
  return true;
}

void VoipSyncResp::Swap(VoipSyncResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoipSyncResp::InternalSwap(VoipSyncResp* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(keybuf_, other->keybuf_);
  std::swap(cmdlist_, other->cmdlist_);
  std::swap(roomid_, other->roomid_);
  std::swap(continueflag_, other->continueflag_);
  std::swap(roomkey_, other->roomkey_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoipSyncResp::GetMetadata() const {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoipSyncResp

// required .micromsg.BaseResponse BaseResponse = 1;
bool VoipSyncResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoipSyncResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void VoipSyncResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoipSyncResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& VoipSyncResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSyncResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* VoipSyncResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipSyncResp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* VoipSyncResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.VoipSyncResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void VoipSyncResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipSyncResp.BaseResponse)
}

// required int32 RoomId = 3;
bool VoipSyncResp::has_roomid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VoipSyncResp::set_has_roomid() {
  _has_bits_[0] |= 0x00000008u;
}
void VoipSyncResp::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000008u;
}
void VoipSyncResp::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
::google::protobuf::int32 VoipSyncResp::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSyncResp.RoomId)
  return roomid_;
}
void VoipSyncResp::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSyncResp.RoomId)
}

// required .micromsg.SKBuiltinBuffer_t KeyBuf = 4;
bool VoipSyncResp::has_keybuf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VoipSyncResp::set_has_keybuf() {
  _has_bits_[0] |= 0x00000002u;
}
void VoipSyncResp::clear_has_keybuf() {
  _has_bits_[0] &= ~0x00000002u;
}
void VoipSyncResp::clear_keybuf() {
  if (keybuf_ != NULL) keybuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_keybuf();
}
const ::micromsg::SKBuiltinBuffer_t& VoipSyncResp::keybuf() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSyncResp.KeyBuf)
  return keybuf_ != NULL ? *keybuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* VoipSyncResp::mutable_keybuf() {
  set_has_keybuf();
  if (keybuf_ == NULL) {
    keybuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipSyncResp.KeyBuf)
  return keybuf_;
}
::micromsg::SKBuiltinBuffer_t* VoipSyncResp::release_keybuf() {
  // @@protoc_insertion_point(field_release:micromsg.VoipSyncResp.KeyBuf)
  clear_has_keybuf();
  ::micromsg::SKBuiltinBuffer_t* temp = keybuf_;
  keybuf_ = NULL;
  return temp;
}
void VoipSyncResp::set_allocated_keybuf(::micromsg::SKBuiltinBuffer_t* keybuf) {
  delete keybuf_;
  keybuf_ = keybuf;
  if (keybuf) {
    set_has_keybuf();
  } else {
    clear_has_keybuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipSyncResp.KeyBuf)
}

// required .micromsg.VoipCmdList CmdList = 5;
bool VoipSyncResp::has_cmdlist() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VoipSyncResp::set_has_cmdlist() {
  _has_bits_[0] |= 0x00000004u;
}
void VoipSyncResp::clear_has_cmdlist() {
  _has_bits_[0] &= ~0x00000004u;
}
void VoipSyncResp::clear_cmdlist() {
  if (cmdlist_ != NULL) cmdlist_->::micromsg::VoipCmdList::Clear();
  clear_has_cmdlist();
}
const ::micromsg::VoipCmdList& VoipSyncResp::cmdlist() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSyncResp.CmdList)
  return cmdlist_ != NULL ? *cmdlist_
                         : *::micromsg::VoipCmdList::internal_default_instance();
}
::micromsg::VoipCmdList* VoipSyncResp::mutable_cmdlist() {
  set_has_cmdlist();
  if (cmdlist_ == NULL) {
    cmdlist_ = new ::micromsg::VoipCmdList;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipSyncResp.CmdList)
  return cmdlist_;
}
::micromsg::VoipCmdList* VoipSyncResp::release_cmdlist() {
  // @@protoc_insertion_point(field_release:micromsg.VoipSyncResp.CmdList)
  clear_has_cmdlist();
  ::micromsg::VoipCmdList* temp = cmdlist_;
  cmdlist_ = NULL;
  return temp;
}
void VoipSyncResp::set_allocated_cmdlist(::micromsg::VoipCmdList* cmdlist) {
  delete cmdlist_;
  cmdlist_ = cmdlist;
  if (cmdlist) {
    set_has_cmdlist();
  } else {
    clear_has_cmdlist();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipSyncResp.CmdList)
}

// required int32 ContinueFlag = 7;
bool VoipSyncResp::has_continueflag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VoipSyncResp::set_has_continueflag() {
  _has_bits_[0] |= 0x00000010u;
}
void VoipSyncResp::clear_has_continueflag() {
  _has_bits_[0] &= ~0x00000010u;
}
void VoipSyncResp::clear_continueflag() {
  continueflag_ = 0;
  clear_has_continueflag();
}
::google::protobuf::int32 VoipSyncResp::continueflag() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSyncResp.ContinueFlag)
  return continueflag_;
}
void VoipSyncResp::set_continueflag(::google::protobuf::int32 value) {
  set_has_continueflag();
  continueflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSyncResp.ContinueFlag)
}

// required int64 RoomKey = 8;
bool VoipSyncResp::has_roomkey() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VoipSyncResp::set_has_roomkey() {
  _has_bits_[0] |= 0x00000020u;
}
void VoipSyncResp::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000020u;
}
void VoipSyncResp::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
::google::protobuf::int64 VoipSyncResp::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSyncResp.RoomKey)
  return roomkey_;
}
void VoipSyncResp::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSyncResp.RoomKey)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoipStatusItem::kUsernameFieldNumber;
const int VoipStatusItem::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoipStatusItem::VoipStatusItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VoipStatusItem)
}
VoipStatusItem::VoipStatusItem(const VoipStatusItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:micromsg.VoipStatusItem)
}

void VoipStatusItem::SharedCtor() {
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

VoipStatusItem::~VoipStatusItem() {
  // @@protoc_insertion_point(destructor:micromsg.VoipStatusItem)
  SharedDtor();
}

void VoipStatusItem::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VoipStatusItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoipStatusItem::descriptor() {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoipStatusItem& VoipStatusItem::default_instance() {
  protobuf_mmvoip_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoipStatusItem* VoipStatusItem::New(::google::protobuf::Arena* arena) const {
  VoipStatusItem* n = new VoipStatusItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoipStatusItem::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VoipStatusItem)
  if (has_username()) {
    GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*username_.UnsafeRawStringPointer())->clear();
  }
  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoipStatusItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VoipStatusItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Username = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.VoipStatusItem.Username");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VoipStatusItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VoipStatusItem)
  return false;
#undef DO_
}

void VoipStatusItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VoipStatusItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Username = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VoipStatusItem.Username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // required int32 Status = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VoipStatusItem)
}

::google::protobuf::uint8* VoipStatusItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VoipStatusItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Username = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VoipStatusItem.Username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // required int32 Status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VoipStatusItem)
  return target;
}

size_t VoipStatusItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VoipStatusItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required int32 Status = 2;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }
  // optional string Username = 1;
  if (has_username()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoipStatusItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VoipStatusItem)
  GOOGLE_DCHECK_NE(&from, this);
  const VoipStatusItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoipStatusItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VoipStatusItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VoipStatusItem)
    MergeFrom(*source);
  }
}

void VoipStatusItem::MergeFrom(const VoipStatusItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VoipStatusItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VoipStatusItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VoipStatusItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoipStatusItem::CopyFrom(const VoipStatusItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VoipStatusItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoipStatusItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void VoipStatusItem::Swap(VoipStatusItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoipStatusItem::InternalSwap(VoipStatusItem* other) {
  username_.Swap(&other->username_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoipStatusItem::GetMetadata() const {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoipStatusItem

// optional string Username = 1;
bool VoipStatusItem::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoipStatusItem::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void VoipStatusItem::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoipStatusItem::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& VoipStatusItem::username() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipStatusItem.Username)
  return username_.GetNoArena();
}
void VoipStatusItem::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VoipStatusItem.Username)
}
#if LANG_CXX11
void VoipStatusItem::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VoipStatusItem.Username)
}
#endif
void VoipStatusItem::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VoipStatusItem.Username)
}
void VoipStatusItem::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VoipStatusItem.Username)
}
::std::string* VoipStatusItem::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.VoipStatusItem.Username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VoipStatusItem::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.VoipStatusItem.Username)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VoipStatusItem::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipStatusItem.Username)
}

// required int32 Status = 2;
bool VoipStatusItem::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VoipStatusItem::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void VoipStatusItem::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void VoipStatusItem::clear_status() {
  status_ = 0;
  clear_has_status();
}
::google::protobuf::int32 VoipStatusItem::status() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipStatusItem.Status)
  return status_;
}
void VoipStatusItem::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipStatusItem.Status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoipGetRoomInfoReq::kBaseRequestFieldNumber;
const int VoipGetRoomInfoReq::kRoomIdFieldNumber;
const int VoipGetRoomInfoReq::kRoomKeyFieldNumber;
const int VoipGetRoomInfoReq::kCallerUserNameFieldNumber;
const int VoipGetRoomInfoReq::kTypeFieldNumber;
const int VoipGetRoomInfoReq::kTimestamp64FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoipGetRoomInfoReq::VoipGetRoomInfoReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VoipGetRoomInfoReq)
}
VoipGetRoomInfoReq::VoipGetRoomInfoReq(const VoipGetRoomInfoReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  callerusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_callerusername()) {
    callerusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.callerusername_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&roomkey_, &from.roomkey_,
    reinterpret_cast<char*>(&timestamp64_) -
    reinterpret_cast<char*>(&roomkey_) + sizeof(timestamp64_));
  // @@protoc_insertion_point(copy_constructor:micromsg.VoipGetRoomInfoReq)
}

void VoipGetRoomInfoReq::SharedCtor() {
  _cached_size_ = 0;
  callerusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&timestamp64_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(timestamp64_));
}

VoipGetRoomInfoReq::~VoipGetRoomInfoReq() {
  // @@protoc_insertion_point(destructor:micromsg.VoipGetRoomInfoReq)
  SharedDtor();
}

void VoipGetRoomInfoReq::SharedDtor() {
  callerusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void VoipGetRoomInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoipGetRoomInfoReq::descriptor() {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoipGetRoomInfoReq& VoipGetRoomInfoReq::default_instance() {
  protobuf_mmvoip_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoipGetRoomInfoReq* VoipGetRoomInfoReq::New(::google::protobuf::Arena* arena) const {
  VoipGetRoomInfoReq* n = new VoipGetRoomInfoReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoipGetRoomInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VoipGetRoomInfoReq)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_callerusername()) {
      GOOGLE_DCHECK(!callerusername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*callerusername_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 60u) {
    ::memset(&roomkey_, 0, reinterpret_cast<char*>(&timestamp64_) -
      reinterpret_cast<char*>(&roomkey_) + sizeof(timestamp64_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoipGetRoomInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VoipGetRoomInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 RoomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_roomid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 RoomKey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_roomkey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roomkey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string CallerUserName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callerusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->callerusername().data(), this->callerusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.VoipGetRoomInfoReq.CallerUserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 Timestamp64 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_timestamp64();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VoipGetRoomInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VoipGetRoomInfoReq)
  return false;
#undef DO_
}

void VoipGetRoomInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VoipGetRoomInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required int32 RoomId = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // required int64 RoomKey = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->roomkey(), output);
  }

  // optional string CallerUserName = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callerusername().data(), this->callerusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VoipGetRoomInfoReq.CallerUserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->callerusername(), output);
  }

  // optional uint32 Type = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->type(), output);
  }

  // optional uint64 Timestamp64 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->timestamp64(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VoipGetRoomInfoReq)
}

::google::protobuf::uint8* VoipGetRoomInfoReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VoipGetRoomInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required int32 RoomId = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // required int64 RoomKey = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->roomkey(), target);
  }

  // optional string CallerUserName = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callerusername().data(), this->callerusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VoipGetRoomInfoReq.CallerUserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->callerusername(), target);
  }

  // optional uint32 Type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->type(), target);
  }

  // optional uint64 Timestamp64 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->timestamp64(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VoipGetRoomInfoReq)
  return target;
}

size_t VoipGetRoomInfoReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.VoipGetRoomInfoReq)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_roomkey()) {
    // required int64 RoomKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());
  }

  if (has_roomid()) {
    // required int32 RoomId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  return total_size;
}
size_t VoipGetRoomInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VoipGetRoomInfoReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required int64 RoomKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());

    // required int32 RoomId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string CallerUserName = 4;
  if (has_callerusername()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->callerusername());
  }

  if (_has_bits_[0 / 32] & 48u) {
    // optional uint32 Type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint64 Timestamp64 = 6;
    if (has_timestamp64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp64());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoipGetRoomInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VoipGetRoomInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  const VoipGetRoomInfoReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoipGetRoomInfoReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VoipGetRoomInfoReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VoipGetRoomInfoReq)
    MergeFrom(*source);
  }
}

void VoipGetRoomInfoReq::MergeFrom(const VoipGetRoomInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VoipGetRoomInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_callerusername();
      callerusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.callerusername_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000004u) {
      roomkey_ = from.roomkey_;
    }
    if (cached_has_bits & 0x00000008u) {
      roomid_ = from.roomid_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      timestamp64_ = from.timestamp64_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VoipGetRoomInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VoipGetRoomInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoipGetRoomInfoReq::CopyFrom(const VoipGetRoomInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VoipGetRoomInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoipGetRoomInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void VoipGetRoomInfoReq::Swap(VoipGetRoomInfoReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoipGetRoomInfoReq::InternalSwap(VoipGetRoomInfoReq* other) {
  callerusername_.Swap(&other->callerusername_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(roomkey_, other->roomkey_);
  std::swap(roomid_, other->roomid_);
  std::swap(type_, other->type_);
  std::swap(timestamp64_, other->timestamp64_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoipGetRoomInfoReq::GetMetadata() const {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoipGetRoomInfoReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool VoipGetRoomInfoReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VoipGetRoomInfoReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void VoipGetRoomInfoReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void VoipGetRoomInfoReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& VoipGetRoomInfoReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipGetRoomInfoReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* VoipGetRoomInfoReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipGetRoomInfoReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* VoipGetRoomInfoReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.VoipGetRoomInfoReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void VoipGetRoomInfoReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipGetRoomInfoReq.BaseRequest)
}

// required int32 RoomId = 2;
bool VoipGetRoomInfoReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VoipGetRoomInfoReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000008u;
}
void VoipGetRoomInfoReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000008u;
}
void VoipGetRoomInfoReq::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
::google::protobuf::int32 VoipGetRoomInfoReq::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipGetRoomInfoReq.RoomId)
  return roomid_;
}
void VoipGetRoomInfoReq::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipGetRoomInfoReq.RoomId)
}

// required int64 RoomKey = 3;
bool VoipGetRoomInfoReq::has_roomkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VoipGetRoomInfoReq::set_has_roomkey() {
  _has_bits_[0] |= 0x00000004u;
}
void VoipGetRoomInfoReq::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000004u;
}
void VoipGetRoomInfoReq::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
::google::protobuf::int64 VoipGetRoomInfoReq::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipGetRoomInfoReq.RoomKey)
  return roomkey_;
}
void VoipGetRoomInfoReq::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipGetRoomInfoReq.RoomKey)
}

// optional string CallerUserName = 4;
bool VoipGetRoomInfoReq::has_callerusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoipGetRoomInfoReq::set_has_callerusername() {
  _has_bits_[0] |= 0x00000001u;
}
void VoipGetRoomInfoReq::clear_has_callerusername() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoipGetRoomInfoReq::clear_callerusername() {
  callerusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_callerusername();
}
const ::std::string& VoipGetRoomInfoReq::callerusername() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipGetRoomInfoReq.CallerUserName)
  return callerusername_.GetNoArena();
}
void VoipGetRoomInfoReq::set_callerusername(const ::std::string& value) {
  set_has_callerusername();
  callerusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VoipGetRoomInfoReq.CallerUserName)
}
#if LANG_CXX11
void VoipGetRoomInfoReq::set_callerusername(::std::string&& value) {
  set_has_callerusername();
  callerusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VoipGetRoomInfoReq.CallerUserName)
}
#endif
void VoipGetRoomInfoReq::set_callerusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_callerusername();
  callerusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VoipGetRoomInfoReq.CallerUserName)
}
void VoipGetRoomInfoReq::set_callerusername(const char* value, size_t size) {
  set_has_callerusername();
  callerusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VoipGetRoomInfoReq.CallerUserName)
}
::std::string* VoipGetRoomInfoReq::mutable_callerusername() {
  set_has_callerusername();
  // @@protoc_insertion_point(field_mutable:micromsg.VoipGetRoomInfoReq.CallerUserName)
  return callerusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VoipGetRoomInfoReq::release_callerusername() {
  // @@protoc_insertion_point(field_release:micromsg.VoipGetRoomInfoReq.CallerUserName)
  clear_has_callerusername();
  return callerusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VoipGetRoomInfoReq::set_allocated_callerusername(::std::string* callerusername) {
  if (callerusername != NULL) {
    set_has_callerusername();
  } else {
    clear_has_callerusername();
  }
  callerusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), callerusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipGetRoomInfoReq.CallerUserName)
}

// optional uint32 Type = 5;
bool VoipGetRoomInfoReq::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VoipGetRoomInfoReq::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
void VoipGetRoomInfoReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void VoipGetRoomInfoReq::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 VoipGetRoomInfoReq::type() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipGetRoomInfoReq.Type)
  return type_;
}
void VoipGetRoomInfoReq::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipGetRoomInfoReq.Type)
}

// optional uint64 Timestamp64 = 6;
bool VoipGetRoomInfoReq::has_timestamp64() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VoipGetRoomInfoReq::set_has_timestamp64() {
  _has_bits_[0] |= 0x00000020u;
}
void VoipGetRoomInfoReq::clear_has_timestamp64() {
  _has_bits_[0] &= ~0x00000020u;
}
void VoipGetRoomInfoReq::clear_timestamp64() {
  timestamp64_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp64();
}
::google::protobuf::uint64 VoipGetRoomInfoReq::timestamp64() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipGetRoomInfoReq.Timestamp64)
  return timestamp64_;
}
void VoipGetRoomInfoReq::set_timestamp64(::google::protobuf::uint64 value) {
  set_has_timestamp64();
  timestamp64_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipGetRoomInfoReq.Timestamp64)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoipGetRoomInfoResp::kBaseResponseFieldNumber;
const int VoipGetRoomInfoResp::kRoomIdFieldNumber;
const int VoipGetRoomInfoResp::kRoomKeyFieldNumber;
const int VoipGetRoomInfoResp::kCreateTimeFieldNumber;
const int VoipGetRoomInfoResp::kMemberCountFieldNumber;
const int VoipGetRoomInfoResp::kMemberStatusFieldNumber;
const int VoipGetRoomInfoResp::kCallerUserNameFieldNumber;
const int VoipGetRoomInfoResp::kInviteTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoipGetRoomInfoResp::VoipGetRoomInfoResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VoipGetRoomInfoResp)
}
VoipGetRoomInfoResp::VoipGetRoomInfoResp(const VoipGetRoomInfoResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      memberstatus_(from.memberstatus_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  callerusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_callerusername()) {
    callerusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.callerusername_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  ::memcpy(&roomkey_, &from.roomkey_,
    reinterpret_cast<char*>(&invitetype_) -
    reinterpret_cast<char*>(&roomkey_) + sizeof(invitetype_));
  // @@protoc_insertion_point(copy_constructor:micromsg.VoipGetRoomInfoResp)
}

void VoipGetRoomInfoResp::SharedCtor() {
  _cached_size_ = 0;
  callerusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&invitetype_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(invitetype_));
}

VoipGetRoomInfoResp::~VoipGetRoomInfoResp() {
  // @@protoc_insertion_point(destructor:micromsg.VoipGetRoomInfoResp)
  SharedDtor();
}

void VoipGetRoomInfoResp::SharedDtor() {
  callerusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void VoipGetRoomInfoResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoipGetRoomInfoResp::descriptor() {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoipGetRoomInfoResp& VoipGetRoomInfoResp::default_instance() {
  protobuf_mmvoip_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoipGetRoomInfoResp* VoipGetRoomInfoResp::New(::google::protobuf::Arena* arena) const {
  VoipGetRoomInfoResp* n = new VoipGetRoomInfoResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoipGetRoomInfoResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VoipGetRoomInfoResp)
  memberstatus_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_callerusername()) {
      GOOGLE_DCHECK(!callerusername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*callerusername_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 124u) {
    ::memset(&roomkey_, 0, reinterpret_cast<char*>(&invitetype_) -
      reinterpret_cast<char*>(&roomkey_) + sizeof(invitetype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoipGetRoomInfoResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VoipGetRoomInfoResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 RoomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_roomid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 RoomKey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_roomkey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roomkey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 CreateTime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_createtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 MemberCount = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_membercount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &membercount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.VoipStatusItem MemberStatus = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_memberstatus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string CallerUserName = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callerusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->callerusername().data(), this->callerusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.VoipGetRoomInfoResp.CallerUserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 InviteType = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_invitetype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invitetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VoipGetRoomInfoResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VoipGetRoomInfoResp)
  return false;
#undef DO_
}

void VoipGetRoomInfoResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VoipGetRoomInfoResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required int32 RoomId = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // required int64 RoomKey = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->roomkey(), output);
  }

  // required uint32 CreateTime = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->createtime(), output);
  }

  // required int32 MemberCount = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->membercount(), output);
  }

  // repeated .micromsg.VoipStatusItem MemberStatus = 7;
  for (unsigned int i = 0, n = this->memberstatus_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->memberstatus(i), output);
  }

  // optional string CallerUserName = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callerusername().data(), this->callerusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VoipGetRoomInfoResp.CallerUserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->callerusername(), output);
  }

  // optional uint32 InviteType = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->invitetype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VoipGetRoomInfoResp)
}

::google::protobuf::uint8* VoipGetRoomInfoResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VoipGetRoomInfoResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required int32 RoomId = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // required int64 RoomKey = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->roomkey(), target);
  }

  // required uint32 CreateTime = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->createtime(), target);
  }

  // required int32 MemberCount = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->membercount(), target);
  }

  // repeated .micromsg.VoipStatusItem MemberStatus = 7;
  for (unsigned int i = 0, n = this->memberstatus_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->memberstatus(i), deterministic, target);
  }

  // optional string CallerUserName = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callerusername().data(), this->callerusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VoipGetRoomInfoResp.CallerUserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->callerusername(), target);
  }

  // optional uint32 InviteType = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->invitetype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VoipGetRoomInfoResp)
  return target;
}

size_t VoipGetRoomInfoResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.VoipGetRoomInfoResp)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_roomkey()) {
    // required int64 RoomKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());
  }

  if (has_roomid()) {
    // required int32 RoomId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  if (has_createtime()) {
    // required uint32 CreateTime = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->createtime());
  }

  if (has_membercount()) {
    // required int32 MemberCount = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->membercount());
  }

  return total_size;
}
size_t VoipGetRoomInfoResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VoipGetRoomInfoResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003e) ^ 0x0000003e) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required int64 RoomKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());

    // required int32 RoomId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());

    // required uint32 CreateTime = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->createtime());

    // required int32 MemberCount = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->membercount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.VoipStatusItem MemberStatus = 7;
  {
    unsigned int count = this->memberstatus_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memberstatus(i));
    }
  }

  // optional string CallerUserName = 8;
  if (has_callerusername()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->callerusername());
  }

  // optional uint32 InviteType = 9;
  if (has_invitetype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->invitetype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoipGetRoomInfoResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VoipGetRoomInfoResp)
  GOOGLE_DCHECK_NE(&from, this);
  const VoipGetRoomInfoResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoipGetRoomInfoResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VoipGetRoomInfoResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VoipGetRoomInfoResp)
    MergeFrom(*source);
  }
}

void VoipGetRoomInfoResp::MergeFrom(const VoipGetRoomInfoResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VoipGetRoomInfoResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  memberstatus_.MergeFrom(from.memberstatus_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_callerusername();
      callerusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.callerusername_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000004u) {
      roomkey_ = from.roomkey_;
    }
    if (cached_has_bits & 0x00000008u) {
      roomid_ = from.roomid_;
    }
    if (cached_has_bits & 0x00000010u) {
      createtime_ = from.createtime_;
    }
    if (cached_has_bits & 0x00000020u) {
      membercount_ = from.membercount_;
    }
    if (cached_has_bits & 0x00000040u) {
      invitetype_ = from.invitetype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VoipGetRoomInfoResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VoipGetRoomInfoResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoipGetRoomInfoResp::CopyFrom(const VoipGetRoomInfoResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VoipGetRoomInfoResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoipGetRoomInfoResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003e) != 0x0000003e) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->memberstatus())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void VoipGetRoomInfoResp::Swap(VoipGetRoomInfoResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoipGetRoomInfoResp::InternalSwap(VoipGetRoomInfoResp* other) {
  memberstatus_.InternalSwap(&other->memberstatus_);
  callerusername_.Swap(&other->callerusername_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(roomkey_, other->roomkey_);
  std::swap(roomid_, other->roomid_);
  std::swap(createtime_, other->createtime_);
  std::swap(membercount_, other->membercount_);
  std::swap(invitetype_, other->invitetype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoipGetRoomInfoResp::GetMetadata() const {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoipGetRoomInfoResp

// required .micromsg.BaseResponse BaseResponse = 1;
bool VoipGetRoomInfoResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VoipGetRoomInfoResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
void VoipGetRoomInfoResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
void VoipGetRoomInfoResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& VoipGetRoomInfoResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipGetRoomInfoResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* VoipGetRoomInfoResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipGetRoomInfoResp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* VoipGetRoomInfoResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.VoipGetRoomInfoResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void VoipGetRoomInfoResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipGetRoomInfoResp.BaseResponse)
}

// required int32 RoomId = 2;
bool VoipGetRoomInfoResp::has_roomid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VoipGetRoomInfoResp::set_has_roomid() {
  _has_bits_[0] |= 0x00000008u;
}
void VoipGetRoomInfoResp::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000008u;
}
void VoipGetRoomInfoResp::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
::google::protobuf::int32 VoipGetRoomInfoResp::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipGetRoomInfoResp.RoomId)
  return roomid_;
}
void VoipGetRoomInfoResp::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipGetRoomInfoResp.RoomId)
}

// required int64 RoomKey = 3;
bool VoipGetRoomInfoResp::has_roomkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VoipGetRoomInfoResp::set_has_roomkey() {
  _has_bits_[0] |= 0x00000004u;
}
void VoipGetRoomInfoResp::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000004u;
}
void VoipGetRoomInfoResp::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
::google::protobuf::int64 VoipGetRoomInfoResp::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipGetRoomInfoResp.RoomKey)
  return roomkey_;
}
void VoipGetRoomInfoResp::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipGetRoomInfoResp.RoomKey)
}

// required uint32 CreateTime = 4;
bool VoipGetRoomInfoResp::has_createtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VoipGetRoomInfoResp::set_has_createtime() {
  _has_bits_[0] |= 0x00000010u;
}
void VoipGetRoomInfoResp::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000010u;
}
void VoipGetRoomInfoResp::clear_createtime() {
  createtime_ = 0u;
  clear_has_createtime();
}
::google::protobuf::uint32 VoipGetRoomInfoResp::createtime() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipGetRoomInfoResp.CreateTime)
  return createtime_;
}
void VoipGetRoomInfoResp::set_createtime(::google::protobuf::uint32 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipGetRoomInfoResp.CreateTime)
}

// required int32 MemberCount = 6;
bool VoipGetRoomInfoResp::has_membercount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VoipGetRoomInfoResp::set_has_membercount() {
  _has_bits_[0] |= 0x00000020u;
}
void VoipGetRoomInfoResp::clear_has_membercount() {
  _has_bits_[0] &= ~0x00000020u;
}
void VoipGetRoomInfoResp::clear_membercount() {
  membercount_ = 0;
  clear_has_membercount();
}
::google::protobuf::int32 VoipGetRoomInfoResp::membercount() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipGetRoomInfoResp.MemberCount)
  return membercount_;
}
void VoipGetRoomInfoResp::set_membercount(::google::protobuf::int32 value) {
  set_has_membercount();
  membercount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipGetRoomInfoResp.MemberCount)
}

// repeated .micromsg.VoipStatusItem MemberStatus = 7;
int VoipGetRoomInfoResp::memberstatus_size() const {
  return memberstatus_.size();
}
void VoipGetRoomInfoResp::clear_memberstatus() {
  memberstatus_.Clear();
}
const ::micromsg::VoipStatusItem& VoipGetRoomInfoResp::memberstatus(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.VoipGetRoomInfoResp.MemberStatus)
  return memberstatus_.Get(index);
}
::micromsg::VoipStatusItem* VoipGetRoomInfoResp::mutable_memberstatus(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.VoipGetRoomInfoResp.MemberStatus)
  return memberstatus_.Mutable(index);
}
::micromsg::VoipStatusItem* VoipGetRoomInfoResp::add_memberstatus() {
  // @@protoc_insertion_point(field_add:micromsg.VoipGetRoomInfoResp.MemberStatus)
  return memberstatus_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::VoipStatusItem >*
VoipGetRoomInfoResp::mutable_memberstatus() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.VoipGetRoomInfoResp.MemberStatus)
  return &memberstatus_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::VoipStatusItem >&
VoipGetRoomInfoResp::memberstatus() const {
  // @@protoc_insertion_point(field_list:micromsg.VoipGetRoomInfoResp.MemberStatus)
  return memberstatus_;
}

// optional string CallerUserName = 8;
bool VoipGetRoomInfoResp::has_callerusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoipGetRoomInfoResp::set_has_callerusername() {
  _has_bits_[0] |= 0x00000001u;
}
void VoipGetRoomInfoResp::clear_has_callerusername() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoipGetRoomInfoResp::clear_callerusername() {
  callerusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_callerusername();
}
const ::std::string& VoipGetRoomInfoResp::callerusername() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipGetRoomInfoResp.CallerUserName)
  return callerusername_.GetNoArena();
}
void VoipGetRoomInfoResp::set_callerusername(const ::std::string& value) {
  set_has_callerusername();
  callerusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VoipGetRoomInfoResp.CallerUserName)
}
#if LANG_CXX11
void VoipGetRoomInfoResp::set_callerusername(::std::string&& value) {
  set_has_callerusername();
  callerusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VoipGetRoomInfoResp.CallerUserName)
}
#endif
void VoipGetRoomInfoResp::set_callerusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_callerusername();
  callerusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VoipGetRoomInfoResp.CallerUserName)
}
void VoipGetRoomInfoResp::set_callerusername(const char* value, size_t size) {
  set_has_callerusername();
  callerusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VoipGetRoomInfoResp.CallerUserName)
}
::std::string* VoipGetRoomInfoResp::mutable_callerusername() {
  set_has_callerusername();
  // @@protoc_insertion_point(field_mutable:micromsg.VoipGetRoomInfoResp.CallerUserName)
  return callerusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VoipGetRoomInfoResp::release_callerusername() {
  // @@protoc_insertion_point(field_release:micromsg.VoipGetRoomInfoResp.CallerUserName)
  clear_has_callerusername();
  return callerusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VoipGetRoomInfoResp::set_allocated_callerusername(::std::string* callerusername) {
  if (callerusername != NULL) {
    set_has_callerusername();
  } else {
    clear_has_callerusername();
  }
  callerusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), callerusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipGetRoomInfoResp.CallerUserName)
}

// optional uint32 InviteType = 9;
bool VoipGetRoomInfoResp::has_invitetype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VoipGetRoomInfoResp::set_has_invitetype() {
  _has_bits_[0] |= 0x00000040u;
}
void VoipGetRoomInfoResp::clear_has_invitetype() {
  _has_bits_[0] &= ~0x00000040u;
}
void VoipGetRoomInfoResp::clear_invitetype() {
  invitetype_ = 0u;
  clear_has_invitetype();
}
::google::protobuf::uint32 VoipGetRoomInfoResp::invitetype() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipGetRoomInfoResp.InviteType)
  return invitetype_;
}
void VoipGetRoomInfoResp::set_invitetype(::google::protobuf::uint32 value) {
  set_has_invitetype();
  invitetype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipGetRoomInfoResp.InviteType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoipAckReq::kBaseRequestFieldNumber;
const int VoipAckReq::kRoomIdFieldNumber;
const int VoipAckReq::kRoomKeyFieldNumber;
const int VoipAckReq::kFromUsernameFieldNumber;
const int VoipAckReq::kPreConnectFieldNumber;
const int VoipAckReq::kPeerIdFieldNumber;
const int VoipAckReq::kCapInfoFieldNumber;
const int VoipAckReq::kNetTypeFieldNumber;
const int VoipAckReq::kCallerNameFieldNumber;
const int VoipAckReq::kAckStatusFieldNumber;
const int VoipAckReq::kTimestamp64FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoipAckReq::VoipAckReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VoipAckReq)
}
VoipAckReq::VoipAckReq(const VoipAckReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fromusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fromusername()) {
    fromusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromusername_);
  }
  callername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_callername()) {
    callername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.callername_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_peerid()) {
    peerid_ = new ::micromsg::VoipRelayData(*from.peerid_);
  } else {
    peerid_ = NULL;
  }
  if (from.has_capinfo()) {
    capinfo_ = new ::micromsg::VoipRelayData(*from.capinfo_);
  } else {
    capinfo_ = NULL;
  }
  ::memcpy(&roomkey_, &from.roomkey_,
    reinterpret_cast<char*>(&timestamp64_) -
    reinterpret_cast<char*>(&roomkey_) + sizeof(timestamp64_));
  // @@protoc_insertion_point(copy_constructor:micromsg.VoipAckReq)
}

void VoipAckReq::SharedCtor() {
  _cached_size_ = 0;
  fromusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  callername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&timestamp64_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(timestamp64_));
}

VoipAckReq::~VoipAckReq() {
  // @@protoc_insertion_point(destructor:micromsg.VoipAckReq)
  SharedDtor();
}

void VoipAckReq::SharedDtor() {
  fromusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  callername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete peerid_;
  }
  if (this != internal_default_instance()) {
    delete capinfo_;
  }
}

void VoipAckReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoipAckReq::descriptor() {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoipAckReq& VoipAckReq::default_instance() {
  protobuf_mmvoip_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoipAckReq* VoipAckReq::New(::google::protobuf::Arena* arena) const {
  VoipAckReq* n = new VoipAckReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoipAckReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VoipAckReq)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_fromusername()) {
      GOOGLE_DCHECK(!fromusername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fromusername_.UnsafeRawStringPointer())->clear();
    }
    if (has_callername()) {
      GOOGLE_DCHECK(!callername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*callername_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_peerid()) {
      GOOGLE_DCHECK(peerid_ != NULL);
      peerid_->::micromsg::VoipRelayData::Clear();
    }
    if (has_capinfo()) {
      GOOGLE_DCHECK(capinfo_ != NULL);
      capinfo_->::micromsg::VoipRelayData::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 224u) {
    ::memset(&roomkey_, 0, reinterpret_cast<char*>(&preconnect_) -
      reinterpret_cast<char*>(&roomkey_) + sizeof(preconnect_));
  }
  if (_has_bits_[8 / 32] & 1792u) {
    ::memset(&nettype_, 0, reinterpret_cast<char*>(&timestamp64_) -
      reinterpret_cast<char*>(&nettype_) + sizeof(timestamp64_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoipAckReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VoipAckReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 RoomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_roomid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 RoomKey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_roomkey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roomkey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FromUsername = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fromusername().data(), this->fromusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.VoipAckReq.FromUsername");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 PreConnect = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_preconnect();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &preconnect_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.VoipRelayData PeerId = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peerid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.VoipRelayData CapInfo = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_capinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 NetType = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_nettype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nettype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string CallerName = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->callername().data(), this->callername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.VoipAckReq.CallerName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 AckStatus = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_ackstatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ackstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 Timestamp64 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_timestamp64();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VoipAckReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VoipAckReq)
  return false;
#undef DO_
}

void VoipAckReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VoipAckReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required int32 RoomId = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // required int64 RoomKey = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->roomkey(), output);
  }

  // optional string FromUsername = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromusername().data(), this->fromusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VoipAckReq.FromUsername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->fromusername(), output);
  }

  // optional int32 PreConnect = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->preconnect(), output);
  }

  // optional .micromsg.VoipRelayData PeerId = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->peerid_, output);
  }

  // optional .micromsg.VoipRelayData CapInfo = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->capinfo_, output);
  }

  // optional int32 NetType = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->nettype(), output);
  }

  // optional string CallerName = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callername().data(), this->callername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VoipAckReq.CallerName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->callername(), output);
  }

  // optional int32 AckStatus = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->ackstatus(), output);
  }

  // optional uint64 Timestamp64 = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->timestamp64(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VoipAckReq)
}

::google::protobuf::uint8* VoipAckReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VoipAckReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required int32 RoomId = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // required int64 RoomKey = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->roomkey(), target);
  }

  // optional string FromUsername = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromusername().data(), this->fromusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VoipAckReq.FromUsername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->fromusername(), target);
  }

  // optional int32 PreConnect = 5;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->preconnect(), target);
  }

  // optional .micromsg.VoipRelayData PeerId = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->peerid_, deterministic, target);
  }

  // optional .micromsg.VoipRelayData CapInfo = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->capinfo_, deterministic, target);
  }

  // optional int32 NetType = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->nettype(), target);
  }

  // optional string CallerName = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callername().data(), this->callername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.VoipAckReq.CallerName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->callername(), target);
  }

  // optional int32 AckStatus = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->ackstatus(), target);
  }

  // optional uint64 Timestamp64 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->timestamp64(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VoipAckReq)
  return target;
}

size_t VoipAckReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.VoipAckReq)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_roomkey()) {
    // required int64 RoomKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());
  }

  if (has_roomid()) {
    // required int32 RoomId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  return total_size;
}
size_t VoipAckReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VoipAckReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000064) ^ 0x00000064) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required int64 RoomKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());

    // required int32 RoomId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string FromUsername = 4;
    if (has_fromusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromusername());
    }

    // optional string CallerName = 9;
    if (has_callername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->callername());
    }

  }
  if (_has_bits_[0 / 32] & 24u) {
    // optional .micromsg.VoipRelayData PeerId = 6;
    if (has_peerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->peerid_);
    }

    // optional .micromsg.VoipRelayData CapInfo = 7;
    if (has_capinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->capinfo_);
    }

  }
  // optional int32 PreConnect = 5;
  if (has_preconnect()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->preconnect());
  }

  if (_has_bits_[8 / 32] & 1792u) {
    // optional int32 NetType = 8;
    if (has_nettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nettype());
    }

    // optional int32 AckStatus = 10;
    if (has_ackstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ackstatus());
    }

    // optional uint64 Timestamp64 = 11;
    if (has_timestamp64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp64());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoipAckReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VoipAckReq)
  GOOGLE_DCHECK_NE(&from, this);
  const VoipAckReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoipAckReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VoipAckReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VoipAckReq)
    MergeFrom(*source);
  }
}

void VoipAckReq::MergeFrom(const VoipAckReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VoipAckReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_fromusername();
      fromusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromusername_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_callername();
      callername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.callername_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_peerid()->::micromsg::VoipRelayData::MergeFrom(from.peerid());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_capinfo()->::micromsg::VoipRelayData::MergeFrom(from.capinfo());
    }
    if (cached_has_bits & 0x00000020u) {
      roomkey_ = from.roomkey_;
    }
    if (cached_has_bits & 0x00000040u) {
      roomid_ = from.roomid_;
    }
    if (cached_has_bits & 0x00000080u) {
      preconnect_ = from.preconnect_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      nettype_ = from.nettype_;
    }
    if (cached_has_bits & 0x00000200u) {
      ackstatus_ = from.ackstatus_;
    }
    if (cached_has_bits & 0x00000400u) {
      timestamp64_ = from.timestamp64_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VoipAckReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VoipAckReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoipAckReq::CopyFrom(const VoipAckReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VoipAckReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoipAckReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000064) != 0x00000064) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_peerid()) {
    if (!this->peerid_->IsInitialized()) return false;
  }
  if (has_capinfo()) {
    if (!this->capinfo_->IsInitialized()) return false;
  }
  return true;
}

void VoipAckReq::Swap(VoipAckReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoipAckReq::InternalSwap(VoipAckReq* other) {
  fromusername_.Swap(&other->fromusername_);
  callername_.Swap(&other->callername_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(peerid_, other->peerid_);
  std::swap(capinfo_, other->capinfo_);
  std::swap(roomkey_, other->roomkey_);
  std::swap(roomid_, other->roomid_);
  std::swap(preconnect_, other->preconnect_);
  std::swap(nettype_, other->nettype_);
  std::swap(ackstatus_, other->ackstatus_);
  std::swap(timestamp64_, other->timestamp64_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoipAckReq::GetMetadata() const {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoipAckReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool VoipAckReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VoipAckReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
void VoipAckReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
void VoipAckReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& VoipAckReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAckReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* VoipAckReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipAckReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* VoipAckReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.VoipAckReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void VoipAckReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipAckReq.BaseRequest)
}

// required int32 RoomId = 2;
bool VoipAckReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VoipAckReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000040u;
}
void VoipAckReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000040u;
}
void VoipAckReq::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
::google::protobuf::int32 VoipAckReq::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAckReq.RoomId)
  return roomid_;
}
void VoipAckReq::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAckReq.RoomId)
}

// required int64 RoomKey = 3;
bool VoipAckReq::has_roomkey() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VoipAckReq::set_has_roomkey() {
  _has_bits_[0] |= 0x00000020u;
}
void VoipAckReq::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000020u;
}
void VoipAckReq::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
::google::protobuf::int64 VoipAckReq::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAckReq.RoomKey)
  return roomkey_;
}
void VoipAckReq::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAckReq.RoomKey)
}

// optional string FromUsername = 4;
bool VoipAckReq::has_fromusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoipAckReq::set_has_fromusername() {
  _has_bits_[0] |= 0x00000001u;
}
void VoipAckReq::clear_has_fromusername() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoipAckReq::clear_fromusername() {
  fromusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fromusername();
}
const ::std::string& VoipAckReq::fromusername() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAckReq.FromUsername)
  return fromusername_.GetNoArena();
}
void VoipAckReq::set_fromusername(const ::std::string& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VoipAckReq.FromUsername)
}
#if LANG_CXX11
void VoipAckReq::set_fromusername(::std::string&& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VoipAckReq.FromUsername)
}
#endif
void VoipAckReq::set_fromusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VoipAckReq.FromUsername)
}
void VoipAckReq::set_fromusername(const char* value, size_t size) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VoipAckReq.FromUsername)
}
::std::string* VoipAckReq::mutable_fromusername() {
  set_has_fromusername();
  // @@protoc_insertion_point(field_mutable:micromsg.VoipAckReq.FromUsername)
  return fromusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VoipAckReq::release_fromusername() {
  // @@protoc_insertion_point(field_release:micromsg.VoipAckReq.FromUsername)
  clear_has_fromusername();
  return fromusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VoipAckReq::set_allocated_fromusername(::std::string* fromusername) {
  if (fromusername != NULL) {
    set_has_fromusername();
  } else {
    clear_has_fromusername();
  }
  fromusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipAckReq.FromUsername)
}

// optional int32 PreConnect = 5;
bool VoipAckReq::has_preconnect() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VoipAckReq::set_has_preconnect() {
  _has_bits_[0] |= 0x00000080u;
}
void VoipAckReq::clear_has_preconnect() {
  _has_bits_[0] &= ~0x00000080u;
}
void VoipAckReq::clear_preconnect() {
  preconnect_ = 0;
  clear_has_preconnect();
}
::google::protobuf::int32 VoipAckReq::preconnect() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAckReq.PreConnect)
  return preconnect_;
}
void VoipAckReq::set_preconnect(::google::protobuf::int32 value) {
  set_has_preconnect();
  preconnect_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAckReq.PreConnect)
}

// optional .micromsg.VoipRelayData PeerId = 6;
bool VoipAckReq::has_peerid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VoipAckReq::set_has_peerid() {
  _has_bits_[0] |= 0x00000008u;
}
void VoipAckReq::clear_has_peerid() {
  _has_bits_[0] &= ~0x00000008u;
}
void VoipAckReq::clear_peerid() {
  if (peerid_ != NULL) peerid_->::micromsg::VoipRelayData::Clear();
  clear_has_peerid();
}
const ::micromsg::VoipRelayData& VoipAckReq::peerid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAckReq.PeerId)
  return peerid_ != NULL ? *peerid_
                         : *::micromsg::VoipRelayData::internal_default_instance();
}
::micromsg::VoipRelayData* VoipAckReq::mutable_peerid() {
  set_has_peerid();
  if (peerid_ == NULL) {
    peerid_ = new ::micromsg::VoipRelayData;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipAckReq.PeerId)
  return peerid_;
}
::micromsg::VoipRelayData* VoipAckReq::release_peerid() {
  // @@protoc_insertion_point(field_release:micromsg.VoipAckReq.PeerId)
  clear_has_peerid();
  ::micromsg::VoipRelayData* temp = peerid_;
  peerid_ = NULL;
  return temp;
}
void VoipAckReq::set_allocated_peerid(::micromsg::VoipRelayData* peerid) {
  delete peerid_;
  peerid_ = peerid;
  if (peerid) {
    set_has_peerid();
  } else {
    clear_has_peerid();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipAckReq.PeerId)
}

// optional .micromsg.VoipRelayData CapInfo = 7;
bool VoipAckReq::has_capinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VoipAckReq::set_has_capinfo() {
  _has_bits_[0] |= 0x00000010u;
}
void VoipAckReq::clear_has_capinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
void VoipAckReq::clear_capinfo() {
  if (capinfo_ != NULL) capinfo_->::micromsg::VoipRelayData::Clear();
  clear_has_capinfo();
}
const ::micromsg::VoipRelayData& VoipAckReq::capinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAckReq.CapInfo)
  return capinfo_ != NULL ? *capinfo_
                         : *::micromsg::VoipRelayData::internal_default_instance();
}
::micromsg::VoipRelayData* VoipAckReq::mutable_capinfo() {
  set_has_capinfo();
  if (capinfo_ == NULL) {
    capinfo_ = new ::micromsg::VoipRelayData;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipAckReq.CapInfo)
  return capinfo_;
}
::micromsg::VoipRelayData* VoipAckReq::release_capinfo() {
  // @@protoc_insertion_point(field_release:micromsg.VoipAckReq.CapInfo)
  clear_has_capinfo();
  ::micromsg::VoipRelayData* temp = capinfo_;
  capinfo_ = NULL;
  return temp;
}
void VoipAckReq::set_allocated_capinfo(::micromsg::VoipRelayData* capinfo) {
  delete capinfo_;
  capinfo_ = capinfo;
  if (capinfo) {
    set_has_capinfo();
  } else {
    clear_has_capinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipAckReq.CapInfo)
}

// optional int32 NetType = 8;
bool VoipAckReq::has_nettype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void VoipAckReq::set_has_nettype() {
  _has_bits_[0] |= 0x00000100u;
}
void VoipAckReq::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000100u;
}
void VoipAckReq::clear_nettype() {
  nettype_ = 0;
  clear_has_nettype();
}
::google::protobuf::int32 VoipAckReq::nettype() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAckReq.NetType)
  return nettype_;
}
void VoipAckReq::set_nettype(::google::protobuf::int32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAckReq.NetType)
}

// optional string CallerName = 9;
bool VoipAckReq::has_callername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VoipAckReq::set_has_callername() {
  _has_bits_[0] |= 0x00000002u;
}
void VoipAckReq::clear_has_callername() {
  _has_bits_[0] &= ~0x00000002u;
}
void VoipAckReq::clear_callername() {
  callername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_callername();
}
const ::std::string& VoipAckReq::callername() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAckReq.CallerName)
  return callername_.GetNoArena();
}
void VoipAckReq::set_callername(const ::std::string& value) {
  set_has_callername();
  callername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VoipAckReq.CallerName)
}
#if LANG_CXX11
void VoipAckReq::set_callername(::std::string&& value) {
  set_has_callername();
  callername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VoipAckReq.CallerName)
}
#endif
void VoipAckReq::set_callername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_callername();
  callername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VoipAckReq.CallerName)
}
void VoipAckReq::set_callername(const char* value, size_t size) {
  set_has_callername();
  callername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VoipAckReq.CallerName)
}
::std::string* VoipAckReq::mutable_callername() {
  set_has_callername();
  // @@protoc_insertion_point(field_mutable:micromsg.VoipAckReq.CallerName)
  return callername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VoipAckReq::release_callername() {
  // @@protoc_insertion_point(field_release:micromsg.VoipAckReq.CallerName)
  clear_has_callername();
  return callername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VoipAckReq::set_allocated_callername(::std::string* callername) {
  if (callername != NULL) {
    set_has_callername();
  } else {
    clear_has_callername();
  }
  callername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), callername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipAckReq.CallerName)
}

// optional int32 AckStatus = 10;
bool VoipAckReq::has_ackstatus() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void VoipAckReq::set_has_ackstatus() {
  _has_bits_[0] |= 0x00000200u;
}
void VoipAckReq::clear_has_ackstatus() {
  _has_bits_[0] &= ~0x00000200u;
}
void VoipAckReq::clear_ackstatus() {
  ackstatus_ = 0;
  clear_has_ackstatus();
}
::google::protobuf::int32 VoipAckReq::ackstatus() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAckReq.AckStatus)
  return ackstatus_;
}
void VoipAckReq::set_ackstatus(::google::protobuf::int32 value) {
  set_has_ackstatus();
  ackstatus_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAckReq.AckStatus)
}

// optional uint64 Timestamp64 = 11;
bool VoipAckReq::has_timestamp64() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void VoipAckReq::set_has_timestamp64() {
  _has_bits_[0] |= 0x00000400u;
}
void VoipAckReq::clear_has_timestamp64() {
  _has_bits_[0] &= ~0x00000400u;
}
void VoipAckReq::clear_timestamp64() {
  timestamp64_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp64();
}
::google::protobuf::uint64 VoipAckReq::timestamp64() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAckReq.Timestamp64)
  return timestamp64_;
}
void VoipAckReq::set_timestamp64(::google::protobuf::uint64 value) {
  set_has_timestamp64();
  timestamp64_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAckReq.Timestamp64)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoipAckResp::kBaseResponseFieldNumber;
const int VoipAckResp::kRoomIdFieldNumber;
const int VoipAckResp::kRoomKeyFieldNumber;
const int VoipAckResp::kRoomMemberIDFieldNumber;
const int VoipAckResp::kRelayDataFieldNumber;
const int VoipAckResp::kPreConnectFieldNumber;
const int VoipAckResp::kTcpCntFieldNumber;
const int VoipAckResp::kAudioEnableRmioAndS3AFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoipAckResp::VoipAckResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VoipAckResp)
}
VoipAckResp::VoipAckResp(const VoipAckResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_relaydata()) {
    relaydata_ = new ::micromsg::VoipMultiRelayData(*from.relaydata_);
  } else {
    relaydata_ = NULL;
  }
  ::memcpy(&roomkey_, &from.roomkey_,
    reinterpret_cast<char*>(&audioenablermioands3a_) -
    reinterpret_cast<char*>(&roomkey_) + sizeof(audioenablermioands3a_));
  // @@protoc_insertion_point(copy_constructor:micromsg.VoipAckResp)
}

void VoipAckResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&audioenablermioands3a_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(audioenablermioands3a_));
}

VoipAckResp::~VoipAckResp() {
  // @@protoc_insertion_point(destructor:micromsg.VoipAckResp)
  SharedDtor();
}

void VoipAckResp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete relaydata_;
  }
}

void VoipAckResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoipAckResp::descriptor() {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoipAckResp& VoipAckResp::default_instance() {
  protobuf_mmvoip_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoipAckResp* VoipAckResp::New(::google::protobuf::Arena* arena) const {
  VoipAckResp* n = new VoipAckResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoipAckResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VoipAckResp)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_relaydata()) {
      GOOGLE_DCHECK(relaydata_ != NULL);
      relaydata_->::micromsg::VoipMultiRelayData::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&roomkey_, 0, reinterpret_cast<char*>(&audioenablermioands3a_) -
      reinterpret_cast<char*>(&roomkey_) + sizeof(audioenablermioands3a_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoipAckResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VoipAckResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 RoomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_roomid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 RoomKey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_roomkey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roomkey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 RoomMemberID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_roommemberid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roommemberid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.VoipMultiRelayData RelayData = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relaydata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 PreConnect = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_preconnect();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &preconnect_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 TcpCnt = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_tcpcnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcpcnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 AudioEnableRmioAndS3A = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_audioenablermioands3a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &audioenablermioands3a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VoipAckResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VoipAckResp)
  return false;
#undef DO_
}

void VoipAckResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VoipAckResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required int32 RoomId = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // required int64 RoomKey = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->roomkey(), output);
  }

  // optional int32 RoomMemberID = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->roommemberid(), output);
  }

  // optional .micromsg.VoipMultiRelayData RelayData = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->relaydata_, output);
  }

  // optional int32 PreConnect = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->preconnect(), output);
  }

  // optional uint32 TcpCnt = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->tcpcnt(), output);
  }

  // optional int32 AudioEnableRmioAndS3A = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->audioenablermioands3a(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VoipAckResp)
}

::google::protobuf::uint8* VoipAckResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VoipAckResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required int32 RoomId = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // required int64 RoomKey = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->roomkey(), target);
  }

  // optional int32 RoomMemberID = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->roommemberid(), target);
  }

  // optional .micromsg.VoipMultiRelayData RelayData = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->relaydata_, deterministic, target);
  }

  // optional int32 PreConnect = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->preconnect(), target);
  }

  // optional uint32 TcpCnt = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->tcpcnt(), target);
  }

  // optional int32 AudioEnableRmioAndS3A = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->audioenablermioands3a(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VoipAckResp)
  return target;
}

size_t VoipAckResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.VoipAckResp)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_roomkey()) {
    // required int64 RoomKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());
  }

  if (has_roomid()) {
    // required int32 RoomId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  return total_size;
}
size_t VoipAckResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VoipAckResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required int64 RoomKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());

    // required int32 RoomId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .micromsg.VoipMultiRelayData RelayData = 5;
  if (has_relaydata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->relaydata_);
  }

  if (_has_bits_[0 / 32] & 240u) {
    // optional int32 RoomMemberID = 4;
    if (has_roommemberid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roommemberid());
    }

    // optional int32 PreConnect = 6;
    if (has_preconnect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->preconnect());
    }

    // optional uint32 TcpCnt = 7;
    if (has_tcpcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tcpcnt());
    }

    // optional int32 AudioEnableRmioAndS3A = 8;
    if (has_audioenablermioands3a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->audioenablermioands3a());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoipAckResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VoipAckResp)
  GOOGLE_DCHECK_NE(&from, this);
  const VoipAckResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoipAckResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VoipAckResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VoipAckResp)
    MergeFrom(*source);
  }
}

void VoipAckResp::MergeFrom(const VoipAckResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VoipAckResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_relaydata()->::micromsg::VoipMultiRelayData::MergeFrom(from.relaydata());
    }
    if (cached_has_bits & 0x00000004u) {
      roomkey_ = from.roomkey_;
    }
    if (cached_has_bits & 0x00000008u) {
      roomid_ = from.roomid_;
    }
    if (cached_has_bits & 0x00000010u) {
      roommemberid_ = from.roommemberid_;
    }
    if (cached_has_bits & 0x00000020u) {
      preconnect_ = from.preconnect_;
    }
    if (cached_has_bits & 0x00000040u) {
      tcpcnt_ = from.tcpcnt_;
    }
    if (cached_has_bits & 0x00000080u) {
      audioenablermioands3a_ = from.audioenablermioands3a_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VoipAckResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VoipAckResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoipAckResp::CopyFrom(const VoipAckResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VoipAckResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoipAckResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_relaydata()) {
    if (!this->relaydata_->IsInitialized()) return false;
  }
  return true;
}

void VoipAckResp::Swap(VoipAckResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoipAckResp::InternalSwap(VoipAckResp* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(relaydata_, other->relaydata_);
  std::swap(roomkey_, other->roomkey_);
  std::swap(roomid_, other->roomid_);
  std::swap(roommemberid_, other->roommemberid_);
  std::swap(preconnect_, other->preconnect_);
  std::swap(tcpcnt_, other->tcpcnt_);
  std::swap(audioenablermioands3a_, other->audioenablermioands3a_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoipAckResp::GetMetadata() const {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoipAckResp

// required .micromsg.BaseResponse BaseResponse = 1;
bool VoipAckResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoipAckResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void VoipAckResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoipAckResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& VoipAckResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAckResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* VoipAckResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipAckResp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* VoipAckResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.VoipAckResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void VoipAckResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipAckResp.BaseResponse)
}

// required int32 RoomId = 2;
bool VoipAckResp::has_roomid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VoipAckResp::set_has_roomid() {
  _has_bits_[0] |= 0x00000008u;
}
void VoipAckResp::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000008u;
}
void VoipAckResp::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
::google::protobuf::int32 VoipAckResp::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAckResp.RoomId)
  return roomid_;
}
void VoipAckResp::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAckResp.RoomId)
}

// required int64 RoomKey = 3;
bool VoipAckResp::has_roomkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VoipAckResp::set_has_roomkey() {
  _has_bits_[0] |= 0x00000004u;
}
void VoipAckResp::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000004u;
}
void VoipAckResp::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
::google::protobuf::int64 VoipAckResp::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAckResp.RoomKey)
  return roomkey_;
}
void VoipAckResp::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAckResp.RoomKey)
}

// optional int32 RoomMemberID = 4;
bool VoipAckResp::has_roommemberid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VoipAckResp::set_has_roommemberid() {
  _has_bits_[0] |= 0x00000010u;
}
void VoipAckResp::clear_has_roommemberid() {
  _has_bits_[0] &= ~0x00000010u;
}
void VoipAckResp::clear_roommemberid() {
  roommemberid_ = 0;
  clear_has_roommemberid();
}
::google::protobuf::int32 VoipAckResp::roommemberid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAckResp.RoomMemberID)
  return roommemberid_;
}
void VoipAckResp::set_roommemberid(::google::protobuf::int32 value) {
  set_has_roommemberid();
  roommemberid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAckResp.RoomMemberID)
}

// optional .micromsg.VoipMultiRelayData RelayData = 5;
bool VoipAckResp::has_relaydata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VoipAckResp::set_has_relaydata() {
  _has_bits_[0] |= 0x00000002u;
}
void VoipAckResp::clear_has_relaydata() {
  _has_bits_[0] &= ~0x00000002u;
}
void VoipAckResp::clear_relaydata() {
  if (relaydata_ != NULL) relaydata_->::micromsg::VoipMultiRelayData::Clear();
  clear_has_relaydata();
}
const ::micromsg::VoipMultiRelayData& VoipAckResp::relaydata() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAckResp.RelayData)
  return relaydata_ != NULL ? *relaydata_
                         : *::micromsg::VoipMultiRelayData::internal_default_instance();
}
::micromsg::VoipMultiRelayData* VoipAckResp::mutable_relaydata() {
  set_has_relaydata();
  if (relaydata_ == NULL) {
    relaydata_ = new ::micromsg::VoipMultiRelayData;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipAckResp.RelayData)
  return relaydata_;
}
::micromsg::VoipMultiRelayData* VoipAckResp::release_relaydata() {
  // @@protoc_insertion_point(field_release:micromsg.VoipAckResp.RelayData)
  clear_has_relaydata();
  ::micromsg::VoipMultiRelayData* temp = relaydata_;
  relaydata_ = NULL;
  return temp;
}
void VoipAckResp::set_allocated_relaydata(::micromsg::VoipMultiRelayData* relaydata) {
  delete relaydata_;
  relaydata_ = relaydata;
  if (relaydata) {
    set_has_relaydata();
  } else {
    clear_has_relaydata();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipAckResp.RelayData)
}

// optional int32 PreConnect = 6;
bool VoipAckResp::has_preconnect() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VoipAckResp::set_has_preconnect() {
  _has_bits_[0] |= 0x00000020u;
}
void VoipAckResp::clear_has_preconnect() {
  _has_bits_[0] &= ~0x00000020u;
}
void VoipAckResp::clear_preconnect() {
  preconnect_ = 0;
  clear_has_preconnect();
}
::google::protobuf::int32 VoipAckResp::preconnect() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAckResp.PreConnect)
  return preconnect_;
}
void VoipAckResp::set_preconnect(::google::protobuf::int32 value) {
  set_has_preconnect();
  preconnect_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAckResp.PreConnect)
}

// optional uint32 TcpCnt = 7;
bool VoipAckResp::has_tcpcnt() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VoipAckResp::set_has_tcpcnt() {
  _has_bits_[0] |= 0x00000040u;
}
void VoipAckResp::clear_has_tcpcnt() {
  _has_bits_[0] &= ~0x00000040u;
}
void VoipAckResp::clear_tcpcnt() {
  tcpcnt_ = 0u;
  clear_has_tcpcnt();
}
::google::protobuf::uint32 VoipAckResp::tcpcnt() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAckResp.TcpCnt)
  return tcpcnt_;
}
void VoipAckResp::set_tcpcnt(::google::protobuf::uint32 value) {
  set_has_tcpcnt();
  tcpcnt_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAckResp.TcpCnt)
}

// optional int32 AudioEnableRmioAndS3A = 8;
bool VoipAckResp::has_audioenablermioands3a() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VoipAckResp::set_has_audioenablermioands3a() {
  _has_bits_[0] |= 0x00000080u;
}
void VoipAckResp::clear_has_audioenablermioands3a() {
  _has_bits_[0] &= ~0x00000080u;
}
void VoipAckResp::clear_audioenablermioands3a() {
  audioenablermioands3a_ = 0;
  clear_has_audioenablermioands3a();
}
::google::protobuf::int32 VoipAckResp::audioenablermioands3a() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAckResp.AudioEnableRmioAndS3A)
  return audioenablermioands3a_;
}
void VoipAckResp::set_audioenablermioands3a(::google::protobuf::int32 value) {
  set_has_audioenablermioands3a();
  audioenablermioands3a_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAckResp.AudioEnableRmioAndS3A)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoipStatReportReq::kBaseRequestFieldNumber;
const int VoipStatReportReq::kReportDataFieldNumber;
const int VoipStatReportReq::kChannelReportDataFieldNumber;
const int VoipStatReportReq::kDialReportDataFieldNumber;
const int VoipStatReportReq::kEngineReportDataFieldNumber;
const int VoipStatReportReq::kTimestamp64FieldNumber;
const int VoipStatReportReq::kEngineExtReportDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoipStatReportReq::VoipStatReportReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VoipStatReportReq)
}
VoipStatReportReq::VoipStatReportReq(const VoipStatReportReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_reportdata()) {
    reportdata_ = new ::micromsg::VoipStatReportData(*from.reportdata_);
  } else {
    reportdata_ = NULL;
  }
  if (from.has_channelreportdata()) {
    channelreportdata_ = new ::micromsg::VoipStatReportData(*from.channelreportdata_);
  } else {
    channelreportdata_ = NULL;
  }
  if (from.has_dialreportdata()) {
    dialreportdata_ = new ::micromsg::VoipStatReportData(*from.dialreportdata_);
  } else {
    dialreportdata_ = NULL;
  }
  if (from.has_enginereportdata()) {
    enginereportdata_ = new ::micromsg::VoipStatReportData(*from.enginereportdata_);
  } else {
    enginereportdata_ = NULL;
  }
  if (from.has_engineextreportdata()) {
    engineextreportdata_ = new ::micromsg::VoipStatReportData(*from.engineextreportdata_);
  } else {
    engineextreportdata_ = NULL;
  }
  timestamp64_ = from.timestamp64_;
  // @@protoc_insertion_point(copy_constructor:micromsg.VoipStatReportReq)
}

void VoipStatReportReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&timestamp64_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(timestamp64_));
}

VoipStatReportReq::~VoipStatReportReq() {
  // @@protoc_insertion_point(destructor:micromsg.VoipStatReportReq)
  SharedDtor();
}

void VoipStatReportReq::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete reportdata_;
  }
  if (this != internal_default_instance()) {
    delete channelreportdata_;
  }
  if (this != internal_default_instance()) {
    delete dialreportdata_;
  }
  if (this != internal_default_instance()) {
    delete enginereportdata_;
  }
  if (this != internal_default_instance()) {
    delete engineextreportdata_;
  }
}

void VoipStatReportReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoipStatReportReq::descriptor() {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoipStatReportReq& VoipStatReportReq::default_instance() {
  protobuf_mmvoip_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoipStatReportReq* VoipStatReportReq::New(::google::protobuf::Arena* arena) const {
  VoipStatReportReq* n = new VoipStatReportReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoipStatReportReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VoipStatReportReq)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_reportdata()) {
      GOOGLE_DCHECK(reportdata_ != NULL);
      reportdata_->::micromsg::VoipStatReportData::Clear();
    }
    if (has_channelreportdata()) {
      GOOGLE_DCHECK(channelreportdata_ != NULL);
      channelreportdata_->::micromsg::VoipStatReportData::Clear();
    }
    if (has_dialreportdata()) {
      GOOGLE_DCHECK(dialreportdata_ != NULL);
      dialreportdata_->::micromsg::VoipStatReportData::Clear();
    }
    if (has_enginereportdata()) {
      GOOGLE_DCHECK(enginereportdata_ != NULL);
      enginereportdata_->::micromsg::VoipStatReportData::Clear();
    }
    if (has_engineextreportdata()) {
      GOOGLE_DCHECK(engineextreportdata_ != NULL);
      engineextreportdata_->::micromsg::VoipStatReportData::Clear();
    }
  }
  timestamp64_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoipStatReportReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VoipStatReportReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.VoipStatReportData ReportData = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reportdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.VoipStatReportData ChannelReportData = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_channelreportdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.VoipStatReportData DialReportData = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dialreportdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.VoipStatReportData EngineReportData = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enginereportdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 Timestamp64 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_timestamp64();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.VoipStatReportData EngineExtReportData = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_engineextreportdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VoipStatReportReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VoipStatReportReq)
  return false;
#undef DO_
}

void VoipStatReportReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VoipStatReportReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required .micromsg.VoipStatReportData ReportData = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->reportdata_, output);
  }

  // optional .micromsg.VoipStatReportData ChannelReportData = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->channelreportdata_, output);
  }

  // optional .micromsg.VoipStatReportData DialReportData = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->dialreportdata_, output);
  }

  // optional .micromsg.VoipStatReportData EngineReportData = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->enginereportdata_, output);
  }

  // optional uint64 Timestamp64 = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->timestamp64(), output);
  }

  // optional .micromsg.VoipStatReportData EngineExtReportData = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->engineextreportdata_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VoipStatReportReq)
}

::google::protobuf::uint8* VoipStatReportReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VoipStatReportReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required .micromsg.VoipStatReportData ReportData = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->reportdata_, deterministic, target);
  }

  // optional .micromsg.VoipStatReportData ChannelReportData = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->channelreportdata_, deterministic, target);
  }

  // optional .micromsg.VoipStatReportData DialReportData = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->dialreportdata_, deterministic, target);
  }

  // optional .micromsg.VoipStatReportData EngineReportData = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->enginereportdata_, deterministic, target);
  }

  // optional uint64 Timestamp64 = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->timestamp64(), target);
  }

  // optional .micromsg.VoipStatReportData EngineExtReportData = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->engineextreportdata_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VoipStatReportReq)
  return target;
}

size_t VoipStatReportReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.VoipStatReportReq)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_reportdata()) {
    // required .micromsg.VoipStatReportData ReportData = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->reportdata_);
  }

  return total_size;
}
size_t VoipStatReportReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VoipStatReportReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.VoipStatReportData ReportData = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->reportdata_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 124u) {
    // optional .micromsg.VoipStatReportData ChannelReportData = 3;
    if (has_channelreportdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->channelreportdata_);
    }

    // optional .micromsg.VoipStatReportData DialReportData = 4;
    if (has_dialreportdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dialreportdata_);
    }

    // optional .micromsg.VoipStatReportData EngineReportData = 5;
    if (has_enginereportdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->enginereportdata_);
    }

    // optional .micromsg.VoipStatReportData EngineExtReportData = 7;
    if (has_engineextreportdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->engineextreportdata_);
    }

    // optional uint64 Timestamp64 = 6;
    if (has_timestamp64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp64());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoipStatReportReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VoipStatReportReq)
  GOOGLE_DCHECK_NE(&from, this);
  const VoipStatReportReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoipStatReportReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VoipStatReportReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VoipStatReportReq)
    MergeFrom(*source);
  }
}

void VoipStatReportReq::MergeFrom(const VoipStatReportReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VoipStatReportReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reportdata()->::micromsg::VoipStatReportData::MergeFrom(from.reportdata());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_channelreportdata()->::micromsg::VoipStatReportData::MergeFrom(from.channelreportdata());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_dialreportdata()->::micromsg::VoipStatReportData::MergeFrom(from.dialreportdata());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_enginereportdata()->::micromsg::VoipStatReportData::MergeFrom(from.enginereportdata());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_engineextreportdata()->::micromsg::VoipStatReportData::MergeFrom(from.engineextreportdata());
    }
    if (cached_has_bits & 0x00000040u) {
      timestamp64_ = from.timestamp64_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VoipStatReportReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VoipStatReportReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoipStatReportReq::CopyFrom(const VoipStatReportReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VoipStatReportReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoipStatReportReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_reportdata()) {
    if (!this->reportdata_->IsInitialized()) return false;
  }
  if (has_channelreportdata()) {
    if (!this->channelreportdata_->IsInitialized()) return false;
  }
  if (has_dialreportdata()) {
    if (!this->dialreportdata_->IsInitialized()) return false;
  }
  if (has_enginereportdata()) {
    if (!this->enginereportdata_->IsInitialized()) return false;
  }
  if (has_engineextreportdata()) {
    if (!this->engineextreportdata_->IsInitialized()) return false;
  }
  return true;
}

void VoipStatReportReq::Swap(VoipStatReportReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoipStatReportReq::InternalSwap(VoipStatReportReq* other) {
  std::swap(baserequest_, other->baserequest_);
  std::swap(reportdata_, other->reportdata_);
  std::swap(channelreportdata_, other->channelreportdata_);
  std::swap(dialreportdata_, other->dialreportdata_);
  std::swap(enginereportdata_, other->enginereportdata_);
  std::swap(engineextreportdata_, other->engineextreportdata_);
  std::swap(timestamp64_, other->timestamp64_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoipStatReportReq::GetMetadata() const {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoipStatReportReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool VoipStatReportReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoipStatReportReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void VoipStatReportReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoipStatReportReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& VoipStatReportReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipStatReportReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* VoipStatReportReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipStatReportReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* VoipStatReportReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.VoipStatReportReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void VoipStatReportReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipStatReportReq.BaseRequest)
}

// required .micromsg.VoipStatReportData ReportData = 2;
bool VoipStatReportReq::has_reportdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VoipStatReportReq::set_has_reportdata() {
  _has_bits_[0] |= 0x00000002u;
}
void VoipStatReportReq::clear_has_reportdata() {
  _has_bits_[0] &= ~0x00000002u;
}
void VoipStatReportReq::clear_reportdata() {
  if (reportdata_ != NULL) reportdata_->::micromsg::VoipStatReportData::Clear();
  clear_has_reportdata();
}
const ::micromsg::VoipStatReportData& VoipStatReportReq::reportdata() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipStatReportReq.ReportData)
  return reportdata_ != NULL ? *reportdata_
                         : *::micromsg::VoipStatReportData::internal_default_instance();
}
::micromsg::VoipStatReportData* VoipStatReportReq::mutable_reportdata() {
  set_has_reportdata();
  if (reportdata_ == NULL) {
    reportdata_ = new ::micromsg::VoipStatReportData;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipStatReportReq.ReportData)
  return reportdata_;
}
::micromsg::VoipStatReportData* VoipStatReportReq::release_reportdata() {
  // @@protoc_insertion_point(field_release:micromsg.VoipStatReportReq.ReportData)
  clear_has_reportdata();
  ::micromsg::VoipStatReportData* temp = reportdata_;
  reportdata_ = NULL;
  return temp;
}
void VoipStatReportReq::set_allocated_reportdata(::micromsg::VoipStatReportData* reportdata) {
  delete reportdata_;
  reportdata_ = reportdata;
  if (reportdata) {
    set_has_reportdata();
  } else {
    clear_has_reportdata();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipStatReportReq.ReportData)
}

// optional .micromsg.VoipStatReportData ChannelReportData = 3;
bool VoipStatReportReq::has_channelreportdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VoipStatReportReq::set_has_channelreportdata() {
  _has_bits_[0] |= 0x00000004u;
}
void VoipStatReportReq::clear_has_channelreportdata() {
  _has_bits_[0] &= ~0x00000004u;
}
void VoipStatReportReq::clear_channelreportdata() {
  if (channelreportdata_ != NULL) channelreportdata_->::micromsg::VoipStatReportData::Clear();
  clear_has_channelreportdata();
}
const ::micromsg::VoipStatReportData& VoipStatReportReq::channelreportdata() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipStatReportReq.ChannelReportData)
  return channelreportdata_ != NULL ? *channelreportdata_
                         : *::micromsg::VoipStatReportData::internal_default_instance();
}
::micromsg::VoipStatReportData* VoipStatReportReq::mutable_channelreportdata() {
  set_has_channelreportdata();
  if (channelreportdata_ == NULL) {
    channelreportdata_ = new ::micromsg::VoipStatReportData;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipStatReportReq.ChannelReportData)
  return channelreportdata_;
}
::micromsg::VoipStatReportData* VoipStatReportReq::release_channelreportdata() {
  // @@protoc_insertion_point(field_release:micromsg.VoipStatReportReq.ChannelReportData)
  clear_has_channelreportdata();
  ::micromsg::VoipStatReportData* temp = channelreportdata_;
  channelreportdata_ = NULL;
  return temp;
}
void VoipStatReportReq::set_allocated_channelreportdata(::micromsg::VoipStatReportData* channelreportdata) {
  delete channelreportdata_;
  channelreportdata_ = channelreportdata;
  if (channelreportdata) {
    set_has_channelreportdata();
  } else {
    clear_has_channelreportdata();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipStatReportReq.ChannelReportData)
}

// optional .micromsg.VoipStatReportData DialReportData = 4;
bool VoipStatReportReq::has_dialreportdata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VoipStatReportReq::set_has_dialreportdata() {
  _has_bits_[0] |= 0x00000008u;
}
void VoipStatReportReq::clear_has_dialreportdata() {
  _has_bits_[0] &= ~0x00000008u;
}
void VoipStatReportReq::clear_dialreportdata() {
  if (dialreportdata_ != NULL) dialreportdata_->::micromsg::VoipStatReportData::Clear();
  clear_has_dialreportdata();
}
const ::micromsg::VoipStatReportData& VoipStatReportReq::dialreportdata() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipStatReportReq.DialReportData)
  return dialreportdata_ != NULL ? *dialreportdata_
                         : *::micromsg::VoipStatReportData::internal_default_instance();
}
::micromsg::VoipStatReportData* VoipStatReportReq::mutable_dialreportdata() {
  set_has_dialreportdata();
  if (dialreportdata_ == NULL) {
    dialreportdata_ = new ::micromsg::VoipStatReportData;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipStatReportReq.DialReportData)
  return dialreportdata_;
}
::micromsg::VoipStatReportData* VoipStatReportReq::release_dialreportdata() {
  // @@protoc_insertion_point(field_release:micromsg.VoipStatReportReq.DialReportData)
  clear_has_dialreportdata();
  ::micromsg::VoipStatReportData* temp = dialreportdata_;
  dialreportdata_ = NULL;
  return temp;
}
void VoipStatReportReq::set_allocated_dialreportdata(::micromsg::VoipStatReportData* dialreportdata) {
  delete dialreportdata_;
  dialreportdata_ = dialreportdata;
  if (dialreportdata) {
    set_has_dialreportdata();
  } else {
    clear_has_dialreportdata();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipStatReportReq.DialReportData)
}

// optional .micromsg.VoipStatReportData EngineReportData = 5;
bool VoipStatReportReq::has_enginereportdata() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VoipStatReportReq::set_has_enginereportdata() {
  _has_bits_[0] |= 0x00000010u;
}
void VoipStatReportReq::clear_has_enginereportdata() {
  _has_bits_[0] &= ~0x00000010u;
}
void VoipStatReportReq::clear_enginereportdata() {
  if (enginereportdata_ != NULL) enginereportdata_->::micromsg::VoipStatReportData::Clear();
  clear_has_enginereportdata();
}
const ::micromsg::VoipStatReportData& VoipStatReportReq::enginereportdata() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipStatReportReq.EngineReportData)
  return enginereportdata_ != NULL ? *enginereportdata_
                         : *::micromsg::VoipStatReportData::internal_default_instance();
}
::micromsg::VoipStatReportData* VoipStatReportReq::mutable_enginereportdata() {
  set_has_enginereportdata();
  if (enginereportdata_ == NULL) {
    enginereportdata_ = new ::micromsg::VoipStatReportData;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipStatReportReq.EngineReportData)
  return enginereportdata_;
}
::micromsg::VoipStatReportData* VoipStatReportReq::release_enginereportdata() {
  // @@protoc_insertion_point(field_release:micromsg.VoipStatReportReq.EngineReportData)
  clear_has_enginereportdata();
  ::micromsg::VoipStatReportData* temp = enginereportdata_;
  enginereportdata_ = NULL;
  return temp;
}
void VoipStatReportReq::set_allocated_enginereportdata(::micromsg::VoipStatReportData* enginereportdata) {
  delete enginereportdata_;
  enginereportdata_ = enginereportdata;
  if (enginereportdata) {
    set_has_enginereportdata();
  } else {
    clear_has_enginereportdata();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipStatReportReq.EngineReportData)
}

// optional uint64 Timestamp64 = 6;
bool VoipStatReportReq::has_timestamp64() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VoipStatReportReq::set_has_timestamp64() {
  _has_bits_[0] |= 0x00000040u;
}
void VoipStatReportReq::clear_has_timestamp64() {
  _has_bits_[0] &= ~0x00000040u;
}
void VoipStatReportReq::clear_timestamp64() {
  timestamp64_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp64();
}
::google::protobuf::uint64 VoipStatReportReq::timestamp64() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipStatReportReq.Timestamp64)
  return timestamp64_;
}
void VoipStatReportReq::set_timestamp64(::google::protobuf::uint64 value) {
  set_has_timestamp64();
  timestamp64_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipStatReportReq.Timestamp64)
}

// optional .micromsg.VoipStatReportData EngineExtReportData = 7;
bool VoipStatReportReq::has_engineextreportdata() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VoipStatReportReq::set_has_engineextreportdata() {
  _has_bits_[0] |= 0x00000020u;
}
void VoipStatReportReq::clear_has_engineextreportdata() {
  _has_bits_[0] &= ~0x00000020u;
}
void VoipStatReportReq::clear_engineextreportdata() {
  if (engineextreportdata_ != NULL) engineextreportdata_->::micromsg::VoipStatReportData::Clear();
  clear_has_engineextreportdata();
}
const ::micromsg::VoipStatReportData& VoipStatReportReq::engineextreportdata() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipStatReportReq.EngineExtReportData)
  return engineextreportdata_ != NULL ? *engineextreportdata_
                         : *::micromsg::VoipStatReportData::internal_default_instance();
}
::micromsg::VoipStatReportData* VoipStatReportReq::mutable_engineextreportdata() {
  set_has_engineextreportdata();
  if (engineextreportdata_ == NULL) {
    engineextreportdata_ = new ::micromsg::VoipStatReportData;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipStatReportReq.EngineExtReportData)
  return engineextreportdata_;
}
::micromsg::VoipStatReportData* VoipStatReportReq::release_engineextreportdata() {
  // @@protoc_insertion_point(field_release:micromsg.VoipStatReportReq.EngineExtReportData)
  clear_has_engineextreportdata();
  ::micromsg::VoipStatReportData* temp = engineextreportdata_;
  engineextreportdata_ = NULL;
  return temp;
}
void VoipStatReportReq::set_allocated_engineextreportdata(::micromsg::VoipStatReportData* engineextreportdata) {
  delete engineextreportdata_;
  engineextreportdata_ = engineextreportdata;
  if (engineextreportdata) {
    set_has_engineextreportdata();
  } else {
    clear_has_engineextreportdata();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipStatReportReq.EngineExtReportData)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoipStatReportResp::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoipStatReportResp::VoipStatReportResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VoipStatReportResp)
}
VoipStatReportResp::VoipStatReportResp(const VoipStatReportResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.VoipStatReportResp)
}

void VoipStatReportResp::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

VoipStatReportResp::~VoipStatReportResp() {
  // @@protoc_insertion_point(destructor:micromsg.VoipStatReportResp)
  SharedDtor();
}

void VoipStatReportResp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void VoipStatReportResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoipStatReportResp::descriptor() {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoipStatReportResp& VoipStatReportResp::default_instance() {
  protobuf_mmvoip_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoipStatReportResp* VoipStatReportResp::New(::google::protobuf::Arena* arena) const {
  VoipStatReportResp* n = new VoipStatReportResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoipStatReportResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VoipStatReportResp)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoipStatReportResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VoipStatReportResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VoipStatReportResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VoipStatReportResp)
  return false;
#undef DO_
}

void VoipStatReportResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VoipStatReportResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VoipStatReportResp)
}

::google::protobuf::uint8* VoipStatReportResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VoipStatReportResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VoipStatReportResp)
  return target;
}

size_t VoipStatReportResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VoipStatReportResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoipStatReportResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VoipStatReportResp)
  GOOGLE_DCHECK_NE(&from, this);
  const VoipStatReportResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoipStatReportResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VoipStatReportResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VoipStatReportResp)
    MergeFrom(*source);
  }
}

void VoipStatReportResp::MergeFrom(const VoipStatReportResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VoipStatReportResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void VoipStatReportResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VoipStatReportResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoipStatReportResp::CopyFrom(const VoipStatReportResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VoipStatReportResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoipStatReportResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void VoipStatReportResp::Swap(VoipStatReportResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoipStatReportResp::InternalSwap(VoipStatReportResp* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoipStatReportResp::GetMetadata() const {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoipStatReportResp

// required .micromsg.BaseResponse BaseResponse = 1;
bool VoipStatReportResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoipStatReportResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void VoipStatReportResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoipStatReportResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& VoipStatReportResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipStatReportResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* VoipStatReportResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipStatReportResp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* VoipStatReportResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.VoipStatReportResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void VoipStatReportResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipStatReportResp.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoipCompleteStatus::kCmdIdFieldNumber;
const int VoipCompleteStatus::kUinFieldNumber;
const int VoipCompleteStatus::kKeyFieldNumber;
const int VoipCompleteStatus::kBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoipCompleteStatus::VoipCompleteStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VoipCompleteStatus)
}
VoipCompleteStatus::VoipCompleteStatus(const VoipCompleteStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_buffer()) {
    buffer_ = new ::micromsg::SKBuiltinBuffer_t(*from.buffer_);
  } else {
    buffer_ = NULL;
  }
  ::memcpy(&cmdid_, &from.cmdid_,
    reinterpret_cast<char*>(&key_) -
    reinterpret_cast<char*>(&cmdid_) + sizeof(key_));
  // @@protoc_insertion_point(copy_constructor:micromsg.VoipCompleteStatus)
}

void VoipCompleteStatus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&buffer_, 0, reinterpret_cast<char*>(&key_) -
    reinterpret_cast<char*>(&buffer_) + sizeof(key_));
}

VoipCompleteStatus::~VoipCompleteStatus() {
  // @@protoc_insertion_point(destructor:micromsg.VoipCompleteStatus)
  SharedDtor();
}

void VoipCompleteStatus::SharedDtor() {
  if (this != internal_default_instance()) {
    delete buffer_;
  }
}

void VoipCompleteStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoipCompleteStatus::descriptor() {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoipCompleteStatus& VoipCompleteStatus::default_instance() {
  protobuf_mmvoip_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoipCompleteStatus* VoipCompleteStatus::New(::google::protobuf::Arena* arena) const {
  VoipCompleteStatus* n = new VoipCompleteStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoipCompleteStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VoipCompleteStatus)
  if (has_buffer()) {
    GOOGLE_DCHECK(buffer_ != NULL);
    buffer_->::micromsg::SKBuiltinBuffer_t::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&cmdid_, 0, reinterpret_cast<char*>(&key_) -
      reinterpret_cast<char*>(&cmdid_) + sizeof(key_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoipCompleteStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VoipCompleteStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CmdId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_cmdid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmdid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Uin = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_uin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_key();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t Buffer = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VoipCompleteStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VoipCompleteStatus)
  return false;
#undef DO_
}

void VoipCompleteStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VoipCompleteStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 CmdId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmdid(), output);
  }

  // required uint32 Uin = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uin(), output);
  }

  // required uint32 Key = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->key(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t Buffer = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->buffer_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VoipCompleteStatus)
}

::google::protobuf::uint8* VoipCompleteStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VoipCompleteStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 CmdId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmdid(), target);
  }

  // required uint32 Uin = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uin(), target);
  }

  // required uint32 Key = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->key(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t Buffer = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->buffer_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VoipCompleteStatus)
  return target;
}

size_t VoipCompleteStatus::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.VoipCompleteStatus)
  size_t total_size = 0;

  if (has_buffer()) {
    // required .micromsg.SKBuiltinBuffer_t Buffer = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->buffer_);
  }

  if (has_cmdid()) {
    // required int32 CmdId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cmdid());
  }

  if (has_uin()) {
    // required uint32 Uin = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uin());
  }

  if (has_key()) {
    // required uint32 Key = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->key());
  }

  return total_size;
}
size_t VoipCompleteStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VoipCompleteStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .micromsg.SKBuiltinBuffer_t Buffer = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->buffer_);

    // required int32 CmdId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cmdid());

    // required uint32 Uin = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uin());

    // required uint32 Key = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->key());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoipCompleteStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VoipCompleteStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const VoipCompleteStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoipCompleteStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VoipCompleteStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VoipCompleteStatus)
    MergeFrom(*source);
  }
}

void VoipCompleteStatus::MergeFrom(const VoipCompleteStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VoipCompleteStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_buffer()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.buffer());
    }
    if (cached_has_bits & 0x00000002u) {
      cmdid_ = from.cmdid_;
    }
    if (cached_has_bits & 0x00000004u) {
      uin_ = from.uin_;
    }
    if (cached_has_bits & 0x00000008u) {
      key_ = from.key_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VoipCompleteStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VoipCompleteStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoipCompleteStatus::CopyFrom(const VoipCompleteStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VoipCompleteStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoipCompleteStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_buffer()) {
    if (!this->buffer_->IsInitialized()) return false;
  }
  return true;
}

void VoipCompleteStatus::Swap(VoipCompleteStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoipCompleteStatus::InternalSwap(VoipCompleteStatus* other) {
  std::swap(buffer_, other->buffer_);
  std::swap(cmdid_, other->cmdid_);
  std::swap(uin_, other->uin_);
  std::swap(key_, other->key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoipCompleteStatus::GetMetadata() const {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoipCompleteStatus

// required int32 CmdId = 1;
bool VoipCompleteStatus::has_cmdid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VoipCompleteStatus::set_has_cmdid() {
  _has_bits_[0] |= 0x00000002u;
}
void VoipCompleteStatus::clear_has_cmdid() {
  _has_bits_[0] &= ~0x00000002u;
}
void VoipCompleteStatus::clear_cmdid() {
  cmdid_ = 0;
  clear_has_cmdid();
}
::google::protobuf::int32 VoipCompleteStatus::cmdid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipCompleteStatus.CmdId)
  return cmdid_;
}
void VoipCompleteStatus::set_cmdid(::google::protobuf::int32 value) {
  set_has_cmdid();
  cmdid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipCompleteStatus.CmdId)
}

// required uint32 Uin = 2;
bool VoipCompleteStatus::has_uin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VoipCompleteStatus::set_has_uin() {
  _has_bits_[0] |= 0x00000004u;
}
void VoipCompleteStatus::clear_has_uin() {
  _has_bits_[0] &= ~0x00000004u;
}
void VoipCompleteStatus::clear_uin() {
  uin_ = 0u;
  clear_has_uin();
}
::google::protobuf::uint32 VoipCompleteStatus::uin() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipCompleteStatus.Uin)
  return uin_;
}
void VoipCompleteStatus::set_uin(::google::protobuf::uint32 value) {
  set_has_uin();
  uin_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipCompleteStatus.Uin)
}

// required uint32 Key = 3;
bool VoipCompleteStatus::has_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VoipCompleteStatus::set_has_key() {
  _has_bits_[0] |= 0x00000008u;
}
void VoipCompleteStatus::clear_has_key() {
  _has_bits_[0] &= ~0x00000008u;
}
void VoipCompleteStatus::clear_key() {
  key_ = 0u;
  clear_has_key();
}
::google::protobuf::uint32 VoipCompleteStatus::key() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipCompleteStatus.Key)
  return key_;
}
void VoipCompleteStatus::set_key(::google::protobuf::uint32 value) {
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipCompleteStatus.Key)
}

// required .micromsg.SKBuiltinBuffer_t Buffer = 4;
bool VoipCompleteStatus::has_buffer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoipCompleteStatus::set_has_buffer() {
  _has_bits_[0] |= 0x00000001u;
}
void VoipCompleteStatus::clear_has_buffer() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoipCompleteStatus::clear_buffer() {
  if (buffer_ != NULL) buffer_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_buffer();
}
const ::micromsg::SKBuiltinBuffer_t& VoipCompleteStatus::buffer() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipCompleteStatus.Buffer)
  return buffer_ != NULL ? *buffer_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* VoipCompleteStatus::mutable_buffer() {
  set_has_buffer();
  if (buffer_ == NULL) {
    buffer_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipCompleteStatus.Buffer)
  return buffer_;
}
::micromsg::SKBuiltinBuffer_t* VoipCompleteStatus::release_buffer() {
  // @@protoc_insertion_point(field_release:micromsg.VoipCompleteStatus.Buffer)
  clear_has_buffer();
  ::micromsg::SKBuiltinBuffer_t* temp = buffer_;
  buffer_ = NULL;
  return temp;
}
void VoipCompleteStatus::set_allocated_buffer(::micromsg::SKBuiltinBuffer_t* buffer) {
  delete buffer_;
  buffer_ = buffer;
  if (buffer) {
    set_has_buffer();
  } else {
    clear_has_buffer();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipCompleteStatus.Buffer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoipCompleteStatusList::kCountFieldNumber;
const int VoipCompleteStatusList::kCompleteStatusFieldNumber;
const int VoipCompleteStatusList::kSeqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoipCompleteStatusList::VoipCompleteStatusList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VoipCompleteStatusList)
}
VoipCompleteStatusList::VoipCompleteStatusList(const VoipCompleteStatusList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      completestatus_(from.completestatus_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&count_, &from.count_,
    reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&count_) + sizeof(seq_));
  // @@protoc_insertion_point(copy_constructor:micromsg.VoipCompleteStatusList)
}

void VoipCompleteStatusList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&count_, 0, reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&count_) + sizeof(seq_));
}

VoipCompleteStatusList::~VoipCompleteStatusList() {
  // @@protoc_insertion_point(destructor:micromsg.VoipCompleteStatusList)
  SharedDtor();
}

void VoipCompleteStatusList::SharedDtor() {
}

void VoipCompleteStatusList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoipCompleteStatusList::descriptor() {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoipCompleteStatusList& VoipCompleteStatusList::default_instance() {
  protobuf_mmvoip_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoipCompleteStatusList* VoipCompleteStatusList::New(::google::protobuf::Arena* arena) const {
  VoipCompleteStatusList* n = new VoipCompleteStatusList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoipCompleteStatusList::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VoipCompleteStatusList)
  completestatus_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&count_, 0, reinterpret_cast<char*>(&seq_) -
      reinterpret_cast<char*>(&count_) + sizeof(seq_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoipCompleteStatusList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VoipCompleteStatusList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.VoipCompleteStatus CompleteStatus = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_completestatus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Seq = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_seq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VoipCompleteStatusList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VoipCompleteStatusList)
  return false;
#undef DO_
}

void VoipCompleteStatusList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VoipCompleteStatusList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // repeated .micromsg.VoipCompleteStatus CompleteStatus = 2;
  for (unsigned int i = 0, n = this->completestatus_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->completestatus(i), output);
  }

  // required uint32 Seq = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->seq(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VoipCompleteStatusList)
}

::google::protobuf::uint8* VoipCompleteStatusList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VoipCompleteStatusList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // repeated .micromsg.VoipCompleteStatus CompleteStatus = 2;
  for (unsigned int i = 0, n = this->completestatus_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->completestatus(i), deterministic, target);
  }

  // required uint32 Seq = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->seq(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VoipCompleteStatusList)
  return target;
}

size_t VoipCompleteStatusList::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.VoipCompleteStatusList)
  size_t total_size = 0;

  if (has_count()) {
    // required int32 Count = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  if (has_seq()) {
    // required uint32 Seq = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seq());
  }

  return total_size;
}
size_t VoipCompleteStatusList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VoipCompleteStatusList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 Count = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());

    // required uint32 Seq = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seq());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.VoipCompleteStatus CompleteStatus = 2;
  {
    unsigned int count = this->completestatus_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->completestatus(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoipCompleteStatusList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VoipCompleteStatusList)
  GOOGLE_DCHECK_NE(&from, this);
  const VoipCompleteStatusList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoipCompleteStatusList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VoipCompleteStatusList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VoipCompleteStatusList)
    MergeFrom(*source);
  }
}

void VoipCompleteStatusList::MergeFrom(const VoipCompleteStatusList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VoipCompleteStatusList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  completestatus_.MergeFrom(from.completestatus_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000002u) {
      seq_ = from.seq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VoipCompleteStatusList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VoipCompleteStatusList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoipCompleteStatusList::CopyFrom(const VoipCompleteStatusList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VoipCompleteStatusList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoipCompleteStatusList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->completestatus())) return false;
  return true;
}

void VoipCompleteStatusList::Swap(VoipCompleteStatusList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoipCompleteStatusList::InternalSwap(VoipCompleteStatusList* other) {
  completestatus_.InternalSwap(&other->completestatus_);
  std::swap(count_, other->count_);
  std::swap(seq_, other->seq_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoipCompleteStatusList::GetMetadata() const {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoipCompleteStatusList

// required int32 Count = 1;
bool VoipCompleteStatusList::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoipCompleteStatusList::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
void VoipCompleteStatusList::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoipCompleteStatusList::clear_count() {
  count_ = 0;
  clear_has_count();
}
::google::protobuf::int32 VoipCompleteStatusList::count() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipCompleteStatusList.Count)
  return count_;
}
void VoipCompleteStatusList::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipCompleteStatusList.Count)
}

// repeated .micromsg.VoipCompleteStatus CompleteStatus = 2;
int VoipCompleteStatusList::completestatus_size() const {
  return completestatus_.size();
}
void VoipCompleteStatusList::clear_completestatus() {
  completestatus_.Clear();
}
const ::micromsg::VoipCompleteStatus& VoipCompleteStatusList::completestatus(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.VoipCompleteStatusList.CompleteStatus)
  return completestatus_.Get(index);
}
::micromsg::VoipCompleteStatus* VoipCompleteStatusList::mutable_completestatus(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.VoipCompleteStatusList.CompleteStatus)
  return completestatus_.Mutable(index);
}
::micromsg::VoipCompleteStatus* VoipCompleteStatusList::add_completestatus() {
  // @@protoc_insertion_point(field_add:micromsg.VoipCompleteStatusList.CompleteStatus)
  return completestatus_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::VoipCompleteStatus >*
VoipCompleteStatusList::mutable_completestatus() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.VoipCompleteStatusList.CompleteStatus)
  return &completestatus_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::VoipCompleteStatus >&
VoipCompleteStatusList::completestatus() const {
  // @@protoc_insertion_point(field_list:micromsg.VoipCompleteStatusList.CompleteStatus)
  return completestatus_;
}

// required uint32 Seq = 3;
bool VoipCompleteStatusList::has_seq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VoipCompleteStatusList::set_has_seq() {
  _has_bits_[0] |= 0x00000002u;
}
void VoipCompleteStatusList::clear_has_seq() {
  _has_bits_[0] &= ~0x00000002u;
}
void VoipCompleteStatusList::clear_seq() {
  seq_ = 0u;
  clear_has_seq();
}
::google::protobuf::uint32 VoipCompleteStatusList::seq() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipCompleteStatusList.Seq)
  return seq_;
}
void VoipCompleteStatusList::set_seq(::google::protobuf::uint32 value) {
  set_has_seq();
  seq_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipCompleteStatusList.Seq)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoipRedirectReq::kBaseRequestFieldNumber;
const int VoipRedirectReq::kRoomIdFieldNumber;
const int VoipRedirectReq::kRoomKeyFieldNumber;
const int VoipRedirectReq::kRoomMemberIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoipRedirectReq::VoipRedirectReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VoipRedirectReq)
}
VoipRedirectReq::VoipRedirectReq(const VoipRedirectReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&roomkey_, &from.roomkey_,
    reinterpret_cast<char*>(&roommemberid_) -
    reinterpret_cast<char*>(&roomkey_) + sizeof(roommemberid_));
  // @@protoc_insertion_point(copy_constructor:micromsg.VoipRedirectReq)
}

void VoipRedirectReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&roommemberid_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(roommemberid_));
}

VoipRedirectReq::~VoipRedirectReq() {
  // @@protoc_insertion_point(destructor:micromsg.VoipRedirectReq)
  SharedDtor();
}

void VoipRedirectReq::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void VoipRedirectReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoipRedirectReq::descriptor() {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoipRedirectReq& VoipRedirectReq::default_instance() {
  protobuf_mmvoip_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoipRedirectReq* VoipRedirectReq::New(::google::protobuf::Arena* arena) const {
  VoipRedirectReq* n = new VoipRedirectReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoipRedirectReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VoipRedirectReq)
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&roomkey_, 0, reinterpret_cast<char*>(&roommemberid_) -
      reinterpret_cast<char*>(&roomkey_) + sizeof(roommemberid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoipRedirectReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VoipRedirectReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 RoomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_roomid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 RoomKey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_roomkey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roomkey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 RoomMemberId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_roommemberid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roommemberid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VoipRedirectReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VoipRedirectReq)
  return false;
#undef DO_
}

void VoipRedirectReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VoipRedirectReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required int32 RoomId = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // required int64 RoomKey = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->roomkey(), output);
  }

  // required int32 RoomMemberId = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->roommemberid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VoipRedirectReq)
}

::google::protobuf::uint8* VoipRedirectReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VoipRedirectReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required int32 RoomId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // required int64 RoomKey = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->roomkey(), target);
  }

  // required int32 RoomMemberId = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->roommemberid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VoipRedirectReq)
  return target;
}

size_t VoipRedirectReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.VoipRedirectReq)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_roomkey()) {
    // required int64 RoomKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());
  }

  if (has_roomid()) {
    // required int32 RoomId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  if (has_roommemberid()) {
    // required int32 RoomMemberId = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roommemberid());
  }

  return total_size;
}
size_t VoipRedirectReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VoipRedirectReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required int64 RoomKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());

    // required int32 RoomId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());

    // required int32 RoomMemberId = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roommemberid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoipRedirectReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VoipRedirectReq)
  GOOGLE_DCHECK_NE(&from, this);
  const VoipRedirectReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoipRedirectReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VoipRedirectReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VoipRedirectReq)
    MergeFrom(*source);
  }
}

void VoipRedirectReq::MergeFrom(const VoipRedirectReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VoipRedirectReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      roomkey_ = from.roomkey_;
    }
    if (cached_has_bits & 0x00000004u) {
      roomid_ = from.roomid_;
    }
    if (cached_has_bits & 0x00000008u) {
      roommemberid_ = from.roommemberid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VoipRedirectReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VoipRedirectReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoipRedirectReq::CopyFrom(const VoipRedirectReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VoipRedirectReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoipRedirectReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void VoipRedirectReq::Swap(VoipRedirectReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoipRedirectReq::InternalSwap(VoipRedirectReq* other) {
  std::swap(baserequest_, other->baserequest_);
  std::swap(roomkey_, other->roomkey_);
  std::swap(roomid_, other->roomid_);
  std::swap(roommemberid_, other->roommemberid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoipRedirectReq::GetMetadata() const {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoipRedirectReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool VoipRedirectReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoipRedirectReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void VoipRedirectReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoipRedirectReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& VoipRedirectReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipRedirectReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* VoipRedirectReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipRedirectReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* VoipRedirectReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.VoipRedirectReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void VoipRedirectReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipRedirectReq.BaseRequest)
}

// required int32 RoomId = 2;
bool VoipRedirectReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VoipRedirectReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
void VoipRedirectReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
void VoipRedirectReq::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
::google::protobuf::int32 VoipRedirectReq::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipRedirectReq.RoomId)
  return roomid_;
}
void VoipRedirectReq::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipRedirectReq.RoomId)
}

// required int64 RoomKey = 3;
bool VoipRedirectReq::has_roomkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VoipRedirectReq::set_has_roomkey() {
  _has_bits_[0] |= 0x00000002u;
}
void VoipRedirectReq::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000002u;
}
void VoipRedirectReq::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
::google::protobuf::int64 VoipRedirectReq::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipRedirectReq.RoomKey)
  return roomkey_;
}
void VoipRedirectReq::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipRedirectReq.RoomKey)
}

// required int32 RoomMemberId = 4;
bool VoipRedirectReq::has_roommemberid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VoipRedirectReq::set_has_roommemberid() {
  _has_bits_[0] |= 0x00000008u;
}
void VoipRedirectReq::clear_has_roommemberid() {
  _has_bits_[0] &= ~0x00000008u;
}
void VoipRedirectReq::clear_roommemberid() {
  roommemberid_ = 0;
  clear_has_roommemberid();
}
::google::protobuf::int32 VoipRedirectReq::roommemberid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipRedirectReq.RoomMemberId)
  return roommemberid_;
}
void VoipRedirectReq::set_roommemberid(::google::protobuf::int32 value) {
  set_has_roommemberid();
  roommemberid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipRedirectReq.RoomMemberId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoipRedirectResp::kBaseResponseFieldNumber;
const int VoipRedirectResp::kRoomIdFieldNumber;
const int VoipRedirectResp::kRelayAddrCountFieldNumber;
const int VoipRedirectResp::kRelayAddrListFieldNumber;
const int VoipRedirectResp::kPunchAddrCountFieldNumber;
const int VoipRedirectResp::kPunchAddrListFieldNumber;
const int VoipRedirectResp::kRoomKeyFieldNumber;
const int VoipRedirectResp::kRoomMemberIdFieldNumber;
const int VoipRedirectResp::kTcpAddrCountFieldNumber;
const int VoipRedirectResp::kTcpAddrListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoipRedirectResp::VoipRedirectResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VoipRedirectResp)
}
VoipRedirectResp::VoipRedirectResp(const VoipRedirectResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      relayaddrlist_(from.relayaddrlist_),
      punchaddrlist_(from.punchaddrlist_),
      tcpaddrlist_(from.tcpaddrlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  ::memcpy(&roomid_, &from.roomid_,
    reinterpret_cast<char*>(&tcpaddrcount_) -
    reinterpret_cast<char*>(&roomid_) + sizeof(tcpaddrcount_));
  // @@protoc_insertion_point(copy_constructor:micromsg.VoipRedirectResp)
}

void VoipRedirectResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&tcpaddrcount_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(tcpaddrcount_));
}

VoipRedirectResp::~VoipRedirectResp() {
  // @@protoc_insertion_point(destructor:micromsg.VoipRedirectResp)
  SharedDtor();
}

void VoipRedirectResp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void VoipRedirectResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoipRedirectResp::descriptor() {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoipRedirectResp& VoipRedirectResp::default_instance() {
  protobuf_mmvoip_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoipRedirectResp* VoipRedirectResp::New(::google::protobuf::Arena* arena) const {
  VoipRedirectResp* n = new VoipRedirectResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoipRedirectResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VoipRedirectResp)
  relayaddrlist_.Clear();
  punchaddrlist_.Clear();
  tcpaddrlist_.Clear();
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  if (_has_bits_[0 / 32] & 126u) {
    ::memset(&roomid_, 0, reinterpret_cast<char*>(&tcpaddrcount_) -
      reinterpret_cast<char*>(&roomid_) + sizeof(tcpaddrcount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoipRedirectResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VoipRedirectResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 RoomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_roomid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 RelayAddrCount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_relayaddrcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &relayaddrcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.VoipAddr RelayAddrList = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_relayaddrlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 PunchAddrCount = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_punchaddrcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &punchaddrcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.VoipAddr PunchAddrList = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_punchaddrlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 RoomKey = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_roomkey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roomkey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 RoomMemberId = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_roommemberid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roommemberid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 TcpAddrCount = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_tcpaddrcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tcpaddrcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.VoipAddr TcpAddrList = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tcpaddrlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VoipRedirectResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VoipRedirectResp)
  return false;
#undef DO_
}

void VoipRedirectResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VoipRedirectResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required int32 RoomId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // required int32 RelayAddrCount = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->relayaddrcount(), output);
  }

  // repeated .micromsg.VoipAddr RelayAddrList = 4;
  for (unsigned int i = 0, n = this->relayaddrlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->relayaddrlist(i), output);
  }

  // required int32 PunchAddrCount = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->punchaddrcount(), output);
  }

  // repeated .micromsg.VoipAddr PunchAddrList = 6;
  for (unsigned int i = 0, n = this->punchaddrlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->punchaddrlist(i), output);
  }

  // required int64 RoomKey = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->roomkey(), output);
  }

  // required int32 RoomMemberId = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->roommemberid(), output);
  }

  // optional int32 TcpAddrCount = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->tcpaddrcount(), output);
  }

  // repeated .micromsg.VoipAddr TcpAddrList = 10;
  for (unsigned int i = 0, n = this->tcpaddrlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->tcpaddrlist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VoipRedirectResp)
}

::google::protobuf::uint8* VoipRedirectResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VoipRedirectResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required int32 RoomId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // required int32 RelayAddrCount = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->relayaddrcount(), target);
  }

  // repeated .micromsg.VoipAddr RelayAddrList = 4;
  for (unsigned int i = 0, n = this->relayaddrlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->relayaddrlist(i), deterministic, target);
  }

  // required int32 PunchAddrCount = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->punchaddrcount(), target);
  }

  // repeated .micromsg.VoipAddr PunchAddrList = 6;
  for (unsigned int i = 0, n = this->punchaddrlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->punchaddrlist(i), deterministic, target);
  }

  // required int64 RoomKey = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->roomkey(), target);
  }

  // required int32 RoomMemberId = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->roommemberid(), target);
  }

  // optional int32 TcpAddrCount = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->tcpaddrcount(), target);
  }

  // repeated .micromsg.VoipAddr TcpAddrList = 10;
  for (unsigned int i = 0, n = this->tcpaddrlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->tcpaddrlist(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VoipRedirectResp)
  return target;
}

size_t VoipRedirectResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.VoipRedirectResp)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_roomid()) {
    // required int32 RoomId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  if (has_relayaddrcount()) {
    // required int32 RelayAddrCount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->relayaddrcount());
  }

  if (has_punchaddrcount()) {
    // required int32 PunchAddrCount = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->punchaddrcount());
  }

  if (has_roommemberid()) {
    // required int32 RoomMemberId = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roommemberid());
  }

  if (has_roomkey()) {
    // required int64 RoomKey = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());
  }

  return total_size;
}
size_t VoipRedirectResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VoipRedirectResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required int32 RoomId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());

    // required int32 RelayAddrCount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->relayaddrcount());

    // required int32 PunchAddrCount = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->punchaddrcount());

    // required int32 RoomMemberId = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roommemberid());

    // required int64 RoomKey = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.VoipAddr RelayAddrList = 4;
  {
    unsigned int count = this->relayaddrlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->relayaddrlist(i));
    }
  }

  // repeated .micromsg.VoipAddr PunchAddrList = 6;
  {
    unsigned int count = this->punchaddrlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->punchaddrlist(i));
    }
  }

  // repeated .micromsg.VoipAddr TcpAddrList = 10;
  {
    unsigned int count = this->tcpaddrlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tcpaddrlist(i));
    }
  }

  // optional int32 TcpAddrCount = 9;
  if (has_tcpaddrcount()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tcpaddrcount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoipRedirectResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VoipRedirectResp)
  GOOGLE_DCHECK_NE(&from, this);
  const VoipRedirectResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoipRedirectResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VoipRedirectResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VoipRedirectResp)
    MergeFrom(*source);
  }
}

void VoipRedirectResp::MergeFrom(const VoipRedirectResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VoipRedirectResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  relayaddrlist_.MergeFrom(from.relayaddrlist_);
  punchaddrlist_.MergeFrom(from.punchaddrlist_);
  tcpaddrlist_.MergeFrom(from.tcpaddrlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      roomid_ = from.roomid_;
    }
    if (cached_has_bits & 0x00000004u) {
      relayaddrcount_ = from.relayaddrcount_;
    }
    if (cached_has_bits & 0x00000008u) {
      punchaddrcount_ = from.punchaddrcount_;
    }
    if (cached_has_bits & 0x00000010u) {
      roommemberid_ = from.roommemberid_;
    }
    if (cached_has_bits & 0x00000020u) {
      roomkey_ = from.roomkey_;
    }
    if (cached_has_bits & 0x00000040u) {
      tcpaddrcount_ = from.tcpaddrcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VoipRedirectResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VoipRedirectResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoipRedirectResp::CopyFrom(const VoipRedirectResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VoipRedirectResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoipRedirectResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->relayaddrlist())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->punchaddrlist())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->tcpaddrlist())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void VoipRedirectResp::Swap(VoipRedirectResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoipRedirectResp::InternalSwap(VoipRedirectResp* other) {
  relayaddrlist_.InternalSwap(&other->relayaddrlist_);
  punchaddrlist_.InternalSwap(&other->punchaddrlist_);
  tcpaddrlist_.InternalSwap(&other->tcpaddrlist_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(roomid_, other->roomid_);
  std::swap(relayaddrcount_, other->relayaddrcount_);
  std::swap(punchaddrcount_, other->punchaddrcount_);
  std::swap(roommemberid_, other->roommemberid_);
  std::swap(roomkey_, other->roomkey_);
  std::swap(tcpaddrcount_, other->tcpaddrcount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoipRedirectResp::GetMetadata() const {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoipRedirectResp

// required .micromsg.BaseResponse BaseResponse = 1;
bool VoipRedirectResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoipRedirectResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void VoipRedirectResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoipRedirectResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& VoipRedirectResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipRedirectResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* VoipRedirectResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipRedirectResp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* VoipRedirectResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.VoipRedirectResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void VoipRedirectResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipRedirectResp.BaseResponse)
}

// required int32 RoomId = 2;
bool VoipRedirectResp::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VoipRedirectResp::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
void VoipRedirectResp::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
void VoipRedirectResp::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
::google::protobuf::int32 VoipRedirectResp::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipRedirectResp.RoomId)
  return roomid_;
}
void VoipRedirectResp::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipRedirectResp.RoomId)
}

// required int32 RelayAddrCount = 3;
bool VoipRedirectResp::has_relayaddrcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VoipRedirectResp::set_has_relayaddrcount() {
  _has_bits_[0] |= 0x00000004u;
}
void VoipRedirectResp::clear_has_relayaddrcount() {
  _has_bits_[0] &= ~0x00000004u;
}
void VoipRedirectResp::clear_relayaddrcount() {
  relayaddrcount_ = 0;
  clear_has_relayaddrcount();
}
::google::protobuf::int32 VoipRedirectResp::relayaddrcount() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipRedirectResp.RelayAddrCount)
  return relayaddrcount_;
}
void VoipRedirectResp::set_relayaddrcount(::google::protobuf::int32 value) {
  set_has_relayaddrcount();
  relayaddrcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipRedirectResp.RelayAddrCount)
}

// repeated .micromsg.VoipAddr RelayAddrList = 4;
int VoipRedirectResp::relayaddrlist_size() const {
  return relayaddrlist_.size();
}
void VoipRedirectResp::clear_relayaddrlist() {
  relayaddrlist_.Clear();
}
const ::micromsg::VoipAddr& VoipRedirectResp::relayaddrlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.VoipRedirectResp.RelayAddrList)
  return relayaddrlist_.Get(index);
}
::micromsg::VoipAddr* VoipRedirectResp::mutable_relayaddrlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.VoipRedirectResp.RelayAddrList)
  return relayaddrlist_.Mutable(index);
}
::micromsg::VoipAddr* VoipRedirectResp::add_relayaddrlist() {
  // @@protoc_insertion_point(field_add:micromsg.VoipRedirectResp.RelayAddrList)
  return relayaddrlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::VoipAddr >*
VoipRedirectResp::mutable_relayaddrlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.VoipRedirectResp.RelayAddrList)
  return &relayaddrlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::VoipAddr >&
VoipRedirectResp::relayaddrlist() const {
  // @@protoc_insertion_point(field_list:micromsg.VoipRedirectResp.RelayAddrList)
  return relayaddrlist_;
}

// required int32 PunchAddrCount = 5;
bool VoipRedirectResp::has_punchaddrcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VoipRedirectResp::set_has_punchaddrcount() {
  _has_bits_[0] |= 0x00000008u;
}
void VoipRedirectResp::clear_has_punchaddrcount() {
  _has_bits_[0] &= ~0x00000008u;
}
void VoipRedirectResp::clear_punchaddrcount() {
  punchaddrcount_ = 0;
  clear_has_punchaddrcount();
}
::google::protobuf::int32 VoipRedirectResp::punchaddrcount() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipRedirectResp.PunchAddrCount)
  return punchaddrcount_;
}
void VoipRedirectResp::set_punchaddrcount(::google::protobuf::int32 value) {
  set_has_punchaddrcount();
  punchaddrcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipRedirectResp.PunchAddrCount)
}

// repeated .micromsg.VoipAddr PunchAddrList = 6;
int VoipRedirectResp::punchaddrlist_size() const {
  return punchaddrlist_.size();
}
void VoipRedirectResp::clear_punchaddrlist() {
  punchaddrlist_.Clear();
}
const ::micromsg::VoipAddr& VoipRedirectResp::punchaddrlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.VoipRedirectResp.PunchAddrList)
  return punchaddrlist_.Get(index);
}
::micromsg::VoipAddr* VoipRedirectResp::mutable_punchaddrlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.VoipRedirectResp.PunchAddrList)
  return punchaddrlist_.Mutable(index);
}
::micromsg::VoipAddr* VoipRedirectResp::add_punchaddrlist() {
  // @@protoc_insertion_point(field_add:micromsg.VoipRedirectResp.PunchAddrList)
  return punchaddrlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::VoipAddr >*
VoipRedirectResp::mutable_punchaddrlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.VoipRedirectResp.PunchAddrList)
  return &punchaddrlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::VoipAddr >&
VoipRedirectResp::punchaddrlist() const {
  // @@protoc_insertion_point(field_list:micromsg.VoipRedirectResp.PunchAddrList)
  return punchaddrlist_;
}

// required int64 RoomKey = 7;
bool VoipRedirectResp::has_roomkey() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VoipRedirectResp::set_has_roomkey() {
  _has_bits_[0] |= 0x00000020u;
}
void VoipRedirectResp::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000020u;
}
void VoipRedirectResp::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
::google::protobuf::int64 VoipRedirectResp::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipRedirectResp.RoomKey)
  return roomkey_;
}
void VoipRedirectResp::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipRedirectResp.RoomKey)
}

// required int32 RoomMemberId = 8;
bool VoipRedirectResp::has_roommemberid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VoipRedirectResp::set_has_roommemberid() {
  _has_bits_[0] |= 0x00000010u;
}
void VoipRedirectResp::clear_has_roommemberid() {
  _has_bits_[0] &= ~0x00000010u;
}
void VoipRedirectResp::clear_roommemberid() {
  roommemberid_ = 0;
  clear_has_roommemberid();
}
::google::protobuf::int32 VoipRedirectResp::roommemberid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipRedirectResp.RoomMemberId)
  return roommemberid_;
}
void VoipRedirectResp::set_roommemberid(::google::protobuf::int32 value) {
  set_has_roommemberid();
  roommemberid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipRedirectResp.RoomMemberId)
}

// optional int32 TcpAddrCount = 9;
bool VoipRedirectResp::has_tcpaddrcount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VoipRedirectResp::set_has_tcpaddrcount() {
  _has_bits_[0] |= 0x00000040u;
}
void VoipRedirectResp::clear_has_tcpaddrcount() {
  _has_bits_[0] &= ~0x00000040u;
}
void VoipRedirectResp::clear_tcpaddrcount() {
  tcpaddrcount_ = 0;
  clear_has_tcpaddrcount();
}
::google::protobuf::int32 VoipRedirectResp::tcpaddrcount() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipRedirectResp.TcpAddrCount)
  return tcpaddrcount_;
}
void VoipRedirectResp::set_tcpaddrcount(::google::protobuf::int32 value) {
  set_has_tcpaddrcount();
  tcpaddrcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipRedirectResp.TcpAddrCount)
}

// repeated .micromsg.VoipAddr TcpAddrList = 10;
int VoipRedirectResp::tcpaddrlist_size() const {
  return tcpaddrlist_.size();
}
void VoipRedirectResp::clear_tcpaddrlist() {
  tcpaddrlist_.Clear();
}
const ::micromsg::VoipAddr& VoipRedirectResp::tcpaddrlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.VoipRedirectResp.TcpAddrList)
  return tcpaddrlist_.Get(index);
}
::micromsg::VoipAddr* VoipRedirectResp::mutable_tcpaddrlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.VoipRedirectResp.TcpAddrList)
  return tcpaddrlist_.Mutable(index);
}
::micromsg::VoipAddr* VoipRedirectResp::add_tcpaddrlist() {
  // @@protoc_insertion_point(field_add:micromsg.VoipRedirectResp.TcpAddrList)
  return tcpaddrlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::VoipAddr >*
VoipRedirectResp::mutable_tcpaddrlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.VoipRedirectResp.TcpAddrList)
  return &tcpaddrlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::VoipAddr >&
VoipRedirectResp::tcpaddrlist() const {
  // @@protoc_insertion_point(field_list:micromsg.VoipRedirectResp.TcpAddrList)
  return tcpaddrlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoipDoubleLinkSwitchReq::kBaseRequestFieldNumber;
const int VoipDoubleLinkSwitchReq::kRoomIdFieldNumber;
const int VoipDoubleLinkSwitchReq::kRoomKeyFieldNumber;
const int VoipDoubleLinkSwitchReq::kRoomMemberIdFieldNumber;
const int VoipDoubleLinkSwitchReq::kCurLinkTypeFieldNumber;
const int VoipDoubleLinkSwitchReq::kIsRelayConnReadyFieldNumber;
const int VoipDoubleLinkSwitchReq::kIsDirectConnReadyFieldNumber;
const int VoipDoubleLinkSwitchReq::kCurStrategyFieldNumber;
const int VoipDoubleLinkSwitchReq::kBufferVersionFieldNumber;
const int VoipDoubleLinkSwitchReq::kBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoipDoubleLinkSwitchReq::VoipDoubleLinkSwitchReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VoipDoubleLinkSwitchReq)
}
VoipDoubleLinkSwitchReq::VoipDoubleLinkSwitchReq(const VoipDoubleLinkSwitchReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_buffer()) {
    buffer_ = new ::micromsg::SKBuiltinBuffer_t(*from.buffer_);
  } else {
    buffer_ = NULL;
  }
  ::memcpy(&roomkey_, &from.roomkey_,
    reinterpret_cast<char*>(&bufferversion_) -
    reinterpret_cast<char*>(&roomkey_) + sizeof(bufferversion_));
  // @@protoc_insertion_point(copy_constructor:micromsg.VoipDoubleLinkSwitchReq)
}

void VoipDoubleLinkSwitchReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&bufferversion_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(bufferversion_));
}

VoipDoubleLinkSwitchReq::~VoipDoubleLinkSwitchReq() {
  // @@protoc_insertion_point(destructor:micromsg.VoipDoubleLinkSwitchReq)
  SharedDtor();
}

void VoipDoubleLinkSwitchReq::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete buffer_;
  }
}

void VoipDoubleLinkSwitchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoipDoubleLinkSwitchReq::descriptor() {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoipDoubleLinkSwitchReq& VoipDoubleLinkSwitchReq::default_instance() {
  protobuf_mmvoip_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoipDoubleLinkSwitchReq* VoipDoubleLinkSwitchReq::New(::google::protobuf::Arena* arena) const {
  VoipDoubleLinkSwitchReq* n = new VoipDoubleLinkSwitchReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoipDoubleLinkSwitchReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VoipDoubleLinkSwitchReq)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_buffer()) {
      GOOGLE_DCHECK(buffer_ != NULL);
      buffer_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&roomkey_, 0, reinterpret_cast<char*>(&isdirectconnready_) -
      reinterpret_cast<char*>(&roomkey_) + sizeof(isdirectconnready_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&curstrategy_, 0, reinterpret_cast<char*>(&bufferversion_) -
      reinterpret_cast<char*>(&curstrategy_) + sizeof(bufferversion_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoipDoubleLinkSwitchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VoipDoubleLinkSwitchReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 RoomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_roomid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 RoomKey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_roomkey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roomkey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 RoomMemberId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_roommemberid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roommemberid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 CurLinkType = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_curlinktype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curlinktype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 IsRelayConnReady = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_isrelayconnready();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isrelayconnready_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 IsDirectConnReady = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_isdirectconnready();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isdirectconnready_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 CurStrategy = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_curstrategy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curstrategy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 BufferVersion = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_bufferversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bufferversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t Buffer = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VoipDoubleLinkSwitchReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VoipDoubleLinkSwitchReq)
  return false;
#undef DO_
}

void VoipDoubleLinkSwitchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VoipDoubleLinkSwitchReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required int32 RoomId = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // required int64 RoomKey = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->roomkey(), output);
  }

  // required int32 RoomMemberId = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->roommemberid(), output);
  }

  // required int32 CurLinkType = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->curlinktype(), output);
  }

  // required int32 IsRelayConnReady = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->isrelayconnready(), output);
  }

  // required int32 IsDirectConnReady = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->isdirectconnready(), output);
  }

  // required int32 CurStrategy = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->curstrategy(), output);
  }

  // required int32 BufferVersion = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->bufferversion(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t Buffer = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->buffer_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VoipDoubleLinkSwitchReq)
}

::google::protobuf::uint8* VoipDoubleLinkSwitchReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VoipDoubleLinkSwitchReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required int32 RoomId = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // required int64 RoomKey = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->roomkey(), target);
  }

  // required int32 RoomMemberId = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->roommemberid(), target);
  }

  // required int32 CurLinkType = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->curlinktype(), target);
  }

  // required int32 IsRelayConnReady = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->isrelayconnready(), target);
  }

  // required int32 IsDirectConnReady = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->isdirectconnready(), target);
  }

  // required int32 CurStrategy = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->curstrategy(), target);
  }

  // required int32 BufferVersion = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->bufferversion(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t Buffer = 10;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->buffer_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VoipDoubleLinkSwitchReq)
  return target;
}

size_t VoipDoubleLinkSwitchReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.VoipDoubleLinkSwitchReq)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_buffer()) {
    // required .micromsg.SKBuiltinBuffer_t Buffer = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->buffer_);
  }

  if (has_roomkey()) {
    // required int64 RoomKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());
  }

  if (has_roomid()) {
    // required int32 RoomId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  if (has_roommemberid()) {
    // required int32 RoomMemberId = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roommemberid());
  }

  if (has_curlinktype()) {
    // required int32 CurLinkType = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->curlinktype());
  }

  if (has_isrelayconnready()) {
    // required int32 IsRelayConnReady = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->isrelayconnready());
  }

  if (has_isdirectconnready()) {
    // required int32 IsDirectConnReady = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->isdirectconnready());
  }

  if (has_curstrategy()) {
    // required int32 CurStrategy = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->curstrategy());
  }

  if (has_bufferversion()) {
    // required int32 BufferVersion = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bufferversion());
  }

  return total_size;
}
size_t VoipDoubleLinkSwitchReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VoipDoubleLinkSwitchReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000003ff) ^ 0x000003ff) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.SKBuiltinBuffer_t Buffer = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->buffer_);

    // required int64 RoomKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());

    // required int32 RoomId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());

    // required int32 RoomMemberId = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roommemberid());

    // required int32 CurLinkType = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->curlinktype());

    // required int32 IsRelayConnReady = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->isrelayconnready());

    // required int32 IsDirectConnReady = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->isdirectconnready());

    // required int32 CurStrategy = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->curstrategy());

    // required int32 BufferVersion = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bufferversion());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoipDoubleLinkSwitchReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VoipDoubleLinkSwitchReq)
  GOOGLE_DCHECK_NE(&from, this);
  const VoipDoubleLinkSwitchReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoipDoubleLinkSwitchReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VoipDoubleLinkSwitchReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VoipDoubleLinkSwitchReq)
    MergeFrom(*source);
  }
}

void VoipDoubleLinkSwitchReq::MergeFrom(const VoipDoubleLinkSwitchReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VoipDoubleLinkSwitchReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_buffer()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.buffer());
    }
    if (cached_has_bits & 0x00000004u) {
      roomkey_ = from.roomkey_;
    }
    if (cached_has_bits & 0x00000008u) {
      roomid_ = from.roomid_;
    }
    if (cached_has_bits & 0x00000010u) {
      roommemberid_ = from.roommemberid_;
    }
    if (cached_has_bits & 0x00000020u) {
      curlinktype_ = from.curlinktype_;
    }
    if (cached_has_bits & 0x00000040u) {
      isrelayconnready_ = from.isrelayconnready_;
    }
    if (cached_has_bits & 0x00000080u) {
      isdirectconnready_ = from.isdirectconnready_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      curstrategy_ = from.curstrategy_;
    }
    if (cached_has_bits & 0x00000200u) {
      bufferversion_ = from.bufferversion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VoipDoubleLinkSwitchReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VoipDoubleLinkSwitchReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoipDoubleLinkSwitchReq::CopyFrom(const VoipDoubleLinkSwitchReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VoipDoubleLinkSwitchReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoipDoubleLinkSwitchReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_buffer()) {
    if (!this->buffer_->IsInitialized()) return false;
  }
  return true;
}

void VoipDoubleLinkSwitchReq::Swap(VoipDoubleLinkSwitchReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoipDoubleLinkSwitchReq::InternalSwap(VoipDoubleLinkSwitchReq* other) {
  std::swap(baserequest_, other->baserequest_);
  std::swap(buffer_, other->buffer_);
  std::swap(roomkey_, other->roomkey_);
  std::swap(roomid_, other->roomid_);
  std::swap(roommemberid_, other->roommemberid_);
  std::swap(curlinktype_, other->curlinktype_);
  std::swap(isrelayconnready_, other->isrelayconnready_);
  std::swap(isdirectconnready_, other->isdirectconnready_);
  std::swap(curstrategy_, other->curstrategy_);
  std::swap(bufferversion_, other->bufferversion_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoipDoubleLinkSwitchReq::GetMetadata() const {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoipDoubleLinkSwitchReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool VoipDoubleLinkSwitchReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoipDoubleLinkSwitchReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void VoipDoubleLinkSwitchReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoipDoubleLinkSwitchReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& VoipDoubleLinkSwitchReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipDoubleLinkSwitchReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* VoipDoubleLinkSwitchReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipDoubleLinkSwitchReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* VoipDoubleLinkSwitchReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.VoipDoubleLinkSwitchReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void VoipDoubleLinkSwitchReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipDoubleLinkSwitchReq.BaseRequest)
}

// required int32 RoomId = 2;
bool VoipDoubleLinkSwitchReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VoipDoubleLinkSwitchReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000008u;
}
void VoipDoubleLinkSwitchReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000008u;
}
void VoipDoubleLinkSwitchReq::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
::google::protobuf::int32 VoipDoubleLinkSwitchReq::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipDoubleLinkSwitchReq.RoomId)
  return roomid_;
}
void VoipDoubleLinkSwitchReq::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipDoubleLinkSwitchReq.RoomId)
}

// required int64 RoomKey = 3;
bool VoipDoubleLinkSwitchReq::has_roomkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VoipDoubleLinkSwitchReq::set_has_roomkey() {
  _has_bits_[0] |= 0x00000004u;
}
void VoipDoubleLinkSwitchReq::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000004u;
}
void VoipDoubleLinkSwitchReq::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
::google::protobuf::int64 VoipDoubleLinkSwitchReq::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipDoubleLinkSwitchReq.RoomKey)
  return roomkey_;
}
void VoipDoubleLinkSwitchReq::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipDoubleLinkSwitchReq.RoomKey)
}

// required int32 RoomMemberId = 4;
bool VoipDoubleLinkSwitchReq::has_roommemberid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VoipDoubleLinkSwitchReq::set_has_roommemberid() {
  _has_bits_[0] |= 0x00000010u;
}
void VoipDoubleLinkSwitchReq::clear_has_roommemberid() {
  _has_bits_[0] &= ~0x00000010u;
}
void VoipDoubleLinkSwitchReq::clear_roommemberid() {
  roommemberid_ = 0;
  clear_has_roommemberid();
}
::google::protobuf::int32 VoipDoubleLinkSwitchReq::roommemberid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipDoubleLinkSwitchReq.RoomMemberId)
  return roommemberid_;
}
void VoipDoubleLinkSwitchReq::set_roommemberid(::google::protobuf::int32 value) {
  set_has_roommemberid();
  roommemberid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipDoubleLinkSwitchReq.RoomMemberId)
}

// required int32 CurLinkType = 5;
bool VoipDoubleLinkSwitchReq::has_curlinktype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VoipDoubleLinkSwitchReq::set_has_curlinktype() {
  _has_bits_[0] |= 0x00000020u;
}
void VoipDoubleLinkSwitchReq::clear_has_curlinktype() {
  _has_bits_[0] &= ~0x00000020u;
}
void VoipDoubleLinkSwitchReq::clear_curlinktype() {
  curlinktype_ = 0;
  clear_has_curlinktype();
}
::google::protobuf::int32 VoipDoubleLinkSwitchReq::curlinktype() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipDoubleLinkSwitchReq.CurLinkType)
  return curlinktype_;
}
void VoipDoubleLinkSwitchReq::set_curlinktype(::google::protobuf::int32 value) {
  set_has_curlinktype();
  curlinktype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipDoubleLinkSwitchReq.CurLinkType)
}

// required int32 IsRelayConnReady = 6;
bool VoipDoubleLinkSwitchReq::has_isrelayconnready() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VoipDoubleLinkSwitchReq::set_has_isrelayconnready() {
  _has_bits_[0] |= 0x00000040u;
}
void VoipDoubleLinkSwitchReq::clear_has_isrelayconnready() {
  _has_bits_[0] &= ~0x00000040u;
}
void VoipDoubleLinkSwitchReq::clear_isrelayconnready() {
  isrelayconnready_ = 0;
  clear_has_isrelayconnready();
}
::google::protobuf::int32 VoipDoubleLinkSwitchReq::isrelayconnready() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipDoubleLinkSwitchReq.IsRelayConnReady)
  return isrelayconnready_;
}
void VoipDoubleLinkSwitchReq::set_isrelayconnready(::google::protobuf::int32 value) {
  set_has_isrelayconnready();
  isrelayconnready_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipDoubleLinkSwitchReq.IsRelayConnReady)
}

// required int32 IsDirectConnReady = 7;
bool VoipDoubleLinkSwitchReq::has_isdirectconnready() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VoipDoubleLinkSwitchReq::set_has_isdirectconnready() {
  _has_bits_[0] |= 0x00000080u;
}
void VoipDoubleLinkSwitchReq::clear_has_isdirectconnready() {
  _has_bits_[0] &= ~0x00000080u;
}
void VoipDoubleLinkSwitchReq::clear_isdirectconnready() {
  isdirectconnready_ = 0;
  clear_has_isdirectconnready();
}
::google::protobuf::int32 VoipDoubleLinkSwitchReq::isdirectconnready() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipDoubleLinkSwitchReq.IsDirectConnReady)
  return isdirectconnready_;
}
void VoipDoubleLinkSwitchReq::set_isdirectconnready(::google::protobuf::int32 value) {
  set_has_isdirectconnready();
  isdirectconnready_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipDoubleLinkSwitchReq.IsDirectConnReady)
}

// required int32 CurStrategy = 8;
bool VoipDoubleLinkSwitchReq::has_curstrategy() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void VoipDoubleLinkSwitchReq::set_has_curstrategy() {
  _has_bits_[0] |= 0x00000100u;
}
void VoipDoubleLinkSwitchReq::clear_has_curstrategy() {
  _has_bits_[0] &= ~0x00000100u;
}
void VoipDoubleLinkSwitchReq::clear_curstrategy() {
  curstrategy_ = 0;
  clear_has_curstrategy();
}
::google::protobuf::int32 VoipDoubleLinkSwitchReq::curstrategy() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipDoubleLinkSwitchReq.CurStrategy)
  return curstrategy_;
}
void VoipDoubleLinkSwitchReq::set_curstrategy(::google::protobuf::int32 value) {
  set_has_curstrategy();
  curstrategy_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipDoubleLinkSwitchReq.CurStrategy)
}

// required int32 BufferVersion = 9;
bool VoipDoubleLinkSwitchReq::has_bufferversion() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void VoipDoubleLinkSwitchReq::set_has_bufferversion() {
  _has_bits_[0] |= 0x00000200u;
}
void VoipDoubleLinkSwitchReq::clear_has_bufferversion() {
  _has_bits_[0] &= ~0x00000200u;
}
void VoipDoubleLinkSwitchReq::clear_bufferversion() {
  bufferversion_ = 0;
  clear_has_bufferversion();
}
::google::protobuf::int32 VoipDoubleLinkSwitchReq::bufferversion() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipDoubleLinkSwitchReq.BufferVersion)
  return bufferversion_;
}
void VoipDoubleLinkSwitchReq::set_bufferversion(::google::protobuf::int32 value) {
  set_has_bufferversion();
  bufferversion_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipDoubleLinkSwitchReq.BufferVersion)
}

// required .micromsg.SKBuiltinBuffer_t Buffer = 10;
bool VoipDoubleLinkSwitchReq::has_buffer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VoipDoubleLinkSwitchReq::set_has_buffer() {
  _has_bits_[0] |= 0x00000002u;
}
void VoipDoubleLinkSwitchReq::clear_has_buffer() {
  _has_bits_[0] &= ~0x00000002u;
}
void VoipDoubleLinkSwitchReq::clear_buffer() {
  if (buffer_ != NULL) buffer_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_buffer();
}
const ::micromsg::SKBuiltinBuffer_t& VoipDoubleLinkSwitchReq::buffer() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipDoubleLinkSwitchReq.Buffer)
  return buffer_ != NULL ? *buffer_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* VoipDoubleLinkSwitchReq::mutable_buffer() {
  set_has_buffer();
  if (buffer_ == NULL) {
    buffer_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipDoubleLinkSwitchReq.Buffer)
  return buffer_;
}
::micromsg::SKBuiltinBuffer_t* VoipDoubleLinkSwitchReq::release_buffer() {
  // @@protoc_insertion_point(field_release:micromsg.VoipDoubleLinkSwitchReq.Buffer)
  clear_has_buffer();
  ::micromsg::SKBuiltinBuffer_t* temp = buffer_;
  buffer_ = NULL;
  return temp;
}
void VoipDoubleLinkSwitchReq::set_allocated_buffer(::micromsg::SKBuiltinBuffer_t* buffer) {
  delete buffer_;
  buffer_ = buffer;
  if (buffer) {
    set_has_buffer();
  } else {
    clear_has_buffer();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipDoubleLinkSwitchReq.Buffer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoipDoubleLinkSwitchRsp::kBaseResponseFieldNumber;
const int VoipDoubleLinkSwitchRsp::kRoomIdFieldNumber;
const int VoipDoubleLinkSwitchRsp::kRoomKeyFieldNumber;
const int VoipDoubleLinkSwitchRsp::kRoomMemberIdFieldNumber;
const int VoipDoubleLinkSwitchRsp::kReportFlagFieldNumber;
const int VoipDoubleLinkSwitchRsp::kSwitchToLinkTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoipDoubleLinkSwitchRsp::VoipDoubleLinkSwitchRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VoipDoubleLinkSwitchRsp)
}
VoipDoubleLinkSwitchRsp::VoipDoubleLinkSwitchRsp(const VoipDoubleLinkSwitchRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  ::memcpy(&roomkey_, &from.roomkey_,
    reinterpret_cast<char*>(&switchtolinktype_) -
    reinterpret_cast<char*>(&roomkey_) + sizeof(switchtolinktype_));
  // @@protoc_insertion_point(copy_constructor:micromsg.VoipDoubleLinkSwitchRsp)
}

void VoipDoubleLinkSwitchRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&switchtolinktype_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(switchtolinktype_));
}

VoipDoubleLinkSwitchRsp::~VoipDoubleLinkSwitchRsp() {
  // @@protoc_insertion_point(destructor:micromsg.VoipDoubleLinkSwitchRsp)
  SharedDtor();
}

void VoipDoubleLinkSwitchRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void VoipDoubleLinkSwitchRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoipDoubleLinkSwitchRsp::descriptor() {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoipDoubleLinkSwitchRsp& VoipDoubleLinkSwitchRsp::default_instance() {
  protobuf_mmvoip_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoipDoubleLinkSwitchRsp* VoipDoubleLinkSwitchRsp::New(::google::protobuf::Arena* arena) const {
  VoipDoubleLinkSwitchRsp* n = new VoipDoubleLinkSwitchRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoipDoubleLinkSwitchRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VoipDoubleLinkSwitchRsp)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  if (_has_bits_[0 / 32] & 62u) {
    ::memset(&roomkey_, 0, reinterpret_cast<char*>(&switchtolinktype_) -
      reinterpret_cast<char*>(&roomkey_) + sizeof(switchtolinktype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoipDoubleLinkSwitchRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VoipDoubleLinkSwitchRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 RoomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_roomid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 RoomKey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_roomkey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roomkey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 RoomMemberId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_roommemberid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roommemberid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 ReportFlag = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_reportflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reportflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 SwitchToLinkType = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_switchtolinktype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &switchtolinktype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VoipDoubleLinkSwitchRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VoipDoubleLinkSwitchRsp)
  return false;
#undef DO_
}

void VoipDoubleLinkSwitchRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VoipDoubleLinkSwitchRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required int32 RoomId = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // required int64 RoomKey = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->roomkey(), output);
  }

  // required int32 RoomMemberId = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->roommemberid(), output);
  }

  // required int32 ReportFlag = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->reportflag(), output);
  }

  // required int32 SwitchToLinkType = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->switchtolinktype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VoipDoubleLinkSwitchRsp)
}

::google::protobuf::uint8* VoipDoubleLinkSwitchRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VoipDoubleLinkSwitchRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required int32 RoomId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // required int64 RoomKey = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->roomkey(), target);
  }

  // required int32 RoomMemberId = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->roommemberid(), target);
  }

  // required int32 ReportFlag = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->reportflag(), target);
  }

  // required int32 SwitchToLinkType = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->switchtolinktype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VoipDoubleLinkSwitchRsp)
  return target;
}

size_t VoipDoubleLinkSwitchRsp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.VoipDoubleLinkSwitchRsp)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_roomkey()) {
    // required int64 RoomKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());
  }

  if (has_roomid()) {
    // required int32 RoomId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  if (has_roommemberid()) {
    // required int32 RoomMemberId = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roommemberid());
  }

  if (has_reportflag()) {
    // required int32 ReportFlag = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reportflag());
  }

  if (has_switchtolinktype()) {
    // required int32 SwitchToLinkType = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->switchtolinktype());
  }

  return total_size;
}
size_t VoipDoubleLinkSwitchRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VoipDoubleLinkSwitchRsp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required int64 RoomKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomkey());

    // required int32 RoomId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());

    // required int32 RoomMemberId = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roommemberid());

    // required int32 ReportFlag = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reportflag());

    // required int32 SwitchToLinkType = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->switchtolinktype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoipDoubleLinkSwitchRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VoipDoubleLinkSwitchRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const VoipDoubleLinkSwitchRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoipDoubleLinkSwitchRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VoipDoubleLinkSwitchRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VoipDoubleLinkSwitchRsp)
    MergeFrom(*source);
  }
}

void VoipDoubleLinkSwitchRsp::MergeFrom(const VoipDoubleLinkSwitchRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VoipDoubleLinkSwitchRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      roomkey_ = from.roomkey_;
    }
    if (cached_has_bits & 0x00000004u) {
      roomid_ = from.roomid_;
    }
    if (cached_has_bits & 0x00000008u) {
      roommemberid_ = from.roommemberid_;
    }
    if (cached_has_bits & 0x00000010u) {
      reportflag_ = from.reportflag_;
    }
    if (cached_has_bits & 0x00000020u) {
      switchtolinktype_ = from.switchtolinktype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VoipDoubleLinkSwitchRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VoipDoubleLinkSwitchRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoipDoubleLinkSwitchRsp::CopyFrom(const VoipDoubleLinkSwitchRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VoipDoubleLinkSwitchRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoipDoubleLinkSwitchRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void VoipDoubleLinkSwitchRsp::Swap(VoipDoubleLinkSwitchRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoipDoubleLinkSwitchRsp::InternalSwap(VoipDoubleLinkSwitchRsp* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(roomkey_, other->roomkey_);
  std::swap(roomid_, other->roomid_);
  std::swap(roommemberid_, other->roommemberid_);
  std::swap(reportflag_, other->reportflag_);
  std::swap(switchtolinktype_, other->switchtolinktype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoipDoubleLinkSwitchRsp::GetMetadata() const {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoipDoubleLinkSwitchRsp

// required .micromsg.BaseResponse BaseResponse = 1;
bool VoipDoubleLinkSwitchRsp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoipDoubleLinkSwitchRsp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void VoipDoubleLinkSwitchRsp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoipDoubleLinkSwitchRsp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& VoipDoubleLinkSwitchRsp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipDoubleLinkSwitchRsp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* VoipDoubleLinkSwitchRsp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipDoubleLinkSwitchRsp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* VoipDoubleLinkSwitchRsp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.VoipDoubleLinkSwitchRsp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void VoipDoubleLinkSwitchRsp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipDoubleLinkSwitchRsp.BaseResponse)
}

// required int32 RoomId = 2;
bool VoipDoubleLinkSwitchRsp::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VoipDoubleLinkSwitchRsp::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
void VoipDoubleLinkSwitchRsp::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
void VoipDoubleLinkSwitchRsp::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
::google::protobuf::int32 VoipDoubleLinkSwitchRsp::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipDoubleLinkSwitchRsp.RoomId)
  return roomid_;
}
void VoipDoubleLinkSwitchRsp::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipDoubleLinkSwitchRsp.RoomId)
}

// required int64 RoomKey = 3;
bool VoipDoubleLinkSwitchRsp::has_roomkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VoipDoubleLinkSwitchRsp::set_has_roomkey() {
  _has_bits_[0] |= 0x00000002u;
}
void VoipDoubleLinkSwitchRsp::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000002u;
}
void VoipDoubleLinkSwitchRsp::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
::google::protobuf::int64 VoipDoubleLinkSwitchRsp::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipDoubleLinkSwitchRsp.RoomKey)
  return roomkey_;
}
void VoipDoubleLinkSwitchRsp::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipDoubleLinkSwitchRsp.RoomKey)
}

// required int32 RoomMemberId = 4;
bool VoipDoubleLinkSwitchRsp::has_roommemberid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VoipDoubleLinkSwitchRsp::set_has_roommemberid() {
  _has_bits_[0] |= 0x00000008u;
}
void VoipDoubleLinkSwitchRsp::clear_has_roommemberid() {
  _has_bits_[0] &= ~0x00000008u;
}
void VoipDoubleLinkSwitchRsp::clear_roommemberid() {
  roommemberid_ = 0;
  clear_has_roommemberid();
}
::google::protobuf::int32 VoipDoubleLinkSwitchRsp::roommemberid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipDoubleLinkSwitchRsp.RoomMemberId)
  return roommemberid_;
}
void VoipDoubleLinkSwitchRsp::set_roommemberid(::google::protobuf::int32 value) {
  set_has_roommemberid();
  roommemberid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipDoubleLinkSwitchRsp.RoomMemberId)
}

// required int32 ReportFlag = 5;
bool VoipDoubleLinkSwitchRsp::has_reportflag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VoipDoubleLinkSwitchRsp::set_has_reportflag() {
  _has_bits_[0] |= 0x00000010u;
}
void VoipDoubleLinkSwitchRsp::clear_has_reportflag() {
  _has_bits_[0] &= ~0x00000010u;
}
void VoipDoubleLinkSwitchRsp::clear_reportflag() {
  reportflag_ = 0;
  clear_has_reportflag();
}
::google::protobuf::int32 VoipDoubleLinkSwitchRsp::reportflag() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipDoubleLinkSwitchRsp.ReportFlag)
  return reportflag_;
}
void VoipDoubleLinkSwitchRsp::set_reportflag(::google::protobuf::int32 value) {
  set_has_reportflag();
  reportflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipDoubleLinkSwitchRsp.ReportFlag)
}

// required int32 SwitchToLinkType = 6;
bool VoipDoubleLinkSwitchRsp::has_switchtolinktype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VoipDoubleLinkSwitchRsp::set_has_switchtolinktype() {
  _has_bits_[0] |= 0x00000020u;
}
void VoipDoubleLinkSwitchRsp::clear_has_switchtolinktype() {
  _has_bits_[0] &= ~0x00000020u;
}
void VoipDoubleLinkSwitchRsp::clear_switchtolinktype() {
  switchtolinktype_ = 0;
  clear_has_switchtolinktype();
}
::google::protobuf::int32 VoipDoubleLinkSwitchRsp::switchtolinktype() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipDoubleLinkSwitchRsp.SwitchToLinkType)
  return switchtolinktype_;
}
void VoipDoubleLinkSwitchRsp::set_switchtolinktype(::google::protobuf::int32 value) {
  set_has_switchtolinktype();
  switchtolinktype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipDoubleLinkSwitchRsp.SwitchToLinkType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoipSpeedTestReq::kBaseRequestFieldNumber;
const int VoipSpeedTestReq::kRoomIdFieldNumber;
const int VoipSpeedTestReq::kCallTypeFieldNumber;
const int VoipSpeedTestReq::kNetTypeFieldNumber;
const int VoipSpeedTestReq::kIsConnectingFieldNumber;
const int VoipSpeedTestReq::kIsConnectedFieldNumber;
const int VoipSpeedTestReq::kC2CLossrateFieldNumber;
const int VoipSpeedTestReq::kC2CRttCntFieldNumber;
const int VoipSpeedTestReq::kC2CRttFieldNumber;
const int VoipSpeedTestReq::kC2SDownLossRateFieldNumber;
const int VoipSpeedTestReq::kC2SRttCntFieldNumber;
const int VoipSpeedTestReq::kC2SRttFieldNumber;
const int VoipSpeedTestReq::kSendPktsFieldNumber;
const int VoipSpeedTestReq::kRcvPktsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoipSpeedTestReq::VoipSpeedTestReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VoipSpeedTestReq)
}
VoipSpeedTestReq::VoipSpeedTestReq(const VoipSpeedTestReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      c2crtt_(from.c2crtt_),
      c2srtt_(from.c2srtt_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&roomid_, &from.roomid_,
    reinterpret_cast<char*>(&rcvpkts_) -
    reinterpret_cast<char*>(&roomid_) + sizeof(rcvpkts_));
  // @@protoc_insertion_point(copy_constructor:micromsg.VoipSpeedTestReq)
}

void VoipSpeedTestReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&rcvpkts_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(rcvpkts_));
}

VoipSpeedTestReq::~VoipSpeedTestReq() {
  // @@protoc_insertion_point(destructor:micromsg.VoipSpeedTestReq)
  SharedDtor();
}

void VoipSpeedTestReq::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void VoipSpeedTestReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoipSpeedTestReq::descriptor() {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoipSpeedTestReq& VoipSpeedTestReq::default_instance() {
  protobuf_mmvoip_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoipSpeedTestReq* VoipSpeedTestReq::New(::google::protobuf::Arena* arena) const {
  VoipSpeedTestReq* n = new VoipSpeedTestReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoipSpeedTestReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VoipSpeedTestReq)
  c2crtt_.Clear();
  c2srtt_.Clear();
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&roomid_, 0, reinterpret_cast<char*>(&c2crttcnt_) -
      reinterpret_cast<char*>(&roomid_) + sizeof(c2crttcnt_));
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ::memset(&c2sdownlossrate_, 0, reinterpret_cast<char*>(&rcvpkts_) -
      reinterpret_cast<char*>(&c2sdownlossrate_) + sizeof(rcvpkts_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoipSpeedTestReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VoipSpeedTestReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 RoomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_roomid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 CallType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_calltype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &calltype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 NetType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_nettype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nettype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 IsConnecting = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_isconnecting();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isconnecting_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 IsConnected = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_isconnected();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isconnected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 C2CLossrate = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_c2clossrate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &c2clossrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 C2CRttCnt = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_c2crttcnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &c2crttcnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 C2CRtt = 9 [packed = true];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_c2crtt())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(72u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 74u, input, this->mutable_c2crtt())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 C2SDownLossRate = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_c2sdownlossrate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &c2sdownlossrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 C2SRttCnt = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_c2srttcnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &c2srttcnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 C2SRtt = 12 [packed = true];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_c2srtt())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(96u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 98u, input, this->mutable_c2srtt())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 SendPkts = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_sendpkts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sendpkts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 RcvPkts = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_rcvpkts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rcvpkts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VoipSpeedTestReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VoipSpeedTestReq)
  return false;
#undef DO_
}

void VoipSpeedTestReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VoipSpeedTestReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required int32 RoomId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // required uint32 CallType = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->calltype(), output);
  }

  // required uint32 NetType = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->nettype(), output);
  }

  // required uint32 IsConnecting = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->isconnecting(), output);
  }

  // required uint32 IsConnected = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->isconnected(), output);
  }

  // required uint32 C2CLossrate = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->c2clossrate(), output);
  }

  // required uint32 C2CRttCnt = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->c2crttcnt(), output);
  }

  // repeated uint32 C2CRtt = 9 [packed = true];
  if (this->c2crtt_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_c2crtt_cached_byte_size_);
  }
  for (int i = 0, n = this->c2crtt_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->c2crtt(i), output);
  }

  // required uint32 C2SDownLossRate = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->c2sdownlossrate(), output);
  }

  // required uint32 C2SRttCnt = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->c2srttcnt(), output);
  }

  // repeated uint32 C2SRtt = 12 [packed = true];
  if (this->c2srtt_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(12, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_c2srtt_cached_byte_size_);
  }
  for (int i = 0, n = this->c2srtt_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->c2srtt(i), output);
  }

  // required uint32 SendPkts = 13;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->sendpkts(), output);
  }

  // required uint32 RcvPkts = 14;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->rcvpkts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VoipSpeedTestReq)
}

::google::protobuf::uint8* VoipSpeedTestReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VoipSpeedTestReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required int32 RoomId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // required uint32 CallType = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->calltype(), target);
  }

  // required uint32 NetType = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->nettype(), target);
  }

  // required uint32 IsConnecting = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->isconnecting(), target);
  }

  // required uint32 IsConnected = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->isconnected(), target);
  }

  // required uint32 C2CLossrate = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->c2clossrate(), target);
  }

  // required uint32 C2CRttCnt = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->c2crttcnt(), target);
  }

  // repeated uint32 C2CRtt = 9 [packed = true];
  if (this->c2crtt_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _c2crtt_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->c2crtt_, target);
  }

  // required uint32 C2SDownLossRate = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->c2sdownlossrate(), target);
  }

  // required uint32 C2SRttCnt = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->c2srttcnt(), target);
  }

  // repeated uint32 C2SRtt = 12 [packed = true];
  if (this->c2srtt_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      12,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _c2srtt_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->c2srtt_, target);
  }

  // required uint32 SendPkts = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->sendpkts(), target);
  }

  // required uint32 RcvPkts = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->rcvpkts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VoipSpeedTestReq)
  return target;
}

size_t VoipSpeedTestReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.VoipSpeedTestReq)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_roomid()) {
    // required int32 RoomId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  if (has_calltype()) {
    // required uint32 CallType = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->calltype());
  }

  if (has_nettype()) {
    // required uint32 NetType = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nettype());
  }

  if (has_isconnecting()) {
    // required uint32 IsConnecting = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->isconnecting());
  }

  if (has_isconnected()) {
    // required uint32 IsConnected = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->isconnected());
  }

  if (has_c2clossrate()) {
    // required uint32 C2CLossrate = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->c2clossrate());
  }

  if (has_c2crttcnt()) {
    // required uint32 C2CRttCnt = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->c2crttcnt());
  }

  if (has_c2sdownlossrate()) {
    // required uint32 C2SDownLossRate = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->c2sdownlossrate());
  }

  if (has_c2srttcnt()) {
    // required uint32 C2SRttCnt = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->c2srttcnt());
  }

  if (has_sendpkts()) {
    // required uint32 SendPkts = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sendpkts());
  }

  if (has_rcvpkts()) {
    // required uint32 RcvPkts = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rcvpkts());
  }

  return total_size;
}
size_t VoipSpeedTestReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VoipSpeedTestReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000fff) ^ 0x00000fff) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required int32 RoomId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());

    // required uint32 CallType = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->calltype());

    // required uint32 NetType = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nettype());

    // required uint32 IsConnecting = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->isconnecting());

    // required uint32 IsConnected = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->isconnected());

    // required uint32 C2CLossrate = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->c2clossrate());

    // required uint32 C2CRttCnt = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->c2crttcnt());

    // required uint32 C2SDownLossRate = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->c2sdownlossrate());

    // required uint32 C2SRttCnt = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->c2srttcnt());

    // required uint32 SendPkts = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sendpkts());

    // required uint32 RcvPkts = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rcvpkts());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated uint32 C2CRtt = 9 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->c2crtt_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _c2crtt_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 C2SRtt = 12 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->c2srtt_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _c2srtt_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoipSpeedTestReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VoipSpeedTestReq)
  GOOGLE_DCHECK_NE(&from, this);
  const VoipSpeedTestReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoipSpeedTestReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VoipSpeedTestReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VoipSpeedTestReq)
    MergeFrom(*source);
  }
}

void VoipSpeedTestReq::MergeFrom(const VoipSpeedTestReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VoipSpeedTestReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  c2crtt_.MergeFrom(from.c2crtt_);
  c2srtt_.MergeFrom(from.c2srtt_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      roomid_ = from.roomid_;
    }
    if (cached_has_bits & 0x00000004u) {
      calltype_ = from.calltype_;
    }
    if (cached_has_bits & 0x00000008u) {
      nettype_ = from.nettype_;
    }
    if (cached_has_bits & 0x00000010u) {
      isconnecting_ = from.isconnecting_;
    }
    if (cached_has_bits & 0x00000020u) {
      isconnected_ = from.isconnected_;
    }
    if (cached_has_bits & 0x00000040u) {
      c2clossrate_ = from.c2clossrate_;
    }
    if (cached_has_bits & 0x00000080u) {
      c2crttcnt_ = from.c2crttcnt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      c2sdownlossrate_ = from.c2sdownlossrate_;
    }
    if (cached_has_bits & 0x00000200u) {
      c2srttcnt_ = from.c2srttcnt_;
    }
    if (cached_has_bits & 0x00000400u) {
      sendpkts_ = from.sendpkts_;
    }
    if (cached_has_bits & 0x00000800u) {
      rcvpkts_ = from.rcvpkts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VoipSpeedTestReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VoipSpeedTestReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoipSpeedTestReq::CopyFrom(const VoipSpeedTestReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VoipSpeedTestReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoipSpeedTestReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void VoipSpeedTestReq::Swap(VoipSpeedTestReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoipSpeedTestReq::InternalSwap(VoipSpeedTestReq* other) {
  c2crtt_.InternalSwap(&other->c2crtt_);
  c2srtt_.InternalSwap(&other->c2srtt_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(roomid_, other->roomid_);
  std::swap(calltype_, other->calltype_);
  std::swap(nettype_, other->nettype_);
  std::swap(isconnecting_, other->isconnecting_);
  std::swap(isconnected_, other->isconnected_);
  std::swap(c2clossrate_, other->c2clossrate_);
  std::swap(c2crttcnt_, other->c2crttcnt_);
  std::swap(c2sdownlossrate_, other->c2sdownlossrate_);
  std::swap(c2srttcnt_, other->c2srttcnt_);
  std::swap(sendpkts_, other->sendpkts_);
  std::swap(rcvpkts_, other->rcvpkts_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoipSpeedTestReq::GetMetadata() const {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoipSpeedTestReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool VoipSpeedTestReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoipSpeedTestReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void VoipSpeedTestReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoipSpeedTestReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& VoipSpeedTestReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedTestReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* VoipSpeedTestReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipSpeedTestReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* VoipSpeedTestReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.VoipSpeedTestReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void VoipSpeedTestReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipSpeedTestReq.BaseRequest)
}

// required int32 RoomId = 2;
bool VoipSpeedTestReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VoipSpeedTestReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
void VoipSpeedTestReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
void VoipSpeedTestReq::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
::google::protobuf::int32 VoipSpeedTestReq::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedTestReq.RoomId)
  return roomid_;
}
void VoipSpeedTestReq::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSpeedTestReq.RoomId)
}

// required uint32 CallType = 3;
bool VoipSpeedTestReq::has_calltype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VoipSpeedTestReq::set_has_calltype() {
  _has_bits_[0] |= 0x00000004u;
}
void VoipSpeedTestReq::clear_has_calltype() {
  _has_bits_[0] &= ~0x00000004u;
}
void VoipSpeedTestReq::clear_calltype() {
  calltype_ = 0u;
  clear_has_calltype();
}
::google::protobuf::uint32 VoipSpeedTestReq::calltype() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedTestReq.CallType)
  return calltype_;
}
void VoipSpeedTestReq::set_calltype(::google::protobuf::uint32 value) {
  set_has_calltype();
  calltype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSpeedTestReq.CallType)
}

// required uint32 NetType = 4;
bool VoipSpeedTestReq::has_nettype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VoipSpeedTestReq::set_has_nettype() {
  _has_bits_[0] |= 0x00000008u;
}
void VoipSpeedTestReq::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000008u;
}
void VoipSpeedTestReq::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
::google::protobuf::uint32 VoipSpeedTestReq::nettype() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedTestReq.NetType)
  return nettype_;
}
void VoipSpeedTestReq::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSpeedTestReq.NetType)
}

// required uint32 IsConnecting = 5;
bool VoipSpeedTestReq::has_isconnecting() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VoipSpeedTestReq::set_has_isconnecting() {
  _has_bits_[0] |= 0x00000010u;
}
void VoipSpeedTestReq::clear_has_isconnecting() {
  _has_bits_[0] &= ~0x00000010u;
}
void VoipSpeedTestReq::clear_isconnecting() {
  isconnecting_ = 0u;
  clear_has_isconnecting();
}
::google::protobuf::uint32 VoipSpeedTestReq::isconnecting() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedTestReq.IsConnecting)
  return isconnecting_;
}
void VoipSpeedTestReq::set_isconnecting(::google::protobuf::uint32 value) {
  set_has_isconnecting();
  isconnecting_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSpeedTestReq.IsConnecting)
}

// required uint32 IsConnected = 6;
bool VoipSpeedTestReq::has_isconnected() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VoipSpeedTestReq::set_has_isconnected() {
  _has_bits_[0] |= 0x00000020u;
}
void VoipSpeedTestReq::clear_has_isconnected() {
  _has_bits_[0] &= ~0x00000020u;
}
void VoipSpeedTestReq::clear_isconnected() {
  isconnected_ = 0u;
  clear_has_isconnected();
}
::google::protobuf::uint32 VoipSpeedTestReq::isconnected() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedTestReq.IsConnected)
  return isconnected_;
}
void VoipSpeedTestReq::set_isconnected(::google::protobuf::uint32 value) {
  set_has_isconnected();
  isconnected_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSpeedTestReq.IsConnected)
}

// required uint32 C2CLossrate = 7;
bool VoipSpeedTestReq::has_c2clossrate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VoipSpeedTestReq::set_has_c2clossrate() {
  _has_bits_[0] |= 0x00000040u;
}
void VoipSpeedTestReq::clear_has_c2clossrate() {
  _has_bits_[0] &= ~0x00000040u;
}
void VoipSpeedTestReq::clear_c2clossrate() {
  c2clossrate_ = 0u;
  clear_has_c2clossrate();
}
::google::protobuf::uint32 VoipSpeedTestReq::c2clossrate() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedTestReq.C2CLossrate)
  return c2clossrate_;
}
void VoipSpeedTestReq::set_c2clossrate(::google::protobuf::uint32 value) {
  set_has_c2clossrate();
  c2clossrate_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSpeedTestReq.C2CLossrate)
}

// required uint32 C2CRttCnt = 8;
bool VoipSpeedTestReq::has_c2crttcnt() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VoipSpeedTestReq::set_has_c2crttcnt() {
  _has_bits_[0] |= 0x00000080u;
}
void VoipSpeedTestReq::clear_has_c2crttcnt() {
  _has_bits_[0] &= ~0x00000080u;
}
void VoipSpeedTestReq::clear_c2crttcnt() {
  c2crttcnt_ = 0u;
  clear_has_c2crttcnt();
}
::google::protobuf::uint32 VoipSpeedTestReq::c2crttcnt() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedTestReq.C2CRttCnt)
  return c2crttcnt_;
}
void VoipSpeedTestReq::set_c2crttcnt(::google::protobuf::uint32 value) {
  set_has_c2crttcnt();
  c2crttcnt_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSpeedTestReq.C2CRttCnt)
}

// repeated uint32 C2CRtt = 9 [packed = true];
int VoipSpeedTestReq::c2crtt_size() const {
  return c2crtt_.size();
}
void VoipSpeedTestReq::clear_c2crtt() {
  c2crtt_.Clear();
}
::google::protobuf::uint32 VoipSpeedTestReq::c2crtt(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedTestReq.C2CRtt)
  return c2crtt_.Get(index);
}
void VoipSpeedTestReq::set_c2crtt(int index, ::google::protobuf::uint32 value) {
  c2crtt_.Set(index, value);
  // @@protoc_insertion_point(field_set:micromsg.VoipSpeedTestReq.C2CRtt)
}
void VoipSpeedTestReq::add_c2crtt(::google::protobuf::uint32 value) {
  c2crtt_.Add(value);
  // @@protoc_insertion_point(field_add:micromsg.VoipSpeedTestReq.C2CRtt)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
VoipSpeedTestReq::c2crtt() const {
  // @@protoc_insertion_point(field_list:micromsg.VoipSpeedTestReq.C2CRtt)
  return c2crtt_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
VoipSpeedTestReq::mutable_c2crtt() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.VoipSpeedTestReq.C2CRtt)
  return &c2crtt_;
}

// required uint32 C2SDownLossRate = 10;
bool VoipSpeedTestReq::has_c2sdownlossrate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void VoipSpeedTestReq::set_has_c2sdownlossrate() {
  _has_bits_[0] |= 0x00000100u;
}
void VoipSpeedTestReq::clear_has_c2sdownlossrate() {
  _has_bits_[0] &= ~0x00000100u;
}
void VoipSpeedTestReq::clear_c2sdownlossrate() {
  c2sdownlossrate_ = 0u;
  clear_has_c2sdownlossrate();
}
::google::protobuf::uint32 VoipSpeedTestReq::c2sdownlossrate() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedTestReq.C2SDownLossRate)
  return c2sdownlossrate_;
}
void VoipSpeedTestReq::set_c2sdownlossrate(::google::protobuf::uint32 value) {
  set_has_c2sdownlossrate();
  c2sdownlossrate_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSpeedTestReq.C2SDownLossRate)
}

// required uint32 C2SRttCnt = 11;
bool VoipSpeedTestReq::has_c2srttcnt() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void VoipSpeedTestReq::set_has_c2srttcnt() {
  _has_bits_[0] |= 0x00000200u;
}
void VoipSpeedTestReq::clear_has_c2srttcnt() {
  _has_bits_[0] &= ~0x00000200u;
}
void VoipSpeedTestReq::clear_c2srttcnt() {
  c2srttcnt_ = 0u;
  clear_has_c2srttcnt();
}
::google::protobuf::uint32 VoipSpeedTestReq::c2srttcnt() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedTestReq.C2SRttCnt)
  return c2srttcnt_;
}
void VoipSpeedTestReq::set_c2srttcnt(::google::protobuf::uint32 value) {
  set_has_c2srttcnt();
  c2srttcnt_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSpeedTestReq.C2SRttCnt)
}

// repeated uint32 C2SRtt = 12 [packed = true];
int VoipSpeedTestReq::c2srtt_size() const {
  return c2srtt_.size();
}
void VoipSpeedTestReq::clear_c2srtt() {
  c2srtt_.Clear();
}
::google::protobuf::uint32 VoipSpeedTestReq::c2srtt(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedTestReq.C2SRtt)
  return c2srtt_.Get(index);
}
void VoipSpeedTestReq::set_c2srtt(int index, ::google::protobuf::uint32 value) {
  c2srtt_.Set(index, value);
  // @@protoc_insertion_point(field_set:micromsg.VoipSpeedTestReq.C2SRtt)
}
void VoipSpeedTestReq::add_c2srtt(::google::protobuf::uint32 value) {
  c2srtt_.Add(value);
  // @@protoc_insertion_point(field_add:micromsg.VoipSpeedTestReq.C2SRtt)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
VoipSpeedTestReq::c2srtt() const {
  // @@protoc_insertion_point(field_list:micromsg.VoipSpeedTestReq.C2SRtt)
  return c2srtt_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
VoipSpeedTestReq::mutable_c2srtt() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.VoipSpeedTestReq.C2SRtt)
  return &c2srtt_;
}

// required uint32 SendPkts = 13;
bool VoipSpeedTestReq::has_sendpkts() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void VoipSpeedTestReq::set_has_sendpkts() {
  _has_bits_[0] |= 0x00000400u;
}
void VoipSpeedTestReq::clear_has_sendpkts() {
  _has_bits_[0] &= ~0x00000400u;
}
void VoipSpeedTestReq::clear_sendpkts() {
  sendpkts_ = 0u;
  clear_has_sendpkts();
}
::google::protobuf::uint32 VoipSpeedTestReq::sendpkts() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedTestReq.SendPkts)
  return sendpkts_;
}
void VoipSpeedTestReq::set_sendpkts(::google::protobuf::uint32 value) {
  set_has_sendpkts();
  sendpkts_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSpeedTestReq.SendPkts)
}

// required uint32 RcvPkts = 14;
bool VoipSpeedTestReq::has_rcvpkts() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void VoipSpeedTestReq::set_has_rcvpkts() {
  _has_bits_[0] |= 0x00000800u;
}
void VoipSpeedTestReq::clear_has_rcvpkts() {
  _has_bits_[0] &= ~0x00000800u;
}
void VoipSpeedTestReq::clear_rcvpkts() {
  rcvpkts_ = 0u;
  clear_has_rcvpkts();
}
::google::protobuf::uint32 VoipSpeedTestReq::rcvpkts() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedTestReq.RcvPkts)
  return rcvpkts_;
}
void VoipSpeedTestReq::set_rcvpkts(::google::protobuf::uint32 value) {
  set_has_rcvpkts();
  rcvpkts_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSpeedTestReq.RcvPkts)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeedTestSvr::kAddrFieldNumber;
const int SpeedTestSvr::kTestCntFieldNumber;
const int SpeedTestSvr::kTestGapFieldNumber;
const int SpeedTestSvr::kTimeoutFieldNumber;
const int SpeedTestSvr::kPktSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeedTestSvr::SpeedTestSvr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SpeedTestSvr)
}
SpeedTestSvr::SpeedTestSvr(const SpeedTestSvr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_addr()) {
    addr_ = new ::micromsg::VoipAddr(*from.addr_);
  } else {
    addr_ = NULL;
  }
  ::memcpy(&testcnt_, &from.testcnt_,
    reinterpret_cast<char*>(&pktsize_) -
    reinterpret_cast<char*>(&testcnt_) + sizeof(pktsize_));
  // @@protoc_insertion_point(copy_constructor:micromsg.SpeedTestSvr)
}

void SpeedTestSvr::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&addr_, 0, reinterpret_cast<char*>(&pktsize_) -
    reinterpret_cast<char*>(&addr_) + sizeof(pktsize_));
}

SpeedTestSvr::~SpeedTestSvr() {
  // @@protoc_insertion_point(destructor:micromsg.SpeedTestSvr)
  SharedDtor();
}

void SpeedTestSvr::SharedDtor() {
  if (this != internal_default_instance()) {
    delete addr_;
  }
}

void SpeedTestSvr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeedTestSvr::descriptor() {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpeedTestSvr& SpeedTestSvr::default_instance() {
  protobuf_mmvoip_2eproto::InitDefaults();
  return *internal_default_instance();
}

SpeedTestSvr* SpeedTestSvr::New(::google::protobuf::Arena* arena) const {
  SpeedTestSvr* n = new SpeedTestSvr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpeedTestSvr::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SpeedTestSvr)
  if (has_addr()) {
    GOOGLE_DCHECK(addr_ != NULL);
    addr_->::micromsg::VoipAddr::Clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&testcnt_, 0, reinterpret_cast<char*>(&pktsize_) -
      reinterpret_cast<char*>(&testcnt_) + sizeof(pktsize_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SpeedTestSvr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SpeedTestSvr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.VoipAddr Addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_addr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 TestCnt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_testcnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &testcnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 TestGap = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_testgap();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &testgap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Timeout = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 PktSize = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_pktsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pktsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SpeedTestSvr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SpeedTestSvr)
  return false;
#undef DO_
}

void SpeedTestSvr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SpeedTestSvr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.VoipAddr Addr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->addr_, output);
  }

  // required uint32 TestCnt = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->testcnt(), output);
  }

  // required uint32 TestGap = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->testgap(), output);
  }

  // required uint32 Timeout = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->timeout(), output);
  }

  // required uint32 PktSize = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->pktsize(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SpeedTestSvr)
}

::google::protobuf::uint8* SpeedTestSvr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SpeedTestSvr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.VoipAddr Addr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->addr_, deterministic, target);
  }

  // required uint32 TestCnt = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->testcnt(), target);
  }

  // required uint32 TestGap = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->testgap(), target);
  }

  // required uint32 Timeout = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->timeout(), target);
  }

  // required uint32 PktSize = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->pktsize(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SpeedTestSvr)
  return target;
}

size_t SpeedTestSvr::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SpeedTestSvr)
  size_t total_size = 0;

  if (has_addr()) {
    // required .micromsg.VoipAddr Addr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->addr_);
  }

  if (has_testcnt()) {
    // required uint32 TestCnt = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->testcnt());
  }

  if (has_testgap()) {
    // required uint32 TestGap = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->testgap());
  }

  if (has_timeout()) {
    // required uint32 Timeout = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timeout());
  }

  if (has_pktsize()) {
    // required uint32 PktSize = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pktsize());
  }

  return total_size;
}
size_t SpeedTestSvr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SpeedTestSvr)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .micromsg.VoipAddr Addr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->addr_);

    // required uint32 TestCnt = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->testcnt());

    // required uint32 TestGap = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->testgap());

    // required uint32 Timeout = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timeout());

    // required uint32 PktSize = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pktsize());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeedTestSvr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SpeedTestSvr)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedTestSvr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeedTestSvr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SpeedTestSvr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SpeedTestSvr)
    MergeFrom(*source);
  }
}

void SpeedTestSvr::MergeFrom(const SpeedTestSvr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SpeedTestSvr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_addr()->::micromsg::VoipAddr::MergeFrom(from.addr());
    }
    if (cached_has_bits & 0x00000002u) {
      testcnt_ = from.testcnt_;
    }
    if (cached_has_bits & 0x00000004u) {
      testgap_ = from.testgap_;
    }
    if (cached_has_bits & 0x00000008u) {
      timeout_ = from.timeout_;
    }
    if (cached_has_bits & 0x00000010u) {
      pktsize_ = from.pktsize_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpeedTestSvr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SpeedTestSvr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedTestSvr::CopyFrom(const SpeedTestSvr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SpeedTestSvr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedTestSvr::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  if (has_addr()) {
    if (!this->addr_->IsInitialized()) return false;
  }
  return true;
}

void SpeedTestSvr::Swap(SpeedTestSvr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeedTestSvr::InternalSwap(SpeedTestSvr* other) {
  std::swap(addr_, other->addr_);
  std::swap(testcnt_, other->testcnt_);
  std::swap(testgap_, other->testgap_);
  std::swap(timeout_, other->timeout_);
  std::swap(pktsize_, other->pktsize_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpeedTestSvr::GetMetadata() const {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpeedTestSvr

// required .micromsg.VoipAddr Addr = 1;
bool SpeedTestSvr::has_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SpeedTestSvr::set_has_addr() {
  _has_bits_[0] |= 0x00000001u;
}
void SpeedTestSvr::clear_has_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
void SpeedTestSvr::clear_addr() {
  if (addr_ != NULL) addr_->::micromsg::VoipAddr::Clear();
  clear_has_addr();
}
const ::micromsg::VoipAddr& SpeedTestSvr::addr() const {
  // @@protoc_insertion_point(field_get:micromsg.SpeedTestSvr.Addr)
  return addr_ != NULL ? *addr_
                         : *::micromsg::VoipAddr::internal_default_instance();
}
::micromsg::VoipAddr* SpeedTestSvr::mutable_addr() {
  set_has_addr();
  if (addr_ == NULL) {
    addr_ = new ::micromsg::VoipAddr;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SpeedTestSvr.Addr)
  return addr_;
}
::micromsg::VoipAddr* SpeedTestSvr::release_addr() {
  // @@protoc_insertion_point(field_release:micromsg.SpeedTestSvr.Addr)
  clear_has_addr();
  ::micromsg::VoipAddr* temp = addr_;
  addr_ = NULL;
  return temp;
}
void SpeedTestSvr::set_allocated_addr(::micromsg::VoipAddr* addr) {
  delete addr_;
  addr_ = addr;
  if (addr) {
    set_has_addr();
  } else {
    clear_has_addr();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SpeedTestSvr.Addr)
}

// required uint32 TestCnt = 2;
bool SpeedTestSvr::has_testcnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SpeedTestSvr::set_has_testcnt() {
  _has_bits_[0] |= 0x00000002u;
}
void SpeedTestSvr::clear_has_testcnt() {
  _has_bits_[0] &= ~0x00000002u;
}
void SpeedTestSvr::clear_testcnt() {
  testcnt_ = 0u;
  clear_has_testcnt();
}
::google::protobuf::uint32 SpeedTestSvr::testcnt() const {
  // @@protoc_insertion_point(field_get:micromsg.SpeedTestSvr.TestCnt)
  return testcnt_;
}
void SpeedTestSvr::set_testcnt(::google::protobuf::uint32 value) {
  set_has_testcnt();
  testcnt_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SpeedTestSvr.TestCnt)
}

// required uint32 TestGap = 3;
bool SpeedTestSvr::has_testgap() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SpeedTestSvr::set_has_testgap() {
  _has_bits_[0] |= 0x00000004u;
}
void SpeedTestSvr::clear_has_testgap() {
  _has_bits_[0] &= ~0x00000004u;
}
void SpeedTestSvr::clear_testgap() {
  testgap_ = 0u;
  clear_has_testgap();
}
::google::protobuf::uint32 SpeedTestSvr::testgap() const {
  // @@protoc_insertion_point(field_get:micromsg.SpeedTestSvr.TestGap)
  return testgap_;
}
void SpeedTestSvr::set_testgap(::google::protobuf::uint32 value) {
  set_has_testgap();
  testgap_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SpeedTestSvr.TestGap)
}

// required uint32 Timeout = 4;
bool SpeedTestSvr::has_timeout() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SpeedTestSvr::set_has_timeout() {
  _has_bits_[0] |= 0x00000008u;
}
void SpeedTestSvr::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000008u;
}
void SpeedTestSvr::clear_timeout() {
  timeout_ = 0u;
  clear_has_timeout();
}
::google::protobuf::uint32 SpeedTestSvr::timeout() const {
  // @@protoc_insertion_point(field_get:micromsg.SpeedTestSvr.Timeout)
  return timeout_;
}
void SpeedTestSvr::set_timeout(::google::protobuf::uint32 value) {
  set_has_timeout();
  timeout_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SpeedTestSvr.Timeout)
}

// required uint32 PktSize = 5;
bool SpeedTestSvr::has_pktsize() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SpeedTestSvr::set_has_pktsize() {
  _has_bits_[0] |= 0x00000010u;
}
void SpeedTestSvr::clear_has_pktsize() {
  _has_bits_[0] &= ~0x00000010u;
}
void SpeedTestSvr::clear_pktsize() {
  pktsize_ = 0u;
  clear_has_pktsize();
}
::google::protobuf::uint32 SpeedTestSvr::pktsize() const {
  // @@protoc_insertion_point(field_get:micromsg.SpeedTestSvr.PktSize)
  return pktsize_;
}
void SpeedTestSvr::set_pktsize(::google::protobuf::uint32 value) {
  set_has_pktsize();
  pktsize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SpeedTestSvr.PktSize)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoipSpeedTestRsp::kBaseResponseFieldNumber;
const int VoipSpeedTestRsp::kNeedTestFieldNumber;
const int VoipSpeedTestRsp::kTestIdFieldNumber;
const int VoipSpeedTestRsp::kSvrListCntFieldNumber;
const int VoipSpeedTestRsp::kSvrListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoipSpeedTestRsp::VoipSpeedTestRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VoipSpeedTestRsp)
}
VoipSpeedTestRsp::VoipSpeedTestRsp(const VoipSpeedTestRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      svrlist_(from.svrlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  ::memcpy(&testid_, &from.testid_,
    reinterpret_cast<char*>(&svrlistcnt_) -
    reinterpret_cast<char*>(&testid_) + sizeof(svrlistcnt_));
  // @@protoc_insertion_point(copy_constructor:micromsg.VoipSpeedTestRsp)
}

void VoipSpeedTestRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&svrlistcnt_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(svrlistcnt_));
}

VoipSpeedTestRsp::~VoipSpeedTestRsp() {
  // @@protoc_insertion_point(destructor:micromsg.VoipSpeedTestRsp)
  SharedDtor();
}

void VoipSpeedTestRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void VoipSpeedTestRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoipSpeedTestRsp::descriptor() {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoipSpeedTestRsp& VoipSpeedTestRsp::default_instance() {
  protobuf_mmvoip_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoipSpeedTestRsp* VoipSpeedTestRsp::New(::google::protobuf::Arena* arena) const {
  VoipSpeedTestRsp* n = new VoipSpeedTestRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoipSpeedTestRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VoipSpeedTestRsp)
  svrlist_.Clear();
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&testid_, 0, reinterpret_cast<char*>(&svrlistcnt_) -
      reinterpret_cast<char*>(&testid_) + sizeof(svrlistcnt_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoipSpeedTestRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VoipSpeedTestRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 NeedTest = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_needtest();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &needtest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 TestId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_testid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &testid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 SvrListCnt = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_svrlistcnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svrlistcnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.SpeedTestSvr SvrList = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_svrlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VoipSpeedTestRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VoipSpeedTestRsp)
  return false;
#undef DO_
}

void VoipSpeedTestRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VoipSpeedTestRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required uint32 NeedTest = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->needtest(), output);
  }

  // required uint64 TestId = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->testid(), output);
  }

  // required uint32 SvrListCnt = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->svrlistcnt(), output);
  }

  // repeated .micromsg.SpeedTestSvr SvrList = 5;
  for (unsigned int i = 0, n = this->svrlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->svrlist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VoipSpeedTestRsp)
}

::google::protobuf::uint8* VoipSpeedTestRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VoipSpeedTestRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required uint32 NeedTest = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->needtest(), target);
  }

  // required uint64 TestId = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->testid(), target);
  }

  // required uint32 SvrListCnt = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->svrlistcnt(), target);
  }

  // repeated .micromsg.SpeedTestSvr SvrList = 5;
  for (unsigned int i = 0, n = this->svrlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->svrlist(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VoipSpeedTestRsp)
  return target;
}

size_t VoipSpeedTestRsp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.VoipSpeedTestRsp)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_testid()) {
    // required uint64 TestId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->testid());
  }

  if (has_needtest()) {
    // required uint32 NeedTest = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->needtest());
  }

  if (has_svrlistcnt()) {
    // required uint32 SvrListCnt = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->svrlistcnt());
  }

  return total_size;
}
size_t VoipSpeedTestRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VoipSpeedTestRsp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required uint64 TestId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->testid());

    // required uint32 NeedTest = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->needtest());

    // required uint32 SvrListCnt = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->svrlistcnt());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.SpeedTestSvr SvrList = 5;
  {
    unsigned int count = this->svrlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svrlist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoipSpeedTestRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VoipSpeedTestRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const VoipSpeedTestRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoipSpeedTestRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VoipSpeedTestRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VoipSpeedTestRsp)
    MergeFrom(*source);
  }
}

void VoipSpeedTestRsp::MergeFrom(const VoipSpeedTestRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VoipSpeedTestRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  svrlist_.MergeFrom(from.svrlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      testid_ = from.testid_;
    }
    if (cached_has_bits & 0x00000004u) {
      needtest_ = from.needtest_;
    }
    if (cached_has_bits & 0x00000008u) {
      svrlistcnt_ = from.svrlistcnt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VoipSpeedTestRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VoipSpeedTestRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoipSpeedTestRsp::CopyFrom(const VoipSpeedTestRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VoipSpeedTestRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoipSpeedTestRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->svrlist())) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void VoipSpeedTestRsp::Swap(VoipSpeedTestRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoipSpeedTestRsp::InternalSwap(VoipSpeedTestRsp* other) {
  svrlist_.InternalSwap(&other->svrlist_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(testid_, other->testid_);
  std::swap(needtest_, other->needtest_);
  std::swap(svrlistcnt_, other->svrlistcnt_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoipSpeedTestRsp::GetMetadata() const {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoipSpeedTestRsp

// required .micromsg.BaseResponse BaseResponse = 1;
bool VoipSpeedTestRsp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoipSpeedTestRsp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void VoipSpeedTestRsp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoipSpeedTestRsp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& VoipSpeedTestRsp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedTestRsp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* VoipSpeedTestRsp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipSpeedTestRsp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* VoipSpeedTestRsp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.VoipSpeedTestRsp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void VoipSpeedTestRsp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipSpeedTestRsp.BaseResponse)
}

// required uint32 NeedTest = 2;
bool VoipSpeedTestRsp::has_needtest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VoipSpeedTestRsp::set_has_needtest() {
  _has_bits_[0] |= 0x00000004u;
}
void VoipSpeedTestRsp::clear_has_needtest() {
  _has_bits_[0] &= ~0x00000004u;
}
void VoipSpeedTestRsp::clear_needtest() {
  needtest_ = 0u;
  clear_has_needtest();
}
::google::protobuf::uint32 VoipSpeedTestRsp::needtest() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedTestRsp.NeedTest)
  return needtest_;
}
void VoipSpeedTestRsp::set_needtest(::google::protobuf::uint32 value) {
  set_has_needtest();
  needtest_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSpeedTestRsp.NeedTest)
}

// required uint64 TestId = 3;
bool VoipSpeedTestRsp::has_testid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VoipSpeedTestRsp::set_has_testid() {
  _has_bits_[0] |= 0x00000002u;
}
void VoipSpeedTestRsp::clear_has_testid() {
  _has_bits_[0] &= ~0x00000002u;
}
void VoipSpeedTestRsp::clear_testid() {
  testid_ = GOOGLE_ULONGLONG(0);
  clear_has_testid();
}
::google::protobuf::uint64 VoipSpeedTestRsp::testid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedTestRsp.TestId)
  return testid_;
}
void VoipSpeedTestRsp::set_testid(::google::protobuf::uint64 value) {
  set_has_testid();
  testid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSpeedTestRsp.TestId)
}

// required uint32 SvrListCnt = 4;
bool VoipSpeedTestRsp::has_svrlistcnt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VoipSpeedTestRsp::set_has_svrlistcnt() {
  _has_bits_[0] |= 0x00000008u;
}
void VoipSpeedTestRsp::clear_has_svrlistcnt() {
  _has_bits_[0] &= ~0x00000008u;
}
void VoipSpeedTestRsp::clear_svrlistcnt() {
  svrlistcnt_ = 0u;
  clear_has_svrlistcnt();
}
::google::protobuf::uint32 VoipSpeedTestRsp::svrlistcnt() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedTestRsp.SvrListCnt)
  return svrlistcnt_;
}
void VoipSpeedTestRsp::set_svrlistcnt(::google::protobuf::uint32 value) {
  set_has_svrlistcnt();
  svrlistcnt_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSpeedTestRsp.SvrListCnt)
}

// repeated .micromsg.SpeedTestSvr SvrList = 5;
int VoipSpeedTestRsp::svrlist_size() const {
  return svrlist_.size();
}
void VoipSpeedTestRsp::clear_svrlist() {
  svrlist_.Clear();
}
const ::micromsg::SpeedTestSvr& VoipSpeedTestRsp::svrlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedTestRsp.SvrList)
  return svrlist_.Get(index);
}
::micromsg::SpeedTestSvr* VoipSpeedTestRsp::mutable_svrlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.VoipSpeedTestRsp.SvrList)
  return svrlist_.Mutable(index);
}
::micromsg::SpeedTestSvr* VoipSpeedTestRsp::add_svrlist() {
  // @@protoc_insertion_point(field_add:micromsg.VoipSpeedTestRsp.SvrList)
  return svrlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::SpeedTestSvr >*
VoipSpeedTestRsp::mutable_svrlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.VoipSpeedTestRsp.SvrList)
  return &svrlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::SpeedTestSvr >&
VoipSpeedTestRsp::svrlist() const {
  // @@protoc_insertion_point(field_list:micromsg.VoipSpeedTestRsp.SvrList)
  return svrlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeedResult::kClientIpFieldNumber;
const int SpeedResult::kTestPktSizeFieldNumber;
const int SpeedResult::kTestCntFieldNumber;
const int SpeedResult::kAddrFieldNumber;
const int SpeedResult::kAvgRttFieldNumber;
const int SpeedResult::kMinRttFieldNumber;
const int SpeedResult::kMaxRttFieldNumber;
const int SpeedResult::kRttCntFieldNumber;
const int SpeedResult::kRttFieldNumber;
const int SpeedResult::kDownSeqCntFieldNumber;
const int SpeedResult::kDownSeqFieldNumber;
const int SpeedResult::kUpSeqCntFieldNumber;
const int SpeedResult::kUpSeqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeedResult::SpeedResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SpeedResult)
}
SpeedResult::SpeedResult(const SpeedResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      rtt_(from.rtt_),
      downseq_(from.downseq_),
      upseq_(from.upseq_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_addr()) {
    addr_ = new ::micromsg::VoipAddr(*from.addr_);
  } else {
    addr_ = NULL;
  }
  ::memcpy(&clientip_, &from.clientip_,
    reinterpret_cast<char*>(&upseqcnt_) -
    reinterpret_cast<char*>(&clientip_) + sizeof(upseqcnt_));
  // @@protoc_insertion_point(copy_constructor:micromsg.SpeedResult)
}

void SpeedResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&addr_, 0, reinterpret_cast<char*>(&upseqcnt_) -
    reinterpret_cast<char*>(&addr_) + sizeof(upseqcnt_));
}

SpeedResult::~SpeedResult() {
  // @@protoc_insertion_point(destructor:micromsg.SpeedResult)
  SharedDtor();
}

void SpeedResult::SharedDtor() {
  if (this != internal_default_instance()) {
    delete addr_;
  }
}

void SpeedResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeedResult::descriptor() {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpeedResult& SpeedResult::default_instance() {
  protobuf_mmvoip_2eproto::InitDefaults();
  return *internal_default_instance();
}

SpeedResult* SpeedResult::New(::google::protobuf::Arena* arena) const {
  SpeedResult* n = new SpeedResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpeedResult::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SpeedResult)
  rtt_.Clear();
  downseq_.Clear();
  upseq_.Clear();
  if (has_addr()) {
    GOOGLE_DCHECK(addr_ != NULL);
    addr_->::micromsg::VoipAddr::Clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&clientip_, 0, reinterpret_cast<char*>(&rttcnt_) -
      reinterpret_cast<char*>(&clientip_) + sizeof(rttcnt_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&downseqcnt_, 0, reinterpret_cast<char*>(&upseqcnt_) -
      reinterpret_cast<char*>(&downseqcnt_) + sizeof(upseqcnt_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SpeedResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SpeedResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ClientIp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_clientip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 TestPktSize = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_testpktsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &testpktsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 TestCnt = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_testcnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &testcnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.VoipAddr Addr = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_addr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 AvgRtt = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_avgrtt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avgrtt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 MinRtt = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_minrtt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minrtt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 MaxRtt = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_maxrtt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxrtt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 RttCnt = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_rttcnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rttcnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 Rtt = 9 [packed = true];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rtt())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(72u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 74u, input, this->mutable_rtt())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 DownSeqCnt = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_downseqcnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &downseqcnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 DownSeq = 11 [packed = true];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_downseq())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(88u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 90u, input, this->mutable_downseq())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 UpSeqCnt = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_upseqcnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upseqcnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 UpSeq = 13 [packed = true];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_upseq())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(104u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 106u, input, this->mutable_upseq())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SpeedResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SpeedResult)
  return false;
#undef DO_
}

void SpeedResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SpeedResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 ClientIp = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->clientip(), output);
  }

  // required uint32 TestPktSize = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->testpktsize(), output);
  }

  // required uint32 TestCnt = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->testcnt(), output);
  }

  // required .micromsg.VoipAddr Addr = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->addr_, output);
  }

  // required uint32 AvgRtt = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->avgrtt(), output);
  }

  // required uint32 MinRtt = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->minrtt(), output);
  }

  // required uint32 MaxRtt = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->maxrtt(), output);
  }

  // required uint32 RttCnt = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->rttcnt(), output);
  }

  // repeated uint32 Rtt = 9 [packed = true];
  if (this->rtt_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_rtt_cached_byte_size_);
  }
  for (int i = 0, n = this->rtt_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->rtt(i), output);
  }

  // required uint32 DownSeqCnt = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->downseqcnt(), output);
  }

  // repeated uint32 DownSeq = 11 [packed = true];
  if (this->downseq_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_downseq_cached_byte_size_);
  }
  for (int i = 0, n = this->downseq_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->downseq(i), output);
  }

  // required uint32 UpSeqCnt = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->upseqcnt(), output);
  }

  // repeated uint32 UpSeq = 13 [packed = true];
  if (this->upseq_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(13, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_upseq_cached_byte_size_);
  }
  for (int i = 0, n = this->upseq_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->upseq(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SpeedResult)
}

::google::protobuf::uint8* SpeedResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SpeedResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 ClientIp = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->clientip(), target);
  }

  // required uint32 TestPktSize = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->testpktsize(), target);
  }

  // required uint32 TestCnt = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->testcnt(), target);
  }

  // required .micromsg.VoipAddr Addr = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->addr_, deterministic, target);
  }

  // required uint32 AvgRtt = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->avgrtt(), target);
  }

  // required uint32 MinRtt = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->minrtt(), target);
  }

  // required uint32 MaxRtt = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->maxrtt(), target);
  }

  // required uint32 RttCnt = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->rttcnt(), target);
  }

  // repeated uint32 Rtt = 9 [packed = true];
  if (this->rtt_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _rtt_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->rtt_, target);
  }

  // required uint32 DownSeqCnt = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->downseqcnt(), target);
  }

  // repeated uint32 DownSeq = 11 [packed = true];
  if (this->downseq_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _downseq_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->downseq_, target);
  }

  // required uint32 UpSeqCnt = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->upseqcnt(), target);
  }

  // repeated uint32 UpSeq = 13 [packed = true];
  if (this->upseq_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      13,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _upseq_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->upseq_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SpeedResult)
  return target;
}

size_t SpeedResult::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.SpeedResult)
  size_t total_size = 0;

  if (has_addr()) {
    // required .micromsg.VoipAddr Addr = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->addr_);
  }

  if (has_clientip()) {
    // required uint32 ClientIp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->clientip());
  }

  if (has_testpktsize()) {
    // required uint32 TestPktSize = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->testpktsize());
  }

  if (has_testcnt()) {
    // required uint32 TestCnt = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->testcnt());
  }

  if (has_avgrtt()) {
    // required uint32 AvgRtt = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->avgrtt());
  }

  if (has_minrtt()) {
    // required uint32 MinRtt = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->minrtt());
  }

  if (has_maxrtt()) {
    // required uint32 MaxRtt = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maxrtt());
  }

  if (has_rttcnt()) {
    // required uint32 RttCnt = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rttcnt());
  }

  if (has_downseqcnt()) {
    // required uint32 DownSeqCnt = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->downseqcnt());
  }

  if (has_upseqcnt()) {
    // required uint32 UpSeqCnt = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->upseqcnt());
  }

  return total_size;
}
size_t SpeedResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SpeedResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000003ff) ^ 0x000003ff) == 0) {  // All required fields are present.
    // required .micromsg.VoipAddr Addr = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->addr_);

    // required uint32 ClientIp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->clientip());

    // required uint32 TestPktSize = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->testpktsize());

    // required uint32 TestCnt = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->testcnt());

    // required uint32 AvgRtt = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->avgrtt());

    // required uint32 MinRtt = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->minrtt());

    // required uint32 MaxRtt = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maxrtt());

    // required uint32 RttCnt = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rttcnt());

    // required uint32 DownSeqCnt = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->downseqcnt());

    // required uint32 UpSeqCnt = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->upseqcnt());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated uint32 Rtt = 9 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->rtt_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _rtt_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 DownSeq = 11 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->downseq_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _downseq_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 UpSeq = 13 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->upseq_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _upseq_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeedResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SpeedResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeedResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SpeedResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SpeedResult)
    MergeFrom(*source);
  }
}

void SpeedResult::MergeFrom(const SpeedResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SpeedResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rtt_.MergeFrom(from.rtt_);
  downseq_.MergeFrom(from.downseq_);
  upseq_.MergeFrom(from.upseq_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_addr()->::micromsg::VoipAddr::MergeFrom(from.addr());
    }
    if (cached_has_bits & 0x00000002u) {
      clientip_ = from.clientip_;
    }
    if (cached_has_bits & 0x00000004u) {
      testpktsize_ = from.testpktsize_;
    }
    if (cached_has_bits & 0x00000008u) {
      testcnt_ = from.testcnt_;
    }
    if (cached_has_bits & 0x00000010u) {
      avgrtt_ = from.avgrtt_;
    }
    if (cached_has_bits & 0x00000020u) {
      minrtt_ = from.minrtt_;
    }
    if (cached_has_bits & 0x00000040u) {
      maxrtt_ = from.maxrtt_;
    }
    if (cached_has_bits & 0x00000080u) {
      rttcnt_ = from.rttcnt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      downseqcnt_ = from.downseqcnt_;
    }
    if (cached_has_bits & 0x00000200u) {
      upseqcnt_ = from.upseqcnt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpeedResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SpeedResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedResult::CopyFrom(const SpeedResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SpeedResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;
  if (has_addr()) {
    if (!this->addr_->IsInitialized()) return false;
  }
  return true;
}

void SpeedResult::Swap(SpeedResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeedResult::InternalSwap(SpeedResult* other) {
  rtt_.InternalSwap(&other->rtt_);
  downseq_.InternalSwap(&other->downseq_);
  upseq_.InternalSwap(&other->upseq_);
  std::swap(addr_, other->addr_);
  std::swap(clientip_, other->clientip_);
  std::swap(testpktsize_, other->testpktsize_);
  std::swap(testcnt_, other->testcnt_);
  std::swap(avgrtt_, other->avgrtt_);
  std::swap(minrtt_, other->minrtt_);
  std::swap(maxrtt_, other->maxrtt_);
  std::swap(rttcnt_, other->rttcnt_);
  std::swap(downseqcnt_, other->downseqcnt_);
  std::swap(upseqcnt_, other->upseqcnt_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpeedResult::GetMetadata() const {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpeedResult

// required uint32 ClientIp = 1;
bool SpeedResult::has_clientip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SpeedResult::set_has_clientip() {
  _has_bits_[0] |= 0x00000002u;
}
void SpeedResult::clear_has_clientip() {
  _has_bits_[0] &= ~0x00000002u;
}
void SpeedResult::clear_clientip() {
  clientip_ = 0u;
  clear_has_clientip();
}
::google::protobuf::uint32 SpeedResult::clientip() const {
  // @@protoc_insertion_point(field_get:micromsg.SpeedResult.ClientIp)
  return clientip_;
}
void SpeedResult::set_clientip(::google::protobuf::uint32 value) {
  set_has_clientip();
  clientip_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SpeedResult.ClientIp)
}

// required uint32 TestPktSize = 2;
bool SpeedResult::has_testpktsize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SpeedResult::set_has_testpktsize() {
  _has_bits_[0] |= 0x00000004u;
}
void SpeedResult::clear_has_testpktsize() {
  _has_bits_[0] &= ~0x00000004u;
}
void SpeedResult::clear_testpktsize() {
  testpktsize_ = 0u;
  clear_has_testpktsize();
}
::google::protobuf::uint32 SpeedResult::testpktsize() const {
  // @@protoc_insertion_point(field_get:micromsg.SpeedResult.TestPktSize)
  return testpktsize_;
}
void SpeedResult::set_testpktsize(::google::protobuf::uint32 value) {
  set_has_testpktsize();
  testpktsize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SpeedResult.TestPktSize)
}

// required uint32 TestCnt = 3;
bool SpeedResult::has_testcnt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SpeedResult::set_has_testcnt() {
  _has_bits_[0] |= 0x00000008u;
}
void SpeedResult::clear_has_testcnt() {
  _has_bits_[0] &= ~0x00000008u;
}
void SpeedResult::clear_testcnt() {
  testcnt_ = 0u;
  clear_has_testcnt();
}
::google::protobuf::uint32 SpeedResult::testcnt() const {
  // @@protoc_insertion_point(field_get:micromsg.SpeedResult.TestCnt)
  return testcnt_;
}
void SpeedResult::set_testcnt(::google::protobuf::uint32 value) {
  set_has_testcnt();
  testcnt_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SpeedResult.TestCnt)
}

// required .micromsg.VoipAddr Addr = 4;
bool SpeedResult::has_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SpeedResult::set_has_addr() {
  _has_bits_[0] |= 0x00000001u;
}
void SpeedResult::clear_has_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
void SpeedResult::clear_addr() {
  if (addr_ != NULL) addr_->::micromsg::VoipAddr::Clear();
  clear_has_addr();
}
const ::micromsg::VoipAddr& SpeedResult::addr() const {
  // @@protoc_insertion_point(field_get:micromsg.SpeedResult.Addr)
  return addr_ != NULL ? *addr_
                         : *::micromsg::VoipAddr::internal_default_instance();
}
::micromsg::VoipAddr* SpeedResult::mutable_addr() {
  set_has_addr();
  if (addr_ == NULL) {
    addr_ = new ::micromsg::VoipAddr;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SpeedResult.Addr)
  return addr_;
}
::micromsg::VoipAddr* SpeedResult::release_addr() {
  // @@protoc_insertion_point(field_release:micromsg.SpeedResult.Addr)
  clear_has_addr();
  ::micromsg::VoipAddr* temp = addr_;
  addr_ = NULL;
  return temp;
}
void SpeedResult::set_allocated_addr(::micromsg::VoipAddr* addr) {
  delete addr_;
  addr_ = addr;
  if (addr) {
    set_has_addr();
  } else {
    clear_has_addr();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SpeedResult.Addr)
}

// required uint32 AvgRtt = 5;
bool SpeedResult::has_avgrtt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SpeedResult::set_has_avgrtt() {
  _has_bits_[0] |= 0x00000010u;
}
void SpeedResult::clear_has_avgrtt() {
  _has_bits_[0] &= ~0x00000010u;
}
void SpeedResult::clear_avgrtt() {
  avgrtt_ = 0u;
  clear_has_avgrtt();
}
::google::protobuf::uint32 SpeedResult::avgrtt() const {
  // @@protoc_insertion_point(field_get:micromsg.SpeedResult.AvgRtt)
  return avgrtt_;
}
void SpeedResult::set_avgrtt(::google::protobuf::uint32 value) {
  set_has_avgrtt();
  avgrtt_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SpeedResult.AvgRtt)
}

// required uint32 MinRtt = 6;
bool SpeedResult::has_minrtt() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SpeedResult::set_has_minrtt() {
  _has_bits_[0] |= 0x00000020u;
}
void SpeedResult::clear_has_minrtt() {
  _has_bits_[0] &= ~0x00000020u;
}
void SpeedResult::clear_minrtt() {
  minrtt_ = 0u;
  clear_has_minrtt();
}
::google::protobuf::uint32 SpeedResult::minrtt() const {
  // @@protoc_insertion_point(field_get:micromsg.SpeedResult.MinRtt)
  return minrtt_;
}
void SpeedResult::set_minrtt(::google::protobuf::uint32 value) {
  set_has_minrtt();
  minrtt_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SpeedResult.MinRtt)
}

// required uint32 MaxRtt = 7;
bool SpeedResult::has_maxrtt() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SpeedResult::set_has_maxrtt() {
  _has_bits_[0] |= 0x00000040u;
}
void SpeedResult::clear_has_maxrtt() {
  _has_bits_[0] &= ~0x00000040u;
}
void SpeedResult::clear_maxrtt() {
  maxrtt_ = 0u;
  clear_has_maxrtt();
}
::google::protobuf::uint32 SpeedResult::maxrtt() const {
  // @@protoc_insertion_point(field_get:micromsg.SpeedResult.MaxRtt)
  return maxrtt_;
}
void SpeedResult::set_maxrtt(::google::protobuf::uint32 value) {
  set_has_maxrtt();
  maxrtt_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SpeedResult.MaxRtt)
}

// required uint32 RttCnt = 8;
bool SpeedResult::has_rttcnt() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SpeedResult::set_has_rttcnt() {
  _has_bits_[0] |= 0x00000080u;
}
void SpeedResult::clear_has_rttcnt() {
  _has_bits_[0] &= ~0x00000080u;
}
void SpeedResult::clear_rttcnt() {
  rttcnt_ = 0u;
  clear_has_rttcnt();
}
::google::protobuf::uint32 SpeedResult::rttcnt() const {
  // @@protoc_insertion_point(field_get:micromsg.SpeedResult.RttCnt)
  return rttcnt_;
}
void SpeedResult::set_rttcnt(::google::protobuf::uint32 value) {
  set_has_rttcnt();
  rttcnt_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SpeedResult.RttCnt)
}

// repeated uint32 Rtt = 9 [packed = true];
int SpeedResult::rtt_size() const {
  return rtt_.size();
}
void SpeedResult::clear_rtt() {
  rtt_.Clear();
}
::google::protobuf::uint32 SpeedResult::rtt(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.SpeedResult.Rtt)
  return rtt_.Get(index);
}
void SpeedResult::set_rtt(int index, ::google::protobuf::uint32 value) {
  rtt_.Set(index, value);
  // @@protoc_insertion_point(field_set:micromsg.SpeedResult.Rtt)
}
void SpeedResult::add_rtt(::google::protobuf::uint32 value) {
  rtt_.Add(value);
  // @@protoc_insertion_point(field_add:micromsg.SpeedResult.Rtt)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SpeedResult::rtt() const {
  // @@protoc_insertion_point(field_list:micromsg.SpeedResult.Rtt)
  return rtt_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SpeedResult::mutable_rtt() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.SpeedResult.Rtt)
  return &rtt_;
}

// required uint32 DownSeqCnt = 10;
bool SpeedResult::has_downseqcnt() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SpeedResult::set_has_downseqcnt() {
  _has_bits_[0] |= 0x00000100u;
}
void SpeedResult::clear_has_downseqcnt() {
  _has_bits_[0] &= ~0x00000100u;
}
void SpeedResult::clear_downseqcnt() {
  downseqcnt_ = 0u;
  clear_has_downseqcnt();
}
::google::protobuf::uint32 SpeedResult::downseqcnt() const {
  // @@protoc_insertion_point(field_get:micromsg.SpeedResult.DownSeqCnt)
  return downseqcnt_;
}
void SpeedResult::set_downseqcnt(::google::protobuf::uint32 value) {
  set_has_downseqcnt();
  downseqcnt_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SpeedResult.DownSeqCnt)
}

// repeated uint32 DownSeq = 11 [packed = true];
int SpeedResult::downseq_size() const {
  return downseq_.size();
}
void SpeedResult::clear_downseq() {
  downseq_.Clear();
}
::google::protobuf::uint32 SpeedResult::downseq(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.SpeedResult.DownSeq)
  return downseq_.Get(index);
}
void SpeedResult::set_downseq(int index, ::google::protobuf::uint32 value) {
  downseq_.Set(index, value);
  // @@protoc_insertion_point(field_set:micromsg.SpeedResult.DownSeq)
}
void SpeedResult::add_downseq(::google::protobuf::uint32 value) {
  downseq_.Add(value);
  // @@protoc_insertion_point(field_add:micromsg.SpeedResult.DownSeq)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SpeedResult::downseq() const {
  // @@protoc_insertion_point(field_list:micromsg.SpeedResult.DownSeq)
  return downseq_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SpeedResult::mutable_downseq() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.SpeedResult.DownSeq)
  return &downseq_;
}

// required uint32 UpSeqCnt = 12;
bool SpeedResult::has_upseqcnt() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SpeedResult::set_has_upseqcnt() {
  _has_bits_[0] |= 0x00000200u;
}
void SpeedResult::clear_has_upseqcnt() {
  _has_bits_[0] &= ~0x00000200u;
}
void SpeedResult::clear_upseqcnt() {
  upseqcnt_ = 0u;
  clear_has_upseqcnt();
}
::google::protobuf::uint32 SpeedResult::upseqcnt() const {
  // @@protoc_insertion_point(field_get:micromsg.SpeedResult.UpSeqCnt)
  return upseqcnt_;
}
void SpeedResult::set_upseqcnt(::google::protobuf::uint32 value) {
  set_has_upseqcnt();
  upseqcnt_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SpeedResult.UpSeqCnt)
}

// repeated uint32 UpSeq = 13 [packed = true];
int SpeedResult::upseq_size() const {
  return upseq_.size();
}
void SpeedResult::clear_upseq() {
  upseq_.Clear();
}
::google::protobuf::uint32 SpeedResult::upseq(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.SpeedResult.UpSeq)
  return upseq_.Get(index);
}
void SpeedResult::set_upseq(int index, ::google::protobuf::uint32 value) {
  upseq_.Set(index, value);
  // @@protoc_insertion_point(field_set:micromsg.SpeedResult.UpSeq)
}
void SpeedResult::add_upseq(::google::protobuf::uint32 value) {
  upseq_.Add(value);
  // @@protoc_insertion_point(field_add:micromsg.SpeedResult.UpSeq)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SpeedResult::upseq() const {
  // @@protoc_insertion_point(field_list:micromsg.SpeedResult.UpSeq)
  return upseq_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SpeedResult::mutable_upseq() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.SpeedResult.UpSeq)
  return &upseq_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoipSpeedResultReq::kBaseRequestFieldNumber;
const int VoipSpeedResultReq::kTestIdFieldNumber;
const int VoipSpeedResultReq::kRoomKeyFieldNumber;
const int VoipSpeedResultReq::kNetTypeFieldNumber;
const int VoipSpeedResultReq::kNetNameFieldNumber;
const int VoipSpeedResultReq::kWifiNameFieldNumber;
const int VoipSpeedResultReq::kLongitudeFieldNumber;
const int VoipSpeedResultReq::kLatitudeFieldNumber;
const int VoipSpeedResultReq::kRoomIdFieldNumber;
const int VoipSpeedResultReq::kResultCntFieldNumber;
const int VoipSpeedResultReq::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoipSpeedResultReq::VoipSpeedResultReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VoipSpeedResultReq)
}
VoipSpeedResultReq::VoipSpeedResultReq(const VoipSpeedResultReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      result_(from.result_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_netname()) {
    netname_ = new ::micromsg::SKBuiltinString_t(*from.netname_);
  } else {
    netname_ = NULL;
  }
  if (from.has_wifiname()) {
    wifiname_ = new ::micromsg::SKBuiltinString_t(*from.wifiname_);
  } else {
    wifiname_ = NULL;
  }
  ::memcpy(&testid_, &from.testid_,
    reinterpret_cast<char*>(&resultcnt_) -
    reinterpret_cast<char*>(&testid_) + sizeof(resultcnt_));
  // @@protoc_insertion_point(copy_constructor:micromsg.VoipSpeedResultReq)
}

void VoipSpeedResultReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&resultcnt_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(resultcnt_));
}

VoipSpeedResultReq::~VoipSpeedResultReq() {
  // @@protoc_insertion_point(destructor:micromsg.VoipSpeedResultReq)
  SharedDtor();
}

void VoipSpeedResultReq::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete netname_;
  }
  if (this != internal_default_instance()) {
    delete wifiname_;
  }
}

void VoipSpeedResultReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoipSpeedResultReq::descriptor() {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoipSpeedResultReq& VoipSpeedResultReq::default_instance() {
  protobuf_mmvoip_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoipSpeedResultReq* VoipSpeedResultReq::New(::google::protobuf::Arena* arena) const {
  VoipSpeedResultReq* n = new VoipSpeedResultReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoipSpeedResultReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VoipSpeedResultReq)
  result_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_netname()) {
      GOOGLE_DCHECK(netname_ != NULL);
      netname_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_wifiname()) {
      GOOGLE_DCHECK(wifiname_ != NULL);
      wifiname_->::micromsg::SKBuiltinString_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&testid_, 0, reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&testid_) + sizeof(longitude_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&latitude_, 0, reinterpret_cast<char*>(&resultcnt_) -
      reinterpret_cast<char*>(&latitude_) + sizeof(resultcnt_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoipSpeedResultReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VoipSpeedResultReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 TestId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_testid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &testid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 RoomKey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_roomkey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomkey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 NetType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_nettype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nettype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t NetName = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_netname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t WifiName = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wifiname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double Longitude = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double Latitude = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 RoomId = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_roomid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ResultCnt = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_resultcnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resultcnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.SpeedResult Result = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VoipSpeedResultReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VoipSpeedResultReq)
  return false;
#undef DO_
}

void VoipSpeedResultReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VoipSpeedResultReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint64 TestId = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->testid(), output);
  }

  // required uint64 RoomKey = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->roomkey(), output);
  }

  // required uint32 NetType = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->nettype(), output);
  }

  // required .micromsg.SKBuiltinString_t NetName = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->netname_, output);
  }

  // required .micromsg.SKBuiltinString_t WifiName = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->wifiname_, output);
  }

  // required double Longitude = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->longitude(), output);
  }

  // required double Latitude = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->latitude(), output);
  }

  // required uint32 RoomId = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->roomid(), output);
  }

  // required uint32 ResultCnt = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->resultcnt(), output);
  }

  // repeated .micromsg.SpeedResult Result = 11;
  for (unsigned int i = 0, n = this->result_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->result(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VoipSpeedResultReq)
}

::google::protobuf::uint8* VoipSpeedResultReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VoipSpeedResultReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint64 TestId = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->testid(), target);
  }

  // required uint64 RoomKey = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->roomkey(), target);
  }

  // required uint32 NetType = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->nettype(), target);
  }

  // required .micromsg.SKBuiltinString_t NetName = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->netname_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t WifiName = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->wifiname_, deterministic, target);
  }

  // required double Longitude = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->longitude(), target);
  }

  // required double Latitude = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->latitude(), target);
  }

  // required uint32 RoomId = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->roomid(), target);
  }

  // required uint32 ResultCnt = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->resultcnt(), target);
  }

  // repeated .micromsg.SpeedResult Result = 11;
  for (unsigned int i = 0, n = this->result_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->result(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VoipSpeedResultReq)
  return target;
}

size_t VoipSpeedResultReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.VoipSpeedResultReq)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_netname()) {
    // required .micromsg.SKBuiltinString_t NetName = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->netname_);
  }

  if (has_wifiname()) {
    // required .micromsg.SKBuiltinString_t WifiName = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->wifiname_);
  }

  if (has_testid()) {
    // required uint64 TestId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->testid());
  }

  if (has_roomkey()) {
    // required uint64 RoomKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->roomkey());
  }

  if (has_nettype()) {
    // required uint32 NetType = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nettype());
  }

  if (has_roomid()) {
    // required uint32 RoomId = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->roomid());
  }

  if (has_longitude()) {
    // required double Longitude = 7;
    total_size += 1 + 8;
  }

  if (has_latitude()) {
    // required double Latitude = 8;
    total_size += 1 + 8;
  }

  if (has_resultcnt()) {
    // required uint32 ResultCnt = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->resultcnt());
  }

  return total_size;
}
size_t VoipSpeedResultReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VoipSpeedResultReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000003ff) ^ 0x000003ff) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.SKBuiltinString_t NetName = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->netname_);

    // required .micromsg.SKBuiltinString_t WifiName = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->wifiname_);

    // required uint64 TestId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->testid());

    // required uint64 RoomKey = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->roomkey());

    // required uint32 NetType = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nettype());

    // required uint32 RoomId = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->roomid());

    // required double Longitude = 7;
    total_size += 1 + 8;

    // required double Latitude = 8;
    total_size += 1 + 8;

    // required uint32 ResultCnt = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->resultcnt());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.SpeedResult Result = 11;
  {
    unsigned int count = this->result_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoipSpeedResultReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VoipSpeedResultReq)
  GOOGLE_DCHECK_NE(&from, this);
  const VoipSpeedResultReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoipSpeedResultReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VoipSpeedResultReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VoipSpeedResultReq)
    MergeFrom(*source);
  }
}

void VoipSpeedResultReq::MergeFrom(const VoipSpeedResultReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VoipSpeedResultReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  result_.MergeFrom(from.result_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_netname()->::micromsg::SKBuiltinString_t::MergeFrom(from.netname());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_wifiname()->::micromsg::SKBuiltinString_t::MergeFrom(from.wifiname());
    }
    if (cached_has_bits & 0x00000008u) {
      testid_ = from.testid_;
    }
    if (cached_has_bits & 0x00000010u) {
      roomkey_ = from.roomkey_;
    }
    if (cached_has_bits & 0x00000020u) {
      nettype_ = from.nettype_;
    }
    if (cached_has_bits & 0x00000040u) {
      roomid_ = from.roomid_;
    }
    if (cached_has_bits & 0x00000080u) {
      longitude_ = from.longitude_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000200u) {
      resultcnt_ = from.resultcnt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VoipSpeedResultReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VoipSpeedResultReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoipSpeedResultReq::CopyFrom(const VoipSpeedResultReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VoipSpeedResultReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoipSpeedResultReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->result())) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void VoipSpeedResultReq::Swap(VoipSpeedResultReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoipSpeedResultReq::InternalSwap(VoipSpeedResultReq* other) {
  result_.InternalSwap(&other->result_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(netname_, other->netname_);
  std::swap(wifiname_, other->wifiname_);
  std::swap(testid_, other->testid_);
  std::swap(roomkey_, other->roomkey_);
  std::swap(nettype_, other->nettype_);
  std::swap(roomid_, other->roomid_);
  std::swap(longitude_, other->longitude_);
  std::swap(latitude_, other->latitude_);
  std::swap(resultcnt_, other->resultcnt_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoipSpeedResultReq::GetMetadata() const {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoipSpeedResultReq

// required .micromsg.BaseRequest BaseRequest = 1;
bool VoipSpeedResultReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoipSpeedResultReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void VoipSpeedResultReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoipSpeedResultReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& VoipSpeedResultReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedResultReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* VoipSpeedResultReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipSpeedResultReq.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* VoipSpeedResultReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.VoipSpeedResultReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void VoipSpeedResultReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipSpeedResultReq.BaseRequest)
}

// required uint64 TestId = 2;
bool VoipSpeedResultReq::has_testid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VoipSpeedResultReq::set_has_testid() {
  _has_bits_[0] |= 0x00000008u;
}
void VoipSpeedResultReq::clear_has_testid() {
  _has_bits_[0] &= ~0x00000008u;
}
void VoipSpeedResultReq::clear_testid() {
  testid_ = GOOGLE_ULONGLONG(0);
  clear_has_testid();
}
::google::protobuf::uint64 VoipSpeedResultReq::testid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedResultReq.TestId)
  return testid_;
}
void VoipSpeedResultReq::set_testid(::google::protobuf::uint64 value) {
  set_has_testid();
  testid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSpeedResultReq.TestId)
}

// required uint64 RoomKey = 3;
bool VoipSpeedResultReq::has_roomkey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VoipSpeedResultReq::set_has_roomkey() {
  _has_bits_[0] |= 0x00000010u;
}
void VoipSpeedResultReq::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000010u;
}
void VoipSpeedResultReq::clear_roomkey() {
  roomkey_ = GOOGLE_ULONGLONG(0);
  clear_has_roomkey();
}
::google::protobuf::uint64 VoipSpeedResultReq::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedResultReq.RoomKey)
  return roomkey_;
}
void VoipSpeedResultReq::set_roomkey(::google::protobuf::uint64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSpeedResultReq.RoomKey)
}

// required uint32 NetType = 4;
bool VoipSpeedResultReq::has_nettype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VoipSpeedResultReq::set_has_nettype() {
  _has_bits_[0] |= 0x00000020u;
}
void VoipSpeedResultReq::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000020u;
}
void VoipSpeedResultReq::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
::google::protobuf::uint32 VoipSpeedResultReq::nettype() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedResultReq.NetType)
  return nettype_;
}
void VoipSpeedResultReq::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSpeedResultReq.NetType)
}

// required .micromsg.SKBuiltinString_t NetName = 5;
bool VoipSpeedResultReq::has_netname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VoipSpeedResultReq::set_has_netname() {
  _has_bits_[0] |= 0x00000002u;
}
void VoipSpeedResultReq::clear_has_netname() {
  _has_bits_[0] &= ~0x00000002u;
}
void VoipSpeedResultReq::clear_netname() {
  if (netname_ != NULL) netname_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_netname();
}
const ::micromsg::SKBuiltinString_t& VoipSpeedResultReq::netname() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedResultReq.NetName)
  return netname_ != NULL ? *netname_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* VoipSpeedResultReq::mutable_netname() {
  set_has_netname();
  if (netname_ == NULL) {
    netname_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipSpeedResultReq.NetName)
  return netname_;
}
::micromsg::SKBuiltinString_t* VoipSpeedResultReq::release_netname() {
  // @@protoc_insertion_point(field_release:micromsg.VoipSpeedResultReq.NetName)
  clear_has_netname();
  ::micromsg::SKBuiltinString_t* temp = netname_;
  netname_ = NULL;
  return temp;
}
void VoipSpeedResultReq::set_allocated_netname(::micromsg::SKBuiltinString_t* netname) {
  delete netname_;
  netname_ = netname;
  if (netname) {
    set_has_netname();
  } else {
    clear_has_netname();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipSpeedResultReq.NetName)
}

// required .micromsg.SKBuiltinString_t WifiName = 6;
bool VoipSpeedResultReq::has_wifiname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VoipSpeedResultReq::set_has_wifiname() {
  _has_bits_[0] |= 0x00000004u;
}
void VoipSpeedResultReq::clear_has_wifiname() {
  _has_bits_[0] &= ~0x00000004u;
}
void VoipSpeedResultReq::clear_wifiname() {
  if (wifiname_ != NULL) wifiname_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_wifiname();
}
const ::micromsg::SKBuiltinString_t& VoipSpeedResultReq::wifiname() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedResultReq.WifiName)
  return wifiname_ != NULL ? *wifiname_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* VoipSpeedResultReq::mutable_wifiname() {
  set_has_wifiname();
  if (wifiname_ == NULL) {
    wifiname_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipSpeedResultReq.WifiName)
  return wifiname_;
}
::micromsg::SKBuiltinString_t* VoipSpeedResultReq::release_wifiname() {
  // @@protoc_insertion_point(field_release:micromsg.VoipSpeedResultReq.WifiName)
  clear_has_wifiname();
  ::micromsg::SKBuiltinString_t* temp = wifiname_;
  wifiname_ = NULL;
  return temp;
}
void VoipSpeedResultReq::set_allocated_wifiname(::micromsg::SKBuiltinString_t* wifiname) {
  delete wifiname_;
  wifiname_ = wifiname;
  if (wifiname) {
    set_has_wifiname();
  } else {
    clear_has_wifiname();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipSpeedResultReq.WifiName)
}

// required double Longitude = 7;
bool VoipSpeedResultReq::has_longitude() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VoipSpeedResultReq::set_has_longitude() {
  _has_bits_[0] |= 0x00000080u;
}
void VoipSpeedResultReq::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000080u;
}
void VoipSpeedResultReq::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
double VoipSpeedResultReq::longitude() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedResultReq.Longitude)
  return longitude_;
}
void VoipSpeedResultReq::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSpeedResultReq.Longitude)
}

// required double Latitude = 8;
bool VoipSpeedResultReq::has_latitude() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void VoipSpeedResultReq::set_has_latitude() {
  _has_bits_[0] |= 0x00000100u;
}
void VoipSpeedResultReq::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000100u;
}
void VoipSpeedResultReq::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
double VoipSpeedResultReq::latitude() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedResultReq.Latitude)
  return latitude_;
}
void VoipSpeedResultReq::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSpeedResultReq.Latitude)
}

// required uint32 RoomId = 9;
bool VoipSpeedResultReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VoipSpeedResultReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000040u;
}
void VoipSpeedResultReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000040u;
}
void VoipSpeedResultReq::clear_roomid() {
  roomid_ = 0u;
  clear_has_roomid();
}
::google::protobuf::uint32 VoipSpeedResultReq::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedResultReq.RoomId)
  return roomid_;
}
void VoipSpeedResultReq::set_roomid(::google::protobuf::uint32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSpeedResultReq.RoomId)
}

// required uint32 ResultCnt = 10;
bool VoipSpeedResultReq::has_resultcnt() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void VoipSpeedResultReq::set_has_resultcnt() {
  _has_bits_[0] |= 0x00000200u;
}
void VoipSpeedResultReq::clear_has_resultcnt() {
  _has_bits_[0] &= ~0x00000200u;
}
void VoipSpeedResultReq::clear_resultcnt() {
  resultcnt_ = 0u;
  clear_has_resultcnt();
}
::google::protobuf::uint32 VoipSpeedResultReq::resultcnt() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedResultReq.ResultCnt)
  return resultcnt_;
}
void VoipSpeedResultReq::set_resultcnt(::google::protobuf::uint32 value) {
  set_has_resultcnt();
  resultcnt_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSpeedResultReq.ResultCnt)
}

// repeated .micromsg.SpeedResult Result = 11;
int VoipSpeedResultReq::result_size() const {
  return result_.size();
}
void VoipSpeedResultReq::clear_result() {
  result_.Clear();
}
const ::micromsg::SpeedResult& VoipSpeedResultReq::result(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedResultReq.Result)
  return result_.Get(index);
}
::micromsg::SpeedResult* VoipSpeedResultReq::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.VoipSpeedResultReq.Result)
  return result_.Mutable(index);
}
::micromsg::SpeedResult* VoipSpeedResultReq::add_result() {
  // @@protoc_insertion_point(field_add:micromsg.VoipSpeedResultReq.Result)
  return result_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::SpeedResult >*
VoipSpeedResultReq::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.VoipSpeedResultReq.Result)
  return &result_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::SpeedResult >&
VoipSpeedResultReq::result() const {
  // @@protoc_insertion_point(field_list:micromsg.VoipSpeedResultReq.Result)
  return result_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoipSpeedResultRsp::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoipSpeedResultRsp::VoipSpeedResultRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VoipSpeedResultRsp)
}
VoipSpeedResultRsp::VoipSpeedResultRsp(const VoipSpeedResultRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.VoipSpeedResultRsp)
}

void VoipSpeedResultRsp::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

VoipSpeedResultRsp::~VoipSpeedResultRsp() {
  // @@protoc_insertion_point(destructor:micromsg.VoipSpeedResultRsp)
  SharedDtor();
}

void VoipSpeedResultRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void VoipSpeedResultRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoipSpeedResultRsp::descriptor() {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoipSpeedResultRsp& VoipSpeedResultRsp::default_instance() {
  protobuf_mmvoip_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoipSpeedResultRsp* VoipSpeedResultRsp::New(::google::protobuf::Arena* arena) const {
  VoipSpeedResultRsp* n = new VoipSpeedResultRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoipSpeedResultRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VoipSpeedResultRsp)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoipSpeedResultRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VoipSpeedResultRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VoipSpeedResultRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VoipSpeedResultRsp)
  return false;
#undef DO_
}

void VoipSpeedResultRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VoipSpeedResultRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VoipSpeedResultRsp)
}

::google::protobuf::uint8* VoipSpeedResultRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VoipSpeedResultRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VoipSpeedResultRsp)
  return target;
}

size_t VoipSpeedResultRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VoipSpeedResultRsp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoipSpeedResultRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VoipSpeedResultRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const VoipSpeedResultRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoipSpeedResultRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VoipSpeedResultRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VoipSpeedResultRsp)
    MergeFrom(*source);
  }
}

void VoipSpeedResultRsp::MergeFrom(const VoipSpeedResultRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VoipSpeedResultRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void VoipSpeedResultRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VoipSpeedResultRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoipSpeedResultRsp::CopyFrom(const VoipSpeedResultRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VoipSpeedResultRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoipSpeedResultRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void VoipSpeedResultRsp::Swap(VoipSpeedResultRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoipSpeedResultRsp::InternalSwap(VoipSpeedResultRsp* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoipSpeedResultRsp::GetMetadata() const {
  protobuf_mmvoip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoipSpeedResultRsp

// required .micromsg.BaseResponse BaseResponse = 1;
bool VoipSpeedResultRsp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoipSpeedResultRsp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void VoipSpeedResultRsp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoipSpeedResultRsp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& VoipSpeedResultRsp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedResultRsp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* VoipSpeedResultRsp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipSpeedResultRsp.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* VoipSpeedResultRsp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.VoipSpeedResultRsp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void VoipSpeedResultRsp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipSpeedResultRsp.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace micromsg

// @@protoc_insertion_point(global_scope)
