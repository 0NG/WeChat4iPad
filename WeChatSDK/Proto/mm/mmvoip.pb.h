// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmvoip.proto

#ifndef PROTOBUF_mmvoip_2eproto__INCLUDED
#define PROTOBUF_mmvoip_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "mmbuiltintype.pb.h"
#include "mmbase.pb.h"
// @@protoc_insertion_point(includes)
namespace micromsg {
class AdditionalContactList;
class AdditionalContactListDefaultTypeInternal;
extern AdditionalContactListDefaultTypeInternal _AdditionalContactList_default_instance_;
class BaseRequest;
class BaseRequestDefaultTypeInternal;
extern BaseRequestDefaultTypeInternal _BaseRequest_default_instance_;
class BaseResponse;
class BaseResponseDefaultTypeInternal;
extern BaseResponseDefaultTypeInternal _BaseResponse_default_instance_;
class BindEmailRequest;
class BindEmailRequestDefaultTypeInternal;
extern BindEmailRequestDefaultTypeInternal _BindEmailRequest_default_instance_;
class BindEmailResponse;
class BindEmailResponseDefaultTypeInternal;
extern BindEmailResponseDefaultTypeInternal _BindEmailResponse_default_instance_;
class BuiltinIP;
class BuiltinIPDefaultTypeInternal;
extern BuiltinIPDefaultTypeInternal _BuiltinIP_default_instance_;
class BuiltinIPList;
class BuiltinIPListDefaultTypeInternal;
extern BuiltinIPListDefaultTypeInternal _BuiltinIPList_default_instance_;
class CDNDnsInfo;
class CDNDnsInfoDefaultTypeInternal;
extern CDNDnsInfoDefaultTypeInternal _CDNDnsInfo_default_instance_;
class ChatRoomMemberData;
class ChatRoomMemberDataDefaultTypeInternal;
extern ChatRoomMemberDataDefaultTypeInternal _ChatRoomMemberData_default_instance_;
class ChatRoomMemberInfo;
class ChatRoomMemberInfoDefaultTypeInternal;
extern ChatRoomMemberInfoDefaultTypeInternal _ChatRoomMemberInfo_default_instance_;
class CmdItem;
class CmdItemDefaultTypeInternal;
extern CmdItemDefaultTypeInternal _CmdItem_default_instance_;
class CmdList;
class CmdListDefaultTypeInternal;
extern CmdListDefaultTypeInternal _CmdList_default_instance_;
class CustomizedInfo;
class CustomizedInfoDefaultTypeInternal;
extern CustomizedInfoDefaultTypeInternal _CustomizedInfo_default_instance_;
class DelMemberReq;
class DelMemberReqDefaultTypeInternal;
extern DelMemberReqDefaultTypeInternal _DelMemberReq_default_instance_;
class DelMemberResp;
class DelMemberRespDefaultTypeInternal;
extern DelMemberRespDefaultTypeInternal _DelMemberResp_default_instance_;
class DisturbSetting;
class DisturbSettingDefaultTypeInternal;
extern DisturbSettingDefaultTypeInternal _DisturbSetting_default_instance_;
class DisturbTimeSpan;
class DisturbTimeSpanDefaultTypeInternal;
extern DisturbTimeSpanDefaultTypeInternal _DisturbTimeSpan_default_instance_;
class GetLocationRequest;
class GetLocationRequestDefaultTypeInternal;
extern GetLocationRequestDefaultTypeInternal _GetLocationRequest_default_instance_;
class GetLocationResponse;
class GetLocationResponseDefaultTypeInternal;
extern GetLocationResponseDefaultTypeInternal _GetLocationResponse_default_instance_;
class GmailInfo;
class GmailInfoDefaultTypeInternal;
extern GmailInfoDefaultTypeInternal _GmailInfo_default_instance_;
class GmailList;
class GmailListDefaultTypeInternal;
extern GmailListDefaultTypeInternal _GmailList_default_instance_;
class HardDevice;
class HardDeviceDefaultTypeInternal;
extern HardDeviceDefaultTypeInternal _HardDevice_default_instance_;
class Host;
class HostDefaultTypeInternal;
extern HostDefaultTypeInternal _Host_default_instance_;
class HostList;
class HostListDefaultTypeInternal;
extern HostListDefaultTypeInternal _HostList_default_instance_;
class LinkedinContactItem;
class LinkedinContactItemDefaultTypeInternal;
extern LinkedinContactItemDefaultTypeInternal _LinkedinContactItem_default_instance_;
class MemberReq;
class MemberReqDefaultTypeInternal;
extern MemberReqDefaultTypeInternal _MemberReq_default_instance_;
class MemberResp;
class MemberRespDefaultTypeInternal;
extern MemberRespDefaultTypeInternal _MemberResp_default_instance_;
class ModContact;
class ModContactDefaultTypeInternal;
extern ModContactDefaultTypeInternal _ModContact_default_instance_;
class ModUserInfo;
class ModUserInfoDefaultTypeInternal;
extern ModUserInfoDefaultTypeInternal _ModUserInfo_default_instance_;
class NetworkControl;
class NetworkControlDefaultTypeInternal;
extern NetworkControlDefaultTypeInternal _NetworkControl_default_instance_;
class PatternLockInfo;
class PatternLockInfoDefaultTypeInternal;
extern PatternLockInfoDefaultTypeInternal _PatternLockInfo_default_instance_;
class PluginKey;
class PluginKeyDefaultTypeInternal;
extern PluginKeyDefaultTypeInternal _PluginKey_default_instance_;
class PluginKeyList;
class PluginKeyListDefaultTypeInternal;
extern PluginKeyListDefaultTypeInternal _PluginKeyList_default_instance_;
class PositionInfo;
class PositionInfoDefaultTypeInternal;
extern PositionInfoDefaultTypeInternal _PositionInfo_default_instance_;
class RoomInfo;
class RoomInfoDefaultTypeInternal;
extern RoomInfoDefaultTypeInternal _RoomInfo_default_instance_;
class SKBuiltinBuffer_t;
class SKBuiltinBuffer_tDefaultTypeInternal;
extern SKBuiltinBuffer_tDefaultTypeInternal _SKBuiltinBuffer_t_default_instance_;
class SKBuiltinChar_t;
class SKBuiltinChar_tDefaultTypeInternal;
extern SKBuiltinChar_tDefaultTypeInternal _SKBuiltinChar_t_default_instance_;
class SKBuiltinDouble64_t;
class SKBuiltinDouble64_tDefaultTypeInternal;
extern SKBuiltinDouble64_tDefaultTypeInternal _SKBuiltinDouble64_t_default_instance_;
class SKBuiltinFloat32_t;
class SKBuiltinFloat32_tDefaultTypeInternal;
extern SKBuiltinFloat32_tDefaultTypeInternal _SKBuiltinFloat32_t_default_instance_;
class SKBuiltinInt16_t;
class SKBuiltinInt16_tDefaultTypeInternal;
extern SKBuiltinInt16_tDefaultTypeInternal _SKBuiltinInt16_t_default_instance_;
class SKBuiltinInt32_t;
class SKBuiltinInt32_tDefaultTypeInternal;
extern SKBuiltinInt32_tDefaultTypeInternal _SKBuiltinInt32_t_default_instance_;
class SKBuiltinInt64_t;
class SKBuiltinInt64_tDefaultTypeInternal;
extern SKBuiltinInt64_tDefaultTypeInternal _SKBuiltinInt64_t_default_instance_;
class SKBuiltinInt8_t;
class SKBuiltinInt8_tDefaultTypeInternal;
extern SKBuiltinInt8_tDefaultTypeInternal _SKBuiltinInt8_t_default_instance_;
class SKBuiltinString_t;
class SKBuiltinString_tDefaultTypeInternal;
extern SKBuiltinString_tDefaultTypeInternal _SKBuiltinString_t_default_instance_;
class SKBuiltinUchar_t;
class SKBuiltinUchar_tDefaultTypeInternal;
extern SKBuiltinUchar_tDefaultTypeInternal _SKBuiltinUchar_t_default_instance_;
class SKBuiltinUint16_t;
class SKBuiltinUint16_tDefaultTypeInternal;
extern SKBuiltinUint16_tDefaultTypeInternal _SKBuiltinUint16_t_default_instance_;
class SKBuiltinUint32_t;
class SKBuiltinUint32_tDefaultTypeInternal;
extern SKBuiltinUint32_tDefaultTypeInternal _SKBuiltinUint32_t_default_instance_;
class SKBuiltinUint64_t;
class SKBuiltinUint64_tDefaultTypeInternal;
extern SKBuiltinUint64_tDefaultTypeInternal _SKBuiltinUint64_t_default_instance_;
class SKBuiltinUint8_t;
class SKBuiltinUint8_tDefaultTypeInternal;
extern SKBuiltinUint8_tDefaultTypeInternal _SKBuiltinUint8_t_default_instance_;
class SafeDevice;
class SafeDeviceDefaultTypeInternal;
extern SafeDeviceDefaultTypeInternal _SafeDevice_default_instance_;
class SafeDeviceList;
class SafeDeviceListDefaultTypeInternal;
extern SafeDeviceListDefaultTypeInternal _SafeDeviceList_default_instance_;
class ShakeSyncRequest;
class ShakeSyncRequestDefaultTypeInternal;
extern ShakeSyncRequestDefaultTypeInternal _ShakeSyncRequest_default_instance_;
class ShakeSyncResponse;
class ShakeSyncResponseDefaultTypeInternal;
extern ShakeSyncResponseDefaultTypeInternal _ShakeSyncResponse_default_instance_;
class ShowStyleKey;
class ShowStyleKeyDefaultTypeInternal;
extern ShowStyleKeyDefaultTypeInternal _ShowStyleKey_default_instance_;
class SnsUserInfo;
class SnsUserInfoDefaultTypeInternal;
extern SnsUserInfoDefaultTypeInternal _SnsUserInfo_default_instance_;
class SpeedResult;
class SpeedResultDefaultTypeInternal;
extern SpeedResultDefaultTypeInternal _SpeedResult_default_instance_;
class SpeedTestSvr;
class SpeedTestSvrDefaultTypeInternal;
extern SpeedTestSvrDefaultTypeInternal _SpeedTestSvr_default_instance_;
class StyleKeyVal;
class StyleKeyValDefaultTypeInternal;
extern StyleKeyValDefaultTypeInternal _StyleKeyVal_default_instance_;
class UserInfoExt;
class UserInfoExtDefaultTypeInternal;
extern UserInfoExtDefaultTypeInternal _UserInfoExt_default_instance_;
class VoipAckReq;
class VoipAckReqDefaultTypeInternal;
extern VoipAckReqDefaultTypeInternal _VoipAckReq_default_instance_;
class VoipAckResp;
class VoipAckRespDefaultTypeInternal;
extern VoipAckRespDefaultTypeInternal _VoipAckResp_default_instance_;
class VoipAddr;
class VoipAddrDefaultTypeInternal;
extern VoipAddrDefaultTypeInternal _VoipAddr_default_instance_;
class VoipAddrSet;
class VoipAddrSetDefaultTypeInternal;
extern VoipAddrSetDefaultTypeInternal _VoipAddrSet_default_instance_;
class VoipAnswerReq;
class VoipAnswerReqDefaultTypeInternal;
extern VoipAnswerReqDefaultTypeInternal _VoipAnswerReq_default_instance_;
class VoipAnswerResp;
class VoipAnswerRespDefaultTypeInternal;
extern VoipAnswerRespDefaultTypeInternal _VoipAnswerResp_default_instance_;
class VoipCancelInviteReq;
class VoipCancelInviteReqDefaultTypeInternal;
extern VoipCancelInviteReqDefaultTypeInternal _VoipCancelInviteReq_default_instance_;
class VoipCancelInviteResp;
class VoipCancelInviteRespDefaultTypeInternal;
extern VoipCancelInviteRespDefaultTypeInternal _VoipCancelInviteResp_default_instance_;
class VoipCmdItem;
class VoipCmdItemDefaultTypeInternal;
extern VoipCmdItemDefaultTypeInternal _VoipCmdItem_default_instance_;
class VoipCmdList;
class VoipCmdListDefaultTypeInternal;
extern VoipCmdListDefaultTypeInternal _VoipCmdList_default_instance_;
class VoipCompleteStatus;
class VoipCompleteStatusDefaultTypeInternal;
extern VoipCompleteStatusDefaultTypeInternal _VoipCompleteStatus_default_instance_;
class VoipCompleteStatusList;
class VoipCompleteStatusListDefaultTypeInternal;
extern VoipCompleteStatusListDefaultTypeInternal _VoipCompleteStatusList_default_instance_;
class VoipDoubleLinkSwitchReq;
class VoipDoubleLinkSwitchReqDefaultTypeInternal;
extern VoipDoubleLinkSwitchReqDefaultTypeInternal _VoipDoubleLinkSwitchReq_default_instance_;
class VoipDoubleLinkSwitchRsp;
class VoipDoubleLinkSwitchRspDefaultTypeInternal;
extern VoipDoubleLinkSwitchRspDefaultTypeInternal _VoipDoubleLinkSwitchRsp_default_instance_;
class VoipGetRoomInfoReq;
class VoipGetRoomInfoReqDefaultTypeInternal;
extern VoipGetRoomInfoReqDefaultTypeInternal _VoipGetRoomInfoReq_default_instance_;
class VoipGetRoomInfoResp;
class VoipGetRoomInfoRespDefaultTypeInternal;
extern VoipGetRoomInfoRespDefaultTypeInternal _VoipGetRoomInfoResp_default_instance_;
class VoipHeartBeatReq;
class VoipHeartBeatReqDefaultTypeInternal;
extern VoipHeartBeatReqDefaultTypeInternal _VoipHeartBeatReq_default_instance_;
class VoipHeartBeatResp;
class VoipHeartBeatRespDefaultTypeInternal;
extern VoipHeartBeatRespDefaultTypeInternal _VoipHeartBeatResp_default_instance_;
class VoipInviteRemindReq;
class VoipInviteRemindReqDefaultTypeInternal;
extern VoipInviteRemindReqDefaultTypeInternal _VoipInviteRemindReq_default_instance_;
class VoipInviteRemindResp;
class VoipInviteRemindRespDefaultTypeInternal;
extern VoipInviteRemindRespDefaultTypeInternal _VoipInviteRemindResp_default_instance_;
class VoipInviteReq;
class VoipInviteReqDefaultTypeInternal;
extern VoipInviteReqDefaultTypeInternal _VoipInviteReq_default_instance_;
class VoipInviteResp;
class VoipInviteRespDefaultTypeInternal;
extern VoipInviteRespDefaultTypeInternal _VoipInviteResp_default_instance_;
class VoipMultiRelayData;
class VoipMultiRelayDataDefaultTypeInternal;
extern VoipMultiRelayDataDefaultTypeInternal _VoipMultiRelayData_default_instance_;
class VoipNetQuality;
class VoipNetQualityDefaultTypeInternal;
extern VoipNetQualityDefaultTypeInternal _VoipNetQuality_default_instance_;
class VoipRedirectReq;
class VoipRedirectReqDefaultTypeInternal;
extern VoipRedirectReqDefaultTypeInternal _VoipRedirectReq_default_instance_;
class VoipRedirectResp;
class VoipRedirectRespDefaultTypeInternal;
extern VoipRedirectRespDefaultTypeInternal _VoipRedirectResp_default_instance_;
class VoipRelayData;
class VoipRelayDataDefaultTypeInternal;
extern VoipRelayDataDefaultTypeInternal _VoipRelayData_default_instance_;
class VoipShutDownReq;
class VoipShutDownReqDefaultTypeInternal;
extern VoipShutDownReqDefaultTypeInternal _VoipShutDownReq_default_instance_;
class VoipShutDownResp;
class VoipShutDownRespDefaultTypeInternal;
extern VoipShutDownRespDefaultTypeInternal _VoipShutDownResp_default_instance_;
class VoipSpeedResultReq;
class VoipSpeedResultReqDefaultTypeInternal;
extern VoipSpeedResultReqDefaultTypeInternal _VoipSpeedResultReq_default_instance_;
class VoipSpeedResultRsp;
class VoipSpeedResultRspDefaultTypeInternal;
extern VoipSpeedResultRspDefaultTypeInternal _VoipSpeedResultRsp_default_instance_;
class VoipSpeedTestReq;
class VoipSpeedTestReqDefaultTypeInternal;
extern VoipSpeedTestReqDefaultTypeInternal _VoipSpeedTestReq_default_instance_;
class VoipSpeedTestRsp;
class VoipSpeedTestRspDefaultTypeInternal;
extern VoipSpeedTestRspDefaultTypeInternal _VoipSpeedTestRsp_default_instance_;
class VoipStatReportData;
class VoipStatReportDataDefaultTypeInternal;
extern VoipStatReportDataDefaultTypeInternal _VoipStatReportData_default_instance_;
class VoipStatReportReq;
class VoipStatReportReqDefaultTypeInternal;
extern VoipStatReportReqDefaultTypeInternal _VoipStatReportReq_default_instance_;
class VoipStatReportResp;
class VoipStatReportRespDefaultTypeInternal;
extern VoipStatReportRespDefaultTypeInternal _VoipStatReportResp_default_instance_;
class VoipStatusItem;
class VoipStatusItemDefaultTypeInternal;
extern VoipStatusItemDefaultTypeInternal _VoipStatusItem_default_instance_;
class VoipSyncReq;
class VoipSyncReqDefaultTypeInternal;
extern VoipSyncReqDefaultTypeInternal _VoipSyncReq_default_instance_;
class VoipSyncResp;
class VoipSyncRespDefaultTypeInternal;
extern VoipSyncRespDefaultTypeInternal _VoipSyncResp_default_instance_;
}  // namespace micromsg

namespace micromsg {

namespace protobuf_mmvoip_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_mmvoip_2eproto

// ===================================================================

class VoipRelayData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.VoipRelayData) */ {
 public:
  VoipRelayData();
  virtual ~VoipRelayData();

  VoipRelayData(const VoipRelayData& from);

  inline VoipRelayData& operator=(const VoipRelayData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoipRelayData& default_instance();

  static inline const VoipRelayData* internal_default_instance() {
    return reinterpret_cast<const VoipRelayData*>(
               &_VoipRelayData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(VoipRelayData* other);

  // implements Message ----------------------------------------------

  inline VoipRelayData* New() const PROTOBUF_FINAL { return New(NULL); }

  VoipRelayData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoipRelayData& from);
  void MergeFrom(const VoipRelayData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoipRelayData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.SKBuiltinBuffer_t Buffer = 2;
  bool has_buffer() const;
  void clear_buffer();
  static const int kBufferFieldNumber = 2;
  const ::micromsg::SKBuiltinBuffer_t& buffer() const;
  ::micromsg::SKBuiltinBuffer_t* mutable_buffer();
  ::micromsg::SKBuiltinBuffer_t* release_buffer();
  void set_allocated_buffer(::micromsg::SKBuiltinBuffer_t* buffer);

  // required int32 Type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.VoipRelayData)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_buffer();
  void clear_has_buffer();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::SKBuiltinBuffer_t* buffer_;
  ::google::protobuf::int32 type_;
  friend struct protobuf_mmvoip_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoipAddr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.VoipAddr) */ {
 public:
  VoipAddr();
  virtual ~VoipAddr();

  VoipAddr(const VoipAddr& from);

  inline VoipAddr& operator=(const VoipAddr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoipAddr& default_instance();

  static inline const VoipAddr* internal_default_instance() {
    return reinterpret_cast<const VoipAddr*>(
               &_VoipAddr_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(VoipAddr* other);

  // implements Message ----------------------------------------------

  inline VoipAddr* New() const PROTOBUF_FINAL { return New(NULL); }

  VoipAddr* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoipAddr& from);
  void MergeFrom(const VoipAddr& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoipAddr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 Ip = 1;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  ::google::protobuf::int32 ip() const;
  void set_ip(::google::protobuf::int32 value);

  // required int32 Port = 2;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.VoipAddr)
 private:
  void set_has_ip();
  void clear_has_ip();
  void set_has_port();
  void clear_has_port();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 ip_;
  ::google::protobuf::int32 port_;
  friend struct protobuf_mmvoip_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoipAddrSet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.VoipAddrSet) */ {
 public:
  VoipAddrSet();
  virtual ~VoipAddrSet();

  VoipAddrSet(const VoipAddrSet& from);

  inline VoipAddrSet& operator=(const VoipAddrSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoipAddrSet& default_instance();

  static inline const VoipAddrSet* internal_default_instance() {
    return reinterpret_cast<const VoipAddrSet*>(
               &_VoipAddrSet_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(VoipAddrSet* other);

  // implements Message ----------------------------------------------

  inline VoipAddrSet* New() const PROTOBUF_FINAL { return New(NULL); }

  VoipAddrSet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoipAddrSet& from);
  void MergeFrom(const VoipAddrSet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoipAddrSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.VoipAddr Addrs = 2;
  int addrs_size() const;
  void clear_addrs();
  static const int kAddrsFieldNumber = 2;
  const ::micromsg::VoipAddr& addrs(int index) const;
  ::micromsg::VoipAddr* mutable_addrs(int index);
  ::micromsg::VoipAddr* add_addrs();
  ::google::protobuf::RepeatedPtrField< ::micromsg::VoipAddr >*
      mutable_addrs();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::VoipAddr >&
      addrs() const;

  // required int32 Cnt = 1;
  bool has_cnt() const;
  void clear_cnt();
  static const int kCntFieldNumber = 1;
  ::google::protobuf::int32 cnt() const;
  void set_cnt(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.VoipAddrSet)
 private:
  void set_has_cnt();
  void clear_has_cnt();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::VoipAddr > addrs_;
  ::google::protobuf::int32 cnt_;
  friend struct protobuf_mmvoip_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoipMultiRelayData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.VoipMultiRelayData) */ {
 public:
  VoipMultiRelayData();
  virtual ~VoipMultiRelayData();

  VoipMultiRelayData(const VoipMultiRelayData& from);

  inline VoipMultiRelayData& operator=(const VoipMultiRelayData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoipMultiRelayData& default_instance();

  static inline const VoipMultiRelayData* internal_default_instance() {
    return reinterpret_cast<const VoipMultiRelayData*>(
               &_VoipMultiRelayData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(VoipMultiRelayData* other);

  // implements Message ----------------------------------------------

  inline VoipMultiRelayData* New() const PROTOBUF_FINAL { return New(NULL); }

  VoipMultiRelayData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoipMultiRelayData& from);
  void MergeFrom(const VoipMultiRelayData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoipMultiRelayData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.VoipRelayData PeerId = 1;
  bool has_peerid() const;
  void clear_peerid();
  static const int kPeerIdFieldNumber = 1;
  const ::micromsg::VoipRelayData& peerid() const;
  ::micromsg::VoipRelayData* mutable_peerid();
  ::micromsg::VoipRelayData* release_peerid();
  void set_allocated_peerid(::micromsg::VoipRelayData* peerid);

  // required .micromsg.VoipRelayData CapInfo = 2;
  bool has_capinfo() const;
  void clear_capinfo();
  static const int kCapInfoFieldNumber = 2;
  const ::micromsg::VoipRelayData& capinfo() const;
  ::micromsg::VoipRelayData* mutable_capinfo();
  ::micromsg::VoipRelayData* release_capinfo();
  void set_allocated_capinfo(::micromsg::VoipRelayData* capinfo);

  // optional .micromsg.VoipAddrSet VoipSvrAddr = 4;
  bool has_voipsvraddr() const;
  void clear_voipsvraddr();
  static const int kVoipSvrAddrFieldNumber = 4;
  const ::micromsg::VoipAddrSet& voipsvraddr() const;
  ::micromsg::VoipAddrSet* mutable_voipsvraddr();
  ::micromsg::VoipAddrSet* release_voipsvraddr();
  void set_allocated_voipsvraddr(::micromsg::VoipAddrSet* voipsvraddr);

  // optional .micromsg.VoipAddrSet PunchSvrAddr = 5;
  bool has_punchsvraddr() const;
  void clear_punchsvraddr();
  static const int kPunchSvrAddrFieldNumber = 5;
  const ::micromsg::VoipAddrSet& punchsvraddr() const;
  ::micromsg::VoipAddrSet* mutable_punchsvraddr();
  ::micromsg::VoipAddrSet* release_punchsvraddr();
  void set_allocated_punchsvraddr(::micromsg::VoipAddrSet* punchsvraddr);

  // optional .micromsg.SKBuiltinBuffer_t ClientHeadSigns = 10;
  bool has_clientheadsigns() const;
  void clear_clientheadsigns();
  static const int kClientHeadSignsFieldNumber = 10;
  const ::micromsg::SKBuiltinBuffer_t& clientheadsigns() const;
  ::micromsg::SKBuiltinBuffer_t* mutable_clientheadsigns();
  ::micromsg::SKBuiltinBuffer_t* release_clientheadsigns();
  void set_allocated_clientheadsigns(::micromsg::SKBuiltinBuffer_t* clientheadsigns);

  // optional .micromsg.VoipAddrSet TcpSvrAddr = 12;
  bool has_tcpsvraddr() const;
  void clear_tcpsvraddr();
  static const int kTcpSvrAddrFieldNumber = 12;
  const ::micromsg::VoipAddrSet& tcpsvraddr() const;
  ::micromsg::VoipAddrSet* mutable_tcpsvraddr();
  ::micromsg::VoipAddrSet* release_tcpsvraddr();
  void set_allocated_tcpsvraddr(::micromsg::VoipAddrSet* tcpsvraddr);

  // optional .micromsg.SKBuiltinBuffer_t FECKeyPara1 = 20;
  bool has_feckeypara1() const;
  void clear_feckeypara1();
  static const int kFECKeyPara1FieldNumber = 20;
  const ::micromsg::SKBuiltinBuffer_t& feckeypara1() const;
  ::micromsg::SKBuiltinBuffer_t* mutable_feckeypara1();
  ::micromsg::SKBuiltinBuffer_t* release_feckeypara1();
  void set_allocated_feckeypara1(::micromsg::SKBuiltinBuffer_t* feckeypara1);

  // optional .micromsg.SKBuiltinBuffer_t FECKeyPara2 = 21;
  bool has_feckeypara2() const;
  void clear_feckeypara2();
  static const int kFECKeyPara2FieldNumber = 21;
  const ::micromsg::SKBuiltinBuffer_t& feckeypara2() const;
  ::micromsg::SKBuiltinBuffer_t* mutable_feckeypara2();
  ::micromsg::SKBuiltinBuffer_t* release_feckeypara2();
  void set_allocated_feckeypara2(::micromsg::SKBuiltinBuffer_t* feckeypara2);

  // optional .micromsg.SKBuiltinBuffer_t EncryptKeyBuf = 23;
  bool has_encryptkeybuf() const;
  void clear_encryptkeybuf();
  static const int kEncryptKeyBufFieldNumber = 23;
  const ::micromsg::SKBuiltinBuffer_t& encryptkeybuf() const;
  ::micromsg::SKBuiltinBuffer_t* mutable_encryptkeybuf();
  ::micromsg::SKBuiltinBuffer_t* release_encryptkeybuf();
  void set_allocated_encryptkeybuf(::micromsg::SKBuiltinBuffer_t* encryptkeybuf);

  // required int32 SendingType = 3;
  bool has_sendingtype() const;
  void clear_sendingtype();
  static const int kSendingTypeFieldNumber = 3;
  ::google::protobuf::int32 sendingtype() const;
  void set_sendingtype(::google::protobuf::int32 value);

  // optional int32 VoipNetQuality = 6;
  bool has_voipnetquality() const;
  void clear_voipnetquality();
  static const int kVoipNetQualityFieldNumber = 6;
  ::google::protobuf::int32 voipnetquality() const;
  void set_voipnetquality(::google::protobuf::int32 value);

  // optional int32 LinkDisconnectHbInterval = 7;
  bool has_linkdisconnecthbinterval() const;
  void clear_linkdisconnecthbinterval();
  static const int kLinkDisconnectHbIntervalFieldNumber = 7;
  ::google::protobuf::int32 linkdisconnecthbinterval() const;
  void set_linkdisconnecthbinterval(::google::protobuf::int32 value);

  // optional int32 LinkDisconnectHbCnt = 8;
  bool has_linkdisconnecthbcnt() const;
  void clear_linkdisconnecthbcnt();
  static const int kLinkDisconnectHbCntFieldNumber = 8;
  ::google::protobuf::int32 linkdisconnecthbcnt() const;
  void set_linkdisconnecthbcnt(::google::protobuf::int32 value);

  // optional uint32 ProtocolEncryptLength = 9;
  bool has_protocolencryptlength() const;
  void clear_protocolencryptlength();
  static const int kProtocolEncryptLengthFieldNumber = 9;
  ::google::protobuf::uint32 protocolencryptlength() const;
  void set_protocolencryptlength(::google::protobuf::uint32 value);

  // optional uint32 OppositeClientVersion = 11;
  bool has_oppositeclientversion() const;
  void clear_oppositeclientversion();
  static const int kOppositeClientVersionFieldNumber = 11;
  ::google::protobuf::uint32 oppositeclientversion() const;
  void set_oppositeclientversion(::google::protobuf::uint32 value);

  // optional int32 ARQStrategy = 13;
  bool has_arqstrategy() const;
  void clear_arqstrategy();
  static const int kARQStrategyFieldNumber = 13;
  ::google::protobuf::int32 arqstrategy() const;
  void set_arqstrategy(::google::protobuf::int32 value);

  // optional int32 ARQCacheLen = 14;
  bool has_arqcachelen() const;
  void clear_arqcachelen();
  static const int kARQCacheLenFieldNumber = 14;
  ::google::protobuf::int32 arqcachelen() const;
  void set_arqcachelen(::google::protobuf::int32 value);

  // optional int32 ARQRttThreshold = 15;
  bool has_arqrttthreshold() const;
  void clear_arqrttthreshold();
  static const int kARQRttThresholdFieldNumber = 15;
  ::google::protobuf::int32 arqrttthreshold() const;
  void set_arqrttthreshold(::google::protobuf::int32 value);

  // optional int32 ARQUsedRateThreshold = 16;
  bool has_arqusedratethreshold() const;
  void clear_arqusedratethreshold();
  static const int kARQUsedRateThresholdFieldNumber = 16;
  ::google::protobuf::int32 arqusedratethreshold() const;
  void set_arqusedratethreshold(::google::protobuf::int32 value);

  // optional int32 ARQRespRateThreshold = 17;
  bool has_arqrespratethreshold() const;
  void clear_arqrespratethreshold();
  static const int kARQRespRateThresholdFieldNumber = 17;
  ::google::protobuf::int32 arqrespratethreshold() const;
  void set_arqrespratethreshold(::google::protobuf::int32 value);

  // optional int32 EncryptStrategy = 18;
  bool has_encryptstrategy() const;
  void clear_encryptstrategy();
  static const int kEncryptStrategyFieldNumber = 18;
  ::google::protobuf::int32 encryptstrategy() const;
  void set_encryptstrategy(::google::protobuf::int32 value);

  // optional int32 FECSvrCtr = 19;
  bool has_fecsvrctr() const;
  void clear_fecsvrctr();
  static const int kFECSvrCtrFieldNumber = 19;
  ::google::protobuf::int32 fecsvrctr() const;
  void set_fecsvrctr(::google::protobuf::int32 value);

  // optional int32 QosStrategy = 22;
  bool has_qosstrategy() const;
  void clear_qosstrategy();
  static const int kQosStrategyFieldNumber = 22;
  ::google::protobuf::int32 qosstrategy() const;
  void set_qosstrategy(::google::protobuf::int32 value);

  // optional uint32 OppositeDeviceType = 24;
  bool has_oppositedevicetype() const;
  void clear_oppositedevicetype();
  static const int kOppositeDeviceTypeFieldNumber = 24;
  ::google::protobuf::uint32 oppositedevicetype() const;
  void set_oppositedevicetype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.VoipMultiRelayData)
 private:
  void set_has_peerid();
  void clear_has_peerid();
  void set_has_capinfo();
  void clear_has_capinfo();
  void set_has_sendingtype();
  void clear_has_sendingtype();
  void set_has_voipsvraddr();
  void clear_has_voipsvraddr();
  void set_has_punchsvraddr();
  void clear_has_punchsvraddr();
  void set_has_voipnetquality();
  void clear_has_voipnetquality();
  void set_has_linkdisconnecthbinterval();
  void clear_has_linkdisconnecthbinterval();
  void set_has_linkdisconnecthbcnt();
  void clear_has_linkdisconnecthbcnt();
  void set_has_protocolencryptlength();
  void clear_has_protocolencryptlength();
  void set_has_clientheadsigns();
  void clear_has_clientheadsigns();
  void set_has_oppositeclientversion();
  void clear_has_oppositeclientversion();
  void set_has_tcpsvraddr();
  void clear_has_tcpsvraddr();
  void set_has_arqstrategy();
  void clear_has_arqstrategy();
  void set_has_arqcachelen();
  void clear_has_arqcachelen();
  void set_has_arqrttthreshold();
  void clear_has_arqrttthreshold();
  void set_has_arqusedratethreshold();
  void clear_has_arqusedratethreshold();
  void set_has_arqrespratethreshold();
  void clear_has_arqrespratethreshold();
  void set_has_encryptstrategy();
  void clear_has_encryptstrategy();
  void set_has_fecsvrctr();
  void clear_has_fecsvrctr();
  void set_has_feckeypara1();
  void clear_has_feckeypara1();
  void set_has_feckeypara2();
  void clear_has_feckeypara2();
  void set_has_qosstrategy();
  void clear_has_qosstrategy();
  void set_has_encryptkeybuf();
  void clear_has_encryptkeybuf();
  void set_has_oppositedevicetype();
  void clear_has_oppositedevicetype();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::VoipRelayData* peerid_;
  ::micromsg::VoipRelayData* capinfo_;
  ::micromsg::VoipAddrSet* voipsvraddr_;
  ::micromsg::VoipAddrSet* punchsvraddr_;
  ::micromsg::SKBuiltinBuffer_t* clientheadsigns_;
  ::micromsg::VoipAddrSet* tcpsvraddr_;
  ::micromsg::SKBuiltinBuffer_t* feckeypara1_;
  ::micromsg::SKBuiltinBuffer_t* feckeypara2_;
  ::micromsg::SKBuiltinBuffer_t* encryptkeybuf_;
  ::google::protobuf::int32 sendingtype_;
  ::google::protobuf::int32 voipnetquality_;
  ::google::protobuf::int32 linkdisconnecthbinterval_;
  ::google::protobuf::int32 linkdisconnecthbcnt_;
  ::google::protobuf::uint32 protocolencryptlength_;
  ::google::protobuf::uint32 oppositeclientversion_;
  ::google::protobuf::int32 arqstrategy_;
  ::google::protobuf::int32 arqcachelen_;
  ::google::protobuf::int32 arqrttthreshold_;
  ::google::protobuf::int32 arqusedratethreshold_;
  ::google::protobuf::int32 arqrespratethreshold_;
  ::google::protobuf::int32 encryptstrategy_;
  ::google::protobuf::int32 fecsvrctr_;
  ::google::protobuf::int32 qosstrategy_;
  ::google::protobuf::uint32 oppositedevicetype_;
  friend struct protobuf_mmvoip_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoipStatReportData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.VoipStatReportData) */ {
 public:
  VoipStatReportData();
  virtual ~VoipStatReportData();

  VoipStatReportData(const VoipStatReportData& from);

  inline VoipStatReportData& operator=(const VoipStatReportData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoipStatReportData& default_instance();

  static inline const VoipStatReportData* internal_default_instance() {
    return reinterpret_cast<const VoipStatReportData*>(
               &_VoipStatReportData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(VoipStatReportData* other);

  // implements Message ----------------------------------------------

  inline VoipStatReportData* New() const PROTOBUF_FINAL { return New(NULL); }

  VoipStatReportData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoipStatReportData& from);
  void MergeFrom(const VoipStatReportData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoipStatReportData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.SKBuiltinString_t StatReport = 1;
  bool has_statreport() const;
  void clear_statreport();
  static const int kStatReportFieldNumber = 1;
  const ::micromsg::SKBuiltinString_t& statreport() const;
  ::micromsg::SKBuiltinString_t* mutable_statreport();
  ::micromsg::SKBuiltinString_t* release_statreport();
  void set_allocated_statreport(::micromsg::SKBuiltinString_t* statreport);

  // @@protoc_insertion_point(class_scope:micromsg.VoipStatReportData)
 private:
  void set_has_statreport();
  void clear_has_statreport();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::SKBuiltinString_t* statreport_;
  friend struct protobuf_mmvoip_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoipNetQuality : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.VoipNetQuality) */ {
 public:
  VoipNetQuality();
  virtual ~VoipNetQuality();

  VoipNetQuality(const VoipNetQuality& from);

  inline VoipNetQuality& operator=(const VoipNetQuality& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoipNetQuality& default_instance();

  static inline const VoipNetQuality* internal_default_instance() {
    return reinterpret_cast<const VoipNetQuality*>(
               &_VoipNetQuality_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(VoipNetQuality* other);

  // implements Message ----------------------------------------------

  inline VoipNetQuality* New() const PROTOBUF_FINAL { return New(NULL); }

  VoipNetQuality* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoipNetQuality& from);
  void MergeFrom(const VoipNetQuality& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoipNetQuality* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 Type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required int32 Begin = 2;
  bool has_begin() const;
  void clear_begin();
  static const int kBeginFieldNumber = 2;
  ::google::protobuf::int32 begin() const;
  void set_begin(::google::protobuf::int32 value);

  // required int32 End = 3;
  bool has_end() const;
  void clear_end();
  static const int kEndFieldNumber = 3;
  ::google::protobuf::int32 end() const;
  void set_end(::google::protobuf::int32 value);

  // required int32 HitCnt = 4;
  bool has_hitcnt() const;
  void clear_hitcnt();
  static const int kHitCntFieldNumber = 4;
  ::google::protobuf::int32 hitcnt() const;
  void set_hitcnt(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.VoipNetQuality)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_begin();
  void clear_has_begin();
  void set_has_end();
  void clear_has_end();
  void set_has_hitcnt();
  void clear_has_hitcnt();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 begin_;
  ::google::protobuf::int32 end_;
  ::google::protobuf::int32 hitcnt_;
  friend struct protobuf_mmvoip_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoipInviteRemindReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.VoipInviteRemindReq) */ {
 public:
  VoipInviteRemindReq();
  virtual ~VoipInviteRemindReq();

  VoipInviteRemindReq(const VoipInviteRemindReq& from);

  inline VoipInviteRemindReq& operator=(const VoipInviteRemindReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoipInviteRemindReq& default_instance();

  static inline const VoipInviteRemindReq* internal_default_instance() {
    return reinterpret_cast<const VoipInviteRemindReq*>(
               &_VoipInviteRemindReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(VoipInviteRemindReq* other);

  // implements Message ----------------------------------------------

  inline VoipInviteRemindReq* New() const PROTOBUF_FINAL { return New(NULL); }

  VoipInviteRemindReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoipInviteRemindReq& from);
  void MergeFrom(const VoipInviteRemindReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoipInviteRemindReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.SKBuiltinString_t ToUserNameList = 3;
  int tousernamelist_size() const;
  void clear_tousernamelist();
  static const int kToUserNameListFieldNumber = 3;
  const ::micromsg::SKBuiltinString_t& tousernamelist(int index) const;
  ::micromsg::SKBuiltinString_t* mutable_tousernamelist(int index);
  ::micromsg::SKBuiltinString_t* add_tousernamelist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >*
      mutable_tousernamelist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >&
      tousernamelist() const;

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required uint32 ListCount = 2;
  bool has_listcount() const;
  void clear_listcount();
  static const int kListCountFieldNumber = 2;
  ::google::protobuf::uint32 listcount() const;
  void set_listcount(::google::protobuf::uint32 value);

  // optional uint32 InviteType = 4;
  bool has_invitetype() const;
  void clear_invitetype();
  static const int kInviteTypeFieldNumber = 4;
  ::google::protobuf::uint32 invitetype() const;
  void set_invitetype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.VoipInviteRemindReq)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_listcount();
  void clear_has_listcount();
  void set_has_invitetype();
  void clear_has_invitetype();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t > tousernamelist_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::uint32 listcount_;
  ::google::protobuf::uint32 invitetype_;
  friend struct protobuf_mmvoip_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoipInviteRemindResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.VoipInviteRemindResp) */ {
 public:
  VoipInviteRemindResp();
  virtual ~VoipInviteRemindResp();

  VoipInviteRemindResp(const VoipInviteRemindResp& from);

  inline VoipInviteRemindResp& operator=(const VoipInviteRemindResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoipInviteRemindResp& default_instance();

  static inline const VoipInviteRemindResp* internal_default_instance() {
    return reinterpret_cast<const VoipInviteRemindResp*>(
               &_VoipInviteRemindResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(VoipInviteRemindResp* other);

  // implements Message ----------------------------------------------

  inline VoipInviteRemindResp* New() const PROTOBUF_FINAL { return New(NULL); }

  VoipInviteRemindResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoipInviteRemindResp& from);
  void MergeFrom(const VoipInviteRemindResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoipInviteRemindResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // @@protoc_insertion_point(class_scope:micromsg.VoipInviteRemindResp)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseResponse* baseresponse_;
  friend struct protobuf_mmvoip_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoipInviteReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.VoipInviteReq) */ {
 public:
  VoipInviteReq();
  virtual ~VoipInviteReq();

  VoipInviteReq(const VoipInviteReq& from);

  inline VoipInviteReq& operator=(const VoipInviteReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoipInviteReq& default_instance();

  static inline const VoipInviteReq* internal_default_instance() {
    return reinterpret_cast<const VoipInviteReq*>(
               &_VoipInviteReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(VoipInviteReq* other);

  // implements Message ----------------------------------------------

  inline VoipInviteReq* New() const PROTOBUF_FINAL { return New(NULL); }

  VoipInviteReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoipInviteReq& from);
  void MergeFrom(const VoipInviteReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoipInviteReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.SKBuiltinString_t ToUsernameList = 4;
  int tousernamelist_size() const;
  void clear_tousernamelist();
  static const int kToUsernameListFieldNumber = 4;
  const ::micromsg::SKBuiltinString_t& tousernamelist(int index) const;
  ::micromsg::SKBuiltinString_t* mutable_tousernamelist(int index);
  ::micromsg::SKBuiltinString_t* add_tousernamelist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >*
      mutable_tousernamelist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >&
      tousernamelist() const;

  // optional string FromUsername = 2;
  bool has_fromusername() const;
  void clear_fromusername();
  static const int kFromUsernameFieldNumber = 2;
  const ::std::string& fromusername() const;
  void set_fromusername(const ::std::string& value);
  #if LANG_CXX11
  void set_fromusername(::std::string&& value);
  #endif
  void set_fromusername(const char* value);
  void set_fromusername(const char* value, size_t size);
  ::std::string* mutable_fromusername();
  ::std::string* release_fromusername();
  void set_allocated_fromusername(::std::string* fromusername);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required .micromsg.VoipRelayData PeerId = 6;
  bool has_peerid() const;
  void clear_peerid();
  static const int kPeerIdFieldNumber = 6;
  const ::micromsg::VoipRelayData& peerid() const;
  ::micromsg::VoipRelayData* mutable_peerid();
  ::micromsg::VoipRelayData* release_peerid();
  void set_allocated_peerid(::micromsg::VoipRelayData* peerid);

  // required .micromsg.VoipRelayData CapInfo = 7;
  bool has_capinfo() const;
  void clear_capinfo();
  static const int kCapInfoFieldNumber = 7;
  const ::micromsg::VoipRelayData& capinfo() const;
  ::micromsg::VoipRelayData* mutable_capinfo();
  ::micromsg::VoipRelayData* release_capinfo();
  void set_allocated_capinfo(::micromsg::VoipRelayData* capinfo);

  // required int32 InviteUserCount = 3;
  bool has_inviteusercount() const;
  void clear_inviteusercount();
  static const int kInviteUserCountFieldNumber = 3;
  ::google::protobuf::int32 inviteusercount() const;
  void set_inviteusercount(::google::protobuf::int32 value);

  // required int32 NetType = 8;
  bool has_nettype() const;
  void clear_nettype();
  static const int kNetTypeFieldNumber = 8;
  ::google::protobuf::int32 nettype() const;
  void set_nettype(::google::protobuf::int32 value);

  // required int32 CallType = 9;
  bool has_calltype() const;
  void clear_calltype();
  static const int kCallTypeFieldNumber = 9;
  ::google::protobuf::int32 calltype() const;
  void set_calltype(::google::protobuf::int32 value);

  // optional int32 RoomId = 10;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 10;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // optional int64 RoomKey = 11;
  bool has_roomkey() const;
  void clear_roomkey();
  static const int kRoomKeyFieldNumber = 11;
  ::google::protobuf::int64 roomkey() const;
  void set_roomkey(::google::protobuf::int64 value);

  // optional uint64 Timestamp64 = 13;
  bool has_timestamp64() const;
  void clear_timestamp64();
  static const int kTimestamp64FieldNumber = 13;
  ::google::protobuf::uint64 timestamp64() const;
  void set_timestamp64(::google::protobuf::uint64 value);

  // optional uint32 InviteType = 12;
  bool has_invitetype() const;
  void clear_invitetype();
  static const int kInviteTypeFieldNumber = 12;
  ::google::protobuf::uint32 invitetype() const;
  void set_invitetype(::google::protobuf::uint32 value);

  // optional int32 HDVideo = 14;
  bool has_hdvideo() const;
  void clear_hdvideo();
  static const int kHDVideoFieldNumber = 14;
  ::google::protobuf::int32 hdvideo() const;
  void set_hdvideo(::google::protobuf::int32 value);

  // optional uint32 InviteId = 15;
  bool has_inviteid() const;
  void clear_inviteid();
  static const int kInviteIdFieldNumber = 15;
  ::google::protobuf::uint32 inviteid() const;
  void set_inviteid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.VoipInviteReq)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_fromusername();
  void clear_has_fromusername();
  void set_has_inviteusercount();
  void clear_has_inviteusercount();
  void set_has_peerid();
  void clear_has_peerid();
  void set_has_capinfo();
  void clear_has_capinfo();
  void set_has_nettype();
  void clear_has_nettype();
  void set_has_calltype();
  void clear_has_calltype();
  void set_has_roomid();
  void clear_has_roomid();
  void set_has_roomkey();
  void clear_has_roomkey();
  void set_has_invitetype();
  void clear_has_invitetype();
  void set_has_timestamp64();
  void clear_has_timestamp64();
  void set_has_hdvideo();
  void clear_has_hdvideo();
  void set_has_inviteid();
  void clear_has_inviteid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t > tousernamelist_;
  ::google::protobuf::internal::ArenaStringPtr fromusername_;
  ::micromsg::BaseRequest* baserequest_;
  ::micromsg::VoipRelayData* peerid_;
  ::micromsg::VoipRelayData* capinfo_;
  ::google::protobuf::int32 inviteusercount_;
  ::google::protobuf::int32 nettype_;
  ::google::protobuf::int32 calltype_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int64 roomkey_;
  ::google::protobuf::uint64 timestamp64_;
  ::google::protobuf::uint32 invitetype_;
  ::google::protobuf::int32 hdvideo_;
  ::google::protobuf::uint32 inviteid_;
  friend struct protobuf_mmvoip_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoipInviteResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.VoipInviteResp) */ {
 public:
  VoipInviteResp();
  virtual ~VoipInviteResp();

  VoipInviteResp(const VoipInviteResp& from);

  inline VoipInviteResp& operator=(const VoipInviteResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoipInviteResp& default_instance();

  static inline const VoipInviteResp* internal_default_instance() {
    return reinterpret_cast<const VoipInviteResp*>(
               &_VoipInviteResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(VoipInviteResp* other);

  // implements Message ----------------------------------------------

  inline VoipInviteResp* New() const PROTOBUF_FINAL { return New(NULL); }

  VoipInviteResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoipInviteResp& from);
  void MergeFrom(const VoipInviteResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoipInviteResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.VoipAddr AddrList = 4;
  int addrlist_size() const;
  void clear_addrlist();
  static const int kAddrListFieldNumber = 4;
  const ::micromsg::VoipAddr& addrlist(int index) const;
  ::micromsg::VoipAddr* mutable_addrlist(int index);
  ::micromsg::VoipAddr* add_addrlist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::VoipAddr >*
      mutable_addrlist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::VoipAddr >&
      addrlist() const;

  // repeated .micromsg.VoipNetQuality NetQualityList = 9;
  int netqualitylist_size() const;
  void clear_netqualitylist();
  static const int kNetQualityListFieldNumber = 9;
  const ::micromsg::VoipNetQuality& netqualitylist(int index) const;
  ::micromsg::VoipNetQuality* mutable_netqualitylist(int index);
  ::micromsg::VoipNetQuality* add_netqualitylist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::VoipNetQuality >*
      mutable_netqualitylist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::VoipNetQuality >&
      netqualitylist() const;

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // optional .micromsg.VoipMultiRelayData RelayData = 7;
  bool has_relaydata() const;
  void clear_relaydata();
  static const int kRelayDataFieldNumber = 7;
  const ::micromsg::VoipMultiRelayData& relaydata() const;
  ::micromsg::VoipMultiRelayData* mutable_relaydata();
  ::micromsg::VoipMultiRelayData* release_relaydata();
  void set_allocated_relaydata(::micromsg::VoipMultiRelayData* relaydata);

  // required int32 RoomId = 2;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 2;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // required int32 AddrCount = 3;
  bool has_addrcount() const;
  void clear_addrcount();
  static const int kAddrCountFieldNumber = 3;
  ::google::protobuf::int32 addrcount() const;
  void set_addrcount(::google::protobuf::int32 value);

  // required int64 RoomKey = 5;
  bool has_roomkey() const;
  void clear_roomkey();
  static const int kRoomKeyFieldNumber = 5;
  ::google::protobuf::int64 roomkey() const;
  void set_roomkey(::google::protobuf::int64 value);

  // required int32 RoomMemberId = 6;
  bool has_roommemberid() const;
  void clear_roommemberid();
  static const int kRoomMemberIdFieldNumber = 6;
  ::google::protobuf::int32 roommemberid() const;
  void set_roommemberid(::google::protobuf::int32 value);

  // optional int32 NetQualityCnt = 8;
  bool has_netqualitycnt() const;
  void clear_netqualitycnt();
  static const int kNetQualityCntFieldNumber = 8;
  ::google::protobuf::int32 netqualitycnt() const;
  void set_netqualitycnt(::google::protobuf::int32 value);

  // optional int32 AudioTsdfBeyond3G = 10;
  bool has_audiotsdfbeyond3g() const;
  void clear_audiotsdfbeyond3g();
  static const int kAudioTsdfBeyond3GFieldNumber = 10;
  ::google::protobuf::int32 audiotsdfbeyond3g() const;
  void set_audiotsdfbeyond3g(::google::protobuf::int32 value);

  // optional int32 AudioTsdfEdge = 11;
  bool has_audiotsdfedge() const;
  void clear_audiotsdfedge();
  static const int kAudioTsdfEdgeFieldNumber = 11;
  ::google::protobuf::int32 audiotsdfedge() const;
  void set_audiotsdfedge(::google::protobuf::int32 value);

  // optional int32 PassthroughQosAlgorithm = 12;
  bool has_passthroughqosalgorithm() const;
  void clear_passthroughqosalgorithm();
  static const int kPassthroughQosAlgorithmFieldNumber = 12;
  ::google::protobuf::int32 passthroughqosalgorithm() const;
  void set_passthroughqosalgorithm(::google::protobuf::int32 value);

  // optional int32 FastPlayRepair = 13;
  bool has_fastplayrepair() const;
  void clear_fastplayrepair();
  static const int kFastPlayRepairFieldNumber = 13;
  ::google::protobuf::int32 fastplayrepair() const;
  void set_fastplayrepair(::google::protobuf::int32 value);

  // optional int32 VoipSyncInterval = 14;
  bool has_voipsyncinterval() const;
  void clear_voipsyncinterval();
  static const int kVoipSyncIntervalFieldNumber = 14;
  ::google::protobuf::int32 voipsyncinterval() const;
  void set_voipsyncinterval(::google::protobuf::int32 value);

  // optional int32 NewP2S = 15;
  bool has_newp2s() const;
  void clear_newp2s();
  static const int kNewP2SFieldNumber = 15;
  ::google::protobuf::int32 newp2s() const;
  void set_newp2s(::google::protobuf::int32 value);

  // optional int32 AudioDTX = 16;
  bool has_audiodtx() const;
  void clear_audiodtx();
  static const int kAudioDTXFieldNumber = 16;
  ::google::protobuf::int32 audiodtx() const;
  void set_audiodtx(::google::protobuf::int32 value);

  // optional uint32 TcpCnt = 17;
  bool has_tcpcnt() const;
  void clear_tcpcnt();
  static const int kTcpCntFieldNumber = 17;
  ::google::protobuf::uint32 tcpcnt() const;
  void set_tcpcnt(::google::protobuf::uint32 value);

  // optional uint32 SwitchInterval = 18;
  bool has_switchinterval() const;
  void clear_switchinterval();
  static const int kSwitchIntervalFieldNumber = 18;
  ::google::protobuf::uint32 switchinterval() const;
  void set_switchinterval(::google::protobuf::uint32 value);

  // optional int32 Hw264SvrCfg = 19;
  bool has_hw264svrcfg() const;
  void clear_hw264svrcfg();
  static const int kHw264SvrCfgFieldNumber = 19;
  ::google::protobuf::int32 hw264svrcfg() const;
  void set_hw264svrcfg(::google::protobuf::int32 value);

  // optional int32 AudioEnableRmioAndS3A = 20;
  bool has_audioenablermioands3a() const;
  void clear_audioenablermioands3a();
  static const int kAudioEnableRmioAndS3AFieldNumber = 20;
  ::google::protobuf::int32 audioenablermioands3a() const;
  void set_audioenablermioands3a(::google::protobuf::int32 value);

  // optional int32 AudioEnableSpkec = 21;
  bool has_audioenablespkec() const;
  void clear_audioenablespkec();
  static const int kAudioEnableSpkecFieldNumber = 21;
  ::google::protobuf::int32 audioenablespkec() const;
  void set_audioenablespkec(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.VoipInviteResp)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_roomid();
  void clear_has_roomid();
  void set_has_addrcount();
  void clear_has_addrcount();
  void set_has_roomkey();
  void clear_has_roomkey();
  void set_has_roommemberid();
  void clear_has_roommemberid();
  void set_has_relaydata();
  void clear_has_relaydata();
  void set_has_netqualitycnt();
  void clear_has_netqualitycnt();
  void set_has_audiotsdfbeyond3g();
  void clear_has_audiotsdfbeyond3g();
  void set_has_audiotsdfedge();
  void clear_has_audiotsdfedge();
  void set_has_passthroughqosalgorithm();
  void clear_has_passthroughqosalgorithm();
  void set_has_fastplayrepair();
  void clear_has_fastplayrepair();
  void set_has_voipsyncinterval();
  void clear_has_voipsyncinterval();
  void set_has_newp2s();
  void clear_has_newp2s();
  void set_has_audiodtx();
  void clear_has_audiodtx();
  void set_has_tcpcnt();
  void clear_has_tcpcnt();
  void set_has_switchinterval();
  void clear_has_switchinterval();
  void set_has_hw264svrcfg();
  void clear_has_hw264svrcfg();
  void set_has_audioenablermioands3a();
  void clear_has_audioenablermioands3a();
  void set_has_audioenablespkec();
  void clear_has_audioenablespkec();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::VoipAddr > addrlist_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::VoipNetQuality > netqualitylist_;
  ::micromsg::BaseResponse* baseresponse_;
  ::micromsg::VoipMultiRelayData* relaydata_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 addrcount_;
  ::google::protobuf::int64 roomkey_;
  ::google::protobuf::int32 roommemberid_;
  ::google::protobuf::int32 netqualitycnt_;
  ::google::protobuf::int32 audiotsdfbeyond3g_;
  ::google::protobuf::int32 audiotsdfedge_;
  ::google::protobuf::int32 passthroughqosalgorithm_;
  ::google::protobuf::int32 fastplayrepair_;
  ::google::protobuf::int32 voipsyncinterval_;
  ::google::protobuf::int32 newp2s_;
  ::google::protobuf::int32 audiodtx_;
  ::google::protobuf::uint32 tcpcnt_;
  ::google::protobuf::uint32 switchinterval_;
  ::google::protobuf::int32 hw264svrcfg_;
  ::google::protobuf::int32 audioenablermioands3a_;
  ::google::protobuf::int32 audioenablespkec_;
  friend struct protobuf_mmvoip_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoipCancelInviteReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.VoipCancelInviteReq) */ {
 public:
  VoipCancelInviteReq();
  virtual ~VoipCancelInviteReq();

  VoipCancelInviteReq(const VoipCancelInviteReq& from);

  inline VoipCancelInviteReq& operator=(const VoipCancelInviteReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoipCancelInviteReq& default_instance();

  static inline const VoipCancelInviteReq* internal_default_instance() {
    return reinterpret_cast<const VoipCancelInviteReq*>(
               &_VoipCancelInviteReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(VoipCancelInviteReq* other);

  // implements Message ----------------------------------------------

  inline VoipCancelInviteReq* New() const PROTOBUF_FINAL { return New(NULL); }

  VoipCancelInviteReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoipCancelInviteReq& from);
  void MergeFrom(const VoipCancelInviteReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoipCancelInviteReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string FromUsername = 2;
  bool has_fromusername() const;
  void clear_fromusername();
  static const int kFromUsernameFieldNumber = 2;
  const ::std::string& fromusername() const;
  void set_fromusername(const ::std::string& value);
  #if LANG_CXX11
  void set_fromusername(::std::string&& value);
  #endif
  void set_fromusername(const char* value);
  void set_fromusername(const char* value, size_t size);
  ::std::string* mutable_fromusername();
  ::std::string* release_fromusername();
  void set_allocated_fromusername(::std::string* fromusername);

  // optional string ToUserName = 6;
  bool has_tousername() const;
  void clear_tousername();
  static const int kToUserNameFieldNumber = 6;
  const ::std::string& tousername() const;
  void set_tousername(const ::std::string& value);
  #if LANG_CXX11
  void set_tousername(::std::string&& value);
  #endif
  void set_tousername(const char* value);
  void set_tousername(const char* value, size_t size);
  ::std::string* mutable_tousername();
  ::std::string* release_tousername();
  void set_allocated_tousername(::std::string* tousername);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required .micromsg.VoipStatReportData ReportData = 8;
  bool has_reportdata() const;
  void clear_reportdata();
  static const int kReportDataFieldNumber = 8;
  const ::micromsg::VoipStatReportData& reportdata() const;
  ::micromsg::VoipStatReportData* mutable_reportdata();
  ::micromsg::VoipStatReportData* release_reportdata();
  void set_allocated_reportdata(::micromsg::VoipStatReportData* reportdata);

  // required int64 RoomKey = 4;
  bool has_roomkey() const;
  void clear_roomkey();
  static const int kRoomKeyFieldNumber = 4;
  ::google::protobuf::int64 roomkey() const;
  void set_roomkey(::google::protobuf::int64 value);

  // required int32 RoomId = 3;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 3;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // optional uint32 InviteType = 9;
  bool has_invitetype() const;
  void clear_invitetype();
  static const int kInviteTypeFieldNumber = 9;
  ::google::protobuf::uint32 invitetype() const;
  void set_invitetype(::google::protobuf::uint32 value);

  // optional uint64 Timestamp64 = 10;
  bool has_timestamp64() const;
  void clear_timestamp64();
  static const int kTimestamp64FieldNumber = 10;
  ::google::protobuf::uint64 timestamp64() const;
  void set_timestamp64(::google::protobuf::uint64 value);

  // optional uint32 InviteId = 11;
  bool has_inviteid() const;
  void clear_inviteid();
  static const int kInviteIdFieldNumber = 11;
  ::google::protobuf::uint32 inviteid() const;
  void set_inviteid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.VoipCancelInviteReq)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_fromusername();
  void clear_has_fromusername();
  void set_has_roomid();
  void clear_has_roomid();
  void set_has_roomkey();
  void clear_has_roomkey();
  void set_has_tousername();
  void clear_has_tousername();
  void set_has_reportdata();
  void clear_has_reportdata();
  void set_has_invitetype();
  void clear_has_invitetype();
  void set_has_timestamp64();
  void clear_has_timestamp64();
  void set_has_inviteid();
  void clear_has_inviteid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr fromusername_;
  ::google::protobuf::internal::ArenaStringPtr tousername_;
  ::micromsg::BaseRequest* baserequest_;
  ::micromsg::VoipStatReportData* reportdata_;
  ::google::protobuf::int64 roomkey_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::uint32 invitetype_;
  ::google::protobuf::uint64 timestamp64_;
  ::google::protobuf::uint32 inviteid_;
  friend struct protobuf_mmvoip_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoipCancelInviteResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.VoipCancelInviteResp) */ {
 public:
  VoipCancelInviteResp();
  virtual ~VoipCancelInviteResp();

  VoipCancelInviteResp(const VoipCancelInviteResp& from);

  inline VoipCancelInviteResp& operator=(const VoipCancelInviteResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoipCancelInviteResp& default_instance();

  static inline const VoipCancelInviteResp* internal_default_instance() {
    return reinterpret_cast<const VoipCancelInviteResp*>(
               &_VoipCancelInviteResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(VoipCancelInviteResp* other);

  // implements Message ----------------------------------------------

  inline VoipCancelInviteResp* New() const PROTOBUF_FINAL { return New(NULL); }

  VoipCancelInviteResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoipCancelInviteResp& from);
  void MergeFrom(const VoipCancelInviteResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoipCancelInviteResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required int64 RoomKey = 3;
  bool has_roomkey() const;
  void clear_roomkey();
  static const int kRoomKeyFieldNumber = 3;
  ::google::protobuf::int64 roomkey() const;
  void set_roomkey(::google::protobuf::int64 value);

  // required int32 RoomId = 2;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 2;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.VoipCancelInviteResp)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_roomid();
  void clear_has_roomid();
  void set_has_roomkey();
  void clear_has_roomkey();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::int64 roomkey_;
  ::google::protobuf::int32 roomid_;
  friend struct protobuf_mmvoip_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoipAnswerReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.VoipAnswerReq) */ {
 public:
  VoipAnswerReq();
  virtual ~VoipAnswerReq();

  VoipAnswerReq(const VoipAnswerReq& from);

  inline VoipAnswerReq& operator=(const VoipAnswerReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoipAnswerReq& default_instance();

  static inline const VoipAnswerReq* internal_default_instance() {
    return reinterpret_cast<const VoipAnswerReq*>(
               &_VoipAnswerReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(VoipAnswerReq* other);

  // implements Message ----------------------------------------------

  inline VoipAnswerReq* New() const PROTOBUF_FINAL { return New(NULL); }

  VoipAnswerReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoipAnswerReq& from);
  void MergeFrom(const VoipAnswerReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoipAnswerReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string FromUsername = 2;
  bool has_fromusername() const;
  void clear_fromusername();
  static const int kFromUsernameFieldNumber = 2;
  const ::std::string& fromusername() const;
  void set_fromusername(const ::std::string& value);
  #if LANG_CXX11
  void set_fromusername(::std::string&& value);
  #endif
  void set_fromusername(const char* value);
  void set_fromusername(const char* value, size_t size);
  ::std::string* mutable_fromusername();
  ::std::string* release_fromusername();
  void set_allocated_fromusername(::std::string* fromusername);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // optional .micromsg.VoipRelayData PeerId = 5;
  bool has_peerid() const;
  void clear_peerid();
  static const int kPeerIdFieldNumber = 5;
  const ::micromsg::VoipRelayData& peerid() const;
  ::micromsg::VoipRelayData* mutable_peerid();
  ::micromsg::VoipRelayData* release_peerid();
  void set_allocated_peerid(::micromsg::VoipRelayData* peerid);

  // optional .micromsg.VoipRelayData CapInfo = 6;
  bool has_capinfo() const;
  void clear_capinfo();
  static const int kCapInfoFieldNumber = 6;
  const ::micromsg::VoipRelayData& capinfo() const;
  ::micromsg::VoipRelayData* mutable_capinfo();
  ::micromsg::VoipRelayData* release_capinfo();
  void set_allocated_capinfo(::micromsg::VoipRelayData* capinfo);

  // required int32 RoomId = 3;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 3;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // required int32 Answer = 4;
  bool has_answer() const;
  void clear_answer();
  static const int kAnswerFieldNumber = 4;
  ::google::protobuf::int32 answer() const;
  void set_answer(::google::protobuf::int32 value);

  // required int64 RoomKey = 7;
  bool has_roomkey() const;
  void clear_roomkey();
  static const int kRoomKeyFieldNumber = 7;
  ::google::protobuf::int64 roomkey() const;
  void set_roomkey(::google::protobuf::int64 value);

  // optional uint64 Timestamp64 = 9;
  bool has_timestamp64() const;
  void clear_timestamp64();
  static const int kTimestamp64FieldNumber = 9;
  ::google::protobuf::uint64 timestamp64() const;
  void set_timestamp64(::google::protobuf::uint64 value);

  // required int32 NetType = 8;
  bool has_nettype() const;
  void clear_nettype();
  static const int kNetTypeFieldNumber = 8;
  ::google::protobuf::int32 nettype() const;
  void set_nettype(::google::protobuf::int32 value);

  // optional int32 OnlyAudio = 10;
  bool has_onlyaudio() const;
  void clear_onlyaudio();
  static const int kOnlyAudioFieldNumber = 10;
  ::google::protobuf::int32 onlyaudio() const;
  void set_onlyaudio(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.VoipAnswerReq)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_fromusername();
  void clear_has_fromusername();
  void set_has_roomid();
  void clear_has_roomid();
  void set_has_answer();
  void clear_has_answer();
  void set_has_peerid();
  void clear_has_peerid();
  void set_has_capinfo();
  void clear_has_capinfo();
  void set_has_roomkey();
  void clear_has_roomkey();
  void set_has_nettype();
  void clear_has_nettype();
  void set_has_timestamp64();
  void clear_has_timestamp64();
  void set_has_onlyaudio();
  void clear_has_onlyaudio();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr fromusername_;
  ::micromsg::BaseRequest* baserequest_;
  ::micromsg::VoipRelayData* peerid_;
  ::micromsg::VoipRelayData* capinfo_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 answer_;
  ::google::protobuf::int64 roomkey_;
  ::google::protobuf::uint64 timestamp64_;
  ::google::protobuf::int32 nettype_;
  ::google::protobuf::int32 onlyaudio_;
  friend struct protobuf_mmvoip_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoipAnswerResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.VoipAnswerResp) */ {
 public:
  VoipAnswerResp();
  virtual ~VoipAnswerResp();

  VoipAnswerResp(const VoipAnswerResp& from);

  inline VoipAnswerResp& operator=(const VoipAnswerResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoipAnswerResp& default_instance();

  static inline const VoipAnswerResp* internal_default_instance() {
    return reinterpret_cast<const VoipAnswerResp*>(
               &_VoipAnswerResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(VoipAnswerResp* other);

  // implements Message ----------------------------------------------

  inline VoipAnswerResp* New() const PROTOBUF_FINAL { return New(NULL); }

  VoipAnswerResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoipAnswerResp& from);
  void MergeFrom(const VoipAnswerResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoipAnswerResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.VoipAddr AddrList = 3;
  int addrlist_size() const;
  void clear_addrlist();
  static const int kAddrListFieldNumber = 3;
  const ::micromsg::VoipAddr& addrlist(int index) const;
  ::micromsg::VoipAddr* mutable_addrlist(int index);
  ::micromsg::VoipAddr* add_addrlist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::VoipAddr >*
      mutable_addrlist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::VoipAddr >&
      addrlist() const;

  // repeated .micromsg.VoipNetQuality NetQualityList = 9;
  int netqualitylist_size() const;
  void clear_netqualitylist();
  static const int kNetQualityListFieldNumber = 9;
  const ::micromsg::VoipNetQuality& netqualitylist(int index) const;
  ::micromsg::VoipNetQuality* mutable_netqualitylist(int index);
  ::micromsg::VoipNetQuality* add_netqualitylist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::VoipNetQuality >*
      mutable_netqualitylist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::VoipNetQuality >&
      netqualitylist() const;

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required .micromsg.VoipMultiRelayData RelayData = 7;
  bool has_relaydata() const;
  void clear_relaydata();
  static const int kRelayDataFieldNumber = 7;
  const ::micromsg::VoipMultiRelayData& relaydata() const;
  ::micromsg::VoipMultiRelayData* mutable_relaydata();
  ::micromsg::VoipMultiRelayData* release_relaydata();
  void set_allocated_relaydata(::micromsg::VoipMultiRelayData* relaydata);

  // required int32 AddrCount = 2;
  bool has_addrcount() const;
  void clear_addrcount();
  static const int kAddrCountFieldNumber = 2;
  ::google::protobuf::int32 addrcount() const;
  void set_addrcount(::google::protobuf::int32 value);

  // required int32 RoomId = 4;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 4;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // required int64 RoomKey = 5;
  bool has_roomkey() const;
  void clear_roomkey();
  static const int kRoomKeyFieldNumber = 5;
  ::google::protobuf::int64 roomkey() const;
  void set_roomkey(::google::protobuf::int64 value);

  // required int32 RoomMemberID = 6;
  bool has_roommemberid() const;
  void clear_roommemberid();
  static const int kRoomMemberIDFieldNumber = 6;
  ::google::protobuf::int32 roommemberid() const;
  void set_roommemberid(::google::protobuf::int32 value);

  // optional int32 NetQualityCnt = 8;
  bool has_netqualitycnt() const;
  void clear_netqualitycnt();
  static const int kNetQualityCntFieldNumber = 8;
  ::google::protobuf::int32 netqualitycnt() const;
  void set_netqualitycnt(::google::protobuf::int32 value);

  // optional int32 AudioTsdfBeyond3G = 10;
  bool has_audiotsdfbeyond3g() const;
  void clear_audiotsdfbeyond3g();
  static const int kAudioTsdfBeyond3GFieldNumber = 10;
  ::google::protobuf::int32 audiotsdfbeyond3g() const;
  void set_audiotsdfbeyond3g(::google::protobuf::int32 value);

  // optional int32 AudioTsdfEdge = 11;
  bool has_audiotsdfedge() const;
  void clear_audiotsdfedge();
  static const int kAudioTsdfEdgeFieldNumber = 11;
  ::google::protobuf::int32 audiotsdfedge() const;
  void set_audiotsdfedge(::google::protobuf::int32 value);

  // optional int32 PassthroughQosAlgorithm = 12;
  bool has_passthroughqosalgorithm() const;
  void clear_passthroughqosalgorithm();
  static const int kPassthroughQosAlgorithmFieldNumber = 12;
  ::google::protobuf::int32 passthroughqosalgorithm() const;
  void set_passthroughqosalgorithm(::google::protobuf::int32 value);

  // optional int32 FastPlayRepair = 13;
  bool has_fastplayrepair() const;
  void clear_fastplayrepair();
  static const int kFastPlayRepairFieldNumber = 13;
  ::google::protobuf::int32 fastplayrepair() const;
  void set_fastplayrepair(::google::protobuf::int32 value);

  // optional int32 NewP2S = 14;
  bool has_newp2s() const;
  void clear_newp2s();
  static const int kNewP2SFieldNumber = 14;
  ::google::protobuf::int32 newp2s() const;
  void set_newp2s(::google::protobuf::int32 value);

  // optional int32 AudioDTX = 15;
  bool has_audiodtx() const;
  void clear_audiodtx();
  static const int kAudioDTXFieldNumber = 15;
  ::google::protobuf::int32 audiodtx() const;
  void set_audiodtx(::google::protobuf::int32 value);

  // optional uint32 TcpCnt = 16;
  bool has_tcpcnt() const;
  void clear_tcpcnt();
  static const int kTcpCntFieldNumber = 16;
  ::google::protobuf::uint32 tcpcnt() const;
  void set_tcpcnt(::google::protobuf::uint32 value);

  // optional uint32 SwitchInterval = 17;
  bool has_switchinterval() const;
  void clear_switchinterval();
  static const int kSwitchIntervalFieldNumber = 17;
  ::google::protobuf::uint32 switchinterval() const;
  void set_switchinterval(::google::protobuf::uint32 value);

  // optional int32 Hw264SvrCfg = 18;
  bool has_hw264svrcfg() const;
  void clear_hw264svrcfg();
  static const int kHw264SvrCfgFieldNumber = 18;
  ::google::protobuf::int32 hw264svrcfg() const;
  void set_hw264svrcfg(::google::protobuf::int32 value);

  // optional int32 AudioEnableRmioAndS3A = 19;
  bool has_audioenablermioands3a() const;
  void clear_audioenablermioands3a();
  static const int kAudioEnableRmioAndS3AFieldNumber = 19;
  ::google::protobuf::int32 audioenablermioands3a() const;
  void set_audioenablermioands3a(::google::protobuf::int32 value);

  // optional int32 AudioEnableSpkec = 20;
  bool has_audioenablespkec() const;
  void clear_audioenablespkec();
  static const int kAudioEnableSpkecFieldNumber = 20;
  ::google::protobuf::int32 audioenablespkec() const;
  void set_audioenablespkec(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.VoipAnswerResp)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_addrcount();
  void clear_has_addrcount();
  void set_has_roomid();
  void clear_has_roomid();
  void set_has_roomkey();
  void clear_has_roomkey();
  void set_has_roommemberid();
  void clear_has_roommemberid();
  void set_has_relaydata();
  void clear_has_relaydata();
  void set_has_netqualitycnt();
  void clear_has_netqualitycnt();
  void set_has_audiotsdfbeyond3g();
  void clear_has_audiotsdfbeyond3g();
  void set_has_audiotsdfedge();
  void clear_has_audiotsdfedge();
  void set_has_passthroughqosalgorithm();
  void clear_has_passthroughqosalgorithm();
  void set_has_fastplayrepair();
  void clear_has_fastplayrepair();
  void set_has_newp2s();
  void clear_has_newp2s();
  void set_has_audiodtx();
  void clear_has_audiodtx();
  void set_has_tcpcnt();
  void clear_has_tcpcnt();
  void set_has_switchinterval();
  void clear_has_switchinterval();
  void set_has_hw264svrcfg();
  void clear_has_hw264svrcfg();
  void set_has_audioenablermioands3a();
  void clear_has_audioenablermioands3a();
  void set_has_audioenablespkec();
  void clear_has_audioenablespkec();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::VoipAddr > addrlist_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::VoipNetQuality > netqualitylist_;
  ::micromsg::BaseResponse* baseresponse_;
  ::micromsg::VoipMultiRelayData* relaydata_;
  ::google::protobuf::int32 addrcount_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int64 roomkey_;
  ::google::protobuf::int32 roommemberid_;
  ::google::protobuf::int32 netqualitycnt_;
  ::google::protobuf::int32 audiotsdfbeyond3g_;
  ::google::protobuf::int32 audiotsdfedge_;
  ::google::protobuf::int32 passthroughqosalgorithm_;
  ::google::protobuf::int32 fastplayrepair_;
  ::google::protobuf::int32 newp2s_;
  ::google::protobuf::int32 audiodtx_;
  ::google::protobuf::uint32 tcpcnt_;
  ::google::protobuf::uint32 switchinterval_;
  ::google::protobuf::int32 hw264svrcfg_;
  ::google::protobuf::int32 audioenablermioands3a_;
  ::google::protobuf::int32 audioenablespkec_;
  friend struct protobuf_mmvoip_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoipShutDownReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.VoipShutDownReq) */ {
 public:
  VoipShutDownReq();
  virtual ~VoipShutDownReq();

  VoipShutDownReq(const VoipShutDownReq& from);

  inline VoipShutDownReq& operator=(const VoipShutDownReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoipShutDownReq& default_instance();

  static inline const VoipShutDownReq* internal_default_instance() {
    return reinterpret_cast<const VoipShutDownReq*>(
               &_VoipShutDownReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(VoipShutDownReq* other);

  // implements Message ----------------------------------------------

  inline VoipShutDownReq* New() const PROTOBUF_FINAL { return New(NULL); }

  VoipShutDownReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoipShutDownReq& from);
  void MergeFrom(const VoipShutDownReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoipShutDownReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string FromUsername = 2;
  bool has_fromusername() const;
  void clear_fromusername();
  static const int kFromUsernameFieldNumber = 2;
  const ::std::string& fromusername() const;
  void set_fromusername(const ::std::string& value);
  #if LANG_CXX11
  void set_fromusername(::std::string&& value);
  #endif
  void set_fromusername(const char* value);
  void set_fromusername(const char* value, size_t size);
  ::std::string* mutable_fromusername();
  ::std::string* release_fromusername();
  void set_allocated_fromusername(::std::string* fromusername);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required .micromsg.VoipStatReportData ReportData = 5;
  bool has_reportdata() const;
  void clear_reportdata();
  static const int kReportDataFieldNumber = 5;
  const ::micromsg::VoipStatReportData& reportdata() const;
  ::micromsg::VoipStatReportData* mutable_reportdata();
  ::micromsg::VoipStatReportData* release_reportdata();
  void set_allocated_reportdata(::micromsg::VoipStatReportData* reportdata);

  // required int64 RoomKey = 4;
  bool has_roomkey() const;
  void clear_roomkey();
  static const int kRoomKeyFieldNumber = 4;
  ::google::protobuf::int64 roomkey() const;
  void set_roomkey(::google::protobuf::int64 value);

  // required int32 RoomId = 3;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 3;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // optional uint32 Duration = 7;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 7;
  ::google::protobuf::uint32 duration() const;
  void set_duration(::google::protobuf::uint32 value);

  // optional uint64 Timestamp64 = 6;
  bool has_timestamp64() const;
  void clear_timestamp64();
  static const int kTimestamp64FieldNumber = 6;
  ::google::protobuf::uint64 timestamp64() const;
  void set_timestamp64(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:micromsg.VoipShutDownReq)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_fromusername();
  void clear_has_fromusername();
  void set_has_roomid();
  void clear_has_roomid();
  void set_has_roomkey();
  void clear_has_roomkey();
  void set_has_reportdata();
  void clear_has_reportdata();
  void set_has_timestamp64();
  void clear_has_timestamp64();
  void set_has_duration();
  void clear_has_duration();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr fromusername_;
  ::micromsg::BaseRequest* baserequest_;
  ::micromsg::VoipStatReportData* reportdata_;
  ::google::protobuf::int64 roomkey_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::uint32 duration_;
  ::google::protobuf::uint64 timestamp64_;
  friend struct protobuf_mmvoip_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoipShutDownResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.VoipShutDownResp) */ {
 public:
  VoipShutDownResp();
  virtual ~VoipShutDownResp();

  VoipShutDownResp(const VoipShutDownResp& from);

  inline VoipShutDownResp& operator=(const VoipShutDownResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoipShutDownResp& default_instance();

  static inline const VoipShutDownResp* internal_default_instance() {
    return reinterpret_cast<const VoipShutDownResp*>(
               &_VoipShutDownResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(VoipShutDownResp* other);

  // implements Message ----------------------------------------------

  inline VoipShutDownResp* New() const PROTOBUF_FINAL { return New(NULL); }

  VoipShutDownResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoipShutDownResp& from);
  void MergeFrom(const VoipShutDownResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoipShutDownResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required int64 RoomKey = 3;
  bool has_roomkey() const;
  void clear_roomkey();
  static const int kRoomKeyFieldNumber = 3;
  ::google::protobuf::int64 roomkey() const;
  void set_roomkey(::google::protobuf::int64 value);

  // required int32 RoomId = 2;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 2;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.VoipShutDownResp)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_roomid();
  void clear_has_roomid();
  void set_has_roomkey();
  void clear_has_roomkey();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::int64 roomkey_;
  ::google::protobuf::int32 roomid_;
  friend struct protobuf_mmvoip_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoipCmdItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.VoipCmdItem) */ {
 public:
  VoipCmdItem();
  virtual ~VoipCmdItem();

  VoipCmdItem(const VoipCmdItem& from);

  inline VoipCmdItem& operator=(const VoipCmdItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoipCmdItem& default_instance();

  static inline const VoipCmdItem* internal_default_instance() {
    return reinterpret_cast<const VoipCmdItem*>(
               &_VoipCmdItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(VoipCmdItem* other);

  // implements Message ----------------------------------------------

  inline VoipCmdItem* New() const PROTOBUF_FINAL { return New(NULL); }

  VoipCmdItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoipCmdItem& from);
  void MergeFrom(const VoipCmdItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoipCmdItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string FromUserName = 3;
  bool has_fromusername() const;
  void clear_fromusername();
  static const int kFromUserNameFieldNumber = 3;
  const ::std::string& fromusername() const;
  void set_fromusername(const ::std::string& value);
  #if LANG_CXX11
  void set_fromusername(::std::string&& value);
  #endif
  void set_fromusername(const char* value);
  void set_fromusername(const char* value, size_t size);
  ::std::string* mutable_fromusername();
  ::std::string* release_fromusername();
  void set_allocated_fromusername(::std::string* fromusername);

  // required .micromsg.SKBuiltinBuffer_t CmdBuf = 2;
  bool has_cmdbuf() const;
  void clear_cmdbuf();
  static const int kCmdBufFieldNumber = 2;
  const ::micromsg::SKBuiltinBuffer_t& cmdbuf() const;
  ::micromsg::SKBuiltinBuffer_t* mutable_cmdbuf();
  ::micromsg::SKBuiltinBuffer_t* release_cmdbuf();
  void set_allocated_cmdbuf(::micromsg::SKBuiltinBuffer_t* cmdbuf);

  // required int32 CmdId = 1;
  bool has_cmdid() const;
  void clear_cmdid();
  static const int kCmdIdFieldNumber = 1;
  ::google::protobuf::int32 cmdid() const;
  void set_cmdid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.VoipCmdItem)
 private:
  void set_has_cmdid();
  void clear_has_cmdid();
  void set_has_cmdbuf();
  void clear_has_cmdbuf();
  void set_has_fromusername();
  void clear_has_fromusername();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr fromusername_;
  ::micromsg::SKBuiltinBuffer_t* cmdbuf_;
  ::google::protobuf::int32 cmdid_;
  friend struct protobuf_mmvoip_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoipCmdList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.VoipCmdList) */ {
 public:
  VoipCmdList();
  virtual ~VoipCmdList();

  VoipCmdList(const VoipCmdList& from);

  inline VoipCmdList& operator=(const VoipCmdList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoipCmdList& default_instance();

  static inline const VoipCmdList* internal_default_instance() {
    return reinterpret_cast<const VoipCmdList*>(
               &_VoipCmdList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(VoipCmdList* other);

  // implements Message ----------------------------------------------

  inline VoipCmdList* New() const PROTOBUF_FINAL { return New(NULL); }

  VoipCmdList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoipCmdList& from);
  void MergeFrom(const VoipCmdList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoipCmdList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.VoipCmdItem List = 2;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 2;
  const ::micromsg::VoipCmdItem& list(int index) const;
  ::micromsg::VoipCmdItem* mutable_list(int index);
  ::micromsg::VoipCmdItem* add_list();
  ::google::protobuf::RepeatedPtrField< ::micromsg::VoipCmdItem >*
      mutable_list();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::VoipCmdItem >&
      list() const;

  // required uint32 Count = 1;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.VoipCmdList)
 private:
  void set_has_count();
  void clear_has_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::VoipCmdItem > list_;
  ::google::protobuf::uint32 count_;
  friend struct protobuf_mmvoip_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoipSyncReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.VoipSyncReq) */ {
 public:
  VoipSyncReq();
  virtual ~VoipSyncReq();

  VoipSyncReq(const VoipSyncReq& from);

  inline VoipSyncReq& operator=(const VoipSyncReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoipSyncReq& default_instance();

  static inline const VoipSyncReq* internal_default_instance() {
    return reinterpret_cast<const VoipSyncReq*>(
               &_VoipSyncReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(VoipSyncReq* other);

  // implements Message ----------------------------------------------

  inline VoipSyncReq* New() const PROTOBUF_FINAL { return New(NULL); }

  VoipSyncReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoipSyncReq& from);
  void MergeFrom(const VoipSyncReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoipSyncReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string FromUsername = 2;
  bool has_fromusername() const;
  void clear_fromusername();
  static const int kFromUsernameFieldNumber = 2;
  const ::std::string& fromusername() const;
  void set_fromusername(const ::std::string& value);
  #if LANG_CXX11
  void set_fromusername(::std::string&& value);
  #endif
  void set_fromusername(const char* value);
  void set_fromusername(const char* value, size_t size);
  ::std::string* mutable_fromusername();
  ::std::string* release_fromusername();
  void set_allocated_fromusername(::std::string* fromusername);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required .micromsg.SKBuiltinBuffer_t KeyBuf = 4;
  bool has_keybuf() const;
  void clear_keybuf();
  static const int kKeyBufFieldNumber = 4;
  const ::micromsg::SKBuiltinBuffer_t& keybuf() const;
  ::micromsg::SKBuiltinBuffer_t* mutable_keybuf();
  ::micromsg::SKBuiltinBuffer_t* release_keybuf();
  void set_allocated_keybuf(::micromsg::SKBuiltinBuffer_t* keybuf);

  // required .micromsg.VoipCmdList OpLog = 5;
  bool has_oplog() const;
  void clear_oplog();
  static const int kOpLogFieldNumber = 5;
  const ::micromsg::VoipCmdList& oplog() const;
  ::micromsg::VoipCmdList* mutable_oplog();
  ::micromsg::VoipCmdList* release_oplog();
  void set_allocated_oplog(::micromsg::VoipCmdList* oplog);

  // required int32 RoomId = 3;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 3;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // required int32 Selector = 7;
  bool has_selector() const;
  void clear_selector();
  static const int kSelectorFieldNumber = 7;
  ::google::protobuf::int32 selector() const;
  void set_selector(::google::protobuf::int32 value);

  // required int64 RoomKey = 6;
  bool has_roomkey() const;
  void clear_roomkey();
  static const int kRoomKeyFieldNumber = 6;
  ::google::protobuf::int64 roomkey() const;
  void set_roomkey(::google::protobuf::int64 value);

  // optional uint64 Timestamp64 = 8;
  bool has_timestamp64() const;
  void clear_timestamp64();
  static const int kTimestamp64FieldNumber = 8;
  ::google::protobuf::uint64 timestamp64() const;
  void set_timestamp64(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:micromsg.VoipSyncReq)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_fromusername();
  void clear_has_fromusername();
  void set_has_roomid();
  void clear_has_roomid();
  void set_has_keybuf();
  void clear_has_keybuf();
  void set_has_oplog();
  void clear_has_oplog();
  void set_has_roomkey();
  void clear_has_roomkey();
  void set_has_selector();
  void clear_has_selector();
  void set_has_timestamp64();
  void clear_has_timestamp64();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr fromusername_;
  ::micromsg::BaseRequest* baserequest_;
  ::micromsg::SKBuiltinBuffer_t* keybuf_;
  ::micromsg::VoipCmdList* oplog_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 selector_;
  ::google::protobuf::int64 roomkey_;
  ::google::protobuf::uint64 timestamp64_;
  friend struct protobuf_mmvoip_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoipHeartBeatReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.VoipHeartBeatReq) */ {
 public:
  VoipHeartBeatReq();
  virtual ~VoipHeartBeatReq();

  VoipHeartBeatReq(const VoipHeartBeatReq& from);

  inline VoipHeartBeatReq& operator=(const VoipHeartBeatReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoipHeartBeatReq& default_instance();

  static inline const VoipHeartBeatReq* internal_default_instance() {
    return reinterpret_cast<const VoipHeartBeatReq*>(
               &_VoipHeartBeatReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(VoipHeartBeatReq* other);

  // implements Message ----------------------------------------------

  inline VoipHeartBeatReq* New() const PROTOBUF_FINAL { return New(NULL); }

  VoipHeartBeatReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoipHeartBeatReq& from);
  void MergeFrom(const VoipHeartBeatReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoipHeartBeatReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required int64 RoomKey = 3;
  bool has_roomkey() const;
  void clear_roomkey();
  static const int kRoomKeyFieldNumber = 3;
  ::google::protobuf::int64 roomkey() const;
  void set_roomkey(::google::protobuf::int64 value);

  // required int32 RoomId = 2;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 2;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // optional uint32 Timestamp = 4;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  ::google::protobuf::uint32 timestamp() const;
  void set_timestamp(::google::protobuf::uint32 value);

  // optional uint64 Timestamp64 = 5;
  bool has_timestamp64() const;
  void clear_timestamp64();
  static const int kTimestamp64FieldNumber = 5;
  ::google::protobuf::uint64 timestamp64() const;
  void set_timestamp64(::google::protobuf::uint64 value);

  // optional int32 ConnectionType = 6;
  bool has_connectiontype() const;
  void clear_connectiontype();
  static const int kConnectionTypeFieldNumber = 6;
  ::google::protobuf::int32 connectiontype() const;
  void set_connectiontype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.VoipHeartBeatReq)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_roomid();
  void clear_has_roomid();
  void set_has_roomkey();
  void clear_has_roomkey();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_timestamp64();
  void clear_has_timestamp64();
  void set_has_connectiontype();
  void clear_has_connectiontype();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::int64 roomkey_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::uint32 timestamp_;
  ::google::protobuf::uint64 timestamp64_;
  ::google::protobuf::int32 connectiontype_;
  friend struct protobuf_mmvoip_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoipHeartBeatResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.VoipHeartBeatResp) */ {
 public:
  VoipHeartBeatResp();
  virtual ~VoipHeartBeatResp();

  VoipHeartBeatResp(const VoipHeartBeatResp& from);

  inline VoipHeartBeatResp& operator=(const VoipHeartBeatResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoipHeartBeatResp& default_instance();

  static inline const VoipHeartBeatResp* internal_default_instance() {
    return reinterpret_cast<const VoipHeartBeatResp*>(
               &_VoipHeartBeatResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(VoipHeartBeatResp* other);

  // implements Message ----------------------------------------------

  inline VoipHeartBeatResp* New() const PROTOBUF_FINAL { return New(NULL); }

  VoipHeartBeatResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoipHeartBeatResp& from);
  void MergeFrom(const VoipHeartBeatResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoipHeartBeatResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required int64 RoomKey = 3;
  bool has_roomkey() const;
  void clear_roomkey();
  static const int kRoomKeyFieldNumber = 3;
  ::google::protobuf::int64 roomkey() const;
  void set_roomkey(::google::protobuf::int64 value);

  // required int32 RoomId = 2;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 2;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // optional uint32 Timestamp = 4;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  ::google::protobuf::uint32 timestamp() const;
  void set_timestamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.VoipHeartBeatResp)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_roomid();
  void clear_has_roomid();
  void set_has_roomkey();
  void clear_has_roomkey();
  void set_has_timestamp();
  void clear_has_timestamp();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::int64 roomkey_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::uint32 timestamp_;
  friend struct protobuf_mmvoip_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoipSyncResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.VoipSyncResp) */ {
 public:
  VoipSyncResp();
  virtual ~VoipSyncResp();

  VoipSyncResp(const VoipSyncResp& from);

  inline VoipSyncResp& operator=(const VoipSyncResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoipSyncResp& default_instance();

  static inline const VoipSyncResp* internal_default_instance() {
    return reinterpret_cast<const VoipSyncResp*>(
               &_VoipSyncResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(VoipSyncResp* other);

  // implements Message ----------------------------------------------

  inline VoipSyncResp* New() const PROTOBUF_FINAL { return New(NULL); }

  VoipSyncResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoipSyncResp& from);
  void MergeFrom(const VoipSyncResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoipSyncResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required .micromsg.SKBuiltinBuffer_t KeyBuf = 4;
  bool has_keybuf() const;
  void clear_keybuf();
  static const int kKeyBufFieldNumber = 4;
  const ::micromsg::SKBuiltinBuffer_t& keybuf() const;
  ::micromsg::SKBuiltinBuffer_t* mutable_keybuf();
  ::micromsg::SKBuiltinBuffer_t* release_keybuf();
  void set_allocated_keybuf(::micromsg::SKBuiltinBuffer_t* keybuf);

  // required .micromsg.VoipCmdList CmdList = 5;
  bool has_cmdlist() const;
  void clear_cmdlist();
  static const int kCmdListFieldNumber = 5;
  const ::micromsg::VoipCmdList& cmdlist() const;
  ::micromsg::VoipCmdList* mutable_cmdlist();
  ::micromsg::VoipCmdList* release_cmdlist();
  void set_allocated_cmdlist(::micromsg::VoipCmdList* cmdlist);

  // required int32 RoomId = 3;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 3;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // required int32 ContinueFlag = 7;
  bool has_continueflag() const;
  void clear_continueflag();
  static const int kContinueFlagFieldNumber = 7;
  ::google::protobuf::int32 continueflag() const;
  void set_continueflag(::google::protobuf::int32 value);

  // required int64 RoomKey = 8;
  bool has_roomkey() const;
  void clear_roomkey();
  static const int kRoomKeyFieldNumber = 8;
  ::google::protobuf::int64 roomkey() const;
  void set_roomkey(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:micromsg.VoipSyncResp)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_roomid();
  void clear_has_roomid();
  void set_has_keybuf();
  void clear_has_keybuf();
  void set_has_cmdlist();
  void clear_has_cmdlist();
  void set_has_continueflag();
  void clear_has_continueflag();
  void set_has_roomkey();
  void clear_has_roomkey();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseResponse* baseresponse_;
  ::micromsg::SKBuiltinBuffer_t* keybuf_;
  ::micromsg::VoipCmdList* cmdlist_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 continueflag_;
  ::google::protobuf::int64 roomkey_;
  friend struct protobuf_mmvoip_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoipStatusItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.VoipStatusItem) */ {
 public:
  VoipStatusItem();
  virtual ~VoipStatusItem();

  VoipStatusItem(const VoipStatusItem& from);

  inline VoipStatusItem& operator=(const VoipStatusItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoipStatusItem& default_instance();

  static inline const VoipStatusItem* internal_default_instance() {
    return reinterpret_cast<const VoipStatusItem*>(
               &_VoipStatusItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(VoipStatusItem* other);

  // implements Message ----------------------------------------------

  inline VoipStatusItem* New() const PROTOBUF_FINAL { return New(NULL); }

  VoipStatusItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoipStatusItem& from);
  void MergeFrom(const VoipStatusItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoipStatusItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Username = 1;
  bool has_username() const;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // required int32 Status = 2;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.VoipStatusItem)
 private:
  void set_has_username();
  void clear_has_username();
  void set_has_status();
  void clear_has_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::int32 status_;
  friend struct protobuf_mmvoip_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoipGetRoomInfoReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.VoipGetRoomInfoReq) */ {
 public:
  VoipGetRoomInfoReq();
  virtual ~VoipGetRoomInfoReq();

  VoipGetRoomInfoReq(const VoipGetRoomInfoReq& from);

  inline VoipGetRoomInfoReq& operator=(const VoipGetRoomInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoipGetRoomInfoReq& default_instance();

  static inline const VoipGetRoomInfoReq* internal_default_instance() {
    return reinterpret_cast<const VoipGetRoomInfoReq*>(
               &_VoipGetRoomInfoReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(VoipGetRoomInfoReq* other);

  // implements Message ----------------------------------------------

  inline VoipGetRoomInfoReq* New() const PROTOBUF_FINAL { return New(NULL); }

  VoipGetRoomInfoReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoipGetRoomInfoReq& from);
  void MergeFrom(const VoipGetRoomInfoReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoipGetRoomInfoReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string CallerUserName = 4;
  bool has_callerusername() const;
  void clear_callerusername();
  static const int kCallerUserNameFieldNumber = 4;
  const ::std::string& callerusername() const;
  void set_callerusername(const ::std::string& value);
  #if LANG_CXX11
  void set_callerusername(::std::string&& value);
  #endif
  void set_callerusername(const char* value);
  void set_callerusername(const char* value, size_t size);
  ::std::string* mutable_callerusername();
  ::std::string* release_callerusername();
  void set_allocated_callerusername(::std::string* callerusername);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required int64 RoomKey = 3;
  bool has_roomkey() const;
  void clear_roomkey();
  static const int kRoomKeyFieldNumber = 3;
  ::google::protobuf::int64 roomkey() const;
  void set_roomkey(::google::protobuf::int64 value);

  // required int32 RoomId = 2;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 2;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // optional uint32 Type = 5;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // optional uint64 Timestamp64 = 6;
  bool has_timestamp64() const;
  void clear_timestamp64();
  static const int kTimestamp64FieldNumber = 6;
  ::google::protobuf::uint64 timestamp64() const;
  void set_timestamp64(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:micromsg.VoipGetRoomInfoReq)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_roomid();
  void clear_has_roomid();
  void set_has_roomkey();
  void clear_has_roomkey();
  void set_has_callerusername();
  void clear_has_callerusername();
  void set_has_type();
  void clear_has_type();
  void set_has_timestamp64();
  void clear_has_timestamp64();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr callerusername_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::int64 roomkey_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint64 timestamp64_;
  friend struct protobuf_mmvoip_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoipGetRoomInfoResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.VoipGetRoomInfoResp) */ {
 public:
  VoipGetRoomInfoResp();
  virtual ~VoipGetRoomInfoResp();

  VoipGetRoomInfoResp(const VoipGetRoomInfoResp& from);

  inline VoipGetRoomInfoResp& operator=(const VoipGetRoomInfoResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoipGetRoomInfoResp& default_instance();

  static inline const VoipGetRoomInfoResp* internal_default_instance() {
    return reinterpret_cast<const VoipGetRoomInfoResp*>(
               &_VoipGetRoomInfoResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(VoipGetRoomInfoResp* other);

  // implements Message ----------------------------------------------

  inline VoipGetRoomInfoResp* New() const PROTOBUF_FINAL { return New(NULL); }

  VoipGetRoomInfoResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoipGetRoomInfoResp& from);
  void MergeFrom(const VoipGetRoomInfoResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoipGetRoomInfoResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.VoipStatusItem MemberStatus = 7;
  int memberstatus_size() const;
  void clear_memberstatus();
  static const int kMemberStatusFieldNumber = 7;
  const ::micromsg::VoipStatusItem& memberstatus(int index) const;
  ::micromsg::VoipStatusItem* mutable_memberstatus(int index);
  ::micromsg::VoipStatusItem* add_memberstatus();
  ::google::protobuf::RepeatedPtrField< ::micromsg::VoipStatusItem >*
      mutable_memberstatus();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::VoipStatusItem >&
      memberstatus() const;

  // optional string CallerUserName = 8;
  bool has_callerusername() const;
  void clear_callerusername();
  static const int kCallerUserNameFieldNumber = 8;
  const ::std::string& callerusername() const;
  void set_callerusername(const ::std::string& value);
  #if LANG_CXX11
  void set_callerusername(::std::string&& value);
  #endif
  void set_callerusername(const char* value);
  void set_callerusername(const char* value, size_t size);
  ::std::string* mutable_callerusername();
  ::std::string* release_callerusername();
  void set_allocated_callerusername(::std::string* callerusername);

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required int64 RoomKey = 3;
  bool has_roomkey() const;
  void clear_roomkey();
  static const int kRoomKeyFieldNumber = 3;
  ::google::protobuf::int64 roomkey() const;
  void set_roomkey(::google::protobuf::int64 value);

  // required int32 RoomId = 2;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 2;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // required uint32 CreateTime = 4;
  bool has_createtime() const;
  void clear_createtime();
  static const int kCreateTimeFieldNumber = 4;
  ::google::protobuf::uint32 createtime() const;
  void set_createtime(::google::protobuf::uint32 value);

  // required int32 MemberCount = 6;
  bool has_membercount() const;
  void clear_membercount();
  static const int kMemberCountFieldNumber = 6;
  ::google::protobuf::int32 membercount() const;
  void set_membercount(::google::protobuf::int32 value);

  // optional uint32 InviteType = 9;
  bool has_invitetype() const;
  void clear_invitetype();
  static const int kInviteTypeFieldNumber = 9;
  ::google::protobuf::uint32 invitetype() const;
  void set_invitetype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.VoipGetRoomInfoResp)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_roomid();
  void clear_has_roomid();
  void set_has_roomkey();
  void clear_has_roomkey();
  void set_has_createtime();
  void clear_has_createtime();
  void set_has_membercount();
  void clear_has_membercount();
  void set_has_callerusername();
  void clear_has_callerusername();
  void set_has_invitetype();
  void clear_has_invitetype();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::VoipStatusItem > memberstatus_;
  ::google::protobuf::internal::ArenaStringPtr callerusername_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::int64 roomkey_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::uint32 createtime_;
  ::google::protobuf::int32 membercount_;
  ::google::protobuf::uint32 invitetype_;
  friend struct protobuf_mmvoip_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoipAckReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.VoipAckReq) */ {
 public:
  VoipAckReq();
  virtual ~VoipAckReq();

  VoipAckReq(const VoipAckReq& from);

  inline VoipAckReq& operator=(const VoipAckReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoipAckReq& default_instance();

  static inline const VoipAckReq* internal_default_instance() {
    return reinterpret_cast<const VoipAckReq*>(
               &_VoipAckReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(VoipAckReq* other);

  // implements Message ----------------------------------------------

  inline VoipAckReq* New() const PROTOBUF_FINAL { return New(NULL); }

  VoipAckReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoipAckReq& from);
  void MergeFrom(const VoipAckReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoipAckReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string FromUsername = 4;
  bool has_fromusername() const;
  void clear_fromusername();
  static const int kFromUsernameFieldNumber = 4;
  const ::std::string& fromusername() const;
  void set_fromusername(const ::std::string& value);
  #if LANG_CXX11
  void set_fromusername(::std::string&& value);
  #endif
  void set_fromusername(const char* value);
  void set_fromusername(const char* value, size_t size);
  ::std::string* mutable_fromusername();
  ::std::string* release_fromusername();
  void set_allocated_fromusername(::std::string* fromusername);

  // optional string CallerName = 9;
  bool has_callername() const;
  void clear_callername();
  static const int kCallerNameFieldNumber = 9;
  const ::std::string& callername() const;
  void set_callername(const ::std::string& value);
  #if LANG_CXX11
  void set_callername(::std::string&& value);
  #endif
  void set_callername(const char* value);
  void set_callername(const char* value, size_t size);
  ::std::string* mutable_callername();
  ::std::string* release_callername();
  void set_allocated_callername(::std::string* callername);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // optional .micromsg.VoipRelayData PeerId = 6;
  bool has_peerid() const;
  void clear_peerid();
  static const int kPeerIdFieldNumber = 6;
  const ::micromsg::VoipRelayData& peerid() const;
  ::micromsg::VoipRelayData* mutable_peerid();
  ::micromsg::VoipRelayData* release_peerid();
  void set_allocated_peerid(::micromsg::VoipRelayData* peerid);

  // optional .micromsg.VoipRelayData CapInfo = 7;
  bool has_capinfo() const;
  void clear_capinfo();
  static const int kCapInfoFieldNumber = 7;
  const ::micromsg::VoipRelayData& capinfo() const;
  ::micromsg::VoipRelayData* mutable_capinfo();
  ::micromsg::VoipRelayData* release_capinfo();
  void set_allocated_capinfo(::micromsg::VoipRelayData* capinfo);

  // required int64 RoomKey = 3;
  bool has_roomkey() const;
  void clear_roomkey();
  static const int kRoomKeyFieldNumber = 3;
  ::google::protobuf::int64 roomkey() const;
  void set_roomkey(::google::protobuf::int64 value);

  // required int32 RoomId = 2;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 2;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // optional int32 PreConnect = 5;
  bool has_preconnect() const;
  void clear_preconnect();
  static const int kPreConnectFieldNumber = 5;
  ::google::protobuf::int32 preconnect() const;
  void set_preconnect(::google::protobuf::int32 value);

  // optional int32 NetType = 8;
  bool has_nettype() const;
  void clear_nettype();
  static const int kNetTypeFieldNumber = 8;
  ::google::protobuf::int32 nettype() const;
  void set_nettype(::google::protobuf::int32 value);

  // optional int32 AckStatus = 10;
  bool has_ackstatus() const;
  void clear_ackstatus();
  static const int kAckStatusFieldNumber = 10;
  ::google::protobuf::int32 ackstatus() const;
  void set_ackstatus(::google::protobuf::int32 value);

  // optional uint64 Timestamp64 = 11;
  bool has_timestamp64() const;
  void clear_timestamp64();
  static const int kTimestamp64FieldNumber = 11;
  ::google::protobuf::uint64 timestamp64() const;
  void set_timestamp64(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:micromsg.VoipAckReq)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_roomid();
  void clear_has_roomid();
  void set_has_roomkey();
  void clear_has_roomkey();
  void set_has_fromusername();
  void clear_has_fromusername();
  void set_has_preconnect();
  void clear_has_preconnect();
  void set_has_peerid();
  void clear_has_peerid();
  void set_has_capinfo();
  void clear_has_capinfo();
  void set_has_nettype();
  void clear_has_nettype();
  void set_has_callername();
  void clear_has_callername();
  void set_has_ackstatus();
  void clear_has_ackstatus();
  void set_has_timestamp64();
  void clear_has_timestamp64();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr fromusername_;
  ::google::protobuf::internal::ArenaStringPtr callername_;
  ::micromsg::BaseRequest* baserequest_;
  ::micromsg::VoipRelayData* peerid_;
  ::micromsg::VoipRelayData* capinfo_;
  ::google::protobuf::int64 roomkey_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 preconnect_;
  ::google::protobuf::int32 nettype_;
  ::google::protobuf::int32 ackstatus_;
  ::google::protobuf::uint64 timestamp64_;
  friend struct protobuf_mmvoip_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoipAckResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.VoipAckResp) */ {
 public:
  VoipAckResp();
  virtual ~VoipAckResp();

  VoipAckResp(const VoipAckResp& from);

  inline VoipAckResp& operator=(const VoipAckResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoipAckResp& default_instance();

  static inline const VoipAckResp* internal_default_instance() {
    return reinterpret_cast<const VoipAckResp*>(
               &_VoipAckResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(VoipAckResp* other);

  // implements Message ----------------------------------------------

  inline VoipAckResp* New() const PROTOBUF_FINAL { return New(NULL); }

  VoipAckResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoipAckResp& from);
  void MergeFrom(const VoipAckResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoipAckResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // optional .micromsg.VoipMultiRelayData RelayData = 5;
  bool has_relaydata() const;
  void clear_relaydata();
  static const int kRelayDataFieldNumber = 5;
  const ::micromsg::VoipMultiRelayData& relaydata() const;
  ::micromsg::VoipMultiRelayData* mutable_relaydata();
  ::micromsg::VoipMultiRelayData* release_relaydata();
  void set_allocated_relaydata(::micromsg::VoipMultiRelayData* relaydata);

  // required int64 RoomKey = 3;
  bool has_roomkey() const;
  void clear_roomkey();
  static const int kRoomKeyFieldNumber = 3;
  ::google::protobuf::int64 roomkey() const;
  void set_roomkey(::google::protobuf::int64 value);

  // required int32 RoomId = 2;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 2;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // optional int32 RoomMemberID = 4;
  bool has_roommemberid() const;
  void clear_roommemberid();
  static const int kRoomMemberIDFieldNumber = 4;
  ::google::protobuf::int32 roommemberid() const;
  void set_roommemberid(::google::protobuf::int32 value);

  // optional int32 PreConnect = 6;
  bool has_preconnect() const;
  void clear_preconnect();
  static const int kPreConnectFieldNumber = 6;
  ::google::protobuf::int32 preconnect() const;
  void set_preconnect(::google::protobuf::int32 value);

  // optional uint32 TcpCnt = 7;
  bool has_tcpcnt() const;
  void clear_tcpcnt();
  static const int kTcpCntFieldNumber = 7;
  ::google::protobuf::uint32 tcpcnt() const;
  void set_tcpcnt(::google::protobuf::uint32 value);

  // optional int32 AudioEnableRmioAndS3A = 8;
  bool has_audioenablermioands3a() const;
  void clear_audioenablermioands3a();
  static const int kAudioEnableRmioAndS3AFieldNumber = 8;
  ::google::protobuf::int32 audioenablermioands3a() const;
  void set_audioenablermioands3a(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.VoipAckResp)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_roomid();
  void clear_has_roomid();
  void set_has_roomkey();
  void clear_has_roomkey();
  void set_has_roommemberid();
  void clear_has_roommemberid();
  void set_has_relaydata();
  void clear_has_relaydata();
  void set_has_preconnect();
  void clear_has_preconnect();
  void set_has_tcpcnt();
  void clear_has_tcpcnt();
  void set_has_audioenablermioands3a();
  void clear_has_audioenablermioands3a();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseResponse* baseresponse_;
  ::micromsg::VoipMultiRelayData* relaydata_;
  ::google::protobuf::int64 roomkey_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 roommemberid_;
  ::google::protobuf::int32 preconnect_;
  ::google::protobuf::uint32 tcpcnt_;
  ::google::protobuf::int32 audioenablermioands3a_;
  friend struct protobuf_mmvoip_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoipStatReportReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.VoipStatReportReq) */ {
 public:
  VoipStatReportReq();
  virtual ~VoipStatReportReq();

  VoipStatReportReq(const VoipStatReportReq& from);

  inline VoipStatReportReq& operator=(const VoipStatReportReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoipStatReportReq& default_instance();

  static inline const VoipStatReportReq* internal_default_instance() {
    return reinterpret_cast<const VoipStatReportReq*>(
               &_VoipStatReportReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(VoipStatReportReq* other);

  // implements Message ----------------------------------------------

  inline VoipStatReportReq* New() const PROTOBUF_FINAL { return New(NULL); }

  VoipStatReportReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoipStatReportReq& from);
  void MergeFrom(const VoipStatReportReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoipStatReportReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required .micromsg.VoipStatReportData ReportData = 2;
  bool has_reportdata() const;
  void clear_reportdata();
  static const int kReportDataFieldNumber = 2;
  const ::micromsg::VoipStatReportData& reportdata() const;
  ::micromsg::VoipStatReportData* mutable_reportdata();
  ::micromsg::VoipStatReportData* release_reportdata();
  void set_allocated_reportdata(::micromsg::VoipStatReportData* reportdata);

  // optional .micromsg.VoipStatReportData ChannelReportData = 3;
  bool has_channelreportdata() const;
  void clear_channelreportdata();
  static const int kChannelReportDataFieldNumber = 3;
  const ::micromsg::VoipStatReportData& channelreportdata() const;
  ::micromsg::VoipStatReportData* mutable_channelreportdata();
  ::micromsg::VoipStatReportData* release_channelreportdata();
  void set_allocated_channelreportdata(::micromsg::VoipStatReportData* channelreportdata);

  // optional .micromsg.VoipStatReportData DialReportData = 4;
  bool has_dialreportdata() const;
  void clear_dialreportdata();
  static const int kDialReportDataFieldNumber = 4;
  const ::micromsg::VoipStatReportData& dialreportdata() const;
  ::micromsg::VoipStatReportData* mutable_dialreportdata();
  ::micromsg::VoipStatReportData* release_dialreportdata();
  void set_allocated_dialreportdata(::micromsg::VoipStatReportData* dialreportdata);

  // optional .micromsg.VoipStatReportData EngineReportData = 5;
  bool has_enginereportdata() const;
  void clear_enginereportdata();
  static const int kEngineReportDataFieldNumber = 5;
  const ::micromsg::VoipStatReportData& enginereportdata() const;
  ::micromsg::VoipStatReportData* mutable_enginereportdata();
  ::micromsg::VoipStatReportData* release_enginereportdata();
  void set_allocated_enginereportdata(::micromsg::VoipStatReportData* enginereportdata);

  // optional .micromsg.VoipStatReportData EngineExtReportData = 7;
  bool has_engineextreportdata() const;
  void clear_engineextreportdata();
  static const int kEngineExtReportDataFieldNumber = 7;
  const ::micromsg::VoipStatReportData& engineextreportdata() const;
  ::micromsg::VoipStatReportData* mutable_engineextreportdata();
  ::micromsg::VoipStatReportData* release_engineextreportdata();
  void set_allocated_engineextreportdata(::micromsg::VoipStatReportData* engineextreportdata);

  // optional uint64 Timestamp64 = 6;
  bool has_timestamp64() const;
  void clear_timestamp64();
  static const int kTimestamp64FieldNumber = 6;
  ::google::protobuf::uint64 timestamp64() const;
  void set_timestamp64(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:micromsg.VoipStatReportReq)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_reportdata();
  void clear_has_reportdata();
  void set_has_channelreportdata();
  void clear_has_channelreportdata();
  void set_has_dialreportdata();
  void clear_has_dialreportdata();
  void set_has_enginereportdata();
  void clear_has_enginereportdata();
  void set_has_timestamp64();
  void clear_has_timestamp64();
  void set_has_engineextreportdata();
  void clear_has_engineextreportdata();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseRequest* baserequest_;
  ::micromsg::VoipStatReportData* reportdata_;
  ::micromsg::VoipStatReportData* channelreportdata_;
  ::micromsg::VoipStatReportData* dialreportdata_;
  ::micromsg::VoipStatReportData* enginereportdata_;
  ::micromsg::VoipStatReportData* engineextreportdata_;
  ::google::protobuf::uint64 timestamp64_;
  friend struct protobuf_mmvoip_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoipStatReportResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.VoipStatReportResp) */ {
 public:
  VoipStatReportResp();
  virtual ~VoipStatReportResp();

  VoipStatReportResp(const VoipStatReportResp& from);

  inline VoipStatReportResp& operator=(const VoipStatReportResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoipStatReportResp& default_instance();

  static inline const VoipStatReportResp* internal_default_instance() {
    return reinterpret_cast<const VoipStatReportResp*>(
               &_VoipStatReportResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(VoipStatReportResp* other);

  // implements Message ----------------------------------------------

  inline VoipStatReportResp* New() const PROTOBUF_FINAL { return New(NULL); }

  VoipStatReportResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoipStatReportResp& from);
  void MergeFrom(const VoipStatReportResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoipStatReportResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // @@protoc_insertion_point(class_scope:micromsg.VoipStatReportResp)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseResponse* baseresponse_;
  friend struct protobuf_mmvoip_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoipCompleteStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.VoipCompleteStatus) */ {
 public:
  VoipCompleteStatus();
  virtual ~VoipCompleteStatus();

  VoipCompleteStatus(const VoipCompleteStatus& from);

  inline VoipCompleteStatus& operator=(const VoipCompleteStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoipCompleteStatus& default_instance();

  static inline const VoipCompleteStatus* internal_default_instance() {
    return reinterpret_cast<const VoipCompleteStatus*>(
               &_VoipCompleteStatus_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(VoipCompleteStatus* other);

  // implements Message ----------------------------------------------

  inline VoipCompleteStatus* New() const PROTOBUF_FINAL { return New(NULL); }

  VoipCompleteStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoipCompleteStatus& from);
  void MergeFrom(const VoipCompleteStatus& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoipCompleteStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.SKBuiltinBuffer_t Buffer = 4;
  bool has_buffer() const;
  void clear_buffer();
  static const int kBufferFieldNumber = 4;
  const ::micromsg::SKBuiltinBuffer_t& buffer() const;
  ::micromsg::SKBuiltinBuffer_t* mutable_buffer();
  ::micromsg::SKBuiltinBuffer_t* release_buffer();
  void set_allocated_buffer(::micromsg::SKBuiltinBuffer_t* buffer);

  // required int32 CmdId = 1;
  bool has_cmdid() const;
  void clear_cmdid();
  static const int kCmdIdFieldNumber = 1;
  ::google::protobuf::int32 cmdid() const;
  void set_cmdid(::google::protobuf::int32 value);

  // required uint32 Uin = 2;
  bool has_uin() const;
  void clear_uin();
  static const int kUinFieldNumber = 2;
  ::google::protobuf::uint32 uin() const;
  void set_uin(::google::protobuf::uint32 value);

  // required uint32 Key = 3;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 3;
  ::google::protobuf::uint32 key() const;
  void set_key(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.VoipCompleteStatus)
 private:
  void set_has_cmdid();
  void clear_has_cmdid();
  void set_has_uin();
  void clear_has_uin();
  void set_has_key();
  void clear_has_key();
  void set_has_buffer();
  void clear_has_buffer();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::SKBuiltinBuffer_t* buffer_;
  ::google::protobuf::int32 cmdid_;
  ::google::protobuf::uint32 uin_;
  ::google::protobuf::uint32 key_;
  friend struct protobuf_mmvoip_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoipCompleteStatusList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.VoipCompleteStatusList) */ {
 public:
  VoipCompleteStatusList();
  virtual ~VoipCompleteStatusList();

  VoipCompleteStatusList(const VoipCompleteStatusList& from);

  inline VoipCompleteStatusList& operator=(const VoipCompleteStatusList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoipCompleteStatusList& default_instance();

  static inline const VoipCompleteStatusList* internal_default_instance() {
    return reinterpret_cast<const VoipCompleteStatusList*>(
               &_VoipCompleteStatusList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(VoipCompleteStatusList* other);

  // implements Message ----------------------------------------------

  inline VoipCompleteStatusList* New() const PROTOBUF_FINAL { return New(NULL); }

  VoipCompleteStatusList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoipCompleteStatusList& from);
  void MergeFrom(const VoipCompleteStatusList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoipCompleteStatusList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.VoipCompleteStatus CompleteStatus = 2;
  int completestatus_size() const;
  void clear_completestatus();
  static const int kCompleteStatusFieldNumber = 2;
  const ::micromsg::VoipCompleteStatus& completestatus(int index) const;
  ::micromsg::VoipCompleteStatus* mutable_completestatus(int index);
  ::micromsg::VoipCompleteStatus* add_completestatus();
  ::google::protobuf::RepeatedPtrField< ::micromsg::VoipCompleteStatus >*
      mutable_completestatus();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::VoipCompleteStatus >&
      completestatus() const;

  // required int32 Count = 1;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // required uint32 Seq = 3;
  bool has_seq() const;
  void clear_seq();
  static const int kSeqFieldNumber = 3;
  ::google::protobuf::uint32 seq() const;
  void set_seq(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.VoipCompleteStatusList)
 private:
  void set_has_count();
  void clear_has_count();
  void set_has_seq();
  void clear_has_seq();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::VoipCompleteStatus > completestatus_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::uint32 seq_;
  friend struct protobuf_mmvoip_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoipRedirectReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.VoipRedirectReq) */ {
 public:
  VoipRedirectReq();
  virtual ~VoipRedirectReq();

  VoipRedirectReq(const VoipRedirectReq& from);

  inline VoipRedirectReq& operator=(const VoipRedirectReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoipRedirectReq& default_instance();

  static inline const VoipRedirectReq* internal_default_instance() {
    return reinterpret_cast<const VoipRedirectReq*>(
               &_VoipRedirectReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(VoipRedirectReq* other);

  // implements Message ----------------------------------------------

  inline VoipRedirectReq* New() const PROTOBUF_FINAL { return New(NULL); }

  VoipRedirectReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoipRedirectReq& from);
  void MergeFrom(const VoipRedirectReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoipRedirectReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required int64 RoomKey = 3;
  bool has_roomkey() const;
  void clear_roomkey();
  static const int kRoomKeyFieldNumber = 3;
  ::google::protobuf::int64 roomkey() const;
  void set_roomkey(::google::protobuf::int64 value);

  // required int32 RoomId = 2;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 2;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // required int32 RoomMemberId = 4;
  bool has_roommemberid() const;
  void clear_roommemberid();
  static const int kRoomMemberIdFieldNumber = 4;
  ::google::protobuf::int32 roommemberid() const;
  void set_roommemberid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.VoipRedirectReq)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_roomid();
  void clear_has_roomid();
  void set_has_roomkey();
  void clear_has_roomkey();
  void set_has_roommemberid();
  void clear_has_roommemberid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::int64 roomkey_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 roommemberid_;
  friend struct protobuf_mmvoip_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoipRedirectResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.VoipRedirectResp) */ {
 public:
  VoipRedirectResp();
  virtual ~VoipRedirectResp();

  VoipRedirectResp(const VoipRedirectResp& from);

  inline VoipRedirectResp& operator=(const VoipRedirectResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoipRedirectResp& default_instance();

  static inline const VoipRedirectResp* internal_default_instance() {
    return reinterpret_cast<const VoipRedirectResp*>(
               &_VoipRedirectResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    32;

  void Swap(VoipRedirectResp* other);

  // implements Message ----------------------------------------------

  inline VoipRedirectResp* New() const PROTOBUF_FINAL { return New(NULL); }

  VoipRedirectResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoipRedirectResp& from);
  void MergeFrom(const VoipRedirectResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoipRedirectResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.VoipAddr RelayAddrList = 4;
  int relayaddrlist_size() const;
  void clear_relayaddrlist();
  static const int kRelayAddrListFieldNumber = 4;
  const ::micromsg::VoipAddr& relayaddrlist(int index) const;
  ::micromsg::VoipAddr* mutable_relayaddrlist(int index);
  ::micromsg::VoipAddr* add_relayaddrlist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::VoipAddr >*
      mutable_relayaddrlist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::VoipAddr >&
      relayaddrlist() const;

  // repeated .micromsg.VoipAddr PunchAddrList = 6;
  int punchaddrlist_size() const;
  void clear_punchaddrlist();
  static const int kPunchAddrListFieldNumber = 6;
  const ::micromsg::VoipAddr& punchaddrlist(int index) const;
  ::micromsg::VoipAddr* mutable_punchaddrlist(int index);
  ::micromsg::VoipAddr* add_punchaddrlist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::VoipAddr >*
      mutable_punchaddrlist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::VoipAddr >&
      punchaddrlist() const;

  // repeated .micromsg.VoipAddr TcpAddrList = 10;
  int tcpaddrlist_size() const;
  void clear_tcpaddrlist();
  static const int kTcpAddrListFieldNumber = 10;
  const ::micromsg::VoipAddr& tcpaddrlist(int index) const;
  ::micromsg::VoipAddr* mutable_tcpaddrlist(int index);
  ::micromsg::VoipAddr* add_tcpaddrlist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::VoipAddr >*
      mutable_tcpaddrlist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::VoipAddr >&
      tcpaddrlist() const;

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required int32 RoomId = 2;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 2;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // required int32 RelayAddrCount = 3;
  bool has_relayaddrcount() const;
  void clear_relayaddrcount();
  static const int kRelayAddrCountFieldNumber = 3;
  ::google::protobuf::int32 relayaddrcount() const;
  void set_relayaddrcount(::google::protobuf::int32 value);

  // required int32 PunchAddrCount = 5;
  bool has_punchaddrcount() const;
  void clear_punchaddrcount();
  static const int kPunchAddrCountFieldNumber = 5;
  ::google::protobuf::int32 punchaddrcount() const;
  void set_punchaddrcount(::google::protobuf::int32 value);

  // required int32 RoomMemberId = 8;
  bool has_roommemberid() const;
  void clear_roommemberid();
  static const int kRoomMemberIdFieldNumber = 8;
  ::google::protobuf::int32 roommemberid() const;
  void set_roommemberid(::google::protobuf::int32 value);

  // required int64 RoomKey = 7;
  bool has_roomkey() const;
  void clear_roomkey();
  static const int kRoomKeyFieldNumber = 7;
  ::google::protobuf::int64 roomkey() const;
  void set_roomkey(::google::protobuf::int64 value);

  // optional int32 TcpAddrCount = 9;
  bool has_tcpaddrcount() const;
  void clear_tcpaddrcount();
  static const int kTcpAddrCountFieldNumber = 9;
  ::google::protobuf::int32 tcpaddrcount() const;
  void set_tcpaddrcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.VoipRedirectResp)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_roomid();
  void clear_has_roomid();
  void set_has_relayaddrcount();
  void clear_has_relayaddrcount();
  void set_has_punchaddrcount();
  void clear_has_punchaddrcount();
  void set_has_roomkey();
  void clear_has_roomkey();
  void set_has_roommemberid();
  void clear_has_roommemberid();
  void set_has_tcpaddrcount();
  void clear_has_tcpaddrcount();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::VoipAddr > relayaddrlist_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::VoipAddr > punchaddrlist_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::VoipAddr > tcpaddrlist_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 relayaddrcount_;
  ::google::protobuf::int32 punchaddrcount_;
  ::google::protobuf::int32 roommemberid_;
  ::google::protobuf::int64 roomkey_;
  ::google::protobuf::int32 tcpaddrcount_;
  friend struct protobuf_mmvoip_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoipDoubleLinkSwitchReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.VoipDoubleLinkSwitchReq) */ {
 public:
  VoipDoubleLinkSwitchReq();
  virtual ~VoipDoubleLinkSwitchReq();

  VoipDoubleLinkSwitchReq(const VoipDoubleLinkSwitchReq& from);

  inline VoipDoubleLinkSwitchReq& operator=(const VoipDoubleLinkSwitchReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoipDoubleLinkSwitchReq& default_instance();

  static inline const VoipDoubleLinkSwitchReq* internal_default_instance() {
    return reinterpret_cast<const VoipDoubleLinkSwitchReq*>(
               &_VoipDoubleLinkSwitchReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    33;

  void Swap(VoipDoubleLinkSwitchReq* other);

  // implements Message ----------------------------------------------

  inline VoipDoubleLinkSwitchReq* New() const PROTOBUF_FINAL { return New(NULL); }

  VoipDoubleLinkSwitchReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoipDoubleLinkSwitchReq& from);
  void MergeFrom(const VoipDoubleLinkSwitchReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoipDoubleLinkSwitchReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required .micromsg.SKBuiltinBuffer_t Buffer = 10;
  bool has_buffer() const;
  void clear_buffer();
  static const int kBufferFieldNumber = 10;
  const ::micromsg::SKBuiltinBuffer_t& buffer() const;
  ::micromsg::SKBuiltinBuffer_t* mutable_buffer();
  ::micromsg::SKBuiltinBuffer_t* release_buffer();
  void set_allocated_buffer(::micromsg::SKBuiltinBuffer_t* buffer);

  // required int64 RoomKey = 3;
  bool has_roomkey() const;
  void clear_roomkey();
  static const int kRoomKeyFieldNumber = 3;
  ::google::protobuf::int64 roomkey() const;
  void set_roomkey(::google::protobuf::int64 value);

  // required int32 RoomId = 2;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 2;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // required int32 RoomMemberId = 4;
  bool has_roommemberid() const;
  void clear_roommemberid();
  static const int kRoomMemberIdFieldNumber = 4;
  ::google::protobuf::int32 roommemberid() const;
  void set_roommemberid(::google::protobuf::int32 value);

  // required int32 CurLinkType = 5;
  bool has_curlinktype() const;
  void clear_curlinktype();
  static const int kCurLinkTypeFieldNumber = 5;
  ::google::protobuf::int32 curlinktype() const;
  void set_curlinktype(::google::protobuf::int32 value);

  // required int32 IsRelayConnReady = 6;
  bool has_isrelayconnready() const;
  void clear_isrelayconnready();
  static const int kIsRelayConnReadyFieldNumber = 6;
  ::google::protobuf::int32 isrelayconnready() const;
  void set_isrelayconnready(::google::protobuf::int32 value);

  // required int32 IsDirectConnReady = 7;
  bool has_isdirectconnready() const;
  void clear_isdirectconnready();
  static const int kIsDirectConnReadyFieldNumber = 7;
  ::google::protobuf::int32 isdirectconnready() const;
  void set_isdirectconnready(::google::protobuf::int32 value);

  // required int32 CurStrategy = 8;
  bool has_curstrategy() const;
  void clear_curstrategy();
  static const int kCurStrategyFieldNumber = 8;
  ::google::protobuf::int32 curstrategy() const;
  void set_curstrategy(::google::protobuf::int32 value);

  // required int32 BufferVersion = 9;
  bool has_bufferversion() const;
  void clear_bufferversion();
  static const int kBufferVersionFieldNumber = 9;
  ::google::protobuf::int32 bufferversion() const;
  void set_bufferversion(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.VoipDoubleLinkSwitchReq)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_roomid();
  void clear_has_roomid();
  void set_has_roomkey();
  void clear_has_roomkey();
  void set_has_roommemberid();
  void clear_has_roommemberid();
  void set_has_curlinktype();
  void clear_has_curlinktype();
  void set_has_isrelayconnready();
  void clear_has_isrelayconnready();
  void set_has_isdirectconnready();
  void clear_has_isdirectconnready();
  void set_has_curstrategy();
  void clear_has_curstrategy();
  void set_has_bufferversion();
  void clear_has_bufferversion();
  void set_has_buffer();
  void clear_has_buffer();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseRequest* baserequest_;
  ::micromsg::SKBuiltinBuffer_t* buffer_;
  ::google::protobuf::int64 roomkey_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 roommemberid_;
  ::google::protobuf::int32 curlinktype_;
  ::google::protobuf::int32 isrelayconnready_;
  ::google::protobuf::int32 isdirectconnready_;
  ::google::protobuf::int32 curstrategy_;
  ::google::protobuf::int32 bufferversion_;
  friend struct protobuf_mmvoip_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoipDoubleLinkSwitchRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.VoipDoubleLinkSwitchRsp) */ {
 public:
  VoipDoubleLinkSwitchRsp();
  virtual ~VoipDoubleLinkSwitchRsp();

  VoipDoubleLinkSwitchRsp(const VoipDoubleLinkSwitchRsp& from);

  inline VoipDoubleLinkSwitchRsp& operator=(const VoipDoubleLinkSwitchRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoipDoubleLinkSwitchRsp& default_instance();

  static inline const VoipDoubleLinkSwitchRsp* internal_default_instance() {
    return reinterpret_cast<const VoipDoubleLinkSwitchRsp*>(
               &_VoipDoubleLinkSwitchRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    34;

  void Swap(VoipDoubleLinkSwitchRsp* other);

  // implements Message ----------------------------------------------

  inline VoipDoubleLinkSwitchRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  VoipDoubleLinkSwitchRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoipDoubleLinkSwitchRsp& from);
  void MergeFrom(const VoipDoubleLinkSwitchRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoipDoubleLinkSwitchRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required int64 RoomKey = 3;
  bool has_roomkey() const;
  void clear_roomkey();
  static const int kRoomKeyFieldNumber = 3;
  ::google::protobuf::int64 roomkey() const;
  void set_roomkey(::google::protobuf::int64 value);

  // required int32 RoomId = 2;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 2;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // required int32 RoomMemberId = 4;
  bool has_roommemberid() const;
  void clear_roommemberid();
  static const int kRoomMemberIdFieldNumber = 4;
  ::google::protobuf::int32 roommemberid() const;
  void set_roommemberid(::google::protobuf::int32 value);

  // required int32 ReportFlag = 5;
  bool has_reportflag() const;
  void clear_reportflag();
  static const int kReportFlagFieldNumber = 5;
  ::google::protobuf::int32 reportflag() const;
  void set_reportflag(::google::protobuf::int32 value);

  // required int32 SwitchToLinkType = 6;
  bool has_switchtolinktype() const;
  void clear_switchtolinktype();
  static const int kSwitchToLinkTypeFieldNumber = 6;
  ::google::protobuf::int32 switchtolinktype() const;
  void set_switchtolinktype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.VoipDoubleLinkSwitchRsp)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_roomid();
  void clear_has_roomid();
  void set_has_roomkey();
  void clear_has_roomkey();
  void set_has_roommemberid();
  void clear_has_roommemberid();
  void set_has_reportflag();
  void clear_has_reportflag();
  void set_has_switchtolinktype();
  void clear_has_switchtolinktype();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::int64 roomkey_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 roommemberid_;
  ::google::protobuf::int32 reportflag_;
  ::google::protobuf::int32 switchtolinktype_;
  friend struct protobuf_mmvoip_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoipSpeedTestReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.VoipSpeedTestReq) */ {
 public:
  VoipSpeedTestReq();
  virtual ~VoipSpeedTestReq();

  VoipSpeedTestReq(const VoipSpeedTestReq& from);

  inline VoipSpeedTestReq& operator=(const VoipSpeedTestReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoipSpeedTestReq& default_instance();

  static inline const VoipSpeedTestReq* internal_default_instance() {
    return reinterpret_cast<const VoipSpeedTestReq*>(
               &_VoipSpeedTestReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    35;

  void Swap(VoipSpeedTestReq* other);

  // implements Message ----------------------------------------------

  inline VoipSpeedTestReq* New() const PROTOBUF_FINAL { return New(NULL); }

  VoipSpeedTestReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoipSpeedTestReq& from);
  void MergeFrom(const VoipSpeedTestReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoipSpeedTestReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 C2CRtt = 9 [packed = true];
  int c2crtt_size() const;
  void clear_c2crtt();
  static const int kC2CRttFieldNumber = 9;
  ::google::protobuf::uint32 c2crtt(int index) const;
  void set_c2crtt(int index, ::google::protobuf::uint32 value);
  void add_c2crtt(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      c2crtt() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_c2crtt();

  // repeated uint32 C2SRtt = 12 [packed = true];
  int c2srtt_size() const;
  void clear_c2srtt();
  static const int kC2SRttFieldNumber = 12;
  ::google::protobuf::uint32 c2srtt(int index) const;
  void set_c2srtt(int index, ::google::protobuf::uint32 value);
  void add_c2srtt(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      c2srtt() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_c2srtt();

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required int32 RoomId = 2;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 2;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // required uint32 CallType = 3;
  bool has_calltype() const;
  void clear_calltype();
  static const int kCallTypeFieldNumber = 3;
  ::google::protobuf::uint32 calltype() const;
  void set_calltype(::google::protobuf::uint32 value);

  // required uint32 NetType = 4;
  bool has_nettype() const;
  void clear_nettype();
  static const int kNetTypeFieldNumber = 4;
  ::google::protobuf::uint32 nettype() const;
  void set_nettype(::google::protobuf::uint32 value);

  // required uint32 IsConnecting = 5;
  bool has_isconnecting() const;
  void clear_isconnecting();
  static const int kIsConnectingFieldNumber = 5;
  ::google::protobuf::uint32 isconnecting() const;
  void set_isconnecting(::google::protobuf::uint32 value);

  // required uint32 IsConnected = 6;
  bool has_isconnected() const;
  void clear_isconnected();
  static const int kIsConnectedFieldNumber = 6;
  ::google::protobuf::uint32 isconnected() const;
  void set_isconnected(::google::protobuf::uint32 value);

  // required uint32 C2CLossrate = 7;
  bool has_c2clossrate() const;
  void clear_c2clossrate();
  static const int kC2CLossrateFieldNumber = 7;
  ::google::protobuf::uint32 c2clossrate() const;
  void set_c2clossrate(::google::protobuf::uint32 value);

  // required uint32 C2CRttCnt = 8;
  bool has_c2crttcnt() const;
  void clear_c2crttcnt();
  static const int kC2CRttCntFieldNumber = 8;
  ::google::protobuf::uint32 c2crttcnt() const;
  void set_c2crttcnt(::google::protobuf::uint32 value);

  // required uint32 C2SDownLossRate = 10;
  bool has_c2sdownlossrate() const;
  void clear_c2sdownlossrate();
  static const int kC2SDownLossRateFieldNumber = 10;
  ::google::protobuf::uint32 c2sdownlossrate() const;
  void set_c2sdownlossrate(::google::protobuf::uint32 value);

  // required uint32 C2SRttCnt = 11;
  bool has_c2srttcnt() const;
  void clear_c2srttcnt();
  static const int kC2SRttCntFieldNumber = 11;
  ::google::protobuf::uint32 c2srttcnt() const;
  void set_c2srttcnt(::google::protobuf::uint32 value);

  // required uint32 SendPkts = 13;
  bool has_sendpkts() const;
  void clear_sendpkts();
  static const int kSendPktsFieldNumber = 13;
  ::google::protobuf::uint32 sendpkts() const;
  void set_sendpkts(::google::protobuf::uint32 value);

  // required uint32 RcvPkts = 14;
  bool has_rcvpkts() const;
  void clear_rcvpkts();
  static const int kRcvPktsFieldNumber = 14;
  ::google::protobuf::uint32 rcvpkts() const;
  void set_rcvpkts(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.VoipSpeedTestReq)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_roomid();
  void clear_has_roomid();
  void set_has_calltype();
  void clear_has_calltype();
  void set_has_nettype();
  void clear_has_nettype();
  void set_has_isconnecting();
  void clear_has_isconnecting();
  void set_has_isconnected();
  void clear_has_isconnected();
  void set_has_c2clossrate();
  void clear_has_c2clossrate();
  void set_has_c2crttcnt();
  void clear_has_c2crttcnt();
  void set_has_c2sdownlossrate();
  void clear_has_c2sdownlossrate();
  void set_has_c2srttcnt();
  void clear_has_c2srttcnt();
  void set_has_sendpkts();
  void clear_has_sendpkts();
  void set_has_rcvpkts();
  void clear_has_rcvpkts();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > c2crtt_;
  mutable int _c2crtt_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > c2srtt_;
  mutable int _c2srtt_cached_byte_size_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::uint32 calltype_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 isconnecting_;
  ::google::protobuf::uint32 isconnected_;
  ::google::protobuf::uint32 c2clossrate_;
  ::google::protobuf::uint32 c2crttcnt_;
  ::google::protobuf::uint32 c2sdownlossrate_;
  ::google::protobuf::uint32 c2srttcnt_;
  ::google::protobuf::uint32 sendpkts_;
  ::google::protobuf::uint32 rcvpkts_;
  friend struct protobuf_mmvoip_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SpeedTestSvr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.SpeedTestSvr) */ {
 public:
  SpeedTestSvr();
  virtual ~SpeedTestSvr();

  SpeedTestSvr(const SpeedTestSvr& from);

  inline SpeedTestSvr& operator=(const SpeedTestSvr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpeedTestSvr& default_instance();

  static inline const SpeedTestSvr* internal_default_instance() {
    return reinterpret_cast<const SpeedTestSvr*>(
               &_SpeedTestSvr_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    36;

  void Swap(SpeedTestSvr* other);

  // implements Message ----------------------------------------------

  inline SpeedTestSvr* New() const PROTOBUF_FINAL { return New(NULL); }

  SpeedTestSvr* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SpeedTestSvr& from);
  void MergeFrom(const SpeedTestSvr& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SpeedTestSvr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.VoipAddr Addr = 1;
  bool has_addr() const;
  void clear_addr();
  static const int kAddrFieldNumber = 1;
  const ::micromsg::VoipAddr& addr() const;
  ::micromsg::VoipAddr* mutable_addr();
  ::micromsg::VoipAddr* release_addr();
  void set_allocated_addr(::micromsg::VoipAddr* addr);

  // required uint32 TestCnt = 2;
  bool has_testcnt() const;
  void clear_testcnt();
  static const int kTestCntFieldNumber = 2;
  ::google::protobuf::uint32 testcnt() const;
  void set_testcnt(::google::protobuf::uint32 value);

  // required uint32 TestGap = 3;
  bool has_testgap() const;
  void clear_testgap();
  static const int kTestGapFieldNumber = 3;
  ::google::protobuf::uint32 testgap() const;
  void set_testgap(::google::protobuf::uint32 value);

  // required uint32 Timeout = 4;
  bool has_timeout() const;
  void clear_timeout();
  static const int kTimeoutFieldNumber = 4;
  ::google::protobuf::uint32 timeout() const;
  void set_timeout(::google::protobuf::uint32 value);

  // required uint32 PktSize = 5;
  bool has_pktsize() const;
  void clear_pktsize();
  static const int kPktSizeFieldNumber = 5;
  ::google::protobuf::uint32 pktsize() const;
  void set_pktsize(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.SpeedTestSvr)
 private:
  void set_has_addr();
  void clear_has_addr();
  void set_has_testcnt();
  void clear_has_testcnt();
  void set_has_testgap();
  void clear_has_testgap();
  void set_has_timeout();
  void clear_has_timeout();
  void set_has_pktsize();
  void clear_has_pktsize();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::VoipAddr* addr_;
  ::google::protobuf::uint32 testcnt_;
  ::google::protobuf::uint32 testgap_;
  ::google::protobuf::uint32 timeout_;
  ::google::protobuf::uint32 pktsize_;
  friend struct protobuf_mmvoip_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoipSpeedTestRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.VoipSpeedTestRsp) */ {
 public:
  VoipSpeedTestRsp();
  virtual ~VoipSpeedTestRsp();

  VoipSpeedTestRsp(const VoipSpeedTestRsp& from);

  inline VoipSpeedTestRsp& operator=(const VoipSpeedTestRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoipSpeedTestRsp& default_instance();

  static inline const VoipSpeedTestRsp* internal_default_instance() {
    return reinterpret_cast<const VoipSpeedTestRsp*>(
               &_VoipSpeedTestRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    37;

  void Swap(VoipSpeedTestRsp* other);

  // implements Message ----------------------------------------------

  inline VoipSpeedTestRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  VoipSpeedTestRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoipSpeedTestRsp& from);
  void MergeFrom(const VoipSpeedTestRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoipSpeedTestRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.SpeedTestSvr SvrList = 5;
  int svrlist_size() const;
  void clear_svrlist();
  static const int kSvrListFieldNumber = 5;
  const ::micromsg::SpeedTestSvr& svrlist(int index) const;
  ::micromsg::SpeedTestSvr* mutable_svrlist(int index);
  ::micromsg::SpeedTestSvr* add_svrlist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::SpeedTestSvr >*
      mutable_svrlist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::SpeedTestSvr >&
      svrlist() const;

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required uint64 TestId = 3;
  bool has_testid() const;
  void clear_testid();
  static const int kTestIdFieldNumber = 3;
  ::google::protobuf::uint64 testid() const;
  void set_testid(::google::protobuf::uint64 value);

  // required uint32 NeedTest = 2;
  bool has_needtest() const;
  void clear_needtest();
  static const int kNeedTestFieldNumber = 2;
  ::google::protobuf::uint32 needtest() const;
  void set_needtest(::google::protobuf::uint32 value);

  // required uint32 SvrListCnt = 4;
  bool has_svrlistcnt() const;
  void clear_svrlistcnt();
  static const int kSvrListCntFieldNumber = 4;
  ::google::protobuf::uint32 svrlistcnt() const;
  void set_svrlistcnt(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.VoipSpeedTestRsp)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_needtest();
  void clear_has_needtest();
  void set_has_testid();
  void clear_has_testid();
  void set_has_svrlistcnt();
  void clear_has_svrlistcnt();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::SpeedTestSvr > svrlist_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::uint64 testid_;
  ::google::protobuf::uint32 needtest_;
  ::google::protobuf::uint32 svrlistcnt_;
  friend struct protobuf_mmvoip_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SpeedResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.SpeedResult) */ {
 public:
  SpeedResult();
  virtual ~SpeedResult();

  SpeedResult(const SpeedResult& from);

  inline SpeedResult& operator=(const SpeedResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpeedResult& default_instance();

  static inline const SpeedResult* internal_default_instance() {
    return reinterpret_cast<const SpeedResult*>(
               &_SpeedResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    38;

  void Swap(SpeedResult* other);

  // implements Message ----------------------------------------------

  inline SpeedResult* New() const PROTOBUF_FINAL { return New(NULL); }

  SpeedResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SpeedResult& from);
  void MergeFrom(const SpeedResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SpeedResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 Rtt = 9 [packed = true];
  int rtt_size() const;
  void clear_rtt();
  static const int kRttFieldNumber = 9;
  ::google::protobuf::uint32 rtt(int index) const;
  void set_rtt(int index, ::google::protobuf::uint32 value);
  void add_rtt(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      rtt() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_rtt();

  // repeated uint32 DownSeq = 11 [packed = true];
  int downseq_size() const;
  void clear_downseq();
  static const int kDownSeqFieldNumber = 11;
  ::google::protobuf::uint32 downseq(int index) const;
  void set_downseq(int index, ::google::protobuf::uint32 value);
  void add_downseq(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      downseq() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_downseq();

  // repeated uint32 UpSeq = 13 [packed = true];
  int upseq_size() const;
  void clear_upseq();
  static const int kUpSeqFieldNumber = 13;
  ::google::protobuf::uint32 upseq(int index) const;
  void set_upseq(int index, ::google::protobuf::uint32 value);
  void add_upseq(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      upseq() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_upseq();

  // required .micromsg.VoipAddr Addr = 4;
  bool has_addr() const;
  void clear_addr();
  static const int kAddrFieldNumber = 4;
  const ::micromsg::VoipAddr& addr() const;
  ::micromsg::VoipAddr* mutable_addr();
  ::micromsg::VoipAddr* release_addr();
  void set_allocated_addr(::micromsg::VoipAddr* addr);

  // required uint32 ClientIp = 1;
  bool has_clientip() const;
  void clear_clientip();
  static const int kClientIpFieldNumber = 1;
  ::google::protobuf::uint32 clientip() const;
  void set_clientip(::google::protobuf::uint32 value);

  // required uint32 TestPktSize = 2;
  bool has_testpktsize() const;
  void clear_testpktsize();
  static const int kTestPktSizeFieldNumber = 2;
  ::google::protobuf::uint32 testpktsize() const;
  void set_testpktsize(::google::protobuf::uint32 value);

  // required uint32 TestCnt = 3;
  bool has_testcnt() const;
  void clear_testcnt();
  static const int kTestCntFieldNumber = 3;
  ::google::protobuf::uint32 testcnt() const;
  void set_testcnt(::google::protobuf::uint32 value);

  // required uint32 AvgRtt = 5;
  bool has_avgrtt() const;
  void clear_avgrtt();
  static const int kAvgRttFieldNumber = 5;
  ::google::protobuf::uint32 avgrtt() const;
  void set_avgrtt(::google::protobuf::uint32 value);

  // required uint32 MinRtt = 6;
  bool has_minrtt() const;
  void clear_minrtt();
  static const int kMinRttFieldNumber = 6;
  ::google::protobuf::uint32 minrtt() const;
  void set_minrtt(::google::protobuf::uint32 value);

  // required uint32 MaxRtt = 7;
  bool has_maxrtt() const;
  void clear_maxrtt();
  static const int kMaxRttFieldNumber = 7;
  ::google::protobuf::uint32 maxrtt() const;
  void set_maxrtt(::google::protobuf::uint32 value);

  // required uint32 RttCnt = 8;
  bool has_rttcnt() const;
  void clear_rttcnt();
  static const int kRttCntFieldNumber = 8;
  ::google::protobuf::uint32 rttcnt() const;
  void set_rttcnt(::google::protobuf::uint32 value);

  // required uint32 DownSeqCnt = 10;
  bool has_downseqcnt() const;
  void clear_downseqcnt();
  static const int kDownSeqCntFieldNumber = 10;
  ::google::protobuf::uint32 downseqcnt() const;
  void set_downseqcnt(::google::protobuf::uint32 value);

  // required uint32 UpSeqCnt = 12;
  bool has_upseqcnt() const;
  void clear_upseqcnt();
  static const int kUpSeqCntFieldNumber = 12;
  ::google::protobuf::uint32 upseqcnt() const;
  void set_upseqcnt(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.SpeedResult)
 private:
  void set_has_clientip();
  void clear_has_clientip();
  void set_has_testpktsize();
  void clear_has_testpktsize();
  void set_has_testcnt();
  void clear_has_testcnt();
  void set_has_addr();
  void clear_has_addr();
  void set_has_avgrtt();
  void clear_has_avgrtt();
  void set_has_minrtt();
  void clear_has_minrtt();
  void set_has_maxrtt();
  void clear_has_maxrtt();
  void set_has_rttcnt();
  void clear_has_rttcnt();
  void set_has_downseqcnt();
  void clear_has_downseqcnt();
  void set_has_upseqcnt();
  void clear_has_upseqcnt();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > rtt_;
  mutable int _rtt_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > downseq_;
  mutable int _downseq_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > upseq_;
  mutable int _upseq_cached_byte_size_;
  ::micromsg::VoipAddr* addr_;
  ::google::protobuf::uint32 clientip_;
  ::google::protobuf::uint32 testpktsize_;
  ::google::protobuf::uint32 testcnt_;
  ::google::protobuf::uint32 avgrtt_;
  ::google::protobuf::uint32 minrtt_;
  ::google::protobuf::uint32 maxrtt_;
  ::google::protobuf::uint32 rttcnt_;
  ::google::protobuf::uint32 downseqcnt_;
  ::google::protobuf::uint32 upseqcnt_;
  friend struct protobuf_mmvoip_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoipSpeedResultReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.VoipSpeedResultReq) */ {
 public:
  VoipSpeedResultReq();
  virtual ~VoipSpeedResultReq();

  VoipSpeedResultReq(const VoipSpeedResultReq& from);

  inline VoipSpeedResultReq& operator=(const VoipSpeedResultReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoipSpeedResultReq& default_instance();

  static inline const VoipSpeedResultReq* internal_default_instance() {
    return reinterpret_cast<const VoipSpeedResultReq*>(
               &_VoipSpeedResultReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    39;

  void Swap(VoipSpeedResultReq* other);

  // implements Message ----------------------------------------------

  inline VoipSpeedResultReq* New() const PROTOBUF_FINAL { return New(NULL); }

  VoipSpeedResultReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoipSpeedResultReq& from);
  void MergeFrom(const VoipSpeedResultReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoipSpeedResultReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.SpeedResult Result = 11;
  int result_size() const;
  void clear_result();
  static const int kResultFieldNumber = 11;
  const ::micromsg::SpeedResult& result(int index) const;
  ::micromsg::SpeedResult* mutable_result(int index);
  ::micromsg::SpeedResult* add_result();
  ::google::protobuf::RepeatedPtrField< ::micromsg::SpeedResult >*
      mutable_result();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::SpeedResult >&
      result() const;

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required .micromsg.SKBuiltinString_t NetName = 5;
  bool has_netname() const;
  void clear_netname();
  static const int kNetNameFieldNumber = 5;
  const ::micromsg::SKBuiltinString_t& netname() const;
  ::micromsg::SKBuiltinString_t* mutable_netname();
  ::micromsg::SKBuiltinString_t* release_netname();
  void set_allocated_netname(::micromsg::SKBuiltinString_t* netname);

  // required .micromsg.SKBuiltinString_t WifiName = 6;
  bool has_wifiname() const;
  void clear_wifiname();
  static const int kWifiNameFieldNumber = 6;
  const ::micromsg::SKBuiltinString_t& wifiname() const;
  ::micromsg::SKBuiltinString_t* mutable_wifiname();
  ::micromsg::SKBuiltinString_t* release_wifiname();
  void set_allocated_wifiname(::micromsg::SKBuiltinString_t* wifiname);

  // required uint64 TestId = 2;
  bool has_testid() const;
  void clear_testid();
  static const int kTestIdFieldNumber = 2;
  ::google::protobuf::uint64 testid() const;
  void set_testid(::google::protobuf::uint64 value);

  // required uint64 RoomKey = 3;
  bool has_roomkey() const;
  void clear_roomkey();
  static const int kRoomKeyFieldNumber = 3;
  ::google::protobuf::uint64 roomkey() const;
  void set_roomkey(::google::protobuf::uint64 value);

  // required uint32 NetType = 4;
  bool has_nettype() const;
  void clear_nettype();
  static const int kNetTypeFieldNumber = 4;
  ::google::protobuf::uint32 nettype() const;
  void set_nettype(::google::protobuf::uint32 value);

  // required uint32 RoomId = 9;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 9;
  ::google::protobuf::uint32 roomid() const;
  void set_roomid(::google::protobuf::uint32 value);

  // required double Longitude = 7;
  bool has_longitude() const;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 7;
  double longitude() const;
  void set_longitude(double value);

  // required double Latitude = 8;
  bool has_latitude() const;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 8;
  double latitude() const;
  void set_latitude(double value);

  // required uint32 ResultCnt = 10;
  bool has_resultcnt() const;
  void clear_resultcnt();
  static const int kResultCntFieldNumber = 10;
  ::google::protobuf::uint32 resultcnt() const;
  void set_resultcnt(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.VoipSpeedResultReq)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_testid();
  void clear_has_testid();
  void set_has_roomkey();
  void clear_has_roomkey();
  void set_has_nettype();
  void clear_has_nettype();
  void set_has_netname();
  void clear_has_netname();
  void set_has_wifiname();
  void clear_has_wifiname();
  void set_has_longitude();
  void clear_has_longitude();
  void set_has_latitude();
  void clear_has_latitude();
  void set_has_roomid();
  void clear_has_roomid();
  void set_has_resultcnt();
  void clear_has_resultcnt();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::SpeedResult > result_;
  ::micromsg::BaseRequest* baserequest_;
  ::micromsg::SKBuiltinString_t* netname_;
  ::micromsg::SKBuiltinString_t* wifiname_;
  ::google::protobuf::uint64 testid_;
  ::google::protobuf::uint64 roomkey_;
  ::google::protobuf::uint32 nettype_;
  ::google::protobuf::uint32 roomid_;
  double longitude_;
  double latitude_;
  ::google::protobuf::uint32 resultcnt_;
  friend struct protobuf_mmvoip_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoipSpeedResultRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.VoipSpeedResultRsp) */ {
 public:
  VoipSpeedResultRsp();
  virtual ~VoipSpeedResultRsp();

  VoipSpeedResultRsp(const VoipSpeedResultRsp& from);

  inline VoipSpeedResultRsp& operator=(const VoipSpeedResultRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoipSpeedResultRsp& default_instance();

  static inline const VoipSpeedResultRsp* internal_default_instance() {
    return reinterpret_cast<const VoipSpeedResultRsp*>(
               &_VoipSpeedResultRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    40;

  void Swap(VoipSpeedResultRsp* other);

  // implements Message ----------------------------------------------

  inline VoipSpeedResultRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  VoipSpeedResultRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoipSpeedResultRsp& from);
  void MergeFrom(const VoipSpeedResultRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoipSpeedResultRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // @@protoc_insertion_point(class_scope:micromsg.VoipSpeedResultRsp)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseResponse* baseresponse_;
  friend struct protobuf_mmvoip_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// VoipRelayData

// required int32 Type = 1;
inline bool VoipRelayData::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VoipRelayData::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VoipRelayData::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VoipRelayData::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 VoipRelayData::type() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipRelayData.Type)
  return type_;
}
inline void VoipRelayData::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipRelayData.Type)
}

// required .micromsg.SKBuiltinBuffer_t Buffer = 2;
inline bool VoipRelayData::has_buffer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoipRelayData::set_has_buffer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoipRelayData::clear_has_buffer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoipRelayData::clear_buffer() {
  if (buffer_ != NULL) buffer_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_buffer();
}
inline const ::micromsg::SKBuiltinBuffer_t& VoipRelayData::buffer() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipRelayData.Buffer)
  return buffer_ != NULL ? *buffer_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinBuffer_t* VoipRelayData::mutable_buffer() {
  set_has_buffer();
  if (buffer_ == NULL) {
    buffer_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipRelayData.Buffer)
  return buffer_;
}
inline ::micromsg::SKBuiltinBuffer_t* VoipRelayData::release_buffer() {
  // @@protoc_insertion_point(field_release:micromsg.VoipRelayData.Buffer)
  clear_has_buffer();
  ::micromsg::SKBuiltinBuffer_t* temp = buffer_;
  buffer_ = NULL;
  return temp;
}
inline void VoipRelayData::set_allocated_buffer(::micromsg::SKBuiltinBuffer_t* buffer) {
  delete buffer_;
  buffer_ = buffer;
  if (buffer) {
    set_has_buffer();
  } else {
    clear_has_buffer();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipRelayData.Buffer)
}

// -------------------------------------------------------------------

// VoipAddr

// required int32 Ip = 1;
inline bool VoipAddr::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoipAddr::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoipAddr::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoipAddr::clear_ip() {
  ip_ = 0;
  clear_has_ip();
}
inline ::google::protobuf::int32 VoipAddr::ip() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAddr.Ip)
  return ip_;
}
inline void VoipAddr::set_ip(::google::protobuf::int32 value) {
  set_has_ip();
  ip_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAddr.Ip)
}

// required int32 Port = 2;
inline bool VoipAddr::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VoipAddr::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VoipAddr::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VoipAddr::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 VoipAddr::port() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAddr.Port)
  return port_;
}
inline void VoipAddr::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAddr.Port)
}

// -------------------------------------------------------------------

// VoipAddrSet

// required int32 Cnt = 1;
inline bool VoipAddrSet::has_cnt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoipAddrSet::set_has_cnt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoipAddrSet::clear_has_cnt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoipAddrSet::clear_cnt() {
  cnt_ = 0;
  clear_has_cnt();
}
inline ::google::protobuf::int32 VoipAddrSet::cnt() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAddrSet.Cnt)
  return cnt_;
}
inline void VoipAddrSet::set_cnt(::google::protobuf::int32 value) {
  set_has_cnt();
  cnt_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAddrSet.Cnt)
}

// repeated .micromsg.VoipAddr Addrs = 2;
inline int VoipAddrSet::addrs_size() const {
  return addrs_.size();
}
inline void VoipAddrSet::clear_addrs() {
  addrs_.Clear();
}
inline const ::micromsg::VoipAddr& VoipAddrSet::addrs(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAddrSet.Addrs)
  return addrs_.Get(index);
}
inline ::micromsg::VoipAddr* VoipAddrSet::mutable_addrs(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.VoipAddrSet.Addrs)
  return addrs_.Mutable(index);
}
inline ::micromsg::VoipAddr* VoipAddrSet::add_addrs() {
  // @@protoc_insertion_point(field_add:micromsg.VoipAddrSet.Addrs)
  return addrs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::VoipAddr >*
VoipAddrSet::mutable_addrs() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.VoipAddrSet.Addrs)
  return &addrs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::VoipAddr >&
VoipAddrSet::addrs() const {
  // @@protoc_insertion_point(field_list:micromsg.VoipAddrSet.Addrs)
  return addrs_;
}

// -------------------------------------------------------------------

// VoipMultiRelayData

// required .micromsg.VoipRelayData PeerId = 1;
inline bool VoipMultiRelayData::has_peerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoipMultiRelayData::set_has_peerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoipMultiRelayData::clear_has_peerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoipMultiRelayData::clear_peerid() {
  if (peerid_ != NULL) peerid_->::micromsg::VoipRelayData::Clear();
  clear_has_peerid();
}
inline const ::micromsg::VoipRelayData& VoipMultiRelayData::peerid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipMultiRelayData.PeerId)
  return peerid_ != NULL ? *peerid_
                         : *::micromsg::VoipRelayData::internal_default_instance();
}
inline ::micromsg::VoipRelayData* VoipMultiRelayData::mutable_peerid() {
  set_has_peerid();
  if (peerid_ == NULL) {
    peerid_ = new ::micromsg::VoipRelayData;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipMultiRelayData.PeerId)
  return peerid_;
}
inline ::micromsg::VoipRelayData* VoipMultiRelayData::release_peerid() {
  // @@protoc_insertion_point(field_release:micromsg.VoipMultiRelayData.PeerId)
  clear_has_peerid();
  ::micromsg::VoipRelayData* temp = peerid_;
  peerid_ = NULL;
  return temp;
}
inline void VoipMultiRelayData::set_allocated_peerid(::micromsg::VoipRelayData* peerid) {
  delete peerid_;
  peerid_ = peerid;
  if (peerid) {
    set_has_peerid();
  } else {
    clear_has_peerid();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipMultiRelayData.PeerId)
}

// required .micromsg.VoipRelayData CapInfo = 2;
inline bool VoipMultiRelayData::has_capinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VoipMultiRelayData::set_has_capinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VoipMultiRelayData::clear_has_capinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VoipMultiRelayData::clear_capinfo() {
  if (capinfo_ != NULL) capinfo_->::micromsg::VoipRelayData::Clear();
  clear_has_capinfo();
}
inline const ::micromsg::VoipRelayData& VoipMultiRelayData::capinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipMultiRelayData.CapInfo)
  return capinfo_ != NULL ? *capinfo_
                         : *::micromsg::VoipRelayData::internal_default_instance();
}
inline ::micromsg::VoipRelayData* VoipMultiRelayData::mutable_capinfo() {
  set_has_capinfo();
  if (capinfo_ == NULL) {
    capinfo_ = new ::micromsg::VoipRelayData;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipMultiRelayData.CapInfo)
  return capinfo_;
}
inline ::micromsg::VoipRelayData* VoipMultiRelayData::release_capinfo() {
  // @@protoc_insertion_point(field_release:micromsg.VoipMultiRelayData.CapInfo)
  clear_has_capinfo();
  ::micromsg::VoipRelayData* temp = capinfo_;
  capinfo_ = NULL;
  return temp;
}
inline void VoipMultiRelayData::set_allocated_capinfo(::micromsg::VoipRelayData* capinfo) {
  delete capinfo_;
  capinfo_ = capinfo;
  if (capinfo) {
    set_has_capinfo();
  } else {
    clear_has_capinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipMultiRelayData.CapInfo)
}

// required int32 SendingType = 3;
inline bool VoipMultiRelayData::has_sendingtype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VoipMultiRelayData::set_has_sendingtype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void VoipMultiRelayData::clear_has_sendingtype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void VoipMultiRelayData::clear_sendingtype() {
  sendingtype_ = 0;
  clear_has_sendingtype();
}
inline ::google::protobuf::int32 VoipMultiRelayData::sendingtype() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipMultiRelayData.SendingType)
  return sendingtype_;
}
inline void VoipMultiRelayData::set_sendingtype(::google::protobuf::int32 value) {
  set_has_sendingtype();
  sendingtype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipMultiRelayData.SendingType)
}

// optional .micromsg.VoipAddrSet VoipSvrAddr = 4;
inline bool VoipMultiRelayData::has_voipsvraddr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VoipMultiRelayData::set_has_voipsvraddr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VoipMultiRelayData::clear_has_voipsvraddr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VoipMultiRelayData::clear_voipsvraddr() {
  if (voipsvraddr_ != NULL) voipsvraddr_->::micromsg::VoipAddrSet::Clear();
  clear_has_voipsvraddr();
}
inline const ::micromsg::VoipAddrSet& VoipMultiRelayData::voipsvraddr() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipMultiRelayData.VoipSvrAddr)
  return voipsvraddr_ != NULL ? *voipsvraddr_
                         : *::micromsg::VoipAddrSet::internal_default_instance();
}
inline ::micromsg::VoipAddrSet* VoipMultiRelayData::mutable_voipsvraddr() {
  set_has_voipsvraddr();
  if (voipsvraddr_ == NULL) {
    voipsvraddr_ = new ::micromsg::VoipAddrSet;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipMultiRelayData.VoipSvrAddr)
  return voipsvraddr_;
}
inline ::micromsg::VoipAddrSet* VoipMultiRelayData::release_voipsvraddr() {
  // @@protoc_insertion_point(field_release:micromsg.VoipMultiRelayData.VoipSvrAddr)
  clear_has_voipsvraddr();
  ::micromsg::VoipAddrSet* temp = voipsvraddr_;
  voipsvraddr_ = NULL;
  return temp;
}
inline void VoipMultiRelayData::set_allocated_voipsvraddr(::micromsg::VoipAddrSet* voipsvraddr) {
  delete voipsvraddr_;
  voipsvraddr_ = voipsvraddr;
  if (voipsvraddr) {
    set_has_voipsvraddr();
  } else {
    clear_has_voipsvraddr();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipMultiRelayData.VoipSvrAddr)
}

// optional .micromsg.VoipAddrSet PunchSvrAddr = 5;
inline bool VoipMultiRelayData::has_punchsvraddr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VoipMultiRelayData::set_has_punchsvraddr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VoipMultiRelayData::clear_has_punchsvraddr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VoipMultiRelayData::clear_punchsvraddr() {
  if (punchsvraddr_ != NULL) punchsvraddr_->::micromsg::VoipAddrSet::Clear();
  clear_has_punchsvraddr();
}
inline const ::micromsg::VoipAddrSet& VoipMultiRelayData::punchsvraddr() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipMultiRelayData.PunchSvrAddr)
  return punchsvraddr_ != NULL ? *punchsvraddr_
                         : *::micromsg::VoipAddrSet::internal_default_instance();
}
inline ::micromsg::VoipAddrSet* VoipMultiRelayData::mutable_punchsvraddr() {
  set_has_punchsvraddr();
  if (punchsvraddr_ == NULL) {
    punchsvraddr_ = new ::micromsg::VoipAddrSet;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipMultiRelayData.PunchSvrAddr)
  return punchsvraddr_;
}
inline ::micromsg::VoipAddrSet* VoipMultiRelayData::release_punchsvraddr() {
  // @@protoc_insertion_point(field_release:micromsg.VoipMultiRelayData.PunchSvrAddr)
  clear_has_punchsvraddr();
  ::micromsg::VoipAddrSet* temp = punchsvraddr_;
  punchsvraddr_ = NULL;
  return temp;
}
inline void VoipMultiRelayData::set_allocated_punchsvraddr(::micromsg::VoipAddrSet* punchsvraddr) {
  delete punchsvraddr_;
  punchsvraddr_ = punchsvraddr;
  if (punchsvraddr) {
    set_has_punchsvraddr();
  } else {
    clear_has_punchsvraddr();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipMultiRelayData.PunchSvrAddr)
}

// optional int32 VoipNetQuality = 6;
inline bool VoipMultiRelayData::has_voipnetquality() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void VoipMultiRelayData::set_has_voipnetquality() {
  _has_bits_[0] |= 0x00000400u;
}
inline void VoipMultiRelayData::clear_has_voipnetquality() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void VoipMultiRelayData::clear_voipnetquality() {
  voipnetquality_ = 0;
  clear_has_voipnetquality();
}
inline ::google::protobuf::int32 VoipMultiRelayData::voipnetquality() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipMultiRelayData.VoipNetQuality)
  return voipnetquality_;
}
inline void VoipMultiRelayData::set_voipnetquality(::google::protobuf::int32 value) {
  set_has_voipnetquality();
  voipnetquality_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipMultiRelayData.VoipNetQuality)
}

// optional int32 LinkDisconnectHbInterval = 7;
inline bool VoipMultiRelayData::has_linkdisconnecthbinterval() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void VoipMultiRelayData::set_has_linkdisconnecthbinterval() {
  _has_bits_[0] |= 0x00000800u;
}
inline void VoipMultiRelayData::clear_has_linkdisconnecthbinterval() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void VoipMultiRelayData::clear_linkdisconnecthbinterval() {
  linkdisconnecthbinterval_ = 0;
  clear_has_linkdisconnecthbinterval();
}
inline ::google::protobuf::int32 VoipMultiRelayData::linkdisconnecthbinterval() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipMultiRelayData.LinkDisconnectHbInterval)
  return linkdisconnecthbinterval_;
}
inline void VoipMultiRelayData::set_linkdisconnecthbinterval(::google::protobuf::int32 value) {
  set_has_linkdisconnecthbinterval();
  linkdisconnecthbinterval_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipMultiRelayData.LinkDisconnectHbInterval)
}

// optional int32 LinkDisconnectHbCnt = 8;
inline bool VoipMultiRelayData::has_linkdisconnecthbcnt() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void VoipMultiRelayData::set_has_linkdisconnecthbcnt() {
  _has_bits_[0] |= 0x00001000u;
}
inline void VoipMultiRelayData::clear_has_linkdisconnecthbcnt() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void VoipMultiRelayData::clear_linkdisconnecthbcnt() {
  linkdisconnecthbcnt_ = 0;
  clear_has_linkdisconnecthbcnt();
}
inline ::google::protobuf::int32 VoipMultiRelayData::linkdisconnecthbcnt() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipMultiRelayData.LinkDisconnectHbCnt)
  return linkdisconnecthbcnt_;
}
inline void VoipMultiRelayData::set_linkdisconnecthbcnt(::google::protobuf::int32 value) {
  set_has_linkdisconnecthbcnt();
  linkdisconnecthbcnt_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipMultiRelayData.LinkDisconnectHbCnt)
}

// optional uint32 ProtocolEncryptLength = 9;
inline bool VoipMultiRelayData::has_protocolencryptlength() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void VoipMultiRelayData::set_has_protocolencryptlength() {
  _has_bits_[0] |= 0x00002000u;
}
inline void VoipMultiRelayData::clear_has_protocolencryptlength() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void VoipMultiRelayData::clear_protocolencryptlength() {
  protocolencryptlength_ = 0u;
  clear_has_protocolencryptlength();
}
inline ::google::protobuf::uint32 VoipMultiRelayData::protocolencryptlength() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipMultiRelayData.ProtocolEncryptLength)
  return protocolencryptlength_;
}
inline void VoipMultiRelayData::set_protocolencryptlength(::google::protobuf::uint32 value) {
  set_has_protocolencryptlength();
  protocolencryptlength_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipMultiRelayData.ProtocolEncryptLength)
}

// optional .micromsg.SKBuiltinBuffer_t ClientHeadSigns = 10;
inline bool VoipMultiRelayData::has_clientheadsigns() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VoipMultiRelayData::set_has_clientheadsigns() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VoipMultiRelayData::clear_has_clientheadsigns() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VoipMultiRelayData::clear_clientheadsigns() {
  if (clientheadsigns_ != NULL) clientheadsigns_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_clientheadsigns();
}
inline const ::micromsg::SKBuiltinBuffer_t& VoipMultiRelayData::clientheadsigns() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipMultiRelayData.ClientHeadSigns)
  return clientheadsigns_ != NULL ? *clientheadsigns_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinBuffer_t* VoipMultiRelayData::mutable_clientheadsigns() {
  set_has_clientheadsigns();
  if (clientheadsigns_ == NULL) {
    clientheadsigns_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipMultiRelayData.ClientHeadSigns)
  return clientheadsigns_;
}
inline ::micromsg::SKBuiltinBuffer_t* VoipMultiRelayData::release_clientheadsigns() {
  // @@protoc_insertion_point(field_release:micromsg.VoipMultiRelayData.ClientHeadSigns)
  clear_has_clientheadsigns();
  ::micromsg::SKBuiltinBuffer_t* temp = clientheadsigns_;
  clientheadsigns_ = NULL;
  return temp;
}
inline void VoipMultiRelayData::set_allocated_clientheadsigns(::micromsg::SKBuiltinBuffer_t* clientheadsigns) {
  delete clientheadsigns_;
  clientheadsigns_ = clientheadsigns;
  if (clientheadsigns) {
    set_has_clientheadsigns();
  } else {
    clear_has_clientheadsigns();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipMultiRelayData.ClientHeadSigns)
}

// optional uint32 OppositeClientVersion = 11;
inline bool VoipMultiRelayData::has_oppositeclientversion() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void VoipMultiRelayData::set_has_oppositeclientversion() {
  _has_bits_[0] |= 0x00004000u;
}
inline void VoipMultiRelayData::clear_has_oppositeclientversion() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void VoipMultiRelayData::clear_oppositeclientversion() {
  oppositeclientversion_ = 0u;
  clear_has_oppositeclientversion();
}
inline ::google::protobuf::uint32 VoipMultiRelayData::oppositeclientversion() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipMultiRelayData.OppositeClientVersion)
  return oppositeclientversion_;
}
inline void VoipMultiRelayData::set_oppositeclientversion(::google::protobuf::uint32 value) {
  set_has_oppositeclientversion();
  oppositeclientversion_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipMultiRelayData.OppositeClientVersion)
}

// optional .micromsg.VoipAddrSet TcpSvrAddr = 12;
inline bool VoipMultiRelayData::has_tcpsvraddr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VoipMultiRelayData::set_has_tcpsvraddr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VoipMultiRelayData::clear_has_tcpsvraddr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VoipMultiRelayData::clear_tcpsvraddr() {
  if (tcpsvraddr_ != NULL) tcpsvraddr_->::micromsg::VoipAddrSet::Clear();
  clear_has_tcpsvraddr();
}
inline const ::micromsg::VoipAddrSet& VoipMultiRelayData::tcpsvraddr() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipMultiRelayData.TcpSvrAddr)
  return tcpsvraddr_ != NULL ? *tcpsvraddr_
                         : *::micromsg::VoipAddrSet::internal_default_instance();
}
inline ::micromsg::VoipAddrSet* VoipMultiRelayData::mutable_tcpsvraddr() {
  set_has_tcpsvraddr();
  if (tcpsvraddr_ == NULL) {
    tcpsvraddr_ = new ::micromsg::VoipAddrSet;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipMultiRelayData.TcpSvrAddr)
  return tcpsvraddr_;
}
inline ::micromsg::VoipAddrSet* VoipMultiRelayData::release_tcpsvraddr() {
  // @@protoc_insertion_point(field_release:micromsg.VoipMultiRelayData.TcpSvrAddr)
  clear_has_tcpsvraddr();
  ::micromsg::VoipAddrSet* temp = tcpsvraddr_;
  tcpsvraddr_ = NULL;
  return temp;
}
inline void VoipMultiRelayData::set_allocated_tcpsvraddr(::micromsg::VoipAddrSet* tcpsvraddr) {
  delete tcpsvraddr_;
  tcpsvraddr_ = tcpsvraddr;
  if (tcpsvraddr) {
    set_has_tcpsvraddr();
  } else {
    clear_has_tcpsvraddr();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipMultiRelayData.TcpSvrAddr)
}

// optional int32 ARQStrategy = 13;
inline bool VoipMultiRelayData::has_arqstrategy() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void VoipMultiRelayData::set_has_arqstrategy() {
  _has_bits_[0] |= 0x00008000u;
}
inline void VoipMultiRelayData::clear_has_arqstrategy() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void VoipMultiRelayData::clear_arqstrategy() {
  arqstrategy_ = 0;
  clear_has_arqstrategy();
}
inline ::google::protobuf::int32 VoipMultiRelayData::arqstrategy() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipMultiRelayData.ARQStrategy)
  return arqstrategy_;
}
inline void VoipMultiRelayData::set_arqstrategy(::google::protobuf::int32 value) {
  set_has_arqstrategy();
  arqstrategy_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipMultiRelayData.ARQStrategy)
}

// optional int32 ARQCacheLen = 14;
inline bool VoipMultiRelayData::has_arqcachelen() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void VoipMultiRelayData::set_has_arqcachelen() {
  _has_bits_[0] |= 0x00010000u;
}
inline void VoipMultiRelayData::clear_has_arqcachelen() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void VoipMultiRelayData::clear_arqcachelen() {
  arqcachelen_ = 0;
  clear_has_arqcachelen();
}
inline ::google::protobuf::int32 VoipMultiRelayData::arqcachelen() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipMultiRelayData.ARQCacheLen)
  return arqcachelen_;
}
inline void VoipMultiRelayData::set_arqcachelen(::google::protobuf::int32 value) {
  set_has_arqcachelen();
  arqcachelen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipMultiRelayData.ARQCacheLen)
}

// optional int32 ARQRttThreshold = 15;
inline bool VoipMultiRelayData::has_arqrttthreshold() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void VoipMultiRelayData::set_has_arqrttthreshold() {
  _has_bits_[0] |= 0x00020000u;
}
inline void VoipMultiRelayData::clear_has_arqrttthreshold() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void VoipMultiRelayData::clear_arqrttthreshold() {
  arqrttthreshold_ = 0;
  clear_has_arqrttthreshold();
}
inline ::google::protobuf::int32 VoipMultiRelayData::arqrttthreshold() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipMultiRelayData.ARQRttThreshold)
  return arqrttthreshold_;
}
inline void VoipMultiRelayData::set_arqrttthreshold(::google::protobuf::int32 value) {
  set_has_arqrttthreshold();
  arqrttthreshold_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipMultiRelayData.ARQRttThreshold)
}

// optional int32 ARQUsedRateThreshold = 16;
inline bool VoipMultiRelayData::has_arqusedratethreshold() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void VoipMultiRelayData::set_has_arqusedratethreshold() {
  _has_bits_[0] |= 0x00040000u;
}
inline void VoipMultiRelayData::clear_has_arqusedratethreshold() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void VoipMultiRelayData::clear_arqusedratethreshold() {
  arqusedratethreshold_ = 0;
  clear_has_arqusedratethreshold();
}
inline ::google::protobuf::int32 VoipMultiRelayData::arqusedratethreshold() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipMultiRelayData.ARQUsedRateThreshold)
  return arqusedratethreshold_;
}
inline void VoipMultiRelayData::set_arqusedratethreshold(::google::protobuf::int32 value) {
  set_has_arqusedratethreshold();
  arqusedratethreshold_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipMultiRelayData.ARQUsedRateThreshold)
}

// optional int32 ARQRespRateThreshold = 17;
inline bool VoipMultiRelayData::has_arqrespratethreshold() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void VoipMultiRelayData::set_has_arqrespratethreshold() {
  _has_bits_[0] |= 0x00080000u;
}
inline void VoipMultiRelayData::clear_has_arqrespratethreshold() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void VoipMultiRelayData::clear_arqrespratethreshold() {
  arqrespratethreshold_ = 0;
  clear_has_arqrespratethreshold();
}
inline ::google::protobuf::int32 VoipMultiRelayData::arqrespratethreshold() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipMultiRelayData.ARQRespRateThreshold)
  return arqrespratethreshold_;
}
inline void VoipMultiRelayData::set_arqrespratethreshold(::google::protobuf::int32 value) {
  set_has_arqrespratethreshold();
  arqrespratethreshold_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipMultiRelayData.ARQRespRateThreshold)
}

// optional int32 EncryptStrategy = 18;
inline bool VoipMultiRelayData::has_encryptstrategy() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void VoipMultiRelayData::set_has_encryptstrategy() {
  _has_bits_[0] |= 0x00100000u;
}
inline void VoipMultiRelayData::clear_has_encryptstrategy() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void VoipMultiRelayData::clear_encryptstrategy() {
  encryptstrategy_ = 0;
  clear_has_encryptstrategy();
}
inline ::google::protobuf::int32 VoipMultiRelayData::encryptstrategy() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipMultiRelayData.EncryptStrategy)
  return encryptstrategy_;
}
inline void VoipMultiRelayData::set_encryptstrategy(::google::protobuf::int32 value) {
  set_has_encryptstrategy();
  encryptstrategy_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipMultiRelayData.EncryptStrategy)
}

// optional int32 FECSvrCtr = 19;
inline bool VoipMultiRelayData::has_fecsvrctr() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void VoipMultiRelayData::set_has_fecsvrctr() {
  _has_bits_[0] |= 0x00200000u;
}
inline void VoipMultiRelayData::clear_has_fecsvrctr() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void VoipMultiRelayData::clear_fecsvrctr() {
  fecsvrctr_ = 0;
  clear_has_fecsvrctr();
}
inline ::google::protobuf::int32 VoipMultiRelayData::fecsvrctr() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipMultiRelayData.FECSvrCtr)
  return fecsvrctr_;
}
inline void VoipMultiRelayData::set_fecsvrctr(::google::protobuf::int32 value) {
  set_has_fecsvrctr();
  fecsvrctr_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipMultiRelayData.FECSvrCtr)
}

// optional .micromsg.SKBuiltinBuffer_t FECKeyPara1 = 20;
inline bool VoipMultiRelayData::has_feckeypara1() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VoipMultiRelayData::set_has_feckeypara1() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VoipMultiRelayData::clear_has_feckeypara1() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VoipMultiRelayData::clear_feckeypara1() {
  if (feckeypara1_ != NULL) feckeypara1_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_feckeypara1();
}
inline const ::micromsg::SKBuiltinBuffer_t& VoipMultiRelayData::feckeypara1() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipMultiRelayData.FECKeyPara1)
  return feckeypara1_ != NULL ? *feckeypara1_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinBuffer_t* VoipMultiRelayData::mutable_feckeypara1() {
  set_has_feckeypara1();
  if (feckeypara1_ == NULL) {
    feckeypara1_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipMultiRelayData.FECKeyPara1)
  return feckeypara1_;
}
inline ::micromsg::SKBuiltinBuffer_t* VoipMultiRelayData::release_feckeypara1() {
  // @@protoc_insertion_point(field_release:micromsg.VoipMultiRelayData.FECKeyPara1)
  clear_has_feckeypara1();
  ::micromsg::SKBuiltinBuffer_t* temp = feckeypara1_;
  feckeypara1_ = NULL;
  return temp;
}
inline void VoipMultiRelayData::set_allocated_feckeypara1(::micromsg::SKBuiltinBuffer_t* feckeypara1) {
  delete feckeypara1_;
  feckeypara1_ = feckeypara1;
  if (feckeypara1) {
    set_has_feckeypara1();
  } else {
    clear_has_feckeypara1();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipMultiRelayData.FECKeyPara1)
}

// optional .micromsg.SKBuiltinBuffer_t FECKeyPara2 = 21;
inline bool VoipMultiRelayData::has_feckeypara2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VoipMultiRelayData::set_has_feckeypara2() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VoipMultiRelayData::clear_has_feckeypara2() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VoipMultiRelayData::clear_feckeypara2() {
  if (feckeypara2_ != NULL) feckeypara2_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_feckeypara2();
}
inline const ::micromsg::SKBuiltinBuffer_t& VoipMultiRelayData::feckeypara2() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipMultiRelayData.FECKeyPara2)
  return feckeypara2_ != NULL ? *feckeypara2_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinBuffer_t* VoipMultiRelayData::mutable_feckeypara2() {
  set_has_feckeypara2();
  if (feckeypara2_ == NULL) {
    feckeypara2_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipMultiRelayData.FECKeyPara2)
  return feckeypara2_;
}
inline ::micromsg::SKBuiltinBuffer_t* VoipMultiRelayData::release_feckeypara2() {
  // @@protoc_insertion_point(field_release:micromsg.VoipMultiRelayData.FECKeyPara2)
  clear_has_feckeypara2();
  ::micromsg::SKBuiltinBuffer_t* temp = feckeypara2_;
  feckeypara2_ = NULL;
  return temp;
}
inline void VoipMultiRelayData::set_allocated_feckeypara2(::micromsg::SKBuiltinBuffer_t* feckeypara2) {
  delete feckeypara2_;
  feckeypara2_ = feckeypara2;
  if (feckeypara2) {
    set_has_feckeypara2();
  } else {
    clear_has_feckeypara2();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipMultiRelayData.FECKeyPara2)
}

// optional int32 QosStrategy = 22;
inline bool VoipMultiRelayData::has_qosstrategy() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void VoipMultiRelayData::set_has_qosstrategy() {
  _has_bits_[0] |= 0x00400000u;
}
inline void VoipMultiRelayData::clear_has_qosstrategy() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void VoipMultiRelayData::clear_qosstrategy() {
  qosstrategy_ = 0;
  clear_has_qosstrategy();
}
inline ::google::protobuf::int32 VoipMultiRelayData::qosstrategy() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipMultiRelayData.QosStrategy)
  return qosstrategy_;
}
inline void VoipMultiRelayData::set_qosstrategy(::google::protobuf::int32 value) {
  set_has_qosstrategy();
  qosstrategy_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipMultiRelayData.QosStrategy)
}

// optional .micromsg.SKBuiltinBuffer_t EncryptKeyBuf = 23;
inline bool VoipMultiRelayData::has_encryptkeybuf() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VoipMultiRelayData::set_has_encryptkeybuf() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VoipMultiRelayData::clear_has_encryptkeybuf() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VoipMultiRelayData::clear_encryptkeybuf() {
  if (encryptkeybuf_ != NULL) encryptkeybuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_encryptkeybuf();
}
inline const ::micromsg::SKBuiltinBuffer_t& VoipMultiRelayData::encryptkeybuf() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipMultiRelayData.EncryptKeyBuf)
  return encryptkeybuf_ != NULL ? *encryptkeybuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinBuffer_t* VoipMultiRelayData::mutable_encryptkeybuf() {
  set_has_encryptkeybuf();
  if (encryptkeybuf_ == NULL) {
    encryptkeybuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipMultiRelayData.EncryptKeyBuf)
  return encryptkeybuf_;
}
inline ::micromsg::SKBuiltinBuffer_t* VoipMultiRelayData::release_encryptkeybuf() {
  // @@protoc_insertion_point(field_release:micromsg.VoipMultiRelayData.EncryptKeyBuf)
  clear_has_encryptkeybuf();
  ::micromsg::SKBuiltinBuffer_t* temp = encryptkeybuf_;
  encryptkeybuf_ = NULL;
  return temp;
}
inline void VoipMultiRelayData::set_allocated_encryptkeybuf(::micromsg::SKBuiltinBuffer_t* encryptkeybuf) {
  delete encryptkeybuf_;
  encryptkeybuf_ = encryptkeybuf;
  if (encryptkeybuf) {
    set_has_encryptkeybuf();
  } else {
    clear_has_encryptkeybuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipMultiRelayData.EncryptKeyBuf)
}

// optional uint32 OppositeDeviceType = 24;
inline bool VoipMultiRelayData::has_oppositedevicetype() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void VoipMultiRelayData::set_has_oppositedevicetype() {
  _has_bits_[0] |= 0x00800000u;
}
inline void VoipMultiRelayData::clear_has_oppositedevicetype() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void VoipMultiRelayData::clear_oppositedevicetype() {
  oppositedevicetype_ = 0u;
  clear_has_oppositedevicetype();
}
inline ::google::protobuf::uint32 VoipMultiRelayData::oppositedevicetype() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipMultiRelayData.OppositeDeviceType)
  return oppositedevicetype_;
}
inline void VoipMultiRelayData::set_oppositedevicetype(::google::protobuf::uint32 value) {
  set_has_oppositedevicetype();
  oppositedevicetype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipMultiRelayData.OppositeDeviceType)
}

// -------------------------------------------------------------------

// VoipStatReportData

// required .micromsg.SKBuiltinString_t StatReport = 1;
inline bool VoipStatReportData::has_statreport() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoipStatReportData::set_has_statreport() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoipStatReportData::clear_has_statreport() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoipStatReportData::clear_statreport() {
  if (statreport_ != NULL) statreport_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_statreport();
}
inline const ::micromsg::SKBuiltinString_t& VoipStatReportData::statreport() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipStatReportData.StatReport)
  return statreport_ != NULL ? *statreport_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* VoipStatReportData::mutable_statreport() {
  set_has_statreport();
  if (statreport_ == NULL) {
    statreport_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipStatReportData.StatReport)
  return statreport_;
}
inline ::micromsg::SKBuiltinString_t* VoipStatReportData::release_statreport() {
  // @@protoc_insertion_point(field_release:micromsg.VoipStatReportData.StatReport)
  clear_has_statreport();
  ::micromsg::SKBuiltinString_t* temp = statreport_;
  statreport_ = NULL;
  return temp;
}
inline void VoipStatReportData::set_allocated_statreport(::micromsg::SKBuiltinString_t* statreport) {
  delete statreport_;
  statreport_ = statreport;
  if (statreport) {
    set_has_statreport();
  } else {
    clear_has_statreport();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipStatReportData.StatReport)
}

// -------------------------------------------------------------------

// VoipNetQuality

// required int32 Type = 1;
inline bool VoipNetQuality::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoipNetQuality::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoipNetQuality::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoipNetQuality::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 VoipNetQuality::type() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipNetQuality.Type)
  return type_;
}
inline void VoipNetQuality::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipNetQuality.Type)
}

// required int32 Begin = 2;
inline bool VoipNetQuality::has_begin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VoipNetQuality::set_has_begin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VoipNetQuality::clear_has_begin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VoipNetQuality::clear_begin() {
  begin_ = 0;
  clear_has_begin();
}
inline ::google::protobuf::int32 VoipNetQuality::begin() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipNetQuality.Begin)
  return begin_;
}
inline void VoipNetQuality::set_begin(::google::protobuf::int32 value) {
  set_has_begin();
  begin_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipNetQuality.Begin)
}

// required int32 End = 3;
inline bool VoipNetQuality::has_end() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VoipNetQuality::set_has_end() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VoipNetQuality::clear_has_end() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VoipNetQuality::clear_end() {
  end_ = 0;
  clear_has_end();
}
inline ::google::protobuf::int32 VoipNetQuality::end() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipNetQuality.End)
  return end_;
}
inline void VoipNetQuality::set_end(::google::protobuf::int32 value) {
  set_has_end();
  end_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipNetQuality.End)
}

// required int32 HitCnt = 4;
inline bool VoipNetQuality::has_hitcnt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VoipNetQuality::set_has_hitcnt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VoipNetQuality::clear_has_hitcnt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VoipNetQuality::clear_hitcnt() {
  hitcnt_ = 0;
  clear_has_hitcnt();
}
inline ::google::protobuf::int32 VoipNetQuality::hitcnt() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipNetQuality.HitCnt)
  return hitcnt_;
}
inline void VoipNetQuality::set_hitcnt(::google::protobuf::int32 value) {
  set_has_hitcnt();
  hitcnt_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipNetQuality.HitCnt)
}

// -------------------------------------------------------------------

// VoipInviteRemindReq

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool VoipInviteRemindReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoipInviteRemindReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoipInviteRemindReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoipInviteRemindReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& VoipInviteRemindReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteRemindReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* VoipInviteRemindReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipInviteRemindReq.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* VoipInviteRemindReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.VoipInviteRemindReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void VoipInviteRemindReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipInviteRemindReq.BaseRequest)
}

// required uint32 ListCount = 2;
inline bool VoipInviteRemindReq::has_listcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VoipInviteRemindReq::set_has_listcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VoipInviteRemindReq::clear_has_listcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VoipInviteRemindReq::clear_listcount() {
  listcount_ = 0u;
  clear_has_listcount();
}
inline ::google::protobuf::uint32 VoipInviteRemindReq::listcount() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteRemindReq.ListCount)
  return listcount_;
}
inline void VoipInviteRemindReq::set_listcount(::google::protobuf::uint32 value) {
  set_has_listcount();
  listcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteRemindReq.ListCount)
}

// repeated .micromsg.SKBuiltinString_t ToUserNameList = 3;
inline int VoipInviteRemindReq::tousernamelist_size() const {
  return tousernamelist_.size();
}
inline void VoipInviteRemindReq::clear_tousernamelist() {
  tousernamelist_.Clear();
}
inline const ::micromsg::SKBuiltinString_t& VoipInviteRemindReq::tousernamelist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteRemindReq.ToUserNameList)
  return tousernamelist_.Get(index);
}
inline ::micromsg::SKBuiltinString_t* VoipInviteRemindReq::mutable_tousernamelist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.VoipInviteRemindReq.ToUserNameList)
  return tousernamelist_.Mutable(index);
}
inline ::micromsg::SKBuiltinString_t* VoipInviteRemindReq::add_tousernamelist() {
  // @@protoc_insertion_point(field_add:micromsg.VoipInviteRemindReq.ToUserNameList)
  return tousernamelist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >*
VoipInviteRemindReq::mutable_tousernamelist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.VoipInviteRemindReq.ToUserNameList)
  return &tousernamelist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >&
VoipInviteRemindReq::tousernamelist() const {
  // @@protoc_insertion_point(field_list:micromsg.VoipInviteRemindReq.ToUserNameList)
  return tousernamelist_;
}

// optional uint32 InviteType = 4;
inline bool VoipInviteRemindReq::has_invitetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VoipInviteRemindReq::set_has_invitetype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VoipInviteRemindReq::clear_has_invitetype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VoipInviteRemindReq::clear_invitetype() {
  invitetype_ = 0u;
  clear_has_invitetype();
}
inline ::google::protobuf::uint32 VoipInviteRemindReq::invitetype() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteRemindReq.InviteType)
  return invitetype_;
}
inline void VoipInviteRemindReq::set_invitetype(::google::protobuf::uint32 value) {
  set_has_invitetype();
  invitetype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteRemindReq.InviteType)
}

// -------------------------------------------------------------------

// VoipInviteRemindResp

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool VoipInviteRemindResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoipInviteRemindResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoipInviteRemindResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoipInviteRemindResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& VoipInviteRemindResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteRemindResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* VoipInviteRemindResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipInviteRemindResp.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* VoipInviteRemindResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.VoipInviteRemindResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void VoipInviteRemindResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipInviteRemindResp.BaseResponse)
}

// -------------------------------------------------------------------

// VoipInviteReq

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool VoipInviteReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VoipInviteReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VoipInviteReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VoipInviteReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& VoipInviteReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* VoipInviteReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipInviteReq.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* VoipInviteReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.VoipInviteReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void VoipInviteReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipInviteReq.BaseRequest)
}

// optional string FromUsername = 2;
inline bool VoipInviteReq::has_fromusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoipInviteReq::set_has_fromusername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoipInviteReq::clear_has_fromusername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoipInviteReq::clear_fromusername() {
  fromusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fromusername();
}
inline const ::std::string& VoipInviteReq::fromusername() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteReq.FromUsername)
  return fromusername_.GetNoArena();
}
inline void VoipInviteReq::set_fromusername(const ::std::string& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteReq.FromUsername)
}
#if LANG_CXX11
inline void VoipInviteReq::set_fromusername(::std::string&& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VoipInviteReq.FromUsername)
}
#endif
inline void VoipInviteReq::set_fromusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VoipInviteReq.FromUsername)
}
inline void VoipInviteReq::set_fromusername(const char* value, size_t size) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VoipInviteReq.FromUsername)
}
inline ::std::string* VoipInviteReq::mutable_fromusername() {
  set_has_fromusername();
  // @@protoc_insertion_point(field_mutable:micromsg.VoipInviteReq.FromUsername)
  return fromusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VoipInviteReq::release_fromusername() {
  // @@protoc_insertion_point(field_release:micromsg.VoipInviteReq.FromUsername)
  clear_has_fromusername();
  return fromusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VoipInviteReq::set_allocated_fromusername(::std::string* fromusername) {
  if (fromusername != NULL) {
    set_has_fromusername();
  } else {
    clear_has_fromusername();
  }
  fromusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipInviteReq.FromUsername)
}

// required int32 InviteUserCount = 3;
inline bool VoipInviteReq::has_inviteusercount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VoipInviteReq::set_has_inviteusercount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VoipInviteReq::clear_has_inviteusercount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VoipInviteReq::clear_inviteusercount() {
  inviteusercount_ = 0;
  clear_has_inviteusercount();
}
inline ::google::protobuf::int32 VoipInviteReq::inviteusercount() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteReq.InviteUserCount)
  return inviteusercount_;
}
inline void VoipInviteReq::set_inviteusercount(::google::protobuf::int32 value) {
  set_has_inviteusercount();
  inviteusercount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteReq.InviteUserCount)
}

// repeated .micromsg.SKBuiltinString_t ToUsernameList = 4;
inline int VoipInviteReq::tousernamelist_size() const {
  return tousernamelist_.size();
}
inline void VoipInviteReq::clear_tousernamelist() {
  tousernamelist_.Clear();
}
inline const ::micromsg::SKBuiltinString_t& VoipInviteReq::tousernamelist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteReq.ToUsernameList)
  return tousernamelist_.Get(index);
}
inline ::micromsg::SKBuiltinString_t* VoipInviteReq::mutable_tousernamelist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.VoipInviteReq.ToUsernameList)
  return tousernamelist_.Mutable(index);
}
inline ::micromsg::SKBuiltinString_t* VoipInviteReq::add_tousernamelist() {
  // @@protoc_insertion_point(field_add:micromsg.VoipInviteReq.ToUsernameList)
  return tousernamelist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >*
VoipInviteReq::mutable_tousernamelist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.VoipInviteReq.ToUsernameList)
  return &tousernamelist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >&
VoipInviteReq::tousernamelist() const {
  // @@protoc_insertion_point(field_list:micromsg.VoipInviteReq.ToUsernameList)
  return tousernamelist_;
}

// required .micromsg.VoipRelayData PeerId = 6;
inline bool VoipInviteReq::has_peerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VoipInviteReq::set_has_peerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VoipInviteReq::clear_has_peerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VoipInviteReq::clear_peerid() {
  if (peerid_ != NULL) peerid_->::micromsg::VoipRelayData::Clear();
  clear_has_peerid();
}
inline const ::micromsg::VoipRelayData& VoipInviteReq::peerid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteReq.PeerId)
  return peerid_ != NULL ? *peerid_
                         : *::micromsg::VoipRelayData::internal_default_instance();
}
inline ::micromsg::VoipRelayData* VoipInviteReq::mutable_peerid() {
  set_has_peerid();
  if (peerid_ == NULL) {
    peerid_ = new ::micromsg::VoipRelayData;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipInviteReq.PeerId)
  return peerid_;
}
inline ::micromsg::VoipRelayData* VoipInviteReq::release_peerid() {
  // @@protoc_insertion_point(field_release:micromsg.VoipInviteReq.PeerId)
  clear_has_peerid();
  ::micromsg::VoipRelayData* temp = peerid_;
  peerid_ = NULL;
  return temp;
}
inline void VoipInviteReq::set_allocated_peerid(::micromsg::VoipRelayData* peerid) {
  delete peerid_;
  peerid_ = peerid;
  if (peerid) {
    set_has_peerid();
  } else {
    clear_has_peerid();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipInviteReq.PeerId)
}

// required .micromsg.VoipRelayData CapInfo = 7;
inline bool VoipInviteReq::has_capinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VoipInviteReq::set_has_capinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VoipInviteReq::clear_has_capinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VoipInviteReq::clear_capinfo() {
  if (capinfo_ != NULL) capinfo_->::micromsg::VoipRelayData::Clear();
  clear_has_capinfo();
}
inline const ::micromsg::VoipRelayData& VoipInviteReq::capinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteReq.CapInfo)
  return capinfo_ != NULL ? *capinfo_
                         : *::micromsg::VoipRelayData::internal_default_instance();
}
inline ::micromsg::VoipRelayData* VoipInviteReq::mutable_capinfo() {
  set_has_capinfo();
  if (capinfo_ == NULL) {
    capinfo_ = new ::micromsg::VoipRelayData;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipInviteReq.CapInfo)
  return capinfo_;
}
inline ::micromsg::VoipRelayData* VoipInviteReq::release_capinfo() {
  // @@protoc_insertion_point(field_release:micromsg.VoipInviteReq.CapInfo)
  clear_has_capinfo();
  ::micromsg::VoipRelayData* temp = capinfo_;
  capinfo_ = NULL;
  return temp;
}
inline void VoipInviteReq::set_allocated_capinfo(::micromsg::VoipRelayData* capinfo) {
  delete capinfo_;
  capinfo_ = capinfo;
  if (capinfo) {
    set_has_capinfo();
  } else {
    clear_has_capinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipInviteReq.CapInfo)
}

// required int32 NetType = 8;
inline bool VoipInviteReq::has_nettype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VoipInviteReq::set_has_nettype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VoipInviteReq::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VoipInviteReq::clear_nettype() {
  nettype_ = 0;
  clear_has_nettype();
}
inline ::google::protobuf::int32 VoipInviteReq::nettype() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteReq.NetType)
  return nettype_;
}
inline void VoipInviteReq::set_nettype(::google::protobuf::int32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteReq.NetType)
}

// required int32 CallType = 9;
inline bool VoipInviteReq::has_calltype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VoipInviteReq::set_has_calltype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VoipInviteReq::clear_has_calltype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VoipInviteReq::clear_calltype() {
  calltype_ = 0;
  clear_has_calltype();
}
inline ::google::protobuf::int32 VoipInviteReq::calltype() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteReq.CallType)
  return calltype_;
}
inline void VoipInviteReq::set_calltype(::google::protobuf::int32 value) {
  set_has_calltype();
  calltype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteReq.CallType)
}

// optional int32 RoomId = 10;
inline bool VoipInviteReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VoipInviteReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VoipInviteReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VoipInviteReq::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 VoipInviteReq::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteReq.RoomId)
  return roomid_;
}
inline void VoipInviteReq::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteReq.RoomId)
}

// optional int64 RoomKey = 11;
inline bool VoipInviteReq::has_roomkey() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VoipInviteReq::set_has_roomkey() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VoipInviteReq::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VoipInviteReq::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
inline ::google::protobuf::int64 VoipInviteReq::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteReq.RoomKey)
  return roomkey_;
}
inline void VoipInviteReq::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteReq.RoomKey)
}

// optional uint32 InviteType = 12;
inline bool VoipInviteReq::has_invitetype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void VoipInviteReq::set_has_invitetype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void VoipInviteReq::clear_has_invitetype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void VoipInviteReq::clear_invitetype() {
  invitetype_ = 0u;
  clear_has_invitetype();
}
inline ::google::protobuf::uint32 VoipInviteReq::invitetype() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteReq.InviteType)
  return invitetype_;
}
inline void VoipInviteReq::set_invitetype(::google::protobuf::uint32 value) {
  set_has_invitetype();
  invitetype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteReq.InviteType)
}

// optional uint64 Timestamp64 = 13;
inline bool VoipInviteReq::has_timestamp64() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VoipInviteReq::set_has_timestamp64() {
  _has_bits_[0] |= 0x00000200u;
}
inline void VoipInviteReq::clear_has_timestamp64() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void VoipInviteReq::clear_timestamp64() {
  timestamp64_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp64();
}
inline ::google::protobuf::uint64 VoipInviteReq::timestamp64() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteReq.Timestamp64)
  return timestamp64_;
}
inline void VoipInviteReq::set_timestamp64(::google::protobuf::uint64 value) {
  set_has_timestamp64();
  timestamp64_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteReq.Timestamp64)
}

// optional int32 HDVideo = 14;
inline bool VoipInviteReq::has_hdvideo() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void VoipInviteReq::set_has_hdvideo() {
  _has_bits_[0] |= 0x00000800u;
}
inline void VoipInviteReq::clear_has_hdvideo() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void VoipInviteReq::clear_hdvideo() {
  hdvideo_ = 0;
  clear_has_hdvideo();
}
inline ::google::protobuf::int32 VoipInviteReq::hdvideo() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteReq.HDVideo)
  return hdvideo_;
}
inline void VoipInviteReq::set_hdvideo(::google::protobuf::int32 value) {
  set_has_hdvideo();
  hdvideo_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteReq.HDVideo)
}

// optional uint32 InviteId = 15;
inline bool VoipInviteReq::has_inviteid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void VoipInviteReq::set_has_inviteid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void VoipInviteReq::clear_has_inviteid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void VoipInviteReq::clear_inviteid() {
  inviteid_ = 0u;
  clear_has_inviteid();
}
inline ::google::protobuf::uint32 VoipInviteReq::inviteid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteReq.InviteId)
  return inviteid_;
}
inline void VoipInviteReq::set_inviteid(::google::protobuf::uint32 value) {
  set_has_inviteid();
  inviteid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteReq.InviteId)
}

// -------------------------------------------------------------------

// VoipInviteResp

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool VoipInviteResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoipInviteResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoipInviteResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoipInviteResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& VoipInviteResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* VoipInviteResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipInviteResp.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* VoipInviteResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.VoipInviteResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void VoipInviteResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipInviteResp.BaseResponse)
}

// required int32 RoomId = 2;
inline bool VoipInviteResp::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VoipInviteResp::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VoipInviteResp::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VoipInviteResp::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 VoipInviteResp::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteResp.RoomId)
  return roomid_;
}
inline void VoipInviteResp::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteResp.RoomId)
}

// required int32 AddrCount = 3;
inline bool VoipInviteResp::has_addrcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VoipInviteResp::set_has_addrcount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VoipInviteResp::clear_has_addrcount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VoipInviteResp::clear_addrcount() {
  addrcount_ = 0;
  clear_has_addrcount();
}
inline ::google::protobuf::int32 VoipInviteResp::addrcount() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteResp.AddrCount)
  return addrcount_;
}
inline void VoipInviteResp::set_addrcount(::google::protobuf::int32 value) {
  set_has_addrcount();
  addrcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteResp.AddrCount)
}

// repeated .micromsg.VoipAddr AddrList = 4;
inline int VoipInviteResp::addrlist_size() const {
  return addrlist_.size();
}
inline void VoipInviteResp::clear_addrlist() {
  addrlist_.Clear();
}
inline const ::micromsg::VoipAddr& VoipInviteResp::addrlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteResp.AddrList)
  return addrlist_.Get(index);
}
inline ::micromsg::VoipAddr* VoipInviteResp::mutable_addrlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.VoipInviteResp.AddrList)
  return addrlist_.Mutable(index);
}
inline ::micromsg::VoipAddr* VoipInviteResp::add_addrlist() {
  // @@protoc_insertion_point(field_add:micromsg.VoipInviteResp.AddrList)
  return addrlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::VoipAddr >*
VoipInviteResp::mutable_addrlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.VoipInviteResp.AddrList)
  return &addrlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::VoipAddr >&
VoipInviteResp::addrlist() const {
  // @@protoc_insertion_point(field_list:micromsg.VoipInviteResp.AddrList)
  return addrlist_;
}

// required int64 RoomKey = 5;
inline bool VoipInviteResp::has_roomkey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VoipInviteResp::set_has_roomkey() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VoipInviteResp::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VoipInviteResp::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
inline ::google::protobuf::int64 VoipInviteResp::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteResp.RoomKey)
  return roomkey_;
}
inline void VoipInviteResp::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteResp.RoomKey)
}

// required int32 RoomMemberId = 6;
inline bool VoipInviteResp::has_roommemberid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VoipInviteResp::set_has_roommemberid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VoipInviteResp::clear_has_roommemberid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VoipInviteResp::clear_roommemberid() {
  roommemberid_ = 0;
  clear_has_roommemberid();
}
inline ::google::protobuf::int32 VoipInviteResp::roommemberid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteResp.RoomMemberId)
  return roommemberid_;
}
inline void VoipInviteResp::set_roommemberid(::google::protobuf::int32 value) {
  set_has_roommemberid();
  roommemberid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteResp.RoomMemberId)
}

// optional .micromsg.VoipMultiRelayData RelayData = 7;
inline bool VoipInviteResp::has_relaydata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VoipInviteResp::set_has_relaydata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VoipInviteResp::clear_has_relaydata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VoipInviteResp::clear_relaydata() {
  if (relaydata_ != NULL) relaydata_->::micromsg::VoipMultiRelayData::Clear();
  clear_has_relaydata();
}
inline const ::micromsg::VoipMultiRelayData& VoipInviteResp::relaydata() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteResp.RelayData)
  return relaydata_ != NULL ? *relaydata_
                         : *::micromsg::VoipMultiRelayData::internal_default_instance();
}
inline ::micromsg::VoipMultiRelayData* VoipInviteResp::mutable_relaydata() {
  set_has_relaydata();
  if (relaydata_ == NULL) {
    relaydata_ = new ::micromsg::VoipMultiRelayData;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipInviteResp.RelayData)
  return relaydata_;
}
inline ::micromsg::VoipMultiRelayData* VoipInviteResp::release_relaydata() {
  // @@protoc_insertion_point(field_release:micromsg.VoipInviteResp.RelayData)
  clear_has_relaydata();
  ::micromsg::VoipMultiRelayData* temp = relaydata_;
  relaydata_ = NULL;
  return temp;
}
inline void VoipInviteResp::set_allocated_relaydata(::micromsg::VoipMultiRelayData* relaydata) {
  delete relaydata_;
  relaydata_ = relaydata;
  if (relaydata) {
    set_has_relaydata();
  } else {
    clear_has_relaydata();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipInviteResp.RelayData)
}

// optional int32 NetQualityCnt = 8;
inline bool VoipInviteResp::has_netqualitycnt() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VoipInviteResp::set_has_netqualitycnt() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VoipInviteResp::clear_has_netqualitycnt() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VoipInviteResp::clear_netqualitycnt() {
  netqualitycnt_ = 0;
  clear_has_netqualitycnt();
}
inline ::google::protobuf::int32 VoipInviteResp::netqualitycnt() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteResp.NetQualityCnt)
  return netqualitycnt_;
}
inline void VoipInviteResp::set_netqualitycnt(::google::protobuf::int32 value) {
  set_has_netqualitycnt();
  netqualitycnt_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteResp.NetQualityCnt)
}

// repeated .micromsg.VoipNetQuality NetQualityList = 9;
inline int VoipInviteResp::netqualitylist_size() const {
  return netqualitylist_.size();
}
inline void VoipInviteResp::clear_netqualitylist() {
  netqualitylist_.Clear();
}
inline const ::micromsg::VoipNetQuality& VoipInviteResp::netqualitylist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteResp.NetQualityList)
  return netqualitylist_.Get(index);
}
inline ::micromsg::VoipNetQuality* VoipInviteResp::mutable_netqualitylist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.VoipInviteResp.NetQualityList)
  return netqualitylist_.Mutable(index);
}
inline ::micromsg::VoipNetQuality* VoipInviteResp::add_netqualitylist() {
  // @@protoc_insertion_point(field_add:micromsg.VoipInviteResp.NetQualityList)
  return netqualitylist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::VoipNetQuality >*
VoipInviteResp::mutable_netqualitylist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.VoipInviteResp.NetQualityList)
  return &netqualitylist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::VoipNetQuality >&
VoipInviteResp::netqualitylist() const {
  // @@protoc_insertion_point(field_list:micromsg.VoipInviteResp.NetQualityList)
  return netqualitylist_;
}

// optional int32 AudioTsdfBeyond3G = 10;
inline bool VoipInviteResp::has_audiotsdfbeyond3g() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VoipInviteResp::set_has_audiotsdfbeyond3g() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VoipInviteResp::clear_has_audiotsdfbeyond3g() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VoipInviteResp::clear_audiotsdfbeyond3g() {
  audiotsdfbeyond3g_ = 0;
  clear_has_audiotsdfbeyond3g();
}
inline ::google::protobuf::int32 VoipInviteResp::audiotsdfbeyond3g() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteResp.AudioTsdfBeyond3G)
  return audiotsdfbeyond3g_;
}
inline void VoipInviteResp::set_audiotsdfbeyond3g(::google::protobuf::int32 value) {
  set_has_audiotsdfbeyond3g();
  audiotsdfbeyond3g_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteResp.AudioTsdfBeyond3G)
}

// optional int32 AudioTsdfEdge = 11;
inline bool VoipInviteResp::has_audiotsdfedge() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VoipInviteResp::set_has_audiotsdfedge() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VoipInviteResp::clear_has_audiotsdfedge() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VoipInviteResp::clear_audiotsdfedge() {
  audiotsdfedge_ = 0;
  clear_has_audiotsdfedge();
}
inline ::google::protobuf::int32 VoipInviteResp::audiotsdfedge() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteResp.AudioTsdfEdge)
  return audiotsdfedge_;
}
inline void VoipInviteResp::set_audiotsdfedge(::google::protobuf::int32 value) {
  set_has_audiotsdfedge();
  audiotsdfedge_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteResp.AudioTsdfEdge)
}

// optional int32 PassthroughQosAlgorithm = 12;
inline bool VoipInviteResp::has_passthroughqosalgorithm() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VoipInviteResp::set_has_passthroughqosalgorithm() {
  _has_bits_[0] |= 0x00000200u;
}
inline void VoipInviteResp::clear_has_passthroughqosalgorithm() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void VoipInviteResp::clear_passthroughqosalgorithm() {
  passthroughqosalgorithm_ = 0;
  clear_has_passthroughqosalgorithm();
}
inline ::google::protobuf::int32 VoipInviteResp::passthroughqosalgorithm() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteResp.PassthroughQosAlgorithm)
  return passthroughqosalgorithm_;
}
inline void VoipInviteResp::set_passthroughqosalgorithm(::google::protobuf::int32 value) {
  set_has_passthroughqosalgorithm();
  passthroughqosalgorithm_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteResp.PassthroughQosAlgorithm)
}

// optional int32 FastPlayRepair = 13;
inline bool VoipInviteResp::has_fastplayrepair() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void VoipInviteResp::set_has_fastplayrepair() {
  _has_bits_[0] |= 0x00000400u;
}
inline void VoipInviteResp::clear_has_fastplayrepair() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void VoipInviteResp::clear_fastplayrepair() {
  fastplayrepair_ = 0;
  clear_has_fastplayrepair();
}
inline ::google::protobuf::int32 VoipInviteResp::fastplayrepair() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteResp.FastPlayRepair)
  return fastplayrepair_;
}
inline void VoipInviteResp::set_fastplayrepair(::google::protobuf::int32 value) {
  set_has_fastplayrepair();
  fastplayrepair_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteResp.FastPlayRepair)
}

// optional int32 VoipSyncInterval = 14;
inline bool VoipInviteResp::has_voipsyncinterval() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void VoipInviteResp::set_has_voipsyncinterval() {
  _has_bits_[0] |= 0x00000800u;
}
inline void VoipInviteResp::clear_has_voipsyncinterval() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void VoipInviteResp::clear_voipsyncinterval() {
  voipsyncinterval_ = 0;
  clear_has_voipsyncinterval();
}
inline ::google::protobuf::int32 VoipInviteResp::voipsyncinterval() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteResp.VoipSyncInterval)
  return voipsyncinterval_;
}
inline void VoipInviteResp::set_voipsyncinterval(::google::protobuf::int32 value) {
  set_has_voipsyncinterval();
  voipsyncinterval_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteResp.VoipSyncInterval)
}

// optional int32 NewP2S = 15;
inline bool VoipInviteResp::has_newp2s() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void VoipInviteResp::set_has_newp2s() {
  _has_bits_[0] |= 0x00001000u;
}
inline void VoipInviteResp::clear_has_newp2s() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void VoipInviteResp::clear_newp2s() {
  newp2s_ = 0;
  clear_has_newp2s();
}
inline ::google::protobuf::int32 VoipInviteResp::newp2s() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteResp.NewP2S)
  return newp2s_;
}
inline void VoipInviteResp::set_newp2s(::google::protobuf::int32 value) {
  set_has_newp2s();
  newp2s_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteResp.NewP2S)
}

// optional int32 AudioDTX = 16;
inline bool VoipInviteResp::has_audiodtx() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void VoipInviteResp::set_has_audiodtx() {
  _has_bits_[0] |= 0x00002000u;
}
inline void VoipInviteResp::clear_has_audiodtx() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void VoipInviteResp::clear_audiodtx() {
  audiodtx_ = 0;
  clear_has_audiodtx();
}
inline ::google::protobuf::int32 VoipInviteResp::audiodtx() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteResp.AudioDTX)
  return audiodtx_;
}
inline void VoipInviteResp::set_audiodtx(::google::protobuf::int32 value) {
  set_has_audiodtx();
  audiodtx_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteResp.AudioDTX)
}

// optional uint32 TcpCnt = 17;
inline bool VoipInviteResp::has_tcpcnt() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void VoipInviteResp::set_has_tcpcnt() {
  _has_bits_[0] |= 0x00004000u;
}
inline void VoipInviteResp::clear_has_tcpcnt() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void VoipInviteResp::clear_tcpcnt() {
  tcpcnt_ = 0u;
  clear_has_tcpcnt();
}
inline ::google::protobuf::uint32 VoipInviteResp::tcpcnt() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteResp.TcpCnt)
  return tcpcnt_;
}
inline void VoipInviteResp::set_tcpcnt(::google::protobuf::uint32 value) {
  set_has_tcpcnt();
  tcpcnt_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteResp.TcpCnt)
}

// optional uint32 SwitchInterval = 18;
inline bool VoipInviteResp::has_switchinterval() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void VoipInviteResp::set_has_switchinterval() {
  _has_bits_[0] |= 0x00008000u;
}
inline void VoipInviteResp::clear_has_switchinterval() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void VoipInviteResp::clear_switchinterval() {
  switchinterval_ = 0u;
  clear_has_switchinterval();
}
inline ::google::protobuf::uint32 VoipInviteResp::switchinterval() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteResp.SwitchInterval)
  return switchinterval_;
}
inline void VoipInviteResp::set_switchinterval(::google::protobuf::uint32 value) {
  set_has_switchinterval();
  switchinterval_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteResp.SwitchInterval)
}

// optional int32 Hw264SvrCfg = 19;
inline bool VoipInviteResp::has_hw264svrcfg() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void VoipInviteResp::set_has_hw264svrcfg() {
  _has_bits_[0] |= 0x00010000u;
}
inline void VoipInviteResp::clear_has_hw264svrcfg() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void VoipInviteResp::clear_hw264svrcfg() {
  hw264svrcfg_ = 0;
  clear_has_hw264svrcfg();
}
inline ::google::protobuf::int32 VoipInviteResp::hw264svrcfg() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteResp.Hw264SvrCfg)
  return hw264svrcfg_;
}
inline void VoipInviteResp::set_hw264svrcfg(::google::protobuf::int32 value) {
  set_has_hw264svrcfg();
  hw264svrcfg_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteResp.Hw264SvrCfg)
}

// optional int32 AudioEnableRmioAndS3A = 20;
inline bool VoipInviteResp::has_audioenablermioands3a() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void VoipInviteResp::set_has_audioenablermioands3a() {
  _has_bits_[0] |= 0x00020000u;
}
inline void VoipInviteResp::clear_has_audioenablermioands3a() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void VoipInviteResp::clear_audioenablermioands3a() {
  audioenablermioands3a_ = 0;
  clear_has_audioenablermioands3a();
}
inline ::google::protobuf::int32 VoipInviteResp::audioenablermioands3a() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteResp.AudioEnableRmioAndS3A)
  return audioenablermioands3a_;
}
inline void VoipInviteResp::set_audioenablermioands3a(::google::protobuf::int32 value) {
  set_has_audioenablermioands3a();
  audioenablermioands3a_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteResp.AudioEnableRmioAndS3A)
}

// optional int32 AudioEnableSpkec = 21;
inline bool VoipInviteResp::has_audioenablespkec() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void VoipInviteResp::set_has_audioenablespkec() {
  _has_bits_[0] |= 0x00040000u;
}
inline void VoipInviteResp::clear_has_audioenablespkec() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void VoipInviteResp::clear_audioenablespkec() {
  audioenablespkec_ = 0;
  clear_has_audioenablespkec();
}
inline ::google::protobuf::int32 VoipInviteResp::audioenablespkec() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipInviteResp.AudioEnableSpkec)
  return audioenablespkec_;
}
inline void VoipInviteResp::set_audioenablespkec(::google::protobuf::int32 value) {
  set_has_audioenablespkec();
  audioenablespkec_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipInviteResp.AudioEnableSpkec)
}

// -------------------------------------------------------------------

// VoipCancelInviteReq

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool VoipCancelInviteReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VoipCancelInviteReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VoipCancelInviteReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VoipCancelInviteReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& VoipCancelInviteReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipCancelInviteReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* VoipCancelInviteReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipCancelInviteReq.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* VoipCancelInviteReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.VoipCancelInviteReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void VoipCancelInviteReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipCancelInviteReq.BaseRequest)
}

// optional string FromUsername = 2;
inline bool VoipCancelInviteReq::has_fromusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoipCancelInviteReq::set_has_fromusername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoipCancelInviteReq::clear_has_fromusername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoipCancelInviteReq::clear_fromusername() {
  fromusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fromusername();
}
inline const ::std::string& VoipCancelInviteReq::fromusername() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipCancelInviteReq.FromUsername)
  return fromusername_.GetNoArena();
}
inline void VoipCancelInviteReq::set_fromusername(const ::std::string& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VoipCancelInviteReq.FromUsername)
}
#if LANG_CXX11
inline void VoipCancelInviteReq::set_fromusername(::std::string&& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VoipCancelInviteReq.FromUsername)
}
#endif
inline void VoipCancelInviteReq::set_fromusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VoipCancelInviteReq.FromUsername)
}
inline void VoipCancelInviteReq::set_fromusername(const char* value, size_t size) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VoipCancelInviteReq.FromUsername)
}
inline ::std::string* VoipCancelInviteReq::mutable_fromusername() {
  set_has_fromusername();
  // @@protoc_insertion_point(field_mutable:micromsg.VoipCancelInviteReq.FromUsername)
  return fromusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VoipCancelInviteReq::release_fromusername() {
  // @@protoc_insertion_point(field_release:micromsg.VoipCancelInviteReq.FromUsername)
  clear_has_fromusername();
  return fromusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VoipCancelInviteReq::set_allocated_fromusername(::std::string* fromusername) {
  if (fromusername != NULL) {
    set_has_fromusername();
  } else {
    clear_has_fromusername();
  }
  fromusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipCancelInviteReq.FromUsername)
}

// required int32 RoomId = 3;
inline bool VoipCancelInviteReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VoipCancelInviteReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VoipCancelInviteReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VoipCancelInviteReq::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 VoipCancelInviteReq::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipCancelInviteReq.RoomId)
  return roomid_;
}
inline void VoipCancelInviteReq::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipCancelInviteReq.RoomId)
}

// required int64 RoomKey = 4;
inline bool VoipCancelInviteReq::has_roomkey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VoipCancelInviteReq::set_has_roomkey() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VoipCancelInviteReq::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VoipCancelInviteReq::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
inline ::google::protobuf::int64 VoipCancelInviteReq::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipCancelInviteReq.RoomKey)
  return roomkey_;
}
inline void VoipCancelInviteReq::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipCancelInviteReq.RoomKey)
}

// optional string ToUserName = 6;
inline bool VoipCancelInviteReq::has_tousername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VoipCancelInviteReq::set_has_tousername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VoipCancelInviteReq::clear_has_tousername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VoipCancelInviteReq::clear_tousername() {
  tousername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tousername();
}
inline const ::std::string& VoipCancelInviteReq::tousername() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipCancelInviteReq.ToUserName)
  return tousername_.GetNoArena();
}
inline void VoipCancelInviteReq::set_tousername(const ::std::string& value) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VoipCancelInviteReq.ToUserName)
}
#if LANG_CXX11
inline void VoipCancelInviteReq::set_tousername(::std::string&& value) {
  set_has_tousername();
  tousername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VoipCancelInviteReq.ToUserName)
}
#endif
inline void VoipCancelInviteReq::set_tousername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VoipCancelInviteReq.ToUserName)
}
inline void VoipCancelInviteReq::set_tousername(const char* value, size_t size) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VoipCancelInviteReq.ToUserName)
}
inline ::std::string* VoipCancelInviteReq::mutable_tousername() {
  set_has_tousername();
  // @@protoc_insertion_point(field_mutable:micromsg.VoipCancelInviteReq.ToUserName)
  return tousername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VoipCancelInviteReq::release_tousername() {
  // @@protoc_insertion_point(field_release:micromsg.VoipCancelInviteReq.ToUserName)
  clear_has_tousername();
  return tousername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VoipCancelInviteReq::set_allocated_tousername(::std::string* tousername) {
  if (tousername != NULL) {
    set_has_tousername();
  } else {
    clear_has_tousername();
  }
  tousername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tousername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipCancelInviteReq.ToUserName)
}

// required .micromsg.VoipStatReportData ReportData = 8;
inline bool VoipCancelInviteReq::has_reportdata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VoipCancelInviteReq::set_has_reportdata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VoipCancelInviteReq::clear_has_reportdata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VoipCancelInviteReq::clear_reportdata() {
  if (reportdata_ != NULL) reportdata_->::micromsg::VoipStatReportData::Clear();
  clear_has_reportdata();
}
inline const ::micromsg::VoipStatReportData& VoipCancelInviteReq::reportdata() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipCancelInviteReq.ReportData)
  return reportdata_ != NULL ? *reportdata_
                         : *::micromsg::VoipStatReportData::internal_default_instance();
}
inline ::micromsg::VoipStatReportData* VoipCancelInviteReq::mutable_reportdata() {
  set_has_reportdata();
  if (reportdata_ == NULL) {
    reportdata_ = new ::micromsg::VoipStatReportData;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipCancelInviteReq.ReportData)
  return reportdata_;
}
inline ::micromsg::VoipStatReportData* VoipCancelInviteReq::release_reportdata() {
  // @@protoc_insertion_point(field_release:micromsg.VoipCancelInviteReq.ReportData)
  clear_has_reportdata();
  ::micromsg::VoipStatReportData* temp = reportdata_;
  reportdata_ = NULL;
  return temp;
}
inline void VoipCancelInviteReq::set_allocated_reportdata(::micromsg::VoipStatReportData* reportdata) {
  delete reportdata_;
  reportdata_ = reportdata;
  if (reportdata) {
    set_has_reportdata();
  } else {
    clear_has_reportdata();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipCancelInviteReq.ReportData)
}

// optional uint32 InviteType = 9;
inline bool VoipCancelInviteReq::has_invitetype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VoipCancelInviteReq::set_has_invitetype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VoipCancelInviteReq::clear_has_invitetype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VoipCancelInviteReq::clear_invitetype() {
  invitetype_ = 0u;
  clear_has_invitetype();
}
inline ::google::protobuf::uint32 VoipCancelInviteReq::invitetype() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipCancelInviteReq.InviteType)
  return invitetype_;
}
inline void VoipCancelInviteReq::set_invitetype(::google::protobuf::uint32 value) {
  set_has_invitetype();
  invitetype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipCancelInviteReq.InviteType)
}

// optional uint64 Timestamp64 = 10;
inline bool VoipCancelInviteReq::has_timestamp64() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VoipCancelInviteReq::set_has_timestamp64() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VoipCancelInviteReq::clear_has_timestamp64() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VoipCancelInviteReq::clear_timestamp64() {
  timestamp64_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp64();
}
inline ::google::protobuf::uint64 VoipCancelInviteReq::timestamp64() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipCancelInviteReq.Timestamp64)
  return timestamp64_;
}
inline void VoipCancelInviteReq::set_timestamp64(::google::protobuf::uint64 value) {
  set_has_timestamp64();
  timestamp64_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipCancelInviteReq.Timestamp64)
}

// optional uint32 InviteId = 11;
inline bool VoipCancelInviteReq::has_inviteid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VoipCancelInviteReq::set_has_inviteid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VoipCancelInviteReq::clear_has_inviteid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VoipCancelInviteReq::clear_inviteid() {
  inviteid_ = 0u;
  clear_has_inviteid();
}
inline ::google::protobuf::uint32 VoipCancelInviteReq::inviteid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipCancelInviteReq.InviteId)
  return inviteid_;
}
inline void VoipCancelInviteReq::set_inviteid(::google::protobuf::uint32 value) {
  set_has_inviteid();
  inviteid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipCancelInviteReq.InviteId)
}

// -------------------------------------------------------------------

// VoipCancelInviteResp

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool VoipCancelInviteResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoipCancelInviteResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoipCancelInviteResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoipCancelInviteResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& VoipCancelInviteResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipCancelInviteResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* VoipCancelInviteResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipCancelInviteResp.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* VoipCancelInviteResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.VoipCancelInviteResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void VoipCancelInviteResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipCancelInviteResp.BaseResponse)
}

// required int32 RoomId = 2;
inline bool VoipCancelInviteResp::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VoipCancelInviteResp::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VoipCancelInviteResp::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VoipCancelInviteResp::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 VoipCancelInviteResp::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipCancelInviteResp.RoomId)
  return roomid_;
}
inline void VoipCancelInviteResp::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipCancelInviteResp.RoomId)
}

// required int64 RoomKey = 3;
inline bool VoipCancelInviteResp::has_roomkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VoipCancelInviteResp::set_has_roomkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VoipCancelInviteResp::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VoipCancelInviteResp::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
inline ::google::protobuf::int64 VoipCancelInviteResp::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipCancelInviteResp.RoomKey)
  return roomkey_;
}
inline void VoipCancelInviteResp::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipCancelInviteResp.RoomKey)
}

// -------------------------------------------------------------------

// VoipAnswerReq

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool VoipAnswerReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VoipAnswerReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VoipAnswerReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VoipAnswerReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& VoipAnswerReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* VoipAnswerReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipAnswerReq.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* VoipAnswerReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.VoipAnswerReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void VoipAnswerReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipAnswerReq.BaseRequest)
}

// optional string FromUsername = 2;
inline bool VoipAnswerReq::has_fromusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoipAnswerReq::set_has_fromusername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoipAnswerReq::clear_has_fromusername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoipAnswerReq::clear_fromusername() {
  fromusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fromusername();
}
inline const ::std::string& VoipAnswerReq::fromusername() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerReq.FromUsername)
  return fromusername_.GetNoArena();
}
inline void VoipAnswerReq::set_fromusername(const ::std::string& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VoipAnswerReq.FromUsername)
}
#if LANG_CXX11
inline void VoipAnswerReq::set_fromusername(::std::string&& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VoipAnswerReq.FromUsername)
}
#endif
inline void VoipAnswerReq::set_fromusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VoipAnswerReq.FromUsername)
}
inline void VoipAnswerReq::set_fromusername(const char* value, size_t size) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VoipAnswerReq.FromUsername)
}
inline ::std::string* VoipAnswerReq::mutable_fromusername() {
  set_has_fromusername();
  // @@protoc_insertion_point(field_mutable:micromsg.VoipAnswerReq.FromUsername)
  return fromusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VoipAnswerReq::release_fromusername() {
  // @@protoc_insertion_point(field_release:micromsg.VoipAnswerReq.FromUsername)
  clear_has_fromusername();
  return fromusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VoipAnswerReq::set_allocated_fromusername(::std::string* fromusername) {
  if (fromusername != NULL) {
    set_has_fromusername();
  } else {
    clear_has_fromusername();
  }
  fromusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipAnswerReq.FromUsername)
}

// required int32 RoomId = 3;
inline bool VoipAnswerReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VoipAnswerReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VoipAnswerReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VoipAnswerReq::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 VoipAnswerReq::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerReq.RoomId)
  return roomid_;
}
inline void VoipAnswerReq::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAnswerReq.RoomId)
}

// required int32 Answer = 4;
inline bool VoipAnswerReq::has_answer() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VoipAnswerReq::set_has_answer() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VoipAnswerReq::clear_has_answer() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VoipAnswerReq::clear_answer() {
  answer_ = 0;
  clear_has_answer();
}
inline ::google::protobuf::int32 VoipAnswerReq::answer() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerReq.Answer)
  return answer_;
}
inline void VoipAnswerReq::set_answer(::google::protobuf::int32 value) {
  set_has_answer();
  answer_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAnswerReq.Answer)
}

// optional .micromsg.VoipRelayData PeerId = 5;
inline bool VoipAnswerReq::has_peerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VoipAnswerReq::set_has_peerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VoipAnswerReq::clear_has_peerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VoipAnswerReq::clear_peerid() {
  if (peerid_ != NULL) peerid_->::micromsg::VoipRelayData::Clear();
  clear_has_peerid();
}
inline const ::micromsg::VoipRelayData& VoipAnswerReq::peerid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerReq.PeerId)
  return peerid_ != NULL ? *peerid_
                         : *::micromsg::VoipRelayData::internal_default_instance();
}
inline ::micromsg::VoipRelayData* VoipAnswerReq::mutable_peerid() {
  set_has_peerid();
  if (peerid_ == NULL) {
    peerid_ = new ::micromsg::VoipRelayData;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipAnswerReq.PeerId)
  return peerid_;
}
inline ::micromsg::VoipRelayData* VoipAnswerReq::release_peerid() {
  // @@protoc_insertion_point(field_release:micromsg.VoipAnswerReq.PeerId)
  clear_has_peerid();
  ::micromsg::VoipRelayData* temp = peerid_;
  peerid_ = NULL;
  return temp;
}
inline void VoipAnswerReq::set_allocated_peerid(::micromsg::VoipRelayData* peerid) {
  delete peerid_;
  peerid_ = peerid;
  if (peerid) {
    set_has_peerid();
  } else {
    clear_has_peerid();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipAnswerReq.PeerId)
}

// optional .micromsg.VoipRelayData CapInfo = 6;
inline bool VoipAnswerReq::has_capinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VoipAnswerReq::set_has_capinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VoipAnswerReq::clear_has_capinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VoipAnswerReq::clear_capinfo() {
  if (capinfo_ != NULL) capinfo_->::micromsg::VoipRelayData::Clear();
  clear_has_capinfo();
}
inline const ::micromsg::VoipRelayData& VoipAnswerReq::capinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerReq.CapInfo)
  return capinfo_ != NULL ? *capinfo_
                         : *::micromsg::VoipRelayData::internal_default_instance();
}
inline ::micromsg::VoipRelayData* VoipAnswerReq::mutable_capinfo() {
  set_has_capinfo();
  if (capinfo_ == NULL) {
    capinfo_ = new ::micromsg::VoipRelayData;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipAnswerReq.CapInfo)
  return capinfo_;
}
inline ::micromsg::VoipRelayData* VoipAnswerReq::release_capinfo() {
  // @@protoc_insertion_point(field_release:micromsg.VoipAnswerReq.CapInfo)
  clear_has_capinfo();
  ::micromsg::VoipRelayData* temp = capinfo_;
  capinfo_ = NULL;
  return temp;
}
inline void VoipAnswerReq::set_allocated_capinfo(::micromsg::VoipRelayData* capinfo) {
  delete capinfo_;
  capinfo_ = capinfo;
  if (capinfo) {
    set_has_capinfo();
  } else {
    clear_has_capinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipAnswerReq.CapInfo)
}

// required int64 RoomKey = 7;
inline bool VoipAnswerReq::has_roomkey() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VoipAnswerReq::set_has_roomkey() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VoipAnswerReq::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VoipAnswerReq::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
inline ::google::protobuf::int64 VoipAnswerReq::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerReq.RoomKey)
  return roomkey_;
}
inline void VoipAnswerReq::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAnswerReq.RoomKey)
}

// required int32 NetType = 8;
inline bool VoipAnswerReq::has_nettype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VoipAnswerReq::set_has_nettype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VoipAnswerReq::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VoipAnswerReq::clear_nettype() {
  nettype_ = 0;
  clear_has_nettype();
}
inline ::google::protobuf::int32 VoipAnswerReq::nettype() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerReq.NetType)
  return nettype_;
}
inline void VoipAnswerReq::set_nettype(::google::protobuf::int32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAnswerReq.NetType)
}

// optional uint64 Timestamp64 = 9;
inline bool VoipAnswerReq::has_timestamp64() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VoipAnswerReq::set_has_timestamp64() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VoipAnswerReq::clear_has_timestamp64() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VoipAnswerReq::clear_timestamp64() {
  timestamp64_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp64();
}
inline ::google::protobuf::uint64 VoipAnswerReq::timestamp64() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerReq.Timestamp64)
  return timestamp64_;
}
inline void VoipAnswerReq::set_timestamp64(::google::protobuf::uint64 value) {
  set_has_timestamp64();
  timestamp64_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAnswerReq.Timestamp64)
}

// optional int32 OnlyAudio = 10;
inline bool VoipAnswerReq::has_onlyaudio() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VoipAnswerReq::set_has_onlyaudio() {
  _has_bits_[0] |= 0x00000200u;
}
inline void VoipAnswerReq::clear_has_onlyaudio() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void VoipAnswerReq::clear_onlyaudio() {
  onlyaudio_ = 0;
  clear_has_onlyaudio();
}
inline ::google::protobuf::int32 VoipAnswerReq::onlyaudio() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerReq.OnlyAudio)
  return onlyaudio_;
}
inline void VoipAnswerReq::set_onlyaudio(::google::protobuf::int32 value) {
  set_has_onlyaudio();
  onlyaudio_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAnswerReq.OnlyAudio)
}

// -------------------------------------------------------------------

// VoipAnswerResp

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool VoipAnswerResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoipAnswerResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoipAnswerResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoipAnswerResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& VoipAnswerResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* VoipAnswerResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipAnswerResp.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* VoipAnswerResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.VoipAnswerResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void VoipAnswerResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipAnswerResp.BaseResponse)
}

// required int32 AddrCount = 2;
inline bool VoipAnswerResp::has_addrcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VoipAnswerResp::set_has_addrcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VoipAnswerResp::clear_has_addrcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VoipAnswerResp::clear_addrcount() {
  addrcount_ = 0;
  clear_has_addrcount();
}
inline ::google::protobuf::int32 VoipAnswerResp::addrcount() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerResp.AddrCount)
  return addrcount_;
}
inline void VoipAnswerResp::set_addrcount(::google::protobuf::int32 value) {
  set_has_addrcount();
  addrcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAnswerResp.AddrCount)
}

// repeated .micromsg.VoipAddr AddrList = 3;
inline int VoipAnswerResp::addrlist_size() const {
  return addrlist_.size();
}
inline void VoipAnswerResp::clear_addrlist() {
  addrlist_.Clear();
}
inline const ::micromsg::VoipAddr& VoipAnswerResp::addrlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerResp.AddrList)
  return addrlist_.Get(index);
}
inline ::micromsg::VoipAddr* VoipAnswerResp::mutable_addrlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.VoipAnswerResp.AddrList)
  return addrlist_.Mutable(index);
}
inline ::micromsg::VoipAddr* VoipAnswerResp::add_addrlist() {
  // @@protoc_insertion_point(field_add:micromsg.VoipAnswerResp.AddrList)
  return addrlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::VoipAddr >*
VoipAnswerResp::mutable_addrlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.VoipAnswerResp.AddrList)
  return &addrlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::VoipAddr >&
VoipAnswerResp::addrlist() const {
  // @@protoc_insertion_point(field_list:micromsg.VoipAnswerResp.AddrList)
  return addrlist_;
}

// required int32 RoomId = 4;
inline bool VoipAnswerResp::has_roomid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VoipAnswerResp::set_has_roomid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VoipAnswerResp::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VoipAnswerResp::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 VoipAnswerResp::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerResp.RoomId)
  return roomid_;
}
inline void VoipAnswerResp::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAnswerResp.RoomId)
}

// required int64 RoomKey = 5;
inline bool VoipAnswerResp::has_roomkey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VoipAnswerResp::set_has_roomkey() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VoipAnswerResp::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VoipAnswerResp::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
inline ::google::protobuf::int64 VoipAnswerResp::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerResp.RoomKey)
  return roomkey_;
}
inline void VoipAnswerResp::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAnswerResp.RoomKey)
}

// required int32 RoomMemberID = 6;
inline bool VoipAnswerResp::has_roommemberid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VoipAnswerResp::set_has_roommemberid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VoipAnswerResp::clear_has_roommemberid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VoipAnswerResp::clear_roommemberid() {
  roommemberid_ = 0;
  clear_has_roommemberid();
}
inline ::google::protobuf::int32 VoipAnswerResp::roommemberid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerResp.RoomMemberID)
  return roommemberid_;
}
inline void VoipAnswerResp::set_roommemberid(::google::protobuf::int32 value) {
  set_has_roommemberid();
  roommemberid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAnswerResp.RoomMemberID)
}

// required .micromsg.VoipMultiRelayData RelayData = 7;
inline bool VoipAnswerResp::has_relaydata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VoipAnswerResp::set_has_relaydata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VoipAnswerResp::clear_has_relaydata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VoipAnswerResp::clear_relaydata() {
  if (relaydata_ != NULL) relaydata_->::micromsg::VoipMultiRelayData::Clear();
  clear_has_relaydata();
}
inline const ::micromsg::VoipMultiRelayData& VoipAnswerResp::relaydata() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerResp.RelayData)
  return relaydata_ != NULL ? *relaydata_
                         : *::micromsg::VoipMultiRelayData::internal_default_instance();
}
inline ::micromsg::VoipMultiRelayData* VoipAnswerResp::mutable_relaydata() {
  set_has_relaydata();
  if (relaydata_ == NULL) {
    relaydata_ = new ::micromsg::VoipMultiRelayData;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipAnswerResp.RelayData)
  return relaydata_;
}
inline ::micromsg::VoipMultiRelayData* VoipAnswerResp::release_relaydata() {
  // @@protoc_insertion_point(field_release:micromsg.VoipAnswerResp.RelayData)
  clear_has_relaydata();
  ::micromsg::VoipMultiRelayData* temp = relaydata_;
  relaydata_ = NULL;
  return temp;
}
inline void VoipAnswerResp::set_allocated_relaydata(::micromsg::VoipMultiRelayData* relaydata) {
  delete relaydata_;
  relaydata_ = relaydata;
  if (relaydata) {
    set_has_relaydata();
  } else {
    clear_has_relaydata();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipAnswerResp.RelayData)
}

// optional int32 NetQualityCnt = 8;
inline bool VoipAnswerResp::has_netqualitycnt() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VoipAnswerResp::set_has_netqualitycnt() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VoipAnswerResp::clear_has_netqualitycnt() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VoipAnswerResp::clear_netqualitycnt() {
  netqualitycnt_ = 0;
  clear_has_netqualitycnt();
}
inline ::google::protobuf::int32 VoipAnswerResp::netqualitycnt() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerResp.NetQualityCnt)
  return netqualitycnt_;
}
inline void VoipAnswerResp::set_netqualitycnt(::google::protobuf::int32 value) {
  set_has_netqualitycnt();
  netqualitycnt_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAnswerResp.NetQualityCnt)
}

// repeated .micromsg.VoipNetQuality NetQualityList = 9;
inline int VoipAnswerResp::netqualitylist_size() const {
  return netqualitylist_.size();
}
inline void VoipAnswerResp::clear_netqualitylist() {
  netqualitylist_.Clear();
}
inline const ::micromsg::VoipNetQuality& VoipAnswerResp::netqualitylist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerResp.NetQualityList)
  return netqualitylist_.Get(index);
}
inline ::micromsg::VoipNetQuality* VoipAnswerResp::mutable_netqualitylist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.VoipAnswerResp.NetQualityList)
  return netqualitylist_.Mutable(index);
}
inline ::micromsg::VoipNetQuality* VoipAnswerResp::add_netqualitylist() {
  // @@protoc_insertion_point(field_add:micromsg.VoipAnswerResp.NetQualityList)
  return netqualitylist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::VoipNetQuality >*
VoipAnswerResp::mutable_netqualitylist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.VoipAnswerResp.NetQualityList)
  return &netqualitylist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::VoipNetQuality >&
VoipAnswerResp::netqualitylist() const {
  // @@protoc_insertion_point(field_list:micromsg.VoipAnswerResp.NetQualityList)
  return netqualitylist_;
}

// optional int32 AudioTsdfBeyond3G = 10;
inline bool VoipAnswerResp::has_audiotsdfbeyond3g() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VoipAnswerResp::set_has_audiotsdfbeyond3g() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VoipAnswerResp::clear_has_audiotsdfbeyond3g() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VoipAnswerResp::clear_audiotsdfbeyond3g() {
  audiotsdfbeyond3g_ = 0;
  clear_has_audiotsdfbeyond3g();
}
inline ::google::protobuf::int32 VoipAnswerResp::audiotsdfbeyond3g() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerResp.AudioTsdfBeyond3G)
  return audiotsdfbeyond3g_;
}
inline void VoipAnswerResp::set_audiotsdfbeyond3g(::google::protobuf::int32 value) {
  set_has_audiotsdfbeyond3g();
  audiotsdfbeyond3g_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAnswerResp.AudioTsdfBeyond3G)
}

// optional int32 AudioTsdfEdge = 11;
inline bool VoipAnswerResp::has_audiotsdfedge() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VoipAnswerResp::set_has_audiotsdfedge() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VoipAnswerResp::clear_has_audiotsdfedge() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VoipAnswerResp::clear_audiotsdfedge() {
  audiotsdfedge_ = 0;
  clear_has_audiotsdfedge();
}
inline ::google::protobuf::int32 VoipAnswerResp::audiotsdfedge() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerResp.AudioTsdfEdge)
  return audiotsdfedge_;
}
inline void VoipAnswerResp::set_audiotsdfedge(::google::protobuf::int32 value) {
  set_has_audiotsdfedge();
  audiotsdfedge_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAnswerResp.AudioTsdfEdge)
}

// optional int32 PassthroughQosAlgorithm = 12;
inline bool VoipAnswerResp::has_passthroughqosalgorithm() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VoipAnswerResp::set_has_passthroughqosalgorithm() {
  _has_bits_[0] |= 0x00000200u;
}
inline void VoipAnswerResp::clear_has_passthroughqosalgorithm() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void VoipAnswerResp::clear_passthroughqosalgorithm() {
  passthroughqosalgorithm_ = 0;
  clear_has_passthroughqosalgorithm();
}
inline ::google::protobuf::int32 VoipAnswerResp::passthroughqosalgorithm() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerResp.PassthroughQosAlgorithm)
  return passthroughqosalgorithm_;
}
inline void VoipAnswerResp::set_passthroughqosalgorithm(::google::protobuf::int32 value) {
  set_has_passthroughqosalgorithm();
  passthroughqosalgorithm_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAnswerResp.PassthroughQosAlgorithm)
}

// optional int32 FastPlayRepair = 13;
inline bool VoipAnswerResp::has_fastplayrepair() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void VoipAnswerResp::set_has_fastplayrepair() {
  _has_bits_[0] |= 0x00000400u;
}
inline void VoipAnswerResp::clear_has_fastplayrepair() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void VoipAnswerResp::clear_fastplayrepair() {
  fastplayrepair_ = 0;
  clear_has_fastplayrepair();
}
inline ::google::protobuf::int32 VoipAnswerResp::fastplayrepair() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerResp.FastPlayRepair)
  return fastplayrepair_;
}
inline void VoipAnswerResp::set_fastplayrepair(::google::protobuf::int32 value) {
  set_has_fastplayrepair();
  fastplayrepair_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAnswerResp.FastPlayRepair)
}

// optional int32 NewP2S = 14;
inline bool VoipAnswerResp::has_newp2s() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void VoipAnswerResp::set_has_newp2s() {
  _has_bits_[0] |= 0x00000800u;
}
inline void VoipAnswerResp::clear_has_newp2s() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void VoipAnswerResp::clear_newp2s() {
  newp2s_ = 0;
  clear_has_newp2s();
}
inline ::google::protobuf::int32 VoipAnswerResp::newp2s() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerResp.NewP2S)
  return newp2s_;
}
inline void VoipAnswerResp::set_newp2s(::google::protobuf::int32 value) {
  set_has_newp2s();
  newp2s_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAnswerResp.NewP2S)
}

// optional int32 AudioDTX = 15;
inline bool VoipAnswerResp::has_audiodtx() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void VoipAnswerResp::set_has_audiodtx() {
  _has_bits_[0] |= 0x00001000u;
}
inline void VoipAnswerResp::clear_has_audiodtx() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void VoipAnswerResp::clear_audiodtx() {
  audiodtx_ = 0;
  clear_has_audiodtx();
}
inline ::google::protobuf::int32 VoipAnswerResp::audiodtx() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerResp.AudioDTX)
  return audiodtx_;
}
inline void VoipAnswerResp::set_audiodtx(::google::protobuf::int32 value) {
  set_has_audiodtx();
  audiodtx_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAnswerResp.AudioDTX)
}

// optional uint32 TcpCnt = 16;
inline bool VoipAnswerResp::has_tcpcnt() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void VoipAnswerResp::set_has_tcpcnt() {
  _has_bits_[0] |= 0x00002000u;
}
inline void VoipAnswerResp::clear_has_tcpcnt() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void VoipAnswerResp::clear_tcpcnt() {
  tcpcnt_ = 0u;
  clear_has_tcpcnt();
}
inline ::google::protobuf::uint32 VoipAnswerResp::tcpcnt() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerResp.TcpCnt)
  return tcpcnt_;
}
inline void VoipAnswerResp::set_tcpcnt(::google::protobuf::uint32 value) {
  set_has_tcpcnt();
  tcpcnt_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAnswerResp.TcpCnt)
}

// optional uint32 SwitchInterval = 17;
inline bool VoipAnswerResp::has_switchinterval() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void VoipAnswerResp::set_has_switchinterval() {
  _has_bits_[0] |= 0x00004000u;
}
inline void VoipAnswerResp::clear_has_switchinterval() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void VoipAnswerResp::clear_switchinterval() {
  switchinterval_ = 0u;
  clear_has_switchinterval();
}
inline ::google::protobuf::uint32 VoipAnswerResp::switchinterval() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerResp.SwitchInterval)
  return switchinterval_;
}
inline void VoipAnswerResp::set_switchinterval(::google::protobuf::uint32 value) {
  set_has_switchinterval();
  switchinterval_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAnswerResp.SwitchInterval)
}

// optional int32 Hw264SvrCfg = 18;
inline bool VoipAnswerResp::has_hw264svrcfg() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void VoipAnswerResp::set_has_hw264svrcfg() {
  _has_bits_[0] |= 0x00008000u;
}
inline void VoipAnswerResp::clear_has_hw264svrcfg() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void VoipAnswerResp::clear_hw264svrcfg() {
  hw264svrcfg_ = 0;
  clear_has_hw264svrcfg();
}
inline ::google::protobuf::int32 VoipAnswerResp::hw264svrcfg() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerResp.Hw264SvrCfg)
  return hw264svrcfg_;
}
inline void VoipAnswerResp::set_hw264svrcfg(::google::protobuf::int32 value) {
  set_has_hw264svrcfg();
  hw264svrcfg_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAnswerResp.Hw264SvrCfg)
}

// optional int32 AudioEnableRmioAndS3A = 19;
inline bool VoipAnswerResp::has_audioenablermioands3a() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void VoipAnswerResp::set_has_audioenablermioands3a() {
  _has_bits_[0] |= 0x00010000u;
}
inline void VoipAnswerResp::clear_has_audioenablermioands3a() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void VoipAnswerResp::clear_audioenablermioands3a() {
  audioenablermioands3a_ = 0;
  clear_has_audioenablermioands3a();
}
inline ::google::protobuf::int32 VoipAnswerResp::audioenablermioands3a() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerResp.AudioEnableRmioAndS3A)
  return audioenablermioands3a_;
}
inline void VoipAnswerResp::set_audioenablermioands3a(::google::protobuf::int32 value) {
  set_has_audioenablermioands3a();
  audioenablermioands3a_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAnswerResp.AudioEnableRmioAndS3A)
}

// optional int32 AudioEnableSpkec = 20;
inline bool VoipAnswerResp::has_audioenablespkec() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void VoipAnswerResp::set_has_audioenablespkec() {
  _has_bits_[0] |= 0x00020000u;
}
inline void VoipAnswerResp::clear_has_audioenablespkec() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void VoipAnswerResp::clear_audioenablespkec() {
  audioenablespkec_ = 0;
  clear_has_audioenablespkec();
}
inline ::google::protobuf::int32 VoipAnswerResp::audioenablespkec() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAnswerResp.AudioEnableSpkec)
  return audioenablespkec_;
}
inline void VoipAnswerResp::set_audioenablespkec(::google::protobuf::int32 value) {
  set_has_audioenablespkec();
  audioenablespkec_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAnswerResp.AudioEnableSpkec)
}

// -------------------------------------------------------------------

// VoipShutDownReq

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool VoipShutDownReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VoipShutDownReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VoipShutDownReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VoipShutDownReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& VoipShutDownReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipShutDownReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* VoipShutDownReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipShutDownReq.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* VoipShutDownReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.VoipShutDownReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void VoipShutDownReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipShutDownReq.BaseRequest)
}

// optional string FromUsername = 2;
inline bool VoipShutDownReq::has_fromusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoipShutDownReq::set_has_fromusername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoipShutDownReq::clear_has_fromusername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoipShutDownReq::clear_fromusername() {
  fromusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fromusername();
}
inline const ::std::string& VoipShutDownReq::fromusername() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipShutDownReq.FromUsername)
  return fromusername_.GetNoArena();
}
inline void VoipShutDownReq::set_fromusername(const ::std::string& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VoipShutDownReq.FromUsername)
}
#if LANG_CXX11
inline void VoipShutDownReq::set_fromusername(::std::string&& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VoipShutDownReq.FromUsername)
}
#endif
inline void VoipShutDownReq::set_fromusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VoipShutDownReq.FromUsername)
}
inline void VoipShutDownReq::set_fromusername(const char* value, size_t size) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VoipShutDownReq.FromUsername)
}
inline ::std::string* VoipShutDownReq::mutable_fromusername() {
  set_has_fromusername();
  // @@protoc_insertion_point(field_mutable:micromsg.VoipShutDownReq.FromUsername)
  return fromusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VoipShutDownReq::release_fromusername() {
  // @@protoc_insertion_point(field_release:micromsg.VoipShutDownReq.FromUsername)
  clear_has_fromusername();
  return fromusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VoipShutDownReq::set_allocated_fromusername(::std::string* fromusername) {
  if (fromusername != NULL) {
    set_has_fromusername();
  } else {
    clear_has_fromusername();
  }
  fromusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipShutDownReq.FromUsername)
}

// required int32 RoomId = 3;
inline bool VoipShutDownReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VoipShutDownReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VoipShutDownReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VoipShutDownReq::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 VoipShutDownReq::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipShutDownReq.RoomId)
  return roomid_;
}
inline void VoipShutDownReq::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipShutDownReq.RoomId)
}

// required int64 RoomKey = 4;
inline bool VoipShutDownReq::has_roomkey() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VoipShutDownReq::set_has_roomkey() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VoipShutDownReq::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VoipShutDownReq::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
inline ::google::protobuf::int64 VoipShutDownReq::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipShutDownReq.RoomKey)
  return roomkey_;
}
inline void VoipShutDownReq::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipShutDownReq.RoomKey)
}

// required .micromsg.VoipStatReportData ReportData = 5;
inline bool VoipShutDownReq::has_reportdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VoipShutDownReq::set_has_reportdata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VoipShutDownReq::clear_has_reportdata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VoipShutDownReq::clear_reportdata() {
  if (reportdata_ != NULL) reportdata_->::micromsg::VoipStatReportData::Clear();
  clear_has_reportdata();
}
inline const ::micromsg::VoipStatReportData& VoipShutDownReq::reportdata() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipShutDownReq.ReportData)
  return reportdata_ != NULL ? *reportdata_
                         : *::micromsg::VoipStatReportData::internal_default_instance();
}
inline ::micromsg::VoipStatReportData* VoipShutDownReq::mutable_reportdata() {
  set_has_reportdata();
  if (reportdata_ == NULL) {
    reportdata_ = new ::micromsg::VoipStatReportData;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipShutDownReq.ReportData)
  return reportdata_;
}
inline ::micromsg::VoipStatReportData* VoipShutDownReq::release_reportdata() {
  // @@protoc_insertion_point(field_release:micromsg.VoipShutDownReq.ReportData)
  clear_has_reportdata();
  ::micromsg::VoipStatReportData* temp = reportdata_;
  reportdata_ = NULL;
  return temp;
}
inline void VoipShutDownReq::set_allocated_reportdata(::micromsg::VoipStatReportData* reportdata) {
  delete reportdata_;
  reportdata_ = reportdata;
  if (reportdata) {
    set_has_reportdata();
  } else {
    clear_has_reportdata();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipShutDownReq.ReportData)
}

// optional uint64 Timestamp64 = 6;
inline bool VoipShutDownReq::has_timestamp64() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VoipShutDownReq::set_has_timestamp64() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VoipShutDownReq::clear_has_timestamp64() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VoipShutDownReq::clear_timestamp64() {
  timestamp64_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp64();
}
inline ::google::protobuf::uint64 VoipShutDownReq::timestamp64() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipShutDownReq.Timestamp64)
  return timestamp64_;
}
inline void VoipShutDownReq::set_timestamp64(::google::protobuf::uint64 value) {
  set_has_timestamp64();
  timestamp64_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipShutDownReq.Timestamp64)
}

// optional uint32 Duration = 7;
inline bool VoipShutDownReq::has_duration() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VoipShutDownReq::set_has_duration() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VoipShutDownReq::clear_has_duration() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VoipShutDownReq::clear_duration() {
  duration_ = 0u;
  clear_has_duration();
}
inline ::google::protobuf::uint32 VoipShutDownReq::duration() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipShutDownReq.Duration)
  return duration_;
}
inline void VoipShutDownReq::set_duration(::google::protobuf::uint32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipShutDownReq.Duration)
}

// -------------------------------------------------------------------

// VoipShutDownResp

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool VoipShutDownResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoipShutDownResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoipShutDownResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoipShutDownResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& VoipShutDownResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipShutDownResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* VoipShutDownResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipShutDownResp.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* VoipShutDownResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.VoipShutDownResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void VoipShutDownResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipShutDownResp.BaseResponse)
}

// required int32 RoomId = 2;
inline bool VoipShutDownResp::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VoipShutDownResp::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VoipShutDownResp::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VoipShutDownResp::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 VoipShutDownResp::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipShutDownResp.RoomId)
  return roomid_;
}
inline void VoipShutDownResp::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipShutDownResp.RoomId)
}

// required int64 RoomKey = 3;
inline bool VoipShutDownResp::has_roomkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VoipShutDownResp::set_has_roomkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VoipShutDownResp::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VoipShutDownResp::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
inline ::google::protobuf::int64 VoipShutDownResp::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipShutDownResp.RoomKey)
  return roomkey_;
}
inline void VoipShutDownResp::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipShutDownResp.RoomKey)
}

// -------------------------------------------------------------------

// VoipCmdItem

// required int32 CmdId = 1;
inline bool VoipCmdItem::has_cmdid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VoipCmdItem::set_has_cmdid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VoipCmdItem::clear_has_cmdid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VoipCmdItem::clear_cmdid() {
  cmdid_ = 0;
  clear_has_cmdid();
}
inline ::google::protobuf::int32 VoipCmdItem::cmdid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipCmdItem.CmdId)
  return cmdid_;
}
inline void VoipCmdItem::set_cmdid(::google::protobuf::int32 value) {
  set_has_cmdid();
  cmdid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipCmdItem.CmdId)
}

// required .micromsg.SKBuiltinBuffer_t CmdBuf = 2;
inline bool VoipCmdItem::has_cmdbuf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VoipCmdItem::set_has_cmdbuf() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VoipCmdItem::clear_has_cmdbuf() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VoipCmdItem::clear_cmdbuf() {
  if (cmdbuf_ != NULL) cmdbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_cmdbuf();
}
inline const ::micromsg::SKBuiltinBuffer_t& VoipCmdItem::cmdbuf() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipCmdItem.CmdBuf)
  return cmdbuf_ != NULL ? *cmdbuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinBuffer_t* VoipCmdItem::mutable_cmdbuf() {
  set_has_cmdbuf();
  if (cmdbuf_ == NULL) {
    cmdbuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipCmdItem.CmdBuf)
  return cmdbuf_;
}
inline ::micromsg::SKBuiltinBuffer_t* VoipCmdItem::release_cmdbuf() {
  // @@protoc_insertion_point(field_release:micromsg.VoipCmdItem.CmdBuf)
  clear_has_cmdbuf();
  ::micromsg::SKBuiltinBuffer_t* temp = cmdbuf_;
  cmdbuf_ = NULL;
  return temp;
}
inline void VoipCmdItem::set_allocated_cmdbuf(::micromsg::SKBuiltinBuffer_t* cmdbuf) {
  delete cmdbuf_;
  cmdbuf_ = cmdbuf;
  if (cmdbuf) {
    set_has_cmdbuf();
  } else {
    clear_has_cmdbuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipCmdItem.CmdBuf)
}

// optional string FromUserName = 3;
inline bool VoipCmdItem::has_fromusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoipCmdItem::set_has_fromusername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoipCmdItem::clear_has_fromusername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoipCmdItem::clear_fromusername() {
  fromusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fromusername();
}
inline const ::std::string& VoipCmdItem::fromusername() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipCmdItem.FromUserName)
  return fromusername_.GetNoArena();
}
inline void VoipCmdItem::set_fromusername(const ::std::string& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VoipCmdItem.FromUserName)
}
#if LANG_CXX11
inline void VoipCmdItem::set_fromusername(::std::string&& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VoipCmdItem.FromUserName)
}
#endif
inline void VoipCmdItem::set_fromusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VoipCmdItem.FromUserName)
}
inline void VoipCmdItem::set_fromusername(const char* value, size_t size) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VoipCmdItem.FromUserName)
}
inline ::std::string* VoipCmdItem::mutable_fromusername() {
  set_has_fromusername();
  // @@protoc_insertion_point(field_mutable:micromsg.VoipCmdItem.FromUserName)
  return fromusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VoipCmdItem::release_fromusername() {
  // @@protoc_insertion_point(field_release:micromsg.VoipCmdItem.FromUserName)
  clear_has_fromusername();
  return fromusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VoipCmdItem::set_allocated_fromusername(::std::string* fromusername) {
  if (fromusername != NULL) {
    set_has_fromusername();
  } else {
    clear_has_fromusername();
  }
  fromusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipCmdItem.FromUserName)
}

// -------------------------------------------------------------------

// VoipCmdList

// required uint32 Count = 1;
inline bool VoipCmdList::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoipCmdList::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoipCmdList::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoipCmdList::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 VoipCmdList::count() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipCmdList.Count)
  return count_;
}
inline void VoipCmdList::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipCmdList.Count)
}

// repeated .micromsg.VoipCmdItem List = 2;
inline int VoipCmdList::list_size() const {
  return list_.size();
}
inline void VoipCmdList::clear_list() {
  list_.Clear();
}
inline const ::micromsg::VoipCmdItem& VoipCmdList::list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.VoipCmdList.List)
  return list_.Get(index);
}
inline ::micromsg::VoipCmdItem* VoipCmdList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.VoipCmdList.List)
  return list_.Mutable(index);
}
inline ::micromsg::VoipCmdItem* VoipCmdList::add_list() {
  // @@protoc_insertion_point(field_add:micromsg.VoipCmdList.List)
  return list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::VoipCmdItem >*
VoipCmdList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.VoipCmdList.List)
  return &list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::VoipCmdItem >&
VoipCmdList::list() const {
  // @@protoc_insertion_point(field_list:micromsg.VoipCmdList.List)
  return list_;
}

// -------------------------------------------------------------------

// VoipSyncReq

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool VoipSyncReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VoipSyncReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VoipSyncReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VoipSyncReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& VoipSyncReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSyncReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* VoipSyncReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipSyncReq.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* VoipSyncReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.VoipSyncReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void VoipSyncReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipSyncReq.BaseRequest)
}

// optional string FromUsername = 2;
inline bool VoipSyncReq::has_fromusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoipSyncReq::set_has_fromusername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoipSyncReq::clear_has_fromusername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoipSyncReq::clear_fromusername() {
  fromusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fromusername();
}
inline const ::std::string& VoipSyncReq::fromusername() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSyncReq.FromUsername)
  return fromusername_.GetNoArena();
}
inline void VoipSyncReq::set_fromusername(const ::std::string& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VoipSyncReq.FromUsername)
}
#if LANG_CXX11
inline void VoipSyncReq::set_fromusername(::std::string&& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VoipSyncReq.FromUsername)
}
#endif
inline void VoipSyncReq::set_fromusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VoipSyncReq.FromUsername)
}
inline void VoipSyncReq::set_fromusername(const char* value, size_t size) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VoipSyncReq.FromUsername)
}
inline ::std::string* VoipSyncReq::mutable_fromusername() {
  set_has_fromusername();
  // @@protoc_insertion_point(field_mutable:micromsg.VoipSyncReq.FromUsername)
  return fromusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VoipSyncReq::release_fromusername() {
  // @@protoc_insertion_point(field_release:micromsg.VoipSyncReq.FromUsername)
  clear_has_fromusername();
  return fromusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VoipSyncReq::set_allocated_fromusername(::std::string* fromusername) {
  if (fromusername != NULL) {
    set_has_fromusername();
  } else {
    clear_has_fromusername();
  }
  fromusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipSyncReq.FromUsername)
}

// required int32 RoomId = 3;
inline bool VoipSyncReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VoipSyncReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VoipSyncReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VoipSyncReq::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 VoipSyncReq::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSyncReq.RoomId)
  return roomid_;
}
inline void VoipSyncReq::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSyncReq.RoomId)
}

// required .micromsg.SKBuiltinBuffer_t KeyBuf = 4;
inline bool VoipSyncReq::has_keybuf() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VoipSyncReq::set_has_keybuf() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VoipSyncReq::clear_has_keybuf() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VoipSyncReq::clear_keybuf() {
  if (keybuf_ != NULL) keybuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_keybuf();
}
inline const ::micromsg::SKBuiltinBuffer_t& VoipSyncReq::keybuf() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSyncReq.KeyBuf)
  return keybuf_ != NULL ? *keybuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinBuffer_t* VoipSyncReq::mutable_keybuf() {
  set_has_keybuf();
  if (keybuf_ == NULL) {
    keybuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipSyncReq.KeyBuf)
  return keybuf_;
}
inline ::micromsg::SKBuiltinBuffer_t* VoipSyncReq::release_keybuf() {
  // @@protoc_insertion_point(field_release:micromsg.VoipSyncReq.KeyBuf)
  clear_has_keybuf();
  ::micromsg::SKBuiltinBuffer_t* temp = keybuf_;
  keybuf_ = NULL;
  return temp;
}
inline void VoipSyncReq::set_allocated_keybuf(::micromsg::SKBuiltinBuffer_t* keybuf) {
  delete keybuf_;
  keybuf_ = keybuf;
  if (keybuf) {
    set_has_keybuf();
  } else {
    clear_has_keybuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipSyncReq.KeyBuf)
}

// required .micromsg.VoipCmdList OpLog = 5;
inline bool VoipSyncReq::has_oplog() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VoipSyncReq::set_has_oplog() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VoipSyncReq::clear_has_oplog() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VoipSyncReq::clear_oplog() {
  if (oplog_ != NULL) oplog_->::micromsg::VoipCmdList::Clear();
  clear_has_oplog();
}
inline const ::micromsg::VoipCmdList& VoipSyncReq::oplog() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSyncReq.OpLog)
  return oplog_ != NULL ? *oplog_
                         : *::micromsg::VoipCmdList::internal_default_instance();
}
inline ::micromsg::VoipCmdList* VoipSyncReq::mutable_oplog() {
  set_has_oplog();
  if (oplog_ == NULL) {
    oplog_ = new ::micromsg::VoipCmdList;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipSyncReq.OpLog)
  return oplog_;
}
inline ::micromsg::VoipCmdList* VoipSyncReq::release_oplog() {
  // @@protoc_insertion_point(field_release:micromsg.VoipSyncReq.OpLog)
  clear_has_oplog();
  ::micromsg::VoipCmdList* temp = oplog_;
  oplog_ = NULL;
  return temp;
}
inline void VoipSyncReq::set_allocated_oplog(::micromsg::VoipCmdList* oplog) {
  delete oplog_;
  oplog_ = oplog;
  if (oplog) {
    set_has_oplog();
  } else {
    clear_has_oplog();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipSyncReq.OpLog)
}

// required int64 RoomKey = 6;
inline bool VoipSyncReq::has_roomkey() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VoipSyncReq::set_has_roomkey() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VoipSyncReq::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VoipSyncReq::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
inline ::google::protobuf::int64 VoipSyncReq::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSyncReq.RoomKey)
  return roomkey_;
}
inline void VoipSyncReq::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSyncReq.RoomKey)
}

// required int32 Selector = 7;
inline bool VoipSyncReq::has_selector() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VoipSyncReq::set_has_selector() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VoipSyncReq::clear_has_selector() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VoipSyncReq::clear_selector() {
  selector_ = 0;
  clear_has_selector();
}
inline ::google::protobuf::int32 VoipSyncReq::selector() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSyncReq.Selector)
  return selector_;
}
inline void VoipSyncReq::set_selector(::google::protobuf::int32 value) {
  set_has_selector();
  selector_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSyncReq.Selector)
}

// optional uint64 Timestamp64 = 8;
inline bool VoipSyncReq::has_timestamp64() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VoipSyncReq::set_has_timestamp64() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VoipSyncReq::clear_has_timestamp64() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VoipSyncReq::clear_timestamp64() {
  timestamp64_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp64();
}
inline ::google::protobuf::uint64 VoipSyncReq::timestamp64() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSyncReq.Timestamp64)
  return timestamp64_;
}
inline void VoipSyncReq::set_timestamp64(::google::protobuf::uint64 value) {
  set_has_timestamp64();
  timestamp64_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSyncReq.Timestamp64)
}

// -------------------------------------------------------------------

// VoipHeartBeatReq

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool VoipHeartBeatReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoipHeartBeatReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoipHeartBeatReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoipHeartBeatReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& VoipHeartBeatReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipHeartBeatReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* VoipHeartBeatReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipHeartBeatReq.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* VoipHeartBeatReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.VoipHeartBeatReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void VoipHeartBeatReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipHeartBeatReq.BaseRequest)
}

// required int32 RoomId = 2;
inline bool VoipHeartBeatReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VoipHeartBeatReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VoipHeartBeatReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VoipHeartBeatReq::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 VoipHeartBeatReq::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipHeartBeatReq.RoomId)
  return roomid_;
}
inline void VoipHeartBeatReq::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipHeartBeatReq.RoomId)
}

// required int64 RoomKey = 3;
inline bool VoipHeartBeatReq::has_roomkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VoipHeartBeatReq::set_has_roomkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VoipHeartBeatReq::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VoipHeartBeatReq::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
inline ::google::protobuf::int64 VoipHeartBeatReq::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipHeartBeatReq.RoomKey)
  return roomkey_;
}
inline void VoipHeartBeatReq::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipHeartBeatReq.RoomKey)
}

// optional uint32 Timestamp = 4;
inline bool VoipHeartBeatReq::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VoipHeartBeatReq::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VoipHeartBeatReq::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VoipHeartBeatReq::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
inline ::google::protobuf::uint32 VoipHeartBeatReq::timestamp() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipHeartBeatReq.Timestamp)
  return timestamp_;
}
inline void VoipHeartBeatReq::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipHeartBeatReq.Timestamp)
}

// optional uint64 Timestamp64 = 5;
inline bool VoipHeartBeatReq::has_timestamp64() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VoipHeartBeatReq::set_has_timestamp64() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VoipHeartBeatReq::clear_has_timestamp64() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VoipHeartBeatReq::clear_timestamp64() {
  timestamp64_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp64();
}
inline ::google::protobuf::uint64 VoipHeartBeatReq::timestamp64() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipHeartBeatReq.Timestamp64)
  return timestamp64_;
}
inline void VoipHeartBeatReq::set_timestamp64(::google::protobuf::uint64 value) {
  set_has_timestamp64();
  timestamp64_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipHeartBeatReq.Timestamp64)
}

// optional int32 ConnectionType = 6;
inline bool VoipHeartBeatReq::has_connectiontype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VoipHeartBeatReq::set_has_connectiontype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VoipHeartBeatReq::clear_has_connectiontype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VoipHeartBeatReq::clear_connectiontype() {
  connectiontype_ = 0;
  clear_has_connectiontype();
}
inline ::google::protobuf::int32 VoipHeartBeatReq::connectiontype() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipHeartBeatReq.ConnectionType)
  return connectiontype_;
}
inline void VoipHeartBeatReq::set_connectiontype(::google::protobuf::int32 value) {
  set_has_connectiontype();
  connectiontype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipHeartBeatReq.ConnectionType)
}

// -------------------------------------------------------------------

// VoipHeartBeatResp

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool VoipHeartBeatResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoipHeartBeatResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoipHeartBeatResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoipHeartBeatResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& VoipHeartBeatResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipHeartBeatResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* VoipHeartBeatResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipHeartBeatResp.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* VoipHeartBeatResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.VoipHeartBeatResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void VoipHeartBeatResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipHeartBeatResp.BaseResponse)
}

// required int32 RoomId = 2;
inline bool VoipHeartBeatResp::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VoipHeartBeatResp::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VoipHeartBeatResp::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VoipHeartBeatResp::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 VoipHeartBeatResp::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipHeartBeatResp.RoomId)
  return roomid_;
}
inline void VoipHeartBeatResp::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipHeartBeatResp.RoomId)
}

// required int64 RoomKey = 3;
inline bool VoipHeartBeatResp::has_roomkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VoipHeartBeatResp::set_has_roomkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VoipHeartBeatResp::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VoipHeartBeatResp::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
inline ::google::protobuf::int64 VoipHeartBeatResp::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipHeartBeatResp.RoomKey)
  return roomkey_;
}
inline void VoipHeartBeatResp::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipHeartBeatResp.RoomKey)
}

// optional uint32 Timestamp = 4;
inline bool VoipHeartBeatResp::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VoipHeartBeatResp::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VoipHeartBeatResp::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VoipHeartBeatResp::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
inline ::google::protobuf::uint32 VoipHeartBeatResp::timestamp() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipHeartBeatResp.Timestamp)
  return timestamp_;
}
inline void VoipHeartBeatResp::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipHeartBeatResp.Timestamp)
}

// -------------------------------------------------------------------

// VoipSyncResp

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool VoipSyncResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoipSyncResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoipSyncResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoipSyncResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& VoipSyncResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSyncResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* VoipSyncResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipSyncResp.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* VoipSyncResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.VoipSyncResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void VoipSyncResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipSyncResp.BaseResponse)
}

// required int32 RoomId = 3;
inline bool VoipSyncResp::has_roomid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VoipSyncResp::set_has_roomid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VoipSyncResp::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VoipSyncResp::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 VoipSyncResp::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSyncResp.RoomId)
  return roomid_;
}
inline void VoipSyncResp::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSyncResp.RoomId)
}

// required .micromsg.SKBuiltinBuffer_t KeyBuf = 4;
inline bool VoipSyncResp::has_keybuf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VoipSyncResp::set_has_keybuf() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VoipSyncResp::clear_has_keybuf() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VoipSyncResp::clear_keybuf() {
  if (keybuf_ != NULL) keybuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_keybuf();
}
inline const ::micromsg::SKBuiltinBuffer_t& VoipSyncResp::keybuf() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSyncResp.KeyBuf)
  return keybuf_ != NULL ? *keybuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinBuffer_t* VoipSyncResp::mutable_keybuf() {
  set_has_keybuf();
  if (keybuf_ == NULL) {
    keybuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipSyncResp.KeyBuf)
  return keybuf_;
}
inline ::micromsg::SKBuiltinBuffer_t* VoipSyncResp::release_keybuf() {
  // @@protoc_insertion_point(field_release:micromsg.VoipSyncResp.KeyBuf)
  clear_has_keybuf();
  ::micromsg::SKBuiltinBuffer_t* temp = keybuf_;
  keybuf_ = NULL;
  return temp;
}
inline void VoipSyncResp::set_allocated_keybuf(::micromsg::SKBuiltinBuffer_t* keybuf) {
  delete keybuf_;
  keybuf_ = keybuf;
  if (keybuf) {
    set_has_keybuf();
  } else {
    clear_has_keybuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipSyncResp.KeyBuf)
}

// required .micromsg.VoipCmdList CmdList = 5;
inline bool VoipSyncResp::has_cmdlist() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VoipSyncResp::set_has_cmdlist() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VoipSyncResp::clear_has_cmdlist() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VoipSyncResp::clear_cmdlist() {
  if (cmdlist_ != NULL) cmdlist_->::micromsg::VoipCmdList::Clear();
  clear_has_cmdlist();
}
inline const ::micromsg::VoipCmdList& VoipSyncResp::cmdlist() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSyncResp.CmdList)
  return cmdlist_ != NULL ? *cmdlist_
                         : *::micromsg::VoipCmdList::internal_default_instance();
}
inline ::micromsg::VoipCmdList* VoipSyncResp::mutable_cmdlist() {
  set_has_cmdlist();
  if (cmdlist_ == NULL) {
    cmdlist_ = new ::micromsg::VoipCmdList;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipSyncResp.CmdList)
  return cmdlist_;
}
inline ::micromsg::VoipCmdList* VoipSyncResp::release_cmdlist() {
  // @@protoc_insertion_point(field_release:micromsg.VoipSyncResp.CmdList)
  clear_has_cmdlist();
  ::micromsg::VoipCmdList* temp = cmdlist_;
  cmdlist_ = NULL;
  return temp;
}
inline void VoipSyncResp::set_allocated_cmdlist(::micromsg::VoipCmdList* cmdlist) {
  delete cmdlist_;
  cmdlist_ = cmdlist;
  if (cmdlist) {
    set_has_cmdlist();
  } else {
    clear_has_cmdlist();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipSyncResp.CmdList)
}

// required int32 ContinueFlag = 7;
inline bool VoipSyncResp::has_continueflag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VoipSyncResp::set_has_continueflag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VoipSyncResp::clear_has_continueflag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VoipSyncResp::clear_continueflag() {
  continueflag_ = 0;
  clear_has_continueflag();
}
inline ::google::protobuf::int32 VoipSyncResp::continueflag() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSyncResp.ContinueFlag)
  return continueflag_;
}
inline void VoipSyncResp::set_continueflag(::google::protobuf::int32 value) {
  set_has_continueflag();
  continueflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSyncResp.ContinueFlag)
}

// required int64 RoomKey = 8;
inline bool VoipSyncResp::has_roomkey() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VoipSyncResp::set_has_roomkey() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VoipSyncResp::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VoipSyncResp::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
inline ::google::protobuf::int64 VoipSyncResp::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSyncResp.RoomKey)
  return roomkey_;
}
inline void VoipSyncResp::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSyncResp.RoomKey)
}

// -------------------------------------------------------------------

// VoipStatusItem

// optional string Username = 1;
inline bool VoipStatusItem::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoipStatusItem::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoipStatusItem::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoipStatusItem::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& VoipStatusItem::username() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipStatusItem.Username)
  return username_.GetNoArena();
}
inline void VoipStatusItem::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VoipStatusItem.Username)
}
#if LANG_CXX11
inline void VoipStatusItem::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VoipStatusItem.Username)
}
#endif
inline void VoipStatusItem::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VoipStatusItem.Username)
}
inline void VoipStatusItem::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VoipStatusItem.Username)
}
inline ::std::string* VoipStatusItem::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.VoipStatusItem.Username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VoipStatusItem::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.VoipStatusItem.Username)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VoipStatusItem::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipStatusItem.Username)
}

// required int32 Status = 2;
inline bool VoipStatusItem::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VoipStatusItem::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VoipStatusItem::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VoipStatusItem::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 VoipStatusItem::status() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipStatusItem.Status)
  return status_;
}
inline void VoipStatusItem::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipStatusItem.Status)
}

// -------------------------------------------------------------------

// VoipGetRoomInfoReq

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool VoipGetRoomInfoReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VoipGetRoomInfoReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VoipGetRoomInfoReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VoipGetRoomInfoReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& VoipGetRoomInfoReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipGetRoomInfoReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* VoipGetRoomInfoReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipGetRoomInfoReq.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* VoipGetRoomInfoReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.VoipGetRoomInfoReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void VoipGetRoomInfoReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipGetRoomInfoReq.BaseRequest)
}

// required int32 RoomId = 2;
inline bool VoipGetRoomInfoReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VoipGetRoomInfoReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VoipGetRoomInfoReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VoipGetRoomInfoReq::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 VoipGetRoomInfoReq::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipGetRoomInfoReq.RoomId)
  return roomid_;
}
inline void VoipGetRoomInfoReq::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipGetRoomInfoReq.RoomId)
}

// required int64 RoomKey = 3;
inline bool VoipGetRoomInfoReq::has_roomkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VoipGetRoomInfoReq::set_has_roomkey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VoipGetRoomInfoReq::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VoipGetRoomInfoReq::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
inline ::google::protobuf::int64 VoipGetRoomInfoReq::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipGetRoomInfoReq.RoomKey)
  return roomkey_;
}
inline void VoipGetRoomInfoReq::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipGetRoomInfoReq.RoomKey)
}

// optional string CallerUserName = 4;
inline bool VoipGetRoomInfoReq::has_callerusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoipGetRoomInfoReq::set_has_callerusername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoipGetRoomInfoReq::clear_has_callerusername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoipGetRoomInfoReq::clear_callerusername() {
  callerusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_callerusername();
}
inline const ::std::string& VoipGetRoomInfoReq::callerusername() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipGetRoomInfoReq.CallerUserName)
  return callerusername_.GetNoArena();
}
inline void VoipGetRoomInfoReq::set_callerusername(const ::std::string& value) {
  set_has_callerusername();
  callerusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VoipGetRoomInfoReq.CallerUserName)
}
#if LANG_CXX11
inline void VoipGetRoomInfoReq::set_callerusername(::std::string&& value) {
  set_has_callerusername();
  callerusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VoipGetRoomInfoReq.CallerUserName)
}
#endif
inline void VoipGetRoomInfoReq::set_callerusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_callerusername();
  callerusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VoipGetRoomInfoReq.CallerUserName)
}
inline void VoipGetRoomInfoReq::set_callerusername(const char* value, size_t size) {
  set_has_callerusername();
  callerusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VoipGetRoomInfoReq.CallerUserName)
}
inline ::std::string* VoipGetRoomInfoReq::mutable_callerusername() {
  set_has_callerusername();
  // @@protoc_insertion_point(field_mutable:micromsg.VoipGetRoomInfoReq.CallerUserName)
  return callerusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VoipGetRoomInfoReq::release_callerusername() {
  // @@protoc_insertion_point(field_release:micromsg.VoipGetRoomInfoReq.CallerUserName)
  clear_has_callerusername();
  return callerusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VoipGetRoomInfoReq::set_allocated_callerusername(::std::string* callerusername) {
  if (callerusername != NULL) {
    set_has_callerusername();
  } else {
    clear_has_callerusername();
  }
  callerusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), callerusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipGetRoomInfoReq.CallerUserName)
}

// optional uint32 Type = 5;
inline bool VoipGetRoomInfoReq::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VoipGetRoomInfoReq::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VoipGetRoomInfoReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VoipGetRoomInfoReq::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 VoipGetRoomInfoReq::type() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipGetRoomInfoReq.Type)
  return type_;
}
inline void VoipGetRoomInfoReq::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipGetRoomInfoReq.Type)
}

// optional uint64 Timestamp64 = 6;
inline bool VoipGetRoomInfoReq::has_timestamp64() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VoipGetRoomInfoReq::set_has_timestamp64() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VoipGetRoomInfoReq::clear_has_timestamp64() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VoipGetRoomInfoReq::clear_timestamp64() {
  timestamp64_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp64();
}
inline ::google::protobuf::uint64 VoipGetRoomInfoReq::timestamp64() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipGetRoomInfoReq.Timestamp64)
  return timestamp64_;
}
inline void VoipGetRoomInfoReq::set_timestamp64(::google::protobuf::uint64 value) {
  set_has_timestamp64();
  timestamp64_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipGetRoomInfoReq.Timestamp64)
}

// -------------------------------------------------------------------

// VoipGetRoomInfoResp

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool VoipGetRoomInfoResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VoipGetRoomInfoResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VoipGetRoomInfoResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VoipGetRoomInfoResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& VoipGetRoomInfoResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipGetRoomInfoResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* VoipGetRoomInfoResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipGetRoomInfoResp.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* VoipGetRoomInfoResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.VoipGetRoomInfoResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void VoipGetRoomInfoResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipGetRoomInfoResp.BaseResponse)
}

// required int32 RoomId = 2;
inline bool VoipGetRoomInfoResp::has_roomid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VoipGetRoomInfoResp::set_has_roomid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VoipGetRoomInfoResp::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VoipGetRoomInfoResp::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 VoipGetRoomInfoResp::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipGetRoomInfoResp.RoomId)
  return roomid_;
}
inline void VoipGetRoomInfoResp::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipGetRoomInfoResp.RoomId)
}

// required int64 RoomKey = 3;
inline bool VoipGetRoomInfoResp::has_roomkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VoipGetRoomInfoResp::set_has_roomkey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VoipGetRoomInfoResp::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VoipGetRoomInfoResp::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
inline ::google::protobuf::int64 VoipGetRoomInfoResp::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipGetRoomInfoResp.RoomKey)
  return roomkey_;
}
inline void VoipGetRoomInfoResp::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipGetRoomInfoResp.RoomKey)
}

// required uint32 CreateTime = 4;
inline bool VoipGetRoomInfoResp::has_createtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VoipGetRoomInfoResp::set_has_createtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VoipGetRoomInfoResp::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VoipGetRoomInfoResp::clear_createtime() {
  createtime_ = 0u;
  clear_has_createtime();
}
inline ::google::protobuf::uint32 VoipGetRoomInfoResp::createtime() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipGetRoomInfoResp.CreateTime)
  return createtime_;
}
inline void VoipGetRoomInfoResp::set_createtime(::google::protobuf::uint32 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipGetRoomInfoResp.CreateTime)
}

// required int32 MemberCount = 6;
inline bool VoipGetRoomInfoResp::has_membercount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VoipGetRoomInfoResp::set_has_membercount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VoipGetRoomInfoResp::clear_has_membercount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VoipGetRoomInfoResp::clear_membercount() {
  membercount_ = 0;
  clear_has_membercount();
}
inline ::google::protobuf::int32 VoipGetRoomInfoResp::membercount() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipGetRoomInfoResp.MemberCount)
  return membercount_;
}
inline void VoipGetRoomInfoResp::set_membercount(::google::protobuf::int32 value) {
  set_has_membercount();
  membercount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipGetRoomInfoResp.MemberCount)
}

// repeated .micromsg.VoipStatusItem MemberStatus = 7;
inline int VoipGetRoomInfoResp::memberstatus_size() const {
  return memberstatus_.size();
}
inline void VoipGetRoomInfoResp::clear_memberstatus() {
  memberstatus_.Clear();
}
inline const ::micromsg::VoipStatusItem& VoipGetRoomInfoResp::memberstatus(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.VoipGetRoomInfoResp.MemberStatus)
  return memberstatus_.Get(index);
}
inline ::micromsg::VoipStatusItem* VoipGetRoomInfoResp::mutable_memberstatus(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.VoipGetRoomInfoResp.MemberStatus)
  return memberstatus_.Mutable(index);
}
inline ::micromsg::VoipStatusItem* VoipGetRoomInfoResp::add_memberstatus() {
  // @@protoc_insertion_point(field_add:micromsg.VoipGetRoomInfoResp.MemberStatus)
  return memberstatus_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::VoipStatusItem >*
VoipGetRoomInfoResp::mutable_memberstatus() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.VoipGetRoomInfoResp.MemberStatus)
  return &memberstatus_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::VoipStatusItem >&
VoipGetRoomInfoResp::memberstatus() const {
  // @@protoc_insertion_point(field_list:micromsg.VoipGetRoomInfoResp.MemberStatus)
  return memberstatus_;
}

// optional string CallerUserName = 8;
inline bool VoipGetRoomInfoResp::has_callerusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoipGetRoomInfoResp::set_has_callerusername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoipGetRoomInfoResp::clear_has_callerusername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoipGetRoomInfoResp::clear_callerusername() {
  callerusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_callerusername();
}
inline const ::std::string& VoipGetRoomInfoResp::callerusername() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipGetRoomInfoResp.CallerUserName)
  return callerusername_.GetNoArena();
}
inline void VoipGetRoomInfoResp::set_callerusername(const ::std::string& value) {
  set_has_callerusername();
  callerusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VoipGetRoomInfoResp.CallerUserName)
}
#if LANG_CXX11
inline void VoipGetRoomInfoResp::set_callerusername(::std::string&& value) {
  set_has_callerusername();
  callerusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VoipGetRoomInfoResp.CallerUserName)
}
#endif
inline void VoipGetRoomInfoResp::set_callerusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_callerusername();
  callerusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VoipGetRoomInfoResp.CallerUserName)
}
inline void VoipGetRoomInfoResp::set_callerusername(const char* value, size_t size) {
  set_has_callerusername();
  callerusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VoipGetRoomInfoResp.CallerUserName)
}
inline ::std::string* VoipGetRoomInfoResp::mutable_callerusername() {
  set_has_callerusername();
  // @@protoc_insertion_point(field_mutable:micromsg.VoipGetRoomInfoResp.CallerUserName)
  return callerusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VoipGetRoomInfoResp::release_callerusername() {
  // @@protoc_insertion_point(field_release:micromsg.VoipGetRoomInfoResp.CallerUserName)
  clear_has_callerusername();
  return callerusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VoipGetRoomInfoResp::set_allocated_callerusername(::std::string* callerusername) {
  if (callerusername != NULL) {
    set_has_callerusername();
  } else {
    clear_has_callerusername();
  }
  callerusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), callerusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipGetRoomInfoResp.CallerUserName)
}

// optional uint32 InviteType = 9;
inline bool VoipGetRoomInfoResp::has_invitetype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VoipGetRoomInfoResp::set_has_invitetype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VoipGetRoomInfoResp::clear_has_invitetype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VoipGetRoomInfoResp::clear_invitetype() {
  invitetype_ = 0u;
  clear_has_invitetype();
}
inline ::google::protobuf::uint32 VoipGetRoomInfoResp::invitetype() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipGetRoomInfoResp.InviteType)
  return invitetype_;
}
inline void VoipGetRoomInfoResp::set_invitetype(::google::protobuf::uint32 value) {
  set_has_invitetype();
  invitetype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipGetRoomInfoResp.InviteType)
}

// -------------------------------------------------------------------

// VoipAckReq

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool VoipAckReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VoipAckReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VoipAckReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VoipAckReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& VoipAckReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAckReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* VoipAckReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipAckReq.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* VoipAckReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.VoipAckReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void VoipAckReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipAckReq.BaseRequest)
}

// required int32 RoomId = 2;
inline bool VoipAckReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VoipAckReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VoipAckReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VoipAckReq::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 VoipAckReq::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAckReq.RoomId)
  return roomid_;
}
inline void VoipAckReq::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAckReq.RoomId)
}

// required int64 RoomKey = 3;
inline bool VoipAckReq::has_roomkey() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VoipAckReq::set_has_roomkey() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VoipAckReq::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VoipAckReq::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
inline ::google::protobuf::int64 VoipAckReq::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAckReq.RoomKey)
  return roomkey_;
}
inline void VoipAckReq::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAckReq.RoomKey)
}

// optional string FromUsername = 4;
inline bool VoipAckReq::has_fromusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoipAckReq::set_has_fromusername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoipAckReq::clear_has_fromusername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoipAckReq::clear_fromusername() {
  fromusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fromusername();
}
inline const ::std::string& VoipAckReq::fromusername() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAckReq.FromUsername)
  return fromusername_.GetNoArena();
}
inline void VoipAckReq::set_fromusername(const ::std::string& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VoipAckReq.FromUsername)
}
#if LANG_CXX11
inline void VoipAckReq::set_fromusername(::std::string&& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VoipAckReq.FromUsername)
}
#endif
inline void VoipAckReq::set_fromusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VoipAckReq.FromUsername)
}
inline void VoipAckReq::set_fromusername(const char* value, size_t size) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VoipAckReq.FromUsername)
}
inline ::std::string* VoipAckReq::mutable_fromusername() {
  set_has_fromusername();
  // @@protoc_insertion_point(field_mutable:micromsg.VoipAckReq.FromUsername)
  return fromusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VoipAckReq::release_fromusername() {
  // @@protoc_insertion_point(field_release:micromsg.VoipAckReq.FromUsername)
  clear_has_fromusername();
  return fromusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VoipAckReq::set_allocated_fromusername(::std::string* fromusername) {
  if (fromusername != NULL) {
    set_has_fromusername();
  } else {
    clear_has_fromusername();
  }
  fromusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipAckReq.FromUsername)
}

// optional int32 PreConnect = 5;
inline bool VoipAckReq::has_preconnect() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VoipAckReq::set_has_preconnect() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VoipAckReq::clear_has_preconnect() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VoipAckReq::clear_preconnect() {
  preconnect_ = 0;
  clear_has_preconnect();
}
inline ::google::protobuf::int32 VoipAckReq::preconnect() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAckReq.PreConnect)
  return preconnect_;
}
inline void VoipAckReq::set_preconnect(::google::protobuf::int32 value) {
  set_has_preconnect();
  preconnect_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAckReq.PreConnect)
}

// optional .micromsg.VoipRelayData PeerId = 6;
inline bool VoipAckReq::has_peerid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VoipAckReq::set_has_peerid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VoipAckReq::clear_has_peerid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VoipAckReq::clear_peerid() {
  if (peerid_ != NULL) peerid_->::micromsg::VoipRelayData::Clear();
  clear_has_peerid();
}
inline const ::micromsg::VoipRelayData& VoipAckReq::peerid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAckReq.PeerId)
  return peerid_ != NULL ? *peerid_
                         : *::micromsg::VoipRelayData::internal_default_instance();
}
inline ::micromsg::VoipRelayData* VoipAckReq::mutable_peerid() {
  set_has_peerid();
  if (peerid_ == NULL) {
    peerid_ = new ::micromsg::VoipRelayData;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipAckReq.PeerId)
  return peerid_;
}
inline ::micromsg::VoipRelayData* VoipAckReq::release_peerid() {
  // @@protoc_insertion_point(field_release:micromsg.VoipAckReq.PeerId)
  clear_has_peerid();
  ::micromsg::VoipRelayData* temp = peerid_;
  peerid_ = NULL;
  return temp;
}
inline void VoipAckReq::set_allocated_peerid(::micromsg::VoipRelayData* peerid) {
  delete peerid_;
  peerid_ = peerid;
  if (peerid) {
    set_has_peerid();
  } else {
    clear_has_peerid();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipAckReq.PeerId)
}

// optional .micromsg.VoipRelayData CapInfo = 7;
inline bool VoipAckReq::has_capinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VoipAckReq::set_has_capinfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VoipAckReq::clear_has_capinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VoipAckReq::clear_capinfo() {
  if (capinfo_ != NULL) capinfo_->::micromsg::VoipRelayData::Clear();
  clear_has_capinfo();
}
inline const ::micromsg::VoipRelayData& VoipAckReq::capinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAckReq.CapInfo)
  return capinfo_ != NULL ? *capinfo_
                         : *::micromsg::VoipRelayData::internal_default_instance();
}
inline ::micromsg::VoipRelayData* VoipAckReq::mutable_capinfo() {
  set_has_capinfo();
  if (capinfo_ == NULL) {
    capinfo_ = new ::micromsg::VoipRelayData;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipAckReq.CapInfo)
  return capinfo_;
}
inline ::micromsg::VoipRelayData* VoipAckReq::release_capinfo() {
  // @@protoc_insertion_point(field_release:micromsg.VoipAckReq.CapInfo)
  clear_has_capinfo();
  ::micromsg::VoipRelayData* temp = capinfo_;
  capinfo_ = NULL;
  return temp;
}
inline void VoipAckReq::set_allocated_capinfo(::micromsg::VoipRelayData* capinfo) {
  delete capinfo_;
  capinfo_ = capinfo;
  if (capinfo) {
    set_has_capinfo();
  } else {
    clear_has_capinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipAckReq.CapInfo)
}

// optional int32 NetType = 8;
inline bool VoipAckReq::has_nettype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VoipAckReq::set_has_nettype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VoipAckReq::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VoipAckReq::clear_nettype() {
  nettype_ = 0;
  clear_has_nettype();
}
inline ::google::protobuf::int32 VoipAckReq::nettype() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAckReq.NetType)
  return nettype_;
}
inline void VoipAckReq::set_nettype(::google::protobuf::int32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAckReq.NetType)
}

// optional string CallerName = 9;
inline bool VoipAckReq::has_callername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VoipAckReq::set_has_callername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VoipAckReq::clear_has_callername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VoipAckReq::clear_callername() {
  callername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_callername();
}
inline const ::std::string& VoipAckReq::callername() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAckReq.CallerName)
  return callername_.GetNoArena();
}
inline void VoipAckReq::set_callername(const ::std::string& value) {
  set_has_callername();
  callername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VoipAckReq.CallerName)
}
#if LANG_CXX11
inline void VoipAckReq::set_callername(::std::string&& value) {
  set_has_callername();
  callername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VoipAckReq.CallerName)
}
#endif
inline void VoipAckReq::set_callername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_callername();
  callername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VoipAckReq.CallerName)
}
inline void VoipAckReq::set_callername(const char* value, size_t size) {
  set_has_callername();
  callername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VoipAckReq.CallerName)
}
inline ::std::string* VoipAckReq::mutable_callername() {
  set_has_callername();
  // @@protoc_insertion_point(field_mutable:micromsg.VoipAckReq.CallerName)
  return callername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VoipAckReq::release_callername() {
  // @@protoc_insertion_point(field_release:micromsg.VoipAckReq.CallerName)
  clear_has_callername();
  return callername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VoipAckReq::set_allocated_callername(::std::string* callername) {
  if (callername != NULL) {
    set_has_callername();
  } else {
    clear_has_callername();
  }
  callername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), callername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipAckReq.CallerName)
}

// optional int32 AckStatus = 10;
inline bool VoipAckReq::has_ackstatus() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VoipAckReq::set_has_ackstatus() {
  _has_bits_[0] |= 0x00000200u;
}
inline void VoipAckReq::clear_has_ackstatus() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void VoipAckReq::clear_ackstatus() {
  ackstatus_ = 0;
  clear_has_ackstatus();
}
inline ::google::protobuf::int32 VoipAckReq::ackstatus() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAckReq.AckStatus)
  return ackstatus_;
}
inline void VoipAckReq::set_ackstatus(::google::protobuf::int32 value) {
  set_has_ackstatus();
  ackstatus_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAckReq.AckStatus)
}

// optional uint64 Timestamp64 = 11;
inline bool VoipAckReq::has_timestamp64() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void VoipAckReq::set_has_timestamp64() {
  _has_bits_[0] |= 0x00000400u;
}
inline void VoipAckReq::clear_has_timestamp64() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void VoipAckReq::clear_timestamp64() {
  timestamp64_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp64();
}
inline ::google::protobuf::uint64 VoipAckReq::timestamp64() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAckReq.Timestamp64)
  return timestamp64_;
}
inline void VoipAckReq::set_timestamp64(::google::protobuf::uint64 value) {
  set_has_timestamp64();
  timestamp64_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAckReq.Timestamp64)
}

// -------------------------------------------------------------------

// VoipAckResp

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool VoipAckResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoipAckResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoipAckResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoipAckResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& VoipAckResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAckResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* VoipAckResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipAckResp.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* VoipAckResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.VoipAckResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void VoipAckResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipAckResp.BaseResponse)
}

// required int32 RoomId = 2;
inline bool VoipAckResp::has_roomid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VoipAckResp::set_has_roomid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VoipAckResp::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VoipAckResp::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 VoipAckResp::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAckResp.RoomId)
  return roomid_;
}
inline void VoipAckResp::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAckResp.RoomId)
}

// required int64 RoomKey = 3;
inline bool VoipAckResp::has_roomkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VoipAckResp::set_has_roomkey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VoipAckResp::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VoipAckResp::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
inline ::google::protobuf::int64 VoipAckResp::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAckResp.RoomKey)
  return roomkey_;
}
inline void VoipAckResp::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAckResp.RoomKey)
}

// optional int32 RoomMemberID = 4;
inline bool VoipAckResp::has_roommemberid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VoipAckResp::set_has_roommemberid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VoipAckResp::clear_has_roommemberid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VoipAckResp::clear_roommemberid() {
  roommemberid_ = 0;
  clear_has_roommemberid();
}
inline ::google::protobuf::int32 VoipAckResp::roommemberid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAckResp.RoomMemberID)
  return roommemberid_;
}
inline void VoipAckResp::set_roommemberid(::google::protobuf::int32 value) {
  set_has_roommemberid();
  roommemberid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAckResp.RoomMemberID)
}

// optional .micromsg.VoipMultiRelayData RelayData = 5;
inline bool VoipAckResp::has_relaydata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VoipAckResp::set_has_relaydata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VoipAckResp::clear_has_relaydata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VoipAckResp::clear_relaydata() {
  if (relaydata_ != NULL) relaydata_->::micromsg::VoipMultiRelayData::Clear();
  clear_has_relaydata();
}
inline const ::micromsg::VoipMultiRelayData& VoipAckResp::relaydata() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAckResp.RelayData)
  return relaydata_ != NULL ? *relaydata_
                         : *::micromsg::VoipMultiRelayData::internal_default_instance();
}
inline ::micromsg::VoipMultiRelayData* VoipAckResp::mutable_relaydata() {
  set_has_relaydata();
  if (relaydata_ == NULL) {
    relaydata_ = new ::micromsg::VoipMultiRelayData;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipAckResp.RelayData)
  return relaydata_;
}
inline ::micromsg::VoipMultiRelayData* VoipAckResp::release_relaydata() {
  // @@protoc_insertion_point(field_release:micromsg.VoipAckResp.RelayData)
  clear_has_relaydata();
  ::micromsg::VoipMultiRelayData* temp = relaydata_;
  relaydata_ = NULL;
  return temp;
}
inline void VoipAckResp::set_allocated_relaydata(::micromsg::VoipMultiRelayData* relaydata) {
  delete relaydata_;
  relaydata_ = relaydata;
  if (relaydata) {
    set_has_relaydata();
  } else {
    clear_has_relaydata();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipAckResp.RelayData)
}

// optional int32 PreConnect = 6;
inline bool VoipAckResp::has_preconnect() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VoipAckResp::set_has_preconnect() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VoipAckResp::clear_has_preconnect() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VoipAckResp::clear_preconnect() {
  preconnect_ = 0;
  clear_has_preconnect();
}
inline ::google::protobuf::int32 VoipAckResp::preconnect() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAckResp.PreConnect)
  return preconnect_;
}
inline void VoipAckResp::set_preconnect(::google::protobuf::int32 value) {
  set_has_preconnect();
  preconnect_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAckResp.PreConnect)
}

// optional uint32 TcpCnt = 7;
inline bool VoipAckResp::has_tcpcnt() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VoipAckResp::set_has_tcpcnt() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VoipAckResp::clear_has_tcpcnt() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VoipAckResp::clear_tcpcnt() {
  tcpcnt_ = 0u;
  clear_has_tcpcnt();
}
inline ::google::protobuf::uint32 VoipAckResp::tcpcnt() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAckResp.TcpCnt)
  return tcpcnt_;
}
inline void VoipAckResp::set_tcpcnt(::google::protobuf::uint32 value) {
  set_has_tcpcnt();
  tcpcnt_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAckResp.TcpCnt)
}

// optional int32 AudioEnableRmioAndS3A = 8;
inline bool VoipAckResp::has_audioenablermioands3a() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VoipAckResp::set_has_audioenablermioands3a() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VoipAckResp::clear_has_audioenablermioands3a() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VoipAckResp::clear_audioenablermioands3a() {
  audioenablermioands3a_ = 0;
  clear_has_audioenablermioands3a();
}
inline ::google::protobuf::int32 VoipAckResp::audioenablermioands3a() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipAckResp.AudioEnableRmioAndS3A)
  return audioenablermioands3a_;
}
inline void VoipAckResp::set_audioenablermioands3a(::google::protobuf::int32 value) {
  set_has_audioenablermioands3a();
  audioenablermioands3a_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipAckResp.AudioEnableRmioAndS3A)
}

// -------------------------------------------------------------------

// VoipStatReportReq

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool VoipStatReportReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoipStatReportReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoipStatReportReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoipStatReportReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& VoipStatReportReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipStatReportReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* VoipStatReportReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipStatReportReq.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* VoipStatReportReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.VoipStatReportReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void VoipStatReportReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipStatReportReq.BaseRequest)
}

// required .micromsg.VoipStatReportData ReportData = 2;
inline bool VoipStatReportReq::has_reportdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VoipStatReportReq::set_has_reportdata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VoipStatReportReq::clear_has_reportdata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VoipStatReportReq::clear_reportdata() {
  if (reportdata_ != NULL) reportdata_->::micromsg::VoipStatReportData::Clear();
  clear_has_reportdata();
}
inline const ::micromsg::VoipStatReportData& VoipStatReportReq::reportdata() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipStatReportReq.ReportData)
  return reportdata_ != NULL ? *reportdata_
                         : *::micromsg::VoipStatReportData::internal_default_instance();
}
inline ::micromsg::VoipStatReportData* VoipStatReportReq::mutable_reportdata() {
  set_has_reportdata();
  if (reportdata_ == NULL) {
    reportdata_ = new ::micromsg::VoipStatReportData;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipStatReportReq.ReportData)
  return reportdata_;
}
inline ::micromsg::VoipStatReportData* VoipStatReportReq::release_reportdata() {
  // @@protoc_insertion_point(field_release:micromsg.VoipStatReportReq.ReportData)
  clear_has_reportdata();
  ::micromsg::VoipStatReportData* temp = reportdata_;
  reportdata_ = NULL;
  return temp;
}
inline void VoipStatReportReq::set_allocated_reportdata(::micromsg::VoipStatReportData* reportdata) {
  delete reportdata_;
  reportdata_ = reportdata;
  if (reportdata) {
    set_has_reportdata();
  } else {
    clear_has_reportdata();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipStatReportReq.ReportData)
}

// optional .micromsg.VoipStatReportData ChannelReportData = 3;
inline bool VoipStatReportReq::has_channelreportdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VoipStatReportReq::set_has_channelreportdata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VoipStatReportReq::clear_has_channelreportdata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VoipStatReportReq::clear_channelreportdata() {
  if (channelreportdata_ != NULL) channelreportdata_->::micromsg::VoipStatReportData::Clear();
  clear_has_channelreportdata();
}
inline const ::micromsg::VoipStatReportData& VoipStatReportReq::channelreportdata() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipStatReportReq.ChannelReportData)
  return channelreportdata_ != NULL ? *channelreportdata_
                         : *::micromsg::VoipStatReportData::internal_default_instance();
}
inline ::micromsg::VoipStatReportData* VoipStatReportReq::mutable_channelreportdata() {
  set_has_channelreportdata();
  if (channelreportdata_ == NULL) {
    channelreportdata_ = new ::micromsg::VoipStatReportData;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipStatReportReq.ChannelReportData)
  return channelreportdata_;
}
inline ::micromsg::VoipStatReportData* VoipStatReportReq::release_channelreportdata() {
  // @@protoc_insertion_point(field_release:micromsg.VoipStatReportReq.ChannelReportData)
  clear_has_channelreportdata();
  ::micromsg::VoipStatReportData* temp = channelreportdata_;
  channelreportdata_ = NULL;
  return temp;
}
inline void VoipStatReportReq::set_allocated_channelreportdata(::micromsg::VoipStatReportData* channelreportdata) {
  delete channelreportdata_;
  channelreportdata_ = channelreportdata;
  if (channelreportdata) {
    set_has_channelreportdata();
  } else {
    clear_has_channelreportdata();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipStatReportReq.ChannelReportData)
}

// optional .micromsg.VoipStatReportData DialReportData = 4;
inline bool VoipStatReportReq::has_dialreportdata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VoipStatReportReq::set_has_dialreportdata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VoipStatReportReq::clear_has_dialreportdata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VoipStatReportReq::clear_dialreportdata() {
  if (dialreportdata_ != NULL) dialreportdata_->::micromsg::VoipStatReportData::Clear();
  clear_has_dialreportdata();
}
inline const ::micromsg::VoipStatReportData& VoipStatReportReq::dialreportdata() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipStatReportReq.DialReportData)
  return dialreportdata_ != NULL ? *dialreportdata_
                         : *::micromsg::VoipStatReportData::internal_default_instance();
}
inline ::micromsg::VoipStatReportData* VoipStatReportReq::mutable_dialreportdata() {
  set_has_dialreportdata();
  if (dialreportdata_ == NULL) {
    dialreportdata_ = new ::micromsg::VoipStatReportData;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipStatReportReq.DialReportData)
  return dialreportdata_;
}
inline ::micromsg::VoipStatReportData* VoipStatReportReq::release_dialreportdata() {
  // @@protoc_insertion_point(field_release:micromsg.VoipStatReportReq.DialReportData)
  clear_has_dialreportdata();
  ::micromsg::VoipStatReportData* temp = dialreportdata_;
  dialreportdata_ = NULL;
  return temp;
}
inline void VoipStatReportReq::set_allocated_dialreportdata(::micromsg::VoipStatReportData* dialreportdata) {
  delete dialreportdata_;
  dialreportdata_ = dialreportdata;
  if (dialreportdata) {
    set_has_dialreportdata();
  } else {
    clear_has_dialreportdata();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipStatReportReq.DialReportData)
}

// optional .micromsg.VoipStatReportData EngineReportData = 5;
inline bool VoipStatReportReq::has_enginereportdata() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VoipStatReportReq::set_has_enginereportdata() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VoipStatReportReq::clear_has_enginereportdata() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VoipStatReportReq::clear_enginereportdata() {
  if (enginereportdata_ != NULL) enginereportdata_->::micromsg::VoipStatReportData::Clear();
  clear_has_enginereportdata();
}
inline const ::micromsg::VoipStatReportData& VoipStatReportReq::enginereportdata() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipStatReportReq.EngineReportData)
  return enginereportdata_ != NULL ? *enginereportdata_
                         : *::micromsg::VoipStatReportData::internal_default_instance();
}
inline ::micromsg::VoipStatReportData* VoipStatReportReq::mutable_enginereportdata() {
  set_has_enginereportdata();
  if (enginereportdata_ == NULL) {
    enginereportdata_ = new ::micromsg::VoipStatReportData;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipStatReportReq.EngineReportData)
  return enginereportdata_;
}
inline ::micromsg::VoipStatReportData* VoipStatReportReq::release_enginereportdata() {
  // @@protoc_insertion_point(field_release:micromsg.VoipStatReportReq.EngineReportData)
  clear_has_enginereportdata();
  ::micromsg::VoipStatReportData* temp = enginereportdata_;
  enginereportdata_ = NULL;
  return temp;
}
inline void VoipStatReportReq::set_allocated_enginereportdata(::micromsg::VoipStatReportData* enginereportdata) {
  delete enginereportdata_;
  enginereportdata_ = enginereportdata;
  if (enginereportdata) {
    set_has_enginereportdata();
  } else {
    clear_has_enginereportdata();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipStatReportReq.EngineReportData)
}

// optional uint64 Timestamp64 = 6;
inline bool VoipStatReportReq::has_timestamp64() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VoipStatReportReq::set_has_timestamp64() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VoipStatReportReq::clear_has_timestamp64() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VoipStatReportReq::clear_timestamp64() {
  timestamp64_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp64();
}
inline ::google::protobuf::uint64 VoipStatReportReq::timestamp64() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipStatReportReq.Timestamp64)
  return timestamp64_;
}
inline void VoipStatReportReq::set_timestamp64(::google::protobuf::uint64 value) {
  set_has_timestamp64();
  timestamp64_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipStatReportReq.Timestamp64)
}

// optional .micromsg.VoipStatReportData EngineExtReportData = 7;
inline bool VoipStatReportReq::has_engineextreportdata() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VoipStatReportReq::set_has_engineextreportdata() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VoipStatReportReq::clear_has_engineextreportdata() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VoipStatReportReq::clear_engineextreportdata() {
  if (engineextreportdata_ != NULL) engineextreportdata_->::micromsg::VoipStatReportData::Clear();
  clear_has_engineextreportdata();
}
inline const ::micromsg::VoipStatReportData& VoipStatReportReq::engineextreportdata() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipStatReportReq.EngineExtReportData)
  return engineextreportdata_ != NULL ? *engineextreportdata_
                         : *::micromsg::VoipStatReportData::internal_default_instance();
}
inline ::micromsg::VoipStatReportData* VoipStatReportReq::mutable_engineextreportdata() {
  set_has_engineextreportdata();
  if (engineextreportdata_ == NULL) {
    engineextreportdata_ = new ::micromsg::VoipStatReportData;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipStatReportReq.EngineExtReportData)
  return engineextreportdata_;
}
inline ::micromsg::VoipStatReportData* VoipStatReportReq::release_engineextreportdata() {
  // @@protoc_insertion_point(field_release:micromsg.VoipStatReportReq.EngineExtReportData)
  clear_has_engineextreportdata();
  ::micromsg::VoipStatReportData* temp = engineextreportdata_;
  engineextreportdata_ = NULL;
  return temp;
}
inline void VoipStatReportReq::set_allocated_engineextreportdata(::micromsg::VoipStatReportData* engineextreportdata) {
  delete engineextreportdata_;
  engineextreportdata_ = engineextreportdata;
  if (engineextreportdata) {
    set_has_engineextreportdata();
  } else {
    clear_has_engineextreportdata();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipStatReportReq.EngineExtReportData)
}

// -------------------------------------------------------------------

// VoipStatReportResp

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool VoipStatReportResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoipStatReportResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoipStatReportResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoipStatReportResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& VoipStatReportResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipStatReportResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* VoipStatReportResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipStatReportResp.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* VoipStatReportResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.VoipStatReportResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void VoipStatReportResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipStatReportResp.BaseResponse)
}

// -------------------------------------------------------------------

// VoipCompleteStatus

// required int32 CmdId = 1;
inline bool VoipCompleteStatus::has_cmdid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VoipCompleteStatus::set_has_cmdid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VoipCompleteStatus::clear_has_cmdid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VoipCompleteStatus::clear_cmdid() {
  cmdid_ = 0;
  clear_has_cmdid();
}
inline ::google::protobuf::int32 VoipCompleteStatus::cmdid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipCompleteStatus.CmdId)
  return cmdid_;
}
inline void VoipCompleteStatus::set_cmdid(::google::protobuf::int32 value) {
  set_has_cmdid();
  cmdid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipCompleteStatus.CmdId)
}

// required uint32 Uin = 2;
inline bool VoipCompleteStatus::has_uin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VoipCompleteStatus::set_has_uin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VoipCompleteStatus::clear_has_uin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VoipCompleteStatus::clear_uin() {
  uin_ = 0u;
  clear_has_uin();
}
inline ::google::protobuf::uint32 VoipCompleteStatus::uin() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipCompleteStatus.Uin)
  return uin_;
}
inline void VoipCompleteStatus::set_uin(::google::protobuf::uint32 value) {
  set_has_uin();
  uin_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipCompleteStatus.Uin)
}

// required uint32 Key = 3;
inline bool VoipCompleteStatus::has_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VoipCompleteStatus::set_has_key() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VoipCompleteStatus::clear_has_key() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VoipCompleteStatus::clear_key() {
  key_ = 0u;
  clear_has_key();
}
inline ::google::protobuf::uint32 VoipCompleteStatus::key() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipCompleteStatus.Key)
  return key_;
}
inline void VoipCompleteStatus::set_key(::google::protobuf::uint32 value) {
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipCompleteStatus.Key)
}

// required .micromsg.SKBuiltinBuffer_t Buffer = 4;
inline bool VoipCompleteStatus::has_buffer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoipCompleteStatus::set_has_buffer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoipCompleteStatus::clear_has_buffer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoipCompleteStatus::clear_buffer() {
  if (buffer_ != NULL) buffer_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_buffer();
}
inline const ::micromsg::SKBuiltinBuffer_t& VoipCompleteStatus::buffer() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipCompleteStatus.Buffer)
  return buffer_ != NULL ? *buffer_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinBuffer_t* VoipCompleteStatus::mutable_buffer() {
  set_has_buffer();
  if (buffer_ == NULL) {
    buffer_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipCompleteStatus.Buffer)
  return buffer_;
}
inline ::micromsg::SKBuiltinBuffer_t* VoipCompleteStatus::release_buffer() {
  // @@protoc_insertion_point(field_release:micromsg.VoipCompleteStatus.Buffer)
  clear_has_buffer();
  ::micromsg::SKBuiltinBuffer_t* temp = buffer_;
  buffer_ = NULL;
  return temp;
}
inline void VoipCompleteStatus::set_allocated_buffer(::micromsg::SKBuiltinBuffer_t* buffer) {
  delete buffer_;
  buffer_ = buffer;
  if (buffer) {
    set_has_buffer();
  } else {
    clear_has_buffer();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipCompleteStatus.Buffer)
}

// -------------------------------------------------------------------

// VoipCompleteStatusList

// required int32 Count = 1;
inline bool VoipCompleteStatusList::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoipCompleteStatusList::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoipCompleteStatusList::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoipCompleteStatusList::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 VoipCompleteStatusList::count() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipCompleteStatusList.Count)
  return count_;
}
inline void VoipCompleteStatusList::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipCompleteStatusList.Count)
}

// repeated .micromsg.VoipCompleteStatus CompleteStatus = 2;
inline int VoipCompleteStatusList::completestatus_size() const {
  return completestatus_.size();
}
inline void VoipCompleteStatusList::clear_completestatus() {
  completestatus_.Clear();
}
inline const ::micromsg::VoipCompleteStatus& VoipCompleteStatusList::completestatus(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.VoipCompleteStatusList.CompleteStatus)
  return completestatus_.Get(index);
}
inline ::micromsg::VoipCompleteStatus* VoipCompleteStatusList::mutable_completestatus(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.VoipCompleteStatusList.CompleteStatus)
  return completestatus_.Mutable(index);
}
inline ::micromsg::VoipCompleteStatus* VoipCompleteStatusList::add_completestatus() {
  // @@protoc_insertion_point(field_add:micromsg.VoipCompleteStatusList.CompleteStatus)
  return completestatus_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::VoipCompleteStatus >*
VoipCompleteStatusList::mutable_completestatus() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.VoipCompleteStatusList.CompleteStatus)
  return &completestatus_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::VoipCompleteStatus >&
VoipCompleteStatusList::completestatus() const {
  // @@protoc_insertion_point(field_list:micromsg.VoipCompleteStatusList.CompleteStatus)
  return completestatus_;
}

// required uint32 Seq = 3;
inline bool VoipCompleteStatusList::has_seq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VoipCompleteStatusList::set_has_seq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VoipCompleteStatusList::clear_has_seq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VoipCompleteStatusList::clear_seq() {
  seq_ = 0u;
  clear_has_seq();
}
inline ::google::protobuf::uint32 VoipCompleteStatusList::seq() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipCompleteStatusList.Seq)
  return seq_;
}
inline void VoipCompleteStatusList::set_seq(::google::protobuf::uint32 value) {
  set_has_seq();
  seq_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipCompleteStatusList.Seq)
}

// -------------------------------------------------------------------

// VoipRedirectReq

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool VoipRedirectReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoipRedirectReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoipRedirectReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoipRedirectReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& VoipRedirectReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipRedirectReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* VoipRedirectReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipRedirectReq.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* VoipRedirectReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.VoipRedirectReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void VoipRedirectReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipRedirectReq.BaseRequest)
}

// required int32 RoomId = 2;
inline bool VoipRedirectReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VoipRedirectReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VoipRedirectReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VoipRedirectReq::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 VoipRedirectReq::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipRedirectReq.RoomId)
  return roomid_;
}
inline void VoipRedirectReq::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipRedirectReq.RoomId)
}

// required int64 RoomKey = 3;
inline bool VoipRedirectReq::has_roomkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VoipRedirectReq::set_has_roomkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VoipRedirectReq::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VoipRedirectReq::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
inline ::google::protobuf::int64 VoipRedirectReq::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipRedirectReq.RoomKey)
  return roomkey_;
}
inline void VoipRedirectReq::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipRedirectReq.RoomKey)
}

// required int32 RoomMemberId = 4;
inline bool VoipRedirectReq::has_roommemberid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VoipRedirectReq::set_has_roommemberid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VoipRedirectReq::clear_has_roommemberid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VoipRedirectReq::clear_roommemberid() {
  roommemberid_ = 0;
  clear_has_roommemberid();
}
inline ::google::protobuf::int32 VoipRedirectReq::roommemberid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipRedirectReq.RoomMemberId)
  return roommemberid_;
}
inline void VoipRedirectReq::set_roommemberid(::google::protobuf::int32 value) {
  set_has_roommemberid();
  roommemberid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipRedirectReq.RoomMemberId)
}

// -------------------------------------------------------------------

// VoipRedirectResp

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool VoipRedirectResp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoipRedirectResp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoipRedirectResp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoipRedirectResp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& VoipRedirectResp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipRedirectResp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* VoipRedirectResp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipRedirectResp.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* VoipRedirectResp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.VoipRedirectResp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void VoipRedirectResp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipRedirectResp.BaseResponse)
}

// required int32 RoomId = 2;
inline bool VoipRedirectResp::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VoipRedirectResp::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VoipRedirectResp::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VoipRedirectResp::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 VoipRedirectResp::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipRedirectResp.RoomId)
  return roomid_;
}
inline void VoipRedirectResp::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipRedirectResp.RoomId)
}

// required int32 RelayAddrCount = 3;
inline bool VoipRedirectResp::has_relayaddrcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VoipRedirectResp::set_has_relayaddrcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VoipRedirectResp::clear_has_relayaddrcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VoipRedirectResp::clear_relayaddrcount() {
  relayaddrcount_ = 0;
  clear_has_relayaddrcount();
}
inline ::google::protobuf::int32 VoipRedirectResp::relayaddrcount() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipRedirectResp.RelayAddrCount)
  return relayaddrcount_;
}
inline void VoipRedirectResp::set_relayaddrcount(::google::protobuf::int32 value) {
  set_has_relayaddrcount();
  relayaddrcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipRedirectResp.RelayAddrCount)
}

// repeated .micromsg.VoipAddr RelayAddrList = 4;
inline int VoipRedirectResp::relayaddrlist_size() const {
  return relayaddrlist_.size();
}
inline void VoipRedirectResp::clear_relayaddrlist() {
  relayaddrlist_.Clear();
}
inline const ::micromsg::VoipAddr& VoipRedirectResp::relayaddrlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.VoipRedirectResp.RelayAddrList)
  return relayaddrlist_.Get(index);
}
inline ::micromsg::VoipAddr* VoipRedirectResp::mutable_relayaddrlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.VoipRedirectResp.RelayAddrList)
  return relayaddrlist_.Mutable(index);
}
inline ::micromsg::VoipAddr* VoipRedirectResp::add_relayaddrlist() {
  // @@protoc_insertion_point(field_add:micromsg.VoipRedirectResp.RelayAddrList)
  return relayaddrlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::VoipAddr >*
VoipRedirectResp::mutable_relayaddrlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.VoipRedirectResp.RelayAddrList)
  return &relayaddrlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::VoipAddr >&
VoipRedirectResp::relayaddrlist() const {
  // @@protoc_insertion_point(field_list:micromsg.VoipRedirectResp.RelayAddrList)
  return relayaddrlist_;
}

// required int32 PunchAddrCount = 5;
inline bool VoipRedirectResp::has_punchaddrcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VoipRedirectResp::set_has_punchaddrcount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VoipRedirectResp::clear_has_punchaddrcount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VoipRedirectResp::clear_punchaddrcount() {
  punchaddrcount_ = 0;
  clear_has_punchaddrcount();
}
inline ::google::protobuf::int32 VoipRedirectResp::punchaddrcount() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipRedirectResp.PunchAddrCount)
  return punchaddrcount_;
}
inline void VoipRedirectResp::set_punchaddrcount(::google::protobuf::int32 value) {
  set_has_punchaddrcount();
  punchaddrcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipRedirectResp.PunchAddrCount)
}

// repeated .micromsg.VoipAddr PunchAddrList = 6;
inline int VoipRedirectResp::punchaddrlist_size() const {
  return punchaddrlist_.size();
}
inline void VoipRedirectResp::clear_punchaddrlist() {
  punchaddrlist_.Clear();
}
inline const ::micromsg::VoipAddr& VoipRedirectResp::punchaddrlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.VoipRedirectResp.PunchAddrList)
  return punchaddrlist_.Get(index);
}
inline ::micromsg::VoipAddr* VoipRedirectResp::mutable_punchaddrlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.VoipRedirectResp.PunchAddrList)
  return punchaddrlist_.Mutable(index);
}
inline ::micromsg::VoipAddr* VoipRedirectResp::add_punchaddrlist() {
  // @@protoc_insertion_point(field_add:micromsg.VoipRedirectResp.PunchAddrList)
  return punchaddrlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::VoipAddr >*
VoipRedirectResp::mutable_punchaddrlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.VoipRedirectResp.PunchAddrList)
  return &punchaddrlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::VoipAddr >&
VoipRedirectResp::punchaddrlist() const {
  // @@protoc_insertion_point(field_list:micromsg.VoipRedirectResp.PunchAddrList)
  return punchaddrlist_;
}

// required int64 RoomKey = 7;
inline bool VoipRedirectResp::has_roomkey() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VoipRedirectResp::set_has_roomkey() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VoipRedirectResp::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VoipRedirectResp::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
inline ::google::protobuf::int64 VoipRedirectResp::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipRedirectResp.RoomKey)
  return roomkey_;
}
inline void VoipRedirectResp::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipRedirectResp.RoomKey)
}

// required int32 RoomMemberId = 8;
inline bool VoipRedirectResp::has_roommemberid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VoipRedirectResp::set_has_roommemberid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VoipRedirectResp::clear_has_roommemberid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VoipRedirectResp::clear_roommemberid() {
  roommemberid_ = 0;
  clear_has_roommemberid();
}
inline ::google::protobuf::int32 VoipRedirectResp::roommemberid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipRedirectResp.RoomMemberId)
  return roommemberid_;
}
inline void VoipRedirectResp::set_roommemberid(::google::protobuf::int32 value) {
  set_has_roommemberid();
  roommemberid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipRedirectResp.RoomMemberId)
}

// optional int32 TcpAddrCount = 9;
inline bool VoipRedirectResp::has_tcpaddrcount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VoipRedirectResp::set_has_tcpaddrcount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VoipRedirectResp::clear_has_tcpaddrcount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VoipRedirectResp::clear_tcpaddrcount() {
  tcpaddrcount_ = 0;
  clear_has_tcpaddrcount();
}
inline ::google::protobuf::int32 VoipRedirectResp::tcpaddrcount() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipRedirectResp.TcpAddrCount)
  return tcpaddrcount_;
}
inline void VoipRedirectResp::set_tcpaddrcount(::google::protobuf::int32 value) {
  set_has_tcpaddrcount();
  tcpaddrcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipRedirectResp.TcpAddrCount)
}

// repeated .micromsg.VoipAddr TcpAddrList = 10;
inline int VoipRedirectResp::tcpaddrlist_size() const {
  return tcpaddrlist_.size();
}
inline void VoipRedirectResp::clear_tcpaddrlist() {
  tcpaddrlist_.Clear();
}
inline const ::micromsg::VoipAddr& VoipRedirectResp::tcpaddrlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.VoipRedirectResp.TcpAddrList)
  return tcpaddrlist_.Get(index);
}
inline ::micromsg::VoipAddr* VoipRedirectResp::mutable_tcpaddrlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.VoipRedirectResp.TcpAddrList)
  return tcpaddrlist_.Mutable(index);
}
inline ::micromsg::VoipAddr* VoipRedirectResp::add_tcpaddrlist() {
  // @@protoc_insertion_point(field_add:micromsg.VoipRedirectResp.TcpAddrList)
  return tcpaddrlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::VoipAddr >*
VoipRedirectResp::mutable_tcpaddrlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.VoipRedirectResp.TcpAddrList)
  return &tcpaddrlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::VoipAddr >&
VoipRedirectResp::tcpaddrlist() const {
  // @@protoc_insertion_point(field_list:micromsg.VoipRedirectResp.TcpAddrList)
  return tcpaddrlist_;
}

// -------------------------------------------------------------------

// VoipDoubleLinkSwitchReq

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool VoipDoubleLinkSwitchReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoipDoubleLinkSwitchReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoipDoubleLinkSwitchReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoipDoubleLinkSwitchReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& VoipDoubleLinkSwitchReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipDoubleLinkSwitchReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* VoipDoubleLinkSwitchReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipDoubleLinkSwitchReq.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* VoipDoubleLinkSwitchReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.VoipDoubleLinkSwitchReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void VoipDoubleLinkSwitchReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipDoubleLinkSwitchReq.BaseRequest)
}

// required int32 RoomId = 2;
inline bool VoipDoubleLinkSwitchReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VoipDoubleLinkSwitchReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VoipDoubleLinkSwitchReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VoipDoubleLinkSwitchReq::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 VoipDoubleLinkSwitchReq::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipDoubleLinkSwitchReq.RoomId)
  return roomid_;
}
inline void VoipDoubleLinkSwitchReq::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipDoubleLinkSwitchReq.RoomId)
}

// required int64 RoomKey = 3;
inline bool VoipDoubleLinkSwitchReq::has_roomkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VoipDoubleLinkSwitchReq::set_has_roomkey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VoipDoubleLinkSwitchReq::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VoipDoubleLinkSwitchReq::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
inline ::google::protobuf::int64 VoipDoubleLinkSwitchReq::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipDoubleLinkSwitchReq.RoomKey)
  return roomkey_;
}
inline void VoipDoubleLinkSwitchReq::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipDoubleLinkSwitchReq.RoomKey)
}

// required int32 RoomMemberId = 4;
inline bool VoipDoubleLinkSwitchReq::has_roommemberid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VoipDoubleLinkSwitchReq::set_has_roommemberid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VoipDoubleLinkSwitchReq::clear_has_roommemberid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VoipDoubleLinkSwitchReq::clear_roommemberid() {
  roommemberid_ = 0;
  clear_has_roommemberid();
}
inline ::google::protobuf::int32 VoipDoubleLinkSwitchReq::roommemberid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipDoubleLinkSwitchReq.RoomMemberId)
  return roommemberid_;
}
inline void VoipDoubleLinkSwitchReq::set_roommemberid(::google::protobuf::int32 value) {
  set_has_roommemberid();
  roommemberid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipDoubleLinkSwitchReq.RoomMemberId)
}

// required int32 CurLinkType = 5;
inline bool VoipDoubleLinkSwitchReq::has_curlinktype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VoipDoubleLinkSwitchReq::set_has_curlinktype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VoipDoubleLinkSwitchReq::clear_has_curlinktype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VoipDoubleLinkSwitchReq::clear_curlinktype() {
  curlinktype_ = 0;
  clear_has_curlinktype();
}
inline ::google::protobuf::int32 VoipDoubleLinkSwitchReq::curlinktype() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipDoubleLinkSwitchReq.CurLinkType)
  return curlinktype_;
}
inline void VoipDoubleLinkSwitchReq::set_curlinktype(::google::protobuf::int32 value) {
  set_has_curlinktype();
  curlinktype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipDoubleLinkSwitchReq.CurLinkType)
}

// required int32 IsRelayConnReady = 6;
inline bool VoipDoubleLinkSwitchReq::has_isrelayconnready() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VoipDoubleLinkSwitchReq::set_has_isrelayconnready() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VoipDoubleLinkSwitchReq::clear_has_isrelayconnready() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VoipDoubleLinkSwitchReq::clear_isrelayconnready() {
  isrelayconnready_ = 0;
  clear_has_isrelayconnready();
}
inline ::google::protobuf::int32 VoipDoubleLinkSwitchReq::isrelayconnready() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipDoubleLinkSwitchReq.IsRelayConnReady)
  return isrelayconnready_;
}
inline void VoipDoubleLinkSwitchReq::set_isrelayconnready(::google::protobuf::int32 value) {
  set_has_isrelayconnready();
  isrelayconnready_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipDoubleLinkSwitchReq.IsRelayConnReady)
}

// required int32 IsDirectConnReady = 7;
inline bool VoipDoubleLinkSwitchReq::has_isdirectconnready() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VoipDoubleLinkSwitchReq::set_has_isdirectconnready() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VoipDoubleLinkSwitchReq::clear_has_isdirectconnready() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VoipDoubleLinkSwitchReq::clear_isdirectconnready() {
  isdirectconnready_ = 0;
  clear_has_isdirectconnready();
}
inline ::google::protobuf::int32 VoipDoubleLinkSwitchReq::isdirectconnready() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipDoubleLinkSwitchReq.IsDirectConnReady)
  return isdirectconnready_;
}
inline void VoipDoubleLinkSwitchReq::set_isdirectconnready(::google::protobuf::int32 value) {
  set_has_isdirectconnready();
  isdirectconnready_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipDoubleLinkSwitchReq.IsDirectConnReady)
}

// required int32 CurStrategy = 8;
inline bool VoipDoubleLinkSwitchReq::has_curstrategy() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VoipDoubleLinkSwitchReq::set_has_curstrategy() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VoipDoubleLinkSwitchReq::clear_has_curstrategy() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VoipDoubleLinkSwitchReq::clear_curstrategy() {
  curstrategy_ = 0;
  clear_has_curstrategy();
}
inline ::google::protobuf::int32 VoipDoubleLinkSwitchReq::curstrategy() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipDoubleLinkSwitchReq.CurStrategy)
  return curstrategy_;
}
inline void VoipDoubleLinkSwitchReq::set_curstrategy(::google::protobuf::int32 value) {
  set_has_curstrategy();
  curstrategy_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipDoubleLinkSwitchReq.CurStrategy)
}

// required int32 BufferVersion = 9;
inline bool VoipDoubleLinkSwitchReq::has_bufferversion() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VoipDoubleLinkSwitchReq::set_has_bufferversion() {
  _has_bits_[0] |= 0x00000200u;
}
inline void VoipDoubleLinkSwitchReq::clear_has_bufferversion() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void VoipDoubleLinkSwitchReq::clear_bufferversion() {
  bufferversion_ = 0;
  clear_has_bufferversion();
}
inline ::google::protobuf::int32 VoipDoubleLinkSwitchReq::bufferversion() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipDoubleLinkSwitchReq.BufferVersion)
  return bufferversion_;
}
inline void VoipDoubleLinkSwitchReq::set_bufferversion(::google::protobuf::int32 value) {
  set_has_bufferversion();
  bufferversion_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipDoubleLinkSwitchReq.BufferVersion)
}

// required .micromsg.SKBuiltinBuffer_t Buffer = 10;
inline bool VoipDoubleLinkSwitchReq::has_buffer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VoipDoubleLinkSwitchReq::set_has_buffer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VoipDoubleLinkSwitchReq::clear_has_buffer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VoipDoubleLinkSwitchReq::clear_buffer() {
  if (buffer_ != NULL) buffer_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_buffer();
}
inline const ::micromsg::SKBuiltinBuffer_t& VoipDoubleLinkSwitchReq::buffer() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipDoubleLinkSwitchReq.Buffer)
  return buffer_ != NULL ? *buffer_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinBuffer_t* VoipDoubleLinkSwitchReq::mutable_buffer() {
  set_has_buffer();
  if (buffer_ == NULL) {
    buffer_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipDoubleLinkSwitchReq.Buffer)
  return buffer_;
}
inline ::micromsg::SKBuiltinBuffer_t* VoipDoubleLinkSwitchReq::release_buffer() {
  // @@protoc_insertion_point(field_release:micromsg.VoipDoubleLinkSwitchReq.Buffer)
  clear_has_buffer();
  ::micromsg::SKBuiltinBuffer_t* temp = buffer_;
  buffer_ = NULL;
  return temp;
}
inline void VoipDoubleLinkSwitchReq::set_allocated_buffer(::micromsg::SKBuiltinBuffer_t* buffer) {
  delete buffer_;
  buffer_ = buffer;
  if (buffer) {
    set_has_buffer();
  } else {
    clear_has_buffer();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipDoubleLinkSwitchReq.Buffer)
}

// -------------------------------------------------------------------

// VoipDoubleLinkSwitchRsp

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool VoipDoubleLinkSwitchRsp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoipDoubleLinkSwitchRsp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoipDoubleLinkSwitchRsp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoipDoubleLinkSwitchRsp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& VoipDoubleLinkSwitchRsp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipDoubleLinkSwitchRsp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* VoipDoubleLinkSwitchRsp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipDoubleLinkSwitchRsp.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* VoipDoubleLinkSwitchRsp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.VoipDoubleLinkSwitchRsp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void VoipDoubleLinkSwitchRsp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipDoubleLinkSwitchRsp.BaseResponse)
}

// required int32 RoomId = 2;
inline bool VoipDoubleLinkSwitchRsp::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VoipDoubleLinkSwitchRsp::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VoipDoubleLinkSwitchRsp::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VoipDoubleLinkSwitchRsp::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 VoipDoubleLinkSwitchRsp::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipDoubleLinkSwitchRsp.RoomId)
  return roomid_;
}
inline void VoipDoubleLinkSwitchRsp::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipDoubleLinkSwitchRsp.RoomId)
}

// required int64 RoomKey = 3;
inline bool VoipDoubleLinkSwitchRsp::has_roomkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VoipDoubleLinkSwitchRsp::set_has_roomkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VoipDoubleLinkSwitchRsp::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VoipDoubleLinkSwitchRsp::clear_roomkey() {
  roomkey_ = GOOGLE_LONGLONG(0);
  clear_has_roomkey();
}
inline ::google::protobuf::int64 VoipDoubleLinkSwitchRsp::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipDoubleLinkSwitchRsp.RoomKey)
  return roomkey_;
}
inline void VoipDoubleLinkSwitchRsp::set_roomkey(::google::protobuf::int64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipDoubleLinkSwitchRsp.RoomKey)
}

// required int32 RoomMemberId = 4;
inline bool VoipDoubleLinkSwitchRsp::has_roommemberid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VoipDoubleLinkSwitchRsp::set_has_roommemberid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VoipDoubleLinkSwitchRsp::clear_has_roommemberid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VoipDoubleLinkSwitchRsp::clear_roommemberid() {
  roommemberid_ = 0;
  clear_has_roommemberid();
}
inline ::google::protobuf::int32 VoipDoubleLinkSwitchRsp::roommemberid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipDoubleLinkSwitchRsp.RoomMemberId)
  return roommemberid_;
}
inline void VoipDoubleLinkSwitchRsp::set_roommemberid(::google::protobuf::int32 value) {
  set_has_roommemberid();
  roommemberid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipDoubleLinkSwitchRsp.RoomMemberId)
}

// required int32 ReportFlag = 5;
inline bool VoipDoubleLinkSwitchRsp::has_reportflag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VoipDoubleLinkSwitchRsp::set_has_reportflag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VoipDoubleLinkSwitchRsp::clear_has_reportflag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VoipDoubleLinkSwitchRsp::clear_reportflag() {
  reportflag_ = 0;
  clear_has_reportflag();
}
inline ::google::protobuf::int32 VoipDoubleLinkSwitchRsp::reportflag() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipDoubleLinkSwitchRsp.ReportFlag)
  return reportflag_;
}
inline void VoipDoubleLinkSwitchRsp::set_reportflag(::google::protobuf::int32 value) {
  set_has_reportflag();
  reportflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipDoubleLinkSwitchRsp.ReportFlag)
}

// required int32 SwitchToLinkType = 6;
inline bool VoipDoubleLinkSwitchRsp::has_switchtolinktype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VoipDoubleLinkSwitchRsp::set_has_switchtolinktype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VoipDoubleLinkSwitchRsp::clear_has_switchtolinktype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VoipDoubleLinkSwitchRsp::clear_switchtolinktype() {
  switchtolinktype_ = 0;
  clear_has_switchtolinktype();
}
inline ::google::protobuf::int32 VoipDoubleLinkSwitchRsp::switchtolinktype() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipDoubleLinkSwitchRsp.SwitchToLinkType)
  return switchtolinktype_;
}
inline void VoipDoubleLinkSwitchRsp::set_switchtolinktype(::google::protobuf::int32 value) {
  set_has_switchtolinktype();
  switchtolinktype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipDoubleLinkSwitchRsp.SwitchToLinkType)
}

// -------------------------------------------------------------------

// VoipSpeedTestReq

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool VoipSpeedTestReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoipSpeedTestReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoipSpeedTestReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoipSpeedTestReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& VoipSpeedTestReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedTestReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* VoipSpeedTestReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipSpeedTestReq.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* VoipSpeedTestReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.VoipSpeedTestReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void VoipSpeedTestReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipSpeedTestReq.BaseRequest)
}

// required int32 RoomId = 2;
inline bool VoipSpeedTestReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VoipSpeedTestReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VoipSpeedTestReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VoipSpeedTestReq::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 VoipSpeedTestReq::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedTestReq.RoomId)
  return roomid_;
}
inline void VoipSpeedTestReq::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSpeedTestReq.RoomId)
}

// required uint32 CallType = 3;
inline bool VoipSpeedTestReq::has_calltype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VoipSpeedTestReq::set_has_calltype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VoipSpeedTestReq::clear_has_calltype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VoipSpeedTestReq::clear_calltype() {
  calltype_ = 0u;
  clear_has_calltype();
}
inline ::google::protobuf::uint32 VoipSpeedTestReq::calltype() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedTestReq.CallType)
  return calltype_;
}
inline void VoipSpeedTestReq::set_calltype(::google::protobuf::uint32 value) {
  set_has_calltype();
  calltype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSpeedTestReq.CallType)
}

// required uint32 NetType = 4;
inline bool VoipSpeedTestReq::has_nettype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VoipSpeedTestReq::set_has_nettype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VoipSpeedTestReq::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VoipSpeedTestReq::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 VoipSpeedTestReq::nettype() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedTestReq.NetType)
  return nettype_;
}
inline void VoipSpeedTestReq::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSpeedTestReq.NetType)
}

// required uint32 IsConnecting = 5;
inline bool VoipSpeedTestReq::has_isconnecting() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VoipSpeedTestReq::set_has_isconnecting() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VoipSpeedTestReq::clear_has_isconnecting() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VoipSpeedTestReq::clear_isconnecting() {
  isconnecting_ = 0u;
  clear_has_isconnecting();
}
inline ::google::protobuf::uint32 VoipSpeedTestReq::isconnecting() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedTestReq.IsConnecting)
  return isconnecting_;
}
inline void VoipSpeedTestReq::set_isconnecting(::google::protobuf::uint32 value) {
  set_has_isconnecting();
  isconnecting_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSpeedTestReq.IsConnecting)
}

// required uint32 IsConnected = 6;
inline bool VoipSpeedTestReq::has_isconnected() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VoipSpeedTestReq::set_has_isconnected() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VoipSpeedTestReq::clear_has_isconnected() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VoipSpeedTestReq::clear_isconnected() {
  isconnected_ = 0u;
  clear_has_isconnected();
}
inline ::google::protobuf::uint32 VoipSpeedTestReq::isconnected() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedTestReq.IsConnected)
  return isconnected_;
}
inline void VoipSpeedTestReq::set_isconnected(::google::protobuf::uint32 value) {
  set_has_isconnected();
  isconnected_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSpeedTestReq.IsConnected)
}

// required uint32 C2CLossrate = 7;
inline bool VoipSpeedTestReq::has_c2clossrate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VoipSpeedTestReq::set_has_c2clossrate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VoipSpeedTestReq::clear_has_c2clossrate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VoipSpeedTestReq::clear_c2clossrate() {
  c2clossrate_ = 0u;
  clear_has_c2clossrate();
}
inline ::google::protobuf::uint32 VoipSpeedTestReq::c2clossrate() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedTestReq.C2CLossrate)
  return c2clossrate_;
}
inline void VoipSpeedTestReq::set_c2clossrate(::google::protobuf::uint32 value) {
  set_has_c2clossrate();
  c2clossrate_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSpeedTestReq.C2CLossrate)
}

// required uint32 C2CRttCnt = 8;
inline bool VoipSpeedTestReq::has_c2crttcnt() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VoipSpeedTestReq::set_has_c2crttcnt() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VoipSpeedTestReq::clear_has_c2crttcnt() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VoipSpeedTestReq::clear_c2crttcnt() {
  c2crttcnt_ = 0u;
  clear_has_c2crttcnt();
}
inline ::google::protobuf::uint32 VoipSpeedTestReq::c2crttcnt() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedTestReq.C2CRttCnt)
  return c2crttcnt_;
}
inline void VoipSpeedTestReq::set_c2crttcnt(::google::protobuf::uint32 value) {
  set_has_c2crttcnt();
  c2crttcnt_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSpeedTestReq.C2CRttCnt)
}

// repeated uint32 C2CRtt = 9 [packed = true];
inline int VoipSpeedTestReq::c2crtt_size() const {
  return c2crtt_.size();
}
inline void VoipSpeedTestReq::clear_c2crtt() {
  c2crtt_.Clear();
}
inline ::google::protobuf::uint32 VoipSpeedTestReq::c2crtt(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedTestReq.C2CRtt)
  return c2crtt_.Get(index);
}
inline void VoipSpeedTestReq::set_c2crtt(int index, ::google::protobuf::uint32 value) {
  c2crtt_.Set(index, value);
  // @@protoc_insertion_point(field_set:micromsg.VoipSpeedTestReq.C2CRtt)
}
inline void VoipSpeedTestReq::add_c2crtt(::google::protobuf::uint32 value) {
  c2crtt_.Add(value);
  // @@protoc_insertion_point(field_add:micromsg.VoipSpeedTestReq.C2CRtt)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
VoipSpeedTestReq::c2crtt() const {
  // @@protoc_insertion_point(field_list:micromsg.VoipSpeedTestReq.C2CRtt)
  return c2crtt_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
VoipSpeedTestReq::mutable_c2crtt() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.VoipSpeedTestReq.C2CRtt)
  return &c2crtt_;
}

// required uint32 C2SDownLossRate = 10;
inline bool VoipSpeedTestReq::has_c2sdownlossrate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VoipSpeedTestReq::set_has_c2sdownlossrate() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VoipSpeedTestReq::clear_has_c2sdownlossrate() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VoipSpeedTestReq::clear_c2sdownlossrate() {
  c2sdownlossrate_ = 0u;
  clear_has_c2sdownlossrate();
}
inline ::google::protobuf::uint32 VoipSpeedTestReq::c2sdownlossrate() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedTestReq.C2SDownLossRate)
  return c2sdownlossrate_;
}
inline void VoipSpeedTestReq::set_c2sdownlossrate(::google::protobuf::uint32 value) {
  set_has_c2sdownlossrate();
  c2sdownlossrate_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSpeedTestReq.C2SDownLossRate)
}

// required uint32 C2SRttCnt = 11;
inline bool VoipSpeedTestReq::has_c2srttcnt() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VoipSpeedTestReq::set_has_c2srttcnt() {
  _has_bits_[0] |= 0x00000200u;
}
inline void VoipSpeedTestReq::clear_has_c2srttcnt() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void VoipSpeedTestReq::clear_c2srttcnt() {
  c2srttcnt_ = 0u;
  clear_has_c2srttcnt();
}
inline ::google::protobuf::uint32 VoipSpeedTestReq::c2srttcnt() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedTestReq.C2SRttCnt)
  return c2srttcnt_;
}
inline void VoipSpeedTestReq::set_c2srttcnt(::google::protobuf::uint32 value) {
  set_has_c2srttcnt();
  c2srttcnt_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSpeedTestReq.C2SRttCnt)
}

// repeated uint32 C2SRtt = 12 [packed = true];
inline int VoipSpeedTestReq::c2srtt_size() const {
  return c2srtt_.size();
}
inline void VoipSpeedTestReq::clear_c2srtt() {
  c2srtt_.Clear();
}
inline ::google::protobuf::uint32 VoipSpeedTestReq::c2srtt(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedTestReq.C2SRtt)
  return c2srtt_.Get(index);
}
inline void VoipSpeedTestReq::set_c2srtt(int index, ::google::protobuf::uint32 value) {
  c2srtt_.Set(index, value);
  // @@protoc_insertion_point(field_set:micromsg.VoipSpeedTestReq.C2SRtt)
}
inline void VoipSpeedTestReq::add_c2srtt(::google::protobuf::uint32 value) {
  c2srtt_.Add(value);
  // @@protoc_insertion_point(field_add:micromsg.VoipSpeedTestReq.C2SRtt)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
VoipSpeedTestReq::c2srtt() const {
  // @@protoc_insertion_point(field_list:micromsg.VoipSpeedTestReq.C2SRtt)
  return c2srtt_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
VoipSpeedTestReq::mutable_c2srtt() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.VoipSpeedTestReq.C2SRtt)
  return &c2srtt_;
}

// required uint32 SendPkts = 13;
inline bool VoipSpeedTestReq::has_sendpkts() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void VoipSpeedTestReq::set_has_sendpkts() {
  _has_bits_[0] |= 0x00000400u;
}
inline void VoipSpeedTestReq::clear_has_sendpkts() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void VoipSpeedTestReq::clear_sendpkts() {
  sendpkts_ = 0u;
  clear_has_sendpkts();
}
inline ::google::protobuf::uint32 VoipSpeedTestReq::sendpkts() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedTestReq.SendPkts)
  return sendpkts_;
}
inline void VoipSpeedTestReq::set_sendpkts(::google::protobuf::uint32 value) {
  set_has_sendpkts();
  sendpkts_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSpeedTestReq.SendPkts)
}

// required uint32 RcvPkts = 14;
inline bool VoipSpeedTestReq::has_rcvpkts() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void VoipSpeedTestReq::set_has_rcvpkts() {
  _has_bits_[0] |= 0x00000800u;
}
inline void VoipSpeedTestReq::clear_has_rcvpkts() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void VoipSpeedTestReq::clear_rcvpkts() {
  rcvpkts_ = 0u;
  clear_has_rcvpkts();
}
inline ::google::protobuf::uint32 VoipSpeedTestReq::rcvpkts() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedTestReq.RcvPkts)
  return rcvpkts_;
}
inline void VoipSpeedTestReq::set_rcvpkts(::google::protobuf::uint32 value) {
  set_has_rcvpkts();
  rcvpkts_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSpeedTestReq.RcvPkts)
}

// -------------------------------------------------------------------

// SpeedTestSvr

// required .micromsg.VoipAddr Addr = 1;
inline bool SpeedTestSvr::has_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpeedTestSvr::set_has_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpeedTestSvr::clear_has_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpeedTestSvr::clear_addr() {
  if (addr_ != NULL) addr_->::micromsg::VoipAddr::Clear();
  clear_has_addr();
}
inline const ::micromsg::VoipAddr& SpeedTestSvr::addr() const {
  // @@protoc_insertion_point(field_get:micromsg.SpeedTestSvr.Addr)
  return addr_ != NULL ? *addr_
                         : *::micromsg::VoipAddr::internal_default_instance();
}
inline ::micromsg::VoipAddr* SpeedTestSvr::mutable_addr() {
  set_has_addr();
  if (addr_ == NULL) {
    addr_ = new ::micromsg::VoipAddr;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SpeedTestSvr.Addr)
  return addr_;
}
inline ::micromsg::VoipAddr* SpeedTestSvr::release_addr() {
  // @@protoc_insertion_point(field_release:micromsg.SpeedTestSvr.Addr)
  clear_has_addr();
  ::micromsg::VoipAddr* temp = addr_;
  addr_ = NULL;
  return temp;
}
inline void SpeedTestSvr::set_allocated_addr(::micromsg::VoipAddr* addr) {
  delete addr_;
  addr_ = addr;
  if (addr) {
    set_has_addr();
  } else {
    clear_has_addr();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SpeedTestSvr.Addr)
}

// required uint32 TestCnt = 2;
inline bool SpeedTestSvr::has_testcnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpeedTestSvr::set_has_testcnt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpeedTestSvr::clear_has_testcnt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpeedTestSvr::clear_testcnt() {
  testcnt_ = 0u;
  clear_has_testcnt();
}
inline ::google::protobuf::uint32 SpeedTestSvr::testcnt() const {
  // @@protoc_insertion_point(field_get:micromsg.SpeedTestSvr.TestCnt)
  return testcnt_;
}
inline void SpeedTestSvr::set_testcnt(::google::protobuf::uint32 value) {
  set_has_testcnt();
  testcnt_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SpeedTestSvr.TestCnt)
}

// required uint32 TestGap = 3;
inline bool SpeedTestSvr::has_testgap() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SpeedTestSvr::set_has_testgap() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SpeedTestSvr::clear_has_testgap() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SpeedTestSvr::clear_testgap() {
  testgap_ = 0u;
  clear_has_testgap();
}
inline ::google::protobuf::uint32 SpeedTestSvr::testgap() const {
  // @@protoc_insertion_point(field_get:micromsg.SpeedTestSvr.TestGap)
  return testgap_;
}
inline void SpeedTestSvr::set_testgap(::google::protobuf::uint32 value) {
  set_has_testgap();
  testgap_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SpeedTestSvr.TestGap)
}

// required uint32 Timeout = 4;
inline bool SpeedTestSvr::has_timeout() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SpeedTestSvr::set_has_timeout() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SpeedTestSvr::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SpeedTestSvr::clear_timeout() {
  timeout_ = 0u;
  clear_has_timeout();
}
inline ::google::protobuf::uint32 SpeedTestSvr::timeout() const {
  // @@protoc_insertion_point(field_get:micromsg.SpeedTestSvr.Timeout)
  return timeout_;
}
inline void SpeedTestSvr::set_timeout(::google::protobuf::uint32 value) {
  set_has_timeout();
  timeout_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SpeedTestSvr.Timeout)
}

// required uint32 PktSize = 5;
inline bool SpeedTestSvr::has_pktsize() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SpeedTestSvr::set_has_pktsize() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SpeedTestSvr::clear_has_pktsize() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SpeedTestSvr::clear_pktsize() {
  pktsize_ = 0u;
  clear_has_pktsize();
}
inline ::google::protobuf::uint32 SpeedTestSvr::pktsize() const {
  // @@protoc_insertion_point(field_get:micromsg.SpeedTestSvr.PktSize)
  return pktsize_;
}
inline void SpeedTestSvr::set_pktsize(::google::protobuf::uint32 value) {
  set_has_pktsize();
  pktsize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SpeedTestSvr.PktSize)
}

// -------------------------------------------------------------------

// VoipSpeedTestRsp

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool VoipSpeedTestRsp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoipSpeedTestRsp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoipSpeedTestRsp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoipSpeedTestRsp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& VoipSpeedTestRsp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedTestRsp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* VoipSpeedTestRsp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipSpeedTestRsp.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* VoipSpeedTestRsp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.VoipSpeedTestRsp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void VoipSpeedTestRsp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipSpeedTestRsp.BaseResponse)
}

// required uint32 NeedTest = 2;
inline bool VoipSpeedTestRsp::has_needtest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VoipSpeedTestRsp::set_has_needtest() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VoipSpeedTestRsp::clear_has_needtest() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VoipSpeedTestRsp::clear_needtest() {
  needtest_ = 0u;
  clear_has_needtest();
}
inline ::google::protobuf::uint32 VoipSpeedTestRsp::needtest() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedTestRsp.NeedTest)
  return needtest_;
}
inline void VoipSpeedTestRsp::set_needtest(::google::protobuf::uint32 value) {
  set_has_needtest();
  needtest_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSpeedTestRsp.NeedTest)
}

// required uint64 TestId = 3;
inline bool VoipSpeedTestRsp::has_testid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VoipSpeedTestRsp::set_has_testid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VoipSpeedTestRsp::clear_has_testid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VoipSpeedTestRsp::clear_testid() {
  testid_ = GOOGLE_ULONGLONG(0);
  clear_has_testid();
}
inline ::google::protobuf::uint64 VoipSpeedTestRsp::testid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedTestRsp.TestId)
  return testid_;
}
inline void VoipSpeedTestRsp::set_testid(::google::protobuf::uint64 value) {
  set_has_testid();
  testid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSpeedTestRsp.TestId)
}

// required uint32 SvrListCnt = 4;
inline bool VoipSpeedTestRsp::has_svrlistcnt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VoipSpeedTestRsp::set_has_svrlistcnt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VoipSpeedTestRsp::clear_has_svrlistcnt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VoipSpeedTestRsp::clear_svrlistcnt() {
  svrlistcnt_ = 0u;
  clear_has_svrlistcnt();
}
inline ::google::protobuf::uint32 VoipSpeedTestRsp::svrlistcnt() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedTestRsp.SvrListCnt)
  return svrlistcnt_;
}
inline void VoipSpeedTestRsp::set_svrlistcnt(::google::protobuf::uint32 value) {
  set_has_svrlistcnt();
  svrlistcnt_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSpeedTestRsp.SvrListCnt)
}

// repeated .micromsg.SpeedTestSvr SvrList = 5;
inline int VoipSpeedTestRsp::svrlist_size() const {
  return svrlist_.size();
}
inline void VoipSpeedTestRsp::clear_svrlist() {
  svrlist_.Clear();
}
inline const ::micromsg::SpeedTestSvr& VoipSpeedTestRsp::svrlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedTestRsp.SvrList)
  return svrlist_.Get(index);
}
inline ::micromsg::SpeedTestSvr* VoipSpeedTestRsp::mutable_svrlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.VoipSpeedTestRsp.SvrList)
  return svrlist_.Mutable(index);
}
inline ::micromsg::SpeedTestSvr* VoipSpeedTestRsp::add_svrlist() {
  // @@protoc_insertion_point(field_add:micromsg.VoipSpeedTestRsp.SvrList)
  return svrlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::SpeedTestSvr >*
VoipSpeedTestRsp::mutable_svrlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.VoipSpeedTestRsp.SvrList)
  return &svrlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::SpeedTestSvr >&
VoipSpeedTestRsp::svrlist() const {
  // @@protoc_insertion_point(field_list:micromsg.VoipSpeedTestRsp.SvrList)
  return svrlist_;
}

// -------------------------------------------------------------------

// SpeedResult

// required uint32 ClientIp = 1;
inline bool SpeedResult::has_clientip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpeedResult::set_has_clientip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpeedResult::clear_has_clientip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpeedResult::clear_clientip() {
  clientip_ = 0u;
  clear_has_clientip();
}
inline ::google::protobuf::uint32 SpeedResult::clientip() const {
  // @@protoc_insertion_point(field_get:micromsg.SpeedResult.ClientIp)
  return clientip_;
}
inline void SpeedResult::set_clientip(::google::protobuf::uint32 value) {
  set_has_clientip();
  clientip_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SpeedResult.ClientIp)
}

// required uint32 TestPktSize = 2;
inline bool SpeedResult::has_testpktsize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SpeedResult::set_has_testpktsize() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SpeedResult::clear_has_testpktsize() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SpeedResult::clear_testpktsize() {
  testpktsize_ = 0u;
  clear_has_testpktsize();
}
inline ::google::protobuf::uint32 SpeedResult::testpktsize() const {
  // @@protoc_insertion_point(field_get:micromsg.SpeedResult.TestPktSize)
  return testpktsize_;
}
inline void SpeedResult::set_testpktsize(::google::protobuf::uint32 value) {
  set_has_testpktsize();
  testpktsize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SpeedResult.TestPktSize)
}

// required uint32 TestCnt = 3;
inline bool SpeedResult::has_testcnt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SpeedResult::set_has_testcnt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SpeedResult::clear_has_testcnt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SpeedResult::clear_testcnt() {
  testcnt_ = 0u;
  clear_has_testcnt();
}
inline ::google::protobuf::uint32 SpeedResult::testcnt() const {
  // @@protoc_insertion_point(field_get:micromsg.SpeedResult.TestCnt)
  return testcnt_;
}
inline void SpeedResult::set_testcnt(::google::protobuf::uint32 value) {
  set_has_testcnt();
  testcnt_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SpeedResult.TestCnt)
}

// required .micromsg.VoipAddr Addr = 4;
inline bool SpeedResult::has_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpeedResult::set_has_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpeedResult::clear_has_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpeedResult::clear_addr() {
  if (addr_ != NULL) addr_->::micromsg::VoipAddr::Clear();
  clear_has_addr();
}
inline const ::micromsg::VoipAddr& SpeedResult::addr() const {
  // @@protoc_insertion_point(field_get:micromsg.SpeedResult.Addr)
  return addr_ != NULL ? *addr_
                         : *::micromsg::VoipAddr::internal_default_instance();
}
inline ::micromsg::VoipAddr* SpeedResult::mutable_addr() {
  set_has_addr();
  if (addr_ == NULL) {
    addr_ = new ::micromsg::VoipAddr;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.SpeedResult.Addr)
  return addr_;
}
inline ::micromsg::VoipAddr* SpeedResult::release_addr() {
  // @@protoc_insertion_point(field_release:micromsg.SpeedResult.Addr)
  clear_has_addr();
  ::micromsg::VoipAddr* temp = addr_;
  addr_ = NULL;
  return temp;
}
inline void SpeedResult::set_allocated_addr(::micromsg::VoipAddr* addr) {
  delete addr_;
  addr_ = addr;
  if (addr) {
    set_has_addr();
  } else {
    clear_has_addr();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.SpeedResult.Addr)
}

// required uint32 AvgRtt = 5;
inline bool SpeedResult::has_avgrtt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SpeedResult::set_has_avgrtt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SpeedResult::clear_has_avgrtt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SpeedResult::clear_avgrtt() {
  avgrtt_ = 0u;
  clear_has_avgrtt();
}
inline ::google::protobuf::uint32 SpeedResult::avgrtt() const {
  // @@protoc_insertion_point(field_get:micromsg.SpeedResult.AvgRtt)
  return avgrtt_;
}
inline void SpeedResult::set_avgrtt(::google::protobuf::uint32 value) {
  set_has_avgrtt();
  avgrtt_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SpeedResult.AvgRtt)
}

// required uint32 MinRtt = 6;
inline bool SpeedResult::has_minrtt() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SpeedResult::set_has_minrtt() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SpeedResult::clear_has_minrtt() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SpeedResult::clear_minrtt() {
  minrtt_ = 0u;
  clear_has_minrtt();
}
inline ::google::protobuf::uint32 SpeedResult::minrtt() const {
  // @@protoc_insertion_point(field_get:micromsg.SpeedResult.MinRtt)
  return minrtt_;
}
inline void SpeedResult::set_minrtt(::google::protobuf::uint32 value) {
  set_has_minrtt();
  minrtt_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SpeedResult.MinRtt)
}

// required uint32 MaxRtt = 7;
inline bool SpeedResult::has_maxrtt() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SpeedResult::set_has_maxrtt() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SpeedResult::clear_has_maxrtt() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SpeedResult::clear_maxrtt() {
  maxrtt_ = 0u;
  clear_has_maxrtt();
}
inline ::google::protobuf::uint32 SpeedResult::maxrtt() const {
  // @@protoc_insertion_point(field_get:micromsg.SpeedResult.MaxRtt)
  return maxrtt_;
}
inline void SpeedResult::set_maxrtt(::google::protobuf::uint32 value) {
  set_has_maxrtt();
  maxrtt_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SpeedResult.MaxRtt)
}

// required uint32 RttCnt = 8;
inline bool SpeedResult::has_rttcnt() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SpeedResult::set_has_rttcnt() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SpeedResult::clear_has_rttcnt() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SpeedResult::clear_rttcnt() {
  rttcnt_ = 0u;
  clear_has_rttcnt();
}
inline ::google::protobuf::uint32 SpeedResult::rttcnt() const {
  // @@protoc_insertion_point(field_get:micromsg.SpeedResult.RttCnt)
  return rttcnt_;
}
inline void SpeedResult::set_rttcnt(::google::protobuf::uint32 value) {
  set_has_rttcnt();
  rttcnt_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SpeedResult.RttCnt)
}

// repeated uint32 Rtt = 9 [packed = true];
inline int SpeedResult::rtt_size() const {
  return rtt_.size();
}
inline void SpeedResult::clear_rtt() {
  rtt_.Clear();
}
inline ::google::protobuf::uint32 SpeedResult::rtt(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.SpeedResult.Rtt)
  return rtt_.Get(index);
}
inline void SpeedResult::set_rtt(int index, ::google::protobuf::uint32 value) {
  rtt_.Set(index, value);
  // @@protoc_insertion_point(field_set:micromsg.SpeedResult.Rtt)
}
inline void SpeedResult::add_rtt(::google::protobuf::uint32 value) {
  rtt_.Add(value);
  // @@protoc_insertion_point(field_add:micromsg.SpeedResult.Rtt)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SpeedResult::rtt() const {
  // @@protoc_insertion_point(field_list:micromsg.SpeedResult.Rtt)
  return rtt_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SpeedResult::mutable_rtt() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.SpeedResult.Rtt)
  return &rtt_;
}

// required uint32 DownSeqCnt = 10;
inline bool SpeedResult::has_downseqcnt() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SpeedResult::set_has_downseqcnt() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SpeedResult::clear_has_downseqcnt() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SpeedResult::clear_downseqcnt() {
  downseqcnt_ = 0u;
  clear_has_downseqcnt();
}
inline ::google::protobuf::uint32 SpeedResult::downseqcnt() const {
  // @@protoc_insertion_point(field_get:micromsg.SpeedResult.DownSeqCnt)
  return downseqcnt_;
}
inline void SpeedResult::set_downseqcnt(::google::protobuf::uint32 value) {
  set_has_downseqcnt();
  downseqcnt_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SpeedResult.DownSeqCnt)
}

// repeated uint32 DownSeq = 11 [packed = true];
inline int SpeedResult::downseq_size() const {
  return downseq_.size();
}
inline void SpeedResult::clear_downseq() {
  downseq_.Clear();
}
inline ::google::protobuf::uint32 SpeedResult::downseq(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.SpeedResult.DownSeq)
  return downseq_.Get(index);
}
inline void SpeedResult::set_downseq(int index, ::google::protobuf::uint32 value) {
  downseq_.Set(index, value);
  // @@protoc_insertion_point(field_set:micromsg.SpeedResult.DownSeq)
}
inline void SpeedResult::add_downseq(::google::protobuf::uint32 value) {
  downseq_.Add(value);
  // @@protoc_insertion_point(field_add:micromsg.SpeedResult.DownSeq)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SpeedResult::downseq() const {
  // @@protoc_insertion_point(field_list:micromsg.SpeedResult.DownSeq)
  return downseq_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SpeedResult::mutable_downseq() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.SpeedResult.DownSeq)
  return &downseq_;
}

// required uint32 UpSeqCnt = 12;
inline bool SpeedResult::has_upseqcnt() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SpeedResult::set_has_upseqcnt() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SpeedResult::clear_has_upseqcnt() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SpeedResult::clear_upseqcnt() {
  upseqcnt_ = 0u;
  clear_has_upseqcnt();
}
inline ::google::protobuf::uint32 SpeedResult::upseqcnt() const {
  // @@protoc_insertion_point(field_get:micromsg.SpeedResult.UpSeqCnt)
  return upseqcnt_;
}
inline void SpeedResult::set_upseqcnt(::google::protobuf::uint32 value) {
  set_has_upseqcnt();
  upseqcnt_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SpeedResult.UpSeqCnt)
}

// repeated uint32 UpSeq = 13 [packed = true];
inline int SpeedResult::upseq_size() const {
  return upseq_.size();
}
inline void SpeedResult::clear_upseq() {
  upseq_.Clear();
}
inline ::google::protobuf::uint32 SpeedResult::upseq(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.SpeedResult.UpSeq)
  return upseq_.Get(index);
}
inline void SpeedResult::set_upseq(int index, ::google::protobuf::uint32 value) {
  upseq_.Set(index, value);
  // @@protoc_insertion_point(field_set:micromsg.SpeedResult.UpSeq)
}
inline void SpeedResult::add_upseq(::google::protobuf::uint32 value) {
  upseq_.Add(value);
  // @@protoc_insertion_point(field_add:micromsg.SpeedResult.UpSeq)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SpeedResult::upseq() const {
  // @@protoc_insertion_point(field_list:micromsg.SpeedResult.UpSeq)
  return upseq_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SpeedResult::mutable_upseq() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.SpeedResult.UpSeq)
  return &upseq_;
}

// -------------------------------------------------------------------

// VoipSpeedResultReq

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool VoipSpeedResultReq::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoipSpeedResultReq::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoipSpeedResultReq::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoipSpeedResultReq::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& VoipSpeedResultReq::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedResultReq.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* VoipSpeedResultReq::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipSpeedResultReq.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* VoipSpeedResultReq::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.VoipSpeedResultReq.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void VoipSpeedResultReq::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipSpeedResultReq.BaseRequest)
}

// required uint64 TestId = 2;
inline bool VoipSpeedResultReq::has_testid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VoipSpeedResultReq::set_has_testid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VoipSpeedResultReq::clear_has_testid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VoipSpeedResultReq::clear_testid() {
  testid_ = GOOGLE_ULONGLONG(0);
  clear_has_testid();
}
inline ::google::protobuf::uint64 VoipSpeedResultReq::testid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedResultReq.TestId)
  return testid_;
}
inline void VoipSpeedResultReq::set_testid(::google::protobuf::uint64 value) {
  set_has_testid();
  testid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSpeedResultReq.TestId)
}

// required uint64 RoomKey = 3;
inline bool VoipSpeedResultReq::has_roomkey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VoipSpeedResultReq::set_has_roomkey() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VoipSpeedResultReq::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VoipSpeedResultReq::clear_roomkey() {
  roomkey_ = GOOGLE_ULONGLONG(0);
  clear_has_roomkey();
}
inline ::google::protobuf::uint64 VoipSpeedResultReq::roomkey() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedResultReq.RoomKey)
  return roomkey_;
}
inline void VoipSpeedResultReq::set_roomkey(::google::protobuf::uint64 value) {
  set_has_roomkey();
  roomkey_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSpeedResultReq.RoomKey)
}

// required uint32 NetType = 4;
inline bool VoipSpeedResultReq::has_nettype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VoipSpeedResultReq::set_has_nettype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VoipSpeedResultReq::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VoipSpeedResultReq::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 VoipSpeedResultReq::nettype() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedResultReq.NetType)
  return nettype_;
}
inline void VoipSpeedResultReq::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSpeedResultReq.NetType)
}

// required .micromsg.SKBuiltinString_t NetName = 5;
inline bool VoipSpeedResultReq::has_netname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VoipSpeedResultReq::set_has_netname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VoipSpeedResultReq::clear_has_netname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VoipSpeedResultReq::clear_netname() {
  if (netname_ != NULL) netname_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_netname();
}
inline const ::micromsg::SKBuiltinString_t& VoipSpeedResultReq::netname() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedResultReq.NetName)
  return netname_ != NULL ? *netname_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* VoipSpeedResultReq::mutable_netname() {
  set_has_netname();
  if (netname_ == NULL) {
    netname_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipSpeedResultReq.NetName)
  return netname_;
}
inline ::micromsg::SKBuiltinString_t* VoipSpeedResultReq::release_netname() {
  // @@protoc_insertion_point(field_release:micromsg.VoipSpeedResultReq.NetName)
  clear_has_netname();
  ::micromsg::SKBuiltinString_t* temp = netname_;
  netname_ = NULL;
  return temp;
}
inline void VoipSpeedResultReq::set_allocated_netname(::micromsg::SKBuiltinString_t* netname) {
  delete netname_;
  netname_ = netname;
  if (netname) {
    set_has_netname();
  } else {
    clear_has_netname();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipSpeedResultReq.NetName)
}

// required .micromsg.SKBuiltinString_t WifiName = 6;
inline bool VoipSpeedResultReq::has_wifiname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VoipSpeedResultReq::set_has_wifiname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VoipSpeedResultReq::clear_has_wifiname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VoipSpeedResultReq::clear_wifiname() {
  if (wifiname_ != NULL) wifiname_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_wifiname();
}
inline const ::micromsg::SKBuiltinString_t& VoipSpeedResultReq::wifiname() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedResultReq.WifiName)
  return wifiname_ != NULL ? *wifiname_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* VoipSpeedResultReq::mutable_wifiname() {
  set_has_wifiname();
  if (wifiname_ == NULL) {
    wifiname_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipSpeedResultReq.WifiName)
  return wifiname_;
}
inline ::micromsg::SKBuiltinString_t* VoipSpeedResultReq::release_wifiname() {
  // @@protoc_insertion_point(field_release:micromsg.VoipSpeedResultReq.WifiName)
  clear_has_wifiname();
  ::micromsg::SKBuiltinString_t* temp = wifiname_;
  wifiname_ = NULL;
  return temp;
}
inline void VoipSpeedResultReq::set_allocated_wifiname(::micromsg::SKBuiltinString_t* wifiname) {
  delete wifiname_;
  wifiname_ = wifiname;
  if (wifiname) {
    set_has_wifiname();
  } else {
    clear_has_wifiname();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipSpeedResultReq.WifiName)
}

// required double Longitude = 7;
inline bool VoipSpeedResultReq::has_longitude() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VoipSpeedResultReq::set_has_longitude() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VoipSpeedResultReq::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VoipSpeedResultReq::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double VoipSpeedResultReq::longitude() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedResultReq.Longitude)
  return longitude_;
}
inline void VoipSpeedResultReq::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSpeedResultReq.Longitude)
}

// required double Latitude = 8;
inline bool VoipSpeedResultReq::has_latitude() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VoipSpeedResultReq::set_has_latitude() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VoipSpeedResultReq::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VoipSpeedResultReq::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double VoipSpeedResultReq::latitude() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedResultReq.Latitude)
  return latitude_;
}
inline void VoipSpeedResultReq::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSpeedResultReq.Latitude)
}

// required uint32 RoomId = 9;
inline bool VoipSpeedResultReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VoipSpeedResultReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VoipSpeedResultReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VoipSpeedResultReq::clear_roomid() {
  roomid_ = 0u;
  clear_has_roomid();
}
inline ::google::protobuf::uint32 VoipSpeedResultReq::roomid() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedResultReq.RoomId)
  return roomid_;
}
inline void VoipSpeedResultReq::set_roomid(::google::protobuf::uint32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSpeedResultReq.RoomId)
}

// required uint32 ResultCnt = 10;
inline bool VoipSpeedResultReq::has_resultcnt() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VoipSpeedResultReq::set_has_resultcnt() {
  _has_bits_[0] |= 0x00000200u;
}
inline void VoipSpeedResultReq::clear_has_resultcnt() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void VoipSpeedResultReq::clear_resultcnt() {
  resultcnt_ = 0u;
  clear_has_resultcnt();
}
inline ::google::protobuf::uint32 VoipSpeedResultReq::resultcnt() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedResultReq.ResultCnt)
  return resultcnt_;
}
inline void VoipSpeedResultReq::set_resultcnt(::google::protobuf::uint32 value) {
  set_has_resultcnt();
  resultcnt_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VoipSpeedResultReq.ResultCnt)
}

// repeated .micromsg.SpeedResult Result = 11;
inline int VoipSpeedResultReq::result_size() const {
  return result_.size();
}
inline void VoipSpeedResultReq::clear_result() {
  result_.Clear();
}
inline const ::micromsg::SpeedResult& VoipSpeedResultReq::result(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedResultReq.Result)
  return result_.Get(index);
}
inline ::micromsg::SpeedResult* VoipSpeedResultReq::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.VoipSpeedResultReq.Result)
  return result_.Mutable(index);
}
inline ::micromsg::SpeedResult* VoipSpeedResultReq::add_result() {
  // @@protoc_insertion_point(field_add:micromsg.VoipSpeedResultReq.Result)
  return result_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::SpeedResult >*
VoipSpeedResultReq::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.VoipSpeedResultReq.Result)
  return &result_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::SpeedResult >&
VoipSpeedResultReq::result() const {
  // @@protoc_insertion_point(field_list:micromsg.VoipSpeedResultReq.Result)
  return result_;
}

// -------------------------------------------------------------------

// VoipSpeedResultRsp

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool VoipSpeedResultRsp::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoipSpeedResultRsp::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoipSpeedResultRsp::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoipSpeedResultRsp::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& VoipSpeedResultRsp::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.VoipSpeedResultRsp.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* VoipSpeedResultRsp::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.VoipSpeedResultRsp.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* VoipSpeedResultRsp::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.VoipSpeedResultRsp.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void VoipSpeedResultRsp::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.VoipSpeedResultRsp.BaseResponse)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace micromsg

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mmvoip_2eproto__INCLUDED
