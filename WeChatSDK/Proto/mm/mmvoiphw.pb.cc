// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmvoiphw.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mmvoiphw.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace micromsg {
class HWParamBufferDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HWParamBuffer> {
} _HWParamBuffer_default_instance_;
class HWTimeInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HWTimeInfo> {
} _HWTimeInfo_default_instance_;
class HWFrameBufferDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HWFrameBuffer> {
} _HWFrameBuffer_default_instance_;
class VOIPRUDPCmdDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VOIPRUDPCmd> {
} _VOIPRUDPCmd_default_instance_;

namespace protobuf_mmvoiphw_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HWParamBuffer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HWParamBuffer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HWParamBuffer, headerlen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HWParamBuffer, spsbuf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HWParamBuffer, ppsbuf_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HWTimeInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HWTimeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HWTimeInfo, durtimevalue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HWTimeInfo, durtimescale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HWTimeInfo, presenttimevalue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HWTimeInfo, presenttimescale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HWTimeInfo, decodetimevalue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HWTimeInfo, decodetimescale_),
  0,
  2,
  1,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HWFrameBuffer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HWFrameBuffer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HWFrameBuffer, rawbuf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HWFrameBuffer, samplescount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HWFrameBuffer, timeinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HWFrameBuffer, samplesize_),
  0,
  1,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VOIPRUDPCmd, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VOIPRUDPCmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VOIPRUDPCmd, cmdtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VOIPRUDPCmd, cmdbuffer_),
  1,
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(HWParamBuffer)},
  { 11, 22, sizeof(HWTimeInfo)},
  { 28, 37, sizeof(HWFrameBuffer)},
  { 41, 48, sizeof(VOIPRUDPCmd)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_HWParamBuffer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HWTimeInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HWFrameBuffer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VOIPRUDPCmd_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "mmvoiphw.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _HWParamBuffer_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _HWTimeInfo_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _HWFrameBuffer_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _VOIPRUDPCmd_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::micromsg::protobuf_mmbuiltintype_2eproto::InitDefaults();
  ::micromsg::protobuf_mmbase_2eproto::InitDefaults();
  _HWParamBuffer_default_instance_.DefaultConstruct();
  _HWTimeInfo_default_instance_.DefaultConstruct();
  _HWFrameBuffer_default_instance_.DefaultConstruct();
  _VOIPRUDPCmd_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\016mmvoiphw.proto\022\010micromsg\032\023mmbuiltintyp"
      "e.proto\032\014mmbase.proto\"B\n\rHWParamBuffer\022\021"
      "\n\tHeaderLen\030\001 \002(\r\022\016\n\006SPSBuf\030\002 \002(\014\022\016\n\006PPS"
      "Buf\030\003 \002(\014\"\236\001\n\nHWTimeInfo\022\024\n\014DurTimeValue"
      "\030\001 \002(\003\022\024\n\014DurTimeScale\030\002 \002(\005\022\030\n\020PresentT"
      "imeValue\030\003 \002(\003\022\030\n\020PresentTimeScale\030\004 \002(\005"
      "\022\027\n\017DecodeTimeValue\030\005 \002(\003\022\027\n\017DecodeTimeS"
      "cale\030\006 \002(\005\"q\n\rHWFrameBuffer\022\016\n\006RawBuf\030\001 "
      "\002(\014\022\024\n\014SamplesCount\030\002 \002(\005\022&\n\010TimeInfo\030\003 "
      "\003(\0132\024.micromsg.HWTimeInfo\022\022\n\nSampleSize\030"
      "\004 \003(\005\"1\n\013VOIPRUDPCmd\022\017\n\007CmdType\030\001 \002(\005\022\021\n"
      "\tCmdBuffer\030\002 \001(\014"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 456);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mmvoiphw.proto", &protobuf_RegisterTypes);
  ::micromsg::protobuf_mmbuiltintype_2eproto::AddDescriptors();
  ::micromsg::protobuf_mmbase_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_mmvoiphw_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HWParamBuffer::kHeaderLenFieldNumber;
const int HWParamBuffer::kSPSBufFieldNumber;
const int HWParamBuffer::kPPSBufFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HWParamBuffer::HWParamBuffer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoiphw_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.HWParamBuffer)
}
HWParamBuffer::HWParamBuffer(const HWParamBuffer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  spsbuf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_spsbuf()) {
    spsbuf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spsbuf_);
  }
  ppsbuf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ppsbuf()) {
    ppsbuf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ppsbuf_);
  }
  headerlen_ = from.headerlen_;
  // @@protoc_insertion_point(copy_constructor:micromsg.HWParamBuffer)
}

void HWParamBuffer::SharedCtor() {
  _cached_size_ = 0;
  spsbuf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ppsbuf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headerlen_ = 0u;
}

HWParamBuffer::~HWParamBuffer() {
  // @@protoc_insertion_point(destructor:micromsg.HWParamBuffer)
  SharedDtor();
}

void HWParamBuffer::SharedDtor() {
  spsbuf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ppsbuf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HWParamBuffer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HWParamBuffer::descriptor() {
  protobuf_mmvoiphw_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiphw_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HWParamBuffer& HWParamBuffer::default_instance() {
  protobuf_mmvoiphw_2eproto::InitDefaults();
  return *internal_default_instance();
}

HWParamBuffer* HWParamBuffer::New(::google::protobuf::Arena* arena) const {
  HWParamBuffer* n = new HWParamBuffer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HWParamBuffer::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.HWParamBuffer)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_spsbuf()) {
      GOOGLE_DCHECK(!spsbuf_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*spsbuf_.UnsafeRawStringPointer())->clear();
    }
    if (has_ppsbuf()) {
      GOOGLE_DCHECK(!ppsbuf_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ppsbuf_.UnsafeRawStringPointer())->clear();
    }
  }
  headerlen_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HWParamBuffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.HWParamBuffer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 HeaderLen = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_headerlen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &headerlen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes SPSBuf = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_spsbuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes PPSBuf = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ppsbuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.HWParamBuffer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.HWParamBuffer)
  return false;
#undef DO_
}

void HWParamBuffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.HWParamBuffer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 HeaderLen = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->headerlen(), output);
  }

  // required bytes SPSBuf = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->spsbuf(), output);
  }

  // required bytes PPSBuf = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->ppsbuf(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.HWParamBuffer)
}

::google::protobuf::uint8* HWParamBuffer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.HWParamBuffer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 HeaderLen = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->headerlen(), target);
  }

  // required bytes SPSBuf = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->spsbuf(), target);
  }

  // required bytes PPSBuf = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->ppsbuf(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.HWParamBuffer)
  return target;
}

size_t HWParamBuffer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.HWParamBuffer)
  size_t total_size = 0;

  if (has_spsbuf()) {
    // required bytes SPSBuf = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->spsbuf());
  }

  if (has_ppsbuf()) {
    // required bytes PPSBuf = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ppsbuf());
  }

  if (has_headerlen()) {
    // required uint32 HeaderLen = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->headerlen());
  }

  return total_size;
}
size_t HWParamBuffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.HWParamBuffer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes SPSBuf = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->spsbuf());

    // required bytes PPSBuf = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ppsbuf());

    // required uint32 HeaderLen = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->headerlen());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HWParamBuffer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.HWParamBuffer)
  GOOGLE_DCHECK_NE(&from, this);
  const HWParamBuffer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HWParamBuffer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.HWParamBuffer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.HWParamBuffer)
    MergeFrom(*source);
  }
}

void HWParamBuffer::MergeFrom(const HWParamBuffer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.HWParamBuffer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_spsbuf();
      spsbuf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spsbuf_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_ppsbuf();
      ppsbuf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ppsbuf_);
    }
    if (cached_has_bits & 0x00000004u) {
      headerlen_ = from.headerlen_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HWParamBuffer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.HWParamBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HWParamBuffer::CopyFrom(const HWParamBuffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.HWParamBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HWParamBuffer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void HWParamBuffer::Swap(HWParamBuffer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HWParamBuffer::InternalSwap(HWParamBuffer* other) {
  spsbuf_.Swap(&other->spsbuf_);
  ppsbuf_.Swap(&other->ppsbuf_);
  std::swap(headerlen_, other->headerlen_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HWParamBuffer::GetMetadata() const {
  protobuf_mmvoiphw_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiphw_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HWParamBuffer

// required uint32 HeaderLen = 1;
bool HWParamBuffer::has_headerlen() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HWParamBuffer::set_has_headerlen() {
  _has_bits_[0] |= 0x00000004u;
}
void HWParamBuffer::clear_has_headerlen() {
  _has_bits_[0] &= ~0x00000004u;
}
void HWParamBuffer::clear_headerlen() {
  headerlen_ = 0u;
  clear_has_headerlen();
}
::google::protobuf::uint32 HWParamBuffer::headerlen() const {
  // @@protoc_insertion_point(field_get:micromsg.HWParamBuffer.HeaderLen)
  return headerlen_;
}
void HWParamBuffer::set_headerlen(::google::protobuf::uint32 value) {
  set_has_headerlen();
  headerlen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.HWParamBuffer.HeaderLen)
}

// required bytes SPSBuf = 2;
bool HWParamBuffer::has_spsbuf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HWParamBuffer::set_has_spsbuf() {
  _has_bits_[0] |= 0x00000001u;
}
void HWParamBuffer::clear_has_spsbuf() {
  _has_bits_[0] &= ~0x00000001u;
}
void HWParamBuffer::clear_spsbuf() {
  spsbuf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_spsbuf();
}
const ::std::string& HWParamBuffer::spsbuf() const {
  // @@protoc_insertion_point(field_get:micromsg.HWParamBuffer.SPSBuf)
  return spsbuf_.GetNoArena();
}
void HWParamBuffer::set_spsbuf(const ::std::string& value) {
  set_has_spsbuf();
  spsbuf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.HWParamBuffer.SPSBuf)
}
#if LANG_CXX11
void HWParamBuffer::set_spsbuf(::std::string&& value) {
  set_has_spsbuf();
  spsbuf_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.HWParamBuffer.SPSBuf)
}
#endif
void HWParamBuffer::set_spsbuf(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_spsbuf();
  spsbuf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.HWParamBuffer.SPSBuf)
}
void HWParamBuffer::set_spsbuf(const void* value, size_t size) {
  set_has_spsbuf();
  spsbuf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.HWParamBuffer.SPSBuf)
}
::std::string* HWParamBuffer::mutable_spsbuf() {
  set_has_spsbuf();
  // @@protoc_insertion_point(field_mutable:micromsg.HWParamBuffer.SPSBuf)
  return spsbuf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HWParamBuffer::release_spsbuf() {
  // @@protoc_insertion_point(field_release:micromsg.HWParamBuffer.SPSBuf)
  clear_has_spsbuf();
  return spsbuf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HWParamBuffer::set_allocated_spsbuf(::std::string* spsbuf) {
  if (spsbuf != NULL) {
    set_has_spsbuf();
  } else {
    clear_has_spsbuf();
  }
  spsbuf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), spsbuf);
  // @@protoc_insertion_point(field_set_allocated:micromsg.HWParamBuffer.SPSBuf)
}

// required bytes PPSBuf = 3;
bool HWParamBuffer::has_ppsbuf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HWParamBuffer::set_has_ppsbuf() {
  _has_bits_[0] |= 0x00000002u;
}
void HWParamBuffer::clear_has_ppsbuf() {
  _has_bits_[0] &= ~0x00000002u;
}
void HWParamBuffer::clear_ppsbuf() {
  ppsbuf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ppsbuf();
}
const ::std::string& HWParamBuffer::ppsbuf() const {
  // @@protoc_insertion_point(field_get:micromsg.HWParamBuffer.PPSBuf)
  return ppsbuf_.GetNoArena();
}
void HWParamBuffer::set_ppsbuf(const ::std::string& value) {
  set_has_ppsbuf();
  ppsbuf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.HWParamBuffer.PPSBuf)
}
#if LANG_CXX11
void HWParamBuffer::set_ppsbuf(::std::string&& value) {
  set_has_ppsbuf();
  ppsbuf_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.HWParamBuffer.PPSBuf)
}
#endif
void HWParamBuffer::set_ppsbuf(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ppsbuf();
  ppsbuf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.HWParamBuffer.PPSBuf)
}
void HWParamBuffer::set_ppsbuf(const void* value, size_t size) {
  set_has_ppsbuf();
  ppsbuf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.HWParamBuffer.PPSBuf)
}
::std::string* HWParamBuffer::mutable_ppsbuf() {
  set_has_ppsbuf();
  // @@protoc_insertion_point(field_mutable:micromsg.HWParamBuffer.PPSBuf)
  return ppsbuf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HWParamBuffer::release_ppsbuf() {
  // @@protoc_insertion_point(field_release:micromsg.HWParamBuffer.PPSBuf)
  clear_has_ppsbuf();
  return ppsbuf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HWParamBuffer::set_allocated_ppsbuf(::std::string* ppsbuf) {
  if (ppsbuf != NULL) {
    set_has_ppsbuf();
  } else {
    clear_has_ppsbuf();
  }
  ppsbuf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ppsbuf);
  // @@protoc_insertion_point(field_set_allocated:micromsg.HWParamBuffer.PPSBuf)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HWTimeInfo::kDurTimeValueFieldNumber;
const int HWTimeInfo::kDurTimeScaleFieldNumber;
const int HWTimeInfo::kPresentTimeValueFieldNumber;
const int HWTimeInfo::kPresentTimeScaleFieldNumber;
const int HWTimeInfo::kDecodeTimeValueFieldNumber;
const int HWTimeInfo::kDecodeTimeScaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HWTimeInfo::HWTimeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoiphw_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.HWTimeInfo)
}
HWTimeInfo::HWTimeInfo(const HWTimeInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&durtimevalue_, &from.durtimevalue_,
    reinterpret_cast<char*>(&decodetimescale_) -
    reinterpret_cast<char*>(&durtimevalue_) + sizeof(decodetimescale_));
  // @@protoc_insertion_point(copy_constructor:micromsg.HWTimeInfo)
}

void HWTimeInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&durtimevalue_, 0, reinterpret_cast<char*>(&decodetimescale_) -
    reinterpret_cast<char*>(&durtimevalue_) + sizeof(decodetimescale_));
}

HWTimeInfo::~HWTimeInfo() {
  // @@protoc_insertion_point(destructor:micromsg.HWTimeInfo)
  SharedDtor();
}

void HWTimeInfo::SharedDtor() {
}

void HWTimeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HWTimeInfo::descriptor() {
  protobuf_mmvoiphw_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiphw_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HWTimeInfo& HWTimeInfo::default_instance() {
  protobuf_mmvoiphw_2eproto::InitDefaults();
  return *internal_default_instance();
}

HWTimeInfo* HWTimeInfo::New(::google::protobuf::Arena* arena) const {
  HWTimeInfo* n = new HWTimeInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HWTimeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.HWTimeInfo)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&durtimevalue_, 0, reinterpret_cast<char*>(&decodetimescale_) -
      reinterpret_cast<char*>(&durtimevalue_) + sizeof(decodetimescale_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HWTimeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.HWTimeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 DurTimeValue = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_durtimevalue();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &durtimevalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 DurTimeScale = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_durtimescale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &durtimescale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 PresentTimeValue = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_presenttimevalue();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &presenttimevalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 PresentTimeScale = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_presenttimescale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &presenttimescale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 DecodeTimeValue = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_decodetimevalue();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &decodetimevalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 DecodeTimeScale = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_decodetimescale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decodetimescale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.HWTimeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.HWTimeInfo)
  return false;
#undef DO_
}

void HWTimeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.HWTimeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 DurTimeValue = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->durtimevalue(), output);
  }

  // required int32 DurTimeScale = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->durtimescale(), output);
  }

  // required int64 PresentTimeValue = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->presenttimevalue(), output);
  }

  // required int32 PresentTimeScale = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->presenttimescale(), output);
  }

  // required int64 DecodeTimeValue = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->decodetimevalue(), output);
  }

  // required int32 DecodeTimeScale = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->decodetimescale(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.HWTimeInfo)
}

::google::protobuf::uint8* HWTimeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.HWTimeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 DurTimeValue = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->durtimevalue(), target);
  }

  // required int32 DurTimeScale = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->durtimescale(), target);
  }

  // required int64 PresentTimeValue = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->presenttimevalue(), target);
  }

  // required int32 PresentTimeScale = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->presenttimescale(), target);
  }

  // required int64 DecodeTimeValue = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->decodetimevalue(), target);
  }

  // required int32 DecodeTimeScale = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->decodetimescale(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.HWTimeInfo)
  return target;
}

size_t HWTimeInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.HWTimeInfo)
  size_t total_size = 0;

  if (has_durtimevalue()) {
    // required int64 DurTimeValue = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->durtimevalue());
  }

  if (has_presenttimevalue()) {
    // required int64 PresentTimeValue = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->presenttimevalue());
  }

  if (has_durtimescale()) {
    // required int32 DurTimeScale = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->durtimescale());
  }

  if (has_presenttimescale()) {
    // required int32 PresentTimeScale = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->presenttimescale());
  }

  if (has_decodetimevalue()) {
    // required int64 DecodeTimeValue = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->decodetimevalue());
  }

  if (has_decodetimescale()) {
    // required int32 DecodeTimeScale = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->decodetimescale());
  }

  return total_size;
}
size_t HWTimeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.HWTimeInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required int64 DurTimeValue = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->durtimevalue());

    // required int64 PresentTimeValue = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->presenttimevalue());

    // required int32 DurTimeScale = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->durtimescale());

    // required int32 PresentTimeScale = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->presenttimescale());

    // required int64 DecodeTimeValue = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->decodetimevalue());

    // required int32 DecodeTimeScale = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->decodetimescale());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HWTimeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.HWTimeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const HWTimeInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HWTimeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.HWTimeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.HWTimeInfo)
    MergeFrom(*source);
  }
}

void HWTimeInfo::MergeFrom(const HWTimeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.HWTimeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      durtimevalue_ = from.durtimevalue_;
    }
    if (cached_has_bits & 0x00000002u) {
      presenttimevalue_ = from.presenttimevalue_;
    }
    if (cached_has_bits & 0x00000004u) {
      durtimescale_ = from.durtimescale_;
    }
    if (cached_has_bits & 0x00000008u) {
      presenttimescale_ = from.presenttimescale_;
    }
    if (cached_has_bits & 0x00000010u) {
      decodetimevalue_ = from.decodetimevalue_;
    }
    if (cached_has_bits & 0x00000020u) {
      decodetimescale_ = from.decodetimescale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HWTimeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.HWTimeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HWTimeInfo::CopyFrom(const HWTimeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.HWTimeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HWTimeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void HWTimeInfo::Swap(HWTimeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HWTimeInfo::InternalSwap(HWTimeInfo* other) {
  std::swap(durtimevalue_, other->durtimevalue_);
  std::swap(presenttimevalue_, other->presenttimevalue_);
  std::swap(durtimescale_, other->durtimescale_);
  std::swap(presenttimescale_, other->presenttimescale_);
  std::swap(decodetimevalue_, other->decodetimevalue_);
  std::swap(decodetimescale_, other->decodetimescale_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HWTimeInfo::GetMetadata() const {
  protobuf_mmvoiphw_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiphw_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HWTimeInfo

// required int64 DurTimeValue = 1;
bool HWTimeInfo::has_durtimevalue() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HWTimeInfo::set_has_durtimevalue() {
  _has_bits_[0] |= 0x00000001u;
}
void HWTimeInfo::clear_has_durtimevalue() {
  _has_bits_[0] &= ~0x00000001u;
}
void HWTimeInfo::clear_durtimevalue() {
  durtimevalue_ = GOOGLE_LONGLONG(0);
  clear_has_durtimevalue();
}
::google::protobuf::int64 HWTimeInfo::durtimevalue() const {
  // @@protoc_insertion_point(field_get:micromsg.HWTimeInfo.DurTimeValue)
  return durtimevalue_;
}
void HWTimeInfo::set_durtimevalue(::google::protobuf::int64 value) {
  set_has_durtimevalue();
  durtimevalue_ = value;
  // @@protoc_insertion_point(field_set:micromsg.HWTimeInfo.DurTimeValue)
}

// required int32 DurTimeScale = 2;
bool HWTimeInfo::has_durtimescale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HWTimeInfo::set_has_durtimescale() {
  _has_bits_[0] |= 0x00000004u;
}
void HWTimeInfo::clear_has_durtimescale() {
  _has_bits_[0] &= ~0x00000004u;
}
void HWTimeInfo::clear_durtimescale() {
  durtimescale_ = 0;
  clear_has_durtimescale();
}
::google::protobuf::int32 HWTimeInfo::durtimescale() const {
  // @@protoc_insertion_point(field_get:micromsg.HWTimeInfo.DurTimeScale)
  return durtimescale_;
}
void HWTimeInfo::set_durtimescale(::google::protobuf::int32 value) {
  set_has_durtimescale();
  durtimescale_ = value;
  // @@protoc_insertion_point(field_set:micromsg.HWTimeInfo.DurTimeScale)
}

// required int64 PresentTimeValue = 3;
bool HWTimeInfo::has_presenttimevalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HWTimeInfo::set_has_presenttimevalue() {
  _has_bits_[0] |= 0x00000002u;
}
void HWTimeInfo::clear_has_presenttimevalue() {
  _has_bits_[0] &= ~0x00000002u;
}
void HWTimeInfo::clear_presenttimevalue() {
  presenttimevalue_ = GOOGLE_LONGLONG(0);
  clear_has_presenttimevalue();
}
::google::protobuf::int64 HWTimeInfo::presenttimevalue() const {
  // @@protoc_insertion_point(field_get:micromsg.HWTimeInfo.PresentTimeValue)
  return presenttimevalue_;
}
void HWTimeInfo::set_presenttimevalue(::google::protobuf::int64 value) {
  set_has_presenttimevalue();
  presenttimevalue_ = value;
  // @@protoc_insertion_point(field_set:micromsg.HWTimeInfo.PresentTimeValue)
}

// required int32 PresentTimeScale = 4;
bool HWTimeInfo::has_presenttimescale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void HWTimeInfo::set_has_presenttimescale() {
  _has_bits_[0] |= 0x00000008u;
}
void HWTimeInfo::clear_has_presenttimescale() {
  _has_bits_[0] &= ~0x00000008u;
}
void HWTimeInfo::clear_presenttimescale() {
  presenttimescale_ = 0;
  clear_has_presenttimescale();
}
::google::protobuf::int32 HWTimeInfo::presenttimescale() const {
  // @@protoc_insertion_point(field_get:micromsg.HWTimeInfo.PresentTimeScale)
  return presenttimescale_;
}
void HWTimeInfo::set_presenttimescale(::google::protobuf::int32 value) {
  set_has_presenttimescale();
  presenttimescale_ = value;
  // @@protoc_insertion_point(field_set:micromsg.HWTimeInfo.PresentTimeScale)
}

// required int64 DecodeTimeValue = 5;
bool HWTimeInfo::has_decodetimevalue() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void HWTimeInfo::set_has_decodetimevalue() {
  _has_bits_[0] |= 0x00000010u;
}
void HWTimeInfo::clear_has_decodetimevalue() {
  _has_bits_[0] &= ~0x00000010u;
}
void HWTimeInfo::clear_decodetimevalue() {
  decodetimevalue_ = GOOGLE_LONGLONG(0);
  clear_has_decodetimevalue();
}
::google::protobuf::int64 HWTimeInfo::decodetimevalue() const {
  // @@protoc_insertion_point(field_get:micromsg.HWTimeInfo.DecodeTimeValue)
  return decodetimevalue_;
}
void HWTimeInfo::set_decodetimevalue(::google::protobuf::int64 value) {
  set_has_decodetimevalue();
  decodetimevalue_ = value;
  // @@protoc_insertion_point(field_set:micromsg.HWTimeInfo.DecodeTimeValue)
}

// required int32 DecodeTimeScale = 6;
bool HWTimeInfo::has_decodetimescale() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void HWTimeInfo::set_has_decodetimescale() {
  _has_bits_[0] |= 0x00000020u;
}
void HWTimeInfo::clear_has_decodetimescale() {
  _has_bits_[0] &= ~0x00000020u;
}
void HWTimeInfo::clear_decodetimescale() {
  decodetimescale_ = 0;
  clear_has_decodetimescale();
}
::google::protobuf::int32 HWTimeInfo::decodetimescale() const {
  // @@protoc_insertion_point(field_get:micromsg.HWTimeInfo.DecodeTimeScale)
  return decodetimescale_;
}
void HWTimeInfo::set_decodetimescale(::google::protobuf::int32 value) {
  set_has_decodetimescale();
  decodetimescale_ = value;
  // @@protoc_insertion_point(field_set:micromsg.HWTimeInfo.DecodeTimeScale)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HWFrameBuffer::kRawBufFieldNumber;
const int HWFrameBuffer::kSamplesCountFieldNumber;
const int HWFrameBuffer::kTimeInfoFieldNumber;
const int HWFrameBuffer::kSampleSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HWFrameBuffer::HWFrameBuffer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoiphw_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.HWFrameBuffer)
}
HWFrameBuffer::HWFrameBuffer(const HWFrameBuffer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      timeinfo_(from.timeinfo_),
      samplesize_(from.samplesize_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rawbuf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rawbuf()) {
    rawbuf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rawbuf_);
  }
  samplescount_ = from.samplescount_;
  // @@protoc_insertion_point(copy_constructor:micromsg.HWFrameBuffer)
}

void HWFrameBuffer::SharedCtor() {
  _cached_size_ = 0;
  rawbuf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  samplescount_ = 0;
}

HWFrameBuffer::~HWFrameBuffer() {
  // @@protoc_insertion_point(destructor:micromsg.HWFrameBuffer)
  SharedDtor();
}

void HWFrameBuffer::SharedDtor() {
  rawbuf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HWFrameBuffer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HWFrameBuffer::descriptor() {
  protobuf_mmvoiphw_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiphw_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HWFrameBuffer& HWFrameBuffer::default_instance() {
  protobuf_mmvoiphw_2eproto::InitDefaults();
  return *internal_default_instance();
}

HWFrameBuffer* HWFrameBuffer::New(::google::protobuf::Arena* arena) const {
  HWFrameBuffer* n = new HWFrameBuffer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HWFrameBuffer::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.HWFrameBuffer)
  timeinfo_.Clear();
  samplesize_.Clear();
  if (has_rawbuf()) {
    GOOGLE_DCHECK(!rawbuf_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*rawbuf_.UnsafeRawStringPointer())->clear();
  }
  samplescount_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HWFrameBuffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.HWFrameBuffer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes RawBuf = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rawbuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 SamplesCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_samplescount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &samplescount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.HWTimeInfo TimeInfo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_timeinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 SampleSize = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32u, input, this->mutable_samplesize())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(34u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_samplesize())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.HWFrameBuffer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.HWFrameBuffer)
  return false;
#undef DO_
}

void HWFrameBuffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.HWFrameBuffer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes RawBuf = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->rawbuf(), output);
  }

  // required int32 SamplesCount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->samplescount(), output);
  }

  // repeated .micromsg.HWTimeInfo TimeInfo = 3;
  for (unsigned int i = 0, n = this->timeinfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->timeinfo(i), output);
  }

  // repeated int32 SampleSize = 4;
  for (int i = 0, n = this->samplesize_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->samplesize(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.HWFrameBuffer)
}

::google::protobuf::uint8* HWFrameBuffer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.HWFrameBuffer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes RawBuf = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->rawbuf(), target);
  }

  // required int32 SamplesCount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->samplescount(), target);
  }

  // repeated .micromsg.HWTimeInfo TimeInfo = 3;
  for (unsigned int i = 0, n = this->timeinfo_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->timeinfo(i), deterministic, target);
  }

  // repeated int32 SampleSize = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(4, this->samplesize_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.HWFrameBuffer)
  return target;
}

size_t HWFrameBuffer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.HWFrameBuffer)
  size_t total_size = 0;

  if (has_rawbuf()) {
    // required bytes RawBuf = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->rawbuf());
  }

  if (has_samplescount()) {
    // required int32 SamplesCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->samplescount());
  }

  return total_size;
}
size_t HWFrameBuffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.HWFrameBuffer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes RawBuf = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->rawbuf());

    // required int32 SamplesCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->samplescount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.HWTimeInfo TimeInfo = 3;
  {
    unsigned int count = this->timeinfo_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timeinfo(i));
    }
  }

  // repeated int32 SampleSize = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->samplesize_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->samplesize_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HWFrameBuffer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.HWFrameBuffer)
  GOOGLE_DCHECK_NE(&from, this);
  const HWFrameBuffer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HWFrameBuffer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.HWFrameBuffer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.HWFrameBuffer)
    MergeFrom(*source);
  }
}

void HWFrameBuffer::MergeFrom(const HWFrameBuffer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.HWFrameBuffer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  timeinfo_.MergeFrom(from.timeinfo_);
  samplesize_.MergeFrom(from.samplesize_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_rawbuf();
      rawbuf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rawbuf_);
    }
    if (cached_has_bits & 0x00000002u) {
      samplescount_ = from.samplescount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HWFrameBuffer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.HWFrameBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HWFrameBuffer::CopyFrom(const HWFrameBuffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.HWFrameBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HWFrameBuffer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->timeinfo())) return false;
  return true;
}

void HWFrameBuffer::Swap(HWFrameBuffer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HWFrameBuffer::InternalSwap(HWFrameBuffer* other) {
  timeinfo_.InternalSwap(&other->timeinfo_);
  samplesize_.InternalSwap(&other->samplesize_);
  rawbuf_.Swap(&other->rawbuf_);
  std::swap(samplescount_, other->samplescount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HWFrameBuffer::GetMetadata() const {
  protobuf_mmvoiphw_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiphw_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HWFrameBuffer

// required bytes RawBuf = 1;
bool HWFrameBuffer::has_rawbuf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HWFrameBuffer::set_has_rawbuf() {
  _has_bits_[0] |= 0x00000001u;
}
void HWFrameBuffer::clear_has_rawbuf() {
  _has_bits_[0] &= ~0x00000001u;
}
void HWFrameBuffer::clear_rawbuf() {
  rawbuf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rawbuf();
}
const ::std::string& HWFrameBuffer::rawbuf() const {
  // @@protoc_insertion_point(field_get:micromsg.HWFrameBuffer.RawBuf)
  return rawbuf_.GetNoArena();
}
void HWFrameBuffer::set_rawbuf(const ::std::string& value) {
  set_has_rawbuf();
  rawbuf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.HWFrameBuffer.RawBuf)
}
#if LANG_CXX11
void HWFrameBuffer::set_rawbuf(::std::string&& value) {
  set_has_rawbuf();
  rawbuf_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.HWFrameBuffer.RawBuf)
}
#endif
void HWFrameBuffer::set_rawbuf(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rawbuf();
  rawbuf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.HWFrameBuffer.RawBuf)
}
void HWFrameBuffer::set_rawbuf(const void* value, size_t size) {
  set_has_rawbuf();
  rawbuf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.HWFrameBuffer.RawBuf)
}
::std::string* HWFrameBuffer::mutable_rawbuf() {
  set_has_rawbuf();
  // @@protoc_insertion_point(field_mutable:micromsg.HWFrameBuffer.RawBuf)
  return rawbuf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HWFrameBuffer::release_rawbuf() {
  // @@protoc_insertion_point(field_release:micromsg.HWFrameBuffer.RawBuf)
  clear_has_rawbuf();
  return rawbuf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HWFrameBuffer::set_allocated_rawbuf(::std::string* rawbuf) {
  if (rawbuf != NULL) {
    set_has_rawbuf();
  } else {
    clear_has_rawbuf();
  }
  rawbuf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rawbuf);
  // @@protoc_insertion_point(field_set_allocated:micromsg.HWFrameBuffer.RawBuf)
}

// required int32 SamplesCount = 2;
bool HWFrameBuffer::has_samplescount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HWFrameBuffer::set_has_samplescount() {
  _has_bits_[0] |= 0x00000002u;
}
void HWFrameBuffer::clear_has_samplescount() {
  _has_bits_[0] &= ~0x00000002u;
}
void HWFrameBuffer::clear_samplescount() {
  samplescount_ = 0;
  clear_has_samplescount();
}
::google::protobuf::int32 HWFrameBuffer::samplescount() const {
  // @@protoc_insertion_point(field_get:micromsg.HWFrameBuffer.SamplesCount)
  return samplescount_;
}
void HWFrameBuffer::set_samplescount(::google::protobuf::int32 value) {
  set_has_samplescount();
  samplescount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.HWFrameBuffer.SamplesCount)
}

// repeated .micromsg.HWTimeInfo TimeInfo = 3;
int HWFrameBuffer::timeinfo_size() const {
  return timeinfo_.size();
}
void HWFrameBuffer::clear_timeinfo() {
  timeinfo_.Clear();
}
const ::micromsg::HWTimeInfo& HWFrameBuffer::timeinfo(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.HWFrameBuffer.TimeInfo)
  return timeinfo_.Get(index);
}
::micromsg::HWTimeInfo* HWFrameBuffer::mutable_timeinfo(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.HWFrameBuffer.TimeInfo)
  return timeinfo_.Mutable(index);
}
::micromsg::HWTimeInfo* HWFrameBuffer::add_timeinfo() {
  // @@protoc_insertion_point(field_add:micromsg.HWFrameBuffer.TimeInfo)
  return timeinfo_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::HWTimeInfo >*
HWFrameBuffer::mutable_timeinfo() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.HWFrameBuffer.TimeInfo)
  return &timeinfo_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::HWTimeInfo >&
HWFrameBuffer::timeinfo() const {
  // @@protoc_insertion_point(field_list:micromsg.HWFrameBuffer.TimeInfo)
  return timeinfo_;
}

// repeated int32 SampleSize = 4;
int HWFrameBuffer::samplesize_size() const {
  return samplesize_.size();
}
void HWFrameBuffer::clear_samplesize() {
  samplesize_.Clear();
}
::google::protobuf::int32 HWFrameBuffer::samplesize(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.HWFrameBuffer.SampleSize)
  return samplesize_.Get(index);
}
void HWFrameBuffer::set_samplesize(int index, ::google::protobuf::int32 value) {
  samplesize_.Set(index, value);
  // @@protoc_insertion_point(field_set:micromsg.HWFrameBuffer.SampleSize)
}
void HWFrameBuffer::add_samplesize(::google::protobuf::int32 value) {
  samplesize_.Add(value);
  // @@protoc_insertion_point(field_add:micromsg.HWFrameBuffer.SampleSize)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HWFrameBuffer::samplesize() const {
  // @@protoc_insertion_point(field_list:micromsg.HWFrameBuffer.SampleSize)
  return samplesize_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HWFrameBuffer::mutable_samplesize() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.HWFrameBuffer.SampleSize)
  return &samplesize_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VOIPRUDPCmd::kCmdTypeFieldNumber;
const int VOIPRUDPCmd::kCmdBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VOIPRUDPCmd::VOIPRUDPCmd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmvoiphw_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.VOIPRUDPCmd)
}
VOIPRUDPCmd::VOIPRUDPCmd(const VOIPRUDPCmd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cmdbuffer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cmdbuffer()) {
    cmdbuffer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmdbuffer_);
  }
  cmdtype_ = from.cmdtype_;
  // @@protoc_insertion_point(copy_constructor:micromsg.VOIPRUDPCmd)
}

void VOIPRUDPCmd::SharedCtor() {
  _cached_size_ = 0;
  cmdbuffer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmdtype_ = 0;
}

VOIPRUDPCmd::~VOIPRUDPCmd() {
  // @@protoc_insertion_point(destructor:micromsg.VOIPRUDPCmd)
  SharedDtor();
}

void VOIPRUDPCmd::SharedDtor() {
  cmdbuffer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VOIPRUDPCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VOIPRUDPCmd::descriptor() {
  protobuf_mmvoiphw_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiphw_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VOIPRUDPCmd& VOIPRUDPCmd::default_instance() {
  protobuf_mmvoiphw_2eproto::InitDefaults();
  return *internal_default_instance();
}

VOIPRUDPCmd* VOIPRUDPCmd::New(::google::protobuf::Arena* arena) const {
  VOIPRUDPCmd* n = new VOIPRUDPCmd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VOIPRUDPCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.VOIPRUDPCmd)
  if (has_cmdbuffer()) {
    GOOGLE_DCHECK(!cmdbuffer_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*cmdbuffer_.UnsafeRawStringPointer())->clear();
  }
  cmdtype_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VOIPRUDPCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.VOIPRUDPCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CmdType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_cmdtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmdtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes CmdBuffer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cmdbuffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.VOIPRUDPCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.VOIPRUDPCmd)
  return false;
#undef DO_
}

void VOIPRUDPCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.VOIPRUDPCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 CmdType = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmdtype(), output);
  }

  // optional bytes CmdBuffer = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->cmdbuffer(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.VOIPRUDPCmd)
}

::google::protobuf::uint8* VOIPRUDPCmd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.VOIPRUDPCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 CmdType = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmdtype(), target);
  }

  // optional bytes CmdBuffer = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->cmdbuffer(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.VOIPRUDPCmd)
  return target;
}

size_t VOIPRUDPCmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.VOIPRUDPCmd)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required int32 CmdType = 1;
  if (has_cmdtype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cmdtype());
  }
  // optional bytes CmdBuffer = 2;
  if (has_cmdbuffer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cmdbuffer());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VOIPRUDPCmd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.VOIPRUDPCmd)
  GOOGLE_DCHECK_NE(&from, this);
  const VOIPRUDPCmd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VOIPRUDPCmd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.VOIPRUDPCmd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.VOIPRUDPCmd)
    MergeFrom(*source);
  }
}

void VOIPRUDPCmd::MergeFrom(const VOIPRUDPCmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.VOIPRUDPCmd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_cmdbuffer();
      cmdbuffer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmdbuffer_);
    }
    if (cached_has_bits & 0x00000002u) {
      cmdtype_ = from.cmdtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VOIPRUDPCmd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.VOIPRUDPCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VOIPRUDPCmd::CopyFrom(const VOIPRUDPCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.VOIPRUDPCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VOIPRUDPCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void VOIPRUDPCmd::Swap(VOIPRUDPCmd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VOIPRUDPCmd::InternalSwap(VOIPRUDPCmd* other) {
  cmdbuffer_.Swap(&other->cmdbuffer_);
  std::swap(cmdtype_, other->cmdtype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VOIPRUDPCmd::GetMetadata() const {
  protobuf_mmvoiphw_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmvoiphw_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VOIPRUDPCmd

// required int32 CmdType = 1;
bool VOIPRUDPCmd::has_cmdtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VOIPRUDPCmd::set_has_cmdtype() {
  _has_bits_[0] |= 0x00000002u;
}
void VOIPRUDPCmd::clear_has_cmdtype() {
  _has_bits_[0] &= ~0x00000002u;
}
void VOIPRUDPCmd::clear_cmdtype() {
  cmdtype_ = 0;
  clear_has_cmdtype();
}
::google::protobuf::int32 VOIPRUDPCmd::cmdtype() const {
  // @@protoc_insertion_point(field_get:micromsg.VOIPRUDPCmd.CmdType)
  return cmdtype_;
}
void VOIPRUDPCmd::set_cmdtype(::google::protobuf::int32 value) {
  set_has_cmdtype();
  cmdtype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.VOIPRUDPCmd.CmdType)
}

// optional bytes CmdBuffer = 2;
bool VOIPRUDPCmd::has_cmdbuffer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VOIPRUDPCmd::set_has_cmdbuffer() {
  _has_bits_[0] |= 0x00000001u;
}
void VOIPRUDPCmd::clear_has_cmdbuffer() {
  _has_bits_[0] &= ~0x00000001u;
}
void VOIPRUDPCmd::clear_cmdbuffer() {
  cmdbuffer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cmdbuffer();
}
const ::std::string& VOIPRUDPCmd::cmdbuffer() const {
  // @@protoc_insertion_point(field_get:micromsg.VOIPRUDPCmd.CmdBuffer)
  return cmdbuffer_.GetNoArena();
}
void VOIPRUDPCmd::set_cmdbuffer(const ::std::string& value) {
  set_has_cmdbuffer();
  cmdbuffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.VOIPRUDPCmd.CmdBuffer)
}
#if LANG_CXX11
void VOIPRUDPCmd::set_cmdbuffer(::std::string&& value) {
  set_has_cmdbuffer();
  cmdbuffer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.VOIPRUDPCmd.CmdBuffer)
}
#endif
void VOIPRUDPCmd::set_cmdbuffer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cmdbuffer();
  cmdbuffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.VOIPRUDPCmd.CmdBuffer)
}
void VOIPRUDPCmd::set_cmdbuffer(const void* value, size_t size) {
  set_has_cmdbuffer();
  cmdbuffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.VOIPRUDPCmd.CmdBuffer)
}
::std::string* VOIPRUDPCmd::mutable_cmdbuffer() {
  set_has_cmdbuffer();
  // @@protoc_insertion_point(field_mutable:micromsg.VOIPRUDPCmd.CmdBuffer)
  return cmdbuffer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VOIPRUDPCmd::release_cmdbuffer() {
  // @@protoc_insertion_point(field_release:micromsg.VOIPRUDPCmd.CmdBuffer)
  clear_has_cmdbuffer();
  return cmdbuffer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VOIPRUDPCmd::set_allocated_cmdbuffer(::std::string* cmdbuffer) {
  if (cmdbuffer != NULL) {
    set_has_cmdbuffer();
  } else {
    clear_has_cmdbuffer();
  }
  cmdbuffer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmdbuffer);
  // @@protoc_insertion_point(field_set_allocated:micromsg.VOIPRUDPCmd.CmdBuffer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace micromsg

// @@protoc_insertion_point(global_scope)
